!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_15.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, "dlti.endianness" = "little", "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc150)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc151)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc152)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc7)
  cir.func private @printIntLine(!s32i) loc(#loc153)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc154)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_15_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc156)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc157)
    %2 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc18)
    cir.store %2, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc158)
    cir.br ^bb1 loc(#loc159)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.int<6> : !s32i loc(#loc22)
    cir.br ^bb2 loc(#loc20)
  ^bb2:  // pred: ^bb1
    cir.switch.flat %3 : !s32i, ^bb9 [
      6: ^bb4
    ] loc(#loc20)
  ^bb3:  // no predecessors
    cir.br ^bb4 loc(#loc23)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    %4 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc24)
    %5 = cir.const #cir.int<10> : !s32i loc(#loc25)
    %6 = cir.cast(integral, %5 : !s32i), !u64i loc(#loc25)
    %7 = cir.call @malloc(%6) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc24)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc160)
    cir.store %8, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc161)
    cir.br ^bb5 loc(#loc162)
  ^bb5:  // pred: ^bb4
    %9 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc30)
    %10 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc31)
    %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc31)
    %12 = cir.cmp(eq, %9, %11) : !cir.ptr<!s32i>, !cir.bool loc(#loc163)
    cir.brcond %12 ^bb6, ^bb7 loc(#loc164)
  ^bb6:  // pred: ^bb5
    %13 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc33)
    %14 = cir.const #cir.int<1> : !s32i loc(#loc34)
    %15 = cir.unary(minus, %14) nsw : !s32i, !s32i loc(#loc35)
    cir.call @exit(%15) : (!s32i) -> () extra(#fn_attr) loc(#loc33)
    cir.br ^bb7 loc(#loc29)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc29)
  ^bb8:  // pred: ^bb7
    cir.br ^bb10 loc(#loc36)
  ^bb9:  // pred: ^bb2
    %16 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc7)
    %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc7)
    cir.call @printLine(%17) : (!cir.ptr<!s8i>) -> () loc(#loc37)
    cir.br ^bb10 loc(#loc38)
  ^bb10:  // 2 preds: ^bb8, ^bb9
    cir.br ^bb11 loc(#loc21)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc165)
  ^bb12:  // pred: ^bb11
    %18 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc156)
    cir.store %18, %0 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc156)
    %19 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc41)
    %20 = cir.cast(bitcast, %19 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc41)
    %21 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc42)
    %22 = cir.cast(bitcast, %21 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc42)
    %23 = cir.const #cir.int<10> : !s32i loc(#loc43)
    %24 = cir.cast(integral, %23 : !s32i), !u64i loc(#loc43)
    %25 = cir.const #cir.int<4> : !u64i loc(#loc166)
    %26 = cir.binop(mul, %24, %25) : !u64i loc(#loc167)
    cir.libc.memcpy %26 bytes from %22 to %20 : !u64i, !cir.ptr<!void> -> !cir.ptr<!void> loc(#loc168)
    %27 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc48)
    %28 = cir.const #cir.int<0> : !s32i loc(#loc49)
    %29 = cir.ptr_stride(%27 : !cir.ptr<!s32i>, %28 : !s32i), !cir.ptr<!s32i> loc(#loc50)
    %30 = cir.load %29 : !cir.ptr<!s32i>, !s32i loc(#loc48)
    cir.call @printIntLine(%30) : (!s32i) -> () loc(#loc51)
    %31 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc52)
    %32 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc53)
    %33 = cir.cast(bitcast, %32 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc53)
    cir.call @free(%33) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc52)
    cir.br ^bb13 loc(#loc40)
  ^bb13:  // pred: ^bb12
    cir.return loc(#loc13)
  } loc(#loc155)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_15_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<()>> loc(#loc170)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc56)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<()>> loc(#loc171)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc58)
    cir.return loc(#loc55)
  } loc(#loc169)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc173)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc174)
    %2 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc66)
    cir.store %2, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc175)
    cir.br ^bb1 loc(#loc176)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.int<5> : !s32i loc(#loc70)
    cir.br ^bb2 loc(#loc68)
  ^bb2:  // pred: ^bb1
    cir.switch.flat %3 : !s32i, ^bb5 [
      6: ^bb4
    ] loc(#loc68)
  ^bb3:  // no predecessors
    cir.br ^bb4 loc(#loc71)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc72)
    %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc72)
    cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc73)
    cir.br ^bb10 loc(#loc74)
  ^bb5:  // pred: ^bb2
    %6 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc75)
    %7 = cir.const #cir.int<10> : !s32i loc(#loc76)
    %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc76)
    %9 = cir.const #cir.int<4> : !u64i loc(#loc177)
    %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc178)
    %11 = cir.call @malloc(%10) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc75)
    %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc179)
    cir.store %12, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc180)
    cir.br ^bb6 loc(#loc181)
  ^bb6:  // pred: ^bb5
    %13 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc83)
    %14 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc84)
    %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc84)
    %16 = cir.cmp(eq, %13, %15) : !cir.ptr<!s32i>, !cir.bool loc(#loc182)
    cir.brcond %16 ^bb7, ^bb8 loc(#loc183)
  ^bb7:  // pred: ^bb6
    %17 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc86)
    %18 = cir.const #cir.int<1> : !s32i loc(#loc87)
    %19 = cir.unary(minus, %18) nsw : !s32i, !s32i loc(#loc88)
    cir.call @exit(%19) : (!s32i) -> () extra(#fn_attr) loc(#loc86)
    cir.br ^bb8 loc(#loc82)
  ^bb8:  // 2 preds: ^bb6, ^bb7
    cir.br ^bb9 loc(#loc82)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc89)
  ^bb10:  // 2 preds: ^bb4, ^bb9
    cir.br ^bb11 loc(#loc69)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc184)
  ^bb12:  // pred: ^bb11
    %20 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc173)
    cir.store %20, %0 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc173)
    %21 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc92)
    %22 = cir.cast(bitcast, %21 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc92)
    %23 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc93)
    %24 = cir.cast(bitcast, %23 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc93)
    %25 = cir.const #cir.int<10> : !s32i loc(#loc94)
    %26 = cir.cast(integral, %25 : !s32i), !u64i loc(#loc94)
    %27 = cir.const #cir.int<4> : !u64i loc(#loc185)
    %28 = cir.binop(mul, %26, %27) : !u64i loc(#loc186)
    cir.libc.memcpy %28 bytes from %24 to %22 : !u64i, !cir.ptr<!void> -> !cir.ptr<!void> loc(#loc187)
    %29 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc99)
    %30 = cir.const #cir.int<0> : !s32i loc(#loc100)
    %31 = cir.ptr_stride(%29 : !cir.ptr<!s32i>, %30 : !s32i), !cir.ptr<!s32i> loc(#loc101)
    %32 = cir.load %31 : !cir.ptr<!s32i>, !s32i loc(#loc99)
    cir.call @printIntLine(%32) : (!s32i) -> () loc(#loc102)
    %33 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc103)
    %34 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc104)
    %35 = cir.cast(bitcast, %34 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc104)
    cir.call @free(%35) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc103)
    cir.br ^bb13 loc(#loc91)
  ^bb13:  // pred: ^bb12
    cir.return loc(#loc61)
  } loc(#loc172)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc189)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc190)
    %2 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc111)
    cir.store %2, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc191)
    cir.br ^bb1 loc(#loc192)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.int<6> : !s32i loc(#loc115)
    cir.br ^bb2 loc(#loc113)
  ^bb2:  // pred: ^bb1
    cir.switch.flat %3 : !s32i, ^bb9 [
      6: ^bb4
    ] loc(#loc113)
  ^bb3:  // no predecessors
    cir.br ^bb4 loc(#loc116)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    %4 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc117)
    %5 = cir.const #cir.int<10> : !s32i loc(#loc118)
    %6 = cir.cast(integral, %5 : !s32i), !u64i loc(#loc118)
    %7 = cir.const #cir.int<4> : !u64i loc(#loc193)
    %8 = cir.binop(mul, %6, %7) : !u64i loc(#loc194)
    %9 = cir.call @malloc(%8) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc117)
    %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc195)
    cir.store %10, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc196)
    cir.br ^bb5 loc(#loc197)
  ^bb5:  // pred: ^bb4
    %11 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc125)
    %12 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc126)
    %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc126)
    %14 = cir.cmp(eq, %11, %13) : !cir.ptr<!s32i>, !cir.bool loc(#loc198)
    cir.brcond %14 ^bb6, ^bb7 loc(#loc199)
  ^bb6:  // pred: ^bb5
    %15 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc128)
    %16 = cir.const #cir.int<1> : !s32i loc(#loc129)
    %17 = cir.unary(minus, %16) nsw : !s32i, !s32i loc(#loc130)
    cir.call @exit(%17) : (!s32i) -> () extra(#fn_attr) loc(#loc128)
    cir.br ^bb7 loc(#loc124)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc124)
  ^bb8:  // pred: ^bb7
    cir.br ^bb10 loc(#loc131)
  ^bb9:  // pred: ^bb2
    %18 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc132)
    %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc132)
    cir.call @printLine(%19) : (!cir.ptr<!s8i>) -> () loc(#loc133)
    cir.br ^bb10 loc(#loc134)
  ^bb10:  // 2 preds: ^bb8, ^bb9
    cir.br ^bb11 loc(#loc114)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc200)
  ^bb12:  // pred: ^bb11
    %20 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc189)
    cir.store %20, %0 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc189)
    %21 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc137)
    %22 = cir.cast(bitcast, %21 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc137)
    %23 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc138)
    %24 = cir.cast(bitcast, %23 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc138)
    %25 = cir.const #cir.int<10> : !s32i loc(#loc139)
    %26 = cir.cast(integral, %25 : !s32i), !u64i loc(#loc139)
    %27 = cir.const #cir.int<4> : !u64i loc(#loc201)
    %28 = cir.binop(mul, %26, %27) : !u64i loc(#loc202)
    cir.libc.memcpy %28 bytes from %24 to %22 : !u64i, !cir.ptr<!void> -> !cir.ptr<!void> loc(#loc203)
    %29 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc144)
    %30 = cir.const #cir.int<0> : !s32i loc(#loc145)
    %31 = cir.ptr_stride(%29 : !cir.ptr<!s32i>, %30 : !s32i), !cir.ptr<!s32i> loc(#loc146)
    %32 = cir.load %31 : !cir.ptr<!s32i>, !s32i loc(#loc144)
    cir.call @printIntLine(%32) : (!s32i) -> () loc(#loc147)
    %33 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc148)
    %34 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc149)
    %35 = cir.cast(bitcast, %34 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc149)
    cir.call @free(%35) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc148)
    cir.br ^bb13 loc(#loc136)
  ^bb13:  // pred: ^bb12
    cir.return loc(#loc106)
  } loc(#loc188)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_15.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc7 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_15.c":34:19)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc9 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc10 = loc("/usr/include/stdlib.h":687:1)
#loc11 = loc("/usr/include/stdlib.h":687:32)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_15.c":21:1)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_15.c":44:1)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_15.c":38:9)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_15.c":38:28)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_15.c":23:5)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_15.c":23:11)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_15.c":24:12)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_15.c":24:5)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_15.c":25:5)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_15.c":36:5)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_15.c":25:12)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_15.c":27:5)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_15.c":29:23)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_15.c":29:30)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_15.c":29:32)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_15.c":29:9)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_15.c":30:9)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_15.c":30:37)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_15.c":30:13)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_15.c":30:21)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_15.c":30:27)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_15.c":30:28)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_15.c":30:34)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_15.c":30:33)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_15.c":31:9)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_15.c":34:9)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_15.c":35:9)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_15.c":37:5)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_15.c":43:5)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_15.c":40:16)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_15.c":40:22)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_15.c":40:30)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_15.c":40:33)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_15.c":40:43)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_15.c":40:9)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_15.c":40:44)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_15.c":41:22)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_15.c":41:27)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_15.c":41:28)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_15.c":41:9)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_15.c":42:9)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_15.c":42:14)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_15.c":102:1)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_15.c":106:1)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_15.c":104:5)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_15.c":104:14)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_15.c":105:5)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_15.c":105:14)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_15.c":51:1)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_15.c":74:1)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_15.c":68:9)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_15.c":68:28)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_15.c":53:5)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_15.c":53:11)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_15.c":54:12)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_15.c":54:5)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_15.c":55:5)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_15.c":66:5)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_15.c":55:12)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_15.c":57:5)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_15.c":59:19)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_15.c":59:9)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_15.c":60:9)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_15.c":63:23)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_15.c":63:30)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_15.c":63:33)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_15.c":63:43)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_15.c":63:44)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_15.c":63:9)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_15.c":64:9)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_15.c":64:37)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_15.c":64:13)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_15.c":64:21)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_15.c":64:27)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_15.c":64:28)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_15.c":64:34)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_15.c":64:33)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_15.c":65:9)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_15.c":67:5)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_15.c":73:5)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_15.c":70:16)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_15.c":70:22)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_15.c":70:30)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_15.c":70:33)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_15.c":70:43)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_15.c":70:9)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_15.c":70:44)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_15.c":71:22)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_15.c":71:27)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_15.c":71:28)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_15.c":71:9)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_15.c":72:9)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_15.c":72:14)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_15.c":77:1)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_15.c":100:1)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_15.c":94:9)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_15.c":94:28)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_15.c":79:5)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_15.c":79:11)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_15.c":80:12)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_15.c":80:5)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_15.c":81:5)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_15.c":92:5)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_15.c":81:12)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_15.c":83:5)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_15.c":85:23)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_15.c":85:30)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_15.c":85:33)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_15.c":85:43)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_15.c":85:44)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_15.c":85:9)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_15.c":86:9)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_15.c":86:37)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_15.c":86:13)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_15.c":86:21)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_15.c":86:27)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_15.c":86:28)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_15.c":86:34)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_15.c":86:33)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_15.c":87:9)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_15.c":90:19)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_15.c":90:9)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_15.c":91:9)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_15.c":93:5)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_15.c":99:5)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_15.c":96:16)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_15.c":96:22)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_15.c":96:30)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_15.c":96:33)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_15.c":96:43)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_15.c":96:9)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_15.c":96:44)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_15.c":97:22)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_15.c":97:27)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_15.c":97:28)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_15.c":97:9)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_15.c":98:9)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_15.c":98:14)
#loc150 = loc(fused[#loc1, #loc2])
#loc151 = loc(fused[#loc3, #loc4])
#loc152 = loc(fused[#loc5, #loc6])
#loc153 = loc(fused[#loc8, #loc9])
#loc154 = loc(fused[#loc10, #loc11])
#loc155 = loc(fused[#loc12, #loc13])
#loc156 = loc(fused[#loc14, #loc15])
#loc157 = loc(fused[#loc16, #loc17])
#loc158 = loc(fused[#loc19, #loc18])
#loc159 = loc(fused[#loc20, #loc21])
#loc160 = loc(fused[#loc24, #loc26])
#loc161 = loc(fused[#loc27, #loc26])
#loc162 = loc(fused[#loc28, #loc29])
#loc163 = loc(fused[#loc30, #loc31])
#loc164 = loc(fused[#loc32, #loc29])
#loc165 = loc(fused[#loc39, #loc40])
#loc166 = loc(fused[#loc44, #loc45])
#loc167 = loc(fused[#loc43, #loc45])
#loc168 = loc(fused[#loc46, #loc47])
#loc169 = loc(fused[#loc54, #loc55])
#loc170 = loc(fused[#loc56, #loc57])
#loc171 = loc(fused[#loc58, #loc59])
#loc172 = loc(fused[#loc60, #loc61])
#loc173 = loc(fused[#loc62, #loc63])
#loc174 = loc(fused[#loc64, #loc65])
#loc175 = loc(fused[#loc67, #loc66])
#loc176 = loc(fused[#loc68, #loc69])
#loc177 = loc(fused[#loc77, #loc78])
#loc178 = loc(fused[#loc76, #loc78])
#loc179 = loc(fused[#loc75, #loc79])
#loc180 = loc(fused[#loc80, #loc79])
#loc181 = loc(fused[#loc81, #loc82])
#loc182 = loc(fused[#loc83, #loc84])
#loc183 = loc(fused[#loc85, #loc82])
#loc184 = loc(fused[#loc90, #loc91])
#loc185 = loc(fused[#loc95, #loc96])
#loc186 = loc(fused[#loc94, #loc96])
#loc187 = loc(fused[#loc97, #loc98])
#loc188 = loc(fused[#loc105, #loc106])
#loc189 = loc(fused[#loc107, #loc108])
#loc190 = loc(fused[#loc109, #loc110])
#loc191 = loc(fused[#loc112, #loc111])
#loc192 = loc(fused[#loc113, #loc114])
#loc193 = loc(fused[#loc119, #loc120])
#loc194 = loc(fused[#loc118, #loc120])
#loc195 = loc(fused[#loc117, #loc121])
#loc196 = loc(fused[#loc122, #loc121])
#loc197 = loc(fused[#loc123, #loc124])
#loc198 = loc(fused[#loc125, #loc126])
#loc199 = loc(fused[#loc127, #loc124])
#loc200 = loc(fused[#loc135, #loc136])
#loc201 = loc(fused[#loc140, #loc141])
#loc202 = loc(fused[#loc139, #loc141])
#loc203 = loc(fused[#loc142, #loc143])
