!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc10 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":25:21)
#loc11 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":25:25)
#loc58 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":61:26)
#loc59 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":61:30)
#loc109 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":96:26)
#loc110 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":96:30)
#loc157 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":126:25)
#loc158 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":126:29)
#true = #cir.bool<true> : !cir.bool
#loc197 = loc(fused[#loc10, #loc11])
#loc218 = loc(fused[#loc58, #loc59])
#loc239 = loc(fused[#loc109, #loc110])
#loc260 = loc(fused[#loc157, #loc158])
module @"/workspaces/juliet-c/testcases/CWE400_Resource_Exhaustion/s02/CWE400_Resource_Exhaustion__rand_for_loop_21.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc193)
  cir.global "private" internal dsolocal @badStatic = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc194)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc195)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Hello\00" : !cir.array<!s8i x 6>> : !cir.array<!s8i x 6> {alignment = 1 : i64} loc(#loc7)
  cir.func internal private @badSink(%arg0: !s32i loc(fused[#loc10, #loc11])) extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count", init] {alignment = 4 : i64} loc(#loc197)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc12)
    cir.scope {
      %1 = cir.get_global @badStatic : !cir.ptr<!s32i> loc(#loc194)
      %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc15)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc15)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i", init] {alignment = 8 : i64} loc(#loc201)
          %5 = cir.const #cir.int<0> : !s32i loc(#loc20)
          %6 = cir.cast(integral, %5 : !s32i), !u64i loc(#loc20)
          cir.store %6, %4 : !u64i, !cir.ptr<!u64i> loc(#loc201)
          cir.scope {
            %7 = cir.const #cir.int<0> : !s32i loc(#loc23)
            %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc23)
            cir.store %8, %4 : !u64i, !cir.ptr<!u64i> loc(#loc203)
            cir.for : cond {
              %9 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc25)
              %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc26)
              %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc26)
              %12 = cir.cmp(lt, %9, %11) : !u64i, !cir.bool loc(#loc204)
              cir.condition(%12) loc(#loc27)
            } body {
              cir.scope {
                %9 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 6>> loc(#loc7)
                %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 6>>), !cir.ptr<!s8i> loc(#loc7)
                cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc29)
              } loc(#loc205)
              cir.yield loc(#loc22)
            } step {
              %9 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc30)
              %10 = cir.unary(inc, %9) : !u64i, !u64i loc(#loc31)
              cir.store %10, %4 : !u64i, !cir.ptr<!u64i> loc(#loc206)
              cir.yield loc(#loc202)
            } loc(#loc202)
          } loc(#loc202)
        } loc(#loc200)
      } loc(#loc199)
    } loc(#loc198)
    cir.return loc(#loc9)
  } loc(#loc196)
  cir.func no_proto @CWE400_Resource_Exhaustion__rand_for_loop_21_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count"] {alignment = 4 : i64} loc(#loc208)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc36)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc37)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc209)
    %3 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc39)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc39)
    %5 = cir.binop(and, %3, %4) : !s32i loc(#loc39)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc39)
    %7 = cir.ternary(%6, true {
      %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc39)
      %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc39)
      %14 = cir.const #cir.int<30> : !s32i loc(#loc39)
      %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc39)
      %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc39)
      %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc39)
      %18 = cir.const #cir.int<15> : !s32i loc(#loc39)
      %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc39)
      %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc39)
      %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc39)
      %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc39)
      %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc39)
      cir.yield %23 : !u32i loc(#loc39)
    }, false {
      %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc39)
      %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc39)
      %14 = cir.const #cir.int<30> : !s32i loc(#loc39)
      %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc39)
      %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc39)
      %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc39)
      %18 = cir.const #cir.int<15> : !s32i loc(#loc39)
      %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc39)
      %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc39)
      %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc39)
      %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc39)
      %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc39)
      %24 = cir.unary(minus, %23) : !u32i, !u32i loc(#loc39)
      %25 = cir.const #cir.int<1> : !s32i loc(#loc39)
      %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc39)
      %27 = cir.binop(sub, %24, %26) : !u32i loc(#loc39)
      cir.yield %27 : !u32i loc(#loc39)
    }) : (!cir.bool) -> !u32i loc(#loc39)
    %8 = cir.cast(integral, %7 : !u32i), !s32i loc(#loc39)
    cir.store %8, %0 : !s32i, !cir.ptr<!s32i> loc(#loc210)
    %9 = cir.const #cir.int<1> : !s32i loc(#loc41)
    %10 = cir.get_global @badStatic : !cir.ptr<!s32i> loc(#loc194)
    cir.store %9, %10 : !s32i, !cir.ptr<!s32i> loc(#loc211)
    %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc43)
    cir.call @badSink(%11) : (!s32i) -> () loc(#loc44)
    cir.return loc(#loc33)
  } loc(#loc207)
  cir.func no_proto @CWE400_Resource_Exhaustion__rand_for_loop_21_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<()>> loc(#loc213)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc47)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<()>> loc(#loc214)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc49)
    %2 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc215)
    cir.call %2() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc51)
    cir.return loc(#loc46)
  } loc(#loc212)
  cir.global "private" internal dsolocal @goodB2G1Static = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc216)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc55)
  cir.func internal private @goodB2G1Sink(%arg0: !s32i loc(fused[#loc58, #loc59])) extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count", init] {alignment = 4 : i64} loc(#loc218)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc60)
    cir.scope {
      %1 = cir.get_global @goodB2G1Static : !cir.ptr<!s32i> loc(#loc216)
      %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc63)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc63)
      cir.if %3 {
        %4 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc55)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc55)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc67)
      } else {
        cir.scope {
          %4 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i", init] {alignment = 8 : i64} loc(#loc222)
          %5 = cir.const #cir.int<0> : !s32i loc(#loc71)
          %6 = cir.cast(integral, %5 : !s32i), !u64i loc(#loc71)
          cir.store %6, %4 : !u64i, !cir.ptr<!u64i> loc(#loc222)
          cir.scope {
            %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc74)
            %8 = cir.const #cir.int<0> : !s32i loc(#loc75)
            %9 = cir.cmp(gt, %7, %8) : !s32i, !cir.bool loc(#loc224)
            %10 = cir.ternary(%9, true {
              %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc77)
              %12 = cir.const #cir.int<20> : !s32i loc(#loc78)
              %13 = cir.cmp(le, %11, %12) : !s32i, !cir.bool loc(#loc225)
              %14 = cir.ternary(%13, true {
                %15 = cir.const #true loc(#loc76)
                cir.yield %15 : !cir.bool loc(#loc76)
              }, false {
                %15 = cir.const #false loc(#loc76)
                cir.yield %15 : !cir.bool loc(#loc76)
              }) : (!cir.bool) -> !cir.bool loc(#loc76)
              cir.yield %14 : !cir.bool loc(#loc76)
            }, false {
              %11 = cir.const #false loc(#loc76)
              cir.yield %11 : !cir.bool loc(#loc76)
            }) : (!cir.bool) -> !cir.bool loc(#loc76)
            cir.if %10 {
              cir.scope {
                %11 = cir.const #cir.int<0> : !s32i loc(#loc82)
                %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc82)
                cir.store %12, %4 : !u64i, !cir.ptr<!u64i> loc(#loc228)
                cir.for : cond {
                  %13 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc84)
                  %14 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc85)
                  %15 = cir.cast(integral, %14 : !s32i), !u64i loc(#loc85)
                  %16 = cir.cmp(lt, %13, %15) : !u64i, !cir.bool loc(#loc229)
                  cir.condition(%16) loc(#loc86)
                } body {
                  cir.scope {
                    %13 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 6>> loc(#loc88)
                    %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 6>>), !cir.ptr<!s8i> loc(#loc88)
                    cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc89)
                  } loc(#loc230)
                  cir.yield loc(#loc81)
                } step {
                  %13 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc90)
                  %14 = cir.unary(inc, %13) : !u64i, !u64i loc(#loc91)
                  cir.store %14, %4 : !u64i, !cir.ptr<!u64i> loc(#loc231)
                  cir.yield loc(#loc227)
                } loc(#loc227)
              } loc(#loc227)
            } loc(#loc226)
          } loc(#loc223)
        } loc(#loc221)
      } loc(#loc220)
    } loc(#loc219)
    cir.return loc(#loc57)
  } loc(#loc217)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count"] {alignment = 4 : i64} loc(#loc233)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc96)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc97)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc234)
    %3 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc99)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc99)
    %5 = cir.binop(and, %3, %4) : !s32i loc(#loc99)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc99)
    %7 = cir.ternary(%6, true {
      %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc99)
      %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc99)
      %14 = cir.const #cir.int<30> : !s32i loc(#loc99)
      %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc99)
      %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc99)
      %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc99)
      %18 = cir.const #cir.int<15> : !s32i loc(#loc99)
      %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc99)
      %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc99)
      %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc99)
      %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc99)
      %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc99)
      cir.yield %23 : !u32i loc(#loc99)
    }, false {
      %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc99)
      %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc99)
      %14 = cir.const #cir.int<30> : !s32i loc(#loc99)
      %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc99)
      %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc99)
      %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc99)
      %18 = cir.const #cir.int<15> : !s32i loc(#loc99)
      %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc99)
      %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc99)
      %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc99)
      %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc99)
      %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc99)
      %24 = cir.unary(minus, %23) : !u32i, !u32i loc(#loc99)
      %25 = cir.const #cir.int<1> : !s32i loc(#loc99)
      %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc99)
      %27 = cir.binop(sub, %24, %26) : !u32i loc(#loc99)
      cir.yield %27 : !u32i loc(#loc99)
    }) : (!cir.bool) -> !u32i loc(#loc99)
    %8 = cir.cast(integral, %7 : !u32i), !s32i loc(#loc99)
    cir.store %8, %0 : !s32i, !cir.ptr<!s32i> loc(#loc235)
    %9 = cir.const #cir.int<0> : !s32i loc(#loc101)
    %10 = cir.get_global @goodB2G1Static : !cir.ptr<!s32i> loc(#loc216)
    cir.store %9, %10 : !s32i, !cir.ptr<!s32i> loc(#loc236)
    %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc103)
    cir.call @goodB2G1Sink(%11) : (!s32i) -> () loc(#loc104)
    cir.return loc(#loc93)
  } loc(#loc232)
  cir.global "private" internal dsolocal @goodB2G2Static = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc237)
  cir.func internal private @goodB2G2Sink(%arg0: !s32i loc(fused[#loc109, #loc110])) extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count", init] {alignment = 4 : i64} loc(#loc239)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc111)
    cir.scope {
      %1 = cir.get_global @goodB2G2Static : !cir.ptr<!s32i> loc(#loc237)
      %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc114)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc114)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i", init] {alignment = 8 : i64} loc(#loc243)
          %5 = cir.const #cir.int<0> : !s32i loc(#loc119)
          %6 = cir.cast(integral, %5 : !s32i), !u64i loc(#loc119)
          cir.store %6, %4 : !u64i, !cir.ptr<!u64i> loc(#loc243)
          cir.scope {
            %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc122)
            %8 = cir.const #cir.int<0> : !s32i loc(#loc123)
            %9 = cir.cmp(gt, %7, %8) : !s32i, !cir.bool loc(#loc245)
            %10 = cir.ternary(%9, true {
              %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc125)
              %12 = cir.const #cir.int<20> : !s32i loc(#loc126)
              %13 = cir.cmp(le, %11, %12) : !s32i, !cir.bool loc(#loc246)
              %14 = cir.ternary(%13, true {
                %15 = cir.const #true loc(#loc124)
                cir.yield %15 : !cir.bool loc(#loc124)
              }, false {
                %15 = cir.const #false loc(#loc124)
                cir.yield %15 : !cir.bool loc(#loc124)
              }) : (!cir.bool) -> !cir.bool loc(#loc124)
              cir.yield %14 : !cir.bool loc(#loc124)
            }, false {
              %11 = cir.const #false loc(#loc124)
              cir.yield %11 : !cir.bool loc(#loc124)
            }) : (!cir.bool) -> !cir.bool loc(#loc124)
            cir.if %10 {
              cir.scope {
                %11 = cir.const #cir.int<0> : !s32i loc(#loc130)
                %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc130)
                cir.store %12, %4 : !u64i, !cir.ptr<!u64i> loc(#loc249)
                cir.for : cond {
                  %13 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc132)
                  %14 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc133)
                  %15 = cir.cast(integral, %14 : !s32i), !u64i loc(#loc133)
                  %16 = cir.cmp(lt, %13, %15) : !u64i, !cir.bool loc(#loc250)
                  cir.condition(%16) loc(#loc134)
                } body {
                  cir.scope {
                    %13 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 6>> loc(#loc136)
                    %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 6>>), !cir.ptr<!s8i> loc(#loc136)
                    cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc137)
                  } loc(#loc251)
                  cir.yield loc(#loc129)
                } step {
                  %13 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc138)
                  %14 = cir.unary(inc, %13) : !u64i, !u64i loc(#loc139)
                  cir.store %14, %4 : !u64i, !cir.ptr<!u64i> loc(#loc252)
                  cir.yield loc(#loc248)
                } loc(#loc248)
              } loc(#loc248)
            } loc(#loc247)
          } loc(#loc244)
        } loc(#loc242)
      } loc(#loc241)
    } loc(#loc240)
    cir.return loc(#loc108)
  } loc(#loc238)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count"] {alignment = 4 : i64} loc(#loc254)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc144)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc145)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc255)
    %3 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc147)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc147)
    %5 = cir.binop(and, %3, %4) : !s32i loc(#loc147)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc147)
    %7 = cir.ternary(%6, true {
      %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc147)
      %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc147)
      %14 = cir.const #cir.int<30> : !s32i loc(#loc147)
      %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc147)
      %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc147)
      %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc147)
      %18 = cir.const #cir.int<15> : !s32i loc(#loc147)
      %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc147)
      %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc147)
      %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc147)
      %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc147)
      %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc147)
      cir.yield %23 : !u32i loc(#loc147)
    }, false {
      %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc147)
      %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc147)
      %14 = cir.const #cir.int<30> : !s32i loc(#loc147)
      %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc147)
      %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc147)
      %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc147)
      %18 = cir.const #cir.int<15> : !s32i loc(#loc147)
      %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc147)
      %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc147)
      %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc147)
      %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc147)
      %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc147)
      %24 = cir.unary(minus, %23) : !u32i, !u32i loc(#loc147)
      %25 = cir.const #cir.int<1> : !s32i loc(#loc147)
      %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc147)
      %27 = cir.binop(sub, %24, %26) : !u32i loc(#loc147)
      cir.yield %27 : !u32i loc(#loc147)
    }) : (!cir.bool) -> !u32i loc(#loc147)
    %8 = cir.cast(integral, %7 : !u32i), !s32i loc(#loc147)
    cir.store %8, %0 : !s32i, !cir.ptr<!s32i> loc(#loc256)
    %9 = cir.const #cir.int<1> : !s32i loc(#loc149)
    %10 = cir.get_global @goodB2G2Static : !cir.ptr<!s32i> loc(#loc237)
    cir.store %9, %10 : !s32i, !cir.ptr<!s32i> loc(#loc257)
    %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc151)
    cir.call @goodB2G2Sink(%11) : (!s32i) -> () loc(#loc152)
    cir.return loc(#loc141)
  } loc(#loc253)
  cir.global "private" internal dsolocal @goodG2BStatic = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc258)
  cir.func internal private @goodG2BSink(%arg0: !s32i loc(fused[#loc157, #loc158])) extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count", init] {alignment = 4 : i64} loc(#loc260)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc159)
    cir.scope {
      %1 = cir.get_global @goodG2BStatic : !cir.ptr<!s32i> loc(#loc258)
      %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc162)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc162)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i", init] {alignment = 8 : i64} loc(#loc264)
          %5 = cir.const #cir.int<0> : !s32i loc(#loc167)
          %6 = cir.cast(integral, %5 : !s32i), !u64i loc(#loc167)
          cir.store %6, %4 : !u64i, !cir.ptr<!u64i> loc(#loc264)
          cir.scope {
            %7 = cir.const #cir.int<0> : !s32i loc(#loc170)
            %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc170)
            cir.store %8, %4 : !u64i, !cir.ptr<!u64i> loc(#loc266)
            cir.for : cond {
              %9 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc172)
              %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc173)
              %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc173)
              %12 = cir.cmp(lt, %9, %11) : !u64i, !cir.bool loc(#loc267)
              cir.condition(%12) loc(#loc174)
            } body {
              cir.scope {
                %9 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 6>> loc(#loc176)
                %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 6>>), !cir.ptr<!s8i> loc(#loc176)
                cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc177)
              } loc(#loc268)
              cir.yield loc(#loc169)
            } step {
              %9 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc178)
              %10 = cir.unary(inc, %9) : !u64i, !u64i loc(#loc179)
              cir.store %10, %4 : !u64i, !cir.ptr<!u64i> loc(#loc269)
              cir.yield loc(#loc265)
            } loc(#loc265)
          } loc(#loc265)
        } loc(#loc263)
      } loc(#loc262)
    } loc(#loc261)
    cir.return loc(#loc156)
  } loc(#loc259)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count"] {alignment = 4 : i64} loc(#loc271)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc184)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc185)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc272)
    %3 = cir.const #cir.int<20> : !s32i loc(#loc187)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc273)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc189)
    %5 = cir.get_global @goodG2BStatic : !cir.ptr<!s32i> loc(#loc258)
    cir.store %4, %5 : !s32i, !cir.ptr<!s32i> loc(#loc274)
    %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc191)
    cir.call @goodG2BSink(%6) : (!s32i) -> () loc(#loc192)
    cir.return loc(#loc181)
  } loc(#loc270)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE400_Resource_Exhaustion/s02/CWE400_Resource_Exhaustion__rand_for_loop_21.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":23:1)
#loc4 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":23:24)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc7 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":34:27)
#loc8 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":25:1)
#loc9 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":38:1)
#loc12 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":26:1)
#loc13 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":27:5)
#loc14 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":37:5)
#loc15 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":27:8)
#loc16 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":28:5)
#loc17 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":29:9)
#loc18 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":36:9)
#loc19 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":30:13)
#loc20 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":30:24)
#loc21 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":32:13)
#loc22 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":35:13)
#loc23 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":32:22)
#loc24 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":32:18)
#loc25 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":32:25)
#loc26 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":32:37)
#loc27 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":32:27)
#loc28 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":33:13)
#loc29 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":34:17)
#loc30 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":32:45)
#loc31 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":32:44)
#loc32 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":40:1)
#loc33 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":49:1)
#loc34 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":42:5)
#loc35 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":42:9)
#loc36 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":44:14)
#loc37 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":44:13)
#loc38 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":44:5)
#loc39 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":46:13)
#loc40 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":46:5)
#loc41 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":47:17)
#loc42 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":47:5)
#loc43 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":48:13)
#loc44 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":48:5)
#loc45 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":152:1)
#loc46 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":157:1)
#loc47 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":154:5)
#loc48 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":154:14)
#loc49 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":155:5)
#loc50 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":155:14)
#loc51 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":156:5)
#loc52 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":156:13)
#loc53 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":56:1)
#loc54 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":56:29)
#loc55 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":66:19)
#loc56 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":61:1)
#loc57 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":82:1)
#loc60 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":62:1)
#loc61 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":63:5)
#loc62 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":81:5)
#loc63 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":63:8)
#loc64 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":64:5)
#loc65 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":67:5)
#loc66 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":69:5)
#loc67 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":66:9)
#loc68 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":70:9)
#loc69 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":80:9)
#loc70 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":71:13)
#loc71 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":71:24)
#loc72 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":73:13)
#loc73 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":79:13)
#loc74 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":73:17)
#loc75 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":73:25)
#loc76 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":73:27)
#loc77 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":73:30)
#loc78 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":73:39)
#loc79 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":74:13)
#loc80 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":75:17)
#loc81 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":78:17)
#loc82 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":75:26)
#loc83 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":75:22)
#loc84 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":75:29)
#loc85 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":75:41)
#loc86 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":75:31)
#loc87 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":76:17)
#loc88 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":77:31)
#loc89 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":77:21)
#loc90 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":75:49)
#loc91 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":75:48)
#loc92 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":84:1)
#loc93 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":93:1)
#loc94 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":86:5)
#loc95 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":86:9)
#loc96 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":88:14)
#loc97 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":88:13)
#loc98 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":88:5)
#loc99 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":90:13)
#loc100 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":90:5)
#loc101 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":91:22)
#loc102 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":91:5)
#loc103 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":92:18)
#loc104 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":92:5)
#loc105 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":57:1)
#loc106 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":57:29)
#loc107 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":96:1)
#loc108 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":112:1)
#loc111 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":97:1)
#loc112 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":98:5)
#loc113 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":111:5)
#loc114 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":98:8)
#loc115 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":99:5)
#loc116 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":100:9)
#loc117 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":110:9)
#loc118 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":101:13)
#loc119 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":101:24)
#loc120 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":103:13)
#loc121 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":109:13)
#loc122 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":103:17)
#loc123 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":103:25)
#loc124 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":103:27)
#loc125 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":103:30)
#loc126 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":103:39)
#loc127 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":104:13)
#loc128 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":105:17)
#loc129 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":108:17)
#loc130 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":105:26)
#loc131 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":105:22)
#loc132 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":105:29)
#loc133 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":105:41)
#loc134 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":105:31)
#loc135 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":106:17)
#loc136 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":107:31)
#loc137 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":107:21)
#loc138 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":105:49)
#loc139 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":105:48)
#loc140 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":114:1)
#loc141 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":123:1)
#loc142 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":116:5)
#loc143 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":116:9)
#loc144 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":118:14)
#loc145 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":118:13)
#loc146 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":118:5)
#loc147 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":120:13)
#loc148 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":120:5)
#loc149 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":121:22)
#loc150 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":121:5)
#loc151 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":122:18)
#loc152 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":122:5)
#loc153 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":58:1)
#loc154 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":58:28)
#loc155 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":126:1)
#loc156 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":139:1)
#loc159 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":127:1)
#loc160 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":128:5)
#loc161 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":138:5)
#loc162 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":128:8)
#loc163 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":129:5)
#loc164 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":130:9)
#loc165 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":137:9)
#loc166 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":131:13)
#loc167 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":131:24)
#loc168 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":133:13)
#loc169 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":136:13)
#loc170 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":133:22)
#loc171 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":133:18)
#loc172 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":133:25)
#loc173 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":133:37)
#loc174 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":133:27)
#loc175 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":134:13)
#loc176 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":135:27)
#loc177 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":135:17)
#loc178 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":133:45)
#loc179 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":133:44)
#loc180 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":141:1)
#loc181 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":150:1)
#loc182 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":143:5)
#loc183 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":143:9)
#loc184 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":145:14)
#loc185 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":145:13)
#loc186 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":145:5)
#loc187 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":147:13)
#loc188 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":147:5)
#loc189 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":148:21)
#loc190 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":148:5)
#loc191 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":149:17)
#loc192 = loc("CWE400_Resource_Exhaustion__rand_for_loop_21.c":149:5)
#loc193 = loc(fused[#loc1, #loc2])
#loc194 = loc(fused[#loc3, #loc4])
#loc195 = loc(fused[#loc5, #loc6])
#loc196 = loc(fused[#loc8, #loc9])
#loc198 = loc(fused[#loc13, #loc14])
#loc199 = loc(fused[#loc16, #loc14])
#loc200 = loc(fused[#loc17, #loc18])
#loc201 = loc(fused[#loc19, #loc20])
#loc202 = loc(fused[#loc21, #loc22])
#loc203 = loc(fused[#loc24, #loc23])
#loc204 = loc(fused[#loc25, #loc26])
#loc205 = loc(fused[#loc28, #loc22])
#loc206 = loc(fused[#loc31, #loc30])
#loc207 = loc(fused[#loc32, #loc33])
#loc208 = loc(fused[#loc34, #loc35])
#loc209 = loc(fused[#loc38, #loc36])
#loc210 = loc(fused[#loc40, #loc39])
#loc211 = loc(fused[#loc42, #loc41])
#loc212 = loc(fused[#loc45, #loc46])
#loc213 = loc(fused[#loc47, #loc48])
#loc214 = loc(fused[#loc49, #loc50])
#loc215 = loc(fused[#loc51, #loc52])
#loc216 = loc(fused[#loc53, #loc54])
#loc217 = loc(fused[#loc56, #loc57])
#loc219 = loc(fused[#loc61, #loc62])
#loc220 = loc(fused[#loc64, #loc65, #loc66, #loc62])
#loc221 = loc(fused[#loc68, #loc69])
#loc222 = loc(fused[#loc70, #loc71])
#loc223 = loc(fused[#loc72, #loc73])
#loc224 = loc(fused[#loc74, #loc75])
#loc225 = loc(fused[#loc77, #loc78])
#loc226 = loc(fused[#loc79, #loc73])
#loc227 = loc(fused[#loc80, #loc81])
#loc228 = loc(fused[#loc83, #loc82])
#loc229 = loc(fused[#loc84, #loc85])
#loc230 = loc(fused[#loc87, #loc81])
#loc231 = loc(fused[#loc91, #loc90])
#loc232 = loc(fused[#loc92, #loc93])
#loc233 = loc(fused[#loc94, #loc95])
#loc234 = loc(fused[#loc98, #loc96])
#loc235 = loc(fused[#loc100, #loc99])
#loc236 = loc(fused[#loc102, #loc101])
#loc237 = loc(fused[#loc105, #loc106])
#loc238 = loc(fused[#loc107, #loc108])
#loc240 = loc(fused[#loc112, #loc113])
#loc241 = loc(fused[#loc115, #loc113])
#loc242 = loc(fused[#loc116, #loc117])
#loc243 = loc(fused[#loc118, #loc119])
#loc244 = loc(fused[#loc120, #loc121])
#loc245 = loc(fused[#loc122, #loc123])
#loc246 = loc(fused[#loc125, #loc126])
#loc247 = loc(fused[#loc127, #loc121])
#loc248 = loc(fused[#loc128, #loc129])
#loc249 = loc(fused[#loc131, #loc130])
#loc250 = loc(fused[#loc132, #loc133])
#loc251 = loc(fused[#loc135, #loc129])
#loc252 = loc(fused[#loc139, #loc138])
#loc253 = loc(fused[#loc140, #loc141])
#loc254 = loc(fused[#loc142, #loc143])
#loc255 = loc(fused[#loc146, #loc144])
#loc256 = loc(fused[#loc148, #loc147])
#loc257 = loc(fused[#loc150, #loc149])
#loc258 = loc(fused[#loc153, #loc154])
#loc259 = loc(fused[#loc155, #loc156])
#loc261 = loc(fused[#loc160, #loc161])
#loc262 = loc(fused[#loc163, #loc161])
#loc263 = loc(fused[#loc164, #loc165])
#loc264 = loc(fused[#loc166, #loc167])
#loc265 = loc(fused[#loc168, #loc169])
#loc266 = loc(fused[#loc171, #loc170])
#loc267 = loc(fused[#loc172, #loc173])
#loc268 = loc(fused[#loc175, #loc169])
#loc269 = loc(fused[#loc179, #loc178])
#loc270 = loc(fused[#loc180, #loc181])
#loc271 = loc(fused[#loc182, #loc183])
#loc272 = loc(fused[#loc186, #loc184])
#loc273 = loc(fused[#loc188, #loc187])
#loc274 = loc(fused[#loc190, #loc189])
