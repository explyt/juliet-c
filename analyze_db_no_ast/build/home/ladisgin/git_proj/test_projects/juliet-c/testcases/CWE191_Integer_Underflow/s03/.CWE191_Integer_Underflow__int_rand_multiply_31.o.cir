!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE191_Integer_Underflow/s03/CWE191_Integer_Underflow__int_rand_multiply_31.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @rand() -> !s32i extra(#fn_attr) loc(#loc101)
  cir.func private  @printIntLine(!s32i) loc(#loc102)
  cir.func no_proto  @CWE191_Integer_Underflow__int_rand_multiply_31_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc104)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc9)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc105)
    %2 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc11)
    %4 = cir.binop(and, %2, %3) : !s32i loc(#loc11)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc11)
    %6 = cir.ternary(%5, true {
      %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
      %9 = cir.cast(integral, %8 : !s32i), !u32i loc(#loc11)
      %10 = cir.const #cir.int<30> : !s32i loc(#loc11)
      %11 = cir.shift(left, %9 : !u32i, %10 : !s32i) -> !u32i loc(#loc11)
      %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
      %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc11)
      %14 = cir.const #cir.int<15> : !s32i loc(#loc11)
      %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc11)
      %16 = cir.binop(xor, %11, %15) : !u32i loc(#loc11)
      %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
      %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc11)
      %19 = cir.binop(xor, %16, %18) : !u32i loc(#loc11)
      cir.yield %19 : !u32i loc(#loc11)
    }, false {
      %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
      %9 = cir.cast(integral, %8 : !s32i), !u32i loc(#loc11)
      %10 = cir.const #cir.int<30> : !s32i loc(#loc11)
      %11 = cir.shift(left, %9 : !u32i, %10 : !s32i) -> !u32i loc(#loc11)
      %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
      %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc11)
      %14 = cir.const #cir.int<15> : !s32i loc(#loc11)
      %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc11)
      %16 = cir.binop(xor, %11, %15) : !u32i loc(#loc11)
      %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
      %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc11)
      %19 = cir.binop(xor, %16, %18) : !u32i loc(#loc11)
      %20 = cir.unary(minus, %19) : !u32i, !u32i loc(#loc11)
      %21 = cir.const #cir.int<1> : !s32i loc(#loc11)
      %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc11)
      %23 = cir.binop(sub, %20, %22) : !u32i loc(#loc11)
      cir.yield %23 : !u32i loc(#loc11)
    }) : (!cir.bool) -> !u32i loc(#loc11)
    %7 = cir.cast(integral, %6 : !u32i), !s32i loc(#loc11)
    cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc106)
    cir.scope {
      %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["dataCopy", init] {alignment = 4 : i64} loc(#loc108)
      %9 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc109)
      %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc16)
      cir.store %10, %8 : !s32i, !cir.ptr<!s32i> loc(#loc108)
      %11 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc18)
      cir.store %11, %9 : !s32i, !cir.ptr<!s32i> loc(#loc109)
      cir.scope {
        %12 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc21)
        %13 = cir.const #cir.int<0> : !s32i loc(#loc22)
        %14 = cir.cmp(lt, %12, %13) : !s32i, !s32i loc(#loc111)
        %15 = cir.cast(int_to_bool, %14 : !s32i), !cir.bool loc(#loc23)
        cir.if %15 {
          %16 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc113)
          %17 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc27)
          %18 = cir.const #cir.int<2> : !s32i loc(#loc26)
          %19 = cir.binop(mul, %17, %18) nsw : !s32i loc(#loc27)
          cir.store %19, %16 : !s32i, !cir.ptr<!s32i> loc(#loc113)
          %20 = cir.load %16 : !cir.ptr<!s32i>, !s32i loc(#loc28)
          cir.call @printIntLine(%20) : (!s32i) -> () loc(#loc29)
        } loc(#loc112)
      } loc(#loc110)
    } loc(#loc107)
    cir.return loc(#loc6)
  } loc(#loc103)
  cir.func no_proto  @CWE191_Integer_Underflow__int_rand_multiply_31_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc115)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc32)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc116)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc34)
    cir.return loc(#loc31)
  } loc(#loc114)
  cir.func no_proto internal private  @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc118)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc40)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc119)
    %2 = cir.const #cir.int<2> : !s32i loc(#loc42)
    %3 = cir.unary(minus, %2) : !s32i, !s32i loc(#loc43)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc120)
    cir.scope {
      %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["dataCopy", init] {alignment = 4 : i64} loc(#loc122)
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc123)
      %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc48)
      cir.store %6, %4 : !s32i, !cir.ptr<!s32i> loc(#loc122)
      %7 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc50)
      cir.store %7, %5 : !s32i, !cir.ptr<!s32i> loc(#loc123)
      cir.scope {
        %8 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc53)
        %9 = cir.const #cir.int<0> : !s32i loc(#loc54)
        %10 = cir.cmp(lt, %8, %9) : !s32i, !s32i loc(#loc125)
        %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc55)
        cir.if %11 {
          %12 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc127)
          %13 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc59)
          %14 = cir.const #cir.int<2> : !s32i loc(#loc58)
          %15 = cir.binop(mul, %13, %14) nsw : !s32i loc(#loc59)
          cir.store %15, %12 : !s32i, !cir.ptr<!s32i> loc(#loc127)
          %16 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc60)
          cir.call @printIntLine(%16) : (!s32i) -> () loc(#loc61)
        } loc(#loc126)
      } loc(#loc124)
    } loc(#loc121)
    cir.return loc(#loc37)
  } loc(#loc117)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc128)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"data value is too small to perform multiplication.\00" : !cir.array<!s8i x 51>> : !cir.array<!s8i x 51> {alignment = 1 : i64} loc(#loc64)
  cir.func no_proto internal private  @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc130)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc69)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc131)
    %2 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc71)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc71)
    %4 = cir.binop(and, %2, %3) : !s32i loc(#loc71)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc71)
    %6 = cir.ternary(%5, true {
      %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc71)
      %9 = cir.cast(integral, %8 : !s32i), !u32i loc(#loc71)
      %10 = cir.const #cir.int<30> : !s32i loc(#loc71)
      %11 = cir.shift(left, %9 : !u32i, %10 : !s32i) -> !u32i loc(#loc71)
      %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc71)
      %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc71)
      %14 = cir.const #cir.int<15> : !s32i loc(#loc71)
      %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc71)
      %16 = cir.binop(xor, %11, %15) : !u32i loc(#loc71)
      %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc71)
      %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc71)
      %19 = cir.binop(xor, %16, %18) : !u32i loc(#loc71)
      cir.yield %19 : !u32i loc(#loc71)
    }, false {
      %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc71)
      %9 = cir.cast(integral, %8 : !s32i), !u32i loc(#loc71)
      %10 = cir.const #cir.int<30> : !s32i loc(#loc71)
      %11 = cir.shift(left, %9 : !u32i, %10 : !s32i) -> !u32i loc(#loc71)
      %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc71)
      %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc71)
      %14 = cir.const #cir.int<15> : !s32i loc(#loc71)
      %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc71)
      %16 = cir.binop(xor, %11, %15) : !u32i loc(#loc71)
      %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc71)
      %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc71)
      %19 = cir.binop(xor, %16, %18) : !u32i loc(#loc71)
      %20 = cir.unary(minus, %19) : !u32i, !u32i loc(#loc71)
      %21 = cir.const #cir.int<1> : !s32i loc(#loc71)
      %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc71)
      %23 = cir.binop(sub, %20, %22) : !u32i loc(#loc71)
      cir.yield %23 : !u32i loc(#loc71)
    }) : (!cir.bool) -> !u32i loc(#loc71)
    %7 = cir.cast(integral, %6 : !u32i), !s32i loc(#loc71)
    cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc132)
    cir.scope {
      %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["dataCopy", init] {alignment = 4 : i64} loc(#loc134)
      %9 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc135)
      %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc76)
      cir.store %10, %8 : !s32i, !cir.ptr<!s32i> loc(#loc134)
      %11 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc78)
      cir.store %11, %9 : !s32i, !cir.ptr<!s32i> loc(#loc135)
      cir.scope {
        %12 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc81)
        %13 = cir.const #cir.int<0> : !s32i loc(#loc82)
        %14 = cir.cmp(lt, %12, %13) : !s32i, !s32i loc(#loc137)
        %15 = cir.cast(int_to_bool, %14 : !s32i), !cir.bool loc(#loc83)
        cir.if %15 {
          cir.scope {
            %16 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc87)
            %17 = cir.const #cir.int<2147483647> : !s32i loc(#loc88)
            %18 = cir.unary(minus, %17) : !s32i, !s32i loc(#loc88)
            %19 = cir.const #cir.int<1> : !s32i loc(#loc88)
            %20 = cir.binop(sub, %18, %19) nsw : !s32i loc(#loc88)
            %21 = cir.const #cir.int<2> : !s32i loc(#loc89)
            %22 = cir.binop(div, %20, %21) : !s32i loc(#loc140)
            %23 = cir.cmp(gt, %16, %22) : !s32i, !s32i loc(#loc141)
            %24 = cir.cast(int_to_bool, %23 : !s32i), !cir.bool loc(#loc91)
            cir.if %24 {
              %25 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc143)
              %26 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc97)
              %27 = cir.const #cir.int<2> : !s32i loc(#loc96)
              %28 = cir.binop(mul, %26, %27) nsw : !s32i loc(#loc97)
              cir.store %28, %25 : !s32i, !cir.ptr<!s32i> loc(#loc143)
              %29 = cir.load %25 : !cir.ptr<!s32i>, !s32i loc(#loc98)
              cir.call @printIntLine(%29) : (!s32i) -> () loc(#loc99)
            } else {
              %25 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 51>> loc(#loc64)
              %26 = cir.cast(array_to_ptrdecay, %25 : !cir.ptr<!cir.array<!s8i x 51>>), !cir.ptr<!s8i> loc(#loc64)
              cir.call @printLine(%26) : (!cir.ptr<!s8i>) -> () loc(#loc100)
            } loc(#loc142)
          } loc(#loc139)
        } loc(#loc138)
      } loc(#loc136)
    } loc(#loc133)
    cir.return loc(#loc66)
  } loc(#loc129)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE191_Integer_Underflow/s03/CWE191_Integer_Underflow__int_rand_multiply_31.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc5 = loc("CWE191_Integer_Underflow__int_rand_multiply_31.c":22:1)
#loc6 = loc("CWE191_Integer_Underflow__int_rand_multiply_31.c":39:1)
#loc7 = loc("CWE191_Integer_Underflow__int_rand_multiply_31.c":24:5)
#loc8 = loc("CWE191_Integer_Underflow__int_rand_multiply_31.c":24:9)
#loc9 = loc("CWE191_Integer_Underflow__int_rand_multiply_31.c":26:12)
#loc10 = loc("CWE191_Integer_Underflow__int_rand_multiply_31.c":26:5)
#loc11 = loc("CWE191_Integer_Underflow__int_rand_multiply_31.c":28:12)
#loc12 = loc("CWE191_Integer_Underflow__int_rand_multiply_31.c":28:5)
#loc13 = loc("CWE191_Integer_Underflow__int_rand_multiply_31.c":29:5)
#loc14 = loc("CWE191_Integer_Underflow__int_rand_multiply_31.c":38:5)
#loc15 = loc("CWE191_Integer_Underflow__int_rand_multiply_31.c":30:9)
#loc16 = loc("CWE191_Integer_Underflow__int_rand_multiply_31.c":30:24)
#loc17 = loc("CWE191_Integer_Underflow__int_rand_multiply_31.c":31:9)
#loc18 = loc("CWE191_Integer_Underflow__int_rand_multiply_31.c":31:20)
#loc19 = loc("CWE191_Integer_Underflow__int_rand_multiply_31.c":32:9)
#loc20 = loc("CWE191_Integer_Underflow__int_rand_multiply_31.c":37:9)
#loc21 = loc("CWE191_Integer_Underflow__int_rand_multiply_31.c":32:12)
#loc22 = loc("CWE191_Integer_Underflow__int_rand_multiply_31.c":32:19)
#loc23 = loc("CWE191_Integer_Underflow__int_rand_multiply_31.c":32:17)
#loc24 = loc("CWE191_Integer_Underflow__int_rand_multiply_31.c":33:9)
#loc25 = loc("CWE191_Integer_Underflow__int_rand_multiply_31.c":35:13)
#loc26 = loc("CWE191_Integer_Underflow__int_rand_multiply_31.c":35:33)
#loc27 = loc("CWE191_Integer_Underflow__int_rand_multiply_31.c":35:26)
#loc28 = loc("CWE191_Integer_Underflow__int_rand_multiply_31.c":36:26)
#loc29 = loc("CWE191_Integer_Underflow__int_rand_multiply_31.c":36:13)
#loc30 = loc("CWE191_Integer_Underflow__int_rand_multiply_31.c":92:1)
#loc31 = loc("CWE191_Integer_Underflow__int_rand_multiply_31.c":96:1)
#loc32 = loc("CWE191_Integer_Underflow__int_rand_multiply_31.c":94:5)
#loc33 = loc("CWE191_Integer_Underflow__int_rand_multiply_31.c":94:13)
#loc34 = loc("CWE191_Integer_Underflow__int_rand_multiply_31.c":95:5)
#loc35 = loc("CWE191_Integer_Underflow__int_rand_multiply_31.c":95:13)
#loc36 = loc("CWE191_Integer_Underflow__int_rand_multiply_31.c":46:1)
#loc37 = loc("CWE191_Integer_Underflow__int_rand_multiply_31.c":63:1)
#loc38 = loc("CWE191_Integer_Underflow__int_rand_multiply_31.c":48:5)
#loc39 = loc("CWE191_Integer_Underflow__int_rand_multiply_31.c":48:9)
#loc40 = loc("CWE191_Integer_Underflow__int_rand_multiply_31.c":50:12)
#loc41 = loc("CWE191_Integer_Underflow__int_rand_multiply_31.c":50:5)
#loc42 = loc("CWE191_Integer_Underflow__int_rand_multiply_31.c":52:13)
#loc43 = loc("CWE191_Integer_Underflow__int_rand_multiply_31.c":52:12)
#loc44 = loc("CWE191_Integer_Underflow__int_rand_multiply_31.c":52:5)
#loc45 = loc("CWE191_Integer_Underflow__int_rand_multiply_31.c":53:5)
#loc46 = loc("CWE191_Integer_Underflow__int_rand_multiply_31.c":62:5)
#loc47 = loc("CWE191_Integer_Underflow__int_rand_multiply_31.c":54:9)
#loc48 = loc("CWE191_Integer_Underflow__int_rand_multiply_31.c":54:24)
#loc49 = loc("CWE191_Integer_Underflow__int_rand_multiply_31.c":55:9)
#loc50 = loc("CWE191_Integer_Underflow__int_rand_multiply_31.c":55:20)
#loc51 = loc("CWE191_Integer_Underflow__int_rand_multiply_31.c":56:9)
#loc52 = loc("CWE191_Integer_Underflow__int_rand_multiply_31.c":61:9)
#loc53 = loc("CWE191_Integer_Underflow__int_rand_multiply_31.c":56:12)
#loc54 = loc("CWE191_Integer_Underflow__int_rand_multiply_31.c":56:19)
#loc55 = loc("CWE191_Integer_Underflow__int_rand_multiply_31.c":56:17)
#loc56 = loc("CWE191_Integer_Underflow__int_rand_multiply_31.c":57:9)
#loc57 = loc("CWE191_Integer_Underflow__int_rand_multiply_31.c":59:13)
#loc58 = loc("CWE191_Integer_Underflow__int_rand_multiply_31.c":59:33)
#loc59 = loc("CWE191_Integer_Underflow__int_rand_multiply_31.c":59:26)
#loc60 = loc("CWE191_Integer_Underflow__int_rand_multiply_31.c":60:26)
#loc61 = loc("CWE191_Integer_Underflow__int_rand_multiply_31.c":60:13)
#loc62 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc63 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc64 = loc("CWE191_Integer_Underflow__int_rand_multiply_31.c":86:27)
#loc65 = loc("CWE191_Integer_Underflow__int_rand_multiply_31.c":66:1)
#loc66 = loc("CWE191_Integer_Underflow__int_rand_multiply_31.c":90:1)
#loc67 = loc("CWE191_Integer_Underflow__int_rand_multiply_31.c":68:5)
#loc68 = loc("CWE191_Integer_Underflow__int_rand_multiply_31.c":68:9)
#loc69 = loc("CWE191_Integer_Underflow__int_rand_multiply_31.c":70:12)
#loc70 = loc("CWE191_Integer_Underflow__int_rand_multiply_31.c":70:5)
#loc71 = loc("CWE191_Integer_Underflow__int_rand_multiply_31.c":72:12)
#loc72 = loc("CWE191_Integer_Underflow__int_rand_multiply_31.c":72:5)
#loc73 = loc("CWE191_Integer_Underflow__int_rand_multiply_31.c":73:5)
#loc74 = loc("CWE191_Integer_Underflow__int_rand_multiply_31.c":89:5)
#loc75 = loc("CWE191_Integer_Underflow__int_rand_multiply_31.c":74:9)
#loc76 = loc("CWE191_Integer_Underflow__int_rand_multiply_31.c":74:24)
#loc77 = loc("CWE191_Integer_Underflow__int_rand_multiply_31.c":75:9)
#loc78 = loc("CWE191_Integer_Underflow__int_rand_multiply_31.c":75:20)
#loc79 = loc("CWE191_Integer_Underflow__int_rand_multiply_31.c":76:9)
#loc80 = loc("CWE191_Integer_Underflow__int_rand_multiply_31.c":88:9)
#loc81 = loc("CWE191_Integer_Underflow__int_rand_multiply_31.c":76:12)
#loc82 = loc("CWE191_Integer_Underflow__int_rand_multiply_31.c":76:19)
#loc83 = loc("CWE191_Integer_Underflow__int_rand_multiply_31.c":76:17)
#loc84 = loc("CWE191_Integer_Underflow__int_rand_multiply_31.c":77:9)
#loc85 = loc("CWE191_Integer_Underflow__int_rand_multiply_31.c":79:13)
#loc86 = loc("CWE191_Integer_Underflow__int_rand_multiply_31.c":87:13)
#loc87 = loc("CWE191_Integer_Underflow__int_rand_multiply_31.c":79:17)
#loc88 = loc("CWE191_Integer_Underflow__int_rand_multiply_31.c":79:25)
#loc89 = loc("CWE191_Integer_Underflow__int_rand_multiply_31.c":79:33)
#loc90 = loc("CWE191_Integer_Underflow__int_rand_multiply_31.c":79:34)
#loc91 = loc("CWE191_Integer_Underflow__int_rand_multiply_31.c":79:22)
#loc92 = loc("CWE191_Integer_Underflow__int_rand_multiply_31.c":80:13)
#loc93 = loc("CWE191_Integer_Underflow__int_rand_multiply_31.c":83:13)
#loc94 = loc("CWE191_Integer_Underflow__int_rand_multiply_31.c":85:13)
#loc95 = loc("CWE191_Integer_Underflow__int_rand_multiply_31.c":81:17)
#loc96 = loc("CWE191_Integer_Underflow__int_rand_multiply_31.c":81:37)
#loc97 = loc("CWE191_Integer_Underflow__int_rand_multiply_31.c":81:30)
#loc98 = loc("CWE191_Integer_Underflow__int_rand_multiply_31.c":82:30)
#loc99 = loc("CWE191_Integer_Underflow__int_rand_multiply_31.c":82:17)
#loc100 = loc("CWE191_Integer_Underflow__int_rand_multiply_31.c":86:17)
#loc101 = loc(fused[#loc1, #loc2])
#loc102 = loc(fused[#loc3, #loc4])
#loc103 = loc(fused[#loc5, #loc6])
#loc104 = loc(fused[#loc7, #loc8])
#loc105 = loc(fused[#loc10, #loc9])
#loc106 = loc(fused[#loc12, #loc11])
#loc107 = loc(fused[#loc13, #loc14])
#loc108 = loc(fused[#loc15, #loc16])
#loc109 = loc(fused[#loc17, #loc18])
#loc110 = loc(fused[#loc19, #loc20])
#loc111 = loc(fused[#loc21, #loc22])
#loc112 = loc(fused[#loc24, #loc20])
#loc113 = loc(fused[#loc25, #loc26])
#loc114 = loc(fused[#loc30, #loc31])
#loc115 = loc(fused[#loc32, #loc33])
#loc116 = loc(fused[#loc34, #loc35])
#loc117 = loc(fused[#loc36, #loc37])
#loc118 = loc(fused[#loc38, #loc39])
#loc119 = loc(fused[#loc41, #loc40])
#loc120 = loc(fused[#loc44, #loc42])
#loc121 = loc(fused[#loc45, #loc46])
#loc122 = loc(fused[#loc47, #loc48])
#loc123 = loc(fused[#loc49, #loc50])
#loc124 = loc(fused[#loc51, #loc52])
#loc125 = loc(fused[#loc53, #loc54])
#loc126 = loc(fused[#loc56, #loc52])
#loc127 = loc(fused[#loc57, #loc58])
#loc128 = loc(fused[#loc62, #loc63])
#loc129 = loc(fused[#loc65, #loc66])
#loc130 = loc(fused[#loc67, #loc68])
#loc131 = loc(fused[#loc70, #loc69])
#loc132 = loc(fused[#loc72, #loc71])
#loc133 = loc(fused[#loc73, #loc74])
#loc134 = loc(fused[#loc75, #loc76])
#loc135 = loc(fused[#loc77, #loc78])
#loc136 = loc(fused[#loc79, #loc80])
#loc137 = loc(fused[#loc81, #loc82])
#loc138 = loc(fused[#loc84, #loc80])
#loc139 = loc(fused[#loc85, #loc86])
#loc140 = loc(fused[#loc88, #loc89])
#loc141 = loc(fused[#loc87, #loc90])
#loc142 = loc(fused[#loc92, #loc93, #loc94, #loc86])
#loc143 = loc(fused[#loc95, #loc96])
