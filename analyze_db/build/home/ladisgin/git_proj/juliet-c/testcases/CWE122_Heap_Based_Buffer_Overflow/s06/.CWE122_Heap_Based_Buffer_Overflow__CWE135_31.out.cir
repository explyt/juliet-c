!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":125:10)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":125:14)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":125:20)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":125:32)
#loc299 = loc(fused[#loc101, #loc102])
#loc300 = loc(fused[#loc103, #loc104])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc261)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc262)
  cir.func private @wmemset(!cir.ptr<!s32i>, !s32i, !u64i) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc263)
  cir.func private @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc264)
  cir.func private @calloc(!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc265)
  cir.func private @wcscpy(!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc266)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc267)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc268)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__CWE135_31_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc270)
    %1 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dataCopy", init] {alignment = 8 : i64} loc(#loc271)
    %2 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data", init] {alignment = 8 : i64} loc(#loc272)
    %3 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc273)
    %4 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc274)
    %5 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc275)
    %6 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc31)
    cir.store %6, %5 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc276)
    cir.br ^bb1 loc(#loc277)
  ^bb1:  // pred: ^bb0
    %7 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc35)
    %8 = cir.const #cir.int<50> : !s32i loc(#loc36)
    %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc36)
    %10 = cir.const #cir.int<4> : !u64i loc(#loc278)
    %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc279)
    %12 = cir.call @malloc(%11) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc35)
    %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc280)
    cir.store %13, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc270)
    cir.br ^bb2 loc(#loc281)
  ^bb2:  // pred: ^bb1
    %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc41)
    %15 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc42)
    %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc42)
    %17 = cir.cmp(eq, %14, %16) : !cir.ptr<!s32i>, !cir.bool loc(#loc282)
    cir.brcond %17 ^bb3, ^bb4 loc(#loc283)
  ^bb3:  // pred: ^bb2
    %18 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc44)
    %19 = cir.const #cir.int<1> : !s32i loc(#loc45)
    %20 = cir.unary(minus, %19) : !s32i, !s32i loc(#loc46)
    cir.call @exit(%20) : (!s32i) -> () extra(#fn_attr) loc(#loc44)
    cir.br ^bb4 loc(#loc40)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc40)
  ^bb5:  // pred: ^bb4
    %21 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc47)
    %22 = cir.const #cir.int<65> : !s32i loc(#loc48)
    %23 = cir.const #cir.int<50> : !s32i loc(#loc49)
    %24 = cir.const #cir.int<1> : !s32i loc(#loc50)
    %25 = cir.binop(sub, %23, %24) nsw : !s32i loc(#loc49)
    %26 = cir.cast(integral, %25 : !s32i), !u64i loc(#loc49)
    %27 = cir.call @wmemset(%21, %22, %26) : (!cir.ptr<!s32i>, !s32i, !u64i) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc51)
    %28 = cir.const #cir.int<0> : !s32i loc(#loc52)
    %29 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc53)
    %30 = cir.const #cir.int<50> : !s32i loc(#loc54)
    %31 = cir.const #cir.int<1> : !s32i loc(#loc55)
    %32 = cir.binop(sub, %30, %31) nsw : !s32i loc(#loc54)
    %33 = cir.ptr_stride(%29 : !cir.ptr<!s32i>, %32 : !s32i), !cir.ptr<!s32i> loc(#loc56)
    cir.store %28, %33 : !s32i, !cir.ptr<!s32i> loc(#loc284)
    %34 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc57)
    %35 = cir.cast(bitcast, %34 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc57)
    cir.store %35, %5 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc285)
    cir.br ^bb6 loc(#loc34)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc286)
  ^bb7:  // pred: ^bb6
    %36 = cir.load %5 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc22)
    cir.store %36, %1 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc271)
    %37 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc24)
    cir.store %37, %2 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc272)
    cir.br ^bb8 loc(#loc287)
  ^bb8:  // pred: ^bb7
    %38 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc63)
    %39 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc64)
    %40 = cir.cast(bitcast, %39 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc64)
    %41 = cir.call @strlen(%40) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc63)
    cir.store %41, %3 : !u64i, !cir.ptr<!u64i> loc(#loc273)
    %42 = cir.get_global @calloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i, !u64i)>> loc(#loc65)
    %43 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc66)
    %44 = cir.const #cir.int<1> : !s32i loc(#loc67)
    %45 = cir.cast(integral, %44 : !s32i), !u64i loc(#loc67)
    %46 = cir.binop(add, %43, %45) : !u64i loc(#loc288)
    %47 = cir.const #cir.int<4> : !u64i loc(#loc289)
    %48 = cir.call @calloc(%46, %47) : (!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc65)
    cir.store %48, %4 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc274)
    cir.br ^bb9 loc(#loc290)
  ^bb9:  // pred: ^bb8
    %49 = cir.load %4 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc72)
    %50 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc73)
    %51 = cir.cmp(eq, %49, %50) : !cir.ptr<!void>, !cir.bool loc(#loc291)
    cir.brcond %51 ^bb10, ^bb11 loc(#loc292)
  ^bb10:  // pred: ^bb9
    %52 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc75)
    %53 = cir.const #cir.int<1> : !s32i loc(#loc76)
    %54 = cir.unary(minus, %53) : !s32i, !s32i loc(#loc77)
    cir.call @exit(%54) : (!s32i) -> () extra(#fn_attr) loc(#loc75)
    cir.br ^bb11 loc(#loc71)
  ^bb11:  // 2 preds: ^bb9, ^bb10
    cir.br ^bb12 loc(#loc71)
  ^bb12:  // pred: ^bb11
    %55 = cir.load %4 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc78)
    %56 = cir.cast(bitcast, %55 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc78)
    %57 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc79)
    %58 = cir.cast(bitcast, %57 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc79)
    %59 = cir.call @wcscpy(%56, %58) : (!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc80)
    %60 = cir.load %4 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc81)
    %61 = cir.cast(bitcast, %60 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc81)
    cir.call @printLine(%61) : (!cir.ptr<!s8i>) -> () loc(#loc82)
    %62 = cir.load %4 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc83)
    cir.call @free(%62) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc84)
    cir.br ^bb13 loc(#loc62)
  ^bb13:  // pred: ^bb12
    cir.br ^bb14 loc(#loc60)
  ^bb14:  // pred: ^bb13
    cir.return loc(#loc18)
  } loc(#loc269)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__CWE135_31_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc294)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc87)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc295)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc89)
    cir.return loc(#loc86)
  } loc(#loc293)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc296)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc297)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc95)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc96)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc97)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc98)
  cir.func @main(%arg0: !s32i loc(fused[#loc101, #loc102]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc103, #loc104])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc299)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc300)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc100)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc105)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc105)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc106)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc107)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc107)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc108)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc95)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc95)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc109)
    %8 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__CWE135_31_good : !cir.ptr<!cir.func<!void ()>> loc(#loc301)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__CWE135_31_good() : () -> () loc(#loc110)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc96)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc96)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc112)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc97)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc97)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc113)
    %13 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__CWE135_31_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc302)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__CWE135_31_bad() : () -> () loc(#loc114)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc98)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc98)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc116)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc117)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc303)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc303)
    cir.return %17 : !s32i loc(#loc303)
  } loc(#loc298)
  cir.func private @strcpy(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc304)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc306)
    %1 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dataCopy", init] {alignment = 8 : i64} loc(#loc307)
    %2 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data", init] {alignment = 8 : i64} loc(#loc308)
    %3 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc309)
    %4 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc310)
    %5 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc311)
    %6 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc135)
    cir.store %6, %5 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc312)
    cir.br ^bb1 loc(#loc313)
  ^bb1:  // pred: ^bb0
    %7 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc139)
    %8 = cir.const #cir.int<50> : !s32i loc(#loc140)
    %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc140)
    %10 = cir.const #cir.int<1> : !u64i loc(#loc314)
    %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc315)
    %12 = cir.call @malloc(%11) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc139)
    %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc316)
    cir.store %13, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc306)
    cir.br ^bb2 loc(#loc317)
  ^bb2:  // pred: ^bb1
    %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc145)
    %15 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc146)
    %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc146)
    %17 = cir.cmp(eq, %14, %16) : !cir.ptr<!s8i>, !cir.bool loc(#loc318)
    cir.brcond %17 ^bb3, ^bb4 loc(#loc319)
  ^bb3:  // pred: ^bb2
    %18 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc148)
    %19 = cir.const #cir.int<1> : !s32i loc(#loc149)
    %20 = cir.unary(minus, %19) : !s32i, !s32i loc(#loc150)
    cir.call @exit(%20) : (!s32i) -> () extra(#fn_attr) loc(#loc148)
    cir.br ^bb4 loc(#loc144)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc144)
  ^bb5:  // pred: ^bb4
    %21 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc151)
    %22 = cir.cast(bitcast, %21 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc151)
    %23 = cir.const #cir.int<65> : !s32i loc(#loc152)
    %24 = cir.const #cir.int<50> : !s32i loc(#loc153)
    %25 = cir.const #cir.int<1> : !s32i loc(#loc154)
    %26 = cir.binop(sub, %24, %25) nsw : !s32i loc(#loc153)
    %27 = cir.cast(integral, %26 : !s32i), !u64i loc(#loc153)
    cir.libc.memset %27 bytes from %22 set to %23 : !cir.ptr<!void>, !s32i, !u64i loc(#loc320)
    %28 = cir.const #cir.int<0> : !s32i loc(#loc157)
    %29 = cir.cast(integral, %28 : !s32i), !s8i loc(#loc157)
    %30 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc158)
    %31 = cir.const #cir.int<50> : !s32i loc(#loc159)
    %32 = cir.const #cir.int<1> : !s32i loc(#loc160)
    %33 = cir.binop(sub, %31, %32) nsw : !s32i loc(#loc159)
    %34 = cir.ptr_stride(%30 : !cir.ptr<!s8i>, %33 : !s32i), !cir.ptr<!s8i> loc(#loc161)
    cir.store %29, %34 : !s8i, !cir.ptr<!s8i> loc(#loc321)
    %35 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc162)
    %36 = cir.cast(bitcast, %35 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc162)
    cir.store %36, %5 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc322)
    cir.br ^bb6 loc(#loc138)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc323)
  ^bb7:  // pred: ^bb6
    %37 = cir.load %5 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc126)
    cir.store %37, %1 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc307)
    %38 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc128)
    cir.store %38, %2 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc308)
    cir.br ^bb8 loc(#loc324)
  ^bb8:  // pred: ^bb7
    %39 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc168)
    %40 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc169)
    %41 = cir.cast(bitcast, %40 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc169)
    %42 = cir.call @strlen(%41) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc168)
    cir.store %42, %3 : !u64i, !cir.ptr<!u64i> loc(#loc309)
    %43 = cir.get_global @calloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i, !u64i)>> loc(#loc170)
    %44 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc171)
    %45 = cir.const #cir.int<1> : !s32i loc(#loc172)
    %46 = cir.cast(integral, %45 : !s32i), !u64i loc(#loc172)
    %47 = cir.binop(add, %44, %46) : !u64i loc(#loc325)
    %48 = cir.const #cir.int<1> : !s32i loc(#loc173)
    %49 = cir.cast(integral, %48 : !s32i), !u64i loc(#loc173)
    %50 = cir.call @calloc(%47, %49) : (!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc170)
    cir.store %50, %4 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc310)
    cir.br ^bb9 loc(#loc326)
  ^bb9:  // pred: ^bb8
    %51 = cir.load %4 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc176)
    %52 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc177)
    %53 = cir.cmp(eq, %51, %52) : !cir.ptr<!void>, !cir.bool loc(#loc327)
    cir.brcond %53 ^bb10, ^bb11 loc(#loc328)
  ^bb10:  // pred: ^bb9
    %54 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc179)
    %55 = cir.const #cir.int<1> : !s32i loc(#loc180)
    %56 = cir.unary(minus, %55) : !s32i, !s32i loc(#loc181)
    cir.call @exit(%56) : (!s32i) -> () extra(#fn_attr) loc(#loc179)
    cir.br ^bb11 loc(#loc175)
  ^bb11:  // 2 preds: ^bb9, ^bb10
    cir.br ^bb12 loc(#loc175)
  ^bb12:  // pred: ^bb11
    %57 = cir.load %4 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc182)
    %58 = cir.cast(bitcast, %57 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc182)
    %59 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc183)
    %60 = cir.cast(bitcast, %59 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc183)
    %61 = cir.call @strcpy(%58, %60) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc184)
    %62 = cir.load %4 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc185)
    %63 = cir.cast(bitcast, %62 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc185)
    cir.call @printLine(%63) : (!cir.ptr<!s8i>) -> () loc(#loc186)
    %64 = cir.load %4 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc187)
    cir.call @free(%64) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc188)
    cir.br ^bb13 loc(#loc167)
  ^bb13:  // pred: ^bb12
    cir.br ^bb14 loc(#loc165)
  ^bb14:  // pred: ^bb13
    cir.return loc(#loc122)
  } loc(#loc305)
  cir.func private @wcslen(!cir.ptr<!s32i>) -> !u64i extra(#fn_attr) loc(#loc329)
  cir.func private @printWLine(!cir.ptr<!s32i>) loc(#loc330)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc332)
    %1 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dataCopy", init] {alignment = 8 : i64} loc(#loc333)
    %2 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data", init] {alignment = 8 : i64} loc(#loc334)
    %3 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc335)
    %4 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc336)
    %5 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc337)
    %6 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc207)
    cir.store %6, %5 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc338)
    cir.br ^bb1 loc(#loc339)
  ^bb1:  // pred: ^bb0
    %7 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc211)
    %8 = cir.const #cir.int<50> : !s32i loc(#loc212)
    %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc212)
    %10 = cir.const #cir.int<4> : !u64i loc(#loc340)
    %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc341)
    %12 = cir.call @malloc(%11) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc211)
    %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc342)
    cir.store %13, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc332)
    cir.br ^bb2 loc(#loc343)
  ^bb2:  // pred: ^bb1
    %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc217)
    %15 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc218)
    %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc218)
    %17 = cir.cmp(eq, %14, %16) : !cir.ptr<!s32i>, !cir.bool loc(#loc344)
    cir.brcond %17 ^bb3, ^bb4 loc(#loc345)
  ^bb3:  // pred: ^bb2
    %18 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc220)
    %19 = cir.const #cir.int<1> : !s32i loc(#loc221)
    %20 = cir.unary(minus, %19) : !s32i, !s32i loc(#loc222)
    cir.call @exit(%20) : (!s32i) -> () extra(#fn_attr) loc(#loc220)
    cir.br ^bb4 loc(#loc216)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc216)
  ^bb5:  // pred: ^bb4
    %21 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc223)
    %22 = cir.const #cir.int<65> : !s32i loc(#loc224)
    %23 = cir.const #cir.int<50> : !s32i loc(#loc225)
    %24 = cir.const #cir.int<1> : !s32i loc(#loc226)
    %25 = cir.binop(sub, %23, %24) nsw : !s32i loc(#loc225)
    %26 = cir.cast(integral, %25 : !s32i), !u64i loc(#loc225)
    %27 = cir.call @wmemset(%21, %22, %26) : (!cir.ptr<!s32i>, !s32i, !u64i) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc227)
    %28 = cir.const #cir.int<0> : !s32i loc(#loc228)
    %29 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc229)
    %30 = cir.const #cir.int<50> : !s32i loc(#loc230)
    %31 = cir.const #cir.int<1> : !s32i loc(#loc231)
    %32 = cir.binop(sub, %30, %31) nsw : !s32i loc(#loc230)
    %33 = cir.ptr_stride(%29 : !cir.ptr<!s32i>, %32 : !s32i), !cir.ptr<!s32i> loc(#loc232)
    cir.store %28, %33 : !s32i, !cir.ptr<!s32i> loc(#loc346)
    %34 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc233)
    %35 = cir.cast(bitcast, %34 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc233)
    cir.store %35, %5 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc347)
    cir.br ^bb6 loc(#loc210)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc348)
  ^bb7:  // pred: ^bb6
    %36 = cir.load %5 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc198)
    cir.store %36, %1 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc333)
    %37 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc200)
    cir.store %37, %2 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc334)
    cir.br ^bb8 loc(#loc349)
  ^bb8:  // pred: ^bb7
    %38 = cir.get_global @wcslen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s32i>)>> loc(#loc239)
    %39 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc240)
    %40 = cir.cast(bitcast, %39 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc240)
    %41 = cir.call @wcslen(%40) : (!cir.ptr<!s32i>) -> !u64i extra(#fn_attr) loc(#loc239)
    cir.store %41, %3 : !u64i, !cir.ptr<!u64i> loc(#loc335)
    %42 = cir.get_global @calloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i, !u64i)>> loc(#loc241)
    %43 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc242)
    %44 = cir.const #cir.int<1> : !s32i loc(#loc243)
    %45 = cir.cast(integral, %44 : !s32i), !u64i loc(#loc243)
    %46 = cir.binop(add, %43, %45) : !u64i loc(#loc350)
    %47 = cir.const #cir.int<4> : !u64i loc(#loc351)
    %48 = cir.call @calloc(%46, %47) : (!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc241)
    cir.store %48, %4 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc336)
    cir.br ^bb9 loc(#loc352)
  ^bb9:  // pred: ^bb8
    %49 = cir.load %4 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc248)
    %50 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc249)
    %51 = cir.cmp(eq, %49, %50) : !cir.ptr<!void>, !cir.bool loc(#loc353)
    cir.brcond %51 ^bb10, ^bb11 loc(#loc354)
  ^bb10:  // pred: ^bb9
    %52 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc251)
    %53 = cir.const #cir.int<1> : !s32i loc(#loc252)
    %54 = cir.unary(minus, %53) : !s32i, !s32i loc(#loc253)
    cir.call @exit(%54) : (!s32i) -> () extra(#fn_attr) loc(#loc251)
    cir.br ^bb11 loc(#loc247)
  ^bb11:  // 2 preds: ^bb9, ^bb10
    cir.br ^bb12 loc(#loc247)
  ^bb12:  // pred: ^bb11
    %55 = cir.load %4 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc254)
    %56 = cir.cast(bitcast, %55 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc254)
    %57 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc255)
    %58 = cir.cast(bitcast, %57 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc255)
    %59 = cir.call @wcscpy(%56, %58) : (!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc256)
    %60 = cir.load %4 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc257)
    %61 = cir.cast(bitcast, %60 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc257)
    cir.call @printWLine(%61) : (!cir.ptr<!s32i>) -> () loc(#loc258)
    %62 = cir.load %4 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc259)
    cir.call @free(%62) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc260)
    cir.br ^bb13 loc(#loc238)
  ^bb13:  // pred: ^bb12
    cir.br ^bb14 loc(#loc236)
  ^bb14:  // pred: ^bb13
    cir.return loc(#loc194)
  } loc(#loc331)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("/usr/include/wchar.h":296:1)
#loc6 = loc("/usr/include/wchar.h":296:65)
#loc7 = loc("/usr/include/string.h":407:1)
#loc8 = loc("/usr/include/string.h":408:33)
#loc9 = loc("/usr/include/stdlib.h":675:1)
#loc10 = loc("/usr/include/stdlib.h":676:14)
#loc11 = loc("/usr/include/wchar.h":98:1)
#loc12 = loc("/usr/include/wchar.h":100:14)
#loc13 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc14 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc15 = loc("/usr/include/stdlib.h":687:1)
#loc16 = loc("/usr/include/stdlib.h":687:32)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":24:1)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":49:1)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":29:9)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":29:71)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":37:9)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":37:27)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":38:9)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":38:23)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":41:13)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":41:49)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":42:13)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":42:68)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":26:5)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":26:12)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":27:12)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":27:5)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":28:5)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":35:5)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":29:46)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":29:53)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":29:56)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":29:70)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":30:9)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":30:46)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":30:13)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":30:30)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":30:36)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":30:37)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":30:43)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":30:42)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":31:17)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":31:32)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":31:38)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":31:41)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":31:9)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":32:31)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":32:9)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":32:23)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":32:26)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":32:27)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":34:24)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":34:9)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":36:5)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":48:5)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":39:9)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":47:9)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":41:30)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":41:45)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":42:35)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":42:42)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":42:50)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":42:53)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":42:67)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":43:13)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":43:41)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":43:17)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":43:25)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":43:31)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":43:32)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":43:38)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":43:37)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":44:26)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":44:32)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":44:19)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":45:31)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":45:13)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":46:18)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":46:13)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":111:1)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":115:1)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":113:5)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":113:13)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":114:5)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":114:13)
#loc91 = loc("/usr/include/stdlib.h":575:1)
#loc92 = loc("/usr/include/stdlib.h":575:41)
#loc93 = loc("/usr/include/time.h":76:1)
#loc94 = loc("/usr/include/time.h":76:38)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":130:15)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":132:15)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":135:15)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":137:15)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":125:1)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":140:1)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":126:1)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":128:27)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":128:22)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":128:5)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":130:5)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":131:5)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":131:55)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":132:5)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":135:5)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":136:5)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":136:54)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":137:5)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":139:12)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":139:5)
#loc119 = loc("/usr/include/string.h":141:1)
#loc120 = loc("/usr/include/string.h":142:14)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":56:1)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":81:1)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":61:9)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":61:63)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":69:9)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":69:27)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":70:9)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":70:23)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":73:13)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":73:49)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":74:13)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":74:54)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":58:5)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":58:12)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":59:12)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":59:5)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":60:5)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":67:5)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":61:41)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":61:48)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":61:51)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":61:62)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":62:9)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":62:47)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":62:13)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":62:31)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":62:37)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":62:38)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":62:44)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":62:43)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":63:16)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":63:32)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":63:37)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":63:40)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":63:9)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":63:41)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":64:32)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":64:9)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":64:24)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":64:27)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":64:28)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":66:24)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":66:9)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":68:5)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":80:5)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":71:9)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":79:9)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":73:30)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":73:45)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":74:35)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":74:42)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":74:50)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":74:53)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":75:13)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":75:41)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":75:17)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":75:25)
#loc178 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":75:31)
#loc179 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":75:32)
#loc180 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":75:38)
#loc181 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":75:37)
#loc182 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":76:26)
#loc183 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":76:32)
#loc184 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":76:19)
#loc185 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":77:31)
#loc186 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":77:13)
#loc187 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":78:18)
#loc188 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":78:13)
#loc189 = loc("/usr/include/wchar.h":247:1)
#loc190 = loc("/usr/include/wchar.h":247:51)
#loc191 = loc("../../../testcasesupport/std_testcase_io.h":16:1)
#loc192 = loc("../../../testcasesupport/std_testcase_io.h":16:37)
#loc193 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":84:1)
#loc194 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":109:1)
#loc195 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":89:9)
#loc196 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":89:71)
#loc197 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":97:9)
#loc198 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":97:27)
#loc199 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":98:9)
#loc200 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":98:23)
#loc201 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":101:13)
#loc202 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":101:52)
#loc203 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":102:13)
#loc204 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":102:68)
#loc205 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":86:5)
#loc206 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":86:12)
#loc207 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":87:12)
#loc208 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":87:5)
#loc209 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":88:5)
#loc210 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":95:5)
#loc211 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":89:46)
#loc212 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":89:53)
#loc213 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":89:56)
#loc214 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":89:70)
#loc215 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":90:9)
#loc216 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":90:46)
#loc217 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":90:13)
#loc218 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":90:30)
#loc219 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":90:36)
#loc220 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":90:37)
#loc221 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":90:43)
#loc222 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":90:42)
#loc223 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":91:17)
#loc224 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":91:32)
#loc225 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":91:38)
#loc226 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":91:41)
#loc227 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":91:9)
#loc228 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":92:31)
#loc229 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":92:9)
#loc230 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":92:23)
#loc231 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":92:26)
#loc232 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":92:27)
#loc233 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":94:24)
#loc234 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":94:9)
#loc235 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":96:5)
#loc236 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":108:5)
#loc237 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":99:9)
#loc238 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":107:9)
#loc239 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":101:30)
#loc240 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":101:48)
#loc241 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":102:35)
#loc242 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":102:42)
#loc243 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":102:50)
#loc244 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":102:53)
#loc245 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":102:67)
#loc246 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":103:13)
#loc247 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":103:41)
#loc248 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":103:17)
#loc249 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":103:25)
#loc250 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":103:31)
#loc251 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":103:32)
#loc252 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":103:38)
#loc253 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":103:37)
#loc254 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":104:26)
#loc255 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":104:32)
#loc256 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":104:19)
#loc257 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":105:35)
#loc258 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":105:13)
#loc259 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":106:18)
#loc260 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c":106:13)
#loc261 = loc(fused[#loc1, #loc2])
#loc262 = loc(fused[#loc3, #loc4])
#loc263 = loc(fused[#loc5, #loc6])
#loc264 = loc(fused[#loc7, #loc8])
#loc265 = loc(fused[#loc9, #loc10])
#loc266 = loc(fused[#loc11, #loc12])
#loc267 = loc(fused[#loc13, #loc14])
#loc268 = loc(fused[#loc15, #loc16])
#loc269 = loc(fused[#loc17, #loc18])
#loc270 = loc(fused[#loc19, #loc20])
#loc271 = loc(fused[#loc21, #loc22])
#loc272 = loc(fused[#loc23, #loc24])
#loc273 = loc(fused[#loc25, #loc26])
#loc274 = loc(fused[#loc27, #loc28])
#loc275 = loc(fused[#loc29, #loc30])
#loc276 = loc(fused[#loc32, #loc31])
#loc277 = loc(fused[#loc33, #loc34])
#loc278 = loc(fused[#loc37, #loc38])
#loc279 = loc(fused[#loc36, #loc38])
#loc280 = loc(fused[#loc35, #loc20])
#loc281 = loc(fused[#loc39, #loc40])
#loc282 = loc(fused[#loc41, #loc42])
#loc283 = loc(fused[#loc43, #loc40])
#loc284 = loc(fused[#loc53, #loc52])
#loc285 = loc(fused[#loc58, #loc57])
#loc286 = loc(fused[#loc59, #loc60])
#loc287 = loc(fused[#loc61, #loc62])
#loc288 = loc(fused[#loc66, #loc67])
#loc289 = loc(fused[#loc68, #loc69])
#loc290 = loc(fused[#loc70, #loc71])
#loc291 = loc(fused[#loc72, #loc73])
#loc292 = loc(fused[#loc74, #loc71])
#loc293 = loc(fused[#loc85, #loc86])
#loc294 = loc(fused[#loc87, #loc88])
#loc295 = loc(fused[#loc89, #loc90])
#loc296 = loc(fused[#loc91, #loc92])
#loc297 = loc(fused[#loc93, #loc94])
#loc298 = loc(fused[#loc99, #loc100])
#loc301 = loc(fused[#loc110, #loc111])
#loc302 = loc(fused[#loc114, #loc115])
#loc303 = loc(fused[#loc118, #loc117])
#loc304 = loc(fused[#loc119, #loc120])
#loc305 = loc(fused[#loc121, #loc122])
#loc306 = loc(fused[#loc123, #loc124])
#loc307 = loc(fused[#loc125, #loc126])
#loc308 = loc(fused[#loc127, #loc128])
#loc309 = loc(fused[#loc129, #loc130])
#loc310 = loc(fused[#loc131, #loc132])
#loc311 = loc(fused[#loc133, #loc134])
#loc312 = loc(fused[#loc136, #loc135])
#loc313 = loc(fused[#loc137, #loc138])
#loc314 = loc(fused[#loc141, #loc142])
#loc315 = loc(fused[#loc140, #loc142])
#loc316 = loc(fused[#loc139, #loc124])
#loc317 = loc(fused[#loc143, #loc144])
#loc318 = loc(fused[#loc145, #loc146])
#loc319 = loc(fused[#loc147, #loc144])
#loc320 = loc(fused[#loc155, #loc156])
#loc321 = loc(fused[#loc158, #loc157])
#loc322 = loc(fused[#loc163, #loc162])
#loc323 = loc(fused[#loc164, #loc165])
#loc324 = loc(fused[#loc166, #loc167])
#loc325 = loc(fused[#loc171, #loc172])
#loc326 = loc(fused[#loc174, #loc175])
#loc327 = loc(fused[#loc176, #loc177])
#loc328 = loc(fused[#loc178, #loc175])
#loc329 = loc(fused[#loc189, #loc190])
#loc330 = loc(fused[#loc191, #loc192])
#loc331 = loc(fused[#loc193, #loc194])
#loc332 = loc(fused[#loc195, #loc196])
#loc333 = loc(fused[#loc197, #loc198])
#loc334 = loc(fused[#loc199, #loc200])
#loc335 = loc(fused[#loc201, #loc202])
#loc336 = loc(fused[#loc203, #loc204])
#loc337 = loc(fused[#loc205, #loc206])
#loc338 = loc(fused[#loc208, #loc207])
#loc339 = loc(fused[#loc209, #loc210])
#loc340 = loc(fused[#loc213, #loc214])
#loc341 = loc(fused[#loc212, #loc214])
#loc342 = loc(fused[#loc211, #loc196])
#loc343 = loc(fused[#loc215, #loc216])
#loc344 = loc(fused[#loc217, #loc218])
#loc345 = loc(fused[#loc219, #loc216])
#loc346 = loc(fused[#loc229, #loc228])
#loc347 = loc(fused[#loc234, #loc233])
#loc348 = loc(fused[#loc235, #loc236])
#loc349 = loc(fused[#loc237, #loc238])
#loc350 = loc(fused[#loc242, #loc243])
#loc351 = loc(fused[#loc244, #loc245])
#loc352 = loc(fused[#loc246, #loc247])
#loc353 = loc(fused[#loc248, #loc249])
#loc354 = loc(fused[#loc250, #loc247])
