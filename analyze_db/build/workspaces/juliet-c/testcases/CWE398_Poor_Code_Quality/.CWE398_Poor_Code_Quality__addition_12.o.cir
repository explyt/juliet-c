!s32i = !cir.int<s, 32>
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE398_Poor_Code_Quality/CWE398_Poor_Code_Quality__addition_12.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little", "dlti.mangling_mode" = "e">} {
  cir.func no_proto private @globalReturnsTrueOrFalse(...) -> !s32i loc(#loc78)
  cir.func private @printIntLine(!s32i) loc(#loc79)
  cir.func no_proto @CWE398_Poor_Code_Quality__addition_12_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["intOne", init] {alignment = 4 : i64} loc(#loc81)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["intTwo", init] {alignment = 4 : i64} loc(#loc82)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["intSum", init] {alignment = 4 : i64} loc(#loc83)
    %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["intOne", init] {alignment = 4 : i64} loc(#loc84)
    %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["intTwo", init] {alignment = 4 : i64} loc(#loc85)
    %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["intSum", init] {alignment = 4 : i64} loc(#loc86)
    cir.br ^bb1 loc(#loc87)
  ^bb1:  // pred: ^bb0
    %6 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc88)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc88)
    %8 = cir.call %7() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc17)
    %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc17)
    cir.brcond %9 ^bb2, ^bb5 loc(#loc89)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc90)
  ^bb3:  // pred: ^bb2
    %10 = cir.const #cir.int<1> : !s32i loc(#loc8)
    cir.store %10, %0 : !s32i, !cir.ptr<!s32i> loc(#loc81)
    %11 = cir.const #cir.int<1> : !s32i loc(#loc9)
    cir.store %11, %1 : !s32i, !cir.ptr<!s32i> loc(#loc82)
    %12 = cir.const #cir.int<0> : !s32i loc(#loc10)
    cir.store %12, %2 : !s32i, !cir.ptr<!s32i> loc(#loc83)
    %13 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc24)
    cir.call @printIntLine(%13) : (!s32i) -> () loc(#loc25)
    %14 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc26)
    %15 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc27)
    %16 = cir.binop(add, %14, %15) nsw : !s32i loc(#loc26)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc28)
    cir.call @printIntLine(%17) : (!s32i) -> () loc(#loc29)
    cir.br ^bb4 loc(#loc23)
  ^bb4:  // pred: ^bb3
    cir.br ^bb8 loc(#loc20)
  ^bb5:  // pred: ^bb1
    cir.br ^bb6 loc(#loc91)
  ^bb6:  // pred: ^bb5
    %18 = cir.const #cir.int<1> : !s32i loc(#loc12)
    cir.store %18, %3 : !s32i, !cir.ptr<!s32i> loc(#loc84)
    %19 = cir.const #cir.int<1> : !s32i loc(#loc13)
    cir.store %19, %4 : !s32i, !cir.ptr<!s32i> loc(#loc85)
    %20 = cir.const #cir.int<0> : !s32i loc(#loc14)
    cir.store %20, %5 : !s32i, !cir.ptr<!s32i> loc(#loc86)
    %21 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc32)
    cir.call @printIntLine(%21) : (!s32i) -> () loc(#loc33)
    %22 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc34)
    %23 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc35)
    %24 = cir.binop(add, %22, %23) nsw : !s32i loc(#loc34)
    cir.store %24, %5 : !s32i, !cir.ptr<!s32i> loc(#loc92)
    %25 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc37)
    cir.call @printIntLine(%25) : (!s32i) -> () loc(#loc38)
    cir.br ^bb7 loc(#loc31)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc16)
  ^bb8:  // 2 preds: ^bb4, ^bb7
    cir.br ^bb9 loc(#loc16)
  ^bb9:  // pred: ^bb8
    cir.return loc(#loc6)
  } loc(#loc80)
  cir.func no_proto @CWE398_Poor_Code_Quality__addition_12_good() extra(#fn_attr) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<()>> loc(#loc94)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc41)
    cir.return loc(#loc40)
  } loc(#loc93)
  cir.func no_proto internal private @good1() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["intOne", init] {alignment = 4 : i64} loc(#loc96)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["intTwo", init] {alignment = 4 : i64} loc(#loc97)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["intSum", init] {alignment = 4 : i64} loc(#loc98)
    %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["intOne", init] {alignment = 4 : i64} loc(#loc99)
    %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["intTwo", init] {alignment = 4 : i64} loc(#loc100)
    %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["intSum", init] {alignment = 4 : i64} loc(#loc101)
    cir.br ^bb1 loc(#loc102)
  ^bb1:  // pred: ^bb0
    %6 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc103)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc103)
    %8 = cir.call %7() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc55)
    %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc55)
    cir.brcond %9 ^bb2, ^bb5 loc(#loc104)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc105)
  ^bb3:  // pred: ^bb2
    %10 = cir.const #cir.int<1> : !s32i loc(#loc46)
    cir.store %10, %0 : !s32i, !cir.ptr<!s32i> loc(#loc96)
    %11 = cir.const #cir.int<1> : !s32i loc(#loc47)
    cir.store %11, %1 : !s32i, !cir.ptr<!s32i> loc(#loc97)
    %12 = cir.const #cir.int<0> : !s32i loc(#loc48)
    cir.store %12, %2 : !s32i, !cir.ptr<!s32i> loc(#loc98)
    %13 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc62)
    cir.call @printIntLine(%13) : (!s32i) -> () loc(#loc63)
    %14 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc64)
    %15 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc65)
    %16 = cir.binop(add, %14, %15) nsw : !s32i loc(#loc64)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc106)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc67)
    cir.call @printIntLine(%17) : (!s32i) -> () loc(#loc68)
    cir.br ^bb4 loc(#loc61)
  ^bb4:  // pred: ^bb3
    cir.br ^bb8 loc(#loc58)
  ^bb5:  // pred: ^bb1
    cir.br ^bb6 loc(#loc107)
  ^bb6:  // pred: ^bb5
    %18 = cir.const #cir.int<1> : !s32i loc(#loc50)
    cir.store %18, %3 : !s32i, !cir.ptr<!s32i> loc(#loc99)
    %19 = cir.const #cir.int<1> : !s32i loc(#loc51)
    cir.store %19, %4 : !s32i, !cir.ptr<!s32i> loc(#loc100)
    %20 = cir.const #cir.int<0> : !s32i loc(#loc52)
    cir.store %20, %5 : !s32i, !cir.ptr<!s32i> loc(#loc101)
    %21 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc71)
    cir.call @printIntLine(%21) : (!s32i) -> () loc(#loc72)
    %22 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc73)
    %23 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc74)
    %24 = cir.binop(add, %22, %23) nsw : !s32i loc(#loc73)
    cir.store %24, %5 : !s32i, !cir.ptr<!s32i> loc(#loc108)
    %25 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc76)
    cir.call @printIntLine(%25) : (!s32i) -> () loc(#loc77)
    cir.br ^bb7 loc(#loc70)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc54)
  ^bb8:  // 2 preds: ^bb4, ^bb7
    cir.br ^bb9 loc(#loc54)
  ^bb9:  // pred: ^bb8
    cir.return loc(#loc44)
  } loc(#loc95)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE398_Poor_Code_Quality/CWE398_Poor_Code_Quality__addition_12.c":0:0)
#loc1 = loc("../../testcasesupport/std_testcase_io.h":52:1)
#loc2 = loc("../../testcasesupport/std_testcase_io.h":52:30)
#loc3 = loc("../../testcasesupport/std_testcase_io.h":18:1)
#loc4 = loc("../../testcasesupport/std_testcase_io.h":18:33)
#loc5 = loc("CWE398_Poor_Code_Quality__addition_12.c":20:1)
#loc6 = loc("CWE398_Poor_Code_Quality__addition_12.c":42:1)
#loc7 = loc("CWE398_Poor_Code_Quality__addition_12.c":25:13)
#loc8 = loc("CWE398_Poor_Code_Quality__addition_12.c":25:26)
#loc9 = loc("CWE398_Poor_Code_Quality__addition_12.c":25:38)
#loc10 = loc("CWE398_Poor_Code_Quality__addition_12.c":25:50)
#loc11 = loc("CWE398_Poor_Code_Quality__addition_12.c":35:13)
#loc12 = loc("CWE398_Poor_Code_Quality__addition_12.c":35:26)
#loc13 = loc("CWE398_Poor_Code_Quality__addition_12.c":35:38)
#loc14 = loc("CWE398_Poor_Code_Quality__addition_12.c":35:50)
#loc15 = loc("CWE398_Poor_Code_Quality__addition_12.c":22:5)
#loc16 = loc("CWE398_Poor_Code_Quality__addition_12.c":41:5)
#loc17 = loc("CWE398_Poor_Code_Quality__addition_12.c":22:8)
#loc18 = loc("CWE398_Poor_Code_Quality__addition_12.c":22:33)
#loc19 = loc("CWE398_Poor_Code_Quality__addition_12.c":23:5)
#loc20 = loc("CWE398_Poor_Code_Quality__addition_12.c":31:5)
#loc21 = loc("CWE398_Poor_Code_Quality__addition_12.c":33:5)
#loc22 = loc("CWE398_Poor_Code_Quality__addition_12.c":24:9)
#loc23 = loc("CWE398_Poor_Code_Quality__addition_12.c":30:9)
#loc24 = loc("CWE398_Poor_Code_Quality__addition_12.c":26:26)
#loc25 = loc("CWE398_Poor_Code_Quality__addition_12.c":26:13)
#loc26 = loc("CWE398_Poor_Code_Quality__addition_12.c":28:13)
#loc27 = loc("CWE398_Poor_Code_Quality__addition_12.c":28:22)
#loc28 = loc("CWE398_Poor_Code_Quality__addition_12.c":29:26)
#loc29 = loc("CWE398_Poor_Code_Quality__addition_12.c":29:13)
#loc30 = loc("CWE398_Poor_Code_Quality__addition_12.c":34:9)
#loc31 = loc("CWE398_Poor_Code_Quality__addition_12.c":40:9)
#loc32 = loc("CWE398_Poor_Code_Quality__addition_12.c":36:26)
#loc33 = loc("CWE398_Poor_Code_Quality__addition_12.c":36:13)
#loc34 = loc("CWE398_Poor_Code_Quality__addition_12.c":38:22)
#loc35 = loc("CWE398_Poor_Code_Quality__addition_12.c":38:31)
#loc36 = loc("CWE398_Poor_Code_Quality__addition_12.c":38:13)
#loc37 = loc("CWE398_Poor_Code_Quality__addition_12.c":39:26)
#loc38 = loc("CWE398_Poor_Code_Quality__addition_12.c":39:13)
#loc39 = loc("CWE398_Poor_Code_Quality__addition_12.c":73:1)
#loc40 = loc("CWE398_Poor_Code_Quality__addition_12.c":76:1)
#loc41 = loc("CWE398_Poor_Code_Quality__addition_12.c":75:5)
#loc42 = loc("CWE398_Poor_Code_Quality__addition_12.c":75:11)
#loc43 = loc("CWE398_Poor_Code_Quality__addition_12.c":49:1)
#loc44 = loc("CWE398_Poor_Code_Quality__addition_12.c":71:1)
#loc45 = loc("CWE398_Poor_Code_Quality__addition_12.c":54:13)
#loc46 = loc("CWE398_Poor_Code_Quality__addition_12.c":54:26)
#loc47 = loc("CWE398_Poor_Code_Quality__addition_12.c":54:38)
#loc48 = loc("CWE398_Poor_Code_Quality__addition_12.c":54:50)
#loc49 = loc("CWE398_Poor_Code_Quality__addition_12.c":64:13)
#loc50 = loc("CWE398_Poor_Code_Quality__addition_12.c":64:26)
#loc51 = loc("CWE398_Poor_Code_Quality__addition_12.c":64:38)
#loc52 = loc("CWE398_Poor_Code_Quality__addition_12.c":64:50)
#loc53 = loc("CWE398_Poor_Code_Quality__addition_12.c":51:5)
#loc54 = loc("CWE398_Poor_Code_Quality__addition_12.c":70:5)
#loc55 = loc("CWE398_Poor_Code_Quality__addition_12.c":51:8)
#loc56 = loc("CWE398_Poor_Code_Quality__addition_12.c":51:33)
#loc57 = loc("CWE398_Poor_Code_Quality__addition_12.c":52:5)
#loc58 = loc("CWE398_Poor_Code_Quality__addition_12.c":60:5)
#loc59 = loc("CWE398_Poor_Code_Quality__addition_12.c":62:5)
#loc60 = loc("CWE398_Poor_Code_Quality__addition_12.c":53:9)
#loc61 = loc("CWE398_Poor_Code_Quality__addition_12.c":59:9)
#loc62 = loc("CWE398_Poor_Code_Quality__addition_12.c":55:26)
#loc63 = loc("CWE398_Poor_Code_Quality__addition_12.c":55:13)
#loc64 = loc("CWE398_Poor_Code_Quality__addition_12.c":57:22)
#loc65 = loc("CWE398_Poor_Code_Quality__addition_12.c":57:31)
#loc66 = loc("CWE398_Poor_Code_Quality__addition_12.c":57:13)
#loc67 = loc("CWE398_Poor_Code_Quality__addition_12.c":58:26)
#loc68 = loc("CWE398_Poor_Code_Quality__addition_12.c":58:13)
#loc69 = loc("CWE398_Poor_Code_Quality__addition_12.c":63:9)
#loc70 = loc("CWE398_Poor_Code_Quality__addition_12.c":69:9)
#loc71 = loc("CWE398_Poor_Code_Quality__addition_12.c":65:26)
#loc72 = loc("CWE398_Poor_Code_Quality__addition_12.c":65:13)
#loc73 = loc("CWE398_Poor_Code_Quality__addition_12.c":67:22)
#loc74 = loc("CWE398_Poor_Code_Quality__addition_12.c":67:31)
#loc75 = loc("CWE398_Poor_Code_Quality__addition_12.c":67:13)
#loc76 = loc("CWE398_Poor_Code_Quality__addition_12.c":68:26)
#loc77 = loc("CWE398_Poor_Code_Quality__addition_12.c":68:13)
#loc78 = loc(fused[#loc1, #loc2])
#loc79 = loc(fused[#loc3, #loc4])
#loc80 = loc(fused[#loc5, #loc6])
#loc81 = loc(fused[#loc7, #loc8])
#loc82 = loc(fused[#loc7, #loc9])
#loc83 = loc(fused[#loc7, #loc10])
#loc84 = loc(fused[#loc11, #loc12])
#loc85 = loc(fused[#loc11, #loc13])
#loc86 = loc(fused[#loc11, #loc14])
#loc87 = loc(fused[#loc15, #loc16])
#loc88 = loc(fused[#loc17, #loc18])
#loc89 = loc(fused[#loc19, #loc20, #loc21, #loc16])
#loc90 = loc(fused[#loc22, #loc23])
#loc91 = loc(fused[#loc30, #loc31])
#loc92 = loc(fused[#loc36, #loc35])
#loc93 = loc(fused[#loc39, #loc40])
#loc94 = loc(fused[#loc41, #loc42])
#loc95 = loc(fused[#loc43, #loc44])
#loc96 = loc(fused[#loc45, #loc46])
#loc97 = loc(fused[#loc45, #loc47])
#loc98 = loc(fused[#loc45, #loc48])
#loc99 = loc(fused[#loc49, #loc50])
#loc100 = loc(fused[#loc49, #loc51])
#loc101 = loc(fused[#loc49, #loc52])
#loc102 = loc(fused[#loc53, #loc54])
#loc103 = loc(fused[#loc55, #loc56])
#loc104 = loc(fused[#loc57, #loc58, #loc59, #loc54])
#loc105 = loc(fused[#loc60, #loc61])
#loc106 = loc(fused[#loc66, #loc65])
#loc107 = loc(fused[#loc69, #loc70])
#loc108 = loc(fused[#loc75, #loc74])
