!s16i = !cir.int<s, 16>
!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc3 = loc("CWE190_Integer_Overflow__short_max_add_42.c":22:24)
#loc4 = loc("CWE190_Integer_Overflow__short_max_add_42.c":22:30)
#loc37 = loc("CWE190_Integer_Overflow__short_max_add_42.c":66:28)
#loc38 = loc("CWE190_Integer_Overflow__short_max_add_42.c":66:34)
#loc72 = loc("CWE190_Integer_Overflow__short_max_add_42.c":46:28)
#loc73 = loc("CWE190_Integer_Overflow__short_max_add_42.c":46:34)
#loc97 = loc(fused[#loc3, #loc4])
#loc111 = loc(fused[#loc37, #loc38])
#loc124 = loc(fused[#loc72, #loc73])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_max_add_42.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func internal private @badSource(%arg0: !s16i loc(fused[#loc3, #loc4])) -> !s16i extra(#fn_attr) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data", init] {alignment = 2 : i64} loc(#loc97)
    %1 = cir.alloca !s16i, !cir.ptr<!s16i>, ["__retval"] {alignment = 2 : i64} loc(#loc2)
    cir.store %arg0, %0 : !s16i, !cir.ptr<!s16i> loc(#loc5)
    %2 = cir.const #cir.int<32767> : !s32i loc(#loc6)
    %3 = cir.cast(integral, %2 : !s32i), !s16i loc(#loc6)
    cir.store %3, %0 : !s16i, !cir.ptr<!s16i> loc(#loc98)
    %4 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc8)
    cir.store %4, %1 : !s16i, !cir.ptr<!s16i> loc(#loc99)
    %5 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc99)
    cir.return %5 : !s16i loc(#loc99)
  } loc(#loc96)
  cir.func private @printIntLine(!s32i) loc(#loc100)
  cir.func no_proto @CWE190_Integer_Overflow__short_max_add_42_bad() extra(#fn_attr) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc102)
    %1 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc103)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc18)
    %3 = cir.cast(integral, %2 : !s32i), !s16i loc(#loc18)
    cir.store %3, %1 : !s16i, !cir.ptr<!s16i> loc(#loc104)
    %4 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc20)
    %5 = cir.call @badSource(%4) : (!s16i) -> !s16i loc(#loc21)
    cir.store %5, %1 : !s16i, !cir.ptr<!s16i> loc(#loc105)
    cir.br ^bb1 loc(#loc106)
  ^bb1:  // pred: ^bb0
    %6 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc26)
    %7 = cir.cast(integral, %6 : !s16i), !s32i loc(#loc26)
    %8 = cir.const #cir.int<1> : !s32i loc(#loc15)
    %9 = cir.binop(add, %7, %8) nsw : !s32i loc(#loc26)
    %10 = cir.cast(integral, %9 : !s32i), !s16i loc(#loc26)
    cir.store %10, %0 : !s16i, !cir.ptr<!s16i> loc(#loc102)
    %11 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc27)
    %12 = cir.cast(integral, %11 : !s16i), !s32i loc(#loc27)
    cir.call @printIntLine(%12) : (!s32i) -> () loc(#loc28)
    cir.br ^bb2 loc(#loc25)
  ^bb2:  // pred: ^bb1
    cir.return loc(#loc13)
  } loc(#loc101)
  cir.func no_proto @CWE190_Integer_Overflow__short_max_add_42_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc108)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc31)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc109)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc33)
    cir.return loc(#loc30)
  } loc(#loc107)
  cir.func internal private @goodB2GSource(%arg0: !s16i loc(fused[#loc37, #loc38])) -> !s16i extra(#fn_attr) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data", init] {alignment = 2 : i64} loc(#loc111)
    %1 = cir.alloca !s16i, !cir.ptr<!s16i>, ["__retval"] {alignment = 2 : i64} loc(#loc36)
    cir.store %arg0, %0 : !s16i, !cir.ptr<!s16i> loc(#loc39)
    %2 = cir.const #cir.int<32767> : !s32i loc(#loc40)
    %3 = cir.cast(integral, %2 : !s32i), !s16i loc(#loc40)
    cir.store %3, %0 : !s16i, !cir.ptr<!s16i> loc(#loc112)
    %4 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc42)
    cir.store %4, %1 : !s16i, !cir.ptr<!s16i> loc(#loc113)
    %5 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc113)
    cir.return %5 : !s16i loc(#loc113)
  } loc(#loc110)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc114)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc46)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc116)
    %1 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc117)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc53)
    %3 = cir.cast(integral, %2 : !s32i), !s16i loc(#loc53)
    cir.store %3, %1 : !s16i, !cir.ptr<!s16i> loc(#loc118)
    %4 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc55)
    %5 = cir.call @goodB2GSource(%4) : (!s16i) -> !s16i loc(#loc56)
    cir.store %5, %1 : !s16i, !cir.ptr<!s16i> loc(#loc119)
    cir.br ^bb1 loc(#loc120)
  ^bb1:  // pred: ^bb0
    %6 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc61)
    %7 = cir.cast(integral, %6 : !s16i), !s32i loc(#loc61)
    %8 = cir.const #cir.int<32767> : !s32i loc(#loc62)
    %9 = cir.cmp(lt, %7, %8) : !s32i, !cir.bool loc(#loc121)
    cir.brcond %9 ^bb2, ^bb3 loc(#loc122)
  ^bb2:  // pred: ^bb1
    %10 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc66)
    %11 = cir.cast(integral, %10 : !s16i), !s32i loc(#loc66)
    %12 = cir.const #cir.int<1> : !s32i loc(#loc50)
    %13 = cir.binop(add, %11, %12) nsw : !s32i loc(#loc66)
    %14 = cir.cast(integral, %13 : !s32i), !s16i loc(#loc66)
    cir.store %14, %0 : !s16i, !cir.ptr<!s16i> loc(#loc116)
    %15 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc67)
    %16 = cir.cast(integral, %15 : !s16i), !s32i loc(#loc67)
    cir.call @printIntLine(%16) : (!s32i) -> () loc(#loc68)
    cir.br ^bb4 loc(#loc64)
  ^bb3:  // pred: ^bb1
    %17 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc46)
    %18 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc46)
    cir.call @printLine(%18) : (!cir.ptr<!s8i>) -> () loc(#loc69)
    cir.br ^bb4 loc(#loc60)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc60)
  ^bb5:  // pred: ^bb4
    cir.return loc(#loc48)
  } loc(#loc115)
  cir.func internal private @goodG2BSource(%arg0: !s16i loc(fused[#loc72, #loc73])) -> !s16i extra(#fn_attr) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data", init] {alignment = 2 : i64} loc(#loc124)
    %1 = cir.alloca !s16i, !cir.ptr<!s16i>, ["__retval"] {alignment = 2 : i64} loc(#loc71)
    cir.store %arg0, %0 : !s16i, !cir.ptr<!s16i> loc(#loc74)
    %2 = cir.const #cir.int<2> : !s32i loc(#loc75)
    %3 = cir.cast(integral, %2 : !s32i), !s16i loc(#loc75)
    cir.store %3, %0 : !s16i, !cir.ptr<!s16i> loc(#loc125)
    %4 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc77)
    cir.store %4, %1 : !s16i, !cir.ptr<!s16i> loc(#loc126)
    %5 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc126)
    cir.return %5 : !s16i loc(#loc126)
  } loc(#loc123)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc128)
    %1 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc129)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc85)
    %3 = cir.cast(integral, %2 : !s32i), !s16i loc(#loc85)
    cir.store %3, %1 : !s16i, !cir.ptr<!s16i> loc(#loc130)
    %4 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc87)
    %5 = cir.call @goodG2BSource(%4) : (!s16i) -> !s16i loc(#loc88)
    cir.store %5, %1 : !s16i, !cir.ptr<!s16i> loc(#loc131)
    cir.br ^bb1 loc(#loc132)
  ^bb1:  // pred: ^bb0
    %6 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc93)
    %7 = cir.cast(integral, %6 : !s16i), !s32i loc(#loc93)
    %8 = cir.const #cir.int<1> : !s32i loc(#loc82)
    %9 = cir.binop(add, %7, %8) nsw : !s32i loc(#loc93)
    %10 = cir.cast(integral, %9 : !s32i), !s16i loc(#loc93)
    cir.store %10, %0 : !s16i, !cir.ptr<!s16i> loc(#loc128)
    %11 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc94)
    %12 = cir.cast(integral, %11 : !s16i), !s32i loc(#loc94)
    cir.call @printIntLine(%12) : (!s32i) -> () loc(#loc95)
    cir.br ^bb2 loc(#loc92)
  ^bb2:  // pred: ^bb1
    cir.return loc(#loc80)
  } loc(#loc127)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_max_add_42.c":0:0)
#loc1 = loc("CWE190_Integer_Overflow__short_max_add_42.c":22:1)
#loc2 = loc("CWE190_Integer_Overflow__short_max_add_42.c":27:1)
#loc5 = loc("CWE190_Integer_Overflow__short_max_add_42.c":23:1)
#loc6 = loc("CWE190_Integer_Overflow__short_max_add_42.c":25:12)
#loc7 = loc("CWE190_Integer_Overflow__short_max_add_42.c":25:5)
#loc8 = loc("CWE190_Integer_Overflow__short_max_add_42.c":26:12)
#loc9 = loc("CWE190_Integer_Overflow__short_max_add_42.c":26:5)
#loc10 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc11 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc12 = loc("CWE190_Integer_Overflow__short_max_add_42.c":29:1)
#loc13 = loc("CWE190_Integer_Overflow__short_max_add_42.c":39:1)
#loc14 = loc("CWE190_Integer_Overflow__short_max_add_42.c":36:9)
#loc15 = loc("CWE190_Integer_Overflow__short_max_add_42.c":36:31)
#loc16 = loc("CWE190_Integer_Overflow__short_max_add_42.c":31:5)
#loc17 = loc("CWE190_Integer_Overflow__short_max_add_42.c":31:11)
#loc18 = loc("CWE190_Integer_Overflow__short_max_add_42.c":32:12)
#loc19 = loc("CWE190_Integer_Overflow__short_max_add_42.c":32:5)
#loc20 = loc("CWE190_Integer_Overflow__short_max_add_42.c":33:22)
#loc21 = loc("CWE190_Integer_Overflow__short_max_add_42.c":33:12)
#loc22 = loc("CWE190_Integer_Overflow__short_max_add_42.c":33:5)
#loc23 = loc("CWE190_Integer_Overflow__short_max_add_42.c":33:26)
#loc24 = loc("CWE190_Integer_Overflow__short_max_add_42.c":34:5)
#loc25 = loc("CWE190_Integer_Overflow__short_max_add_42.c":38:5)
#loc26 = loc("CWE190_Integer_Overflow__short_max_add_42.c":36:24)
#loc27 = loc("CWE190_Integer_Overflow__short_max_add_42.c":37:22)
#loc28 = loc("CWE190_Integer_Overflow__short_max_add_42.c":37:9)
#loc29 = loc("CWE190_Integer_Overflow__short_max_add_42.c":90:1)
#loc30 = loc("CWE190_Integer_Overflow__short_max_add_42.c":94:1)
#loc31 = loc("CWE190_Integer_Overflow__short_max_add_42.c":92:5)
#loc32 = loc("CWE190_Integer_Overflow__short_max_add_42.c":92:13)
#loc33 = loc("CWE190_Integer_Overflow__short_max_add_42.c":93:5)
#loc34 = loc("CWE190_Integer_Overflow__short_max_add_42.c":93:13)
#loc35 = loc("CWE190_Integer_Overflow__short_max_add_42.c":66:1)
#loc36 = loc("CWE190_Integer_Overflow__short_max_add_42.c":71:1)
#loc39 = loc("CWE190_Integer_Overflow__short_max_add_42.c":67:1)
#loc40 = loc("CWE190_Integer_Overflow__short_max_add_42.c":69:12)
#loc41 = loc("CWE190_Integer_Overflow__short_max_add_42.c":69:5)
#loc42 = loc("CWE190_Integer_Overflow__short_max_add_42.c":70:12)
#loc43 = loc("CWE190_Integer_Overflow__short_max_add_42.c":70:5)
#loc44 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc45 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc46 = loc("CWE190_Integer_Overflow__short_max_add_42.c":86:19)
#loc47 = loc("CWE190_Integer_Overflow__short_max_add_42.c":73:1)
#loc48 = loc("CWE190_Integer_Overflow__short_max_add_42.c":88:1)
#loc49 = loc("CWE190_Integer_Overflow__short_max_add_42.c":81:9)
#loc50 = loc("CWE190_Integer_Overflow__short_max_add_42.c":81:31)
#loc51 = loc("CWE190_Integer_Overflow__short_max_add_42.c":75:5)
#loc52 = loc("CWE190_Integer_Overflow__short_max_add_42.c":75:11)
#loc53 = loc("CWE190_Integer_Overflow__short_max_add_42.c":76:12)
#loc54 = loc("CWE190_Integer_Overflow__short_max_add_42.c":76:5)
#loc55 = loc("CWE190_Integer_Overflow__short_max_add_42.c":77:26)
#loc56 = loc("CWE190_Integer_Overflow__short_max_add_42.c":77:12)
#loc57 = loc("CWE190_Integer_Overflow__short_max_add_42.c":77:5)
#loc58 = loc("CWE190_Integer_Overflow__short_max_add_42.c":77:30)
#loc59 = loc("CWE190_Integer_Overflow__short_max_add_42.c":79:5)
#loc60 = loc("CWE190_Integer_Overflow__short_max_add_42.c":87:5)
#loc61 = loc("CWE190_Integer_Overflow__short_max_add_42.c":79:9)
#loc62 = loc("CWE190_Integer_Overflow__short_max_add_42.c":79:16)
#loc63 = loc("CWE190_Integer_Overflow__short_max_add_42.c":80:5)
#loc64 = loc("CWE190_Integer_Overflow__short_max_add_42.c":83:5)
#loc65 = loc("CWE190_Integer_Overflow__short_max_add_42.c":85:5)
#loc66 = loc("CWE190_Integer_Overflow__short_max_add_42.c":81:24)
#loc67 = loc("CWE190_Integer_Overflow__short_max_add_42.c":82:22)
#loc68 = loc("CWE190_Integer_Overflow__short_max_add_42.c":82:9)
#loc69 = loc("CWE190_Integer_Overflow__short_max_add_42.c":86:9)
#loc70 = loc("CWE190_Integer_Overflow__short_max_add_42.c":46:1)
#loc71 = loc("CWE190_Integer_Overflow__short_max_add_42.c":51:1)
#loc74 = loc("CWE190_Integer_Overflow__short_max_add_42.c":47:1)
#loc75 = loc("CWE190_Integer_Overflow__short_max_add_42.c":49:12)
#loc76 = loc("CWE190_Integer_Overflow__short_max_add_42.c":49:5)
#loc77 = loc("CWE190_Integer_Overflow__short_max_add_42.c":50:12)
#loc78 = loc("CWE190_Integer_Overflow__short_max_add_42.c":50:5)
#loc79 = loc("CWE190_Integer_Overflow__short_max_add_42.c":53:1)
#loc80 = loc("CWE190_Integer_Overflow__short_max_add_42.c":63:1)
#loc81 = loc("CWE190_Integer_Overflow__short_max_add_42.c":60:9)
#loc82 = loc("CWE190_Integer_Overflow__short_max_add_42.c":60:31)
#loc83 = loc("CWE190_Integer_Overflow__short_max_add_42.c":55:5)
#loc84 = loc("CWE190_Integer_Overflow__short_max_add_42.c":55:11)
#loc85 = loc("CWE190_Integer_Overflow__short_max_add_42.c":56:12)
#loc86 = loc("CWE190_Integer_Overflow__short_max_add_42.c":56:5)
#loc87 = loc("CWE190_Integer_Overflow__short_max_add_42.c":57:26)
#loc88 = loc("CWE190_Integer_Overflow__short_max_add_42.c":57:12)
#loc89 = loc("CWE190_Integer_Overflow__short_max_add_42.c":57:5)
#loc90 = loc("CWE190_Integer_Overflow__short_max_add_42.c":57:30)
#loc91 = loc("CWE190_Integer_Overflow__short_max_add_42.c":58:5)
#loc92 = loc("CWE190_Integer_Overflow__short_max_add_42.c":62:5)
#loc93 = loc("CWE190_Integer_Overflow__short_max_add_42.c":60:24)
#loc94 = loc("CWE190_Integer_Overflow__short_max_add_42.c":61:22)
#loc95 = loc("CWE190_Integer_Overflow__short_max_add_42.c":61:9)
#loc96 = loc(fused[#loc1, #loc2])
#loc98 = loc(fused[#loc7, #loc6])
#loc99 = loc(fused[#loc9, #loc8])
#loc100 = loc(fused[#loc10, #loc11])
#loc101 = loc(fused[#loc12, #loc13])
#loc102 = loc(fused[#loc14, #loc15])
#loc103 = loc(fused[#loc16, #loc17])
#loc104 = loc(fused[#loc19, #loc18])
#loc105 = loc(fused[#loc22, #loc23])
#loc106 = loc(fused[#loc24, #loc25])
#loc107 = loc(fused[#loc29, #loc30])
#loc108 = loc(fused[#loc31, #loc32])
#loc109 = loc(fused[#loc33, #loc34])
#loc110 = loc(fused[#loc35, #loc36])
#loc112 = loc(fused[#loc41, #loc40])
#loc113 = loc(fused[#loc43, #loc42])
#loc114 = loc(fused[#loc44, #loc45])
#loc115 = loc(fused[#loc47, #loc48])
#loc116 = loc(fused[#loc49, #loc50])
#loc117 = loc(fused[#loc51, #loc52])
#loc118 = loc(fused[#loc54, #loc53])
#loc119 = loc(fused[#loc57, #loc58])
#loc120 = loc(fused[#loc59, #loc60])
#loc121 = loc(fused[#loc61, #loc62])
#loc122 = loc(fused[#loc63, #loc64, #loc65, #loc60])
#loc123 = loc(fused[#loc70, #loc71])
#loc125 = loc(fused[#loc76, #loc75])
#loc126 = loc(fused[#loc78, #loc77])
#loc127 = loc(fused[#loc79, #loc80])
#loc128 = loc(fused[#loc81, #loc82])
#loc129 = loc(fused[#loc83, #loc84])
#loc130 = loc(fused[#loc86, #loc85])
#loc131 = loc(fused[#loc89, #loc90])
#loc132 = loc(fused[#loc91, #loc92])
