!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE252_Unchecked_Return_Value/CWE252_Unchecked_Return_Value__char_scanf_12.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func no_proto private @globalReturnsTrueOrFalse(...) -> !s32i loc(#loc83)
  cir.func private @__isoc99_scanf(!cir.ptr<!s8i>, ...) -> !s32i loc(#loc84)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"%99s" : !cir.array<!s8i x 4>, trailing_zeros> : !cir.array<!s8i x 6> {alignment = 1 : i64} loc(#loc5)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc85)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"scanf failed!\00" : !cir.array<!s8i x 14>> : !cir.array<!s8i x 14> {alignment = 1 : i64} loc(#loc8)
  cir.func no_proto @CWE252_Unchecked_Return_Value__char_scanf_12_bad() extra(#fn_attr) {
    cir.scope {
      %0 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc88)
      %1 = cir.cast(bitcast, %0 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc88)
      %2 = cir.call %1() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc13)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc13)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["dataBuffer"] {alignment = 16 : i64} loc(#loc91)
          %5 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc92)
          %6 = cir.const #cir.zero : !cir.array<!s8i x 100> loc(#loc91)
          cir.store %6, %4 : !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>> loc(#loc91)
          %7 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc23)
          cir.store %7, %5 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc92)
          %8 = cir.get_global @__isoc99_scanf : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc24)
          %9 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 6>> loc(#loc5)
          %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 6>>), !cir.ptr<!s8i> loc(#loc5)
          %11 = cir.load %5 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc25)
          %12 = cir.call @__isoc99_scanf(%10, %11) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i loc(#loc24)
        } loc(#loc90)
      } else {
        cir.scope {
          %4 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["dataBuffer"] {alignment = 16 : i64} loc(#loc94)
          %5 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc95)
          %6 = cir.const #cir.zero : !cir.array<!s8i x 100> loc(#loc94)
          cir.store %6, %4 : !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>> loc(#loc94)
          %7 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc31)
          cir.store %7, %5 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc95)
          cir.scope {
            %8 = cir.get_global @__isoc99_scanf : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc34)
            %9 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 6>> loc(#loc35)
            %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 6>>), !cir.ptr<!s8i> loc(#loc35)
            %11 = cir.load %5 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc36)
            %12 = cir.call @__isoc99_scanf(%10, %11) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i loc(#loc34)
            %13 = cir.const #cir.int<1> : !s32i loc(#loc37)
            %14 = cir.unary(minus, %13) nsw : !s32i, !s32i loc(#loc37)
            %15 = cir.cmp(eq, %12, %14) : !s32i, !cir.bool loc(#loc97)
            cir.if %15 {
              %16 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 14>> loc(#loc8)
              %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc8)
              cir.call @printLine(%17) : (!cir.ptr<!s8i>) -> () loc(#loc39)
            } loc(#loc98)
          } loc(#loc96)
        } loc(#loc93)
      } loc(#loc89)
    } loc(#loc87)
    cir.return loc(#loc10)
  } loc(#loc86)
  cir.func no_proto @CWE252_Unchecked_Return_Value__char_scanf_12_good() extra(#fn_attr) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<()>> loc(#loc100)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc42)
    cir.return loc(#loc41)
  } loc(#loc99)
  cir.func no_proto internal private @good1() extra(#fn_attr) {
    cir.scope {
      %0 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc103)
      %1 = cir.cast(bitcast, %0 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc103)
      %2 = cir.call %1() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc48)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc48)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["dataBuffer"] {alignment = 16 : i64} loc(#loc106)
          %5 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc107)
          %6 = cir.const #cir.zero : !cir.array<!s8i x 100> loc(#loc106)
          cir.store %6, %4 : !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>> loc(#loc106)
          %7 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc58)
          cir.store %7, %5 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc107)
          cir.scope {
            %8 = cir.get_global @__isoc99_scanf : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc61)
            %9 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 6>> loc(#loc62)
            %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 6>>), !cir.ptr<!s8i> loc(#loc62)
            %11 = cir.load %5 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc63)
            %12 = cir.call @__isoc99_scanf(%10, %11) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i loc(#loc61)
            %13 = cir.const #cir.int<1> : !s32i loc(#loc64)
            %14 = cir.unary(minus, %13) nsw : !s32i, !s32i loc(#loc64)
            %15 = cir.cmp(eq, %12, %14) : !s32i, !cir.bool loc(#loc109)
            cir.if %15 {
              %16 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 14>> loc(#loc66)
              %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc66)
              cir.call @printLine(%17) : (!cir.ptr<!s8i>) -> () loc(#loc67)
            } loc(#loc110)
          } loc(#loc108)
        } loc(#loc105)
      } else {
        cir.scope {
          %4 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["dataBuffer"] {alignment = 16 : i64} loc(#loc112)
          %5 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc113)
          %6 = cir.const #cir.zero : !cir.array<!s8i x 100> loc(#loc112)
          cir.store %6, %4 : !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>> loc(#loc112)
          %7 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc73)
          cir.store %7, %5 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc113)
          cir.scope {
            %8 = cir.get_global @__isoc99_scanf : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc76)
            %9 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 6>> loc(#loc77)
            %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 6>>), !cir.ptr<!s8i> loc(#loc77)
            %11 = cir.load %5 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc78)
            %12 = cir.call @__isoc99_scanf(%10, %11) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i loc(#loc76)
            %13 = cir.const #cir.int<1> : !s32i loc(#loc79)
            %14 = cir.unary(minus, %13) nsw : !s32i, !s32i loc(#loc79)
            %15 = cir.cmp(eq, %12, %14) : !s32i, !cir.bool loc(#loc115)
            cir.if %15 {
              %16 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 14>> loc(#loc81)
              %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc81)
              cir.call @printLine(%17) : (!cir.ptr<!s8i>) -> () loc(#loc82)
            } loc(#loc116)
          } loc(#loc114)
        } loc(#loc111)
      } loc(#loc104)
    } loc(#loc102)
    cir.return loc(#loc45)
  } loc(#loc101)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE252_Unchecked_Return_Value/CWE252_Unchecked_Return_Value__char_scanf_12.c":0:0)
#loc1 = loc("../../testcasesupport/std_testcase_io.h":52:1)
#loc2 = loc("../../testcasesupport/std_testcase_io.h":52:30)
#loc3 = loc("/usr/include/stdio.h":466:1)
#loc4 = loc("/usr/include/stdio.h":466:12)
#loc5 = loc("CWE252_Unchecked_Return_Value__char_scanf_12.c":34:19)
#loc6 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc7 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc8 = loc("CWE252_Unchecked_Return_Value__char_scanf_12.c":47:27)
#loc9 = loc("CWE252_Unchecked_Return_Value__char_scanf_12.c":24:1)
#loc10 = loc("CWE252_Unchecked_Return_Value__char_scanf_12.c":51:1)
#loc11 = loc("CWE252_Unchecked_Return_Value__char_scanf_12.c":26:5)
#loc12 = loc("CWE252_Unchecked_Return_Value__char_scanf_12.c":50:5)
#loc13 = loc("CWE252_Unchecked_Return_Value__char_scanf_12.c":26:8)
#loc14 = loc("CWE252_Unchecked_Return_Value__char_scanf_12.c":26:33)
#loc15 = loc("CWE252_Unchecked_Return_Value__char_scanf_12.c":27:5)
#loc16 = loc("CWE252_Unchecked_Return_Value__char_scanf_12.c":36:5)
#loc17 = loc("CWE252_Unchecked_Return_Value__char_scanf_12.c":38:5)
#loc18 = loc("CWE252_Unchecked_Return_Value__char_scanf_12.c":28:9)
#loc19 = loc("CWE252_Unchecked_Return_Value__char_scanf_12.c":35:9)
#loc20 = loc("CWE252_Unchecked_Return_Value__char_scanf_12.c":31:13)
#loc21 = loc("CWE252_Unchecked_Return_Value__char_scanf_12.c":31:36)
#loc22 = loc("CWE252_Unchecked_Return_Value__char_scanf_12.c":32:13)
#loc23 = loc("CWE252_Unchecked_Return_Value__char_scanf_12.c":32:27)
#loc24 = loc("CWE252_Unchecked_Return_Value__char_scanf_12.c":34:13)
#loc25 = loc("CWE252_Unchecked_Return_Value__char_scanf_12.c":34:29)
#loc26 = loc("CWE252_Unchecked_Return_Value__char_scanf_12.c":39:9)
#loc27 = loc("CWE252_Unchecked_Return_Value__char_scanf_12.c":49:9)
#loc28 = loc("CWE252_Unchecked_Return_Value__char_scanf_12.c":42:13)
#loc29 = loc("CWE252_Unchecked_Return_Value__char_scanf_12.c":42:36)
#loc30 = loc("CWE252_Unchecked_Return_Value__char_scanf_12.c":43:13)
#loc31 = loc("CWE252_Unchecked_Return_Value__char_scanf_12.c":43:27)
#loc32 = loc("CWE252_Unchecked_Return_Value__char_scanf_12.c":45:13)
#loc33 = loc("CWE252_Unchecked_Return_Value__char_scanf_12.c":48:13)
#loc34 = loc("CWE252_Unchecked_Return_Value__char_scanf_12.c":45:17)
#loc35 = loc("CWE252_Unchecked_Return_Value__char_scanf_12.c":45:23)
#loc36 = loc("CWE252_Unchecked_Return_Value__char_scanf_12.c":45:33)
#loc37 = loc("CWE252_Unchecked_Return_Value__char_scanf_12.c":45:42)
#loc38 = loc("CWE252_Unchecked_Return_Value__char_scanf_12.c":46:13)
#loc39 = loc("CWE252_Unchecked_Return_Value__char_scanf_12.c":47:17)
#loc40 = loc("CWE252_Unchecked_Return_Value__char_scanf_12.c":90:1)
#loc41 = loc("CWE252_Unchecked_Return_Value__char_scanf_12.c":93:1)
#loc42 = loc("CWE252_Unchecked_Return_Value__char_scanf_12.c":92:5)
#loc43 = loc("CWE252_Unchecked_Return_Value__char_scanf_12.c":92:11)
#loc44 = loc("CWE252_Unchecked_Return_Value__char_scanf_12.c":58:1)
#loc45 = loc("CWE252_Unchecked_Return_Value__char_scanf_12.c":88:1)
#loc46 = loc("CWE252_Unchecked_Return_Value__char_scanf_12.c":60:5)
#loc47 = loc("CWE252_Unchecked_Return_Value__char_scanf_12.c":87:5)
#loc48 = loc("CWE252_Unchecked_Return_Value__char_scanf_12.c":60:8)
#loc49 = loc("CWE252_Unchecked_Return_Value__char_scanf_12.c":60:33)
#loc50 = loc("CWE252_Unchecked_Return_Value__char_scanf_12.c":61:5)
#loc51 = loc("CWE252_Unchecked_Return_Value__char_scanf_12.c":73:5)
#loc52 = loc("CWE252_Unchecked_Return_Value__char_scanf_12.c":75:5)
#loc53 = loc("CWE252_Unchecked_Return_Value__char_scanf_12.c":62:9)
#loc54 = loc("CWE252_Unchecked_Return_Value__char_scanf_12.c":72:9)
#loc55 = loc("CWE252_Unchecked_Return_Value__char_scanf_12.c":65:13)
#loc56 = loc("CWE252_Unchecked_Return_Value__char_scanf_12.c":65:36)
#loc57 = loc("CWE252_Unchecked_Return_Value__char_scanf_12.c":66:13)
#loc58 = loc("CWE252_Unchecked_Return_Value__char_scanf_12.c":66:27)
#loc59 = loc("CWE252_Unchecked_Return_Value__char_scanf_12.c":68:13)
#loc60 = loc("CWE252_Unchecked_Return_Value__char_scanf_12.c":71:13)
#loc61 = loc("CWE252_Unchecked_Return_Value__char_scanf_12.c":68:17)
#loc62 = loc("CWE252_Unchecked_Return_Value__char_scanf_12.c":68:23)
#loc63 = loc("CWE252_Unchecked_Return_Value__char_scanf_12.c":68:33)
#loc64 = loc("CWE252_Unchecked_Return_Value__char_scanf_12.c":68:42)
#loc65 = loc("CWE252_Unchecked_Return_Value__char_scanf_12.c":69:13)
#loc66 = loc("CWE252_Unchecked_Return_Value__char_scanf_12.c":70:27)
#loc67 = loc("CWE252_Unchecked_Return_Value__char_scanf_12.c":70:17)
#loc68 = loc("CWE252_Unchecked_Return_Value__char_scanf_12.c":76:9)
#loc69 = loc("CWE252_Unchecked_Return_Value__char_scanf_12.c":86:9)
#loc70 = loc("CWE252_Unchecked_Return_Value__char_scanf_12.c":79:13)
#loc71 = loc("CWE252_Unchecked_Return_Value__char_scanf_12.c":79:36)
#loc72 = loc("CWE252_Unchecked_Return_Value__char_scanf_12.c":80:13)
#loc73 = loc("CWE252_Unchecked_Return_Value__char_scanf_12.c":80:27)
#loc74 = loc("CWE252_Unchecked_Return_Value__char_scanf_12.c":82:13)
#loc75 = loc("CWE252_Unchecked_Return_Value__char_scanf_12.c":85:13)
#loc76 = loc("CWE252_Unchecked_Return_Value__char_scanf_12.c":82:17)
#loc77 = loc("CWE252_Unchecked_Return_Value__char_scanf_12.c":82:23)
#loc78 = loc("CWE252_Unchecked_Return_Value__char_scanf_12.c":82:33)
#loc79 = loc("CWE252_Unchecked_Return_Value__char_scanf_12.c":82:42)
#loc80 = loc("CWE252_Unchecked_Return_Value__char_scanf_12.c":83:13)
#loc81 = loc("CWE252_Unchecked_Return_Value__char_scanf_12.c":84:27)
#loc82 = loc("CWE252_Unchecked_Return_Value__char_scanf_12.c":84:17)
#loc83 = loc(fused[#loc1, #loc2])
#loc84 = loc(fused[#loc3, #loc4])
#loc85 = loc(fused[#loc6, #loc7])
#loc86 = loc(fused[#loc9, #loc10])
#loc87 = loc(fused[#loc11, #loc12])
#loc88 = loc(fused[#loc13, #loc14])
#loc89 = loc(fused[#loc15, #loc16, #loc17, #loc12])
#loc90 = loc(fused[#loc18, #loc19])
#loc91 = loc(fused[#loc20, #loc21])
#loc92 = loc(fused[#loc22, #loc23])
#loc93 = loc(fused[#loc26, #loc27])
#loc94 = loc(fused[#loc28, #loc29])
#loc95 = loc(fused[#loc30, #loc31])
#loc96 = loc(fused[#loc32, #loc33])
#loc97 = loc(fused[#loc34, #loc37])
#loc98 = loc(fused[#loc38, #loc33])
#loc99 = loc(fused[#loc40, #loc41])
#loc100 = loc(fused[#loc42, #loc43])
#loc101 = loc(fused[#loc44, #loc45])
#loc102 = loc(fused[#loc46, #loc47])
#loc103 = loc(fused[#loc48, #loc49])
#loc104 = loc(fused[#loc50, #loc51, #loc52, #loc47])
#loc105 = loc(fused[#loc53, #loc54])
#loc106 = loc(fused[#loc55, #loc56])
#loc107 = loc(fused[#loc57, #loc58])
#loc108 = loc(fused[#loc59, #loc60])
#loc109 = loc(fused[#loc61, #loc64])
#loc110 = loc(fused[#loc65, #loc60])
#loc111 = loc(fused[#loc68, #loc69])
#loc112 = loc(fused[#loc70, #loc71])
#loc113 = loc(fused[#loc72, #loc73])
#loc114 = loc(fused[#loc74, #loc75])
#loc115 = loc(fused[#loc76, #loc79])
#loc116 = loc(fused[#loc80, #loc75])
