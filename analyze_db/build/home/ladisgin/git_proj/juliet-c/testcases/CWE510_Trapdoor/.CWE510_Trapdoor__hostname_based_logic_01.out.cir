!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc193 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":220:10)
#loc194 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":220:14)
#loc195 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":220:20)
#loc196 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":220:32)
!ty_in_addr = !cir.struct<struct "in_addr" {!u32i} #cir.record.decl.ast>
#loc384 = loc(fused[#loc193, #loc194])
#loc385 = loc(fused[#loc195, #loc196])
!ty_sockaddr = !cir.struct<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.struct<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE510_Trapdoor/CWE510_Trapdoor__hostname_based_logic_01.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc308)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc309)
  cir.func private @bind(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc310)
  cir.func private @listen(!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc311)
  cir.func private @accept(!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc312)
  cir.func private @getsockname(!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i extra(#fn_attr) loc(#loc313)
  cir.func private @getnameinfo(!cir.ptr<!ty_sockaddr>, !u32i, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>, !u32i, !s32i) -> !s32i loc(#loc314)
  cir.func private @strcmp(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc315)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"admin.google.com\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc17)
  cir.func private @send(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc316)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Welcome, admin!\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc20)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Welcome!\00" : !cir.array<!s8i x 9>> : !cir.array<!s8i x 9> {alignment = 1 : i64} loc(#loc21)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc317)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Send failed!\00" : !cir.array<!s8i x 13>> : !cir.array<!s8i x 13> {alignment = 1 : i64} loc(#loc24)
  cir.func private @close(!s32i) -> !s32i loc(#loc318)
  cir.func no_proto @CWE510_Trapdoor__hostname_based_logic_01_bad() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc321)
      %1 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["acceptService"] {alignment = 4 : i64} loc(#loc322)
      %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptServiceLen", init] {alignment = 4 : i64} loc(#loc323)
      %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc324)
      %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc325)
      %5 = cir.alloca !cir.array<!s8i x 1025>, !cir.ptr<!cir.array<!s8i x 1025>>, ["hostname"] {alignment = 16 : i64} loc(#loc326)
      %6 = cir.alloca !cir.array<!s8i x 32>, !cir.ptr<!cir.array<!s8i x 32>>, ["servInfo"] {alignment = 16 : i64} loc(#loc327)
      %7 = cir.const #cir.int<16> : !u64i loc(#loc328)
      %8 = cir.cast(integral, %7 : !u64i), !s32i loc(#loc328)
      cir.store %8, %2 : !s32i, !cir.ptr<!s32i> loc(#loc323)
      %9 = cir.const #cir.int<1> : !s32i loc(#loc37)
      %10 = cir.unary(minus, %9) : !s32i, !s32i loc(#loc37)
      cir.store %10, %3 : !s32i, !cir.ptr<!s32i> loc(#loc324)
      %11 = cir.const #cir.int<1> : !s32i loc(#loc39)
      %12 = cir.unary(minus, %11) : !s32i, !s32i loc(#loc39)
      cir.store %12, %4 : !s32i, !cir.ptr<!s32i> loc(#loc325)
      cir.scope {
        cir.do {
          %13 = cir.const #cir.int<2> : !s32i loc(#loc47)
          %14 = cir.const #cir.int<1> : !s32i loc(#loc48)
          %15 = cir.const #cir.int<6> : !s32i loc(#loc49)
          %16 = cir.call @socket(%13, %14, %15) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc50)
          cir.store %16, %3 : !s32i, !cir.ptr<!s32i> loc(#loc330)
          cir.scope {
            %35 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc55)
            %36 = cir.const #cir.int<1> : !s32i loc(#loc56)
            %37 = cir.unary(minus, %36) : !s32i, !s32i loc(#loc56)
            %38 = cir.cmp(eq, %35, %37) : !s32i, !cir.bool loc(#loc332)
            cir.if %38 {
              cir.break loc(#loc58)
            } loc(#loc333)
          } loc(#loc331)
          %17 = cir.cast(bitcast, %0 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc334)
          %18 = cir.const #cir.int<0> : !s32i loc(#loc61)
          %19 = cir.const #cir.int<16> : !u64i loc(#loc335)
          cir.libc.memset %19 bytes from %17 set to %18 : !cir.ptr<!void>, !s32i, !u64i loc(#loc336)
          %20 = cir.const #cir.int<2> : !s32i loc(#loc66)
          %21 = cir.cast(integral, %20 : !s32i), !u16i loc(#loc66)
          %22 = cir.get_member %0[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc67)
          cir.store %21, %22 : !u16i, !cir.ptr<!u16i> loc(#loc337)
          %23 = cir.const #cir.int<0> : !s32i loc(#loc69)
          %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc69)
          %25 = cir.get_member %0[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc70)
          %26 = cir.get_member %25[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc71)
          cir.store %24, %26 : !u32i, !cir.ptr<!u32i> loc(#loc338)
          %27 = cir.const #cir.int<20000> : !s32i loc(#loc73)
          %28 = cir.cast(integral, %27 : !s32i), !u16i loc(#loc73)
          %29 = cir.call @htons(%28) : (!u16i) -> !u16i extra(#fn_attr) loc(#loc74)
          %30 = cir.get_member %0[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc75)
          cir.store %29, %30 : !u16i, !cir.ptr<!u16i> loc(#loc339)
          cir.scope {
            %35 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc80)
            %36 = cir.cast(bitcast, %0 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc341)
            %37 = cir.const #cir.int<16> : !u64i loc(#loc342)
            %38 = cir.cast(integral, %37 : !u64i), !u32i loc(#loc342)
            %39 = cir.call @bind(%35, %36, %38) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc85)
            %40 = cir.const #cir.int<1> : !s32i loc(#loc86)
            %41 = cir.unary(minus, %40) : !s32i, !s32i loc(#loc86)
            %42 = cir.cmp(eq, %39, %41) : !s32i, !cir.bool loc(#loc343)
            cir.if %42 {
              cir.break loc(#loc88)
            } loc(#loc344)
          } loc(#loc340)
          cir.scope {
            %35 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc91)
            %36 = cir.const #cir.int<5> : !s32i loc(#loc92)
            %37 = cir.call @listen(%35, %36) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc93)
            %38 = cir.const #cir.int<1> : !s32i loc(#loc94)
            %39 = cir.unary(minus, %38) : !s32i, !s32i loc(#loc94)
            %40 = cir.cmp(eq, %37, %39) : !s32i, !cir.bool loc(#loc346)
            cir.if %40 {
              cir.break loc(#loc96)
            } loc(#loc347)
          } loc(#loc345)
          %31 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc97)
          %32 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc98)
          %33 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc99)
          %34 = cir.call @accept(%31, %32, %33) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc100)
          cir.store %34, %4 : !s32i, !cir.ptr<!s32i> loc(#loc348)
          cir.scope {
            %35 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc105)
            %36 = cir.const #cir.int<1> : !s32i loc(#loc106)
            %37 = cir.unary(minus, %36) : !s32i, !s32i loc(#loc106)
            %38 = cir.cmp(eq, %35, %37) : !s32i, !cir.bool loc(#loc350)
            cir.if %38 {
              cir.break loc(#loc108)
            } loc(#loc351)
          } loc(#loc349)
          cir.scope {
            %35 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc111)
            %36 = cir.cast(bitcast, %1 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc353)
            %37 = cir.cast(bitcast, %2 : !cir.ptr<!s32i>), !cir.ptr<!u32i> loc(#loc354)
            %38 = cir.call @getsockname(%35, %36, %37) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i extra(#fn_attr) loc(#loc116)
            %39 = cir.const #cir.int<1> : !s32i loc(#loc117)
            %40 = cir.unary(minus, %39) : !s32i, !s32i loc(#loc118)
            %41 = cir.cmp(eq, %38, %40) : !s32i, !cir.bool loc(#loc355)
            cir.if %41 {
              cir.break loc(#loc120)
            } loc(#loc356)
          } loc(#loc352)
          cir.scope {
            %35 = cir.cast(bitcast, %1 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc358)
            %36 = cir.const #cir.int<16> : !u64i loc(#loc359)
            %37 = cir.cast(integral, %36 : !u64i), !u32i loc(#loc359)
            %38 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 1025>>), !cir.ptr<!s8i> loc(#loc127)
            %39 = cir.const #cir.int<1025> : !s32i loc(#loc128)
            %40 = cir.cast(integral, %39 : !s32i), !u32i loc(#loc128)
            %41 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc129)
            %42 = cir.const #cir.int<32> : !s32i loc(#loc130)
            %43 = cir.cast(integral, %42 : !s32i), !u32i loc(#loc130)
            %44 = cir.const #cir.int<2> : !s32i loc(#loc131)
            %45 = cir.call @getnameinfo(%35, %37, %38, %40, %41, %43, %44) : (!cir.ptr<!ty_sockaddr>, !u32i, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>, !u32i, !s32i) -> !s32i loc(#loc132)
            %46 = cir.const #cir.int<0> : !s32i loc(#loc133)
            %47 = cir.cmp(ne, %45, %46) : !s32i, !cir.bool loc(#loc360)
            cir.if %47 {
              cir.break loc(#loc135)
            } loc(#loc361)
          } loc(#loc357)
          cir.scope {
            %35 = cir.get_global @strcmp : !cir.ptr<!cir.func<!s32i (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc138)
            %36 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc17)
            %37 = cir.cast(array_to_ptrdecay, %36 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc17)
            %38 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 1025>>), !cir.ptr<!s8i> loc(#loc139)
            %39 = cir.call @strcmp(%37, %38) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc138)
            %40 = cir.const #cir.int<0> : !s32i loc(#loc140)
            %41 = cir.cmp(eq, %39, %40) : !s32i, !cir.bool loc(#loc363)
            cir.if %41 {
              cir.scope {
                %42 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc146)
                %43 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc20)
                %44 = cir.cast(array_to_ptrdecay, %43 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc20)
                %45 = cir.cast(bitcast, %44 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc20)
                %46 = cir.const #cir.int<15> : !u64i loc(#loc366)
                %47 = cir.const #cir.int<0> : !s32i loc(#loc149)
                %48 = cir.call @send(%42, %45, %46, %47) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc150)
                %49 = cir.const #cir.int<1> : !s32i loc(#loc151)
                %50 = cir.unary(minus, %49) : !s32i, !s32i loc(#loc151)
                %51 = cir.cast(integral, %50 : !s32i), !s64i loc(#loc151)
                %52 = cir.cmp(eq, %48, %51) : !s64i, !cir.bool loc(#loc367)
                cir.if %52 {
                  cir.break loc(#loc153)
                } loc(#loc368)
              } loc(#loc365)
            } else {
              cir.scope {
                %42 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc156)
                %43 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc21)
                %44 = cir.cast(array_to_ptrdecay, %43 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc21)
                %45 = cir.cast(bitcast, %44 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc21)
                %46 = cir.const #cir.int<8> : !u64i loc(#loc370)
                %47 = cir.const #cir.int<0> : !s32i loc(#loc159)
                %48 = cir.call @send(%42, %45, %46, %47) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc160)
                %49 = cir.const #cir.int<1> : !s32i loc(#loc161)
                %50 = cir.unary(minus, %49) : !s32i, !s32i loc(#loc161)
                %51 = cir.cast(integral, %50 : !s32i), !s64i loc(#loc161)
                %52 = cir.cmp(eq, %48, %51) : !s64i, !cir.bool loc(#loc371)
                cir.if %52 {
                  %53 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 13>> loc(#loc24)
                  %54 = cir.cast(array_to_ptrdecay, %53 : !cir.ptr<!cir.array<!s8i x 13>>), !cir.ptr<!s8i> loc(#loc24)
                  cir.call @printLine(%54) : (!cir.ptr<!s8i>) -> () loc(#loc163)
                } loc(#loc372)
              } loc(#loc369)
            } loc(#loc364)
          } loc(#loc362)
          cir.yield loc(#loc46)
        } while {
          %13 = cir.const #cir.int<0> : !s32i loc(#loc164)
          %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc164)
          cir.condition(%14) loc(#loc164)
        } loc(#loc329)
      } loc(#loc329)
      cir.scope {
        %13 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc167)
        %14 = cir.const #cir.int<1> : !s32i loc(#loc168)
        %15 = cir.unary(minus, %14) : !s32i, !s32i loc(#loc168)
        %16 = cir.cmp(ne, %13, %15) : !s32i, !cir.bool loc(#loc374)
        cir.if %16 {
          %17 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc170)
          %18 = cir.call @close(%17) : (!s32i) -> !s32i loc(#loc171)
        } loc(#loc375)
      } loc(#loc373)
      cir.scope {
        %13 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc174)
        %14 = cir.const #cir.int<1> : !s32i loc(#loc175)
        %15 = cir.unary(minus, %14) : !s32i, !s32i loc(#loc175)
        %16 = cir.cmp(ne, %13, %15) : !s32i, !cir.bool loc(#loc377)
        cir.if %16 {
          %17 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc177)
          %18 = cir.call @close(%17) : (!s32i) -> !s32i loc(#loc178)
        } loc(#loc378)
      } loc(#loc376)
    } loc(#loc320)
    cir.return loc(#loc28)
  } loc(#loc319)
  cir.func no_proto @CWE510_Trapdoor__hostname_based_logic_01_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<!void ()>> loc(#loc380)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc181)
    cir.return loc(#loc180)
  } loc(#loc379)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc381)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc382)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc187)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc188)
  cir.global "private" constant cir_private dsolocal @".str.6" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc189)
  cir.global "private" constant cir_private dsolocal @".str.7" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc190)
  cir.func @main(%arg0: !s32i loc(fused[#loc193, #loc194]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc195, #loc196])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc384)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc385)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc192)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc197)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc197)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc198)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc199)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc199)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc200)
    %6 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc187)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc187)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc201)
    %8 = cir.get_global @CWE510_Trapdoor__hostname_based_logic_01_good : !cir.ptr<!cir.func<!void ()>> loc(#loc386)
    cir.call @CWE510_Trapdoor__hostname_based_logic_01_good() : () -> () loc(#loc202)
    %9 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc188)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc188)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc204)
    %11 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc189)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc189)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc205)
    %13 = cir.get_global @CWE510_Trapdoor__hostname_based_logic_01_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc387)
    cir.call @CWE510_Trapdoor__hostname_based_logic_01_bad() : () -> () loc(#loc206)
    %14 = cir.get_global @".str.7" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc190)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc190)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc208)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc209)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc388)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc388)
    cir.return %17 : !s32i loc(#loc388)
  } loc(#loc383)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc391)
      %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc392)
      %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc393)
      %3 = cir.const #cir.int<1> : !s32i loc(#loc218)
      %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc218)
      cir.store %4, %1 : !s32i, !cir.ptr<!s32i> loc(#loc392)
      %5 = cir.const #cir.int<1> : !s32i loc(#loc220)
      %6 = cir.unary(minus, %5) : !s32i, !s32i loc(#loc220)
      cir.store %6, %2 : !s32i, !cir.ptr<!s32i> loc(#loc393)
      cir.scope {
        cir.do {
          %7 = cir.const #cir.int<2> : !s32i loc(#loc223)
          %8 = cir.const #cir.int<1> : !s32i loc(#loc224)
          %9 = cir.const #cir.int<6> : !s32i loc(#loc225)
          %10 = cir.call @socket(%7, %8, %9) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc226)
          cir.store %10, %1 : !s32i, !cir.ptr<!s32i> loc(#loc395)
          cir.scope {
            %29 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc231)
            %30 = cir.const #cir.int<1> : !s32i loc(#loc232)
            %31 = cir.unary(minus, %30) : !s32i, !s32i loc(#loc232)
            %32 = cir.cmp(eq, %29, %31) : !s32i, !cir.bool loc(#loc397)
            cir.if %32 {
              cir.break loc(#loc234)
            } loc(#loc398)
          } loc(#loc396)
          %11 = cir.cast(bitcast, %0 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc399)
          %12 = cir.const #cir.int<0> : !s32i loc(#loc237)
          %13 = cir.const #cir.int<16> : !u64i loc(#loc400)
          cir.libc.memset %13 bytes from %11 set to %12 : !cir.ptr<!void>, !s32i, !u64i loc(#loc401)
          %14 = cir.const #cir.int<2> : !s32i loc(#loc242)
          %15 = cir.cast(integral, %14 : !s32i), !u16i loc(#loc242)
          %16 = cir.get_member %0[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc67)
          cir.store %15, %16 : !u16i, !cir.ptr<!u16i> loc(#loc402)
          %17 = cir.const #cir.int<0> : !s32i loc(#loc244)
          %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc244)
          %19 = cir.get_member %0[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc70)
          %20 = cir.get_member %19[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc71)
          cir.store %18, %20 : !u32i, !cir.ptr<!u32i> loc(#loc403)
          %21 = cir.const #cir.int<20000> : !s32i loc(#loc246)
          %22 = cir.cast(integral, %21 : !s32i), !u16i loc(#loc246)
          %23 = cir.call @htons(%22) : (!u16i) -> !u16i extra(#fn_attr) loc(#loc247)
          %24 = cir.get_member %0[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc75)
          cir.store %23, %24 : !u16i, !cir.ptr<!u16i> loc(#loc404)
          cir.scope {
            %29 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc252)
            %30 = cir.cast(bitcast, %0 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc406)
            %31 = cir.const #cir.int<16> : !u64i loc(#loc407)
            %32 = cir.cast(integral, %31 : !u64i), !u32i loc(#loc407)
            %33 = cir.call @bind(%29, %30, %32) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc257)
            %34 = cir.const #cir.int<1> : !s32i loc(#loc258)
            %35 = cir.unary(minus, %34) : !s32i, !s32i loc(#loc258)
            %36 = cir.cmp(eq, %33, %35) : !s32i, !cir.bool loc(#loc408)
            cir.if %36 {
              cir.break loc(#loc260)
            } loc(#loc409)
          } loc(#loc405)
          cir.scope {
            %29 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc263)
            %30 = cir.const #cir.int<5> : !s32i loc(#loc264)
            %31 = cir.call @listen(%29, %30) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc265)
            %32 = cir.const #cir.int<1> : !s32i loc(#loc266)
            %33 = cir.unary(minus, %32) : !s32i, !s32i loc(#loc266)
            %34 = cir.cmp(eq, %31, %33) : !s32i, !cir.bool loc(#loc411)
            cir.if %34 {
              cir.break loc(#loc268)
            } loc(#loc412)
          } loc(#loc410)
          %25 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc269)
          %26 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc270)
          %27 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc271)
          %28 = cir.call @accept(%25, %26, %27) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc272)
          cir.store %28, %2 : !s32i, !cir.ptr<!s32i> loc(#loc413)
          cir.scope {
            %29 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc277)
            %30 = cir.const #cir.int<1> : !s32i loc(#loc278)
            %31 = cir.unary(minus, %30) : !s32i, !s32i loc(#loc278)
            %32 = cir.cmp(eq, %29, %31) : !s32i, !cir.bool loc(#loc415)
            cir.if %32 {
              cir.break loc(#loc280)
            } loc(#loc416)
          } loc(#loc414)
          cir.scope {
            %29 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc283)
            %30 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc284)
            %31 = cir.cast(array_to_ptrdecay, %30 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc284)
            %32 = cir.cast(bitcast, %31 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc284)
            %33 = cir.const #cir.int<8> : !u64i loc(#loc418)
            %34 = cir.const #cir.int<0> : !s32i loc(#loc287)
            %35 = cir.call @send(%29, %32, %33, %34) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc288)
            %36 = cir.const #cir.int<1> : !s32i loc(#loc289)
            %37 = cir.unary(minus, %36) : !s32i, !s32i loc(#loc289)
            %38 = cir.cast(integral, %37 : !s32i), !s64i loc(#loc289)
            %39 = cir.cmp(eq, %35, %38) : !s64i, !cir.bool loc(#loc419)
            cir.if %39 {
              %40 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 13>> loc(#loc291)
              %41 = cir.cast(array_to_ptrdecay, %40 : !cir.ptr<!cir.array<!s8i x 13>>), !cir.ptr<!s8i> loc(#loc291)
              cir.call @printLine(%41) : (!cir.ptr<!s8i>) -> () loc(#loc292)
            } loc(#loc420)
          } loc(#loc417)
          cir.yield loc(#loc222)
        } while {
          %7 = cir.const #cir.int<0> : !s32i loc(#loc293)
          %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc293)
          cir.condition(%8) loc(#loc293)
        } loc(#loc394)
      } loc(#loc394)
      cir.scope {
        %7 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc296)
        %8 = cir.const #cir.int<1> : !s32i loc(#loc297)
        %9 = cir.unary(minus, %8) : !s32i, !s32i loc(#loc297)
        %10 = cir.cmp(ne, %7, %9) : !s32i, !cir.bool loc(#loc422)
        cir.if %10 {
          %11 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc299)
          %12 = cir.call @close(%11) : (!s32i) -> !s32i loc(#loc300)
        } loc(#loc423)
      } loc(#loc421)
      cir.scope {
        %7 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc303)
        %8 = cir.const #cir.int<1> : !s32i loc(#loc304)
        %9 = cir.unary(minus, %8) : !s32i, !s32i loc(#loc304)
        %10 = cir.cmp(ne, %7, %9) : !s32i, !cir.bool loc(#loc425)
        cir.if %10 {
          %11 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc306)
          %12 = cir.call @close(%11) : (!s32i) -> !s32i loc(#loc307)
        } loc(#loc426)
      } loc(#loc424)
    } loc(#loc390)
    cir.return loc(#loc212)
  } loc(#loc389)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE510_Trapdoor/CWE510_Trapdoor__hostname_based_logic_01.c":0:0)
#loc1 = loc("/usr/include/sys/socket.h":102:1)
#loc2 = loc("/usr/include/sys/socket.h":102:62)
#loc3 = loc("/usr/include/netinet/in.h":404:1)
#loc4 = loc("/usr/include/netinet/in.h":405:40)
#loc5 = loc("/usr/include/sys/socket.h":112:1)
#loc6 = loc("/usr/include/sys/socket.h":113:6)
#loc7 = loc("/usr/include/sys/socket.h":296:1)
#loc8 = loc("/usr/include/sys/socket.h":296:39)
#loc9 = loc("/usr/include/sys/socket.h":306:1)
#loc10 = loc("/usr/include/sys/socket.h":307:38)
#loc11 = loc("/usr/include/sys/socket.h":116:1)
#loc12 = loc("/usr/include/sys/socket.h":117:33)
#loc13 = loc("/usr/include/netdb.h":675:1)
#loc14 = loc("/usr/include/netdb.h":678:36)
#loc15 = loc("/usr/include/string.h":156:1)
#loc16 = loc("/usr/include/string.h":157:33)
#loc17 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":103:24)
#loc18 = loc("/usr/include/sys/socket.h":138:1)
#loc19 = loc("/usr/include/sys/socket.h":138:74)
#loc20 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":105:40)
#loc21 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":113:40)
#loc22 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc23 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc24 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":115:31)
#loc25 = loc("/usr/include/unistd.h":358:1)
#loc26 = loc("/usr/include/unistd.h":358:27)
#loc27 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":47:1)
#loc28 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":135:1)
#loc29 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":49:5)
#loc30 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":134:5)
#loc31 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":54:9)
#loc32 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":54:28)
#loc33 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":54:37)
#loc34 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":55:9)
#loc35 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":55:52)
#loc36 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":56:9)
#loc37 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":56:31)
#loc38 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":57:9)
#loc39 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":57:31)
#loc40 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":58:9)
#loc41 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":58:33)
#loc42 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":59:9)
#loc43 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":59:33)
#loc44 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":55:32)
#loc45 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":60:9)
#loc46 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":119:17)
#loc47 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":69:35)
#loc48 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":69:44)
#loc49 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":69:57)
#loc50 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":69:28)
#loc51 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":69:13)
#loc52 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":69:68)
#loc53 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":70:13)
#loc54 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":73:13)
#loc55 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":70:17)
#loc56 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":70:33)
#loc57 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":71:13)
#loc58 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":72:17)
#loc59 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":74:20)
#loc60 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":74:21)
#loc61 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":74:30)
#loc62 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":74:33)
#loc63 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":74:47)
#loc64 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":74:13)
#loc65 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":74:48)
#loc66 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":75:34)
#loc67 = loc("/usr/include/netinet/in.h":249:5)
#loc68 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":75:13)
#loc69 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":76:39)
#loc70 = loc("/usr/include/netinet/in.h":251:20)
#loc71 = loc("/usr/include/netinet/in.h":33:15)
#loc72 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":76:13)
#loc73 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":77:38)
#loc74 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":77:32)
#loc75 = loc("/usr/include/netinet/in.h":250:15)
#loc76 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":77:13)
#loc77 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":77:43)
#loc78 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":78:13)
#loc79 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":81:13)
#loc80 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":78:22)
#loc81 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":78:54)
#loc82 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":78:55)
#loc83 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":78:64)
#loc84 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":78:78)
#loc85 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":78:17)
#loc86 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":78:84)
#loc87 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":79:13)
#loc88 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":80:17)
#loc89 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":82:13)
#loc90 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":85:13)
#loc91 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":82:24)
#loc92 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":82:38)
#loc93 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":82:17)
#loc94 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":82:44)
#loc95 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":83:13)
#loc96 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":84:17)
#loc97 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":86:35)
#loc98 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":86:49)
#loc99 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":86:55)
#loc100 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":86:28)
#loc101 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":86:13)
#loc102 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":86:59)
#loc103 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":87:13)
#loc104 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":90:13)
#loc105 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":87:17)
#loc106 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":87:33)
#loc107 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":88:13)
#loc108 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":89:17)
#loc109 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":91:13)
#loc110 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":94:13)
#loc111 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":91:29)
#loc112 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":91:62)
#loc113 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":91:63)
#loc114 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":91:78)
#loc115 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":91:79)
#loc116 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":91:17)
#loc117 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":91:101)
#loc118 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":91:100)
#loc119 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":92:13)
#loc120 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":93:17)
#loc121 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":95:13)
#loc122 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":101:13)
#loc123 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":95:48)
#loc124 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":95:49)
#loc125 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":96:29)
#loc126 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":96:51)
#loc127 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":97:29)
#loc128 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":98:29)
#loc129 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":98:41)
#loc130 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":98:51)
#loc131 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":98:63)
#loc132 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":95:17)
#loc133 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":98:82)
#loc134 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":99:13)
#loc135 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":100:17)
#loc136 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":103:13)
#loc137 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":117:13)
#loc138 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":103:17)
#loc139 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":103:44)
#loc140 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":103:57)
#loc141 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":104:13)
#loc142 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":110:13)
#loc143 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":112:13)
#loc144 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":105:17)
#loc145 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":109:17)
#loc146 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":105:26)
#loc147 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":105:55)
#loc148 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":105:75)
#loc149 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":105:78)
#loc150 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":105:21)
#loc151 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":105:85)
#loc152 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":106:17)
#loc153 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":108:21)
#loc154 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":113:17)
#loc155 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":116:17)
#loc156 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":113:26)
#loc157 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":113:57)
#loc158 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":113:79)
#loc159 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":113:82)
#loc160 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":113:21)
#loc161 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":113:88)
#loc162 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":114:17)
#loc163 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":115:21)
#loc164 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":119:16)
#loc165 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":120:9)
#loc166 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":123:9)
#loc167 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":120:13)
#loc168 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":120:29)
#loc169 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":121:9)
#loc170 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":122:26)
#loc171 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":122:13)
#loc172 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":124:9)
#loc173 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":127:9)
#loc174 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":124:13)
#loc175 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":124:29)
#loc176 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":125:9)
#loc177 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":126:26)
#loc178 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":126:13)
#loc179 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":206:1)
#loc180 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":209:1)
#loc181 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":208:5)
#loc182 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":208:11)
#loc183 = loc("/usr/include/stdlib.h":575:1)
#loc184 = loc("/usr/include/stdlib.h":575:41)
#loc185 = loc("/usr/include/time.h":76:1)
#loc186 = loc("/usr/include/time.h":76:38)
#loc187 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":225:15)
#loc188 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":227:15)
#loc189 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":230:15)
#loc190 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":232:15)
#loc191 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":220:1)
#loc192 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":235:1)
#loc197 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":221:1)
#loc198 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":223:27)
#loc199 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":223:22)
#loc200 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":223:5)
#loc201 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":225:5)
#loc202 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":226:5)
#loc203 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":226:51)
#loc204 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":227:5)
#loc205 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":230:5)
#loc206 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":231:5)
#loc207 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":231:50)
#loc208 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":232:5)
#loc209 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":234:12)
#loc210 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":234:5)
#loc211 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":141:1)
#loc212 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":204:1)
#loc213 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":143:5)
#loc214 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":203:5)
#loc215 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":148:9)
#loc216 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":148:28)
#loc217 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":149:9)
#loc218 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":149:31)
#loc219 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":150:9)
#loc220 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":150:31)
#loc221 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":151:9)
#loc222 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":188:17)
#loc223 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":160:35)
#loc224 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":160:44)
#loc225 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":160:57)
#loc226 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":160:28)
#loc227 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":160:13)
#loc228 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":160:68)
#loc229 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":161:13)
#loc230 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":164:13)
#loc231 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":161:17)
#loc232 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":161:33)
#loc233 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":162:13)
#loc234 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":163:17)
#loc235 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":165:20)
#loc236 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":165:21)
#loc237 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":165:30)
#loc238 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":165:33)
#loc239 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":165:47)
#loc240 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":165:13)
#loc241 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":165:48)
#loc242 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":166:34)
#loc243 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":166:13)
#loc244 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":167:39)
#loc245 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":167:13)
#loc246 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":168:38)
#loc247 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":168:32)
#loc248 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":168:13)
#loc249 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":168:43)
#loc250 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":169:13)
#loc251 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":172:13)
#loc252 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":169:22)
#loc253 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":169:54)
#loc254 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":169:55)
#loc255 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":169:64)
#loc256 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":169:78)
#loc257 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":169:17)
#loc258 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":169:84)
#loc259 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":170:13)
#loc260 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":171:17)
#loc261 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":173:13)
#loc262 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":176:13)
#loc263 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":173:24)
#loc264 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":173:38)
#loc265 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":173:17)
#loc266 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":173:44)
#loc267 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":174:13)
#loc268 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":175:17)
#loc269 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":177:35)
#loc270 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":177:49)
#loc271 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":177:55)
#loc272 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":177:28)
#loc273 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":177:13)
#loc274 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":177:59)
#loc275 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":178:13)
#loc276 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":181:13)
#loc277 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":178:17)
#loc278 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":178:33)
#loc279 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":179:13)
#loc280 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":180:17)
#loc281 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":183:13)
#loc282 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":186:13)
#loc283 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":183:22)
#loc284 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":183:36)
#loc285 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":183:53)
#loc286 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":183:75)
#loc287 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":183:78)
#loc288 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":183:17)
#loc289 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":183:84)
#loc290 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":184:13)
#loc291 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":185:27)
#loc292 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":185:17)
#loc293 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":188:16)
#loc294 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":189:9)
#loc295 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":192:9)
#loc296 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":189:13)
#loc297 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":189:29)
#loc298 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":190:9)
#loc299 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":191:26)
#loc300 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":191:13)
#loc301 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":193:9)
#loc302 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":196:9)
#loc303 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":193:13)
#loc304 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":193:29)
#loc305 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":194:9)
#loc306 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":195:26)
#loc307 = loc("CWE510_Trapdoor__hostname_based_logic_01.c":195:13)
#loc308 = loc(fused[#loc1, #loc2])
#loc309 = loc(fused[#loc3, #loc4])
#loc310 = loc(fused[#loc5, #loc6])
#loc311 = loc(fused[#loc7, #loc8])
#loc312 = loc(fused[#loc9, #loc10])
#loc313 = loc(fused[#loc11, #loc12])
#loc314 = loc(fused[#loc13, #loc14])
#loc315 = loc(fused[#loc15, #loc16])
#loc316 = loc(fused[#loc18, #loc19])
#loc317 = loc(fused[#loc22, #loc23])
#loc318 = loc(fused[#loc25, #loc26])
#loc319 = loc(fused[#loc27, #loc28])
#loc320 = loc(fused[#loc29, #loc30])
#loc321 = loc(fused[#loc31, #loc32])
#loc322 = loc(fused[#loc31, #loc33])
#loc323 = loc(fused[#loc34, #loc35])
#loc324 = loc(fused[#loc36, #loc37])
#loc325 = loc(fused[#loc38, #loc39])
#loc326 = loc(fused[#loc40, #loc41])
#loc327 = loc(fused[#loc42, #loc43])
#loc328 = loc(fused[#loc44, #loc35])
#loc329 = loc(fused[#loc45, #loc46])
#loc330 = loc(fused[#loc51, #loc52])
#loc331 = loc(fused[#loc53, #loc54])
#loc332 = loc(fused[#loc55, #loc56])
#loc333 = loc(fused[#loc57, #loc54])
#loc334 = loc(fused[#loc59, #loc60])
#loc335 = loc(fused[#loc62, #loc63])
#loc336 = loc(fused[#loc64, #loc65])
#loc337 = loc(fused[#loc68, #loc66])
#loc338 = loc(fused[#loc72, #loc69])
#loc339 = loc(fused[#loc76, #loc77])
#loc340 = loc(fused[#loc78, #loc79])
#loc341 = loc(fused[#loc81, #loc82])
#loc342 = loc(fused[#loc83, #loc84])
#loc343 = loc(fused[#loc85, #loc86])
#loc344 = loc(fused[#loc87, #loc79])
#loc345 = loc(fused[#loc89, #loc90])
#loc346 = loc(fused[#loc93, #loc94])
#loc347 = loc(fused[#loc95, #loc90])
#loc348 = loc(fused[#loc101, #loc102])
#loc349 = loc(fused[#loc103, #loc104])
#loc350 = loc(fused[#loc105, #loc106])
#loc351 = loc(fused[#loc107, #loc104])
#loc352 = loc(fused[#loc109, #loc110])
#loc353 = loc(fused[#loc112, #loc113])
#loc354 = loc(fused[#loc114, #loc115])
#loc355 = loc(fused[#loc116, #loc117])
#loc356 = loc(fused[#loc119, #loc110])
#loc357 = loc(fused[#loc121, #loc122])
#loc358 = loc(fused[#loc123, #loc124])
#loc359 = loc(fused[#loc125, #loc126])
#loc360 = loc(fused[#loc132, #loc133])
#loc361 = loc(fused[#loc134, #loc122])
#loc362 = loc(fused[#loc136, #loc137])
#loc363 = loc(fused[#loc138, #loc140])
#loc364 = loc(fused[#loc141, #loc142, #loc143, #loc137])
#loc365 = loc(fused[#loc144, #loc145])
#loc366 = loc(fused[#loc147, #loc148])
#loc367 = loc(fused[#loc150, #loc151])
#loc368 = loc(fused[#loc152, #loc145])
#loc369 = loc(fused[#loc154, #loc155])
#loc370 = loc(fused[#loc157, #loc158])
#loc371 = loc(fused[#loc160, #loc161])
#loc372 = loc(fused[#loc162, #loc155])
#loc373 = loc(fused[#loc165, #loc166])
#loc374 = loc(fused[#loc167, #loc168])
#loc375 = loc(fused[#loc169, #loc166])
#loc376 = loc(fused[#loc172, #loc173])
#loc377 = loc(fused[#loc174, #loc175])
#loc378 = loc(fused[#loc176, #loc173])
#loc379 = loc(fused[#loc179, #loc180])
#loc380 = loc(fused[#loc181, #loc182])
#loc381 = loc(fused[#loc183, #loc184])
#loc382 = loc(fused[#loc185, #loc186])
#loc383 = loc(fused[#loc191, #loc192])
#loc386 = loc(fused[#loc202, #loc203])
#loc387 = loc(fused[#loc206, #loc207])
#loc388 = loc(fused[#loc210, #loc209])
#loc389 = loc(fused[#loc211, #loc212])
#loc390 = loc(fused[#loc213, #loc214])
#loc391 = loc(fused[#loc215, #loc216])
#loc392 = loc(fused[#loc217, #loc218])
#loc393 = loc(fused[#loc219, #loc220])
#loc394 = loc(fused[#loc221, #loc222])
#loc395 = loc(fused[#loc227, #loc228])
#loc396 = loc(fused[#loc229, #loc230])
#loc397 = loc(fused[#loc231, #loc232])
#loc398 = loc(fused[#loc233, #loc230])
#loc399 = loc(fused[#loc235, #loc236])
#loc400 = loc(fused[#loc238, #loc239])
#loc401 = loc(fused[#loc240, #loc241])
#loc402 = loc(fused[#loc243, #loc242])
#loc403 = loc(fused[#loc245, #loc244])
#loc404 = loc(fused[#loc248, #loc249])
#loc405 = loc(fused[#loc250, #loc251])
#loc406 = loc(fused[#loc253, #loc254])
#loc407 = loc(fused[#loc255, #loc256])
#loc408 = loc(fused[#loc257, #loc258])
#loc409 = loc(fused[#loc259, #loc251])
#loc410 = loc(fused[#loc261, #loc262])
#loc411 = loc(fused[#loc265, #loc266])
#loc412 = loc(fused[#loc267, #loc262])
#loc413 = loc(fused[#loc273, #loc274])
#loc414 = loc(fused[#loc275, #loc276])
#loc415 = loc(fused[#loc277, #loc278])
#loc416 = loc(fused[#loc279, #loc276])
#loc417 = loc(fused[#loc281, #loc282])
#loc418 = loc(fused[#loc285, #loc286])
#loc419 = loc(fused[#loc288, #loc289])
#loc420 = loc(fused[#loc290, #loc282])
#loc421 = loc(fused[#loc294, #loc295])
#loc422 = loc(fused[#loc296, #loc297])
#loc423 = loc(fused[#loc298, #loc295])
#loc424 = loc(fused[#loc301, #loc302])
#loc425 = loc(fused[#loc303, #loc304])
#loc426 = loc(fused[#loc305, #loc302])
