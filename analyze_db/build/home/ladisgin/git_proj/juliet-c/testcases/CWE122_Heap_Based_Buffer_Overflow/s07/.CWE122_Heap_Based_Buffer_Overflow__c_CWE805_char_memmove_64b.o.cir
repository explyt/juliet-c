!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc7 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_64b.c":23:75)
#loc8 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_64b.c":23:82)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_64b.c":46:79)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_64b.c":46:86)
#loc90 = loc(fused[#loc7, #loc8])
#loc102 = loc(fused[#loc48, #loc49])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_64b.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc87)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc88)
  cir.func @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_64b_badSink(%arg0: !cir.ptr<!void> loc(fused[#loc7, #loc8])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc91)
    %1 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dataVoidPtr", init] {alignment = 8 : i64} loc(#loc90)
    %2 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["dataPtr", init] {alignment = 8 : i64} loc(#loc92)
    %3 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc93)
    cir.store %arg0, %1 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc15)
    %4 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc12)
    %5 = cir.cast(bitcast, %4 : !cir.ptr<!void>), !cir.ptr<!cir.ptr<!s8i>> loc(#loc12)
    cir.store %5, %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc92)
    %6 = cir.load deref %2 : !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc16)
    %7 = cir.load %6 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc17)
    cir.store %7, %3 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc93)
    cir.br ^bb1 loc(#loc94)
  ^bb1:  // pred: ^bb0
    %8 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc20)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc20)
    %10 = cir.const #cir.int<67> : !s32i loc(#loc21)
    %11 = cir.const #cir.int<100> : !s32i loc(#loc22)
    %12 = cir.const #cir.int<1> : !s32i loc(#loc23)
    %13 = cir.binop(sub, %11, %12) nsw : !s32i loc(#loc22)
    %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc22)
    cir.libc.memset %14 bytes from %9 set to %10 : !cir.ptr<!void>, !s32i, !u64i loc(#loc95)
    %15 = cir.const #cir.int<0> : !s32i loc(#loc26)
    %16 = cir.cast(integral, %15 : !s32i), !s8i loc(#loc26)
    %17 = cir.const #cir.int<100> : !s32i loc(#loc27)
    %18 = cir.const #cir.int<1> : !s32i loc(#loc28)
    %19 = cir.binop(sub, %17, %18) nsw : !s32i loc(#loc27)
    %20 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc29)
    %21 = cir.ptr_stride(%20 : !cir.ptr<!s8i>, %19 : !s32i), !cir.ptr<!s8i> loc(#loc29)
    cir.store %16, %21 : !s8i, !cir.ptr<!s8i> loc(#loc96)
    %22 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc30)
    %23 = cir.cast(bitcast, %22 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc30)
    %24 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc31)
    %25 = cir.cast(bitcast, %24 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc31)
    %26 = cir.const #cir.int<100> : !s32i loc(#loc32)
    %27 = cir.cast(integral, %26 : !s32i), !u64i loc(#loc32)
    %28 = cir.const #cir.int<1> : !u64i loc(#loc97)
    %29 = cir.binop(mul, %27, %28) : !u64i loc(#loc98)
    cir.libc.memmove %29 bytes from %25 to %23 : !cir.ptr<!void>, !u64i loc(#loc99)
    %30 = cir.const #cir.int<0> : !s32i loc(#loc37)
    %31 = cir.cast(integral, %30 : !s32i), !s8i loc(#loc37)
    %32 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc38)
    %33 = cir.const #cir.int<100> : !s32i loc(#loc39)
    %34 = cir.const #cir.int<1> : !s32i loc(#loc40)
    %35 = cir.binop(sub, %33, %34) nsw : !s32i loc(#loc39)
    %36 = cir.ptr_stride(%32 : !cir.ptr<!s8i>, %35 : !s32i), !cir.ptr<!s8i> loc(#loc41)
    cir.store %31, %36 : !s8i, !cir.ptr<!s8i> loc(#loc100)
    %37 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc42)
    cir.call @printLine(%37) : (!cir.ptr<!s8i>) -> () loc(#loc43)
    %38 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc44)
    %39 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc45)
    %40 = cir.cast(bitcast, %39 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc45)
    cir.call @free(%40) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc44)
    cir.br ^bb2 loc(#loc19)
  ^bb2:  // pred: ^bb1
    cir.return loc(#loc6)
  } loc(#loc89)
  cir.func @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_64b_goodG2BSink(%arg0: !cir.ptr<!void> loc(fused[#loc48, #loc49])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc103)
    %1 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dataVoidPtr", init] {alignment = 8 : i64} loc(#loc102)
    %2 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["dataPtr", init] {alignment = 8 : i64} loc(#loc104)
    %3 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc105)
    cir.store %arg0, %1 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc56)
    %4 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc53)
    %5 = cir.cast(bitcast, %4 : !cir.ptr<!void>), !cir.ptr<!cir.ptr<!s8i>> loc(#loc53)
    cir.store %5, %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc104)
    %6 = cir.load deref %2 : !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc57)
    %7 = cir.load %6 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc58)
    cir.store %7, %3 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc105)
    cir.br ^bb1 loc(#loc106)
  ^bb1:  // pred: ^bb0
    %8 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc61)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc61)
    %10 = cir.const #cir.int<67> : !s32i loc(#loc62)
    %11 = cir.const #cir.int<100> : !s32i loc(#loc63)
    %12 = cir.const #cir.int<1> : !s32i loc(#loc64)
    %13 = cir.binop(sub, %11, %12) nsw : !s32i loc(#loc63)
    %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc63)
    cir.libc.memset %14 bytes from %9 set to %10 : !cir.ptr<!void>, !s32i, !u64i loc(#loc107)
    %15 = cir.const #cir.int<0> : !s32i loc(#loc67)
    %16 = cir.cast(integral, %15 : !s32i), !s8i loc(#loc67)
    %17 = cir.const #cir.int<100> : !s32i loc(#loc68)
    %18 = cir.const #cir.int<1> : !s32i loc(#loc69)
    %19 = cir.binop(sub, %17, %18) nsw : !s32i loc(#loc68)
    %20 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc70)
    %21 = cir.ptr_stride(%20 : !cir.ptr<!s8i>, %19 : !s32i), !cir.ptr<!s8i> loc(#loc70)
    cir.store %16, %21 : !s8i, !cir.ptr<!s8i> loc(#loc108)
    %22 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc71)
    %23 = cir.cast(bitcast, %22 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc71)
    %24 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc72)
    %25 = cir.cast(bitcast, %24 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc72)
    %26 = cir.const #cir.int<100> : !s32i loc(#loc73)
    %27 = cir.cast(integral, %26 : !s32i), !u64i loc(#loc73)
    %28 = cir.const #cir.int<1> : !u64i loc(#loc109)
    %29 = cir.binop(mul, %27, %28) : !u64i loc(#loc110)
    cir.libc.memmove %29 bytes from %25 to %23 : !cir.ptr<!void>, !u64i loc(#loc111)
    %30 = cir.const #cir.int<0> : !s32i loc(#loc78)
    %31 = cir.cast(integral, %30 : !s32i), !s8i loc(#loc78)
    %32 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc79)
    %33 = cir.const #cir.int<100> : !s32i loc(#loc80)
    %34 = cir.const #cir.int<1> : !s32i loc(#loc81)
    %35 = cir.binop(sub, %33, %34) nsw : !s32i loc(#loc80)
    %36 = cir.ptr_stride(%32 : !cir.ptr<!s8i>, %35 : !s32i), !cir.ptr<!s8i> loc(#loc82)
    cir.store %31, %36 : !s8i, !cir.ptr<!s8i> loc(#loc112)
    %37 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc83)
    cir.call @printLine(%37) : (!cir.ptr<!s8i>) -> () loc(#loc84)
    %38 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc85)
    %39 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc86)
    %40 = cir.cast(bitcast, %39 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc86)
    cir.call @free(%40) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc85)
    cir.br ^bb2 loc(#loc60)
  ^bb2:  // pred: ^bb1
    cir.return loc(#loc47)
  } loc(#loc101)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_64b.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc3 = loc("/usr/include/stdlib.h":687:1)
#loc4 = loc("/usr/include/stdlib.h":687:32)
#loc5 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_64b.c":23:1)
#loc6 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_64b.c":39:1)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_64b.c":30:9)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_64b.c":30:24)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_64b.c":26:5)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_64b.c":26:34)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_64b.c":28:5)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_64b.c":28:28)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_64b.c":24:1)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_64b.c":28:21)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_64b.c":28:20)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_64b.c":29:5)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_64b.c":38:5)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_64b.c":31:16)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_64b.c":31:24)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_64b.c":31:29)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_64b.c":31:33)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_64b.c":31:9)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_64b.c":31:34)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_64b.c":32:25)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_64b.c":32:16)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_64b.c":32:20)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_64b.c":32:9)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_64b.c":34:17)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_64b.c":34:23)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_64b.c":34:31)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_64b.c":34:35)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_64b.c":34:46)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_64b.c":34:9)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_64b.c":34:47)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_64b.c":35:23)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_64b.c":35:9)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_64b.c":35:14)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_64b.c":35:18)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_64b.c":35:19)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_64b.c":36:19)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_64b.c":36:9)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_64b.c":37:9)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_64b.c":37:14)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_64b.c":46:1)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_64b.c":62:1)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_64b.c":53:9)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_64b.c":53:24)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_64b.c":49:5)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_64b.c":49:34)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_64b.c":51:5)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_64b.c":51:28)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_64b.c":47:1)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_64b.c":51:21)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_64b.c":51:20)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_64b.c":52:5)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_64b.c":61:5)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_64b.c":54:16)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_64b.c":54:24)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_64b.c":54:29)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_64b.c":54:33)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_64b.c":54:9)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_64b.c":54:34)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_64b.c":55:25)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_64b.c":55:16)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_64b.c":55:20)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_64b.c":55:9)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_64b.c":57:17)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_64b.c":57:23)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_64b.c":57:31)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_64b.c":57:35)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_64b.c":57:46)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_64b.c":57:9)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_64b.c":57:47)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_64b.c":58:23)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_64b.c":58:9)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_64b.c":58:14)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_64b.c":58:18)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_64b.c":58:19)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_64b.c":59:19)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_64b.c":59:9)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_64b.c":60:9)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_64b.c":60:14)
#loc87 = loc(fused[#loc1, #loc2])
#loc88 = loc(fused[#loc3, #loc4])
#loc89 = loc(fused[#loc5, #loc6])
#loc91 = loc(fused[#loc9, #loc10])
#loc92 = loc(fused[#loc11, #loc12])
#loc93 = loc(fused[#loc13, #loc14])
#loc94 = loc(fused[#loc18, #loc19])
#loc95 = loc(fused[#loc24, #loc25])
#loc96 = loc(fused[#loc29, #loc26])
#loc97 = loc(fused[#loc33, #loc34])
#loc98 = loc(fused[#loc32, #loc34])
#loc99 = loc(fused[#loc35, #loc36])
#loc100 = loc(fused[#loc38, #loc37])
#loc101 = loc(fused[#loc46, #loc47])
#loc103 = loc(fused[#loc50, #loc51])
#loc104 = loc(fused[#loc52, #loc53])
#loc105 = loc(fused[#loc54, #loc55])
#loc106 = loc(fused[#loc59, #loc60])
#loc107 = loc(fused[#loc65, #loc66])
#loc108 = loc(fused[#loc70, #loc67])
#loc109 = loc(fused[#loc74, #loc75])
#loc110 = loc(fused[#loc73, #loc75])
#loc111 = loc(fused[#loc76, #loc77])
#loc112 = loc(fused[#loc79, #loc78])
