!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc42 = loc("CWE398_Poor_Code_Quality__empty_while_15.c":106:10)
#loc43 = loc("CWE398_Poor_Code_Quality__empty_while_15.c":106:14)
#loc44 = loc("CWE398_Poor_Code_Quality__empty_while_15.c":106:20)
#loc45 = loc("CWE398_Poor_Code_Quality__empty_while_15.c":106:32)
#loc124 = loc(fused[#loc42, #loc43])
#loc125 = loc(fused[#loc44, #loc45])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE398_Poor_Code_Quality/CWE398_Poor_Code_Quality__empty_while_15.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc110)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Hello from bad()\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc3)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc4)
  cir.func no_proto @CWE398_Poor_Code_Quality__empty_while_15_bad() extra(#fn_attr) {
    cir.scope {
      %0 = cir.const #cir.int<6> : !s32i loc(#loc9)
      cir.switch (%0 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          cir.scope {
            %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i", init] {alignment = 4 : i64} loc(#loc114)
            %4 = cir.const #cir.int<0> : !s32i loc(#loc14)
            cir.store %4, %3 : !s32i, !cir.ptr<!s32i> loc(#loc114)
            cir.scope {
              cir.while {
                %5 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc17)
                %6 = cir.unary(inc, %5) : !s32i, !s32i loc(#loc18)
                cir.store %6, %3 : !s32i, !cir.ptr<!s32i> loc(#loc116)
                %7 = cir.const #cir.int<10> : !s32i loc(#loc19)
                %8 = cir.cmp(lt, %5, %7) : !s32i, !cir.bool loc(#loc117)
                cir.condition(%8) loc(#loc20)
              } do {
                cir.yield loc(#loc16)
              } loc(#loc115)
            } loc(#loc115)
          } loc(#loc113)
          %1 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc3)
          %2 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc3)
          cir.call @printLine(%2) : (!cir.ptr<!s8i>) -> () loc(#loc21)
          cir.break loc(#loc22)
        } loc(#loc10)
        cir.case(default, []) {
          %1 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc4)
          %2 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc4)
          cir.call @printLine(%2) : (!cir.ptr<!s8i>) -> () loc(#loc24)
          cir.break loc(#loc25)
        } loc(#loc23)
        cir.yield loc(#loc7)
      } loc(#loc7)
    } loc(#loc112)
    cir.return loc(#loc6)
  } loc(#loc111)
  cir.func no_proto @CWE398_Poor_Code_Quality__empty_while_15_good() extra(#fn_attr) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<!void ()>> loc(#loc119)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc28)
    %1 = cir.get_global @good2 : !cir.ptr<!cir.func<!void ()>> loc(#loc120)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc30)
    cir.return loc(#loc27)
  } loc(#loc118)
  cir.func private @srand(!u32i) extra(#fn_attr1) loc(#loc121)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc122)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc36)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc37)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc38)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc39)
  cir.func @main(%arg0: !s32i loc(fused[#loc42, #loc43]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc44, #loc45])) -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc124)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc125)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc41)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc46)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc46)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc47)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc48)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc48)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr1) loc(#loc49)
    %6 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc36)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc36)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc50)
    %8 = cir.get_global @CWE398_Poor_Code_Quality__empty_while_15_good : !cir.ptr<!cir.func<!void ()>> loc(#loc126)
    cir.call @CWE398_Poor_Code_Quality__empty_while_15_good() : () -> () loc(#loc51)
    %9 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc37)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc37)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc53)
    %11 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc38)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc38)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc54)
    %13 = cir.get_global @CWE398_Poor_Code_Quality__empty_while_15_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc127)
    cir.call @CWE398_Poor_Code_Quality__empty_while_15_bad() : () -> () loc(#loc55)
    %14 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc39)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc39)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc57)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc58)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc128)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc128)
    cir.return %17 : !s32i loc(#loc128)
  } loc(#loc123)
  cir.global "private" constant cir_private dsolocal @".str.6" = #cir.const_array<"Inside the while statement\00" : !cir.array<!s8i x 27>> : !cir.array<!s8i x 27> {alignment = 1 : i64} loc(#loc60)
  cir.global "private" constant cir_private dsolocal @".str.7" = #cir.const_array<"Hello from good()\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc61)
  cir.func no_proto internal private @good1() extra(#fn_attr) {
    cir.scope {
      %0 = cir.const #cir.int<5> : !s32i loc(#loc66)
      cir.switch (%0 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %1 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc68)
          %2 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc68)
          cir.call @printLine(%2) : (!cir.ptr<!s8i>) -> () loc(#loc69)
          cir.break loc(#loc70)
        } loc(#loc67)
        cir.case(default, []) {
          cir.scope {
            %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i", init] {alignment = 4 : i64} loc(#loc132)
            %4 = cir.const #cir.int<0> : !s32i loc(#loc75)
            cir.store %4, %3 : !s32i, !cir.ptr<!s32i> loc(#loc132)
            cir.scope {
              cir.while {
                %5 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc78)
                %6 = cir.unary(inc, %5) : !s32i, !s32i loc(#loc79)
                cir.store %6, %3 : !s32i, !cir.ptr<!s32i> loc(#loc134)
                %7 = cir.const #cir.int<10> : !s32i loc(#loc80)
                %8 = cir.cmp(lt, %5, %7) : !s32i, !cir.bool loc(#loc135)
                cir.condition(%8) loc(#loc81)
              } do {
                %5 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 27>> loc(#loc60)
                %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 27>>), !cir.ptr<!s8i> loc(#loc60)
                cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc82)
                cir.yield loc(#loc77)
              } loc(#loc133)
            } loc(#loc133)
          } loc(#loc131)
          %1 = cir.get_global @".str.7" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc61)
          %2 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc61)
          cir.call @printLine(%2) : (!cir.ptr<!s8i>) -> () loc(#loc83)
          cir.break loc(#loc84)
        } loc(#loc71)
        cir.yield loc(#loc64)
      } loc(#loc64)
    } loc(#loc130)
    cir.return loc(#loc63)
  } loc(#loc129)
  cir.func no_proto internal private @good2() extra(#fn_attr) {
    cir.scope {
      %0 = cir.const #cir.int<6> : !s32i loc(#loc89)
      cir.switch (%0 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          cir.scope {
            %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i", init] {alignment = 4 : i64} loc(#loc139)
            %4 = cir.const #cir.int<0> : !s32i loc(#loc94)
            cir.store %4, %3 : !s32i, !cir.ptr<!s32i> loc(#loc139)
            cir.scope {
              cir.while {
                %5 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc97)
                %6 = cir.unary(inc, %5) : !s32i, !s32i loc(#loc98)
                cir.store %6, %3 : !s32i, !cir.ptr<!s32i> loc(#loc141)
                %7 = cir.const #cir.int<10> : !s32i loc(#loc99)
                %8 = cir.cmp(lt, %5, %7) : !s32i, !cir.bool loc(#loc142)
                cir.condition(%8) loc(#loc100)
              } do {
                %5 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 27>> loc(#loc101)
                %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 27>>), !cir.ptr<!s8i> loc(#loc101)
                cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc102)
                cir.yield loc(#loc96)
              } loc(#loc140)
            } loc(#loc140)
          } loc(#loc138)
          %1 = cir.get_global @".str.7" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc103)
          %2 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc103)
          cir.call @printLine(%2) : (!cir.ptr<!s8i>) -> () loc(#loc104)
          cir.break loc(#loc105)
        } loc(#loc90)
        cir.case(default, []) {
          %1 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc107)
          %2 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc107)
          cir.call @printLine(%2) : (!cir.ptr<!s8i>) -> () loc(#loc108)
          cir.break loc(#loc109)
        } loc(#loc106)
        cir.yield loc(#loc87)
      } loc(#loc87)
    } loc(#loc137)
    cir.return loc(#loc86)
  } loc(#loc136)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE398_Poor_Code_Quality/CWE398_Poor_Code_Quality__empty_while_15.c":0:0)
#loc1 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc2 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc3 = loc("CWE398_Poor_Code_Quality__empty_while_15.c":32:15)
#loc4 = loc("CWE398_Poor_Code_Quality__empty_while_15.c":36:19)
#loc5 = loc("CWE398_Poor_Code_Quality__empty_while_15.c":20:1)
#loc6 = loc("CWE398_Poor_Code_Quality__empty_while_15.c":39:1)
#loc7 = loc("CWE398_Poor_Code_Quality__empty_while_15.c":22:5)
#loc8 = loc("CWE398_Poor_Code_Quality__empty_while_15.c":38:5)
#loc9 = loc("CWE398_Poor_Code_Quality__empty_while_15.c":22:12)
#loc10 = loc("CWE398_Poor_Code_Quality__empty_while_15.c":24:5)
#loc11 = loc("CWE398_Poor_Code_Quality__empty_while_15.c":26:5)
#loc12 = loc("CWE398_Poor_Code_Quality__empty_while_15.c":31:5)
#loc13 = loc("CWE398_Poor_Code_Quality__empty_while_15.c":27:9)
#loc14 = loc("CWE398_Poor_Code_Quality__empty_while_15.c":27:17)
#loc15 = loc("CWE398_Poor_Code_Quality__empty_while_15.c":28:9)
#loc16 = loc("CWE398_Poor_Code_Quality__empty_while_15.c":30:9)
#loc17 = loc("CWE398_Poor_Code_Quality__empty_while_15.c":28:16)
#loc18 = loc("CWE398_Poor_Code_Quality__empty_while_15.c":28:15)
#loc19 = loc("CWE398_Poor_Code_Quality__empty_while_15.c":28:21)
#loc20 = loc("CWE398_Poor_Code_Quality__empty_while_15.c":28:19)
#loc21 = loc("CWE398_Poor_Code_Quality__empty_while_15.c":32:5)
#loc22 = loc("CWE398_Poor_Code_Quality__empty_while_15.c":33:5)
#loc23 = loc("CWE398_Poor_Code_Quality__empty_while_15.c":34:5)
#loc24 = loc("CWE398_Poor_Code_Quality__empty_while_15.c":36:9)
#loc25 = loc("CWE398_Poor_Code_Quality__empty_while_15.c":37:9)
#loc26 = loc("CWE398_Poor_Code_Quality__empty_while_15.c":91:1)
#loc27 = loc("CWE398_Poor_Code_Quality__empty_while_15.c":95:1)
#loc28 = loc("CWE398_Poor_Code_Quality__empty_while_15.c":93:5)
#loc29 = loc("CWE398_Poor_Code_Quality__empty_while_15.c":93:11)
#loc30 = loc("CWE398_Poor_Code_Quality__empty_while_15.c":94:5)
#loc31 = loc("CWE398_Poor_Code_Quality__empty_while_15.c":94:11)
#loc32 = loc("/usr/include/stdlib.h":575:1)
#loc33 = loc("/usr/include/stdlib.h":575:41)
#loc34 = loc("/usr/include/time.h":76:1)
#loc35 = loc("/usr/include/time.h":76:38)
#loc36 = loc("CWE398_Poor_Code_Quality__empty_while_15.c":111:15)
#loc37 = loc("CWE398_Poor_Code_Quality__empty_while_15.c":113:15)
#loc38 = loc("CWE398_Poor_Code_Quality__empty_while_15.c":116:15)
#loc39 = loc("CWE398_Poor_Code_Quality__empty_while_15.c":118:15)
#loc40 = loc("CWE398_Poor_Code_Quality__empty_while_15.c":106:1)
#loc41 = loc("CWE398_Poor_Code_Quality__empty_while_15.c":121:1)
#loc46 = loc("CWE398_Poor_Code_Quality__empty_while_15.c":107:1)
#loc47 = loc("CWE398_Poor_Code_Quality__empty_while_15.c":109:27)
#loc48 = loc("CWE398_Poor_Code_Quality__empty_while_15.c":109:22)
#loc49 = loc("CWE398_Poor_Code_Quality__empty_while_15.c":109:5)
#loc50 = loc("CWE398_Poor_Code_Quality__empty_while_15.c":111:5)
#loc51 = loc("CWE398_Poor_Code_Quality__empty_while_15.c":112:5)
#loc52 = loc("CWE398_Poor_Code_Quality__empty_while_15.c":112:51)
#loc53 = loc("CWE398_Poor_Code_Quality__empty_while_15.c":113:5)
#loc54 = loc("CWE398_Poor_Code_Quality__empty_while_15.c":116:5)
#loc55 = loc("CWE398_Poor_Code_Quality__empty_while_15.c":117:5)
#loc56 = loc("CWE398_Poor_Code_Quality__empty_while_15.c":117:50)
#loc57 = loc("CWE398_Poor_Code_Quality__empty_while_15.c":118:5)
#loc58 = loc("CWE398_Poor_Code_Quality__empty_while_15.c":120:12)
#loc59 = loc("CWE398_Poor_Code_Quality__empty_while_15.c":120:5)
#loc60 = loc("CWE398_Poor_Code_Quality__empty_while_15.c":60:23)
#loc61 = loc("CWE398_Poor_Code_Quality__empty_while_15.c":63:15)
#loc62 = loc("CWE398_Poor_Code_Quality__empty_while_15.c":46:1)
#loc63 = loc("CWE398_Poor_Code_Quality__empty_while_15.c":66:1)
#loc64 = loc("CWE398_Poor_Code_Quality__empty_while_15.c":48:5)
#loc65 = loc("CWE398_Poor_Code_Quality__empty_while_15.c":65:5)
#loc66 = loc("CWE398_Poor_Code_Quality__empty_while_15.c":48:12)
#loc67 = loc("CWE398_Poor_Code_Quality__empty_while_15.c":50:5)
#loc68 = loc("CWE398_Poor_Code_Quality__empty_while_15.c":52:19)
#loc69 = loc("CWE398_Poor_Code_Quality__empty_while_15.c":52:9)
#loc70 = loc("CWE398_Poor_Code_Quality__empty_while_15.c":53:9)
#loc71 = loc("CWE398_Poor_Code_Quality__empty_while_15.c":54:5)
#loc72 = loc("CWE398_Poor_Code_Quality__empty_while_15.c":56:5)
#loc73 = loc("CWE398_Poor_Code_Quality__empty_while_15.c":62:5)
#loc74 = loc("CWE398_Poor_Code_Quality__empty_while_15.c":57:9)
#loc75 = loc("CWE398_Poor_Code_Quality__empty_while_15.c":57:17)
#loc76 = loc("CWE398_Poor_Code_Quality__empty_while_15.c":58:9)
#loc77 = loc("CWE398_Poor_Code_Quality__empty_while_15.c":61:9)
#loc78 = loc("CWE398_Poor_Code_Quality__empty_while_15.c":58:16)
#loc79 = loc("CWE398_Poor_Code_Quality__empty_while_15.c":58:15)
#loc80 = loc("CWE398_Poor_Code_Quality__empty_while_15.c":58:21)
#loc81 = loc("CWE398_Poor_Code_Quality__empty_while_15.c":58:19)
#loc82 = loc("CWE398_Poor_Code_Quality__empty_while_15.c":60:13)
#loc83 = loc("CWE398_Poor_Code_Quality__empty_while_15.c":63:5)
#loc84 = loc("CWE398_Poor_Code_Quality__empty_while_15.c":64:5)
#loc85 = loc("CWE398_Poor_Code_Quality__empty_while_15.c":69:1)
#loc86 = loc("CWE398_Poor_Code_Quality__empty_while_15.c":89:1)
#loc87 = loc("CWE398_Poor_Code_Quality__empty_while_15.c":71:5)
#loc88 = loc("CWE398_Poor_Code_Quality__empty_while_15.c":88:5)
#loc89 = loc("CWE398_Poor_Code_Quality__empty_while_15.c":71:12)
#loc90 = loc("CWE398_Poor_Code_Quality__empty_while_15.c":73:5)
#loc91 = loc("CWE398_Poor_Code_Quality__empty_while_15.c":75:5)
#loc92 = loc("CWE398_Poor_Code_Quality__empty_while_15.c":81:5)
#loc93 = loc("CWE398_Poor_Code_Quality__empty_while_15.c":76:9)
#loc94 = loc("CWE398_Poor_Code_Quality__empty_while_15.c":76:17)
#loc95 = loc("CWE398_Poor_Code_Quality__empty_while_15.c":77:9)
#loc96 = loc("CWE398_Poor_Code_Quality__empty_while_15.c":80:9)
#loc97 = loc("CWE398_Poor_Code_Quality__empty_while_15.c":77:16)
#loc98 = loc("CWE398_Poor_Code_Quality__empty_while_15.c":77:15)
#loc99 = loc("CWE398_Poor_Code_Quality__empty_while_15.c":77:21)
#loc100 = loc("CWE398_Poor_Code_Quality__empty_while_15.c":77:19)
#loc101 = loc("CWE398_Poor_Code_Quality__empty_while_15.c":79:23)
#loc102 = loc("CWE398_Poor_Code_Quality__empty_while_15.c":79:13)
#loc103 = loc("CWE398_Poor_Code_Quality__empty_while_15.c":82:15)
#loc104 = loc("CWE398_Poor_Code_Quality__empty_while_15.c":82:5)
#loc105 = loc("CWE398_Poor_Code_Quality__empty_while_15.c":83:5)
#loc106 = loc("CWE398_Poor_Code_Quality__empty_while_15.c":84:5)
#loc107 = loc("CWE398_Poor_Code_Quality__empty_while_15.c":86:19)
#loc108 = loc("CWE398_Poor_Code_Quality__empty_while_15.c":86:9)
#loc109 = loc("CWE398_Poor_Code_Quality__empty_while_15.c":87:9)
#loc110 = loc(fused[#loc1, #loc2])
#loc111 = loc(fused[#loc5, #loc6])
#loc112 = loc(fused[#loc7, #loc8])
#loc113 = loc(fused[#loc11, #loc12])
#loc114 = loc(fused[#loc13, #loc14])
#loc115 = loc(fused[#loc15, #loc16])
#loc116 = loc(fused[#loc18, #loc17])
#loc117 = loc(fused[#loc18, #loc19])
#loc118 = loc(fused[#loc26, #loc27])
#loc119 = loc(fused[#loc28, #loc29])
#loc120 = loc(fused[#loc30, #loc31])
#loc121 = loc(fused[#loc32, #loc33])
#loc122 = loc(fused[#loc34, #loc35])
#loc123 = loc(fused[#loc40, #loc41])
#loc126 = loc(fused[#loc51, #loc52])
#loc127 = loc(fused[#loc55, #loc56])
#loc128 = loc(fused[#loc59, #loc58])
#loc129 = loc(fused[#loc62, #loc63])
#loc130 = loc(fused[#loc64, #loc65])
#loc131 = loc(fused[#loc72, #loc73])
#loc132 = loc(fused[#loc74, #loc75])
#loc133 = loc(fused[#loc76, #loc77])
#loc134 = loc(fused[#loc79, #loc78])
#loc135 = loc(fused[#loc79, #loc80])
#loc136 = loc(fused[#loc85, #loc86])
#loc137 = loc(fused[#loc87, #loc88])
#loc138 = loc(fused[#loc91, #loc92])
#loc139 = loc(fused[#loc93, #loc94])
#loc140 = loc(fused[#loc95, #loc96])
#loc141 = loc(fused[#loc98, #loc97])
#loc142 = loc(fused[#loc98, #loc99])
