!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc38 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_08.c":111:10)
#loc39 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_08.c":111:14)
#loc40 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_08.c":111:20)
#loc41 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_08.c":111:32)
#loc167 = loc(fused[#loc38, #loc39])
#loc168 = loc(fused[#loc40, #loc41])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE758_Undefined_Behavior/CWE758_Undefined_Behavior__double_pointer_alloca_use_08.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @printDoubleLine(!cir.double) loc(#loc152)
  cir.func no_proto @CWE758_Undefined_Behavior__double_pointer_alloca_use_08_bad() extra(#fn_attr) {
    cir.scope {
      %0 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc155)
      %1 = cir.call %0() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc7)
      %2 = cir.cast(int_to_bool, %1 : !s32i), !cir.bool loc(#loc7)
      cir.if %2 {
        cir.scope {
          %3 = cir.alloca !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.ptr<!cir.ptr<!cir.double>>>, ["pointer", init] {alignment = 8 : i64} loc(#loc158)
          %4 = cir.const #cir.int<8> : !u64i loc(#loc13)
          %5 = cir.alloca !u8i, !cir.ptr<!u8i>, %4 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc13)
          %6 = cir.alloca !cir.ptr<!cir.double>, !cir.ptr<!cir.ptr<!cir.double>>, ["data", init] {alignment = 8 : i64} loc(#loc159)
          %7 = cir.cast(bitcast, %5 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc13)
          %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!cir.ptr<!cir.double>> loc(#loc13)
          cir.store %8, %3 : !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.ptr<!cir.ptr<!cir.double>>> loc(#loc158)
          %9 = cir.load deref %3 : !cir.ptr<!cir.ptr<!cir.ptr<!cir.double>>>, !cir.ptr<!cir.ptr<!cir.double>> loc(#loc15)
          %10 = cir.load %9 : !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.double> loc(#loc16)
          cir.store %10, %6 : !cir.ptr<!cir.double>, !cir.ptr<!cir.ptr<!cir.double>> loc(#loc159)
          %11 = cir.load deref %6 : !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.double> loc(#loc17)
          %12 = cir.load %11 : !cir.ptr<!cir.double>, !cir.double loc(#loc18)
          cir.call @printDoubleLine(%12) : (!cir.double) -> () loc(#loc19)
        } loc(#loc157)
      } loc(#loc156)
    } loc(#loc154)
    cir.return loc(#loc4)
  } loc(#loc153)
  cir.func no_proto @CWE758_Undefined_Behavior__double_pointer_alloca_use_08_good() extra(#fn_attr) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<!void ()>> loc(#loc161)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc22)
    %1 = cir.get_global @good2 : !cir.ptr<!cir.func<!void ()>> loc(#loc162)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc24)
    cir.return loc(#loc21)
  } loc(#loc160)
  cir.func private @srand(!u32i) extra(#fn_attr1) loc(#loc163)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc164)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc165)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc32)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc33)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc34)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc35)
  cir.func @main(%arg0: !s32i loc(fused[#loc38, #loc39]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc40, #loc41])) -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc167)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc168)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc37)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc42)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc42)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc43)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc44)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc44)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr1) loc(#loc45)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc32)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc32)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc46)
    %8 = cir.get_global @CWE758_Undefined_Behavior__double_pointer_alloca_use_08_good : !cir.ptr<!cir.func<!void ()>> loc(#loc169)
    cir.call @CWE758_Undefined_Behavior__double_pointer_alloca_use_08_good() : () -> () loc(#loc47)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc33)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc33)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc49)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc34)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc34)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc50)
    %13 = cir.get_global @CWE758_Undefined_Behavior__double_pointer_alloca_use_08_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc170)
    cir.call @CWE758_Undefined_Behavior__double_pointer_alloca_use_08_bad() : () -> () loc(#loc51)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc35)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc35)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc53)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc54)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc171)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc171)
    cir.return %17 : !s32i loc(#loc171)
  } loc(#loc166)
  cir.func no_proto internal private @staticReturnsTrue() -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc57)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc58)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc173)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc173)
    cir.return %2 : !s32i loc(#loc173)
  } loc(#loc172)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc60)
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr1) loc(#loc174)
  cir.func private @exit(!s32i) extra(#fn_attr1) loc(#loc175)
  cir.func no_proto internal private @good1() extra(#fn_attr) {
    cir.scope {
      %0 = cir.get_global @staticReturnsFalse : !cir.ptr<!cir.func<!s32i ()>> loc(#loc178)
      %1 = cir.call %0() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc69)
      %2 = cir.cast(int_to_bool, %1 : !s32i), !cir.bool loc(#loc69)
      cir.if %2 {
        %3 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc60)
        %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc60)
        cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc74)
      } else {
        cir.scope {
          %3 = cir.alloca !cir.ptr<!cir.double>, !cir.ptr<!cir.ptr<!cir.double>>, ["data"] {alignment = 8 : i64} loc(#loc181)
          %4 = cir.alloca !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.ptr<!cir.ptr<!cir.double>>>, ["pointer", init] {alignment = 8 : i64} loc(#loc182)
          %5 = cir.const #cir.int<8> : !u64i loc(#loc80)
          %6 = cir.alloca !u8i, !cir.ptr<!u8i>, %5 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc80)
          %7 = cir.cast(bitcast, %6 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc80)
          %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!cir.ptr<!cir.double>> loc(#loc80)
          cir.store %8, %4 : !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.ptr<!cir.ptr<!cir.double>>> loc(#loc182)
          %9 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc81)
          %10 = cir.const #cir.int<8> : !u64i loc(#loc183)
          %11 = cir.call @malloc(%10) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr1) loc(#loc81)
          %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!cir.double> loc(#loc184)
          cir.store %12, %3 : !cir.ptr<!cir.double>, !cir.ptr<!cir.ptr<!cir.double>> loc(#loc185)
          cir.scope {
            %17 = cir.load %3 : !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.double> loc(#loc88)
            %18 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc89)
            %19 = cir.cast(bitcast, %18 : !cir.ptr<!void>), !cir.ptr<!cir.double> loc(#loc89)
            %20 = cir.cmp(eq, %17, %19) : !cir.ptr<!cir.double>, !cir.bool loc(#loc187)
            cir.if %20 {
              %21 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc91)
              %22 = cir.const #cir.int<1> : !s32i loc(#loc92)
              %23 = cir.unary(minus, %22) : !s32i, !s32i loc(#loc93)
              cir.call @exit(%23) : (!s32i) -> () extra(#fn_attr1) loc(#loc91)
            } loc(#loc188)
          } loc(#loc186)
          %13 = cir.const #cir.fp<5.000000e+00> : !cir.double loc(#loc94)
          %14 = cir.load deref %3 : !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.double> loc(#loc95)
          cir.store %13, %14 : !cir.double, !cir.ptr<!cir.double> loc(#loc189)
          %15 = cir.load %3 : !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.double> loc(#loc97)
          %16 = cir.load deref %4 : !cir.ptr<!cir.ptr<!cir.ptr<!cir.double>>>, !cir.ptr<!cir.ptr<!cir.double>> loc(#loc98)
          cir.store %15, %16 : !cir.ptr<!cir.double>, !cir.ptr<!cir.ptr<!cir.double>> loc(#loc190)
          cir.scope {
            %17 = cir.alloca !cir.ptr<!cir.double>, !cir.ptr<!cir.ptr<!cir.double>>, ["data", init] {alignment = 8 : i64} loc(#loc192)
            %18 = cir.load deref %4 : !cir.ptr<!cir.ptr<!cir.ptr<!cir.double>>>, !cir.ptr<!cir.ptr<!cir.double>> loc(#loc103)
            %19 = cir.load %18 : !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.double> loc(#loc104)
            cir.store %19, %17 : !cir.ptr<!cir.double>, !cir.ptr<!cir.ptr<!cir.double>> loc(#loc192)
            %20 = cir.load deref %17 : !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.double> loc(#loc105)
            %21 = cir.load %20 : !cir.ptr<!cir.double>, !cir.double loc(#loc106)
            cir.call @printDoubleLine(%21) : (!cir.double) -> () loc(#loc107)
          } loc(#loc191)
        } loc(#loc180)
      } loc(#loc179)
    } loc(#loc177)
    cir.return loc(#loc66)
  } loc(#loc176)
  cir.func no_proto internal private @staticReturnsFalse() -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc109)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc110)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc194)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc194)
    cir.return %2 : !s32i loc(#loc194)
  } loc(#loc193)
  cir.func no_proto internal private @good2() extra(#fn_attr) {
    cir.scope {
      %0 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc197)
      %1 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc116)
      %2 = cir.cast(int_to_bool, %1 : !s32i), !cir.bool loc(#loc116)
      cir.if %2 {
        cir.scope {
          %3 = cir.alloca !cir.ptr<!cir.double>, !cir.ptr<!cir.ptr<!cir.double>>, ["data"] {alignment = 8 : i64} loc(#loc200)
          %4 = cir.alloca !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.ptr<!cir.ptr<!cir.double>>>, ["pointer", init] {alignment = 8 : i64} loc(#loc201)
          %5 = cir.const #cir.int<8> : !u64i loc(#loc124)
          %6 = cir.alloca !u8i, !cir.ptr<!u8i>, %5 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc124)
          %7 = cir.cast(bitcast, %6 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc124)
          %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!cir.ptr<!cir.double>> loc(#loc124)
          cir.store %8, %4 : !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.ptr<!cir.ptr<!cir.double>>> loc(#loc201)
          %9 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc125)
          %10 = cir.const #cir.int<8> : !u64i loc(#loc202)
          %11 = cir.call @malloc(%10) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr1) loc(#loc125)
          %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!cir.double> loc(#loc203)
          cir.store %12, %3 : !cir.ptr<!cir.double>, !cir.ptr<!cir.ptr<!cir.double>> loc(#loc204)
          cir.scope {
            %17 = cir.load %3 : !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.double> loc(#loc132)
            %18 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc133)
            %19 = cir.cast(bitcast, %18 : !cir.ptr<!void>), !cir.ptr<!cir.double> loc(#loc133)
            %20 = cir.cmp(eq, %17, %19) : !cir.ptr<!cir.double>, !cir.bool loc(#loc206)
            cir.if %20 {
              %21 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc135)
              %22 = cir.const #cir.int<1> : !s32i loc(#loc136)
              %23 = cir.unary(minus, %22) : !s32i, !s32i loc(#loc137)
              cir.call @exit(%23) : (!s32i) -> () extra(#fn_attr1) loc(#loc135)
            } loc(#loc207)
          } loc(#loc205)
          %13 = cir.const #cir.fp<5.000000e+00> : !cir.double loc(#loc138)
          %14 = cir.load deref %3 : !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.double> loc(#loc139)
          cir.store %13, %14 : !cir.double, !cir.ptr<!cir.double> loc(#loc208)
          %15 = cir.load %3 : !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.double> loc(#loc141)
          %16 = cir.load deref %4 : !cir.ptr<!cir.ptr<!cir.ptr<!cir.double>>>, !cir.ptr<!cir.ptr<!cir.double>> loc(#loc142)
          cir.store %15, %16 : !cir.ptr<!cir.double>, !cir.ptr<!cir.ptr<!cir.double>> loc(#loc209)
          cir.scope {
            %17 = cir.alloca !cir.ptr<!cir.double>, !cir.ptr<!cir.ptr<!cir.double>>, ["data", init] {alignment = 8 : i64} loc(#loc211)
            %18 = cir.load deref %4 : !cir.ptr<!cir.ptr<!cir.ptr<!cir.double>>>, !cir.ptr<!cir.ptr<!cir.double>> loc(#loc147)
            %19 = cir.load %18 : !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.double> loc(#loc148)
            cir.store %19, %17 : !cir.ptr<!cir.double>, !cir.ptr<!cir.ptr<!cir.double>> loc(#loc211)
            %20 = cir.load deref %17 : !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.double> loc(#loc149)
            %21 = cir.load %20 : !cir.ptr<!cir.double>, !cir.double loc(#loc150)
            cir.call @printDoubleLine(%21) : (!cir.double) -> () loc(#loc151)
          } loc(#loc210)
        } loc(#loc199)
      } loc(#loc198)
    } loc(#loc196)
    cir.return loc(#loc113)
  } loc(#loc195)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE758_Undefined_Behavior/CWE758_Undefined_Behavior__double_pointer_alloca_use_08.c":0:0)
#loc1 = loc("../../testcasesupport/std_testcase_io.h":38:1)
#loc2 = loc("../../testcasesupport/std_testcase_io.h":38:41)
#loc3 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_08.c":33:1)
#loc4 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_08.c":43:1)
#loc5 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_08.c":35:5)
#loc6 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_08.c":42:5)
#loc7 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_08.c":35:8)
#loc8 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_08.c":35:26)
#loc9 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_08.c":36:5)
#loc10 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_08.c":37:9)
#loc11 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_08.c":41:9)
#loc12 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_08.c":38:13)
#loc13 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_08.c":38:46)
#loc14 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_08.c":39:13)
#loc15 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_08.c":39:30)
#loc16 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_08.c":39:29)
#loc17 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_08.c":40:30)
#loc18 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_08.c":40:29)
#loc19 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_08.c":40:13)
#loc20 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_08.c":96:1)
#loc21 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_08.c":100:1)
#loc22 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_08.c":98:5)
#loc23 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_08.c":98:11)
#loc24 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_08.c":99:5)
#loc25 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_08.c":99:11)
#loc26 = loc("/usr/include/stdlib.h":575:1)
#loc27 = loc("/usr/include/stdlib.h":575:41)
#loc28 = loc("/usr/include/time.h":76:1)
#loc29 = loc("/usr/include/time.h":76:38)
#loc30 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc31 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc32 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_08.c":116:15)
#loc33 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_08.c":118:15)
#loc34 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_08.c":121:15)
#loc35 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_08.c":123:15)
#loc36 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_08.c":111:1)
#loc37 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_08.c":126:1)
#loc42 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_08.c":112:1)
#loc43 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_08.c":114:27)
#loc44 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_08.c":114:22)
#loc45 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_08.c":114:5)
#loc46 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_08.c":116:5)
#loc47 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_08.c":117:5)
#loc48 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_08.c":117:66)
#loc49 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_08.c":118:5)
#loc50 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_08.c":121:5)
#loc51 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_08.c":122:5)
#loc52 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_08.c":122:65)
#loc53 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_08.c":123:5)
#loc54 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_08.c":125:12)
#loc55 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_08.c":125:5)
#loc56 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_08.c":21:1)
#loc57 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_08.c":24:1)
#loc58 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_08.c":23:12)
#loc59 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_08.c":23:5)
#loc60 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_08.c":55:19)
#loc61 = loc("/usr/include/stdlib.h":672:1)
#loc62 = loc("/usr/include/stdlib.h":672:45)
#loc63 = loc("/usr/include/stdlib.h":756:1)
#loc64 = loc("/usr/include/stdlib.h":756:70)
#loc65 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_08.c":50:1)
#loc66 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_08.c":73:1)
#loc67 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_08.c":52:5)
#loc68 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_08.c":72:5)
#loc69 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_08.c":52:8)
#loc70 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_08.c":52:27)
#loc71 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_08.c":53:5)
#loc72 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_08.c":56:5)
#loc73 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_08.c":58:5)
#loc74 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_08.c":55:9)
#loc75 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_08.c":59:9)
#loc76 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_08.c":71:9)
#loc77 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_08.c":60:13)
#loc78 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_08.c":60:22)
#loc79 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_08.c":61:13)
#loc80 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_08.c":61:46)
#loc81 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_08.c":63:30)
#loc82 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_08.c":63:37)
#loc83 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_08.c":63:50)
#loc84 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_08.c":63:51)
#loc85 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_08.c":63:13)
#loc86 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_08.c":64:13)
#loc87 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_08.c":64:41)
#loc88 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_08.c":64:17)
#loc89 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_08.c":64:25)
#loc90 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_08.c":64:31)
#loc91 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_08.c":64:32)
#loc92 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_08.c":64:38)
#loc93 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_08.c":64:37)
#loc94 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_08.c":65:21)
#loc95 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_08.c":65:14)
#loc96 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_08.c":65:13)
#loc97 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_08.c":66:24)
#loc98 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_08.c":66:14)
#loc99 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_08.c":66:13)
#loc100 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_08.c":67:13)
#loc101 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_08.c":70:13)
#loc102 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_08.c":68:17)
#loc103 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_08.c":68:34)
#loc104 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_08.c":68:33)
#loc105 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_08.c":69:34)
#loc106 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_08.c":69:33)
#loc107 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_08.c":69:17)
#loc108 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_08.c":26:1)
#loc109 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_08.c":29:1)
#loc110 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_08.c":28:12)
#loc111 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_08.c":28:5)
#loc112 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_08.c":76:1)
#loc113 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_08.c":94:1)
#loc114 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_08.c":78:5)
#loc115 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_08.c":93:5)
#loc116 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_08.c":78:8)
#loc117 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_08.c":78:26)
#loc118 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_08.c":79:5)
#loc119 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_08.c":80:9)
#loc120 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_08.c":92:9)
#loc121 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_08.c":81:13)
#loc122 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_08.c":81:22)
#loc123 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_08.c":82:13)
#loc124 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_08.c":82:46)
#loc125 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_08.c":84:30)
#loc126 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_08.c":84:37)
#loc127 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_08.c":84:50)
#loc128 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_08.c":84:51)
#loc129 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_08.c":84:13)
#loc130 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_08.c":85:13)
#loc131 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_08.c":85:41)
#loc132 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_08.c":85:17)
#loc133 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_08.c":85:25)
#loc134 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_08.c":85:31)
#loc135 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_08.c":85:32)
#loc136 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_08.c":85:38)
#loc137 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_08.c":85:37)
#loc138 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_08.c":86:21)
#loc139 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_08.c":86:14)
#loc140 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_08.c":86:13)
#loc141 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_08.c":87:24)
#loc142 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_08.c":87:14)
#loc143 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_08.c":87:13)
#loc144 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_08.c":88:13)
#loc145 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_08.c":91:13)
#loc146 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_08.c":89:17)
#loc147 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_08.c":89:34)
#loc148 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_08.c":89:33)
#loc149 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_08.c":90:34)
#loc150 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_08.c":90:33)
#loc151 = loc("CWE758_Undefined_Behavior__double_pointer_alloca_use_08.c":90:17)
#loc152 = loc(fused[#loc1, #loc2])
#loc153 = loc(fused[#loc3, #loc4])
#loc154 = loc(fused[#loc5, #loc6])
#loc155 = loc(fused[#loc7, #loc8])
#loc156 = loc(fused[#loc9, #loc6])
#loc157 = loc(fused[#loc10, #loc11])
#loc158 = loc(fused[#loc12, #loc13])
#loc159 = loc(fused[#loc14, #loc15])
#loc160 = loc(fused[#loc20, #loc21])
#loc161 = loc(fused[#loc22, #loc23])
#loc162 = loc(fused[#loc24, #loc25])
#loc163 = loc(fused[#loc26, #loc27])
#loc164 = loc(fused[#loc28, #loc29])
#loc165 = loc(fused[#loc30, #loc31])
#loc166 = loc(fused[#loc36, #loc37])
#loc169 = loc(fused[#loc47, #loc48])
#loc170 = loc(fused[#loc51, #loc52])
#loc171 = loc(fused[#loc55, #loc54])
#loc172 = loc(fused[#loc56, #loc57])
#loc173 = loc(fused[#loc59, #loc58])
#loc174 = loc(fused[#loc61, #loc62])
#loc175 = loc(fused[#loc63, #loc64])
#loc176 = loc(fused[#loc65, #loc66])
#loc177 = loc(fused[#loc67, #loc68])
#loc178 = loc(fused[#loc69, #loc70])
#loc179 = loc(fused[#loc71, #loc72, #loc73, #loc68])
#loc180 = loc(fused[#loc75, #loc76])
#loc181 = loc(fused[#loc77, #loc78])
#loc182 = loc(fused[#loc79, #loc80])
#loc183 = loc(fused[#loc82, #loc83])
#loc184 = loc(fused[#loc81, #loc84])
#loc185 = loc(fused[#loc85, #loc84])
#loc186 = loc(fused[#loc86, #loc87])
#loc187 = loc(fused[#loc88, #loc89])
#loc188 = loc(fused[#loc90, #loc87])
#loc189 = loc(fused[#loc96, #loc94])
#loc190 = loc(fused[#loc99, #loc97])
#loc191 = loc(fused[#loc100, #loc101])
#loc192 = loc(fused[#loc102, #loc103])
#loc193 = loc(fused[#loc108, #loc109])
#loc194 = loc(fused[#loc111, #loc110])
#loc195 = loc(fused[#loc112, #loc113])
#loc196 = loc(fused[#loc114, #loc115])
#loc197 = loc(fused[#loc116, #loc117])
#loc198 = loc(fused[#loc118, #loc115])
#loc199 = loc(fused[#loc119, #loc120])
#loc200 = loc(fused[#loc121, #loc122])
#loc201 = loc(fused[#loc123, #loc124])
#loc202 = loc(fused[#loc126, #loc127])
#loc203 = loc(fused[#loc125, #loc128])
#loc204 = loc(fused[#loc129, #loc128])
#loc205 = loc(fused[#loc130, #loc131])
#loc206 = loc(fused[#loc132, #loc133])
#loc207 = loc(fused[#loc134, #loc131])
#loc208 = loc(fused[#loc140, #loc138])
#loc209 = loc(fused[#loc143, #loc141])
#loc210 = loc(fused[#loc144, #loc145])
#loc211 = loc(fused[#loc146, #loc147])
