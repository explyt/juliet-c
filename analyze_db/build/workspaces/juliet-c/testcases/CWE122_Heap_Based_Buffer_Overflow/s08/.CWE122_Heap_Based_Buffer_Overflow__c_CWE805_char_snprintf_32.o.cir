!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_32.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e">} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc143)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc144)
  cir.func private @snprintf(!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, ...) -> !s32i extra(#fn_attr) loc(#loc145)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"%s\00" : !cir.array<!s8i x 3>> : !cir.array<!s8i x 3> {alignment = 1 : i64} loc(#loc7)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc146)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc147)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_32_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc149)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["dataPtr1", init] {alignment = 8 : i64} loc(#loc150)
    %2 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["dataPtr2", init] {alignment = 8 : i64} loc(#loc151)
    cir.store %0, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc150)
    cir.store %0, %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc151)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc20)
    cir.store %3, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc152)
    cir.scope {
      %4 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc154)
      %5 = cir.load deref %1 : !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc25)
      %6 = cir.load %5 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc26)
      cir.store %6, %4 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc154)
      %7 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc27)
      %8 = cir.const #cir.int<50> : !s32i loc(#loc28)
      %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc28)
      %10 = cir.const #cir.int<1> : !u64i loc(#loc155)
      %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc156)
      %12 = cir.call @malloc(%11) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc27)
      %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc157)
      cir.store %13, %4 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc158)
      cir.scope {
        %21 = cir.load %4 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc35)
        %22 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc36)
        %23 = cir.cast(bitcast, %22 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc36)
        %24 = cir.cmp(eq, %21, %23) : !cir.ptr<!s8i>, !cir.bool loc(#loc160)
        cir.if %24 {
          %25 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc38)
          %26 = cir.const #cir.int<1> : !s32i loc(#loc39)
          %27 = cir.unary(minus, %26) nsw : !s32i, !s32i loc(#loc40)
          cir.call @exit(%27) : (!s32i) -> () extra(#fn_attr) loc(#loc38)
        } loc(#loc161)
      } loc(#loc159)
      %14 = cir.const #cir.int<0> : !s32i loc(#loc41)
      %15 = cir.cast(integral, %14 : !s32i), !s8i loc(#loc41)
      %16 = cir.load %4 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc42)
      %17 = cir.const #cir.int<0> : !s32i loc(#loc43)
      %18 = cir.ptr_stride(%16 : !cir.ptr<!s8i>, %17 : !s32i), !cir.ptr<!s8i> loc(#loc44)
      cir.store %15, %18 : !s8i, !cir.ptr<!s8i> loc(#loc162)
      %19 = cir.load %4 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc45)
      %20 = cir.load deref %1 : !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc46)
      cir.store %19, %20 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc163)
    } loc(#loc153)
    cir.scope {
      %4 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc165)
      %5 = cir.load deref %2 : !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc51)
      %6 = cir.load %5 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc52)
      cir.store %6, %4 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc165)
      cir.scope {
        %7 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc167)
        %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc57)
        %9 = cir.cast(bitcast, %8 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc57)
        %10 = cir.const #cir.int<67> : !s32i loc(#loc58)
        %11 = cir.const #cir.int<100> : !s32i loc(#loc59)
        %12 = cir.const #cir.int<1> : !s32i loc(#loc60)
        %13 = cir.binop(sub, %11, %12) nsw : !s32i loc(#loc59)
        %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc59)
        cir.libc.memset %14 bytes from %9 set to %10 : !cir.ptr<!void>, !s32i, !u64i loc(#loc168)
        %15 = cir.const #cir.int<0> : !s32i loc(#loc63)
        %16 = cir.cast(integral, %15 : !s32i), !s8i loc(#loc63)
        %17 = cir.const #cir.int<100> : !s32i loc(#loc64)
        %18 = cir.const #cir.int<1> : !s32i loc(#loc65)
        %19 = cir.binop(sub, %17, %18) nsw : !s32i loc(#loc64)
        %20 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc66)
        %21 = cir.ptr_stride(%20 : !cir.ptr<!s8i>, %19 : !s32i), !cir.ptr<!s8i> loc(#loc66)
        cir.store %16, %21 : !s8i, !cir.ptr<!s8i> loc(#loc169)
        %22 = cir.get_global @snprintf : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc67)
        %23 = cir.load %4 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc68)
        %24 = cir.const #cir.int<100> : !s32i loc(#loc69)
        %25 = cir.cast(integral, %24 : !s32i), !u64i loc(#loc69)
        %26 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc7)
        %27 = cir.cast(array_to_ptrdecay, %26 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc7)
        %28 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc70)
        %29 = cir.call @snprintf(%23, %25, %27, %28) : (!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc67)
        %30 = cir.load %4 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc71)
        cir.call @printLine(%30) : (!cir.ptr<!s8i>) -> () loc(#loc72)
        %31 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc73)
        %32 = cir.load %4 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc74)
        %33 = cir.cast(bitcast, %32 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc74)
        cir.call @free(%33) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc73)
      } loc(#loc166)
    } loc(#loc164)
    cir.return loc(#loc13)
  } loc(#loc148)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_32_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc171)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc77)
    cir.return loc(#loc76)
  } loc(#loc170)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc173)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["dataPtr1", init] {alignment = 8 : i64} loc(#loc174)
    %2 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["dataPtr2", init] {alignment = 8 : i64} loc(#loc175)
    cir.store %0, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc174)
    cir.store %0, %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc175)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc87)
    cir.store %3, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc176)
    cir.scope {
      %4 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc178)
      %5 = cir.load deref %1 : !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc92)
      %6 = cir.load %5 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc93)
      cir.store %6, %4 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc178)
      %7 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc94)
      %8 = cir.const #cir.int<100> : !s32i loc(#loc95)
      %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc95)
      %10 = cir.const #cir.int<1> : !u64i loc(#loc179)
      %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc180)
      %12 = cir.call @malloc(%11) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc94)
      %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc181)
      cir.store %13, %4 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc182)
      cir.scope {
        %21 = cir.load %4 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc102)
        %22 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc103)
        %23 = cir.cast(bitcast, %22 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc103)
        %24 = cir.cmp(eq, %21, %23) : !cir.ptr<!s8i>, !cir.bool loc(#loc184)
        cir.if %24 {
          %25 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc105)
          %26 = cir.const #cir.int<1> : !s32i loc(#loc106)
          %27 = cir.unary(minus, %26) nsw : !s32i, !s32i loc(#loc107)
          cir.call @exit(%27) : (!s32i) -> () extra(#fn_attr) loc(#loc105)
        } loc(#loc185)
      } loc(#loc183)
      %14 = cir.const #cir.int<0> : !s32i loc(#loc108)
      %15 = cir.cast(integral, %14 : !s32i), !s8i loc(#loc108)
      %16 = cir.load %4 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc109)
      %17 = cir.const #cir.int<0> : !s32i loc(#loc110)
      %18 = cir.ptr_stride(%16 : !cir.ptr<!s8i>, %17 : !s32i), !cir.ptr<!s8i> loc(#loc111)
      cir.store %15, %18 : !s8i, !cir.ptr<!s8i> loc(#loc186)
      %19 = cir.load %4 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc112)
      %20 = cir.load deref %1 : !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc113)
      cir.store %19, %20 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc187)
    } loc(#loc177)
    cir.scope {
      %4 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc189)
      %5 = cir.load deref %2 : !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc118)
      %6 = cir.load %5 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc119)
      cir.store %6, %4 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc189)
      cir.scope {
        %7 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc191)
        %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc124)
        %9 = cir.cast(bitcast, %8 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc124)
        %10 = cir.const #cir.int<67> : !s32i loc(#loc125)
        %11 = cir.const #cir.int<100> : !s32i loc(#loc126)
        %12 = cir.const #cir.int<1> : !s32i loc(#loc127)
        %13 = cir.binop(sub, %11, %12) nsw : !s32i loc(#loc126)
        %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc126)
        cir.libc.memset %14 bytes from %9 set to %10 : !cir.ptr<!void>, !s32i, !u64i loc(#loc192)
        %15 = cir.const #cir.int<0> : !s32i loc(#loc130)
        %16 = cir.cast(integral, %15 : !s32i), !s8i loc(#loc130)
        %17 = cir.const #cir.int<100> : !s32i loc(#loc131)
        %18 = cir.const #cir.int<1> : !s32i loc(#loc132)
        %19 = cir.binop(sub, %17, %18) nsw : !s32i loc(#loc131)
        %20 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc133)
        %21 = cir.ptr_stride(%20 : !cir.ptr<!s8i>, %19 : !s32i), !cir.ptr<!s8i> loc(#loc133)
        cir.store %16, %21 : !s8i, !cir.ptr<!s8i> loc(#loc193)
        %22 = cir.get_global @snprintf : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc134)
        %23 = cir.load %4 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc135)
        %24 = cir.const #cir.int<100> : !s32i loc(#loc136)
        %25 = cir.cast(integral, %24 : !s32i), !u64i loc(#loc136)
        %26 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc137)
        %27 = cir.cast(array_to_ptrdecay, %26 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc137)
        %28 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc138)
        %29 = cir.call @snprintf(%23, %25, %27, %28) : (!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc134)
        %30 = cir.load %4 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc139)
        cir.call @printLine(%30) : (!cir.ptr<!s8i>) -> () loc(#loc140)
        %31 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc141)
        %32 = cir.load %4 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc142)
        %33 = cir.cast(bitcast, %32 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc142)
        cir.call @free(%33) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc141)
      } loc(#loc190)
    } loc(#loc188)
    cir.return loc(#loc80)
  } loc(#loc172)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_32.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("/usr/include/stdio.h":385:1)
#loc6 = loc("/usr/include/stdio.h":387:62)
#loc7 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_32.c":50:33)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc9 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc10 = loc("/usr/include/stdlib.h":687:1)
#loc11 = loc("/usr/include/stdlib.h":687:32)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_32.c":29:1)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_32.c":55:1)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_32.c":31:5)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_32.c":31:12)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_32.c":32:5)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_32.c":32:25)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_32.c":33:5)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_32.c":33:25)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_32.c":34:12)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_32.c":34:5)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_32.c":35:5)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_32.c":42:5)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_32.c":36:9)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_32.c":36:24)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_32.c":36:23)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_32.c":38:24)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_32.c":38:31)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_32.c":38:34)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_32.c":38:45)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_32.c":38:46)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_32.c":38:9)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_32.c":39:9)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_32.c":39:37)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_32.c":39:13)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_32.c":39:21)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_32.c":39:27)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_32.c":39:28)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_32.c":39:34)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_32.c":39:33)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_32.c":40:19)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_32.c":40:9)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_32.c":40:14)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_32.c":40:15)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_32.c":41:21)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_32.c":41:10)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_32.c":41:9)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_32.c":43:5)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_32.c":54:5)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_32.c":44:9)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_32.c":44:24)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_32.c":44:23)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_32.c":45:9)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_32.c":53:9)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_32.c":46:13)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_32.c":46:28)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_32.c":47:20)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_32.c":47:28)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_32.c":47:33)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_32.c":47:37)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_32.c":47:13)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_32.c":47:38)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_32.c":48:29)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_32.c":48:20)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_32.c":48:24)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_32.c":48:13)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_32.c":50:13)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_32.c":50:22)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_32.c":50:28)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_32.c":50:39)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_32.c":51:23)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_32.c":51:13)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_32.c":52:13)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_32.c":52:18)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_32.c":90:1)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_32.c":93:1)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_32.c":92:5)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_32.c":92:13)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_32.c":62:1)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_32.c":88:1)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_32.c":64:5)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_32.c":64:12)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_32.c":65:5)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_32.c":65:25)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_32.c":66:5)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_32.c":66:25)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_32.c":67:12)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_32.c":67:5)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_32.c":68:5)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_32.c":75:5)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_32.c":69:9)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_32.c":69:24)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_32.c":69:23)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_32.c":71:24)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_32.c":71:31)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_32.c":71:35)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_32.c":71:46)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_32.c":71:47)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_32.c":71:9)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_32.c":72:9)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_32.c":72:37)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_32.c":72:13)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_32.c":72:21)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_32.c":72:27)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_32.c":72:28)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_32.c":72:34)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_32.c":72:33)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_32.c":73:19)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_32.c":73:9)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_32.c":73:14)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_32.c":73:15)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_32.c":74:21)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_32.c":74:10)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_32.c":74:9)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_32.c":76:5)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_32.c":87:5)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_32.c":77:9)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_32.c":77:24)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_32.c":77:23)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_32.c":78:9)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_32.c":86:9)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_32.c":79:13)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_32.c":79:28)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_32.c":80:20)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_32.c":80:28)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_32.c":80:33)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_32.c":80:37)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_32.c":80:13)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_32.c":80:38)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_32.c":81:29)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_32.c":81:20)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_32.c":81:24)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_32.c":81:13)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_32.c":83:13)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_32.c":83:22)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_32.c":83:28)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_32.c":83:33)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_32.c":83:39)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_32.c":84:23)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_32.c":84:13)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_32.c":85:13)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_32.c":85:18)
#loc143 = loc(fused[#loc1, #loc2])
#loc144 = loc(fused[#loc3, #loc4])
#loc145 = loc(fused[#loc5, #loc6])
#loc146 = loc(fused[#loc8, #loc9])
#loc147 = loc(fused[#loc10, #loc11])
#loc148 = loc(fused[#loc12, #loc13])
#loc149 = loc(fused[#loc14, #loc15])
#loc150 = loc(fused[#loc16, #loc17])
#loc151 = loc(fused[#loc18, #loc19])
#loc152 = loc(fused[#loc21, #loc20])
#loc153 = loc(fused[#loc22, #loc23])
#loc154 = loc(fused[#loc24, #loc25])
#loc155 = loc(fused[#loc29, #loc30])
#loc156 = loc(fused[#loc28, #loc30])
#loc157 = loc(fused[#loc27, #loc31])
#loc158 = loc(fused[#loc32, #loc31])
#loc159 = loc(fused[#loc33, #loc34])
#loc160 = loc(fused[#loc35, #loc36])
#loc161 = loc(fused[#loc37, #loc34])
#loc162 = loc(fused[#loc42, #loc41])
#loc163 = loc(fused[#loc47, #loc45])
#loc164 = loc(fused[#loc48, #loc49])
#loc165 = loc(fused[#loc50, #loc51])
#loc166 = loc(fused[#loc53, #loc54])
#loc167 = loc(fused[#loc55, #loc56])
#loc168 = loc(fused[#loc61, #loc62])
#loc169 = loc(fused[#loc66, #loc63])
#loc170 = loc(fused[#loc75, #loc76])
#loc171 = loc(fused[#loc77, #loc78])
#loc172 = loc(fused[#loc79, #loc80])
#loc173 = loc(fused[#loc81, #loc82])
#loc174 = loc(fused[#loc83, #loc84])
#loc175 = loc(fused[#loc85, #loc86])
#loc176 = loc(fused[#loc88, #loc87])
#loc177 = loc(fused[#loc89, #loc90])
#loc178 = loc(fused[#loc91, #loc92])
#loc179 = loc(fused[#loc96, #loc97])
#loc180 = loc(fused[#loc95, #loc97])
#loc181 = loc(fused[#loc94, #loc98])
#loc182 = loc(fused[#loc99, #loc98])
#loc183 = loc(fused[#loc100, #loc101])
#loc184 = loc(fused[#loc102, #loc103])
#loc185 = loc(fused[#loc104, #loc101])
#loc186 = loc(fused[#loc109, #loc108])
#loc187 = loc(fused[#loc114, #loc112])
#loc188 = loc(fused[#loc115, #loc116])
#loc189 = loc(fused[#loc117, #loc118])
#loc190 = loc(fused[#loc120, #loc121])
#loc191 = loc(fused[#loc122, #loc123])
#loc192 = loc(fused[#loc128, #loc129])
#loc193 = loc(fused[#loc133, #loc130])
