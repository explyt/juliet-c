!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc64 = loc("CWE401_Memory_Leak__char_calloc_08.c":170:10)
#loc65 = loc("CWE401_Memory_Leak__char_calloc_08.c":170:14)
#loc66 = loc("CWE401_Memory_Leak__char_calloc_08.c":170:20)
#loc67 = loc("CWE401_Memory_Leak__char_calloc_08.c":170:32)
#loc247 = loc(fused[#loc64, #loc65])
#loc248 = loc(fused[#loc66, #loc67])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE401_Memory_Leak/s01/CWE401_Memory_Leak__char_calloc_08.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @calloc(!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc220)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc221)
  cir.func private @strcpy(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc222)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"A String\00" : !cir.array<!s8i x 9>> : !cir.array<!s8i x 9> {alignment = 1 : i64} loc(#loc7)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc223)
  cir.func no_proto @CWE401_Memory_Leak__char_calloc_08_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc225)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc14)
    cir.store %1, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc226)
    cir.br ^bb1 loc(#loc227)
  ^bb1:  // pred: ^bb0
    %2 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc228)
    %3 = cir.call %2() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc18)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc18)
    cir.brcond %4 ^bb2, ^bb7 loc(#loc229)
  ^bb2:  // pred: ^bb1
    %5 = cir.get_global @calloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i, !u64i)>> loc(#loc21)
    %6 = cir.const #cir.int<100> : !s32i loc(#loc22)
    %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc22)
    %8 = cir.const #cir.int<1> : !u64i loc(#loc230)
    %9 = cir.call @calloc(%7, %8) : (!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc21)
    %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc231)
    cir.store %10, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc232)
    cir.br ^bb3 loc(#loc233)
  ^bb3:  // pred: ^bb2
    %11 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc29)
    %12 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc30)
    %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc30)
    %14 = cir.cmp(eq, %11, %13) : !cir.ptr<!s8i>, !cir.bool loc(#loc234)
    cir.brcond %14 ^bb4, ^bb5 loc(#loc235)
  ^bb4:  // pred: ^bb3
    %15 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc32)
    %16 = cir.const #cir.int<1> : !s32i loc(#loc33)
    %17 = cir.unary(minus, %16) : !s32i, !s32i loc(#loc34)
    cir.call @exit(%17) : (!s32i) -> () extra(#fn_attr) loc(#loc32)
    cir.br ^bb5 loc(#loc28)
  ^bb5:  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc28)
  ^bb6:  // pred: ^bb5
    %18 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc35)
    %19 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc7)
    %20 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc7)
    %21 = cir.call @strcpy(%18, %20) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc36)
    %22 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc37)
    cir.call @printLine(%22) : (!cir.ptr<!s8i>) -> () loc(#loc38)
    cir.br ^bb7 loc(#loc17)
  ^bb7:  // 2 preds: ^bb1, ^bb6
    cir.br ^bb8 loc(#loc17)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc236)
  ^bb9:  // pred: ^bb8
    %23 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc237)
    %24 = cir.call %23() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc41)
    %25 = cir.cast(int_to_bool, %24 : !s32i), !cir.bool loc(#loc41)
    cir.brcond %25 ^bb10, ^bb11 loc(#loc238)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc40)
  ^bb11:  // 2 preds: ^bb9, ^bb10
    cir.br ^bb12 loc(#loc40)
  ^bb12:  // pred: ^bb11
    cir.return loc(#loc11)
  } loc(#loc224)
  cir.func no_proto @CWE401_Memory_Leak__char_calloc_08_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc240)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc46)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc241)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc48)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc242)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc50)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc243)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc52)
    cir.return loc(#loc45)
  } loc(#loc239)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc244)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc245)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc58)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc59)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc60)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc61)
  cir.func @main(%arg0: !s32i loc(fused[#loc64, #loc65]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc66, #loc67])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc247)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc248)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc63)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc68)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc68)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc69)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc70)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc70)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc71)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc58)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc58)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc72)
    %8 = cir.get_global @CWE401_Memory_Leak__char_calloc_08_good : !cir.ptr<!cir.func<!void ()>> loc(#loc249)
    cir.call @CWE401_Memory_Leak__char_calloc_08_good() : () -> () loc(#loc73)
    %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc59)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc59)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc75)
    %11 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc60)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc60)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc76)
    %13 = cir.get_global @CWE401_Memory_Leak__char_calloc_08_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc250)
    cir.call @CWE401_Memory_Leak__char_calloc_08_bad() : () -> () loc(#loc77)
    %14 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc61)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc61)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc79)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc80)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc251)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc251)
    cir.return %17 : !s32i loc(#loc251)
  } loc(#loc246)
  cir.func no_proto internal private @staticReturnsTrue() -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc83)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc84)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc253)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc253)
    cir.return %2 : !s32i loc(#loc253)
  } loc(#loc252)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc86)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc254)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc256)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc93)
    cir.store %1, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc257)
    cir.br ^bb1 loc(#loc258)
  ^bb1:  // pred: ^bb0
    %2 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc259)
    %3 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc97)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc97)
    cir.brcond %4 ^bb2, ^bb7 loc(#loc260)
  ^bb2:  // pred: ^bb1
    %5 = cir.get_global @calloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i, !u64i)>> loc(#loc100)
    %6 = cir.const #cir.int<100> : !s32i loc(#loc101)
    %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc101)
    %8 = cir.const #cir.int<1> : !u64i loc(#loc261)
    %9 = cir.call @calloc(%7, %8) : (!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc100)
    %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc262)
    cir.store %10, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc263)
    cir.br ^bb3 loc(#loc264)
  ^bb3:  // pred: ^bb2
    %11 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc108)
    %12 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc109)
    %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc109)
    %14 = cir.cmp(eq, %11, %13) : !cir.ptr<!s8i>, !cir.bool loc(#loc265)
    cir.brcond %14 ^bb4, ^bb5 loc(#loc266)
  ^bb4:  // pred: ^bb3
    %15 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc111)
    %16 = cir.const #cir.int<1> : !s32i loc(#loc112)
    %17 = cir.unary(minus, %16) : !s32i, !s32i loc(#loc113)
    cir.call @exit(%17) : (!s32i) -> () extra(#fn_attr) loc(#loc111)
    cir.br ^bb5 loc(#loc107)
  ^bb5:  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc107)
  ^bb6:  // pred: ^bb5
    %18 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc114)
    %19 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc115)
    %20 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc115)
    %21 = cir.call @strcpy(%18, %20) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc116)
    %22 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc117)
    cir.call @printLine(%22) : (!cir.ptr<!s8i>) -> () loc(#loc118)
    cir.br ^bb7 loc(#loc96)
  ^bb7:  // 2 preds: ^bb1, ^bb6
    cir.br ^bb8 loc(#loc96)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc267)
  ^bb9:  // pred: ^bb8
    %23 = cir.get_global @staticReturnsFalse : !cir.ptr<!cir.func<!s32i ()>> loc(#loc268)
    %24 = cir.call %23() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc121)
    %25 = cir.cast(int_to_bool, %24 : !s32i), !cir.bool loc(#loc121)
    cir.brcond %25 ^bb10, ^bb11 loc(#loc269)
  ^bb10:  // pred: ^bb9
    %26 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc86)
    %27 = cir.cast(array_to_ptrdecay, %26 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc86)
    cir.call @printLine(%27) : (!cir.ptr<!s8i>) -> () loc(#loc126)
    cir.br ^bb12 loc(#loc124)
  ^bb11:  // pred: ^bb9
    %28 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc127)
    %29 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc128)
    %30 = cir.cast(bitcast, %29 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc128)
    cir.call @free(%30) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc127)
    cir.br ^bb12 loc(#loc120)
  ^bb12:  // 2 preds: ^bb10, ^bb11
    cir.br ^bb13 loc(#loc120)
  ^bb13:  // pred: ^bb12
    cir.return loc(#loc90)
  } loc(#loc255)
  cir.func no_proto internal private @staticReturnsFalse() -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc130)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc131)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc271)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc271)
    cir.return %2 : !s32i loc(#loc271)
  } loc(#loc270)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc273)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc137)
    cir.store %1, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc274)
    cir.br ^bb1 loc(#loc275)
  ^bb1:  // pred: ^bb0
    %2 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc276)
    %3 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc141)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc141)
    cir.brcond %4 ^bb2, ^bb7 loc(#loc277)
  ^bb2:  // pred: ^bb1
    %5 = cir.get_global @calloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i, !u64i)>> loc(#loc144)
    %6 = cir.const #cir.int<100> : !s32i loc(#loc145)
    %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc145)
    %8 = cir.const #cir.int<1> : !u64i loc(#loc278)
    %9 = cir.call @calloc(%7, %8) : (!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc144)
    %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc279)
    cir.store %10, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc280)
    cir.br ^bb3 loc(#loc281)
  ^bb3:  // pred: ^bb2
    %11 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc152)
    %12 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc153)
    %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc153)
    %14 = cir.cmp(eq, %11, %13) : !cir.ptr<!s8i>, !cir.bool loc(#loc282)
    cir.brcond %14 ^bb4, ^bb5 loc(#loc283)
  ^bb4:  // pred: ^bb3
    %15 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc155)
    %16 = cir.const #cir.int<1> : !s32i loc(#loc156)
    %17 = cir.unary(minus, %16) : !s32i, !s32i loc(#loc157)
    cir.call @exit(%17) : (!s32i) -> () extra(#fn_attr) loc(#loc155)
    cir.br ^bb5 loc(#loc151)
  ^bb5:  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc151)
  ^bb6:  // pred: ^bb5
    %18 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc158)
    %19 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc159)
    %20 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc159)
    %21 = cir.call @strcpy(%18, %20) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc160)
    %22 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc161)
    cir.call @printLine(%22) : (!cir.ptr<!s8i>) -> () loc(#loc162)
    cir.br ^bb7 loc(#loc140)
  ^bb7:  // 2 preds: ^bb1, ^bb6
    cir.br ^bb8 loc(#loc140)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc284)
  ^bb9:  // pred: ^bb8
    %23 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc285)
    %24 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc165)
    %25 = cir.cast(int_to_bool, %24 : !s32i), !cir.bool loc(#loc165)
    cir.brcond %25 ^bb10, ^bb11 loc(#loc286)
  ^bb10:  // pred: ^bb9
    %26 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc168)
    %27 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc169)
    %28 = cir.cast(bitcast, %27 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc169)
    cir.call @free(%28) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc168)
    cir.br ^bb11 loc(#loc164)
  ^bb11:  // 2 preds: ^bb9, ^bb10
    cir.br ^bb12 loc(#loc164)
  ^bb12:  // pred: ^bb11
    cir.return loc(#loc134)
  } loc(#loc272)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc288)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc174)
    cir.store %1, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc289)
    cir.br ^bb1 loc(#loc290)
  ^bb1:  // pred: ^bb0
    %2 = cir.get_global @staticReturnsFalse : !cir.ptr<!cir.func<!s32i ()>> loc(#loc291)
    %3 = cir.call @staticReturnsFalse() : () -> !s32i loc(#loc178)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc178)
    cir.brcond %4 ^bb2, ^bb3 loc(#loc292)
  ^bb2:  // pred: ^bb1
    %5 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc183)
    %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc183)
    cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc184)
    cir.br ^bb4 loc(#loc181)
  ^bb3:  // pred: ^bb1
    %7 = cir.const #cir.int<100> : !s32i loc(#loc185)
    %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc185)
    %9 = cir.const #cir.int<1> : !u64i loc(#loc185)
    %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc185)
    %11 = cir.alloca !u8i, !cir.ptr<!u8i>, %10 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc185)
    %12 = cir.cast(bitcast, %11 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc185)
    %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc185)
    cir.store %13, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc293)
    %14 = cir.get_global @strcpy : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc187)
    %15 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc188)
    %16 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc189)
    %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc189)
    %18 = cir.call @strcpy(%15, %17) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc187)
    %19 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc190)
    cir.call @printLine(%19) : (!cir.ptr<!s8i>) -> () loc(#loc191)
    cir.br ^bb4 loc(#loc177)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc177)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc294)
  ^bb6:  // pred: ^bb5
    %20 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc295)
    %21 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc194)
    %22 = cir.cast(int_to_bool, %21 : !s32i), !cir.bool loc(#loc194)
    cir.brcond %22 ^bb7, ^bb8 loc(#loc296)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc193)
  ^bb8:  // 2 preds: ^bb6, ^bb7
    cir.br ^bb9 loc(#loc193)
  ^bb9:  // pred: ^bb8
    cir.return loc(#loc171)
  } loc(#loc287)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc298)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc201)
    cir.store %1, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc299)
    cir.br ^bb1 loc(#loc300)
  ^bb1:  // pred: ^bb0
    %2 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc301)
    %3 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc205)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc205)
    cir.brcond %4 ^bb2, ^bb3 loc(#loc302)
  ^bb2:  // pred: ^bb1
    %5 = cir.const #cir.int<100> : !s32i loc(#loc208)
    %6 = cir.cast(integral, %5 : !s32i), !u64i loc(#loc208)
    %7 = cir.const #cir.int<1> : !u64i loc(#loc208)
    %8 = cir.binop(mul, %6, %7) : !u64i loc(#loc208)
    %9 = cir.alloca !u8i, !cir.ptr<!u8i>, %8 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc208)
    %10 = cir.cast(bitcast, %9 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc208)
    %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc208)
    cir.store %11, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc303)
    %12 = cir.get_global @strcpy : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc210)
    %13 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc211)
    %14 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc212)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc212)
    %16 = cir.call @strcpy(%13, %15) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc210)
    %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc213)
    cir.call @printLine(%17) : (!cir.ptr<!s8i>) -> () loc(#loc214)
    cir.br ^bb3 loc(#loc204)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc204)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc304)
  ^bb5:  // pred: ^bb4
    %18 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc305)
    %19 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc217)
    %20 = cir.cast(int_to_bool, %19 : !s32i), !cir.bool loc(#loc217)
    cir.brcond %20 ^bb6, ^bb7 loc(#loc306)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc216)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc216)
  ^bb8:  // pred: ^bb7
    cir.return loc(#loc198)
  } loc(#loc297)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE401_Memory_Leak/s01/CWE401_Memory_Leak__char_calloc_08.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":675:1)
#loc2 = loc("/usr/include/stdlib.h":676:14)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("/usr/include/string.h":141:1)
#loc6 = loc("/usr/include/string.h":142:14)
#loc7 = loc("CWE401_Memory_Leak__char_calloc_08.c":47:22)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc9 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc10 = loc("CWE401_Memory_Leak__char_calloc_08.c":37:1)
#loc11 = loc("CWE401_Memory_Leak__char_calloc_08.c":55:1)
#loc12 = loc("CWE401_Memory_Leak__char_calloc_08.c":39:5)
#loc13 = loc("CWE401_Memory_Leak__char_calloc_08.c":39:12)
#loc14 = loc("CWE401_Memory_Leak__char_calloc_08.c":40:12)
#loc15 = loc("CWE401_Memory_Leak__char_calloc_08.c":40:5)
#loc16 = loc("CWE401_Memory_Leak__char_calloc_08.c":41:5)
#loc17 = loc("CWE401_Memory_Leak__char_calloc_08.c":49:5)
#loc18 = loc("CWE401_Memory_Leak__char_calloc_08.c":41:8)
#loc19 = loc("CWE401_Memory_Leak__char_calloc_08.c":41:26)
#loc20 = loc("CWE401_Memory_Leak__char_calloc_08.c":42:5)
#loc21 = loc("CWE401_Memory_Leak__char_calloc_08.c":44:24)
#loc22 = loc("CWE401_Memory_Leak__char_calloc_08.c":44:31)
#loc23 = loc("CWE401_Memory_Leak__char_calloc_08.c":44:36)
#loc24 = loc("CWE401_Memory_Leak__char_calloc_08.c":44:47)
#loc25 = loc("CWE401_Memory_Leak__char_calloc_08.c":44:48)
#loc26 = loc("CWE401_Memory_Leak__char_calloc_08.c":44:9)
#loc27 = loc("CWE401_Memory_Leak__char_calloc_08.c":45:9)
#loc28 = loc("CWE401_Memory_Leak__char_calloc_08.c":45:37)
#loc29 = loc("CWE401_Memory_Leak__char_calloc_08.c":45:13)
#loc30 = loc("CWE401_Memory_Leak__char_calloc_08.c":45:21)
#loc31 = loc("CWE401_Memory_Leak__char_calloc_08.c":45:27)
#loc32 = loc("CWE401_Memory_Leak__char_calloc_08.c":45:28)
#loc33 = loc("CWE401_Memory_Leak__char_calloc_08.c":45:34)
#loc34 = loc("CWE401_Memory_Leak__char_calloc_08.c":45:33)
#loc35 = loc("CWE401_Memory_Leak__char_calloc_08.c":47:16)
#loc36 = loc("CWE401_Memory_Leak__char_calloc_08.c":47:9)
#loc37 = loc("CWE401_Memory_Leak__char_calloc_08.c":48:19)
#loc38 = loc("CWE401_Memory_Leak__char_calloc_08.c":48:9)
#loc39 = loc("CWE401_Memory_Leak__char_calloc_08.c":50:5)
#loc40 = loc("CWE401_Memory_Leak__char_calloc_08.c":54:5)
#loc41 = loc("CWE401_Memory_Leak__char_calloc_08.c":50:8)
#loc42 = loc("CWE401_Memory_Leak__char_calloc_08.c":50:26)
#loc43 = loc("CWE401_Memory_Leak__char_calloc_08.c":51:5)
#loc44 = loc("CWE401_Memory_Leak__char_calloc_08.c":153:1)
#loc45 = loc("CWE401_Memory_Leak__char_calloc_08.c":159:1)
#loc46 = loc("CWE401_Memory_Leak__char_calloc_08.c":155:5)
#loc47 = loc("CWE401_Memory_Leak__char_calloc_08.c":155:14)
#loc48 = loc("CWE401_Memory_Leak__char_calloc_08.c":156:5)
#loc49 = loc("CWE401_Memory_Leak__char_calloc_08.c":156:14)
#loc50 = loc("CWE401_Memory_Leak__char_calloc_08.c":157:5)
#loc51 = loc("CWE401_Memory_Leak__char_calloc_08.c":157:14)
#loc52 = loc("CWE401_Memory_Leak__char_calloc_08.c":158:5)
#loc53 = loc("CWE401_Memory_Leak__char_calloc_08.c":158:14)
#loc54 = loc("/usr/include/stdlib.h":575:1)
#loc55 = loc("/usr/include/stdlib.h":575:41)
#loc56 = loc("/usr/include/time.h":76:1)
#loc57 = loc("/usr/include/time.h":76:38)
#loc58 = loc("CWE401_Memory_Leak__char_calloc_08.c":175:15)
#loc59 = loc("CWE401_Memory_Leak__char_calloc_08.c":177:15)
#loc60 = loc("CWE401_Memory_Leak__char_calloc_08.c":180:15)
#loc61 = loc("CWE401_Memory_Leak__char_calloc_08.c":182:15)
#loc62 = loc("CWE401_Memory_Leak__char_calloc_08.c":170:1)
#loc63 = loc("CWE401_Memory_Leak__char_calloc_08.c":185:1)
#loc68 = loc("CWE401_Memory_Leak__char_calloc_08.c":171:1)
#loc69 = loc("CWE401_Memory_Leak__char_calloc_08.c":173:27)
#loc70 = loc("CWE401_Memory_Leak__char_calloc_08.c":173:22)
#loc71 = loc("CWE401_Memory_Leak__char_calloc_08.c":173:5)
#loc72 = loc("CWE401_Memory_Leak__char_calloc_08.c":175:5)
#loc73 = loc("CWE401_Memory_Leak__char_calloc_08.c":176:5)
#loc74 = loc("CWE401_Memory_Leak__char_calloc_08.c":176:45)
#loc75 = loc("CWE401_Memory_Leak__char_calloc_08.c":177:5)
#loc76 = loc("CWE401_Memory_Leak__char_calloc_08.c":180:5)
#loc77 = loc("CWE401_Memory_Leak__char_calloc_08.c":181:5)
#loc78 = loc("CWE401_Memory_Leak__char_calloc_08.c":181:44)
#loc79 = loc("CWE401_Memory_Leak__char_calloc_08.c":182:5)
#loc80 = loc("CWE401_Memory_Leak__char_calloc_08.c":184:12)
#loc81 = loc("CWE401_Memory_Leak__char_calloc_08.c":184:5)
#loc82 = loc("CWE401_Memory_Leak__char_calloc_08.c":25:1)
#loc83 = loc("CWE401_Memory_Leak__char_calloc_08.c":28:1)
#loc84 = loc("CWE401_Memory_Leak__char_calloc_08.c":27:12)
#loc85 = loc("CWE401_Memory_Leak__char_calloc_08.c":27:5)
#loc86 = loc("CWE401_Memory_Leak__char_calloc_08.c":78:19)
#loc87 = loc("/usr/include/stdlib.h":687:1)
#loc88 = loc("/usr/include/stdlib.h":687:32)
#loc89 = loc("CWE401_Memory_Leak__char_calloc_08.c":62:1)
#loc90 = loc("CWE401_Memory_Leak__char_calloc_08.c":85:1)
#loc91 = loc("CWE401_Memory_Leak__char_calloc_08.c":64:5)
#loc92 = loc("CWE401_Memory_Leak__char_calloc_08.c":64:12)
#loc93 = loc("CWE401_Memory_Leak__char_calloc_08.c":65:12)
#loc94 = loc("CWE401_Memory_Leak__char_calloc_08.c":65:5)
#loc95 = loc("CWE401_Memory_Leak__char_calloc_08.c":66:5)
#loc96 = loc("CWE401_Memory_Leak__char_calloc_08.c":74:5)
#loc97 = loc("CWE401_Memory_Leak__char_calloc_08.c":66:8)
#loc98 = loc("CWE401_Memory_Leak__char_calloc_08.c":66:26)
#loc99 = loc("CWE401_Memory_Leak__char_calloc_08.c":67:5)
#loc100 = loc("CWE401_Memory_Leak__char_calloc_08.c":69:24)
#loc101 = loc("CWE401_Memory_Leak__char_calloc_08.c":69:31)
#loc102 = loc("CWE401_Memory_Leak__char_calloc_08.c":69:36)
#loc103 = loc("CWE401_Memory_Leak__char_calloc_08.c":69:47)
#loc104 = loc("CWE401_Memory_Leak__char_calloc_08.c":69:48)
#loc105 = loc("CWE401_Memory_Leak__char_calloc_08.c":69:9)
#loc106 = loc("CWE401_Memory_Leak__char_calloc_08.c":70:9)
#loc107 = loc("CWE401_Memory_Leak__char_calloc_08.c":70:37)
#loc108 = loc("CWE401_Memory_Leak__char_calloc_08.c":70:13)
#loc109 = loc("CWE401_Memory_Leak__char_calloc_08.c":70:21)
#loc110 = loc("CWE401_Memory_Leak__char_calloc_08.c":70:27)
#loc111 = loc("CWE401_Memory_Leak__char_calloc_08.c":70:28)
#loc112 = loc("CWE401_Memory_Leak__char_calloc_08.c":70:34)
#loc113 = loc("CWE401_Memory_Leak__char_calloc_08.c":70:33)
#loc114 = loc("CWE401_Memory_Leak__char_calloc_08.c":72:16)
#loc115 = loc("CWE401_Memory_Leak__char_calloc_08.c":72:22)
#loc116 = loc("CWE401_Memory_Leak__char_calloc_08.c":72:9)
#loc117 = loc("CWE401_Memory_Leak__char_calloc_08.c":73:19)
#loc118 = loc("CWE401_Memory_Leak__char_calloc_08.c":73:9)
#loc119 = loc("CWE401_Memory_Leak__char_calloc_08.c":75:5)
#loc120 = loc("CWE401_Memory_Leak__char_calloc_08.c":84:5)
#loc121 = loc("CWE401_Memory_Leak__char_calloc_08.c":75:8)
#loc122 = loc("CWE401_Memory_Leak__char_calloc_08.c":75:27)
#loc123 = loc("CWE401_Memory_Leak__char_calloc_08.c":76:5)
#loc124 = loc("CWE401_Memory_Leak__char_calloc_08.c":79:5)
#loc125 = loc("CWE401_Memory_Leak__char_calloc_08.c":81:5)
#loc126 = loc("CWE401_Memory_Leak__char_calloc_08.c":78:9)
#loc127 = loc("CWE401_Memory_Leak__char_calloc_08.c":83:9)
#loc128 = loc("CWE401_Memory_Leak__char_calloc_08.c":83:14)
#loc129 = loc("CWE401_Memory_Leak__char_calloc_08.c":30:1)
#loc130 = loc("CWE401_Memory_Leak__char_calloc_08.c":33:1)
#loc131 = loc("CWE401_Memory_Leak__char_calloc_08.c":32:12)
#loc132 = loc("CWE401_Memory_Leak__char_calloc_08.c":32:5)
#loc133 = loc("CWE401_Memory_Leak__char_calloc_08.c":88:1)
#loc134 = loc("CWE401_Memory_Leak__char_calloc_08.c":106:1)
#loc135 = loc("CWE401_Memory_Leak__char_calloc_08.c":90:5)
#loc136 = loc("CWE401_Memory_Leak__char_calloc_08.c":90:12)
#loc137 = loc("CWE401_Memory_Leak__char_calloc_08.c":91:12)
#loc138 = loc("CWE401_Memory_Leak__char_calloc_08.c":91:5)
#loc139 = loc("CWE401_Memory_Leak__char_calloc_08.c":92:5)
#loc140 = loc("CWE401_Memory_Leak__char_calloc_08.c":100:5)
#loc141 = loc("CWE401_Memory_Leak__char_calloc_08.c":92:8)
#loc142 = loc("CWE401_Memory_Leak__char_calloc_08.c":92:26)
#loc143 = loc("CWE401_Memory_Leak__char_calloc_08.c":93:5)
#loc144 = loc("CWE401_Memory_Leak__char_calloc_08.c":95:24)
#loc145 = loc("CWE401_Memory_Leak__char_calloc_08.c":95:31)
#loc146 = loc("CWE401_Memory_Leak__char_calloc_08.c":95:36)
#loc147 = loc("CWE401_Memory_Leak__char_calloc_08.c":95:47)
#loc148 = loc("CWE401_Memory_Leak__char_calloc_08.c":95:48)
#loc149 = loc("CWE401_Memory_Leak__char_calloc_08.c":95:9)
#loc150 = loc("CWE401_Memory_Leak__char_calloc_08.c":96:9)
#loc151 = loc("CWE401_Memory_Leak__char_calloc_08.c":96:37)
#loc152 = loc("CWE401_Memory_Leak__char_calloc_08.c":96:13)
#loc153 = loc("CWE401_Memory_Leak__char_calloc_08.c":96:21)
#loc154 = loc("CWE401_Memory_Leak__char_calloc_08.c":96:27)
#loc155 = loc("CWE401_Memory_Leak__char_calloc_08.c":96:28)
#loc156 = loc("CWE401_Memory_Leak__char_calloc_08.c":96:34)
#loc157 = loc("CWE401_Memory_Leak__char_calloc_08.c":96:33)
#loc158 = loc("CWE401_Memory_Leak__char_calloc_08.c":98:16)
#loc159 = loc("CWE401_Memory_Leak__char_calloc_08.c":98:22)
#loc160 = loc("CWE401_Memory_Leak__char_calloc_08.c":98:9)
#loc161 = loc("CWE401_Memory_Leak__char_calloc_08.c":99:19)
#loc162 = loc("CWE401_Memory_Leak__char_calloc_08.c":99:9)
#loc163 = loc("CWE401_Memory_Leak__char_calloc_08.c":101:5)
#loc164 = loc("CWE401_Memory_Leak__char_calloc_08.c":105:5)
#loc165 = loc("CWE401_Memory_Leak__char_calloc_08.c":101:8)
#loc166 = loc("CWE401_Memory_Leak__char_calloc_08.c":101:26)
#loc167 = loc("CWE401_Memory_Leak__char_calloc_08.c":102:5)
#loc168 = loc("CWE401_Memory_Leak__char_calloc_08.c":104:9)
#loc169 = loc("CWE401_Memory_Leak__char_calloc_08.c":104:14)
#loc170 = loc("CWE401_Memory_Leak__char_calloc_08.c":109:1)
#loc171 = loc("CWE401_Memory_Leak__char_calloc_08.c":131:1)
#loc172 = loc("CWE401_Memory_Leak__char_calloc_08.c":111:5)
#loc173 = loc("CWE401_Memory_Leak__char_calloc_08.c":111:12)
#loc174 = loc("CWE401_Memory_Leak__char_calloc_08.c":112:12)
#loc175 = loc("CWE401_Memory_Leak__char_calloc_08.c":112:5)
#loc176 = loc("CWE401_Memory_Leak__char_calloc_08.c":113:5)
#loc177 = loc("CWE401_Memory_Leak__char_calloc_08.c":125:5)
#loc178 = loc("CWE401_Memory_Leak__char_calloc_08.c":113:8)
#loc179 = loc("CWE401_Memory_Leak__char_calloc_08.c":113:27)
#loc180 = loc("CWE401_Memory_Leak__char_calloc_08.c":114:5)
#loc181 = loc("CWE401_Memory_Leak__char_calloc_08.c":117:5)
#loc182 = loc("CWE401_Memory_Leak__char_calloc_08.c":119:5)
#loc183 = loc("CWE401_Memory_Leak__char_calloc_08.c":116:19)
#loc184 = loc("CWE401_Memory_Leak__char_calloc_08.c":116:9)
#loc185 = loc("CWE401_Memory_Leak__char_calloc_08.c":121:24)
#loc186 = loc("CWE401_Memory_Leak__char_calloc_08.c":121:9)
#loc187 = loc("CWE401_Memory_Leak__char_calloc_08.c":123:9)
#loc188 = loc("CWE401_Memory_Leak__char_calloc_08.c":123:16)
#loc189 = loc("CWE401_Memory_Leak__char_calloc_08.c":123:22)
#loc190 = loc("CWE401_Memory_Leak__char_calloc_08.c":124:19)
#loc191 = loc("CWE401_Memory_Leak__char_calloc_08.c":124:9)
#loc192 = loc("CWE401_Memory_Leak__char_calloc_08.c":126:5)
#loc193 = loc("CWE401_Memory_Leak__char_calloc_08.c":130:5)
#loc194 = loc("CWE401_Memory_Leak__char_calloc_08.c":126:8)
#loc195 = loc("CWE401_Memory_Leak__char_calloc_08.c":126:26)
#loc196 = loc("CWE401_Memory_Leak__char_calloc_08.c":127:5)
#loc197 = loc("CWE401_Memory_Leak__char_calloc_08.c":134:1)
#loc198 = loc("CWE401_Memory_Leak__char_calloc_08.c":151:1)
#loc199 = loc("CWE401_Memory_Leak__char_calloc_08.c":136:5)
#loc200 = loc("CWE401_Memory_Leak__char_calloc_08.c":136:12)
#loc201 = loc("CWE401_Memory_Leak__char_calloc_08.c":137:12)
#loc202 = loc("CWE401_Memory_Leak__char_calloc_08.c":137:5)
#loc203 = loc("CWE401_Memory_Leak__char_calloc_08.c":138:5)
#loc204 = loc("CWE401_Memory_Leak__char_calloc_08.c":145:5)
#loc205 = loc("CWE401_Memory_Leak__char_calloc_08.c":138:8)
#loc206 = loc("CWE401_Memory_Leak__char_calloc_08.c":138:26)
#loc207 = loc("CWE401_Memory_Leak__char_calloc_08.c":139:5)
#loc208 = loc("CWE401_Memory_Leak__char_calloc_08.c":141:24)
#loc209 = loc("CWE401_Memory_Leak__char_calloc_08.c":141:9)
#loc210 = loc("CWE401_Memory_Leak__char_calloc_08.c":143:9)
#loc211 = loc("CWE401_Memory_Leak__char_calloc_08.c":143:16)
#loc212 = loc("CWE401_Memory_Leak__char_calloc_08.c":143:22)
#loc213 = loc("CWE401_Memory_Leak__char_calloc_08.c":144:19)
#loc214 = loc("CWE401_Memory_Leak__char_calloc_08.c":144:9)
#loc215 = loc("CWE401_Memory_Leak__char_calloc_08.c":146:5)
#loc216 = loc("CWE401_Memory_Leak__char_calloc_08.c":150:5)
#loc217 = loc("CWE401_Memory_Leak__char_calloc_08.c":146:8)
#loc218 = loc("CWE401_Memory_Leak__char_calloc_08.c":146:26)
#loc219 = loc("CWE401_Memory_Leak__char_calloc_08.c":147:5)
#loc220 = loc(fused[#loc1, #loc2])
#loc221 = loc(fused[#loc3, #loc4])
#loc222 = loc(fused[#loc5, #loc6])
#loc223 = loc(fused[#loc8, #loc9])
#loc224 = loc(fused[#loc10, #loc11])
#loc225 = loc(fused[#loc12, #loc13])
#loc226 = loc(fused[#loc15, #loc14])
#loc227 = loc(fused[#loc16, #loc17])
#loc228 = loc(fused[#loc18, #loc19])
#loc229 = loc(fused[#loc20, #loc17])
#loc230 = loc(fused[#loc23, #loc24])
#loc231 = loc(fused[#loc21, #loc25])
#loc232 = loc(fused[#loc26, #loc25])
#loc233 = loc(fused[#loc27, #loc28])
#loc234 = loc(fused[#loc29, #loc30])
#loc235 = loc(fused[#loc31, #loc28])
#loc236 = loc(fused[#loc39, #loc40])
#loc237 = loc(fused[#loc41, #loc42])
#loc238 = loc(fused[#loc43, #loc40])
#loc239 = loc(fused[#loc44, #loc45])
#loc240 = loc(fused[#loc46, #loc47])
#loc241 = loc(fused[#loc48, #loc49])
#loc242 = loc(fused[#loc50, #loc51])
#loc243 = loc(fused[#loc52, #loc53])
#loc244 = loc(fused[#loc54, #loc55])
#loc245 = loc(fused[#loc56, #loc57])
#loc246 = loc(fused[#loc62, #loc63])
#loc249 = loc(fused[#loc73, #loc74])
#loc250 = loc(fused[#loc77, #loc78])
#loc251 = loc(fused[#loc81, #loc80])
#loc252 = loc(fused[#loc82, #loc83])
#loc253 = loc(fused[#loc85, #loc84])
#loc254 = loc(fused[#loc87, #loc88])
#loc255 = loc(fused[#loc89, #loc90])
#loc256 = loc(fused[#loc91, #loc92])
#loc257 = loc(fused[#loc94, #loc93])
#loc258 = loc(fused[#loc95, #loc96])
#loc259 = loc(fused[#loc97, #loc98])
#loc260 = loc(fused[#loc99, #loc96])
#loc261 = loc(fused[#loc102, #loc103])
#loc262 = loc(fused[#loc100, #loc104])
#loc263 = loc(fused[#loc105, #loc104])
#loc264 = loc(fused[#loc106, #loc107])
#loc265 = loc(fused[#loc108, #loc109])
#loc266 = loc(fused[#loc110, #loc107])
#loc267 = loc(fused[#loc119, #loc120])
#loc268 = loc(fused[#loc121, #loc122])
#loc269 = loc(fused[#loc123, #loc124, #loc125, #loc120])
#loc270 = loc(fused[#loc129, #loc130])
#loc271 = loc(fused[#loc132, #loc131])
#loc272 = loc(fused[#loc133, #loc134])
#loc273 = loc(fused[#loc135, #loc136])
#loc274 = loc(fused[#loc138, #loc137])
#loc275 = loc(fused[#loc139, #loc140])
#loc276 = loc(fused[#loc141, #loc142])
#loc277 = loc(fused[#loc143, #loc140])
#loc278 = loc(fused[#loc146, #loc147])
#loc279 = loc(fused[#loc144, #loc148])
#loc280 = loc(fused[#loc149, #loc148])
#loc281 = loc(fused[#loc150, #loc151])
#loc282 = loc(fused[#loc152, #loc153])
#loc283 = loc(fused[#loc154, #loc151])
#loc284 = loc(fused[#loc163, #loc164])
#loc285 = loc(fused[#loc165, #loc166])
#loc286 = loc(fused[#loc167, #loc164])
#loc287 = loc(fused[#loc170, #loc171])
#loc288 = loc(fused[#loc172, #loc173])
#loc289 = loc(fused[#loc175, #loc174])
#loc290 = loc(fused[#loc176, #loc177])
#loc291 = loc(fused[#loc178, #loc179])
#loc292 = loc(fused[#loc180, #loc181, #loc182, #loc177])
#loc293 = loc(fused[#loc186, #loc185])
#loc294 = loc(fused[#loc192, #loc193])
#loc295 = loc(fused[#loc194, #loc195])
#loc296 = loc(fused[#loc196, #loc193])
#loc297 = loc(fused[#loc197, #loc198])
#loc298 = loc(fused[#loc199, #loc200])
#loc299 = loc(fused[#loc202, #loc201])
#loc300 = loc(fused[#loc203, #loc204])
#loc301 = loc(fused[#loc205, #loc206])
#loc302 = loc(fused[#loc207, #loc204])
#loc303 = loc(fused[#loc209, #loc208])
#loc304 = loc(fused[#loc215, #loc216])
#loc305 = loc(fused[#loc217, #loc218])
#loc306 = loc(fused[#loc219, #loc216])
