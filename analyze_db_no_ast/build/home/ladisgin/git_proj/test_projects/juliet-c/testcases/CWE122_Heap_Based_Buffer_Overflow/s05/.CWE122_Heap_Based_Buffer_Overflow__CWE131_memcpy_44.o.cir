!s32i = !cir.int<s, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc7 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_44.c":21:21)
#loc8 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_44.c":21:27)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_44.c":50:25)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_44.c":50:31)
#loc108 = loc(fused[#loc7, #loc8])
#loc128 = loc(fused[#loc60, #loc61])
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_44.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @printIntLine(!s32i) loc(#loc105)
  cir.func private  @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc106)
  cir.func internal private  @badSink(%arg0: !cir.ptr<!s32i> loc(fused[#loc7, #loc8])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data", init] {alignment = 8 : i64} loc(#loc108)
    cir.store %arg0, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc9)
    cir.scope {
      %1 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc110)
      %2 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc110)
      cir.store %2, %1 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc110)
      %3 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc14)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc14)
      %5 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc15)
      %6 = cir.cast(bitcast, %5 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc15)
      %7 = cir.const #cir.int<10> : !s32i loc(#loc16)
      %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc16)
      %9 = cir.const #cir.int<4> : !u64i loc(#loc111)
      %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc112)
      cir.libc.memcpy %10 bytes from %6 to %4 : !u64i, !cir.ptr<!void> -> !cir.ptr<!void> loc(#loc113)
      %11 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc21)
      %12 = cir.const #cir.int<0> : !s32i loc(#loc22)
      %13 = cir.ptr_stride(%11 : !cir.ptr<!s32i>, %12 : !s32i), !cir.ptr<!s32i> loc(#loc23)
      %14 = cir.load %13 : !cir.ptr<!s32i>, !s32i loc(#loc21)
      cir.call @printIntLine(%14) : (!s32i) -> () loc(#loc24)
      %15 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc25)
      %16 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc26)
      %17 = cir.cast(bitcast, %16 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc26)
      cir.call @free(%17) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc25)
    } loc(#loc109)
    cir.return loc(#loc6)
  } loc(#loc107)
  cir.func private  @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc114)
  cir.func private  @exit(!s32i) extra(#fn_attr) loc(#loc115)
  cir.func no_proto  @CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_44_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc117)
    %1 = cir.alloca !cir.ptr<!cir.func<!void (!cir.ptr<!s32i>)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!cir.ptr<!s32i>)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc118)
    %2 = cir.get_global @badSink : !cir.ptr<!cir.func<!void (!cir.ptr<!s32i>)>> loc(#loc36)
    cir.store %2, %1 : !cir.ptr<!cir.func<!void (!cir.ptr<!s32i>)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!cir.ptr<!s32i>)>>> loc(#loc118)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc37)
    cir.store %3, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc119)
    %4 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc39)
    %5 = cir.const #cir.int<10> : !s32i loc(#loc40)
    %6 = cir.cast(integral, %5 : !s32i), !u64i loc(#loc40)
    %7 = cir.call @malloc(%6) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc39)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc120)
    cir.store %8, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc121)
    cir.scope {
      %11 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc45)
      %12 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc46)
      %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc46)
      %14 = cir.cmp(eq, %11, %13) : !cir.ptr<!s32i>, !s32i loc(#loc123)
      %15 = cir.cast(int_to_bool, %14 : !s32i), !cir.bool loc(#loc47)
      cir.if %15 {
        %16 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc49)
        %17 = cir.const #cir.int<1> : !s32i loc(#loc50)
        %18 = cir.unary(minus, %17) : !s32i, !s32i loc(#loc51)
        cir.call @exit(%18) : (!s32i) -> () extra(#fn_attr) loc(#loc49)
      } loc(#loc124)
    } loc(#loc122)
    %9 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<!void (!cir.ptr<!s32i>)>>>, !cir.ptr<!cir.func<!void (!cir.ptr<!s32i>)>> loc(#loc52)
    %10 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc53)
    cir.call %9(%10) : (!cir.ptr<!cir.func<!void (!cir.ptr<!s32i>)>>, !cir.ptr<!s32i>) -> () loc(#loc52)
    cir.return loc(#loc32)
  } loc(#loc116)
  cir.func no_proto  @CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_44_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc126)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc56)
    cir.return loc(#loc55)
  } loc(#loc125)
  cir.func internal private  @goodG2BSink(%arg0: !cir.ptr<!s32i> loc(fused[#loc60, #loc61])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data", init] {alignment = 8 : i64} loc(#loc128)
    cir.store %arg0, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc62)
    cir.scope {
      %1 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc130)
      %2 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc130)
      cir.store %2, %1 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc130)
      %3 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc67)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc67)
      %5 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc68)
      %6 = cir.cast(bitcast, %5 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc68)
      %7 = cir.const #cir.int<10> : !s32i loc(#loc69)
      %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc69)
      %9 = cir.const #cir.int<4> : !u64i loc(#loc131)
      %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc132)
      cir.libc.memcpy %10 bytes from %6 to %4 : !u64i, !cir.ptr<!void> -> !cir.ptr<!void> loc(#loc133)
      %11 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc74)
      %12 = cir.const #cir.int<0> : !s32i loc(#loc75)
      %13 = cir.ptr_stride(%11 : !cir.ptr<!s32i>, %12 : !s32i), !cir.ptr<!s32i> loc(#loc76)
      %14 = cir.load %13 : !cir.ptr<!s32i>, !s32i loc(#loc74)
      cir.call @printIntLine(%14) : (!s32i) -> () loc(#loc77)
      %15 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc78)
      %16 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc79)
      %17 = cir.cast(bitcast, %16 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc79)
      cir.call @free(%17) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc78)
    } loc(#loc129)
    cir.return loc(#loc59)
  } loc(#loc127)
  cir.func no_proto internal private  @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc135)
    %1 = cir.alloca !cir.ptr<!cir.func<!void (!cir.ptr<!s32i>)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!cir.ptr<!s32i>)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc136)
    %2 = cir.get_global @goodG2BSink : !cir.ptr<!cir.func<!void (!cir.ptr<!s32i>)>> loc(#loc85)
    cir.store %2, %1 : !cir.ptr<!cir.func<!void (!cir.ptr<!s32i>)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!cir.ptr<!s32i>)>>> loc(#loc136)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc86)
    cir.store %3, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc137)
    %4 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc88)
    %5 = cir.const #cir.int<10> : !s32i loc(#loc89)
    %6 = cir.cast(integral, %5 : !s32i), !u64i loc(#loc89)
    %7 = cir.const #cir.int<4> : !u64i loc(#loc138)
    %8 = cir.binop(mul, %6, %7) : !u64i loc(#loc139)
    %9 = cir.call @malloc(%8) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc88)
    %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc140)
    cir.store %10, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc141)
    cir.scope {
      %13 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc96)
      %14 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc97)
      %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc97)
      %16 = cir.cmp(eq, %13, %15) : !cir.ptr<!s32i>, !s32i loc(#loc143)
      %17 = cir.cast(int_to_bool, %16 : !s32i), !cir.bool loc(#loc98)
      cir.if %17 {
        %18 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc100)
        %19 = cir.const #cir.int<1> : !s32i loc(#loc101)
        %20 = cir.unary(minus, %19) : !s32i, !s32i loc(#loc102)
        cir.call @exit(%20) : (!s32i) -> () extra(#fn_attr) loc(#loc100)
      } loc(#loc144)
    } loc(#loc142)
    %11 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<!void (!cir.ptr<!s32i>)>>>, !cir.ptr<!cir.func<!void (!cir.ptr<!s32i>)>> loc(#loc103)
    %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc104)
    cir.call %11(%12) : (!cir.ptr<!cir.func<!void (!cir.ptr<!s32i>)>>, !cir.ptr<!s32i>) -> () loc(#loc103)
    cir.return loc(#loc81)
  } loc(#loc134)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_44.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("/usr/include/stdlib.h":687:1)
#loc4 = loc("/usr/include/stdlib.h":687:32)
#loc5 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_44.c":21:1)
#loc6 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_44.c":30:1)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_44.c":22:1)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_44.c":23:5)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_44.c":29:5)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_44.c":24:9)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_44.c":24:28)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_44.c":26:16)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_44.c":26:22)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_44.c":26:30)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_44.c":26:33)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_44.c":26:43)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_44.c":26:9)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_44.c":26:44)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_44.c":27:22)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_44.c":27:27)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_44.c":27:28)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_44.c":27:9)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_44.c":28:9)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_44.c":28:14)
#loc27 = loc("/usr/include/stdlib.h":672:1)
#loc28 = loc("/usr/include/stdlib.h":672:45)
#loc29 = loc("/usr/include/stdlib.h":756:1)
#loc30 = loc("/usr/include/stdlib.h":756:70)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_44.c":32:1)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_44.c":43:1)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_44.c":34:5)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_44.c":34:11)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_44.c":36:5)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_44.c":36:31)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_44.c":37:12)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_44.c":37:5)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_44.c":39:19)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_44.c":39:26)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_44.c":39:28)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_44.c":39:5)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_44.c":40:5)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_44.c":40:33)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_44.c":40:9)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_44.c":40:17)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_44.c":40:14)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_44.c":40:23)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_44.c":40:24)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_44.c":40:30)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_44.c":40:29)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_44.c":42:5)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_44.c":42:13)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_44.c":72:1)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_44.c":75:1)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_44.c":74:5)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_44.c":74:13)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_44.c":50:1)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_44.c":59:1)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_44.c":51:1)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_44.c":52:5)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_44.c":58:5)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_44.c":53:9)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_44.c":53:28)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_44.c":55:16)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_44.c":55:22)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_44.c":55:30)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_44.c":55:33)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_44.c":55:43)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_44.c":55:9)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_44.c":55:44)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_44.c":56:22)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_44.c":56:27)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_44.c":56:28)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_44.c":56:9)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_44.c":57:9)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_44.c":57:14)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_44.c":61:1)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_44.c":70:1)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_44.c":63:5)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_44.c":63:11)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_44.c":64:5)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_44.c":64:31)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_44.c":65:12)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_44.c":65:5)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_44.c":67:19)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_44.c":67:26)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_44.c":67:29)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_44.c":67:39)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_44.c":67:40)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_44.c":67:5)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_44.c":68:5)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_44.c":68:33)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_44.c":68:9)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_44.c":68:17)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_44.c":68:14)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_44.c":68:23)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_44.c":68:24)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_44.c":68:30)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_44.c":68:29)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_44.c":69:5)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_44.c":69:13)
#loc105 = loc(fused[#loc1, #loc2])
#loc106 = loc(fused[#loc3, #loc4])
#loc107 = loc(fused[#loc5, #loc6])
#loc109 = loc(fused[#loc10, #loc11])
#loc110 = loc(fused[#loc12, #loc13])
#loc111 = loc(fused[#loc17, #loc18])
#loc112 = loc(fused[#loc16, #loc18])
#loc113 = loc(fused[#loc19, #loc20])
#loc114 = loc(fused[#loc27, #loc28])
#loc115 = loc(fused[#loc29, #loc30])
#loc116 = loc(fused[#loc31, #loc32])
#loc117 = loc(fused[#loc33, #loc34])
#loc118 = loc(fused[#loc35, #loc36])
#loc119 = loc(fused[#loc38, #loc37])
#loc120 = loc(fused[#loc39, #loc41])
#loc121 = loc(fused[#loc42, #loc41])
#loc122 = loc(fused[#loc43, #loc44])
#loc123 = loc(fused[#loc45, #loc46])
#loc124 = loc(fused[#loc48, #loc44])
#loc125 = loc(fused[#loc54, #loc55])
#loc126 = loc(fused[#loc56, #loc57])
#loc127 = loc(fused[#loc58, #loc59])
#loc129 = loc(fused[#loc63, #loc64])
#loc130 = loc(fused[#loc65, #loc66])
#loc131 = loc(fused[#loc70, #loc71])
#loc132 = loc(fused[#loc69, #loc71])
#loc133 = loc(fused[#loc72, #loc73])
#loc134 = loc(fused[#loc80, #loc81])
#loc135 = loc(fused[#loc82, #loc83])
#loc136 = loc(fused[#loc84, #loc85])
#loc137 = loc(fused[#loc87, #loc86])
#loc138 = loc(fused[#loc90, #loc91])
#loc139 = loc(fused[#loc89, #loc91])
#loc140 = loc(fused[#loc88, #loc92])
#loc141 = loc(fused[#loc93, #loc92])
#loc142 = loc(fused[#loc94, #loc95])
#loc143 = loc(fused[#loc96, #loc97])
#loc144 = loc(fused[#loc99, #loc95])
