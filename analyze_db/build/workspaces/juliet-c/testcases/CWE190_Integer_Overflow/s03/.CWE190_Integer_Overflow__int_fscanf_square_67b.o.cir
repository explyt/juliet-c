!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc5 = loc("CWE190_Integer_Overflow__int_fscanf_square_67b.c":29:61)
#loc6 = loc("CWE190_Integer_Overflow__int_fscanf_square_67b.c":29:118)
#loc20 = loc("CWE190_Integer_Overflow__int_fscanf_square_67b.c":44:65)
#loc21 = loc("CWE190_Integer_Overflow__int_fscanf_square_67b.c":44:122)
#loc38 = loc("CWE190_Integer_Overflow__int_fscanf_square_67b.c":55:65)
#loc39 = loc("CWE190_Integer_Overflow__int_fscanf_square_67b.c":55:122)
#true = #cir.bool<true> : !cir.bool
!ty__CWE190_Integer_Overflow__int_fscanf_square_67_structType = !cir.record<struct "_CWE190_Integer_Overflow__int_fscanf_square_67_structType" {!s32i}>
#loc64 = loc(fused[#loc5, #loc6])
#loc69 = loc(fused[#loc20, #loc21])
#loc75 = loc(fused[#loc38, #loc39])
module @"/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_fscanf_square_67b.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, "dlti.endianness" = "little", "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @printIntLine(!s32i) loc(#loc62)
  cir.func @CWE190_Integer_Overflow__int_fscanf_square_67b_badSink(%arg0: !ty__CWE190_Integer_Overflow__int_fscanf_square_67_structType loc(fused[#loc5, #loc6])) extra(#fn_attr) {
    %0 = cir.alloca !ty__CWE190_Integer_Overflow__int_fscanf_square_67_structType, !cir.ptr<!ty__CWE190_Integer_Overflow__int_fscanf_square_67_structType>, ["myStruct", init] {alignment = 4 : i64} loc(#loc64)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc65)
    cir.store %arg0, %0 : !ty__CWE190_Integer_Overflow__int_fscanf_square_67_structType, !cir.ptr<!ty__CWE190_Integer_Overflow__int_fscanf_square_67_structType> loc(#loc9)
    %2 = cir.get_member %0[0] {name = "structFirst"} : !cir.ptr<!ty__CWE190_Integer_Overflow__int_fscanf_square_67_structType> -> !cir.ptr<!s32i> loc(#loc10)
    %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc8)
    cir.store %3, %1 : !s32i, !cir.ptr<!s32i> loc(#loc65)
    cir.scope {
      %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc67)
      %5 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc15)
      %6 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc14)
      %7 = cir.binop(mul, %5, %6) nsw : !s32i loc(#loc15)
      cir.store %7, %4 : !s32i, !cir.ptr<!s32i> loc(#loc67)
      %8 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc16)
      cir.call @printIntLine(%8) : (!s32i) -> () loc(#loc17)
    } loc(#loc66)
    cir.return loc(#loc4)
  } loc(#loc63)
  cir.func @CWE190_Integer_Overflow__int_fscanf_square_67b_goodG2BSink(%arg0: !ty__CWE190_Integer_Overflow__int_fscanf_square_67_structType loc(fused[#loc20, #loc21])) extra(#fn_attr) {
    %0 = cir.alloca !ty__CWE190_Integer_Overflow__int_fscanf_square_67_structType, !cir.ptr<!ty__CWE190_Integer_Overflow__int_fscanf_square_67_structType>, ["myStruct", init] {alignment = 4 : i64} loc(#loc69)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc70)
    cir.store %arg0, %0 : !ty__CWE190_Integer_Overflow__int_fscanf_square_67_structType, !cir.ptr<!ty__CWE190_Integer_Overflow__int_fscanf_square_67_structType> loc(#loc24)
    %2 = cir.get_member %0[0] {name = "structFirst"} : !cir.ptr<!ty__CWE190_Integer_Overflow__int_fscanf_square_67_structType> -> !cir.ptr<!s32i> loc(#loc10)
    %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc23)
    cir.store %3, %1 : !s32i, !cir.ptr<!s32i> loc(#loc70)
    cir.scope {
      %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc72)
      %5 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc29)
      %6 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc28)
      %7 = cir.binop(mul, %5, %6) nsw : !s32i loc(#loc29)
      cir.store %7, %4 : !s32i, !cir.ptr<!s32i> loc(#loc72)
      %8 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc30)
      cir.call @printIntLine(%8) : (!s32i) -> () loc(#loc31)
    } loc(#loc71)
    cir.return loc(#loc19)
  } loc(#loc68)
  cir.func private @sqrt(!cir.double) -> !cir.double extra(#fn_attr1) loc(#loc32)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc73)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc35)
  cir.func @CWE190_Integer_Overflow__int_fscanf_square_67b_goodB2GSink(%arg0: !ty__CWE190_Integer_Overflow__int_fscanf_square_67_structType loc(fused[#loc38, #loc39])) extra(#fn_attr) {
    %0 = cir.alloca !ty__CWE190_Integer_Overflow__int_fscanf_square_67_structType, !cir.ptr<!ty__CWE190_Integer_Overflow__int_fscanf_square_67_structType>, ["myStruct", init] {alignment = 4 : i64} loc(#loc75)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc76)
    cir.store %arg0, %0 : !ty__CWE190_Integer_Overflow__int_fscanf_square_67_structType, !cir.ptr<!ty__CWE190_Integer_Overflow__int_fscanf_square_67_structType> loc(#loc42)
    %2 = cir.get_member %0[0] {name = "structFirst"} : !cir.ptr<!ty__CWE190_Integer_Overflow__int_fscanf_square_67_structType> -> !cir.ptr<!s32i> loc(#loc10)
    %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc41)
    cir.store %3, %1 : !s32i, !cir.ptr<!s32i> loc(#loc76)
    cir.scope {
      %4 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc45)
      %5 = cir.const #cir.int<2147483647> : !s32i loc(#loc46)
      %6 = cir.unary(minus, %5) nsw : !s32i, !s32i loc(#loc46)
      %7 = cir.const #cir.int<1> : !s32i loc(#loc46)
      %8 = cir.binop(sub, %6, %7) nsw : !s32i loc(#loc46)
      %9 = cir.cmp(gt, %4, %8) : !s32i, !cir.bool loc(#loc78)
      %10 = cir.ternary(%9, true {
        %11 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc48)
        %12 = cir.abs %11 poison : !s32i loc(#loc49)
        %13 = cir.cast(integral, %12 : !s32i), !s64i loc(#loc49)
        %14 = cir.get_global @sqrt : !cir.ptr<!cir.func<(!cir.double) -> !cir.double>> loc(#loc50)
        %15 = cir.const #cir.int<2147483647> : !s32i loc(#loc51)
        %16 = cir.cast(int_to_float, %15 : !s32i), !cir.double loc(#loc51)
        %17 = cir.call @sqrt(%16) : (!cir.double) -> !cir.double extra(#fn_attr1) loc(#loc50)
        %18 = cir.cast(float_to_int, %17 : !cir.double), !s64i loc(#loc50)
        %19 = cir.cmp(lt, %13, %18) : !s64i, !cir.bool loc(#loc79)
        %20 = cir.ternary(%19, true {
          %21 = cir.const #true loc(#loc47)
          cir.yield %21 : !cir.bool loc(#loc47)
        }, false {
          %21 = cir.const #false loc(#loc47)
          cir.yield %21 : !cir.bool loc(#loc47)
        }) : (!cir.bool) -> !cir.bool loc(#loc47)
        cir.yield %20 : !cir.bool loc(#loc47)
      }, false {
        %11 = cir.const #false loc(#loc47)
        cir.yield %11 : !cir.bool loc(#loc47)
      }) : (!cir.bool) -> !cir.bool loc(#loc47)
      cir.if %10 {
        %11 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc81)
        %12 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc58)
        %13 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc57)
        %14 = cir.binop(mul, %12, %13) nsw : !s32i loc(#loc58)
        cir.store %14, %11 : !s32i, !cir.ptr<!s32i> loc(#loc81)
        %15 = cir.load %11 : !cir.ptr<!s32i>, !s32i loc(#loc59)
        cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc60)
      } else {
        %11 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc35)
        %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc35)
        cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc61)
      } loc(#loc80)
    } loc(#loc77)
    cir.return loc(#loc37)
  } loc(#loc74)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_fscanf_square_67b.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("CWE190_Integer_Overflow__int_fscanf_square_67b.c":29:1)
#loc4 = loc("CWE190_Integer_Overflow__int_fscanf_square_67b.c":37:1)
#loc7 = loc("CWE190_Integer_Overflow__int_fscanf_square_67b.c":31:5)
#loc8 = loc("CWE190_Integer_Overflow__int_fscanf_square_67b.c":31:25)
#loc9 = loc("CWE190_Integer_Overflow__int_fscanf_square_67b.c":30:1)
#loc10 = loc("CWE190_Integer_Overflow__int_fscanf_square_67b.c":24:9)
#loc11 = loc("CWE190_Integer_Overflow__int_fscanf_square_67b.c":32:5)
#loc12 = loc("CWE190_Integer_Overflow__int_fscanf_square_67b.c":36:5)
#loc13 = loc("CWE190_Integer_Overflow__int_fscanf_square_67b.c":34:9)
#loc14 = loc("CWE190_Integer_Overflow__int_fscanf_square_67b.c":34:29)
#loc15 = loc("CWE190_Integer_Overflow__int_fscanf_square_67b.c":34:22)
#loc16 = loc("CWE190_Integer_Overflow__int_fscanf_square_67b.c":35:22)
#loc17 = loc("CWE190_Integer_Overflow__int_fscanf_square_67b.c":35:9)
#loc18 = loc("CWE190_Integer_Overflow__int_fscanf_square_67b.c":44:1)
#loc19 = loc("CWE190_Integer_Overflow__int_fscanf_square_67b.c":52:1)
#loc22 = loc("CWE190_Integer_Overflow__int_fscanf_square_67b.c":46:5)
#loc23 = loc("CWE190_Integer_Overflow__int_fscanf_square_67b.c":46:25)
#loc24 = loc("CWE190_Integer_Overflow__int_fscanf_square_67b.c":45:1)
#loc25 = loc("CWE190_Integer_Overflow__int_fscanf_square_67b.c":47:5)
#loc26 = loc("CWE190_Integer_Overflow__int_fscanf_square_67b.c":51:5)
#loc27 = loc("CWE190_Integer_Overflow__int_fscanf_square_67b.c":49:9)
#loc28 = loc("CWE190_Integer_Overflow__int_fscanf_square_67b.c":49:29)
#loc29 = loc("CWE190_Integer_Overflow__int_fscanf_square_67b.c":49:22)
#loc30 = loc("CWE190_Integer_Overflow__int_fscanf_square_67b.c":50:22)
#loc31 = loc("CWE190_Integer_Overflow__int_fscanf_square_67b.c":50:9)
#loc32 = loc("/usr/include/x86_64-linux-gnu/bits/mathcalls.h":143:1)
#loc33 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc34 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc35 = loc("CWE190_Integer_Overflow__int_fscanf_square_67b.c":66:19)
#loc36 = loc("CWE190_Integer_Overflow__int_fscanf_square_67b.c":55:1)
#loc37 = loc("CWE190_Integer_Overflow__int_fscanf_square_67b.c":68:1)
#loc40 = loc("CWE190_Integer_Overflow__int_fscanf_square_67b.c":57:5)
#loc41 = loc("CWE190_Integer_Overflow__int_fscanf_square_67b.c":57:25)
#loc42 = loc("CWE190_Integer_Overflow__int_fscanf_square_67b.c":56:1)
#loc43 = loc("CWE190_Integer_Overflow__int_fscanf_square_67b.c":59:5)
#loc44 = loc("CWE190_Integer_Overflow__int_fscanf_square_67b.c":67:5)
#loc45 = loc("CWE190_Integer_Overflow__int_fscanf_square_67b.c":59:9)
#loc46 = loc("CWE190_Integer_Overflow__int_fscanf_square_67b.c":59:16)
#loc47 = loc("CWE190_Integer_Overflow__int_fscanf_square_67b.c":59:24)
#loc48 = loc("CWE190_Integer_Overflow__int_fscanf_square_67b.c":59:31)
#loc49 = loc("CWE190_Integer_Overflow__int_fscanf_square_67b.c":59:27)
#loc50 = loc("CWE190_Integer_Overflow__int_fscanf_square_67b.c":59:45)
#loc51 = loc("CWE190_Integer_Overflow__int_fscanf_square_67b.c":59:58)
#loc52 = loc("CWE190_Integer_Overflow__int_fscanf_square_67b.c":59:65)
#loc53 = loc("CWE190_Integer_Overflow__int_fscanf_square_67b.c":60:5)
#loc54 = loc("CWE190_Integer_Overflow__int_fscanf_square_67b.c":63:5)
#loc55 = loc("CWE190_Integer_Overflow__int_fscanf_square_67b.c":65:5)
#loc56 = loc("CWE190_Integer_Overflow__int_fscanf_square_67b.c":61:9)
#loc57 = loc("CWE190_Integer_Overflow__int_fscanf_square_67b.c":61:29)
#loc58 = loc("CWE190_Integer_Overflow__int_fscanf_square_67b.c":61:22)
#loc59 = loc("CWE190_Integer_Overflow__int_fscanf_square_67b.c":62:22)
#loc60 = loc("CWE190_Integer_Overflow__int_fscanf_square_67b.c":62:9)
#loc61 = loc("CWE190_Integer_Overflow__int_fscanf_square_67b.c":66:9)
#loc62 = loc(fused[#loc1, #loc2])
#loc63 = loc(fused[#loc3, #loc4])
#loc65 = loc(fused[#loc7, #loc8])
#loc66 = loc(fused[#loc11, #loc12])
#loc67 = loc(fused[#loc13, #loc14])
#loc68 = loc(fused[#loc18, #loc19])
#loc70 = loc(fused[#loc22, #loc23])
#loc71 = loc(fused[#loc25, #loc26])
#loc72 = loc(fused[#loc27, #loc28])
#loc73 = loc(fused[#loc33, #loc34])
#loc74 = loc(fused[#loc36, #loc37])
#loc76 = loc(fused[#loc40, #loc41])
#loc77 = loc(fused[#loc43, #loc44])
#loc78 = loc(fused[#loc45, #loc46])
#loc79 = loc(fused[#loc49, #loc52])
#loc80 = loc(fused[#loc53, #loc54, #loc55, #loc44])
#loc81 = loc(fused[#loc56, #loc57])
