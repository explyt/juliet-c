!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE191_Integer_Underflow/s01/CWE191_Integer_Underflow__char_rand_sub_09.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.global "private"  constant external @GLOBAL_CONST_TRUE : !s32i {alignment = 4 : i64} loc(#loc162)
  cir.func private  @rand() -> !s32i extra(#fn_attr) loc(#loc163)
  cir.func private  @printHexCharLine(!s8i) loc(#loc164)
  cir.func no_proto  @CWE191_Integer_Underflow__char_rand_sub_09_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc166)
    %1 = cir.const #cir.int<32> : !s32i loc(#loc11)
    %2 = cir.cast(integral, %1 : !s32i), !s8i loc(#loc11)
    cir.store %2, %0 : !s8i, !cir.ptr<!s8i> loc(#loc167)
    cir.scope {
      %3 = cir.get_global @GLOBAL_CONST_TRUE : !cir.ptr<!s32i> loc(#loc162)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc15)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc15)
      cir.if %5 {
        %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc17)
        %8 = cir.binop(and, %6, %7) : !s32i loc(#loc17)
        %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc17)
        %10 = cir.ternary(%9, true {
          %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
          %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc17)
          %15 = cir.const #cir.int<30> : !s32i loc(#loc17)
          %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc17)
          %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
          %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc17)
          %19 = cir.const #cir.int<15> : !s32i loc(#loc17)
          %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc17)
          %21 = cir.binop(xor, %16, %20) : !u32i loc(#loc17)
          %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
          %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc17)
          %24 = cir.binop(xor, %21, %23) : !u32i loc(#loc17)
          cir.yield %24 : !u32i loc(#loc17)
        }, false {
          %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
          %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc17)
          %15 = cir.const #cir.int<30> : !s32i loc(#loc17)
          %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc17)
          %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
          %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc17)
          %19 = cir.const #cir.int<15> : !s32i loc(#loc17)
          %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc17)
          %21 = cir.binop(xor, %16, %20) : !u32i loc(#loc17)
          %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
          %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc17)
          %24 = cir.binop(xor, %21, %23) : !u32i loc(#loc17)
          %25 = cir.unary(minus, %24) : !u32i, !u32i loc(#loc17)
          %26 = cir.const #cir.int<1> : !s32i loc(#loc17)
          %27 = cir.cast(integral, %26 : !s32i), !u32i loc(#loc17)
          %28 = cir.binop(sub, %25, %27) : !u32i loc(#loc17)
          cir.yield %28 : !u32i loc(#loc17)
        }) : (!cir.bool) -> !u32i loc(#loc17)
        %11 = cir.cast(integral, %10 : !u32i), !s32i loc(#loc17)
        %12 = cir.cast(integral, %11 : !s32i), !s8i loc(#loc17)
        cir.store %12, %0 : !s8i, !cir.ptr<!s8i> loc(#loc170)
      } loc(#loc169)
    } loc(#loc168)
    cir.scope {
      %3 = cir.get_global @GLOBAL_CONST_TRUE : !cir.ptr<!s32i> loc(#loc162)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc21)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc21)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc174)
          %7 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc27)
          %8 = cir.cast(integral, %7 : !s8i), !s32i loc(#loc27)
          %9 = cir.const #cir.int<1> : !s32i loc(#loc26)
          %10 = cir.binop(sub, %8, %9) nsw : !s32i loc(#loc27)
          %11 = cir.cast(integral, %10 : !s32i), !s8i loc(#loc27)
          cir.store %11, %6 : !s8i, !cir.ptr<!s8i> loc(#loc174)
          %12 = cir.load %6 : !cir.ptr<!s8i>, !s8i loc(#loc28)
          cir.call @printHexCharLine(%12) : (!s8i) -> () loc(#loc29)
        } loc(#loc173)
      } loc(#loc172)
    } loc(#loc171)
    cir.return loc(#loc8)
  } loc(#loc165)
  cir.func no_proto  @CWE191_Integer_Underflow__char_rand_sub_09_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc176)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc32)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc177)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc34)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc178)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc36)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc179)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc38)
    cir.return loc(#loc31)
  } loc(#loc175)
  cir.global "private"  constant external @GLOBAL_CONST_FALSE : !s32i {alignment = 4 : i64} loc(#loc180)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc181)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc44)
  cir.global "private"  constant internal dsolocal @".str1" = #cir.const_array<"data value is too large to perform subtraction.\00" : !cir.array<!s8i x 48>> : !cir.array<!s8i x 48> {alignment = 1 : i64} loc(#loc45)
  cir.func no_proto internal private  @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc183)
    %1 = cir.const #cir.int<32> : !s32i loc(#loc50)
    %2 = cir.cast(integral, %1 : !s32i), !s8i loc(#loc50)
    cir.store %2, %0 : !s8i, !cir.ptr<!s8i> loc(#loc184)
    cir.scope {
      %3 = cir.get_global @GLOBAL_CONST_TRUE : !cir.ptr<!s32i> loc(#loc162)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc54)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc54)
      cir.if %5 {
        %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc56)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc56)
        %8 = cir.binop(and, %6, %7) : !s32i loc(#loc56)
        %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc56)
        %10 = cir.ternary(%9, true {
          %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc56)
          %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc56)
          %15 = cir.const #cir.int<30> : !s32i loc(#loc56)
          %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc56)
          %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc56)
          %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc56)
          %19 = cir.const #cir.int<15> : !s32i loc(#loc56)
          %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc56)
          %21 = cir.binop(xor, %16, %20) : !u32i loc(#loc56)
          %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc56)
          %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc56)
          %24 = cir.binop(xor, %21, %23) : !u32i loc(#loc56)
          cir.yield %24 : !u32i loc(#loc56)
        }, false {
          %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc56)
          %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc56)
          %15 = cir.const #cir.int<30> : !s32i loc(#loc56)
          %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc56)
          %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc56)
          %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc56)
          %19 = cir.const #cir.int<15> : !s32i loc(#loc56)
          %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc56)
          %21 = cir.binop(xor, %16, %20) : !u32i loc(#loc56)
          %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc56)
          %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc56)
          %24 = cir.binop(xor, %21, %23) : !u32i loc(#loc56)
          %25 = cir.unary(minus, %24) : !u32i, !u32i loc(#loc56)
          %26 = cir.const #cir.int<1> : !s32i loc(#loc56)
          %27 = cir.cast(integral, %26 : !s32i), !u32i loc(#loc56)
          %28 = cir.binop(sub, %25, %27) : !u32i loc(#loc56)
          cir.yield %28 : !u32i loc(#loc56)
        }) : (!cir.bool) -> !u32i loc(#loc56)
        %11 = cir.cast(integral, %10 : !u32i), !s32i loc(#loc56)
        %12 = cir.cast(integral, %11 : !s32i), !s8i loc(#loc56)
        cir.store %12, %0 : !s8i, !cir.ptr<!s8i> loc(#loc187)
      } loc(#loc186)
    } loc(#loc185)
    cir.scope {
      %3 = cir.get_global @GLOBAL_CONST_FALSE : !cir.ptr<!s32i> loc(#loc180)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc60)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc60)
      cir.if %5 {
        %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc44)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc44)
        cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc64)
      } else {
        cir.scope {
          %6 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc67)
          %7 = cir.cast(integral, %6 : !s8i), !s32i loc(#loc67)
          %8 = cir.const #cir.int<127> : !s32i loc(#loc68)
          %9 = cir.unary(minus, %8) : !s32i, !s32i loc(#loc68)
          %10 = cir.const #cir.int<1> : !s32i loc(#loc68)
          %11 = cir.binop(sub, %9, %10) nsw : !s32i loc(#loc68)
          %12 = cir.cmp(gt, %7, %11) : !s32i, !s32i loc(#loc191)
          %13 = cir.cast(int_to_bool, %12 : !s32i), !cir.bool loc(#loc69)
          cir.if %13 {
            %14 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc193)
            %15 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc75)
            %16 = cir.cast(integral, %15 : !s8i), !s32i loc(#loc75)
            %17 = cir.const #cir.int<1> : !s32i loc(#loc74)
            %18 = cir.binop(sub, %16, %17) nsw : !s32i loc(#loc75)
            %19 = cir.cast(integral, %18 : !s32i), !s8i loc(#loc75)
            cir.store %19, %14 : !s8i, !cir.ptr<!s8i> loc(#loc193)
            %20 = cir.load %14 : !cir.ptr<!s8i>, !s8i loc(#loc76)
            cir.call @printHexCharLine(%20) : (!s8i) -> () loc(#loc77)
          } else {
            %14 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 48>> loc(#loc45)
            %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 48>>), !cir.ptr<!s8i> loc(#loc45)
            cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc78)
          } loc(#loc192)
        } loc(#loc190)
      } loc(#loc189)
    } loc(#loc188)
    cir.return loc(#loc47)
  } loc(#loc182)
  cir.func no_proto internal private  @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc195)
    %1 = cir.const #cir.int<32> : !s32i loc(#loc83)
    %2 = cir.cast(integral, %1 : !s32i), !s8i loc(#loc83)
    cir.store %2, %0 : !s8i, !cir.ptr<!s8i> loc(#loc196)
    cir.scope {
      %3 = cir.get_global @GLOBAL_CONST_TRUE : !cir.ptr<!s32i> loc(#loc162)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc87)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc87)
      cir.if %5 {
        %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc89)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc89)
        %8 = cir.binop(and, %6, %7) : !s32i loc(#loc89)
        %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc89)
        %10 = cir.ternary(%9, true {
          %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc89)
          %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc89)
          %15 = cir.const #cir.int<30> : !s32i loc(#loc89)
          %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc89)
          %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc89)
          %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc89)
          %19 = cir.const #cir.int<15> : !s32i loc(#loc89)
          %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc89)
          %21 = cir.binop(xor, %16, %20) : !u32i loc(#loc89)
          %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc89)
          %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc89)
          %24 = cir.binop(xor, %21, %23) : !u32i loc(#loc89)
          cir.yield %24 : !u32i loc(#loc89)
        }, false {
          %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc89)
          %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc89)
          %15 = cir.const #cir.int<30> : !s32i loc(#loc89)
          %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc89)
          %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc89)
          %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc89)
          %19 = cir.const #cir.int<15> : !s32i loc(#loc89)
          %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc89)
          %21 = cir.binop(xor, %16, %20) : !u32i loc(#loc89)
          %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc89)
          %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc89)
          %24 = cir.binop(xor, %21, %23) : !u32i loc(#loc89)
          %25 = cir.unary(minus, %24) : !u32i, !u32i loc(#loc89)
          %26 = cir.const #cir.int<1> : !s32i loc(#loc89)
          %27 = cir.cast(integral, %26 : !s32i), !u32i loc(#loc89)
          %28 = cir.binop(sub, %25, %27) : !u32i loc(#loc89)
          cir.yield %28 : !u32i loc(#loc89)
        }) : (!cir.bool) -> !u32i loc(#loc89)
        %11 = cir.cast(integral, %10 : !u32i), !s32i loc(#loc89)
        %12 = cir.cast(integral, %11 : !s32i), !s8i loc(#loc89)
        cir.store %12, %0 : !s8i, !cir.ptr<!s8i> loc(#loc199)
      } loc(#loc198)
    } loc(#loc197)
    cir.scope {
      %3 = cir.get_global @GLOBAL_CONST_TRUE : !cir.ptr<!s32i> loc(#loc162)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc93)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc93)
      cir.if %5 {
        cir.scope {
          %6 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc97)
          %7 = cir.cast(integral, %6 : !s8i), !s32i loc(#loc97)
          %8 = cir.const #cir.int<127> : !s32i loc(#loc98)
          %9 = cir.unary(minus, %8) : !s32i, !s32i loc(#loc98)
          %10 = cir.const #cir.int<1> : !s32i loc(#loc98)
          %11 = cir.binop(sub, %9, %10) nsw : !s32i loc(#loc98)
          %12 = cir.cmp(gt, %7, %11) : !s32i, !s32i loc(#loc203)
          %13 = cir.cast(int_to_bool, %12 : !s32i), !cir.bool loc(#loc99)
          cir.if %13 {
            %14 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc205)
            %15 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc105)
            %16 = cir.cast(integral, %15 : !s8i), !s32i loc(#loc105)
            %17 = cir.const #cir.int<1> : !s32i loc(#loc104)
            %18 = cir.binop(sub, %16, %17) nsw : !s32i loc(#loc105)
            %19 = cir.cast(integral, %18 : !s32i), !s8i loc(#loc105)
            cir.store %19, %14 : !s8i, !cir.ptr<!s8i> loc(#loc205)
            %20 = cir.load %14 : !cir.ptr<!s8i>, !s8i loc(#loc106)
            cir.call @printHexCharLine(%20) : (!s8i) -> () loc(#loc107)
          } else {
            %14 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 48>> loc(#loc108)
            %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 48>>), !cir.ptr<!s8i> loc(#loc108)
            cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc109)
          } loc(#loc204)
        } loc(#loc202)
      } loc(#loc201)
    } loc(#loc200)
    cir.return loc(#loc80)
  } loc(#loc194)
  cir.func no_proto internal private  @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc207)
    %1 = cir.const #cir.int<32> : !s32i loc(#loc114)
    %2 = cir.cast(integral, %1 : !s32i), !s8i loc(#loc114)
    cir.store %2, %0 : !s8i, !cir.ptr<!s8i> loc(#loc208)
    cir.scope {
      %3 = cir.get_global @GLOBAL_CONST_FALSE : !cir.ptr<!s32i> loc(#loc180)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc118)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc118)
      cir.if %5 {
        %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc122)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc122)
        cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc123)
      } else {
        %6 = cir.const #cir.int<2> : !s32i loc(#loc124)
        %7 = cir.unary(minus, %6) : !s32i, !s32i loc(#loc125)
        %8 = cir.cast(integral, %7 : !s32i), !s8i loc(#loc125)
        cir.store %8, %0 : !s8i, !cir.ptr<!s8i> loc(#loc211)
      } loc(#loc210)
    } loc(#loc209)
    cir.scope {
      %3 = cir.get_global @GLOBAL_CONST_TRUE : !cir.ptr<!s32i> loc(#loc162)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc129)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc129)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc215)
          %7 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc135)
          %8 = cir.cast(integral, %7 : !s8i), !s32i loc(#loc135)
          %9 = cir.const #cir.int<1> : !s32i loc(#loc134)
          %10 = cir.binop(sub, %8, %9) nsw : !s32i loc(#loc135)
          %11 = cir.cast(integral, %10 : !s32i), !s8i loc(#loc135)
          cir.store %11, %6 : !s8i, !cir.ptr<!s8i> loc(#loc215)
          %12 = cir.load %6 : !cir.ptr<!s8i>, !s8i loc(#loc136)
          cir.call @printHexCharLine(%12) : (!s8i) -> () loc(#loc137)
        } loc(#loc214)
      } loc(#loc213)
    } loc(#loc212)
    cir.return loc(#loc111)
  } loc(#loc206)
  cir.func no_proto internal private  @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc217)
    %1 = cir.const #cir.int<32> : !s32i loc(#loc142)
    %2 = cir.cast(integral, %1 : !s32i), !s8i loc(#loc142)
    cir.store %2, %0 : !s8i, !cir.ptr<!s8i> loc(#loc218)
    cir.scope {
      %3 = cir.get_global @GLOBAL_CONST_TRUE : !cir.ptr<!s32i> loc(#loc162)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc146)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc146)
      cir.if %5 {
        %6 = cir.const #cir.int<2> : !s32i loc(#loc148)
        %7 = cir.unary(minus, %6) : !s32i, !s32i loc(#loc149)
        %8 = cir.cast(integral, %7 : !s32i), !s8i loc(#loc149)
        cir.store %8, %0 : !s8i, !cir.ptr<!s8i> loc(#loc221)
      } loc(#loc220)
    } loc(#loc219)
    cir.scope {
      %3 = cir.get_global @GLOBAL_CONST_TRUE : !cir.ptr<!s32i> loc(#loc162)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc153)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc153)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc225)
          %7 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc159)
          %8 = cir.cast(integral, %7 : !s8i), !s32i loc(#loc159)
          %9 = cir.const #cir.int<1> : !s32i loc(#loc158)
          %10 = cir.binop(sub, %8, %9) nsw : !s32i loc(#loc159)
          %11 = cir.cast(integral, %10 : !s32i), !s8i loc(#loc159)
          cir.store %11, %6 : !s8i, !cir.ptr<!s8i> loc(#loc225)
          %12 = cir.load %6 : !cir.ptr<!s8i>, !s8i loc(#loc160)
          cir.call @printHexCharLine(%12) : (!s8i) -> () loc(#loc161)
        } loc(#loc224)
      } loc(#loc223)
    } loc(#loc222)
    cir.return loc(#loc139)
  } loc(#loc216)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE191_Integer_Underflow/s01/CWE191_Integer_Underflow__char_rand_sub_09.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase.h":109:1)
#loc2 = loc("../../../testcasesupport/std_testcase.h":109:18)
#loc3 = loc("/usr/include/stdlib.h":573:1)
#loc4 = loc("/usr/include/stdlib.h":573:24)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":30:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":30:35)
#loc7 = loc("CWE191_Integer_Underflow__char_rand_sub_09.c":22:1)
#loc8 = loc("CWE191_Integer_Underflow__char_rand_sub_09.c":39:1)
#loc9 = loc("CWE191_Integer_Underflow__char_rand_sub_09.c":24:5)
#loc10 = loc("CWE191_Integer_Underflow__char_rand_sub_09.c":24:10)
#loc11 = loc("CWE191_Integer_Underflow__char_rand_sub_09.c":25:12)
#loc12 = loc("CWE191_Integer_Underflow__char_rand_sub_09.c":25:5)
#loc13 = loc("CWE191_Integer_Underflow__char_rand_sub_09.c":26:5)
#loc14 = loc("CWE191_Integer_Underflow__char_rand_sub_09.c":30:5)
#loc15 = loc("CWE191_Integer_Underflow__char_rand_sub_09.c":26:8)
#loc16 = loc("CWE191_Integer_Underflow__char_rand_sub_09.c":27:5)
#loc17 = loc("CWE191_Integer_Underflow__char_rand_sub_09.c":29:22)
#loc18 = loc("CWE191_Integer_Underflow__char_rand_sub_09.c":29:9)
#loc19 = loc("CWE191_Integer_Underflow__char_rand_sub_09.c":31:5)
#loc20 = loc("CWE191_Integer_Underflow__char_rand_sub_09.c":38:5)
#loc21 = loc("CWE191_Integer_Underflow__char_rand_sub_09.c":31:8)
#loc22 = loc("CWE191_Integer_Underflow__char_rand_sub_09.c":32:5)
#loc23 = loc("CWE191_Integer_Underflow__char_rand_sub_09.c":33:9)
#loc24 = loc("CWE191_Integer_Underflow__char_rand_sub_09.c":37:9)
#loc25 = loc("CWE191_Integer_Underflow__char_rand_sub_09.c":35:13)
#loc26 = loc("CWE191_Integer_Underflow__char_rand_sub_09.c":35:34)
#loc27 = loc("CWE191_Integer_Underflow__char_rand_sub_09.c":35:27)
#loc28 = loc("CWE191_Integer_Underflow__char_rand_sub_09.c":36:30)
#loc29 = loc("CWE191_Integer_Underflow__char_rand_sub_09.c":36:13)
#loc30 = loc("CWE191_Integer_Underflow__char_rand_sub_09.c":145:1)
#loc31 = loc("CWE191_Integer_Underflow__char_rand_sub_09.c":151:1)
#loc32 = loc("CWE191_Integer_Underflow__char_rand_sub_09.c":147:5)
#loc33 = loc("CWE191_Integer_Underflow__char_rand_sub_09.c":147:14)
#loc34 = loc("CWE191_Integer_Underflow__char_rand_sub_09.c":148:5)
#loc35 = loc("CWE191_Integer_Underflow__char_rand_sub_09.c":148:14)
#loc36 = loc("CWE191_Integer_Underflow__char_rand_sub_09.c":149:5)
#loc37 = loc("CWE191_Integer_Underflow__char_rand_sub_09.c":149:14)
#loc38 = loc("CWE191_Integer_Underflow__char_rand_sub_09.c":150:5)
#loc39 = loc("CWE191_Integer_Underflow__char_rand_sub_09.c":150:14)
#loc40 = loc("../../../testcasesupport/std_testcase.h":110:1)
#loc41 = loc("../../../testcasesupport/std_testcase.h":110:18)
#loc42 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc43 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc44 = loc("CWE191_Integer_Underflow__char_rand_sub_09.c":58:19)
#loc45 = loc("CWE191_Integer_Underflow__char_rand_sub_09.c":70:23)
#loc46 = loc("CWE191_Integer_Underflow__char_rand_sub_09.c":46:1)
#loc47 = loc("CWE191_Integer_Underflow__char_rand_sub_09.c":73:1)
#loc48 = loc("CWE191_Integer_Underflow__char_rand_sub_09.c":48:5)
#loc49 = loc("CWE191_Integer_Underflow__char_rand_sub_09.c":48:10)
#loc50 = loc("CWE191_Integer_Underflow__char_rand_sub_09.c":49:12)
#loc51 = loc("CWE191_Integer_Underflow__char_rand_sub_09.c":49:5)
#loc52 = loc("CWE191_Integer_Underflow__char_rand_sub_09.c":50:5)
#loc53 = loc("CWE191_Integer_Underflow__char_rand_sub_09.c":54:5)
#loc54 = loc("CWE191_Integer_Underflow__char_rand_sub_09.c":50:8)
#loc55 = loc("CWE191_Integer_Underflow__char_rand_sub_09.c":51:5)
#loc56 = loc("CWE191_Integer_Underflow__char_rand_sub_09.c":53:22)
#loc57 = loc("CWE191_Integer_Underflow__char_rand_sub_09.c":53:9)
#loc58 = loc("CWE191_Integer_Underflow__char_rand_sub_09.c":55:5)
#loc59 = loc("CWE191_Integer_Underflow__char_rand_sub_09.c":72:5)
#loc60 = loc("CWE191_Integer_Underflow__char_rand_sub_09.c":55:8)
#loc61 = loc("CWE191_Integer_Underflow__char_rand_sub_09.c":56:5)
#loc62 = loc("CWE191_Integer_Underflow__char_rand_sub_09.c":59:5)
#loc63 = loc("CWE191_Integer_Underflow__char_rand_sub_09.c":61:5)
#loc64 = loc("CWE191_Integer_Underflow__char_rand_sub_09.c":58:9)
#loc65 = loc("CWE191_Integer_Underflow__char_rand_sub_09.c":63:9)
#loc66 = loc("CWE191_Integer_Underflow__char_rand_sub_09.c":71:9)
#loc67 = loc("CWE191_Integer_Underflow__char_rand_sub_09.c":63:13)
#loc68 = loc("CWE191_Integer_Underflow__char_rand_sub_09.c":63:20)
#loc69 = loc("CWE191_Integer_Underflow__char_rand_sub_09.c":63:18)
#loc70 = loc("CWE191_Integer_Underflow__char_rand_sub_09.c":64:9)
#loc71 = loc("CWE191_Integer_Underflow__char_rand_sub_09.c":67:9)
#loc72 = loc("CWE191_Integer_Underflow__char_rand_sub_09.c":69:9)
#loc73 = loc("CWE191_Integer_Underflow__char_rand_sub_09.c":65:13)
#loc74 = loc("CWE191_Integer_Underflow__char_rand_sub_09.c":65:34)
#loc75 = loc("CWE191_Integer_Underflow__char_rand_sub_09.c":65:27)
#loc76 = loc("CWE191_Integer_Underflow__char_rand_sub_09.c":66:30)
#loc77 = loc("CWE191_Integer_Underflow__char_rand_sub_09.c":66:13)
#loc78 = loc("CWE191_Integer_Underflow__char_rand_sub_09.c":70:13)
#loc79 = loc("CWE191_Integer_Underflow__char_rand_sub_09.c":76:1)
#loc80 = loc("CWE191_Integer_Underflow__char_rand_sub_09.c":98:1)
#loc81 = loc("CWE191_Integer_Underflow__char_rand_sub_09.c":78:5)
#loc82 = loc("CWE191_Integer_Underflow__char_rand_sub_09.c":78:10)
#loc83 = loc("CWE191_Integer_Underflow__char_rand_sub_09.c":79:12)
#loc84 = loc("CWE191_Integer_Underflow__char_rand_sub_09.c":79:5)
#loc85 = loc("CWE191_Integer_Underflow__char_rand_sub_09.c":80:5)
#loc86 = loc("CWE191_Integer_Underflow__char_rand_sub_09.c":84:5)
#loc87 = loc("CWE191_Integer_Underflow__char_rand_sub_09.c":80:8)
#loc88 = loc("CWE191_Integer_Underflow__char_rand_sub_09.c":81:5)
#loc89 = loc("CWE191_Integer_Underflow__char_rand_sub_09.c":83:22)
#loc90 = loc("CWE191_Integer_Underflow__char_rand_sub_09.c":83:9)
#loc91 = loc("CWE191_Integer_Underflow__char_rand_sub_09.c":85:5)
#loc92 = loc("CWE191_Integer_Underflow__char_rand_sub_09.c":97:5)
#loc93 = loc("CWE191_Integer_Underflow__char_rand_sub_09.c":85:8)
#loc94 = loc("CWE191_Integer_Underflow__char_rand_sub_09.c":86:5)
#loc95 = loc("CWE191_Integer_Underflow__char_rand_sub_09.c":88:9)
#loc96 = loc("CWE191_Integer_Underflow__char_rand_sub_09.c":96:9)
#loc97 = loc("CWE191_Integer_Underflow__char_rand_sub_09.c":88:13)
#loc98 = loc("CWE191_Integer_Underflow__char_rand_sub_09.c":88:20)
#loc99 = loc("CWE191_Integer_Underflow__char_rand_sub_09.c":88:18)
#loc100 = loc("CWE191_Integer_Underflow__char_rand_sub_09.c":89:9)
#loc101 = loc("CWE191_Integer_Underflow__char_rand_sub_09.c":92:9)
#loc102 = loc("CWE191_Integer_Underflow__char_rand_sub_09.c":94:9)
#loc103 = loc("CWE191_Integer_Underflow__char_rand_sub_09.c":90:13)
#loc104 = loc("CWE191_Integer_Underflow__char_rand_sub_09.c":90:34)
#loc105 = loc("CWE191_Integer_Underflow__char_rand_sub_09.c":90:27)
#loc106 = loc("CWE191_Integer_Underflow__char_rand_sub_09.c":91:30)
#loc107 = loc("CWE191_Integer_Underflow__char_rand_sub_09.c":91:13)
#loc108 = loc("CWE191_Integer_Underflow__char_rand_sub_09.c":95:23)
#loc109 = loc("CWE191_Integer_Underflow__char_rand_sub_09.c":95:13)
#loc110 = loc("CWE191_Integer_Underflow__char_rand_sub_09.c":101:1)
#loc111 = loc("CWE191_Integer_Underflow__char_rand_sub_09.c":123:1)
#loc112 = loc("CWE191_Integer_Underflow__char_rand_sub_09.c":103:5)
#loc113 = loc("CWE191_Integer_Underflow__char_rand_sub_09.c":103:10)
#loc114 = loc("CWE191_Integer_Underflow__char_rand_sub_09.c":104:12)
#loc115 = loc("CWE191_Integer_Underflow__char_rand_sub_09.c":104:5)
#loc116 = loc("CWE191_Integer_Underflow__char_rand_sub_09.c":105:5)
#loc117 = loc("CWE191_Integer_Underflow__char_rand_sub_09.c":114:5)
#loc118 = loc("CWE191_Integer_Underflow__char_rand_sub_09.c":105:8)
#loc119 = loc("CWE191_Integer_Underflow__char_rand_sub_09.c":106:5)
#loc120 = loc("CWE191_Integer_Underflow__char_rand_sub_09.c":109:5)
#loc121 = loc("CWE191_Integer_Underflow__char_rand_sub_09.c":111:5)
#loc122 = loc("CWE191_Integer_Underflow__char_rand_sub_09.c":108:19)
#loc123 = loc("CWE191_Integer_Underflow__char_rand_sub_09.c":108:9)
#loc124 = loc("CWE191_Integer_Underflow__char_rand_sub_09.c":113:17)
#loc125 = loc("CWE191_Integer_Underflow__char_rand_sub_09.c":113:16)
#loc126 = loc("CWE191_Integer_Underflow__char_rand_sub_09.c":113:9)
#loc127 = loc("CWE191_Integer_Underflow__char_rand_sub_09.c":115:5)
#loc128 = loc("CWE191_Integer_Underflow__char_rand_sub_09.c":122:5)
#loc129 = loc("CWE191_Integer_Underflow__char_rand_sub_09.c":115:8)
#loc130 = loc("CWE191_Integer_Underflow__char_rand_sub_09.c":116:5)
#loc131 = loc("CWE191_Integer_Underflow__char_rand_sub_09.c":117:9)
#loc132 = loc("CWE191_Integer_Underflow__char_rand_sub_09.c":121:9)
#loc133 = loc("CWE191_Integer_Underflow__char_rand_sub_09.c":119:13)
#loc134 = loc("CWE191_Integer_Underflow__char_rand_sub_09.c":119:34)
#loc135 = loc("CWE191_Integer_Underflow__char_rand_sub_09.c":119:27)
#loc136 = loc("CWE191_Integer_Underflow__char_rand_sub_09.c":120:30)
#loc137 = loc("CWE191_Integer_Underflow__char_rand_sub_09.c":120:13)
#loc138 = loc("CWE191_Integer_Underflow__char_rand_sub_09.c":126:1)
#loc139 = loc("CWE191_Integer_Underflow__char_rand_sub_09.c":143:1)
#loc140 = loc("CWE191_Integer_Underflow__char_rand_sub_09.c":128:5)
#loc141 = loc("CWE191_Integer_Underflow__char_rand_sub_09.c":128:10)
#loc142 = loc("CWE191_Integer_Underflow__char_rand_sub_09.c":129:12)
#loc143 = loc("CWE191_Integer_Underflow__char_rand_sub_09.c":129:5)
#loc144 = loc("CWE191_Integer_Underflow__char_rand_sub_09.c":130:5)
#loc145 = loc("CWE191_Integer_Underflow__char_rand_sub_09.c":134:5)
#loc146 = loc("CWE191_Integer_Underflow__char_rand_sub_09.c":130:8)
#loc147 = loc("CWE191_Integer_Underflow__char_rand_sub_09.c":131:5)
#loc148 = loc("CWE191_Integer_Underflow__char_rand_sub_09.c":133:17)
#loc149 = loc("CWE191_Integer_Underflow__char_rand_sub_09.c":133:16)
#loc150 = loc("CWE191_Integer_Underflow__char_rand_sub_09.c":133:9)
#loc151 = loc("CWE191_Integer_Underflow__char_rand_sub_09.c":135:5)
#loc152 = loc("CWE191_Integer_Underflow__char_rand_sub_09.c":142:5)
#loc153 = loc("CWE191_Integer_Underflow__char_rand_sub_09.c":135:8)
#loc154 = loc("CWE191_Integer_Underflow__char_rand_sub_09.c":136:5)
#loc155 = loc("CWE191_Integer_Underflow__char_rand_sub_09.c":137:9)
#loc156 = loc("CWE191_Integer_Underflow__char_rand_sub_09.c":141:9)
#loc157 = loc("CWE191_Integer_Underflow__char_rand_sub_09.c":139:13)
#loc158 = loc("CWE191_Integer_Underflow__char_rand_sub_09.c":139:34)
#loc159 = loc("CWE191_Integer_Underflow__char_rand_sub_09.c":139:27)
#loc160 = loc("CWE191_Integer_Underflow__char_rand_sub_09.c":140:30)
#loc161 = loc("CWE191_Integer_Underflow__char_rand_sub_09.c":140:13)
#loc162 = loc(fused[#loc1, #loc2])
#loc163 = loc(fused[#loc3, #loc4])
#loc164 = loc(fused[#loc5, #loc6])
#loc165 = loc(fused[#loc7, #loc8])
#loc166 = loc(fused[#loc9, #loc10])
#loc167 = loc(fused[#loc12, #loc11])
#loc168 = loc(fused[#loc13, #loc14])
#loc169 = loc(fused[#loc16, #loc14])
#loc170 = loc(fused[#loc18, #loc17])
#loc171 = loc(fused[#loc19, #loc20])
#loc172 = loc(fused[#loc22, #loc20])
#loc173 = loc(fused[#loc23, #loc24])
#loc174 = loc(fused[#loc25, #loc26])
#loc175 = loc(fused[#loc30, #loc31])
#loc176 = loc(fused[#loc32, #loc33])
#loc177 = loc(fused[#loc34, #loc35])
#loc178 = loc(fused[#loc36, #loc37])
#loc179 = loc(fused[#loc38, #loc39])
#loc180 = loc(fused[#loc40, #loc41])
#loc181 = loc(fused[#loc42, #loc43])
#loc182 = loc(fused[#loc46, #loc47])
#loc183 = loc(fused[#loc48, #loc49])
#loc184 = loc(fused[#loc51, #loc50])
#loc185 = loc(fused[#loc52, #loc53])
#loc186 = loc(fused[#loc55, #loc53])
#loc187 = loc(fused[#loc57, #loc56])
#loc188 = loc(fused[#loc58, #loc59])
#loc189 = loc(fused[#loc61, #loc62, #loc63, #loc59])
#loc190 = loc(fused[#loc65, #loc66])
#loc191 = loc(fused[#loc67, #loc68])
#loc192 = loc(fused[#loc70, #loc71, #loc72, #loc66])
#loc193 = loc(fused[#loc73, #loc74])
#loc194 = loc(fused[#loc79, #loc80])
#loc195 = loc(fused[#loc81, #loc82])
#loc196 = loc(fused[#loc84, #loc83])
#loc197 = loc(fused[#loc85, #loc86])
#loc198 = loc(fused[#loc88, #loc86])
#loc199 = loc(fused[#loc90, #loc89])
#loc200 = loc(fused[#loc91, #loc92])
#loc201 = loc(fused[#loc94, #loc92])
#loc202 = loc(fused[#loc95, #loc96])
#loc203 = loc(fused[#loc97, #loc98])
#loc204 = loc(fused[#loc100, #loc101, #loc102, #loc96])
#loc205 = loc(fused[#loc103, #loc104])
#loc206 = loc(fused[#loc110, #loc111])
#loc207 = loc(fused[#loc112, #loc113])
#loc208 = loc(fused[#loc115, #loc114])
#loc209 = loc(fused[#loc116, #loc117])
#loc210 = loc(fused[#loc119, #loc120, #loc121, #loc117])
#loc211 = loc(fused[#loc126, #loc124])
#loc212 = loc(fused[#loc127, #loc128])
#loc213 = loc(fused[#loc130, #loc128])
#loc214 = loc(fused[#loc131, #loc132])
#loc215 = loc(fused[#loc133, #loc134])
#loc216 = loc(fused[#loc138, #loc139])
#loc217 = loc(fused[#loc140, #loc141])
#loc218 = loc(fused[#loc143, #loc142])
#loc219 = loc(fused[#loc144, #loc145])
#loc220 = loc(fused[#loc147, #loc145])
#loc221 = loc(fused[#loc150, #loc148])
#loc222 = loc(fused[#loc151, #loc152])
#loc223 = loc(fused[#loc154, #loc152])
#loc224 = loc(fused[#loc155, #loc156])
#loc225 = loc(fused[#loc157, #loc158])
