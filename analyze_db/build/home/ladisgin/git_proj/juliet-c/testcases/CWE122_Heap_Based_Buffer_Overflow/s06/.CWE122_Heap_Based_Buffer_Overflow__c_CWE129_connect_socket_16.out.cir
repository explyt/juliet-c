!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc205 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":302:10)
#loc206 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":302:14)
#loc207 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":302:20)
#loc208 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":302:32)
#true = #cir.bool<true> : !cir.bool
!ty_in_addr = !cir.struct<struct "in_addr" {!u32i} #cir.record.decl.ast>
#loc544 = loc(fused[#loc205, #loc206])
#loc545 = loc(fused[#loc207, #loc208])
!ty_sockaddr = !cir.struct<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.struct<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i32 = dense<32> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc465)
  cir.func private @inet_addr(!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc466)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"127.0.0.1\00" : !cir.array<!s8i x 10>> : !cir.array<!s8i x 10> {alignment = 1 : i64} loc(#loc5)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc467)
  cir.func private @connect(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc468)
  cir.func private @recv(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc469)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc470)
  cir.func private @close(!s32i) -> !s32i loc(#loc471)
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc472)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc473)
  cir.func private @printIntLine(!s32i) loc(#loc474)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc475)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"ERROR: Array index is negative.\00" : !cir.array<!s8i x 32>> : !cir.array<!s8i x 32> {alignment = 1 : i64} loc(#loc24)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc476)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc478)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc31)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc32)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc479)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc36)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc36)
        cir.condition(%4) loc(#loc36)
      } do {
        cir.scope {
          %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc482)
          %4 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc483)
          %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["connectSocket", init] {alignment = 4 : i64} loc(#loc484)
          %6 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc485)
          %7 = cir.const #cir.int<1> : !s32i loc(#loc44)
          %8 = cir.unary(minus, %7) : !s32i, !s32i loc(#loc44)
          cir.store %8, %5 : !s32i, !cir.ptr<!s32i> loc(#loc484)
          cir.scope {
            cir.do {
              %9 = cir.const #cir.int<2> : !s32i loc(#loc49)
              %10 = cir.const #cir.int<1> : !s32i loc(#loc50)
              %11 = cir.const #cir.int<6> : !s32i loc(#loc51)
              %12 = cir.call @socket(%9, %10, %11) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc52)
              cir.store %12, %5 : !s32i, !cir.ptr<!s32i> loc(#loc487)
              cir.scope {
                %51 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc57)
                %52 = cir.const #cir.int<1> : !s32i loc(#loc58)
                %53 = cir.unary(minus, %52) : !s32i, !s32i loc(#loc58)
                %54 = cir.cmp(eq, %51, %53) : !s32i, !cir.bool loc(#loc489)
                cir.if %54 {
                  cir.break loc(#loc60)
                } loc(#loc490)
              } loc(#loc488)
              %13 = cir.cast(bitcast, %4 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc491)
              %14 = cir.const #cir.int<0> : !s32i loc(#loc63)
              %15 = cir.const #cir.int<16> : !u64i loc(#loc492)
              cir.libc.memset %15 bytes from %13 set to %14 : !cir.ptr<!void>, !s32i, !u64i loc(#loc493)
              %16 = cir.const #cir.int<2> : !s32i loc(#loc68)
              %17 = cir.cast(integral, %16 : !s32i), !u16i loc(#loc68)
              %18 = cir.get_member %4[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc69)
              cir.store %17, %18 : !u16i, !cir.ptr<!u16i> loc(#loc494)
              %19 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 10>> loc(#loc5)
              %20 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 10>>), !cir.ptr<!s8i> loc(#loc5)
              %21 = cir.call @inet_addr(%20) : (!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc71)
              %22 = cir.get_member %4[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc72)
              %23 = cir.get_member %22[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc73)
              cir.store %21, %23 : !u32i, !cir.ptr<!u32i> loc(#loc495)
              %24 = cir.const #cir.int<27015> : !s32i loc(#loc76)
              %25 = cir.cast(integral, %24 : !s32i), !u16i loc(#loc76)
              %26 = cir.call @htons(%25) : (!u16i) -> !u16i extra(#fn_attr) loc(#loc77)
              %27 = cir.get_member %4[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc78)
              cir.store %26, %27 : !u16i, !cir.ptr<!u16i> loc(#loc496)
              cir.scope {
                %51 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc83)
                %52 = cir.cast(bitcast, %4 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc498)
                %53 = cir.const #cir.int<16> : !u64i loc(#loc499)
                %54 = cir.cast(integral, %53 : !u64i), !u32i loc(#loc499)
                %55 = cir.call @connect(%51, %52, %54) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc88)
                %56 = cir.const #cir.int<1> : !s32i loc(#loc89)
                %57 = cir.unary(minus, %56) : !s32i, !s32i loc(#loc89)
                %58 = cir.cmp(eq, %55, %57) : !s32i, !cir.bool loc(#loc500)
                cir.if %58 {
                  cir.break loc(#loc91)
                } loc(#loc501)
              } loc(#loc497)
              %28 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc92)
              %29 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc93)
              %30 = cir.cast(bitcast, %29 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc93)
              %31 = cir.const #cir.int<3> : !s32i loc(#loc94)
              %32 = cir.cast(integral, %31 : !s32i), !u64i loc(#loc94)
              %33 = cir.const #cir.int<4> : !u64i loc(#loc94)
              %34 = cir.binop(mul, %32, %33) : !u64i loc(#loc94)
              %35 = cir.const #cir.int<2> : !s32i loc(#loc94)
              %36 = cir.cast(integral, %35 : !s32i), !u64i loc(#loc94)
              %37 = cir.binop(add, %34, %36) : !u64i loc(#loc94)
              %38 = cir.const #cir.int<1> : !s32i loc(#loc95)
              %39 = cir.cast(integral, %38 : !s32i), !u64i loc(#loc95)
              %40 = cir.binop(sub, %37, %39) : !u64i loc(#loc502)
              %41 = cir.const #cir.int<0> : !s32i loc(#loc96)
              %42 = cir.call @recv(%28, %30, %40, %41) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc97)
              %43 = cir.cast(integral, %42 : !s64i), !s32i loc(#loc97)
              cir.store %43, %3 : !s32i, !cir.ptr<!s32i> loc(#loc503)
              cir.scope {
                %51 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc102)
                %52 = cir.const #cir.int<1> : !s32i loc(#loc103)
                %53 = cir.unary(minus, %52) : !s32i, !s32i loc(#loc103)
                %54 = cir.cmp(eq, %51, %53) : !s32i, !cir.bool loc(#loc505)
                %55 = cir.ternary(%54, true {
                  %56 = cir.const #true loc(#loc104)
                  cir.yield %56 : !cir.bool loc(#loc104)
                }, false {
                  %56 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc105)
                  %57 = cir.const #cir.int<0> : !s32i loc(#loc106)
                  %58 = cir.cmp(eq, %56, %57) : !s32i, !cir.bool loc(#loc506)
                  %59 = cir.ternary(%58, true {
                    %60 = cir.const #true loc(#loc104)
                    cir.yield %60 : !cir.bool loc(#loc104)
                  }, false {
                    %60 = cir.const #false loc(#loc104)
                    cir.yield %60 : !cir.bool loc(#loc104)
                  }) : (!cir.bool) -> !cir.bool loc(#loc104)
                  cir.yield %59 : !cir.bool loc(#loc104)
                }) : (!cir.bool) -> !cir.bool loc(#loc104)
                cir.if %55 {
                  cir.break loc(#loc108)
                } loc(#loc507)
              } loc(#loc504)
              %44 = cir.const #cir.int<0> : !s32i loc(#loc109)
              %45 = cir.cast(integral, %44 : !s32i), !s8i loc(#loc109)
              %46 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc110)
              %47 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc111)
              %48 = cir.ptr_stride(%47 : !cir.ptr<!s8i>, %46 : !s32i), !cir.ptr<!s8i> loc(#loc111)
              cir.store %45, %48 : !s8i, !cir.ptr<!s8i> loc(#loc508)
              %49 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc112)
              %50 = cir.call @atoi(%49) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc113)
              cir.store %50, %0 : !s32i, !cir.ptr<!s32i> loc(#loc509)
              cir.yield loc(#loc48)
            } while {
              %9 = cir.const #cir.int<0> : !s32i loc(#loc116)
              %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc116)
              cir.condition(%10) loc(#loc116)
            } loc(#loc486)
          } loc(#loc486)
          cir.scope {
            %9 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc119)
            %10 = cir.const #cir.int<1> : !s32i loc(#loc120)
            %11 = cir.unary(minus, %10) : !s32i, !s32i loc(#loc120)
            %12 = cir.cmp(ne, %9, %11) : !s32i, !cir.bool loc(#loc511)
            cir.if %12 {
              %13 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc122)
              %14 = cir.call @close(%13) : (!s32i) -> !s32i loc(#loc123)
            } loc(#loc512)
          } loc(#loc510)
        } loc(#loc481)
        cir.break loc(#loc124)
      } loc(#loc480)
    } loc(#loc480)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc127)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc127)
        cir.condition(%4) loc(#loc127)
      } do {
        cir.scope {
          %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc515)
          %4 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc516)
          %5 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc134)
          %6 = cir.const #cir.int<10> : !s32i loc(#loc135)
          %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc135)
          %8 = cir.const #cir.int<4> : !u64i loc(#loc517)
          %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc518)
          %10 = cir.call @malloc(%9) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc134)
          %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc519)
          cir.store %11, %4 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc516)
          cir.scope {
            %15 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc140)
            %16 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc141)
            %17 = cir.cast(bitcast, %16 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc141)
            %18 = cir.cmp(eq, %15, %17) : !cir.ptr<!s32i>, !cir.bool loc(#loc521)
            cir.if %18 {
              %19 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc143)
              %20 = cir.const #cir.int<1> : !s32i loc(#loc144)
              %21 = cir.unary(minus, %20) : !s32i, !s32i loc(#loc145)
              cir.call @exit(%21) : (!s32i) -> () extra(#fn_attr) loc(#loc143)
            } loc(#loc522)
          } loc(#loc520)
          cir.scope {
            %15 = cir.const #cir.int<0> : !s32i loc(#loc148)
            cir.store %15, %3 : !s32i, !cir.ptr<!s32i> loc(#loc524)
            cir.for : cond {
              %16 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc150)
              %17 = cir.const #cir.int<10> : !s32i loc(#loc151)
              %18 = cir.cmp(lt, %16, %17) : !s32i, !cir.bool loc(#loc525)
              cir.condition(%18) loc(#loc152)
            } body {
              cir.scope {
                %16 = cir.const #cir.int<0> : !s32i loc(#loc154)
                %17 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc155)
                %18 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc156)
                %19 = cir.ptr_stride(%17 : !cir.ptr<!s32i>, %18 : !s32i), !cir.ptr<!s32i> loc(#loc157)
                cir.store %16, %19 : !s32i, !cir.ptr<!s32i> loc(#loc527)
              } loc(#loc526)
              cir.yield loc(#loc147)
            } step {
              %16 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc158)
              %17 = cir.unary(inc, %16) : !s32i, !s32i loc(#loc159)
              cir.store %17, %3 : !s32i, !cir.ptr<!s32i> loc(#loc528)
              cir.yield loc(#loc523)
            } loc(#loc523)
          } loc(#loc523)
          cir.scope {
            %15 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc162)
            %16 = cir.const #cir.int<0> : !s32i loc(#loc163)
            %17 = cir.cmp(ge, %15, %16) : !s32i, !cir.bool loc(#loc530)
            cir.if %17 {
              %18 = cir.const #cir.int<1> : !s32i loc(#loc167)
              %19 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc168)
              %20 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc169)
              %21 = cir.ptr_stride(%19 : !cir.ptr<!s32i>, %20 : !s32i), !cir.ptr<!s32i> loc(#loc170)
              cir.store %18, %21 : !s32i, !cir.ptr<!s32i> loc(#loc532)
              cir.scope {
                %22 = cir.const #cir.int<0> : !s32i loc(#loc173)
                cir.store %22, %3 : !s32i, !cir.ptr<!s32i> loc(#loc534)
                cir.for : cond {
                  %23 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc175)
                  %24 = cir.const #cir.int<10> : !s32i loc(#loc176)
                  %25 = cir.cmp(lt, %23, %24) : !s32i, !cir.bool loc(#loc535)
                  cir.condition(%25) loc(#loc177)
                } body {
                  cir.scope {
                    %23 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc179)
                    %24 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc180)
                    %25 = cir.ptr_stride(%23 : !cir.ptr<!s32i>, %24 : !s32i), !cir.ptr<!s32i> loc(#loc181)
                    %26 = cir.load %25 : !cir.ptr<!s32i>, !s32i loc(#loc179)
                    cir.call @printIntLine(%26) : (!s32i) -> () loc(#loc182)
                  } loc(#loc536)
                  cir.yield loc(#loc172)
                } step {
                  %23 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc183)
                  %24 = cir.unary(inc, %23) : !s32i, !s32i loc(#loc184)
                  cir.store %24, %3 : !s32i, !cir.ptr<!s32i> loc(#loc537)
                  cir.yield loc(#loc533)
                } loc(#loc533)
              } loc(#loc533)
            } else {
              %18 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc24)
              %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc24)
              cir.call @printLine(%19) : (!cir.ptr<!s8i>) -> () loc(#loc185)
            } loc(#loc531)
          } loc(#loc529)
          %12 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc186)
          %13 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc187)
          %14 = cir.cast(bitcast, %13 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc187)
          cir.call @free(%14) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc186)
        } loc(#loc514)
        cir.break loc(#loc188)
      } loc(#loc513)
    } loc(#loc513)
    cir.return loc(#loc28)
  } loc(#loc477)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc539)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc191)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc540)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc193)
    cir.return loc(#loc190)
  } loc(#loc538)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc541)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc542)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc199)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc200)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc201)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc202)
  cir.func @main(%arg0: !s32i loc(fused[#loc205, #loc206]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc207, #loc208])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc544)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc545)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc204)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc209)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc209)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc210)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc211)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc211)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc212)
    %6 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc199)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc199)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc213)
    %8 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16_good : !cir.ptr<!cir.func<!void ()>> loc(#loc546)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16_good() : () -> () loc(#loc214)
    %9 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc200)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc200)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc216)
    %11 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc201)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc201)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc217)
    %13 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc547)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16_bad() : () -> () loc(#loc218)
    %14 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc202)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc202)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc220)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc221)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc548)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc548)
    cir.return %17 : !s32i loc(#loc548)
  } loc(#loc543)
  cir.global "private" constant cir_private dsolocal @".str.6" = #cir.const_array<"ERROR: Array index is out-of-bounds\00" : !cir.array<!s8i x 36>> : !cir.array<!s8i x 36> {alignment = 1 : i64} loc(#loc223)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc550)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc228)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc229)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc551)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc233)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc233)
        cir.condition(%4) loc(#loc233)
      } do {
        cir.scope {
          %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc554)
          %4 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc555)
          %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["connectSocket", init] {alignment = 4 : i64} loc(#loc556)
          %6 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc557)
          %7 = cir.const #cir.int<1> : !s32i loc(#loc241)
          %8 = cir.unary(minus, %7) : !s32i, !s32i loc(#loc241)
          cir.store %8, %5 : !s32i, !cir.ptr<!s32i> loc(#loc556)
          cir.scope {
            cir.do {
              %9 = cir.const #cir.int<2> : !s32i loc(#loc246)
              %10 = cir.const #cir.int<1> : !s32i loc(#loc247)
              %11 = cir.const #cir.int<6> : !s32i loc(#loc248)
              %12 = cir.call @socket(%9, %10, %11) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc249)
              cir.store %12, %5 : !s32i, !cir.ptr<!s32i> loc(#loc559)
              cir.scope {
                %51 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc254)
                %52 = cir.const #cir.int<1> : !s32i loc(#loc255)
                %53 = cir.unary(minus, %52) : !s32i, !s32i loc(#loc255)
                %54 = cir.cmp(eq, %51, %53) : !s32i, !cir.bool loc(#loc561)
                cir.if %54 {
                  cir.break loc(#loc257)
                } loc(#loc562)
              } loc(#loc560)
              %13 = cir.cast(bitcast, %4 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc563)
              %14 = cir.const #cir.int<0> : !s32i loc(#loc260)
              %15 = cir.const #cir.int<16> : !u64i loc(#loc564)
              cir.libc.memset %15 bytes from %13 set to %14 : !cir.ptr<!void>, !s32i, !u64i loc(#loc565)
              %16 = cir.const #cir.int<2> : !s32i loc(#loc265)
              %17 = cir.cast(integral, %16 : !s32i), !u16i loc(#loc265)
              %18 = cir.get_member %4[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc69)
              cir.store %17, %18 : !u16i, !cir.ptr<!u16i> loc(#loc566)
              %19 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 10>> loc(#loc267)
              %20 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 10>>), !cir.ptr<!s8i> loc(#loc267)
              %21 = cir.call @inet_addr(%20) : (!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc268)
              %22 = cir.get_member %4[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc72)
              %23 = cir.get_member %22[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc73)
              cir.store %21, %23 : !u32i, !cir.ptr<!u32i> loc(#loc567)
              %24 = cir.const #cir.int<27015> : !s32i loc(#loc271)
              %25 = cir.cast(integral, %24 : !s32i), !u16i loc(#loc271)
              %26 = cir.call @htons(%25) : (!u16i) -> !u16i extra(#fn_attr) loc(#loc272)
              %27 = cir.get_member %4[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc78)
              cir.store %26, %27 : !u16i, !cir.ptr<!u16i> loc(#loc568)
              cir.scope {
                %51 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc277)
                %52 = cir.cast(bitcast, %4 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc570)
                %53 = cir.const #cir.int<16> : !u64i loc(#loc571)
                %54 = cir.cast(integral, %53 : !u64i), !u32i loc(#loc571)
                %55 = cir.call @connect(%51, %52, %54) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc282)
                %56 = cir.const #cir.int<1> : !s32i loc(#loc283)
                %57 = cir.unary(minus, %56) : !s32i, !s32i loc(#loc283)
                %58 = cir.cmp(eq, %55, %57) : !s32i, !cir.bool loc(#loc572)
                cir.if %58 {
                  cir.break loc(#loc285)
                } loc(#loc573)
              } loc(#loc569)
              %28 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc286)
              %29 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc287)
              %30 = cir.cast(bitcast, %29 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc287)
              %31 = cir.const #cir.int<3> : !s32i loc(#loc288)
              %32 = cir.cast(integral, %31 : !s32i), !u64i loc(#loc288)
              %33 = cir.const #cir.int<4> : !u64i loc(#loc288)
              %34 = cir.binop(mul, %32, %33) : !u64i loc(#loc288)
              %35 = cir.const #cir.int<2> : !s32i loc(#loc288)
              %36 = cir.cast(integral, %35 : !s32i), !u64i loc(#loc288)
              %37 = cir.binop(add, %34, %36) : !u64i loc(#loc288)
              %38 = cir.const #cir.int<1> : !s32i loc(#loc289)
              %39 = cir.cast(integral, %38 : !s32i), !u64i loc(#loc289)
              %40 = cir.binop(sub, %37, %39) : !u64i loc(#loc574)
              %41 = cir.const #cir.int<0> : !s32i loc(#loc290)
              %42 = cir.call @recv(%28, %30, %40, %41) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc291)
              %43 = cir.cast(integral, %42 : !s64i), !s32i loc(#loc291)
              cir.store %43, %3 : !s32i, !cir.ptr<!s32i> loc(#loc575)
              cir.scope {
                %51 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc296)
                %52 = cir.const #cir.int<1> : !s32i loc(#loc297)
                %53 = cir.unary(minus, %52) : !s32i, !s32i loc(#loc297)
                %54 = cir.cmp(eq, %51, %53) : !s32i, !cir.bool loc(#loc577)
                %55 = cir.ternary(%54, true {
                  %56 = cir.const #true loc(#loc298)
                  cir.yield %56 : !cir.bool loc(#loc298)
                }, false {
                  %56 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc299)
                  %57 = cir.const #cir.int<0> : !s32i loc(#loc300)
                  %58 = cir.cmp(eq, %56, %57) : !s32i, !cir.bool loc(#loc578)
                  %59 = cir.ternary(%58, true {
                    %60 = cir.const #true loc(#loc298)
                    cir.yield %60 : !cir.bool loc(#loc298)
                  }, false {
                    %60 = cir.const #false loc(#loc298)
                    cir.yield %60 : !cir.bool loc(#loc298)
                  }) : (!cir.bool) -> !cir.bool loc(#loc298)
                  cir.yield %59 : !cir.bool loc(#loc298)
                }) : (!cir.bool) -> !cir.bool loc(#loc298)
                cir.if %55 {
                  cir.break loc(#loc302)
                } loc(#loc579)
              } loc(#loc576)
              %44 = cir.const #cir.int<0> : !s32i loc(#loc303)
              %45 = cir.cast(integral, %44 : !s32i), !s8i loc(#loc303)
              %46 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc304)
              %47 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc305)
              %48 = cir.ptr_stride(%47 : !cir.ptr<!s8i>, %46 : !s32i), !cir.ptr<!s8i> loc(#loc305)
              cir.store %45, %48 : !s8i, !cir.ptr<!s8i> loc(#loc580)
              %49 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc306)
              %50 = cir.call @atoi(%49) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc307)
              cir.store %50, %0 : !s32i, !cir.ptr<!s32i> loc(#loc581)
              cir.yield loc(#loc245)
            } while {
              %9 = cir.const #cir.int<0> : !s32i loc(#loc310)
              %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc310)
              cir.condition(%10) loc(#loc310)
            } loc(#loc558)
          } loc(#loc558)
          cir.scope {
            %9 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc313)
            %10 = cir.const #cir.int<1> : !s32i loc(#loc314)
            %11 = cir.unary(minus, %10) : !s32i, !s32i loc(#loc314)
            %12 = cir.cmp(ne, %9, %11) : !s32i, !cir.bool loc(#loc583)
            cir.if %12 {
              %13 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc316)
              %14 = cir.call @close(%13) : (!s32i) -> !s32i loc(#loc317)
            } loc(#loc584)
          } loc(#loc582)
        } loc(#loc553)
        cir.break loc(#loc318)
      } loc(#loc552)
    } loc(#loc552)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc321)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc321)
        cir.condition(%4) loc(#loc321)
      } do {
        cir.scope {
          %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc587)
          %4 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc588)
          %5 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc328)
          %6 = cir.const #cir.int<10> : !s32i loc(#loc329)
          %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc329)
          %8 = cir.const #cir.int<4> : !u64i loc(#loc589)
          %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc590)
          %10 = cir.call @malloc(%9) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc328)
          %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc591)
          cir.store %11, %4 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc588)
          cir.scope {
            %15 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc334)
            %16 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc335)
            %17 = cir.cast(bitcast, %16 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc335)
            %18 = cir.cmp(eq, %15, %17) : !cir.ptr<!s32i>, !cir.bool loc(#loc593)
            cir.if %18 {
              %19 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc337)
              %20 = cir.const #cir.int<1> : !s32i loc(#loc338)
              %21 = cir.unary(minus, %20) : !s32i, !s32i loc(#loc339)
              cir.call @exit(%21) : (!s32i) -> () extra(#fn_attr) loc(#loc337)
            } loc(#loc594)
          } loc(#loc592)
          cir.scope {
            %15 = cir.const #cir.int<0> : !s32i loc(#loc342)
            cir.store %15, %3 : !s32i, !cir.ptr<!s32i> loc(#loc596)
            cir.for : cond {
              %16 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc344)
              %17 = cir.const #cir.int<10> : !s32i loc(#loc345)
              %18 = cir.cmp(lt, %16, %17) : !s32i, !cir.bool loc(#loc597)
              cir.condition(%18) loc(#loc346)
            } body {
              cir.scope {
                %16 = cir.const #cir.int<0> : !s32i loc(#loc348)
                %17 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc349)
                %18 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc350)
                %19 = cir.ptr_stride(%17 : !cir.ptr<!s32i>, %18 : !s32i), !cir.ptr<!s32i> loc(#loc351)
                cir.store %16, %19 : !s32i, !cir.ptr<!s32i> loc(#loc599)
              } loc(#loc598)
              cir.yield loc(#loc341)
            } step {
              %16 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc352)
              %17 = cir.unary(inc, %16) : !s32i, !s32i loc(#loc353)
              cir.store %17, %3 : !s32i, !cir.ptr<!s32i> loc(#loc600)
              cir.yield loc(#loc595)
            } loc(#loc595)
          } loc(#loc595)
          cir.scope {
            %15 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc356)
            %16 = cir.const #cir.int<0> : !s32i loc(#loc357)
            %17 = cir.cmp(ge, %15, %16) : !s32i, !cir.bool loc(#loc602)
            %18 = cir.ternary(%17, true {
              %19 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc359)
              %20 = cir.const #cir.int<10> : !s32i loc(#loc360)
              %21 = cir.cmp(lt, %19, %20) : !s32i, !cir.bool loc(#loc603)
              %22 = cir.ternary(%21, true {
                %23 = cir.const #true loc(#loc358)
                cir.yield %23 : !cir.bool loc(#loc358)
              }, false {
                %23 = cir.const #false loc(#loc358)
                cir.yield %23 : !cir.bool loc(#loc358)
              }) : (!cir.bool) -> !cir.bool loc(#loc358)
              cir.yield %22 : !cir.bool loc(#loc358)
            }, false {
              %19 = cir.const #false loc(#loc358)
              cir.yield %19 : !cir.bool loc(#loc358)
            }) : (!cir.bool) -> !cir.bool loc(#loc358)
            cir.if %18 {
              %19 = cir.const #cir.int<1> : !s32i loc(#loc365)
              %20 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc366)
              %21 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc367)
              %22 = cir.ptr_stride(%20 : !cir.ptr<!s32i>, %21 : !s32i), !cir.ptr<!s32i> loc(#loc368)
              cir.store %19, %22 : !s32i, !cir.ptr<!s32i> loc(#loc605)
              cir.scope {
                %23 = cir.const #cir.int<0> : !s32i loc(#loc371)
                cir.store %23, %3 : !s32i, !cir.ptr<!s32i> loc(#loc607)
                cir.for : cond {
                  %24 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc373)
                  %25 = cir.const #cir.int<10> : !s32i loc(#loc374)
                  %26 = cir.cmp(lt, %24, %25) : !s32i, !cir.bool loc(#loc608)
                  cir.condition(%26) loc(#loc375)
                } body {
                  cir.scope {
                    %24 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc377)
                    %25 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc378)
                    %26 = cir.ptr_stride(%24 : !cir.ptr<!s32i>, %25 : !s32i), !cir.ptr<!s32i> loc(#loc379)
                    %27 = cir.load %26 : !cir.ptr<!s32i>, !s32i loc(#loc377)
                    cir.call @printIntLine(%27) : (!s32i) -> () loc(#loc380)
                  } loc(#loc609)
                  cir.yield loc(#loc370)
                } step {
                  %24 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc381)
                  %25 = cir.unary(inc, %24) : !s32i, !s32i loc(#loc382)
                  cir.store %25, %3 : !s32i, !cir.ptr<!s32i> loc(#loc610)
                  cir.yield loc(#loc606)
                } loc(#loc606)
              } loc(#loc606)
            } else {
              %19 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc223)
              %20 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc223)
              cir.call @printLine(%20) : (!cir.ptr<!s8i>) -> () loc(#loc383)
            } loc(#loc604)
          } loc(#loc601)
          %12 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc384)
          %13 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc385)
          %14 = cir.cast(bitcast, %13 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc385)
          cir.call @free(%14) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc384)
        } loc(#loc586)
        cir.break loc(#loc386)
      } loc(#loc585)
    } loc(#loc585)
    cir.return loc(#loc225)
  } loc(#loc549)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc612)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc391)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc392)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc613)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc396)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc396)
        cir.condition(%4) loc(#loc396)
      } do {
        %3 = cir.const #cir.int<7> : !s32i loc(#loc397)
        cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc615)
        cir.break loc(#loc399)
      } loc(#loc614)
    } loc(#loc614)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc402)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc402)
        cir.condition(%4) loc(#loc402)
      } do {
        cir.scope {
          %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc618)
          %4 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc619)
          %5 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc409)
          %6 = cir.const #cir.int<10> : !s32i loc(#loc410)
          %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc410)
          %8 = cir.const #cir.int<4> : !u64i loc(#loc620)
          %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc621)
          %10 = cir.call @malloc(%9) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc409)
          %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc622)
          cir.store %11, %4 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc619)
          cir.scope {
            %15 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc415)
            %16 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc416)
            %17 = cir.cast(bitcast, %16 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc416)
            %18 = cir.cmp(eq, %15, %17) : !cir.ptr<!s32i>, !cir.bool loc(#loc624)
            cir.if %18 {
              %19 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc418)
              %20 = cir.const #cir.int<1> : !s32i loc(#loc419)
              %21 = cir.unary(minus, %20) : !s32i, !s32i loc(#loc420)
              cir.call @exit(%21) : (!s32i) -> () extra(#fn_attr) loc(#loc418)
            } loc(#loc625)
          } loc(#loc623)
          cir.scope {
            %15 = cir.const #cir.int<0> : !s32i loc(#loc423)
            cir.store %15, %3 : !s32i, !cir.ptr<!s32i> loc(#loc627)
            cir.for : cond {
              %16 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc425)
              %17 = cir.const #cir.int<10> : !s32i loc(#loc426)
              %18 = cir.cmp(lt, %16, %17) : !s32i, !cir.bool loc(#loc628)
              cir.condition(%18) loc(#loc427)
            } body {
              cir.scope {
                %16 = cir.const #cir.int<0> : !s32i loc(#loc429)
                %17 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc430)
                %18 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc431)
                %19 = cir.ptr_stride(%17 : !cir.ptr<!s32i>, %18 : !s32i), !cir.ptr<!s32i> loc(#loc432)
                cir.store %16, %19 : !s32i, !cir.ptr<!s32i> loc(#loc630)
              } loc(#loc629)
              cir.yield loc(#loc422)
            } step {
              %16 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc433)
              %17 = cir.unary(inc, %16) : !s32i, !s32i loc(#loc434)
              cir.store %17, %3 : !s32i, !cir.ptr<!s32i> loc(#loc631)
              cir.yield loc(#loc626)
            } loc(#loc626)
          } loc(#loc626)
          cir.scope {
            %15 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc437)
            %16 = cir.const #cir.int<0> : !s32i loc(#loc438)
            %17 = cir.cmp(ge, %15, %16) : !s32i, !cir.bool loc(#loc633)
            cir.if %17 {
              %18 = cir.const #cir.int<1> : !s32i loc(#loc442)
              %19 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc443)
              %20 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc444)
              %21 = cir.ptr_stride(%19 : !cir.ptr<!s32i>, %20 : !s32i), !cir.ptr<!s32i> loc(#loc445)
              cir.store %18, %21 : !s32i, !cir.ptr<!s32i> loc(#loc635)
              cir.scope {
                %22 = cir.const #cir.int<0> : !s32i loc(#loc448)
                cir.store %22, %3 : !s32i, !cir.ptr<!s32i> loc(#loc637)
                cir.for : cond {
                  %23 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc450)
                  %24 = cir.const #cir.int<10> : !s32i loc(#loc451)
                  %25 = cir.cmp(lt, %23, %24) : !s32i, !cir.bool loc(#loc638)
                  cir.condition(%25) loc(#loc452)
                } body {
                  cir.scope {
                    %23 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc454)
                    %24 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc455)
                    %25 = cir.ptr_stride(%23 : !cir.ptr<!s32i>, %24 : !s32i), !cir.ptr<!s32i> loc(#loc456)
                    %26 = cir.load %25 : !cir.ptr<!s32i>, !s32i loc(#loc454)
                    cir.call @printIntLine(%26) : (!s32i) -> () loc(#loc457)
                  } loc(#loc639)
                  cir.yield loc(#loc447)
                } step {
                  %23 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc458)
                  %24 = cir.unary(inc, %23) : !s32i, !s32i loc(#loc459)
                  cir.store %24, %3 : !s32i, !cir.ptr<!s32i> loc(#loc640)
                  cir.yield loc(#loc636)
                } loc(#loc636)
              } loc(#loc636)
            } else {
              %18 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc460)
              %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc460)
              cir.call @printLine(%19) : (!cir.ptr<!s8i>) -> () loc(#loc461)
            } loc(#loc634)
          } loc(#loc632)
          %12 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc462)
          %13 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc463)
          %14 = cir.cast(bitcast, %13 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc463)
          cir.call @free(%14) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc462)
        } loc(#loc617)
        cir.break loc(#loc464)
      } loc(#loc616)
    } loc(#loc616)
    cir.return loc(#loc388)
  } loc(#loc611)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":0:0)
#loc1 = loc("/usr/include/sys/socket.h":102:1)
#loc2 = loc("/usr/include/sys/socket.h":102:62)
#loc3 = loc("/usr/include/arpa/inet.h":34:1)
#loc4 = loc("/usr/include/arpa/inet.h":34:47)
#loc5 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":77:53)
#loc6 = loc("/usr/include/netinet/in.h":404:1)
#loc7 = loc("/usr/include/netinet/in.h":405:40)
#loc8 = loc("/usr/include/sys/socket.h":126:1)
#loc9 = loc("/usr/include/sys/socket.h":126:75)
#loc10 = loc("/usr/include/sys/socket.h":145:1)
#loc11 = loc("/usr/include/sys/socket.h":145:68)
#loc12 = loc("/usr/include/stdlib.h":105:1)
#loc13 = loc("/usr/include/stdlib.h":106:33)
#loc14 = loc("/usr/include/unistd.h":358:1)
#loc15 = loc("/usr/include/unistd.h":358:27)
#loc16 = loc("/usr/include/stdlib.h":672:1)
#loc17 = loc("/usr/include/stdlib.h":672:45)
#loc18 = loc("/usr/include/stdlib.h":756:1)
#loc19 = loc("/usr/include/stdlib.h":756:70)
#loc20 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc21 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc22 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc23 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":133:27)
#loc25 = loc("/usr/include/stdlib.h":687:1)
#loc26 = loc("/usr/include/stdlib.h":687:32)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":44:1)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":139:1)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":46:5)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":46:9)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":48:13)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":48:12)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":48:5)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":49:5)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":108:5)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":49:11)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":51:9)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":106:9)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":56:13)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":56:17)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":57:13)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":57:32)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":58:13)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":58:36)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":59:13)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":59:45)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":60:13)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":95:21)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":70:40)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":70:49)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":70:62)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":70:33)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":70:17)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":70:73)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":71:17)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":74:17)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":71:21)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":71:38)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":72:17)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":73:21)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":75:24)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":75:25)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":75:34)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":75:37)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":75:51)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":75:17)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":75:52)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":76:38)
#loc69 = loc("/usr/include/netinet/in.h":249:5)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":76:17)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":77:43)
#loc72 = loc("/usr/include/netinet/in.h":251:20)
#loc73 = loc("/usr/include/netinet/in.h":33:15)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":77:17)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":77:63)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":78:42)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":78:36)
#loc78 = loc("/usr/include/netinet/in.h":250:15)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":78:17)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":78:50)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":79:17)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":82:17)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":79:29)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":79:62)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":79:63)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":79:72)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":79:86)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":79:21)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":79:92)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":80:17)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":81:21)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":85:35)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":85:50)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":85:63)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":85:81)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":85:84)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":85:30)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":85:17)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":85:85)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":86:17)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":89:17)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":86:21)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":86:35)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":86:48)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":86:51)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":86:65)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":87:17)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":88:21)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":91:43)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":91:29)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":91:17)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":93:29)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":93:24)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":93:17)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":93:40)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":95:20)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":96:13)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":99:13)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":96:17)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":96:34)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":97:13)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":98:30)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":98:17)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":107:9)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":109:5)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":138:5)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":109:11)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":111:9)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":136:9)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":112:13)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":112:17)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":113:13)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":113:58)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":113:35)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":113:42)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":113:47)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":113:57)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":114:13)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":114:43)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":114:17)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":114:27)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":114:33)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":114:34)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":114:40)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":114:39)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":116:13)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":119:13)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":116:22)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":116:18)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":116:25)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":116:29)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":116:27)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":117:13)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":118:29)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":118:17)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":118:24)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":118:25)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":116:34)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":116:33)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":122:13)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":134:13)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":122:17)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":122:25)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":123:13)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":130:13)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":132:13)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":124:32)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":124:17)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":124:24)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":124:28)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":126:17)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":129:17)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":126:25)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":126:21)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":126:28)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":126:32)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":126:30)
#loc178 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":127:17)
#loc179 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":128:34)
#loc180 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":128:41)
#loc181 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":128:42)
#loc182 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":128:21)
#loc183 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":126:37)
#loc184 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":126:36)
#loc185 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":133:17)
#loc186 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":135:13)
#loc187 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":135:18)
#loc188 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":137:9)
#loc189 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":287:1)
#loc190 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":291:1)
#loc191 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":289:5)
#loc192 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":289:13)
#loc193 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":290:5)
#loc194 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":290:13)
#loc195 = loc("/usr/include/stdlib.h":575:1)
#loc196 = loc("/usr/include/stdlib.h":575:41)
#loc197 = loc("/usr/include/time.h":76:1)
#loc198 = loc("/usr/include/time.h":76:38)
#loc199 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":307:15)
#loc200 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":309:15)
#loc201 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":312:15)
#loc202 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":314:15)
#loc203 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":302:1)
#loc204 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":317:1)
#loc209 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":303:1)
#loc210 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":305:27)
#loc211 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":305:22)
#loc212 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":305:5)
#loc213 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":307:5)
#loc214 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":308:5)
#loc215 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":308:72)
#loc216 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":309:5)
#loc217 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":312:5)
#loc218 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":313:5)
#loc219 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":313:71)
#loc220 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":314:5)
#loc221 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":316:12)
#loc222 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":316:5)
#loc223 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":234:27)
#loc224 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":146:1)
#loc225 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":240:1)
#loc226 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":148:5)
#loc227 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":148:9)
#loc228 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":150:13)
#loc229 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":150:12)
#loc230 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":150:5)
#loc231 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":151:5)
#loc232 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":210:5)
#loc233 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":151:11)
#loc234 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":153:9)
#loc235 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":208:9)
#loc236 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":158:13)
#loc237 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":158:17)
#loc238 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":159:13)
#loc239 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":159:32)
#loc240 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":160:13)
#loc241 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":160:36)
#loc242 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":161:13)
#loc243 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":161:45)
#loc244 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":162:13)
#loc245 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":197:21)
#loc246 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":172:40)
#loc247 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":172:49)
#loc248 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":172:62)
#loc249 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":172:33)
#loc250 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":172:17)
#loc251 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":172:73)
#loc252 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":173:17)
#loc253 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":176:17)
#loc254 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":173:21)
#loc255 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":173:38)
#loc256 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":174:17)
#loc257 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":175:21)
#loc258 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":177:24)
#loc259 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":177:25)
#loc260 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":177:34)
#loc261 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":177:37)
#loc262 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":177:51)
#loc263 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":177:17)
#loc264 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":177:52)
#loc265 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":178:38)
#loc266 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":178:17)
#loc267 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":179:53)
#loc268 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":179:43)
#loc269 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":179:17)
#loc270 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":179:63)
#loc271 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":180:42)
#loc272 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":180:36)
#loc273 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":180:17)
#loc274 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":180:50)
#loc275 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":181:17)
#loc276 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":184:17)
#loc277 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":181:29)
#loc278 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":181:62)
#loc279 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":181:63)
#loc280 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":181:72)
#loc281 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":181:86)
#loc282 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":181:21)
#loc283 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":181:92)
#loc284 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":182:17)
#loc285 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":183:21)
#loc286 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":187:35)
#loc287 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":187:50)
#loc288 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":187:63)
#loc289 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":187:81)
#loc290 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":187:84)
#loc291 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":187:30)
#loc292 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":187:17)
#loc293 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":187:85)
#loc294 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":188:17)
#loc295 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":191:17)
#loc296 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":188:21)
#loc297 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":188:35)
#loc298 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":188:48)
#loc299 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":188:51)
#loc300 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":188:65)
#loc301 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":189:17)
#loc302 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":190:21)
#loc303 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":193:43)
#loc304 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":193:29)
#loc305 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":193:17)
#loc306 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":195:29)
#loc307 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":195:24)
#loc308 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":195:17)
#loc309 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":195:40)
#loc310 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":197:20)
#loc311 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":198:13)
#loc312 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":201:13)
#loc313 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":198:17)
#loc314 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":198:34)
#loc315 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":199:13)
#loc316 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":200:30)
#loc317 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":200:17)
#loc318 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":209:9)
#loc319 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":211:5)
#loc320 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":239:5)
#loc321 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":211:11)
#loc322 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":213:9)
#loc323 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":237:9)
#loc324 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":214:13)
#loc325 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":214:17)
#loc326 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":215:13)
#loc327 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":215:58)
#loc328 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":215:35)
#loc329 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":215:42)
#loc330 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":215:47)
#loc331 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":215:57)
#loc332 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":216:13)
#loc333 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":216:43)
#loc334 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":216:17)
#loc335 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":216:27)
#loc336 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":216:33)
#loc337 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":216:34)
#loc338 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":216:40)
#loc339 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":216:39)
#loc340 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":218:13)
#loc341 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":221:13)
#loc342 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":218:22)
#loc343 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":218:18)
#loc344 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":218:25)
#loc345 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":218:29)
#loc346 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":218:27)
#loc347 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":219:13)
#loc348 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":220:29)
#loc349 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":220:17)
#loc350 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":220:24)
#loc351 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":220:25)
#loc352 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":218:34)
#loc353 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":218:33)
#loc354 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":223:13)
#loc355 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":235:13)
#loc356 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":223:17)
#loc357 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":223:25)
#loc358 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":223:27)
#loc359 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":223:30)
#loc360 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":223:38)
#loc361 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":223:40)
#loc362 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":224:13)
#loc363 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":231:13)
#loc364 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":233:13)
#loc365 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":225:32)
#loc366 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":225:17)
#loc367 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":225:24)
#loc368 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":225:28)
#loc369 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":227:17)
#loc370 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":230:17)
#loc371 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":227:25)
#loc372 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":227:21)
#loc373 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":227:28)
#loc374 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":227:32)
#loc375 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":227:30)
#loc376 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":228:17)
#loc377 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":229:34)
#loc378 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":229:41)
#loc379 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":229:42)
#loc380 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":229:21)
#loc381 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":227:37)
#loc382 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":227:36)
#loc383 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":234:17)
#loc384 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":236:13)
#loc385 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":236:18)
#loc386 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":238:9)
#loc387 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":243:1)
#loc388 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":285:1)
#loc389 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":245:5)
#loc390 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":245:9)
#loc391 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":247:13)
#loc392 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":247:12)
#loc393 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":247:5)
#loc394 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":248:5)
#loc395 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":254:5)
#loc396 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":248:11)
#loc397 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":252:16)
#loc398 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":252:9)
#loc399 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":253:9)
#loc400 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":255:5)
#loc401 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":284:5)
#loc402 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":255:11)
#loc403 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":257:9)
#loc404 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":282:9)
#loc405 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":258:13)
#loc406 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":258:17)
#loc407 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":259:13)
#loc408 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":259:58)
#loc409 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":259:35)
#loc410 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":259:42)
#loc411 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":259:47)
#loc412 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":259:57)
#loc413 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":260:13)
#loc414 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":260:43)
#loc415 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":260:17)
#loc416 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":260:27)
#loc417 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":260:33)
#loc418 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":260:34)
#loc419 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":260:40)
#loc420 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":260:39)
#loc421 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":262:13)
#loc422 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":265:13)
#loc423 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":262:22)
#loc424 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":262:18)
#loc425 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":262:25)
#loc426 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":262:29)
#loc427 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":262:27)
#loc428 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":263:13)
#loc429 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":264:29)
#loc430 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":264:17)
#loc431 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":264:24)
#loc432 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":264:25)
#loc433 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":262:34)
#loc434 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":262:33)
#loc435 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":268:13)
#loc436 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":280:13)
#loc437 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":268:17)
#loc438 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":268:25)
#loc439 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":269:13)
#loc440 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":276:13)
#loc441 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":278:13)
#loc442 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":270:32)
#loc443 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":270:17)
#loc444 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":270:24)
#loc445 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":270:28)
#loc446 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":272:17)
#loc447 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":275:17)
#loc448 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":272:25)
#loc449 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":272:21)
#loc450 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":272:28)
#loc451 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":272:32)
#loc452 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":272:30)
#loc453 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":273:17)
#loc454 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":274:34)
#loc455 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":274:41)
#loc456 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":274:42)
#loc457 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":274:21)
#loc458 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":272:37)
#loc459 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":272:36)
#loc460 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":279:27)
#loc461 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":279:17)
#loc462 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":281:13)
#loc463 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":281:18)
#loc464 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c":283:9)
#loc465 = loc(fused[#loc1, #loc2])
#loc466 = loc(fused[#loc3, #loc4])
#loc467 = loc(fused[#loc6, #loc7])
#loc468 = loc(fused[#loc8, #loc9])
#loc469 = loc(fused[#loc10, #loc11])
#loc470 = loc(fused[#loc12, #loc13])
#loc471 = loc(fused[#loc14, #loc15])
#loc472 = loc(fused[#loc16, #loc17])
#loc473 = loc(fused[#loc18, #loc19])
#loc474 = loc(fused[#loc20, #loc21])
#loc475 = loc(fused[#loc22, #loc23])
#loc476 = loc(fused[#loc25, #loc26])
#loc477 = loc(fused[#loc27, #loc28])
#loc478 = loc(fused[#loc29, #loc30])
#loc479 = loc(fused[#loc33, #loc31])
#loc480 = loc(fused[#loc34, #loc35])
#loc481 = loc(fused[#loc37, #loc38])
#loc482 = loc(fused[#loc39, #loc40])
#loc483 = loc(fused[#loc41, #loc42])
#loc484 = loc(fused[#loc43, #loc44])
#loc485 = loc(fused[#loc45, #loc46])
#loc486 = loc(fused[#loc47, #loc48])
#loc487 = loc(fused[#loc53, #loc54])
#loc488 = loc(fused[#loc55, #loc56])
#loc489 = loc(fused[#loc57, #loc58])
#loc490 = loc(fused[#loc59, #loc56])
#loc491 = loc(fused[#loc61, #loc62])
#loc492 = loc(fused[#loc64, #loc65])
#loc493 = loc(fused[#loc66, #loc67])
#loc494 = loc(fused[#loc70, #loc68])
#loc495 = loc(fused[#loc74, #loc75])
#loc496 = loc(fused[#loc79, #loc80])
#loc497 = loc(fused[#loc81, #loc82])
#loc498 = loc(fused[#loc84, #loc85])
#loc499 = loc(fused[#loc86, #loc87])
#loc500 = loc(fused[#loc88, #loc89])
#loc501 = loc(fused[#loc90, #loc82])
#loc502 = loc(fused[#loc94, #loc95])
#loc503 = loc(fused[#loc98, #loc99])
#loc504 = loc(fused[#loc100, #loc101])
#loc505 = loc(fused[#loc102, #loc103])
#loc506 = loc(fused[#loc105, #loc106])
#loc507 = loc(fused[#loc107, #loc101])
#loc508 = loc(fused[#loc111, #loc109])
#loc509 = loc(fused[#loc114, #loc115])
#loc510 = loc(fused[#loc117, #loc118])
#loc511 = loc(fused[#loc119, #loc120])
#loc512 = loc(fused[#loc121, #loc118])
#loc513 = loc(fused[#loc125, #loc126])
#loc514 = loc(fused[#loc128, #loc129])
#loc515 = loc(fused[#loc130, #loc131])
#loc516 = loc(fused[#loc132, #loc133])
#loc517 = loc(fused[#loc136, #loc137])
#loc518 = loc(fused[#loc135, #loc137])
#loc519 = loc(fused[#loc134, #loc133])
#loc520 = loc(fused[#loc138, #loc139])
#loc521 = loc(fused[#loc140, #loc141])
#loc522 = loc(fused[#loc142, #loc139])
#loc523 = loc(fused[#loc146, #loc147])
#loc524 = loc(fused[#loc149, #loc148])
#loc525 = loc(fused[#loc150, #loc151])
#loc526 = loc(fused[#loc153, #loc147])
#loc527 = loc(fused[#loc155, #loc154])
#loc528 = loc(fused[#loc159, #loc158])
#loc529 = loc(fused[#loc160, #loc161])
#loc530 = loc(fused[#loc162, #loc163])
#loc531 = loc(fused[#loc164, #loc165, #loc166, #loc161])
#loc532 = loc(fused[#loc168, #loc167])
#loc533 = loc(fused[#loc171, #loc172])
#loc534 = loc(fused[#loc174, #loc173])
#loc535 = loc(fused[#loc175, #loc176])
#loc536 = loc(fused[#loc178, #loc172])
#loc537 = loc(fused[#loc184, #loc183])
#loc538 = loc(fused[#loc189, #loc190])
#loc539 = loc(fused[#loc191, #loc192])
#loc540 = loc(fused[#loc193, #loc194])
#loc541 = loc(fused[#loc195, #loc196])
#loc542 = loc(fused[#loc197, #loc198])
#loc543 = loc(fused[#loc203, #loc204])
#loc546 = loc(fused[#loc214, #loc215])
#loc547 = loc(fused[#loc218, #loc219])
#loc548 = loc(fused[#loc222, #loc221])
#loc549 = loc(fused[#loc224, #loc225])
#loc550 = loc(fused[#loc226, #loc227])
#loc551 = loc(fused[#loc230, #loc228])
#loc552 = loc(fused[#loc231, #loc232])
#loc553 = loc(fused[#loc234, #loc235])
#loc554 = loc(fused[#loc236, #loc237])
#loc555 = loc(fused[#loc238, #loc239])
#loc556 = loc(fused[#loc240, #loc241])
#loc557 = loc(fused[#loc242, #loc243])
#loc558 = loc(fused[#loc244, #loc245])
#loc559 = loc(fused[#loc250, #loc251])
#loc560 = loc(fused[#loc252, #loc253])
#loc561 = loc(fused[#loc254, #loc255])
#loc562 = loc(fused[#loc256, #loc253])
#loc563 = loc(fused[#loc258, #loc259])
#loc564 = loc(fused[#loc261, #loc262])
#loc565 = loc(fused[#loc263, #loc264])
#loc566 = loc(fused[#loc266, #loc265])
#loc567 = loc(fused[#loc269, #loc270])
#loc568 = loc(fused[#loc273, #loc274])
#loc569 = loc(fused[#loc275, #loc276])
#loc570 = loc(fused[#loc278, #loc279])
#loc571 = loc(fused[#loc280, #loc281])
#loc572 = loc(fused[#loc282, #loc283])
#loc573 = loc(fused[#loc284, #loc276])
#loc574 = loc(fused[#loc288, #loc289])
#loc575 = loc(fused[#loc292, #loc293])
#loc576 = loc(fused[#loc294, #loc295])
#loc577 = loc(fused[#loc296, #loc297])
#loc578 = loc(fused[#loc299, #loc300])
#loc579 = loc(fused[#loc301, #loc295])
#loc580 = loc(fused[#loc305, #loc303])
#loc581 = loc(fused[#loc308, #loc309])
#loc582 = loc(fused[#loc311, #loc312])
#loc583 = loc(fused[#loc313, #loc314])
#loc584 = loc(fused[#loc315, #loc312])
#loc585 = loc(fused[#loc319, #loc320])
#loc586 = loc(fused[#loc322, #loc323])
#loc587 = loc(fused[#loc324, #loc325])
#loc588 = loc(fused[#loc326, #loc327])
#loc589 = loc(fused[#loc330, #loc331])
#loc590 = loc(fused[#loc329, #loc331])
#loc591 = loc(fused[#loc328, #loc327])
#loc592 = loc(fused[#loc332, #loc333])
#loc593 = loc(fused[#loc334, #loc335])
#loc594 = loc(fused[#loc336, #loc333])
#loc595 = loc(fused[#loc340, #loc341])
#loc596 = loc(fused[#loc343, #loc342])
#loc597 = loc(fused[#loc344, #loc345])
#loc598 = loc(fused[#loc347, #loc341])
#loc599 = loc(fused[#loc349, #loc348])
#loc600 = loc(fused[#loc353, #loc352])
#loc601 = loc(fused[#loc354, #loc355])
#loc602 = loc(fused[#loc356, #loc357])
#loc603 = loc(fused[#loc359, #loc361])
#loc604 = loc(fused[#loc362, #loc363, #loc364, #loc355])
#loc605 = loc(fused[#loc366, #loc365])
#loc606 = loc(fused[#loc369, #loc370])
#loc607 = loc(fused[#loc372, #loc371])
#loc608 = loc(fused[#loc373, #loc374])
#loc609 = loc(fused[#loc376, #loc370])
#loc610 = loc(fused[#loc382, #loc381])
#loc611 = loc(fused[#loc387, #loc388])
#loc612 = loc(fused[#loc389, #loc390])
#loc613 = loc(fused[#loc393, #loc391])
#loc614 = loc(fused[#loc394, #loc395])
#loc615 = loc(fused[#loc398, #loc397])
#loc616 = loc(fused[#loc400, #loc401])
#loc617 = loc(fused[#loc403, #loc404])
#loc618 = loc(fused[#loc405, #loc406])
#loc619 = loc(fused[#loc407, #loc408])
#loc620 = loc(fused[#loc411, #loc412])
#loc621 = loc(fused[#loc410, #loc412])
#loc622 = loc(fused[#loc409, #loc408])
#loc623 = loc(fused[#loc413, #loc414])
#loc624 = loc(fused[#loc415, #loc416])
#loc625 = loc(fused[#loc417, #loc414])
#loc626 = loc(fused[#loc421, #loc422])
#loc627 = loc(fused[#loc424, #loc423])
#loc628 = loc(fused[#loc425, #loc426])
#loc629 = loc(fused[#loc428, #loc422])
#loc630 = loc(fused[#loc430, #loc429])
#loc631 = loc(fused[#loc434, #loc433])
#loc632 = loc(fused[#loc435, #loc436])
#loc633 = loc(fused[#loc437, #loc438])
#loc634 = loc(fused[#loc439, #loc440, #loc441, #loc436])
#loc635 = loc(fused[#loc443, #loc442])
#loc636 = loc(fused[#loc446, #loc447])
#loc637 = loc(fused[#loc449, #loc448])
#loc638 = loc(fused[#loc450, #loc451])
#loc639 = loc(fused[#loc453, #loc447])
#loc640 = loc(fused[#loc459, #loc458])
