!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":27:21)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":27:28)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":188:10)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":188:14)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":188:20)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":188:32)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":69:26)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":69:33)
#loc219 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":107:26)
#loc220 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":107:33)
#loc298 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":140:25)
#loc299 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":140:32)
#loc380 = loc(fused[#loc19, #loc20])
#loc413 = loc(fused[#loc112, #loc113])
#loc414 = loc(fused[#loc114, #loc115])
#loc422 = loc(fused[#loc139, #loc140])
#loc449 = loc(fused[#loc219, #loc220])
#loc477 = loc(fused[#loc298, #loc299])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc371)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc372)
  cir.func private @wmemset(!cir.ptr<!s32i>, !s32i, !u64i) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc373)
  cir.global "private" internal dsolocal @badStatic = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc374)
  cir.func private @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc375)
  cir.func private @calloc(!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc376)
  cir.func private @wcscpy(!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc377)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc378)
  cir.func internal private @badSink(%arg0: !cir.ptr<!void> loc(fused[#loc19, #loc20])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data", init] {alignment = 8 : i64} loc(#loc380)
    cir.store %arg0, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc21)
    cir.scope {
      %1 = cir.get_global @badStatic : !cir.ptr<!s32i> loc(#loc374)
      %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc24)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc24)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc384)
          %5 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc385)
          %6 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc32)
          %7 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc33)
          %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc33)
          %9 = cir.call @strlen(%8) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc32)
          cir.store %9, %4 : !u64i, !cir.ptr<!u64i> loc(#loc384)
          %10 = cir.get_global @calloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i, !u64i)>> loc(#loc34)
          %11 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc35)
          %12 = cir.const #cir.int<1> : !s32i loc(#loc36)
          %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc36)
          %14 = cir.binop(add, %11, %13) : !u64i loc(#loc386)
          %15 = cir.const #cir.int<4> : !u64i loc(#loc387)
          %16 = cir.call @calloc(%14, %15) : (!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc34)
          cir.store %16, %5 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc385)
          cir.scope {
            %26 = cir.load %5 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc41)
            %27 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc42)
            %28 = cir.cmp(eq, %26, %27) : !cir.ptr<!void>, !cir.bool loc(#loc389)
            cir.if %28 {
              %29 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc44)
              %30 = cir.const #cir.int<1> : !s32i loc(#loc45)
              %31 = cir.unary(minus, %30) : !s32i, !s32i loc(#loc46)
              cir.call @exit(%31) : (!s32i) -> () extra(#fn_attr) loc(#loc44)
            } loc(#loc390)
          } loc(#loc388)
          %17 = cir.load %5 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc47)
          %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc47)
          %19 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc48)
          %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc48)
          %21 = cir.call @wcscpy(%18, %20) : (!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc49)
          %22 = cir.load %5 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc50)
          %23 = cir.cast(bitcast, %22 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc50)
          cir.call @printLine(%23) : (!cir.ptr<!s8i>) -> () loc(#loc51)
          %24 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc52)
          %25 = cir.load %5 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc53)
          cir.call @free(%25) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc52)
        } loc(#loc383)
      } loc(#loc382)
    } loc(#loc381)
    cir.return loc(#loc18)
  } loc(#loc379)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__CWE135_21_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc392)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc58)
    cir.store %1, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc393)
    cir.scope {
      %5 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc395)
      %6 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc64)
      %7 = cir.const #cir.int<50> : !s32i loc(#loc65)
      %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc65)
      %9 = cir.const #cir.int<4> : !u64i loc(#loc396)
      %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc397)
      %11 = cir.call @malloc(%10) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc64)
      %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc398)
      cir.store %12, %5 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc395)
      cir.scope {
        %28 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc70)
        %29 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc71)
        %30 = cir.cast(bitcast, %29 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc71)
        %31 = cir.cmp(eq, %28, %30) : !cir.ptr<!s32i>, !cir.bool loc(#loc400)
        cir.if %31 {
          %32 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc73)
          %33 = cir.const #cir.int<1> : !s32i loc(#loc74)
          %34 = cir.unary(minus, %33) : !s32i, !s32i loc(#loc75)
          cir.call @exit(%34) : (!s32i) -> () extra(#fn_attr) loc(#loc73)
        } loc(#loc401)
      } loc(#loc399)
      %13 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc76)
      %14 = cir.const #cir.int<65> : !s32i loc(#loc77)
      %15 = cir.const #cir.int<50> : !s32i loc(#loc78)
      %16 = cir.const #cir.int<1> : !s32i loc(#loc79)
      %17 = cir.binop(sub, %15, %16) nsw : !s32i loc(#loc78)
      %18 = cir.cast(integral, %17 : !s32i), !u64i loc(#loc78)
      %19 = cir.call @wmemset(%13, %14, %18) : (!cir.ptr<!s32i>, !s32i, !u64i) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc80)
      %20 = cir.const #cir.int<0> : !s32i loc(#loc81)
      %21 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc82)
      %22 = cir.const #cir.int<50> : !s32i loc(#loc83)
      %23 = cir.const #cir.int<1> : !s32i loc(#loc84)
      %24 = cir.binop(sub, %22, %23) nsw : !s32i loc(#loc83)
      %25 = cir.ptr_stride(%21 : !cir.ptr<!s32i>, %24 : !s32i), !cir.ptr<!s32i> loc(#loc85)
      cir.store %20, %25 : !s32i, !cir.ptr<!s32i> loc(#loc402)
      %26 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc86)
      %27 = cir.cast(bitcast, %26 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc86)
      cir.store %27, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc403)
    } loc(#loc394)
    %2 = cir.const #cir.int<1> : !s32i loc(#loc88)
    %3 = cir.get_global @badStatic : !cir.ptr<!s32i> loc(#loc374)
    cir.store %2, %3 : !s32i, !cir.ptr<!s32i> loc(#loc404)
    %4 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc90)
    cir.call @badSink(%4) : (!cir.ptr<!void>) -> () loc(#loc91)
    cir.return loc(#loc55)
  } loc(#loc391)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__CWE135_21_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc406)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc94)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc407)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc96)
    %2 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc408)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc98)
    cir.return loc(#loc93)
  } loc(#loc405)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc409)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc410)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc411)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc106)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc107)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc108)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc109)
  cir.func @main(%arg0: !s32i loc(fused[#loc112, #loc113]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc114, #loc115])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc413)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc414)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc111)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc116)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc116)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc117)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc118)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc118)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc119)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc106)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc106)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc120)
    %8 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__CWE135_21_good : !cir.ptr<!cir.func<!void ()>> loc(#loc415)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__CWE135_21_good() : () -> () loc(#loc121)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc107)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc107)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc123)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc108)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc108)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc124)
    %13 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__CWE135_21_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc416)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__CWE135_21_bad() : () -> () loc(#loc125)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc109)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc109)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc127)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc128)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc417)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc417)
    cir.return %17 : !s32i loc(#loc417)
  } loc(#loc412)
  cir.global "private" internal dsolocal @goodB2G1Static = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc418)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc132)
  cir.func private @wcslen(!cir.ptr<!s32i>) -> !u64i extra(#fn_attr) loc(#loc419)
  cir.func private @printWLine(!cir.ptr<!s32i>) loc(#loc420)
  cir.func internal private @goodB2G1Sink(%arg0: !cir.ptr<!void> loc(fused[#loc139, #loc140])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data", init] {alignment = 8 : i64} loc(#loc422)
    cir.store %arg0, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc141)
    cir.scope {
      %1 = cir.get_global @goodB2G1Static : !cir.ptr<!s32i> loc(#loc418)
      %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc144)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc144)
      cir.if %3 {
        %4 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc132)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc132)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc148)
      } else {
        cir.scope {
          %4 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc426)
          %5 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc427)
          %6 = cir.get_global @wcslen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s32i>)>> loc(#loc155)
          %7 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc156)
          %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc156)
          %9 = cir.call @wcslen(%8) : (!cir.ptr<!s32i>) -> !u64i extra(#fn_attr) loc(#loc155)
          cir.store %9, %4 : !u64i, !cir.ptr<!u64i> loc(#loc426)
          %10 = cir.get_global @calloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i, !u64i)>> loc(#loc157)
          %11 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc158)
          %12 = cir.const #cir.int<1> : !s32i loc(#loc159)
          %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc159)
          %14 = cir.binop(add, %11, %13) : !u64i loc(#loc428)
          %15 = cir.const #cir.int<4> : !u64i loc(#loc429)
          %16 = cir.call @calloc(%14, %15) : (!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc157)
          cir.store %16, %5 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc427)
          cir.scope {
            %26 = cir.load %5 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc164)
            %27 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc165)
            %28 = cir.cmp(eq, %26, %27) : !cir.ptr<!void>, !cir.bool loc(#loc431)
            cir.if %28 {
              %29 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc167)
              %30 = cir.const #cir.int<1> : !s32i loc(#loc168)
              %31 = cir.unary(minus, %30) : !s32i, !s32i loc(#loc169)
              cir.call @exit(%31) : (!s32i) -> () extra(#fn_attr) loc(#loc167)
            } loc(#loc432)
          } loc(#loc430)
          %17 = cir.load %5 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc170)
          %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc170)
          %19 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc171)
          %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc171)
          %21 = cir.call @wcscpy(%18, %20) : (!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc172)
          %22 = cir.load %5 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc173)
          %23 = cir.cast(bitcast, %22 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc173)
          cir.call @printWLine(%23) : (!cir.ptr<!s32i>) -> () loc(#loc174)
          %24 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc175)
          %25 = cir.load %5 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc176)
          cir.call @free(%25) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc175)
        } loc(#loc425)
      } loc(#loc424)
    } loc(#loc423)
    cir.return loc(#loc138)
  } loc(#loc421)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc434)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc181)
    cir.store %1, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc435)
    cir.scope {
      %5 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc437)
      %6 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc187)
      %7 = cir.const #cir.int<50> : !s32i loc(#loc188)
      %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc188)
      %9 = cir.const #cir.int<4> : !u64i loc(#loc438)
      %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc439)
      %11 = cir.call @malloc(%10) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc187)
      %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc440)
      cir.store %12, %5 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc437)
      cir.scope {
        %28 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc193)
        %29 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc194)
        %30 = cir.cast(bitcast, %29 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc194)
        %31 = cir.cmp(eq, %28, %30) : !cir.ptr<!s32i>, !cir.bool loc(#loc442)
        cir.if %31 {
          %32 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc196)
          %33 = cir.const #cir.int<1> : !s32i loc(#loc197)
          %34 = cir.unary(minus, %33) : !s32i, !s32i loc(#loc198)
          cir.call @exit(%34) : (!s32i) -> () extra(#fn_attr) loc(#loc196)
        } loc(#loc443)
      } loc(#loc441)
      %13 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc199)
      %14 = cir.const #cir.int<65> : !s32i loc(#loc200)
      %15 = cir.const #cir.int<50> : !s32i loc(#loc201)
      %16 = cir.const #cir.int<1> : !s32i loc(#loc202)
      %17 = cir.binop(sub, %15, %16) nsw : !s32i loc(#loc201)
      %18 = cir.cast(integral, %17 : !s32i), !u64i loc(#loc201)
      %19 = cir.call @wmemset(%13, %14, %18) : (!cir.ptr<!s32i>, !s32i, !u64i) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc203)
      %20 = cir.const #cir.int<0> : !s32i loc(#loc204)
      %21 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc205)
      %22 = cir.const #cir.int<50> : !s32i loc(#loc206)
      %23 = cir.const #cir.int<1> : !s32i loc(#loc207)
      %24 = cir.binop(sub, %22, %23) nsw : !s32i loc(#loc206)
      %25 = cir.ptr_stride(%21 : !cir.ptr<!s32i>, %24 : !s32i), !cir.ptr<!s32i> loc(#loc208)
      cir.store %20, %25 : !s32i, !cir.ptr<!s32i> loc(#loc444)
      %26 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc209)
      %27 = cir.cast(bitcast, %26 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc209)
      cir.store %27, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc445)
    } loc(#loc436)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc211)
    %3 = cir.get_global @goodB2G1Static : !cir.ptr<!s32i> loc(#loc418)
    cir.store %2, %3 : !s32i, !cir.ptr<!s32i> loc(#loc446)
    %4 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc213)
    cir.call @goodB2G1Sink(%4) : (!cir.ptr<!void>) -> () loc(#loc214)
    cir.return loc(#loc178)
  } loc(#loc433)
  cir.global "private" internal dsolocal @goodB2G2Static = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc447)
  cir.func internal private @goodB2G2Sink(%arg0: !cir.ptr<!void> loc(fused[#loc219, #loc220])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data", init] {alignment = 8 : i64} loc(#loc449)
    cir.store %arg0, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc221)
    cir.scope {
      %1 = cir.get_global @goodB2G2Static : !cir.ptr<!s32i> loc(#loc447)
      %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc224)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc224)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc453)
          %5 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc454)
          %6 = cir.get_global @wcslen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s32i>)>> loc(#loc232)
          %7 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc233)
          %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc233)
          %9 = cir.call @wcslen(%8) : (!cir.ptr<!s32i>) -> !u64i extra(#fn_attr) loc(#loc232)
          cir.store %9, %4 : !u64i, !cir.ptr<!u64i> loc(#loc453)
          %10 = cir.get_global @calloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i, !u64i)>> loc(#loc234)
          %11 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc235)
          %12 = cir.const #cir.int<1> : !s32i loc(#loc236)
          %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc236)
          %14 = cir.binop(add, %11, %13) : !u64i loc(#loc455)
          %15 = cir.const #cir.int<4> : !u64i loc(#loc456)
          %16 = cir.call @calloc(%14, %15) : (!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc234)
          cir.store %16, %5 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc454)
          cir.scope {
            %26 = cir.load %5 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc241)
            %27 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc242)
            %28 = cir.cmp(eq, %26, %27) : !cir.ptr<!void>, !cir.bool loc(#loc458)
            cir.if %28 {
              %29 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc244)
              %30 = cir.const #cir.int<1> : !s32i loc(#loc245)
              %31 = cir.unary(minus, %30) : !s32i, !s32i loc(#loc246)
              cir.call @exit(%31) : (!s32i) -> () extra(#fn_attr) loc(#loc244)
            } loc(#loc459)
          } loc(#loc457)
          %17 = cir.load %5 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc247)
          %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc247)
          %19 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc248)
          %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc248)
          %21 = cir.call @wcscpy(%18, %20) : (!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc249)
          %22 = cir.load %5 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc250)
          %23 = cir.cast(bitcast, %22 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc250)
          cir.call @printWLine(%23) : (!cir.ptr<!s32i>) -> () loc(#loc251)
          %24 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc252)
          %25 = cir.load %5 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc253)
          cir.call @free(%25) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc252)
        } loc(#loc452)
      } loc(#loc451)
    } loc(#loc450)
    cir.return loc(#loc218)
  } loc(#loc448)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc461)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc258)
    cir.store %1, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc462)
    cir.scope {
      %5 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc464)
      %6 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc264)
      %7 = cir.const #cir.int<50> : !s32i loc(#loc265)
      %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc265)
      %9 = cir.const #cir.int<4> : !u64i loc(#loc465)
      %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc466)
      %11 = cir.call @malloc(%10) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc264)
      %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc467)
      cir.store %12, %5 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc464)
      cir.scope {
        %28 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc270)
        %29 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc271)
        %30 = cir.cast(bitcast, %29 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc271)
        %31 = cir.cmp(eq, %28, %30) : !cir.ptr<!s32i>, !cir.bool loc(#loc469)
        cir.if %31 {
          %32 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc273)
          %33 = cir.const #cir.int<1> : !s32i loc(#loc274)
          %34 = cir.unary(minus, %33) : !s32i, !s32i loc(#loc275)
          cir.call @exit(%34) : (!s32i) -> () extra(#fn_attr) loc(#loc273)
        } loc(#loc470)
      } loc(#loc468)
      %13 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc276)
      %14 = cir.const #cir.int<65> : !s32i loc(#loc277)
      %15 = cir.const #cir.int<50> : !s32i loc(#loc278)
      %16 = cir.const #cir.int<1> : !s32i loc(#loc279)
      %17 = cir.binop(sub, %15, %16) nsw : !s32i loc(#loc278)
      %18 = cir.cast(integral, %17 : !s32i), !u64i loc(#loc278)
      %19 = cir.call @wmemset(%13, %14, %18) : (!cir.ptr<!s32i>, !s32i, !u64i) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc280)
      %20 = cir.const #cir.int<0> : !s32i loc(#loc281)
      %21 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc282)
      %22 = cir.const #cir.int<50> : !s32i loc(#loc283)
      %23 = cir.const #cir.int<1> : !s32i loc(#loc284)
      %24 = cir.binop(sub, %22, %23) nsw : !s32i loc(#loc283)
      %25 = cir.ptr_stride(%21 : !cir.ptr<!s32i>, %24 : !s32i), !cir.ptr<!s32i> loc(#loc285)
      cir.store %20, %25 : !s32i, !cir.ptr<!s32i> loc(#loc471)
      %26 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc286)
      %27 = cir.cast(bitcast, %26 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc286)
      cir.store %27, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc472)
    } loc(#loc463)
    %2 = cir.const #cir.int<1> : !s32i loc(#loc288)
    %3 = cir.get_global @goodB2G2Static : !cir.ptr<!s32i> loc(#loc447)
    cir.store %2, %3 : !s32i, !cir.ptr<!s32i> loc(#loc473)
    %4 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc290)
    cir.call @goodB2G2Sink(%4) : (!cir.ptr<!void>) -> () loc(#loc291)
    cir.return loc(#loc255)
  } loc(#loc460)
  cir.global "private" internal dsolocal @goodG2BStatic = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc474)
  cir.func private @strcpy(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc475)
  cir.func internal private @goodG2BSink(%arg0: !cir.ptr<!void> loc(fused[#loc298, #loc299])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data", init] {alignment = 8 : i64} loc(#loc477)
    cir.store %arg0, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc300)
    cir.scope {
      %1 = cir.get_global @goodG2BStatic : !cir.ptr<!s32i> loc(#loc474)
      %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc303)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc303)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc481)
          %5 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc482)
          %6 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc311)
          %7 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc312)
          %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc312)
          %9 = cir.call @strlen(%8) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc311)
          cir.store %9, %4 : !u64i, !cir.ptr<!u64i> loc(#loc481)
          %10 = cir.get_global @calloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i, !u64i)>> loc(#loc313)
          %11 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc314)
          %12 = cir.const #cir.int<1> : !s32i loc(#loc315)
          %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc315)
          %14 = cir.binop(add, %11, %13) : !u64i loc(#loc483)
          %15 = cir.const #cir.int<1> : !s32i loc(#loc316)
          %16 = cir.cast(integral, %15 : !s32i), !u64i loc(#loc316)
          %17 = cir.call @calloc(%14, %16) : (!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc313)
          cir.store %17, %5 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc482)
          cir.scope {
            %28 = cir.load %5 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc319)
            %29 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc320)
            %30 = cir.cmp(eq, %28, %29) : !cir.ptr<!void>, !cir.bool loc(#loc485)
            cir.if %30 {
              %31 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc322)
              %32 = cir.const #cir.int<1> : !s32i loc(#loc323)
              %33 = cir.unary(minus, %32) : !s32i, !s32i loc(#loc324)
              cir.call @exit(%33) : (!s32i) -> () extra(#fn_attr) loc(#loc322)
            } loc(#loc486)
          } loc(#loc484)
          %18 = cir.get_global @strcpy : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc325)
          %19 = cir.load %5 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc326)
          %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc326)
          %21 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc327)
          %22 = cir.cast(bitcast, %21 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc327)
          %23 = cir.call @strcpy(%20, %22) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc325)
          %24 = cir.load %5 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc328)
          %25 = cir.cast(bitcast, %24 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc328)
          cir.call @printLine(%25) : (!cir.ptr<!s8i>) -> () loc(#loc329)
          %26 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc330)
          %27 = cir.load %5 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc331)
          cir.call @free(%27) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc330)
        } loc(#loc480)
      } loc(#loc479)
    } loc(#loc478)
    cir.return loc(#loc297)
  } loc(#loc476)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc488)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc336)
    cir.store %1, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc489)
    cir.scope {
      %5 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc491)
      %6 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc342)
      %7 = cir.const #cir.int<50> : !s32i loc(#loc343)
      %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc343)
      %9 = cir.const #cir.int<1> : !u64i loc(#loc492)
      %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc493)
      %11 = cir.call @malloc(%10) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc342)
      %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc494)
      cir.store %12, %5 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc491)
      cir.scope {
        %29 = cir.load %5 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc348)
        %30 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc349)
        %31 = cir.cast(bitcast, %30 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc349)
        %32 = cir.cmp(eq, %29, %31) : !cir.ptr<!s8i>, !cir.bool loc(#loc496)
        cir.if %32 {
          %33 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc351)
          %34 = cir.const #cir.int<1> : !s32i loc(#loc352)
          %35 = cir.unary(minus, %34) : !s32i, !s32i loc(#loc353)
          cir.call @exit(%35) : (!s32i) -> () extra(#fn_attr) loc(#loc351)
        } loc(#loc497)
      } loc(#loc495)
      %13 = cir.load %5 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc354)
      %14 = cir.cast(bitcast, %13 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc354)
      %15 = cir.const #cir.int<65> : !s32i loc(#loc355)
      %16 = cir.const #cir.int<50> : !s32i loc(#loc356)
      %17 = cir.const #cir.int<1> : !s32i loc(#loc357)
      %18 = cir.binop(sub, %16, %17) nsw : !s32i loc(#loc356)
      %19 = cir.cast(integral, %18 : !s32i), !u64i loc(#loc356)
      cir.libc.memset %19 bytes from %14 set to %15 : !cir.ptr<!void>, !s32i, !u64i loc(#loc498)
      %20 = cir.const #cir.int<0> : !s32i loc(#loc360)
      %21 = cir.cast(integral, %20 : !s32i), !s8i loc(#loc360)
      %22 = cir.load %5 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc361)
      %23 = cir.const #cir.int<50> : !s32i loc(#loc362)
      %24 = cir.const #cir.int<1> : !s32i loc(#loc363)
      %25 = cir.binop(sub, %23, %24) nsw : !s32i loc(#loc362)
      %26 = cir.ptr_stride(%22 : !cir.ptr<!s8i>, %25 : !s32i), !cir.ptr<!s8i> loc(#loc364)
      cir.store %21, %26 : !s8i, !cir.ptr<!s8i> loc(#loc499)
      %27 = cir.load %5 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc365)
      %28 = cir.cast(bitcast, %27 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc365)
      cir.store %28, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc500)
    } loc(#loc490)
    %2 = cir.const #cir.int<1> : !s32i loc(#loc367)
    %3 = cir.get_global @goodG2BStatic : !cir.ptr<!s32i> loc(#loc474)
    cir.store %2, %3 : !s32i, !cir.ptr<!s32i> loc(#loc501)
    %4 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc369)
    cir.call @goodG2BSink(%4) : (!cir.ptr<!void>) -> () loc(#loc370)
    cir.return loc(#loc333)
  } loc(#loc487)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("/usr/include/wchar.h":296:1)
#loc6 = loc("/usr/include/wchar.h":296:65)
#loc7 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":25:1)
#loc8 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":25:24)
#loc9 = loc("/usr/include/string.h":407:1)
#loc10 = loc("/usr/include/string.h":408:33)
#loc11 = loc("/usr/include/stdlib.h":675:1)
#loc12 = loc("/usr/include/stdlib.h":676:14)
#loc13 = loc("/usr/include/wchar.h":98:1)
#loc14 = loc("/usr/include/wchar.h":100:14)
#loc15 = loc("/usr/include/stdlib.h":687:1)
#loc16 = loc("/usr/include/stdlib.h":687:32)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":27:1)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":41:1)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":28:1)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":29:5)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":40:5)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":29:8)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":30:5)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":31:9)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":39:9)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":33:13)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":33:49)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":34:13)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":34:68)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":33:30)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":33:45)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":34:35)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":34:42)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":34:50)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":34:53)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":34:67)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":35:13)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":35:41)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":35:17)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":35:25)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":35:31)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":35:32)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":35:38)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":35:37)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":36:26)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":36:32)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":36:19)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":37:31)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":37:13)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":38:13)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":38:18)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":43:1)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":57:1)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":45:5)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":45:12)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":46:12)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":46:5)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":47:5)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":54:5)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":48:9)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":48:71)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":48:46)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":48:53)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":48:56)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":48:70)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":49:9)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":49:46)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":49:13)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":49:30)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":49:36)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":49:37)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":49:43)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":49:42)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":50:17)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":50:32)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":50:38)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":50:41)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":50:9)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":51:31)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":51:9)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":51:23)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":51:26)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":51:27)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":53:24)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":53:9)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":55:17)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":55:5)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":56:13)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":56:5)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":172:1)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":177:1)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":174:5)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":174:14)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":175:5)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":175:14)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":176:5)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":176:13)
#loc100 = loc("/usr/include/stdlib.h":575:1)
#loc101 = loc("/usr/include/stdlib.h":575:41)
#loc102 = loc("/usr/include/time.h":76:1)
#loc103 = loc("/usr/include/time.h":76:38)
#loc104 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc105 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":193:15)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":195:15)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":198:15)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":200:15)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":188:1)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":203:1)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":189:1)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":191:27)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":191:22)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":191:5)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":193:5)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":194:5)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":194:55)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":195:5)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":198:5)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":199:5)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":199:54)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":200:5)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":202:12)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":202:5)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":64:1)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":64:29)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":74:19)
#loc133 = loc("/usr/include/wchar.h":247:1)
#loc134 = loc("/usr/include/wchar.h":247:51)
#loc135 = loc("../../../testcasesupport/std_testcase_io.h":16:1)
#loc136 = loc("../../../testcasesupport/std_testcase_io.h":16:37)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":69:1)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":88:1)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":70:1)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":71:5)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":87:5)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":71:8)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":72:5)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":75:5)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":77:5)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":74:9)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":78:9)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":86:9)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":80:13)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":80:52)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":81:13)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":81:68)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":80:30)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":80:48)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":81:35)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":81:42)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":81:50)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":81:53)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":81:67)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":82:13)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":82:41)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":82:17)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":82:25)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":82:31)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":82:32)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":82:38)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":82:37)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":83:26)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":83:32)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":83:19)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":84:35)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":84:13)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":85:13)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":85:18)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":90:1)
#loc178 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":104:1)
#loc179 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":92:5)
#loc180 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":92:12)
#loc181 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":93:12)
#loc182 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":93:5)
#loc183 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":94:5)
#loc184 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":101:5)
#loc185 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":95:9)
#loc186 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":95:71)
#loc187 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":95:46)
#loc188 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":95:53)
#loc189 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":95:56)
#loc190 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":95:70)
#loc191 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":96:9)
#loc192 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":96:46)
#loc193 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":96:13)
#loc194 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":96:30)
#loc195 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":96:36)
#loc196 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":96:37)
#loc197 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":96:43)
#loc198 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":96:42)
#loc199 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":97:17)
#loc200 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":97:32)
#loc201 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":97:38)
#loc202 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":97:41)
#loc203 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":97:9)
#loc204 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":98:31)
#loc205 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":98:9)
#loc206 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":98:23)
#loc207 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":98:26)
#loc208 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":98:27)
#loc209 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":100:24)
#loc210 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":100:9)
#loc211 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":102:22)
#loc212 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":102:5)
#loc213 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":103:18)
#loc214 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":103:5)
#loc215 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":65:1)
#loc216 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":65:29)
#loc217 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":107:1)
#loc218 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":121:1)
#loc221 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":108:1)
#loc222 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":109:5)
#loc223 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":120:5)
#loc224 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":109:8)
#loc225 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":110:5)
#loc226 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":111:9)
#loc227 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":119:9)
#loc228 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":113:13)
#loc229 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":113:52)
#loc230 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":114:13)
#loc231 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":114:68)
#loc232 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":113:30)
#loc233 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":113:48)
#loc234 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":114:35)
#loc235 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":114:42)
#loc236 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":114:50)
#loc237 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":114:53)
#loc238 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":114:67)
#loc239 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":115:13)
#loc240 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":115:41)
#loc241 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":115:17)
#loc242 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":115:25)
#loc243 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":115:31)
#loc244 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":115:32)
#loc245 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":115:38)
#loc246 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":115:37)
#loc247 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":116:26)
#loc248 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":116:32)
#loc249 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":116:19)
#loc250 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":117:35)
#loc251 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":117:13)
#loc252 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":118:13)
#loc253 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":118:18)
#loc254 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":123:1)
#loc255 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":137:1)
#loc256 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":125:5)
#loc257 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":125:12)
#loc258 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":126:12)
#loc259 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":126:5)
#loc260 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":127:5)
#loc261 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":134:5)
#loc262 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":128:9)
#loc263 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":128:71)
#loc264 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":128:46)
#loc265 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":128:53)
#loc266 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":128:56)
#loc267 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":128:70)
#loc268 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":129:9)
#loc269 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":129:46)
#loc270 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":129:13)
#loc271 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":129:30)
#loc272 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":129:36)
#loc273 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":129:37)
#loc274 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":129:43)
#loc275 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":129:42)
#loc276 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":130:17)
#loc277 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":130:32)
#loc278 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":130:38)
#loc279 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":130:41)
#loc280 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":130:9)
#loc281 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":131:31)
#loc282 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":131:9)
#loc283 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":131:23)
#loc284 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":131:26)
#loc285 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":131:27)
#loc286 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":133:24)
#loc287 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":133:9)
#loc288 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":135:22)
#loc289 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":135:5)
#loc290 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":136:18)
#loc291 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":136:5)
#loc292 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":66:1)
#loc293 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":66:28)
#loc294 = loc("/usr/include/string.h":141:1)
#loc295 = loc("/usr/include/string.h":142:14)
#loc296 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":140:1)
#loc297 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":154:1)
#loc300 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":141:1)
#loc301 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":142:5)
#loc302 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":153:5)
#loc303 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":142:8)
#loc304 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":143:5)
#loc305 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":144:9)
#loc306 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":152:9)
#loc307 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":146:13)
#loc308 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":146:49)
#loc309 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":147:13)
#loc310 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":147:54)
#loc311 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":146:30)
#loc312 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":146:45)
#loc313 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":147:35)
#loc314 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":147:42)
#loc315 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":147:50)
#loc316 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":147:53)
#loc317 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":148:13)
#loc318 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":148:41)
#loc319 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":148:17)
#loc320 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":148:25)
#loc321 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":148:31)
#loc322 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":148:32)
#loc323 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":148:38)
#loc324 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":148:37)
#loc325 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":149:19)
#loc326 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":149:26)
#loc327 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":149:32)
#loc328 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":150:31)
#loc329 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":150:13)
#loc330 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":151:13)
#loc331 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":151:18)
#loc332 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":156:1)
#loc333 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":170:1)
#loc334 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":158:5)
#loc335 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":158:12)
#loc336 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":159:12)
#loc337 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":159:5)
#loc338 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":160:5)
#loc339 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":167:5)
#loc340 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":161:9)
#loc341 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":161:63)
#loc342 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":161:41)
#loc343 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":161:48)
#loc344 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":161:51)
#loc345 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":161:62)
#loc346 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":162:9)
#loc347 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":162:47)
#loc348 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":162:13)
#loc349 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":162:31)
#loc350 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":162:37)
#loc351 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":162:38)
#loc352 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":162:44)
#loc353 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":162:43)
#loc354 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":163:16)
#loc355 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":163:32)
#loc356 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":163:37)
#loc357 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":163:40)
#loc358 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":163:9)
#loc359 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":163:41)
#loc360 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":164:32)
#loc361 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":164:9)
#loc362 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":164:24)
#loc363 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":164:27)
#loc364 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":164:28)
#loc365 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":166:24)
#loc366 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":166:9)
#loc367 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":168:21)
#loc368 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":168:5)
#loc369 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":169:17)
#loc370 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c":169:5)
#loc371 = loc(fused[#loc1, #loc2])
#loc372 = loc(fused[#loc3, #loc4])
#loc373 = loc(fused[#loc5, #loc6])
#loc374 = loc(fused[#loc7, #loc8])
#loc375 = loc(fused[#loc9, #loc10])
#loc376 = loc(fused[#loc11, #loc12])
#loc377 = loc(fused[#loc13, #loc14])
#loc378 = loc(fused[#loc15, #loc16])
#loc379 = loc(fused[#loc17, #loc18])
#loc381 = loc(fused[#loc22, #loc23])
#loc382 = loc(fused[#loc25, #loc23])
#loc383 = loc(fused[#loc26, #loc27])
#loc384 = loc(fused[#loc28, #loc29])
#loc385 = loc(fused[#loc30, #loc31])
#loc386 = loc(fused[#loc35, #loc36])
#loc387 = loc(fused[#loc37, #loc38])
#loc388 = loc(fused[#loc39, #loc40])
#loc389 = loc(fused[#loc41, #loc42])
#loc390 = loc(fused[#loc43, #loc40])
#loc391 = loc(fused[#loc54, #loc55])
#loc392 = loc(fused[#loc56, #loc57])
#loc393 = loc(fused[#loc59, #loc58])
#loc394 = loc(fused[#loc60, #loc61])
#loc395 = loc(fused[#loc62, #loc63])
#loc396 = loc(fused[#loc66, #loc67])
#loc397 = loc(fused[#loc65, #loc67])
#loc398 = loc(fused[#loc64, #loc63])
#loc399 = loc(fused[#loc68, #loc69])
#loc400 = loc(fused[#loc70, #loc71])
#loc401 = loc(fused[#loc72, #loc69])
#loc402 = loc(fused[#loc82, #loc81])
#loc403 = loc(fused[#loc87, #loc86])
#loc404 = loc(fused[#loc89, #loc88])
#loc405 = loc(fused[#loc92, #loc93])
#loc406 = loc(fused[#loc94, #loc95])
#loc407 = loc(fused[#loc96, #loc97])
#loc408 = loc(fused[#loc98, #loc99])
#loc409 = loc(fused[#loc100, #loc101])
#loc410 = loc(fused[#loc102, #loc103])
#loc411 = loc(fused[#loc104, #loc105])
#loc412 = loc(fused[#loc110, #loc111])
#loc415 = loc(fused[#loc121, #loc122])
#loc416 = loc(fused[#loc125, #loc126])
#loc417 = loc(fused[#loc129, #loc128])
#loc418 = loc(fused[#loc130, #loc131])
#loc419 = loc(fused[#loc133, #loc134])
#loc420 = loc(fused[#loc135, #loc136])
#loc421 = loc(fused[#loc137, #loc138])
#loc423 = loc(fused[#loc142, #loc143])
#loc424 = loc(fused[#loc145, #loc146, #loc147, #loc143])
#loc425 = loc(fused[#loc149, #loc150])
#loc426 = loc(fused[#loc151, #loc152])
#loc427 = loc(fused[#loc153, #loc154])
#loc428 = loc(fused[#loc158, #loc159])
#loc429 = loc(fused[#loc160, #loc161])
#loc430 = loc(fused[#loc162, #loc163])
#loc431 = loc(fused[#loc164, #loc165])
#loc432 = loc(fused[#loc166, #loc163])
#loc433 = loc(fused[#loc177, #loc178])
#loc434 = loc(fused[#loc179, #loc180])
#loc435 = loc(fused[#loc182, #loc181])
#loc436 = loc(fused[#loc183, #loc184])
#loc437 = loc(fused[#loc185, #loc186])
#loc438 = loc(fused[#loc189, #loc190])
#loc439 = loc(fused[#loc188, #loc190])
#loc440 = loc(fused[#loc187, #loc186])
#loc441 = loc(fused[#loc191, #loc192])
#loc442 = loc(fused[#loc193, #loc194])
#loc443 = loc(fused[#loc195, #loc192])
#loc444 = loc(fused[#loc205, #loc204])
#loc445 = loc(fused[#loc210, #loc209])
#loc446 = loc(fused[#loc212, #loc211])
#loc447 = loc(fused[#loc215, #loc216])
#loc448 = loc(fused[#loc217, #loc218])
#loc450 = loc(fused[#loc222, #loc223])
#loc451 = loc(fused[#loc225, #loc223])
#loc452 = loc(fused[#loc226, #loc227])
#loc453 = loc(fused[#loc228, #loc229])
#loc454 = loc(fused[#loc230, #loc231])
#loc455 = loc(fused[#loc235, #loc236])
#loc456 = loc(fused[#loc237, #loc238])
#loc457 = loc(fused[#loc239, #loc240])
#loc458 = loc(fused[#loc241, #loc242])
#loc459 = loc(fused[#loc243, #loc240])
#loc460 = loc(fused[#loc254, #loc255])
#loc461 = loc(fused[#loc256, #loc257])
#loc462 = loc(fused[#loc259, #loc258])
#loc463 = loc(fused[#loc260, #loc261])
#loc464 = loc(fused[#loc262, #loc263])
#loc465 = loc(fused[#loc266, #loc267])
#loc466 = loc(fused[#loc265, #loc267])
#loc467 = loc(fused[#loc264, #loc263])
#loc468 = loc(fused[#loc268, #loc269])
#loc469 = loc(fused[#loc270, #loc271])
#loc470 = loc(fused[#loc272, #loc269])
#loc471 = loc(fused[#loc282, #loc281])
#loc472 = loc(fused[#loc287, #loc286])
#loc473 = loc(fused[#loc289, #loc288])
#loc474 = loc(fused[#loc292, #loc293])
#loc475 = loc(fused[#loc294, #loc295])
#loc476 = loc(fused[#loc296, #loc297])
#loc478 = loc(fused[#loc301, #loc302])
#loc479 = loc(fused[#loc304, #loc302])
#loc480 = loc(fused[#loc305, #loc306])
#loc481 = loc(fused[#loc307, #loc308])
#loc482 = loc(fused[#loc309, #loc310])
#loc483 = loc(fused[#loc314, #loc315])
#loc484 = loc(fused[#loc317, #loc318])
#loc485 = loc(fused[#loc319, #loc320])
#loc486 = loc(fused[#loc321, #loc318])
#loc487 = loc(fused[#loc332, #loc333])
#loc488 = loc(fused[#loc334, #loc335])
#loc489 = loc(fused[#loc337, #loc336])
#loc490 = loc(fused[#loc338, #loc339])
#loc491 = loc(fused[#loc340, #loc341])
#loc492 = loc(fused[#loc344, #loc345])
#loc493 = loc(fused[#loc343, #loc345])
#loc494 = loc(fused[#loc342, #loc341])
#loc495 = loc(fused[#loc346, #loc347])
#loc496 = loc(fused[#loc348, #loc349])
#loc497 = loc(fused[#loc350, #loc347])
#loc498 = loc(fused[#loc358, #loc359])
#loc499 = loc(fused[#loc361, #loc360])
#loc500 = loc(fused[#loc366, #loc365])
#loc501 = loc(fused[#loc368, #loc367])
