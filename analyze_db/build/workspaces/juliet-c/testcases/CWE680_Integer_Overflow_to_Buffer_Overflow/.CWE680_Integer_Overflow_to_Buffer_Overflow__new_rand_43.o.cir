!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc5 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_43.cpp":24:16)
#loc6 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_43.cpp":24:21)
#loc8 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_43.cpp":27:12)
#loc58 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_43.cpp":56:27)
#loc59 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_43.cpp":56:32)
#loc110 = loc(fused[#loc5, #loc6])
#loc133 = loc(fused[#loc58, #loc59])
module @"/workspaces/juliet-c/testcases/CWE680_Integer_Overflow_to_Buffer_Overflow/CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_43.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc108)
  cir.func @_ZN55CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_439badSourceERi(%arg0: !cir.ptr<!s32i> loc(fused[#loc5, #loc6])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data", init, const] {alignment = 8 : i64} loc(#loc110)
    cir.store %arg0, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc7)
    %1 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
    %2 = cir.const #cir.int<1> : !s32i loc(#loc8)
    %3 = cir.binop(and, %1, %2) : !s32i loc(#loc8)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc8)
    cir.brcond %4 ^bb1, ^bb2 loc(#loc8)
  ^bb1:  // pred: ^bb0
    %5 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
    %6 = cir.cast(integral, %5 : !s32i), !u32i loc(#loc8)
    %7 = cir.const #cir.int<30> : !s32i loc(#loc8)
    %8 = cir.shift(left, %6 : !u32i, %7 : !s32i) -> !u32i loc(#loc8)
    %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
    %10 = cir.cast(integral, %9 : !s32i), !u32i loc(#loc8)
    %11 = cir.const #cir.int<15> : !s32i loc(#loc8)
    %12 = cir.shift(left, %10 : !u32i, %11 : !s32i) -> !u32i loc(#loc8)
    %13 = cir.binop(xor, %8, %12) : !u32i loc(#loc8)
    %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
    %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc8)
    %16 = cir.binop(xor, %13, %15) : !u32i loc(#loc8)
    cir.br ^bb3(%16 : !u32i) loc(#loc8)
  ^bb2:  // pred: ^bb0
    %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
    %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc8)
    %19 = cir.const #cir.int<30> : !s32i loc(#loc8)
    %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc8)
    %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
    %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc8)
    %23 = cir.const #cir.int<15> : !s32i loc(#loc8)
    %24 = cir.shift(left, %22 : !u32i, %23 : !s32i) -> !u32i loc(#loc8)
    %25 = cir.binop(xor, %20, %24) : !u32i loc(#loc8)
    %26 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
    %27 = cir.cast(integral, %26 : !s32i), !u32i loc(#loc8)
    %28 = cir.binop(xor, %25, %27) : !u32i loc(#loc8)
    %29 = cir.unary(minus, %28) : !u32i, !u32i loc(#loc8)
    %30 = cir.const #cir.int<1> : !s32i loc(#loc8)
    %31 = cir.cast(integral, %30 : !s32i), !u32i loc(#loc8)
    %32 = cir.binop(sub, %29, %31) : !u32i loc(#loc8)
    cir.br ^bb3(%32 : !u32i) loc(#loc8)
  ^bb3(%33: !u32i loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_43.cpp":27:12)):  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc8)
  ^bb4:  // pred: ^bb3
    %34 = cir.cast(integral, %33 : !u32i), !s32i loc(#loc8)
    %35 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc9)
    cir.store %34, %35 : !s32i, !cir.ptr<!s32i> loc(#loc111)
    cir.return loc(#loc4)
  } loc(#loc109)
  cir.func private @_Znam(!u64i) -> !cir.ptr<!void> loc(#loc112)
  cir.func private @printIntLine(!s32i) loc(#loc113)
  cir.func @_ZN55CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_433badEv() extra(#fn_attr1) {
    %0 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataBytes"] {alignment = 8 : i64} loc(#loc115)
    %1 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc116)
    %2 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["intPointer"] {alignment = 8 : i64} loc(#loc117)
    %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc118)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc23)
    %5 = cir.unary(minus, %4) nsw : !s32i, !s32i loc(#loc24)
    cir.store %5, %3 : !s32i, !cir.ptr<!s32i> loc(#loc119)
    cir.call @_ZN55CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_439badSourceERi(%3) : (!cir.ptr<!s32i>) -> () loc(#loc26)
    cir.br ^bb1 loc(#loc120)
  ^bb1:  // pred: ^bb0
    %6 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc29)
    %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc29)
    %8 = cir.const #cir.int<4> : !u64i loc(#loc121)
    %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc122)
    cir.store %9, %0 : !u64i, !cir.ptr<!u64i> loc(#loc123)
    %10 = cir.load %0 : !cir.ptr<!u64i>, !u64i loc(#loc33)
    %11 = cir.call @_Znam(%10) : (!u64i) -> !cir.ptr<!void> loc(#loc34)
    %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc124)
    %13 = cir.cast(bitcast, %12 : !cir.ptr<!s8i>), !cir.ptr<!s32i> loc(#loc124)
    cir.store %13, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc125)
    cir.br ^bb2 loc(#loc126)
  ^bb2:  // pred: ^bb1
    %14 = cir.const #cir.int<0> : !s32i loc(#loc40)
    %15 = cir.cast(integral, %14 : !s32i), !u64i loc(#loc40)
    cir.store %15, %1 : !u64i, !cir.ptr<!u64i> loc(#loc127)
    cir.br ^bb3 loc(#loc126)
  ^bb3:  // 2 preds: ^bb2, ^bb7
    %16 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc42)
    %17 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc43)
    %18 = cir.cast(integral, %17 : !s32i), !u64i loc(#loc43)
    %19 = cir.cmp(lt, %16, %18) : !u64i, !cir.bool loc(#loc128)
    cir.brcond %19 ^bb4, ^bb8 loc(#loc128)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc129)
  ^bb5:  // pred: ^bb4
    %20 = cir.const #cir.int<0> : !s32i loc(#loc45)
    %21 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc46)
    %22 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc47)
    %23 = cir.ptr_stride(%21 : !cir.ptr<!s32i>, %22 : !u64i), !cir.ptr<!s32i> loc(#loc48)
    cir.store %20, %23 : !s32i, !cir.ptr<!s32i> loc(#loc130)
    cir.br ^bb6 loc(#loc39)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc39)
  ^bb7:  // pred: ^bb6
    %24 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc49)
    %25 = cir.unary(inc, %24) : !u64i, !u64i loc(#loc50)
    cir.store %25, %1 : !u64i, !cir.ptr<!u64i> loc(#loc131)
    cir.br ^bb3 loc(#loc126)
  ^bb8:  // pred: ^bb3
    cir.br ^bb9 loc(#loc39)
  ^bb9:  // pred: ^bb8
    %26 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc51)
    %27 = cir.const #cir.int<0> : !s32i loc(#loc52)
    %28 = cir.ptr_stride(%26 : !cir.ptr<!s32i>, %27 : !s32i), !cir.ptr<!s32i> loc(#loc53)
    %29 = cir.load %28 : !cir.ptr<!s32i>, !s32i loc(#loc51)
    cir.call @printIntLine(%29) : (!s32i) -> () loc(#loc54)
    %30 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc55)
    cir.delete.array %30 : <!s32i> loc(#loc55)
    cir.br ^bb10 loc(#loc28)
  ^bb10:  // pred: ^bb9
    cir.return loc(#loc15)
  } loc(#loc114)
  cir.func internal private @_ZN55CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_43L13goodG2BSourceERi(%arg0: !cir.ptr<!s32i> loc(fused[#loc58, #loc59])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data", init, const] {alignment = 8 : i64} loc(#loc133)
    cir.store %arg0, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc60)
    %1 = cir.const #cir.int<20> : !s32i loc(#loc61)
    %2 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc62)
    cir.store %1, %2 : !s32i, !cir.ptr<!s32i> loc(#loc134)
    cir.return loc(#loc57)
  } loc(#loc132)
  cir.func internal private @_ZN55CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_43L7goodG2BEv() extra(#fn_attr1) {
    %0 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataBytes"] {alignment = 8 : i64} loc(#loc136)
    %1 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc137)
    %2 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["intPointer"] {alignment = 8 : i64} loc(#loc138)
    %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc139)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc72)
    %5 = cir.unary(minus, %4) nsw : !s32i, !s32i loc(#loc73)
    cir.store %5, %3 : !s32i, !cir.ptr<!s32i> loc(#loc140)
    cir.call @_ZN55CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_43L13goodG2BSourceERi(%3) : (!cir.ptr<!s32i>) -> () loc(#loc75)
    cir.br ^bb1 loc(#loc141)
  ^bb1:  // pred: ^bb0
    %6 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc78)
    %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc78)
    %8 = cir.const #cir.int<4> : !u64i loc(#loc142)
    %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc143)
    cir.store %9, %0 : !u64i, !cir.ptr<!u64i> loc(#loc144)
    %10 = cir.load %0 : !cir.ptr<!u64i>, !u64i loc(#loc82)
    %11 = cir.call @_Znam(%10) : (!u64i) -> !cir.ptr<!void> loc(#loc83)
    %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc145)
    %13 = cir.cast(bitcast, %12 : !cir.ptr<!s8i>), !cir.ptr<!s32i> loc(#loc145)
    cir.store %13, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc146)
    cir.br ^bb2 loc(#loc147)
  ^bb2:  // pred: ^bb1
    %14 = cir.const #cir.int<0> : !s32i loc(#loc89)
    %15 = cir.cast(integral, %14 : !s32i), !u64i loc(#loc89)
    cir.store %15, %1 : !u64i, !cir.ptr<!u64i> loc(#loc148)
    cir.br ^bb3 loc(#loc147)
  ^bb3:  // 2 preds: ^bb2, ^bb7
    %16 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc91)
    %17 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc92)
    %18 = cir.cast(integral, %17 : !s32i), !u64i loc(#loc92)
    %19 = cir.cmp(lt, %16, %18) : !u64i, !cir.bool loc(#loc149)
    cir.brcond %19 ^bb4, ^bb8 loc(#loc149)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc150)
  ^bb5:  // pred: ^bb4
    %20 = cir.const #cir.int<0> : !s32i loc(#loc94)
    %21 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc95)
    %22 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc96)
    %23 = cir.ptr_stride(%21 : !cir.ptr<!s32i>, %22 : !u64i), !cir.ptr<!s32i> loc(#loc97)
    cir.store %20, %23 : !s32i, !cir.ptr<!s32i> loc(#loc151)
    cir.br ^bb6 loc(#loc88)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc88)
  ^bb7:  // pred: ^bb6
    %24 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc98)
    %25 = cir.unary(inc, %24) : !u64i, !u64i loc(#loc99)
    cir.store %25, %1 : !u64i, !cir.ptr<!u64i> loc(#loc152)
    cir.br ^bb3 loc(#loc147)
  ^bb8:  // pred: ^bb3
    cir.br ^bb9 loc(#loc88)
  ^bb9:  // pred: ^bb8
    %26 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc100)
    %27 = cir.const #cir.int<0> : !s32i loc(#loc101)
    %28 = cir.ptr_stride(%26 : !cir.ptr<!s32i>, %27 : !s32i), !cir.ptr<!s32i> loc(#loc102)
    %29 = cir.load %28 : !cir.ptr<!s32i>, !s32i loc(#loc100)
    cir.call @printIntLine(%29) : (!s32i) -> () loc(#loc103)
    %30 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc104)
    cir.delete.array %30 : <!s32i> loc(#loc104)
    cir.br ^bb10 loc(#loc77)
  ^bb10:  // pred: ^bb9
    cir.return loc(#loc64)
  } loc(#loc135)
  cir.func @_ZN55CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_434goodEv() extra(#fn_attr1) {
    cir.call @_ZN55CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_43L7goodG2BEv() : () -> () loc(#loc107)
    cir.return loc(#loc106)
  } loc(#loc153)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE680_Integer_Overflow_to_Buffer_Overflow/CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_43.cpp":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_43.cpp":24:1)
#loc4 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_43.cpp":28:1)
#loc7 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_43.cpp":25:1)
#loc9 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_43.cpp":27:5)
#loc10 = loc("/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/new":128:20)
#loc11 = loc("/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/new":129:41)
#loc12 = loc("../../testcasesupport/std_testcase_io.h":18:1)
#loc13 = loc("../../testcasesupport/std_testcase_io.h":18:33)
#loc14 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_43.cpp":30:1)
#loc15 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_43.cpp":49:1)
#loc16 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_43.cpp":37:9)
#loc17 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_43.cpp":37:16)
#loc18 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_43.cpp":37:26)
#loc19 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_43.cpp":38:9)
#loc20 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_43.cpp":38:14)
#loc21 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_43.cpp":32:5)
#loc22 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_43.cpp":32:9)
#loc23 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_43.cpp":34:13)
#loc24 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_43.cpp":34:12)
#loc25 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_43.cpp":34:5)
#loc26 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_43.cpp":35:5)
#loc27 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_43.cpp":36:5)
#loc28 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_43.cpp":48:5)
#loc29 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_43.cpp":40:21)
#loc30 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_43.cpp":40:28)
#loc31 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_43.cpp":40:38)
#loc32 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_43.cpp":40:9)
#loc33 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_43.cpp":41:37)
#loc34 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_43.cpp":30:6)
#loc35 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_43.cpp":41:28)
#loc36 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_43.cpp":41:46)
#loc37 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_43.cpp":41:9)
#loc38 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_43.cpp":42:9)
#loc39 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_43.cpp":45:9)
#loc40 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_43.cpp":42:18)
#loc41 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_43.cpp":42:14)
#loc42 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_43.cpp":42:21)
#loc43 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_43.cpp":42:33)
#loc44 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_43.cpp":43:9)
#loc45 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_43.cpp":44:29)
#loc46 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_43.cpp":44:13)
#loc47 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_43.cpp":44:24)
#loc48 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_43.cpp":44:25)
#loc49 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_43.cpp":42:40)
#loc50 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_43.cpp":42:39)
#loc51 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_43.cpp":46:22)
#loc52 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_43.cpp":46:33)
#loc53 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_43.cpp":46:34)
#loc54 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_43.cpp":46:9)
#loc55 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_43.cpp":47:19)
#loc56 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_43.cpp":56:1)
#loc57 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_43.cpp":60:1)
#loc60 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_43.cpp":57:1)
#loc61 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_43.cpp":59:12)
#loc62 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_43.cpp":59:5)
#loc63 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_43.cpp":62:1)
#loc64 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_43.cpp":81:1)
#loc65 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_43.cpp":69:9)
#loc66 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_43.cpp":69:16)
#loc67 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_43.cpp":69:26)
#loc68 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_43.cpp":70:9)
#loc69 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_43.cpp":70:14)
#loc70 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_43.cpp":64:5)
#loc71 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_43.cpp":64:9)
#loc72 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_43.cpp":66:13)
#loc73 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_43.cpp":66:12)
#loc74 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_43.cpp":66:5)
#loc75 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_43.cpp":67:5)
#loc76 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_43.cpp":68:5)
#loc77 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_43.cpp":80:5)
#loc78 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_43.cpp":72:21)
#loc79 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_43.cpp":72:28)
#loc80 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_43.cpp":72:38)
#loc81 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_43.cpp":72:9)
#loc82 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_43.cpp":73:37)
#loc83 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_43.cpp":62:13)
#loc84 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_43.cpp":73:28)
#loc85 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_43.cpp":73:46)
#loc86 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_43.cpp":73:9)
#loc87 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_43.cpp":74:9)
#loc88 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_43.cpp":77:9)
#loc89 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_43.cpp":74:18)
#loc90 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_43.cpp":74:14)
#loc91 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_43.cpp":74:21)
#loc92 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_43.cpp":74:33)
#loc93 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_43.cpp":75:9)
#loc94 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_43.cpp":76:29)
#loc95 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_43.cpp":76:13)
#loc96 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_43.cpp":76:24)
#loc97 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_43.cpp":76:25)
#loc98 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_43.cpp":74:40)
#loc99 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_43.cpp":74:39)
#loc100 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_43.cpp":78:22)
#loc101 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_43.cpp":78:33)
#loc102 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_43.cpp":78:34)
#loc103 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_43.cpp":78:9)
#loc104 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_43.cpp":79:19)
#loc105 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_43.cpp":83:1)
#loc106 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_43.cpp":86:1)
#loc107 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_43.cpp":85:5)
#loc108 = loc(fused[#loc1, #loc2])
#loc109 = loc(fused[#loc3, #loc4])
#loc111 = loc(fused[#loc9, #loc8])
#loc112 = loc(fused[#loc10, #loc11])
#loc113 = loc(fused[#loc12, #loc13])
#loc114 = loc(fused[#loc14, #loc15])
#loc115 = loc(fused[#loc16, #loc17])
#loc116 = loc(fused[#loc16, #loc18])
#loc117 = loc(fused[#loc19, #loc20])
#loc118 = loc(fused[#loc21, #loc22])
#loc119 = loc(fused[#loc25, #loc23])
#loc120 = loc(fused[#loc27, #loc28])
#loc121 = loc(fused[#loc30, #loc31])
#loc122 = loc(fused[#loc29, #loc31])
#loc123 = loc(fused[#loc32, #loc31])
#loc124 = loc(fused[#loc35, #loc36])
#loc125 = loc(fused[#loc37, #loc36])
#loc126 = loc(fused[#loc38, #loc39])
#loc127 = loc(fused[#loc41, #loc40])
#loc128 = loc(fused[#loc42, #loc43])
#loc129 = loc(fused[#loc44, #loc39])
#loc130 = loc(fused[#loc46, #loc45])
#loc131 = loc(fused[#loc50, #loc49])
#loc132 = loc(fused[#loc56, #loc57])
#loc134 = loc(fused[#loc62, #loc61])
#loc135 = loc(fused[#loc63, #loc64])
#loc136 = loc(fused[#loc65, #loc66])
#loc137 = loc(fused[#loc65, #loc67])
#loc138 = loc(fused[#loc68, #loc69])
#loc139 = loc(fused[#loc70, #loc71])
#loc140 = loc(fused[#loc74, #loc72])
#loc141 = loc(fused[#loc76, #loc77])
#loc142 = loc(fused[#loc79, #loc80])
#loc143 = loc(fused[#loc78, #loc80])
#loc144 = loc(fused[#loc81, #loc80])
#loc145 = loc(fused[#loc84, #loc85])
#loc146 = loc(fused[#loc86, #loc85])
#loc147 = loc(fused[#loc87, #loc88])
#loc148 = loc(fused[#loc90, #loc89])
#loc149 = loc(fused[#loc91, #loc92])
#loc150 = loc(fused[#loc93, #loc88])
#loc151 = loc(fused[#loc95, #loc94])
#loc152 = loc(fused[#loc99, #loc98])
#loc153 = loc(fused[#loc105, #loc106])
