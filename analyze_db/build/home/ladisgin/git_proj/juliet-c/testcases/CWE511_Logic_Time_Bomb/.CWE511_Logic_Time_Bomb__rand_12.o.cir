!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE511_Logic_Time_Bomb/CWE511_Logic_Time_Bomb__rand_12.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func no_proto private @globalReturnsTrueOrFalse(...) -> !s32i loc(#loc75)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc76)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc77)
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc78)
  cir.func private @unlink(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc79)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"important_file.txt\00" : !cir.array<!s8i x 19>> : !cir.array<!s8i x 19> {alignment = 1 : i64} loc(#loc11)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc80)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Happy New Year!\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc14)
  cir.func no_proto @CWE511_Logic_Time_Bomb__rand_12_bad() extra(#fn_attr1) {
    cir.br ^bb1 loc(#loc82)
  ^bb1:  // pred: ^bb0
    %0 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc83)
    %1 = cir.cast(bitcast, %0 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc83)
    %2 = cir.call %1() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc19)
    %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc19)
    cir.brcond %3 ^bb2, ^bb7 loc(#loc84)
  ^bb2:  // pred: ^bb1
    %4 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc24)
    %5 = cir.call @time(%4) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc25)
    %6 = cir.cast(integral, %5 : !s64i), !u32i loc(#loc25)
    cir.call @srand(%6) : (!u32i) -> () extra(#fn_attr) loc(#loc26)
    cir.br ^bb3 loc(#loc85)
  ^bb3:  // pred: ^bb2
    %7 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc29)
    %8 = cir.const #cir.int<20000> : !s32i loc(#loc30)
    %9 = cir.cmp(eq, %7, %8) : !s32i, !cir.bool loc(#loc86)
    cir.brcond %9 ^bb4, ^bb5 loc(#loc87)
  ^bb4:  // pred: ^bb3
    %10 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 19>> loc(#loc11)
    %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 19>>), !cir.ptr<!s8i> loc(#loc11)
    %12 = cir.call @unlink(%11) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc32)
    cir.br ^bb5 loc(#loc28)
  ^bb5:  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc28)
  ^bb6:  // pred: ^bb5
    cir.br ^bb12 loc(#loc22)
  ^bb7:  // pred: ^bb1
    %13 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc33)
    %14 = cir.call @time(%13) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc34)
    %15 = cir.cast(integral, %14 : !s64i), !u32i loc(#loc34)
    cir.call @srand(%15) : (!u32i) -> () extra(#fn_attr) loc(#loc35)
    cir.br ^bb8 loc(#loc88)
  ^bb8:  // pred: ^bb7
    %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc38)
    %17 = cir.const #cir.int<20000> : !s32i loc(#loc39)
    %18 = cir.cmp(eq, %16, %17) : !s32i, !cir.bool loc(#loc89)
    cir.brcond %18 ^bb9, ^bb10 loc(#loc90)
  ^bb9:  // pred: ^bb8
    %19 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc14)
    %20 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc14)
    cir.call @printLine(%20) : (!cir.ptr<!s8i>) -> () loc(#loc41)
    cir.br ^bb10 loc(#loc37)
  ^bb10:  // 2 preds: ^bb8, ^bb9
    cir.br ^bb11 loc(#loc37)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc18)
  ^bb12:  // 2 preds: ^bb6, ^bb11
    cir.br ^bb13 loc(#loc18)
  ^bb13:  // pred: ^bb12
    cir.return loc(#loc16)
  } loc(#loc81)
  cir.func no_proto @CWE511_Logic_Time_Bomb__rand_12_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<!void ()>> loc(#loc92)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc44)
    cir.return loc(#loc43)
  } loc(#loc91)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    cir.br ^bb1 loc(#loc94)
  ^bb1:  // pred: ^bb0
    %0 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc95)
    %1 = cir.cast(bitcast, %0 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc95)
    %2 = cir.call %1() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc50)
    %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc50)
    cir.brcond %3 ^bb2, ^bb7 loc(#loc96)
  ^bb2:  // pred: ^bb1
    %4 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc55)
    %5 = cir.call @time(%4) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc56)
    %6 = cir.cast(integral, %5 : !s64i), !u32i loc(#loc56)
    cir.call @srand(%6) : (!u32i) -> () extra(#fn_attr) loc(#loc57)
    cir.br ^bb3 loc(#loc97)
  ^bb3:  // pred: ^bb2
    %7 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc60)
    %8 = cir.const #cir.int<20000> : !s32i loc(#loc61)
    %9 = cir.cmp(eq, %7, %8) : !s32i, !cir.bool loc(#loc98)
    cir.brcond %9 ^bb4, ^bb5 loc(#loc99)
  ^bb4:  // pred: ^bb3
    %10 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc63)
    %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc63)
    cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc64)
    cir.br ^bb5 loc(#loc59)
  ^bb5:  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc59)
  ^bb6:  // pred: ^bb5
    cir.br ^bb12 loc(#loc53)
  ^bb7:  // pred: ^bb1
    %12 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc65)
    %13 = cir.call @time(%12) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc66)
    %14 = cir.cast(integral, %13 : !s64i), !u32i loc(#loc66)
    cir.call @srand(%14) : (!u32i) -> () extra(#fn_attr) loc(#loc67)
    cir.br ^bb8 loc(#loc100)
  ^bb8:  // pred: ^bb7
    %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc70)
    %16 = cir.const #cir.int<20000> : !s32i loc(#loc71)
    %17 = cir.cmp(eq, %15, %16) : !s32i, !cir.bool loc(#loc101)
    cir.brcond %17 ^bb9, ^bb10 loc(#loc102)
  ^bb9:  // pred: ^bb8
    %18 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc73)
    %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc73)
    cir.call @printLine(%19) : (!cir.ptr<!s8i>) -> () loc(#loc74)
    cir.br ^bb10 loc(#loc69)
  ^bb10:  // 2 preds: ^bb8, ^bb9
    cir.br ^bb11 loc(#loc69)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc49)
  ^bb12:  // 2 preds: ^bb6, ^bb11
    cir.br ^bb13 loc(#loc49)
  ^bb13:  // pred: ^bb12
    cir.return loc(#loc47)
  } loc(#loc93)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE511_Logic_Time_Bomb/CWE511_Logic_Time_Bomb__rand_12.c":0:0)
#loc1 = loc("../../testcasesupport/std_testcase_io.h":52:1)
#loc2 = loc("../../testcasesupport/std_testcase_io.h":52:30)
#loc3 = loc("/usr/include/stdlib.h":575:1)
#loc4 = loc("/usr/include/stdlib.h":575:41)
#loc5 = loc("/usr/include/time.h":76:1)
#loc6 = loc("/usr/include/time.h":76:38)
#loc7 = loc("/usr/include/stdlib.h":573:1)
#loc8 = loc("/usr/include/stdlib.h":573:24)
#loc9 = loc("/usr/include/unistd.h":858:1)
#loc10 = loc("/usr/include/unistd.h":858:48)
#loc11 = loc("CWE511_Logic_Time_Bomb__rand_12.c":37:20)
#loc12 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc13 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc14 = loc("CWE511_Logic_Time_Bomb__rand_12.c":46:23)
#loc15 = loc("CWE511_Logic_Time_Bomb__rand_12.c":29:1)
#loc16 = loc("CWE511_Logic_Time_Bomb__rand_12.c":49:1)
#loc17 = loc("CWE511_Logic_Time_Bomb__rand_12.c":31:5)
#loc18 = loc("CWE511_Logic_Time_Bomb__rand_12.c":48:5)
#loc19 = loc("CWE511_Logic_Time_Bomb__rand_12.c":31:8)
#loc20 = loc("CWE511_Logic_Time_Bomb__rand_12.c":31:33)
#loc21 = loc("CWE511_Logic_Time_Bomb__rand_12.c":32:5)
#loc22 = loc("CWE511_Logic_Time_Bomb__rand_12.c":39:5)
#loc23 = loc("CWE511_Logic_Time_Bomb__rand_12.c":41:5)
#loc24 = loc("CWE511_Logic_Time_Bomb__rand_12.c":33:30)
#loc25 = loc("CWE511_Logic_Time_Bomb__rand_12.c":33:25)
#loc26 = loc("CWE511_Logic_Time_Bomb__rand_12.c":33:9)
#loc27 = loc("CWE511_Logic_Time_Bomb__rand_12.c":35:9)
#loc28 = loc("CWE511_Logic_Time_Bomb__rand_12.c":38:9)
#loc29 = loc("CWE511_Logic_Time_Bomb__rand_12.c":35:13)
#loc30 = loc("CWE511_Logic_Time_Bomb__rand_12.c":35:23)
#loc31 = loc("CWE511_Logic_Time_Bomb__rand_12.c":36:9)
#loc32 = loc("CWE511_Logic_Time_Bomb__rand_12.c":37:13)
#loc33 = loc("CWE511_Logic_Time_Bomb__rand_12.c":42:30)
#loc34 = loc("CWE511_Logic_Time_Bomb__rand_12.c":42:25)
#loc35 = loc("CWE511_Logic_Time_Bomb__rand_12.c":42:9)
#loc36 = loc("CWE511_Logic_Time_Bomb__rand_12.c":44:9)
#loc37 = loc("CWE511_Logic_Time_Bomb__rand_12.c":47:9)
#loc38 = loc("CWE511_Logic_Time_Bomb__rand_12.c":44:13)
#loc39 = loc("CWE511_Logic_Time_Bomb__rand_12.c":44:23)
#loc40 = loc("CWE511_Logic_Time_Bomb__rand_12.c":45:9)
#loc41 = loc("CWE511_Logic_Time_Bomb__rand_12.c":46:13)
#loc42 = loc("CWE511_Logic_Time_Bomb__rand_12.c":78:1)
#loc43 = loc("CWE511_Logic_Time_Bomb__rand_12.c":81:1)
#loc44 = loc("CWE511_Logic_Time_Bomb__rand_12.c":80:5)
#loc45 = loc("CWE511_Logic_Time_Bomb__rand_12.c":80:11)
#loc46 = loc("CWE511_Logic_Time_Bomb__rand_12.c":56:1)
#loc47 = loc("CWE511_Logic_Time_Bomb__rand_12.c":76:1)
#loc48 = loc("CWE511_Logic_Time_Bomb__rand_12.c":58:5)
#loc49 = loc("CWE511_Logic_Time_Bomb__rand_12.c":75:5)
#loc50 = loc("CWE511_Logic_Time_Bomb__rand_12.c":58:8)
#loc51 = loc("CWE511_Logic_Time_Bomb__rand_12.c":58:33)
#loc52 = loc("CWE511_Logic_Time_Bomb__rand_12.c":59:5)
#loc53 = loc("CWE511_Logic_Time_Bomb__rand_12.c":66:5)
#loc54 = loc("CWE511_Logic_Time_Bomb__rand_12.c":68:5)
#loc55 = loc("CWE511_Logic_Time_Bomb__rand_12.c":60:30)
#loc56 = loc("CWE511_Logic_Time_Bomb__rand_12.c":60:25)
#loc57 = loc("CWE511_Logic_Time_Bomb__rand_12.c":60:9)
#loc58 = loc("CWE511_Logic_Time_Bomb__rand_12.c":62:9)
#loc59 = loc("CWE511_Logic_Time_Bomb__rand_12.c":65:9)
#loc60 = loc("CWE511_Logic_Time_Bomb__rand_12.c":62:13)
#loc61 = loc("CWE511_Logic_Time_Bomb__rand_12.c":62:23)
#loc62 = loc("CWE511_Logic_Time_Bomb__rand_12.c":63:9)
#loc63 = loc("CWE511_Logic_Time_Bomb__rand_12.c":64:23)
#loc64 = loc("CWE511_Logic_Time_Bomb__rand_12.c":64:13)
#loc65 = loc("CWE511_Logic_Time_Bomb__rand_12.c":69:30)
#loc66 = loc("CWE511_Logic_Time_Bomb__rand_12.c":69:25)
#loc67 = loc("CWE511_Logic_Time_Bomb__rand_12.c":69:9)
#loc68 = loc("CWE511_Logic_Time_Bomb__rand_12.c":71:9)
#loc69 = loc("CWE511_Logic_Time_Bomb__rand_12.c":74:9)
#loc70 = loc("CWE511_Logic_Time_Bomb__rand_12.c":71:13)
#loc71 = loc("CWE511_Logic_Time_Bomb__rand_12.c":71:23)
#loc72 = loc("CWE511_Logic_Time_Bomb__rand_12.c":72:9)
#loc73 = loc("CWE511_Logic_Time_Bomb__rand_12.c":73:23)
#loc74 = loc("CWE511_Logic_Time_Bomb__rand_12.c":73:13)
#loc75 = loc(fused[#loc1, #loc2])
#loc76 = loc(fused[#loc3, #loc4])
#loc77 = loc(fused[#loc5, #loc6])
#loc78 = loc(fused[#loc7, #loc8])
#loc79 = loc(fused[#loc9, #loc10])
#loc80 = loc(fused[#loc12, #loc13])
#loc81 = loc(fused[#loc15, #loc16])
#loc82 = loc(fused[#loc17, #loc18])
#loc83 = loc(fused[#loc19, #loc20])
#loc84 = loc(fused[#loc21, #loc22, #loc23, #loc18])
#loc85 = loc(fused[#loc27, #loc28])
#loc86 = loc(fused[#loc29, #loc30])
#loc87 = loc(fused[#loc31, #loc28])
#loc88 = loc(fused[#loc36, #loc37])
#loc89 = loc(fused[#loc38, #loc39])
#loc90 = loc(fused[#loc40, #loc37])
#loc91 = loc(fused[#loc42, #loc43])
#loc92 = loc(fused[#loc44, #loc45])
#loc93 = loc(fused[#loc46, #loc47])
#loc94 = loc(fused[#loc48, #loc49])
#loc95 = loc(fused[#loc50, #loc51])
#loc96 = loc(fused[#loc52, #loc53, #loc54, #loc49])
#loc97 = loc(fused[#loc58, #loc59])
#loc98 = loc(fused[#loc60, #loc61])
#loc99 = loc(fused[#loc62, #loc59])
#loc100 = loc(fused[#loc68, #loc69])
#loc101 = loc(fused[#loc70, #loc71])
#loc102 = loc(fused[#loc72, #loc69])
