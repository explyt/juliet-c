!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_06.c":109:10)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_06.c":109:14)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_06.c":109:20)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_06.c":109:32)
#loc200 = loc(fused[#loc67, #loc68])
#loc201 = loc(fused[#loc69, #loc70])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_06.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc173)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc174)
  cir.func private @printIntLine(!s32i) loc(#loc175)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc176)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_06_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc178)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc13)
    cir.store %1, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc179)
    cir.scope {
      %2 = cir.const #cir.int<5> : !s32i loc(#loc17)
      %3 = cir.const #cir.int<5> : !s32i loc(#loc18)
      %4 = cir.cmp(eq, %2, %3) : !s32i, !cir.bool loc(#loc181)
      cir.if %4 {
        %5 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc20)
        %6 = cir.const #cir.int<10> : !s32i loc(#loc21)
        %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc21)
        %8 = cir.call @malloc(%7) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc20)
        %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc183)
        cir.store %9, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc184)
        cir.scope {
          %10 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc26)
          %11 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc27)
          %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc27)
          %13 = cir.cmp(eq, %10, %12) : !cir.ptr<!s32i>, !cir.bool loc(#loc186)
          cir.if %13 {
            %14 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc29)
            %15 = cir.const #cir.int<1> : !s32i loc(#loc30)
            %16 = cir.unary(minus, %15) : !s32i, !s32i loc(#loc31)
            cir.call @exit(%16) : (!s32i) -> () extra(#fn_attr) loc(#loc29)
          } loc(#loc187)
        } loc(#loc185)
      } loc(#loc182)
    } loc(#loc180)
    cir.scope {
      %2 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc189)
      %3 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc189)
      cir.store %3, %2 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc189)
      %4 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc36)
      %5 = cir.cast(bitcast, %4 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc36)
      %6 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc37)
      %7 = cir.cast(bitcast, %6 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc37)
      %8 = cir.const #cir.int<10> : !s32i loc(#loc38)
      %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc38)
      %10 = cir.const #cir.int<4> : !u64i loc(#loc190)
      %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc191)
      cir.libc.memcpy %11 bytes from %7 to %5 : !u64i, !cir.ptr<!void> -> !cir.ptr<!void> loc(#loc192)
      %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc43)
      %13 = cir.const #cir.int<0> : !s32i loc(#loc44)
      %14 = cir.ptr_stride(%12 : !cir.ptr<!s32i>, %13 : !s32i), !cir.ptr<!s32i> loc(#loc45)
      %15 = cir.load %14 : !cir.ptr<!s32i>, !s32i loc(#loc43)
      cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc46)
      %16 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc47)
      %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc48)
      %18 = cir.cast(bitcast, %17 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc48)
      cir.call @free(%18) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc47)
    } loc(#loc188)
    cir.return loc(#loc10)
  } loc(#loc177)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_06_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc194)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc51)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc195)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc53)
    cir.return loc(#loc50)
  } loc(#loc193)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc196)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc197)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc198)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc61)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc62)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc63)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc64)
  cir.func @main(%arg0: !s32i loc(fused[#loc67, #loc68]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc69, #loc70])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc200)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc201)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc66)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc71)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc71)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc72)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc73)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc73)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc74)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc61)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc61)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc75)
    %8 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_06_good : !cir.ptr<!cir.func<!void ()>> loc(#loc202)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_06_good() : () -> () loc(#loc76)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc62)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc62)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc78)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc63)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc63)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc79)
    %13 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_06_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc203)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_06_bad() : () -> () loc(#loc80)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc64)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc64)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc82)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc83)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc204)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc204)
    cir.return %17 : !s32i loc(#loc204)
  } loc(#loc199)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc85)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc206)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc90)
    cir.store %1, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc207)
    cir.scope {
      %2 = cir.const #cir.int<5> : !s32i loc(#loc94)
      %3 = cir.const #cir.int<5> : !s32i loc(#loc95)
      %4 = cir.cmp(ne, %2, %3) : !s32i, !cir.bool loc(#loc209)
      cir.if %4 {
        %5 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc85)
        %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc85)
        cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc99)
      } else {
        %5 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc100)
        %6 = cir.const #cir.int<10> : !s32i loc(#loc101)
        %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc101)
        %8 = cir.const #cir.int<4> : !u64i loc(#loc211)
        %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc212)
        %10 = cir.call @malloc(%9) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc100)
        %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc213)
        cir.store %11, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc214)
        cir.scope {
          %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc108)
          %13 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc109)
          %14 = cir.cast(bitcast, %13 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc109)
          %15 = cir.cmp(eq, %12, %14) : !cir.ptr<!s32i>, !cir.bool loc(#loc216)
          cir.if %15 {
            %16 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc111)
            %17 = cir.const #cir.int<1> : !s32i loc(#loc112)
            %18 = cir.unary(minus, %17) : !s32i, !s32i loc(#loc113)
            cir.call @exit(%18) : (!s32i) -> () extra(#fn_attr) loc(#loc111)
          } loc(#loc217)
        } loc(#loc215)
      } loc(#loc210)
    } loc(#loc208)
    cir.scope {
      %2 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc219)
      %3 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc219)
      cir.store %3, %2 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc219)
      %4 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc118)
      %5 = cir.cast(bitcast, %4 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc118)
      %6 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc119)
      %7 = cir.cast(bitcast, %6 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc119)
      %8 = cir.const #cir.int<10> : !s32i loc(#loc120)
      %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc120)
      %10 = cir.const #cir.int<4> : !u64i loc(#loc220)
      %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc221)
      cir.libc.memcpy %11 bytes from %7 to %5 : !u64i, !cir.ptr<!void> -> !cir.ptr<!void> loc(#loc222)
      %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc125)
      %13 = cir.const #cir.int<0> : !s32i loc(#loc126)
      %14 = cir.ptr_stride(%12 : !cir.ptr<!s32i>, %13 : !s32i), !cir.ptr<!s32i> loc(#loc127)
      %15 = cir.load %14 : !cir.ptr<!s32i>, !s32i loc(#loc125)
      cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc128)
      %16 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc129)
      %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc130)
      %18 = cir.cast(bitcast, %17 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc130)
      cir.call @free(%18) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc129)
    } loc(#loc218)
    cir.return loc(#loc87)
  } loc(#loc205)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc224)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc135)
    cir.store %1, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc225)
    cir.scope {
      %2 = cir.const #cir.int<5> : !s32i loc(#loc139)
      %3 = cir.const #cir.int<5> : !s32i loc(#loc140)
      %4 = cir.cmp(eq, %2, %3) : !s32i, !cir.bool loc(#loc227)
      cir.if %4 {
        %5 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc142)
        %6 = cir.const #cir.int<10> : !s32i loc(#loc143)
        %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc143)
        %8 = cir.const #cir.int<4> : !u64i loc(#loc229)
        %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc230)
        %10 = cir.call @malloc(%9) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc142)
        %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc231)
        cir.store %11, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc232)
        cir.scope {
          %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc150)
          %13 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc151)
          %14 = cir.cast(bitcast, %13 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc151)
          %15 = cir.cmp(eq, %12, %14) : !cir.ptr<!s32i>, !cir.bool loc(#loc234)
          cir.if %15 {
            %16 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc153)
            %17 = cir.const #cir.int<1> : !s32i loc(#loc154)
            %18 = cir.unary(minus, %17) : !s32i, !s32i loc(#loc155)
            cir.call @exit(%18) : (!s32i) -> () extra(#fn_attr) loc(#loc153)
          } loc(#loc235)
        } loc(#loc233)
      } loc(#loc228)
    } loc(#loc226)
    cir.scope {
      %2 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc237)
      %3 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc237)
      cir.store %3, %2 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc237)
      %4 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc160)
      %5 = cir.cast(bitcast, %4 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc160)
      %6 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc161)
      %7 = cir.cast(bitcast, %6 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc161)
      %8 = cir.const #cir.int<10> : !s32i loc(#loc162)
      %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc162)
      %10 = cir.const #cir.int<4> : !u64i loc(#loc238)
      %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc239)
      cir.libc.memcpy %11 bytes from %7 to %5 : !u64i, !cir.ptr<!void> -> !cir.ptr<!void> loc(#loc240)
      %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc167)
      %13 = cir.const #cir.int<0> : !s32i loc(#loc168)
      %14 = cir.ptr_stride(%12 : !cir.ptr<!s32i>, %13 : !s32i), !cir.ptr<!s32i> loc(#loc169)
      %15 = cir.load %14 : !cir.ptr<!s32i>, !s32i loc(#loc167)
      cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc170)
      %16 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc171)
      %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc172)
      %18 = cir.cast(bitcast, %17 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc172)
      cir.call @free(%18) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc171)
    } loc(#loc236)
    cir.return loc(#loc132)
  } loc(#loc223)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_06.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc7 = loc("/usr/include/stdlib.h":687:1)
#loc8 = loc("/usr/include/stdlib.h":687:32)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_06.c":25:1)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_06.c":42:1)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_06.c":27:5)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_06.c":27:11)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_06.c":28:12)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_06.c":28:5)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_06.c":29:5)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_06.c":34:5)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_06.c":29:8)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_06.c":29:27)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_06.c":30:5)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_06.c":32:23)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_06.c":32:30)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_06.c":32:32)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_06.c":32:9)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_06.c":33:9)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_06.c":33:37)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_06.c":33:13)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_06.c":33:21)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_06.c":33:27)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_06.c":33:28)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_06.c":33:34)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_06.c":33:33)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_06.c":35:5)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_06.c":41:5)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_06.c":36:9)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_06.c":36:28)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_06.c":38:16)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_06.c":38:22)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_06.c":38:30)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_06.c":38:33)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_06.c":38:43)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_06.c":38:9)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_06.c":38:44)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_06.c":39:22)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_06.c":39:27)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_06.c":39:28)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_06.c":39:9)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_06.c":40:9)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_06.c":40:14)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_06.c":93:1)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_06.c":97:1)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_06.c":95:5)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_06.c":95:14)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_06.c":96:5)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_06.c":96:14)
#loc55 = loc("/usr/include/stdlib.h":575:1)
#loc56 = loc("/usr/include/stdlib.h":575:41)
#loc57 = loc("/usr/include/time.h":76:1)
#loc58 = loc("/usr/include/time.h":76:38)
#loc59 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc60 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_06.c":114:15)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_06.c":116:15)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_06.c":119:15)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_06.c":121:15)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_06.c":109:1)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_06.c":124:1)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_06.c":110:1)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_06.c":112:27)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_06.c":112:22)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_06.c":112:5)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_06.c":114:5)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_06.c":115:5)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_06.c":115:62)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_06.c":116:5)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_06.c":119:5)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_06.c":120:5)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_06.c":120:61)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_06.c":121:5)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_06.c":123:12)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_06.c":123:5)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_06.c":56:19)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_06.c":49:1)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_06.c":71:1)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_06.c":51:5)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_06.c":51:11)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_06.c":52:12)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_06.c":52:5)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_06.c":53:5)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_06.c":63:5)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_06.c":53:8)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_06.c":53:27)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_06.c":54:5)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_06.c":57:5)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_06.c":59:5)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_06.c":56:9)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_06.c":61:23)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_06.c":61:30)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_06.c":61:33)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_06.c":61:43)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_06.c":61:44)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_06.c":61:9)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_06.c":62:9)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_06.c":62:37)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_06.c":62:13)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_06.c":62:21)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_06.c":62:27)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_06.c":62:28)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_06.c":62:34)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_06.c":62:33)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_06.c":64:5)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_06.c":70:5)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_06.c":65:9)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_06.c":65:28)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_06.c":67:16)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_06.c":67:22)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_06.c":67:30)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_06.c":67:33)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_06.c":67:43)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_06.c":67:9)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_06.c":67:44)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_06.c":68:22)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_06.c":68:27)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_06.c":68:28)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_06.c":68:9)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_06.c":69:9)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_06.c":69:14)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_06.c":74:1)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_06.c":91:1)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_06.c":76:5)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_06.c":76:11)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_06.c":77:12)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_06.c":77:5)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_06.c":78:5)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_06.c":83:5)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_06.c":78:8)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_06.c":78:27)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_06.c":79:5)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_06.c":81:23)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_06.c":81:30)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_06.c":81:33)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_06.c":81:43)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_06.c":81:44)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_06.c":81:9)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_06.c":82:9)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_06.c":82:37)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_06.c":82:13)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_06.c":82:21)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_06.c":82:27)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_06.c":82:28)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_06.c":82:34)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_06.c":82:33)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_06.c":84:5)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_06.c":90:5)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_06.c":85:9)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_06.c":85:28)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_06.c":87:16)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_06.c":87:22)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_06.c":87:30)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_06.c":87:33)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_06.c":87:43)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_06.c":87:9)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_06.c":87:44)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_06.c":88:22)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_06.c":88:27)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_06.c":88:28)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_06.c":88:9)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_06.c":89:9)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_06.c":89:14)
#loc173 = loc(fused[#loc1, #loc2])
#loc174 = loc(fused[#loc3, #loc4])
#loc175 = loc(fused[#loc5, #loc6])
#loc176 = loc(fused[#loc7, #loc8])
#loc177 = loc(fused[#loc9, #loc10])
#loc178 = loc(fused[#loc11, #loc12])
#loc179 = loc(fused[#loc14, #loc13])
#loc180 = loc(fused[#loc15, #loc16])
#loc181 = loc(fused[#loc17, #loc18])
#loc182 = loc(fused[#loc19, #loc16])
#loc183 = loc(fused[#loc20, #loc22])
#loc184 = loc(fused[#loc23, #loc22])
#loc185 = loc(fused[#loc24, #loc25])
#loc186 = loc(fused[#loc26, #loc27])
#loc187 = loc(fused[#loc28, #loc25])
#loc188 = loc(fused[#loc32, #loc33])
#loc189 = loc(fused[#loc34, #loc35])
#loc190 = loc(fused[#loc39, #loc40])
#loc191 = loc(fused[#loc38, #loc40])
#loc192 = loc(fused[#loc41, #loc42])
#loc193 = loc(fused[#loc49, #loc50])
#loc194 = loc(fused[#loc51, #loc52])
#loc195 = loc(fused[#loc53, #loc54])
#loc196 = loc(fused[#loc55, #loc56])
#loc197 = loc(fused[#loc57, #loc58])
#loc198 = loc(fused[#loc59, #loc60])
#loc199 = loc(fused[#loc65, #loc66])
#loc202 = loc(fused[#loc76, #loc77])
#loc203 = loc(fused[#loc80, #loc81])
#loc204 = loc(fused[#loc84, #loc83])
#loc205 = loc(fused[#loc86, #loc87])
#loc206 = loc(fused[#loc88, #loc89])
#loc207 = loc(fused[#loc91, #loc90])
#loc208 = loc(fused[#loc92, #loc93])
#loc209 = loc(fused[#loc94, #loc95])
#loc210 = loc(fused[#loc96, #loc97, #loc98, #loc93])
#loc211 = loc(fused[#loc102, #loc103])
#loc212 = loc(fused[#loc101, #loc103])
#loc213 = loc(fused[#loc100, #loc104])
#loc214 = loc(fused[#loc105, #loc104])
#loc215 = loc(fused[#loc106, #loc107])
#loc216 = loc(fused[#loc108, #loc109])
#loc217 = loc(fused[#loc110, #loc107])
#loc218 = loc(fused[#loc114, #loc115])
#loc219 = loc(fused[#loc116, #loc117])
#loc220 = loc(fused[#loc121, #loc122])
#loc221 = loc(fused[#loc120, #loc122])
#loc222 = loc(fused[#loc123, #loc124])
#loc223 = loc(fused[#loc131, #loc132])
#loc224 = loc(fused[#loc133, #loc134])
#loc225 = loc(fused[#loc136, #loc135])
#loc226 = loc(fused[#loc137, #loc138])
#loc227 = loc(fused[#loc139, #loc140])
#loc228 = loc(fused[#loc141, #loc138])
#loc229 = loc(fused[#loc144, #loc145])
#loc230 = loc(fused[#loc143, #loc145])
#loc231 = loc(fused[#loc142, #loc146])
#loc232 = loc(fused[#loc147, #loc146])
#loc233 = loc(fused[#loc148, #loc149])
#loc234 = loc(fused[#loc150, #loc151])
#loc235 = loc(fused[#loc152, #loc149])
#loc236 = loc(fused[#loc156, #loc157])
#loc237 = loc(fused[#loc158, #loc159])
#loc238 = loc(fused[#loc163, #loc164])
#loc239 = loc(fused[#loc162, #loc164])
#loc240 = loc(fused[#loc165, #loc166])
