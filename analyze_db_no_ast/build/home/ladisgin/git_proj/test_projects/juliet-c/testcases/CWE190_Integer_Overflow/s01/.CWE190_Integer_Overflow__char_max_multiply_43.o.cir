!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
#fn_attr = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone})>
#loc3 = loc("CWE190_Integer_Overflow__char_max_multiply_43.cpp":25:23)
#loc4 = loc("CWE190_Integer_Overflow__char_max_multiply_43.cpp":25:29)
#loc29 = loc("CWE190_Integer_Overflow__char_max_multiply_43.cpp":49:27)
#loc30 = loc("CWE190_Integer_Overflow__char_max_multiply_43.cpp":49:33)
#loc53 = loc("CWE190_Integer_Overflow__char_max_multiply_43.cpp":69:27)
#loc54 = loc("CWE190_Integer_Overflow__char_max_multiply_43.cpp":69:33)
#loc93 = loc(fused[#loc3, #loc4])
#loc104 = loc(fused[#loc29, #loc30])
#loc114 = loc(fused[#loc53, #loc54])
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_max_multiply_43.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func internal private  @_ZN45CWE190_Integer_Overflow__char_max_multiply_43L9badSourceERc(%arg0: !cir.ptr<!s8i> loc(fused[#loc3, #loc4])) extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init, const] {alignment = 8 : i64} loc(#loc93)
    cir.store %arg0, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc5)
    %1 = cir.const #cir.int<127> : !s32i loc(#loc6)
    %2 = cir.cast(integral, %1 : !s32i), !s8i loc(#loc6)
    %3 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc7)
    cir.store %2, %3 : !s8i, !cir.ptr<!s8i> loc(#loc94)
    cir.return loc(#loc2)
  } loc(#loc92)
  cir.func private  @printHexCharLine(!s8i) loc(#loc95)
  cir.func  @_ZN45CWE190_Integer_Overflow__char_max_multiply_433badEv() extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc97)
    %1 = cir.const #cir.int<32> : !s8i loc(#loc14)
    cir.store %1, %0 : !s8i, !cir.ptr<!s8i> loc(#loc98)
    cir.call @_ZN45CWE190_Integer_Overflow__char_max_multiply_43L9badSourceERc(%0) : (!cir.ptr<!s8i>) -> () loc(#loc16)
    cir.scope {
      %2 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc19)
      %3 = cir.cast(integral, %2 : !s8i), !s32i loc(#loc19)
      %4 = cir.const #cir.int<0> : !s32i loc(#loc20)
      %5 = cir.cmp(gt, %3, %4) : !s32i, !cir.bool loc(#loc100)
      cir.if %5 {
        %6 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc102)
        %7 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc24)
        %8 = cir.cast(integral, %7 : !s8i), !s32i loc(#loc24)
        %9 = cir.const #cir.int<2> : !s32i loc(#loc23)
        %10 = cir.binop(mul, %8, %9) nsw : !s32i loc(#loc24)
        %11 = cir.cast(integral, %10 : !s32i), !s8i loc(#loc24)
        cir.store %11, %6 : !s8i, !cir.ptr<!s8i> loc(#loc102)
        %12 = cir.load %6 : !cir.ptr<!s8i>, !s8i loc(#loc25)
        cir.call @printHexCharLine(%12) : (!s8i) -> () loc(#loc26)
      } loc(#loc101)
    } loc(#loc99)
    cir.return loc(#loc11)
  } loc(#loc96)
  cir.func internal private  @_ZN45CWE190_Integer_Overflow__char_max_multiply_43L13goodG2BSourceERc(%arg0: !cir.ptr<!s8i> loc(fused[#loc29, #loc30])) extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init, const] {alignment = 8 : i64} loc(#loc104)
    cir.store %arg0, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc31)
    %1 = cir.const #cir.int<2> : !s32i loc(#loc32)
    %2 = cir.cast(integral, %1 : !s32i), !s8i loc(#loc32)
    %3 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc33)
    cir.store %2, %3 : !s8i, !cir.ptr<!s8i> loc(#loc105)
    cir.return loc(#loc28)
  } loc(#loc103)
  cir.func internal private  @_ZN45CWE190_Integer_Overflow__char_max_multiply_43L7goodG2BEv() extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc107)
    %1 = cir.const #cir.int<32> : !s8i loc(#loc38)
    cir.store %1, %0 : !s8i, !cir.ptr<!s8i> loc(#loc108)
    cir.call @_ZN45CWE190_Integer_Overflow__char_max_multiply_43L13goodG2BSourceERc(%0) : (!cir.ptr<!s8i>) -> () loc(#loc40)
    cir.scope {
      %2 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc43)
      %3 = cir.cast(integral, %2 : !s8i), !s32i loc(#loc43)
      %4 = cir.const #cir.int<0> : !s32i loc(#loc44)
      %5 = cir.cmp(gt, %3, %4) : !s32i, !cir.bool loc(#loc110)
      cir.if %5 {
        %6 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc112)
        %7 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc48)
        %8 = cir.cast(integral, %7 : !s8i), !s32i loc(#loc48)
        %9 = cir.const #cir.int<2> : !s32i loc(#loc47)
        %10 = cir.binop(mul, %8, %9) nsw : !s32i loc(#loc48)
        %11 = cir.cast(integral, %10 : !s32i), !s8i loc(#loc48)
        cir.store %11, %6 : !s8i, !cir.ptr<!s8i> loc(#loc112)
        %12 = cir.load %6 : !cir.ptr<!s8i>, !s8i loc(#loc49)
        cir.call @printHexCharLine(%12) : (!s8i) -> () loc(#loc50)
      } loc(#loc111)
    } loc(#loc109)
    cir.return loc(#loc35)
  } loc(#loc106)
  cir.func internal private  @_ZN45CWE190_Integer_Overflow__char_max_multiply_43L13goodB2GSourceERc(%arg0: !cir.ptr<!s8i> loc(fused[#loc53, #loc54])) extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init, const] {alignment = 8 : i64} loc(#loc114)
    cir.store %arg0, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc55)
    %1 = cir.const #cir.int<127> : !s32i loc(#loc56)
    %2 = cir.cast(integral, %1 : !s32i), !s8i loc(#loc56)
    %3 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc57)
    cir.store %2, %3 : !s8i, !cir.ptr<!s8i> loc(#loc115)
    cir.return loc(#loc52)
  } loc(#loc113)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc116)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc60)
  cir.func internal private  @_ZN45CWE190_Integer_Overflow__char_max_multiply_43L7goodB2GEv() extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc118)
    %1 = cir.const #cir.int<32> : !s8i loc(#loc65)
    cir.store %1, %0 : !s8i, !cir.ptr<!s8i> loc(#loc119)
    cir.call @_ZN45CWE190_Integer_Overflow__char_max_multiply_43L13goodB2GSourceERc(%0) : (!cir.ptr<!s8i>) -> () loc(#loc67)
    cir.scope {
      %2 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc70)
      %3 = cir.cast(integral, %2 : !s8i), !s32i loc(#loc70)
      %4 = cir.const #cir.int<0> : !s32i loc(#loc71)
      %5 = cir.cmp(gt, %3, %4) : !s32i, !cir.bool loc(#loc121)
      cir.if %5 {
        cir.scope {
          %6 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc75)
          %7 = cir.cast(integral, %6 : !s8i), !s32i loc(#loc75)
          %8 = cir.const #cir.int<127> : !s32i loc(#loc76)
          %9 = cir.const #cir.int<2> : !s32i loc(#loc77)
          %10 = cir.binop(div, %8, %9) : !s32i loc(#loc124)
          %11 = cir.cmp(lt, %7, %10) : !s32i, !cir.bool loc(#loc125)
          cir.if %11 {
            %12 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc127)
            %13 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc84)
            %14 = cir.cast(integral, %13 : !s8i), !s32i loc(#loc84)
            %15 = cir.const #cir.int<2> : !s32i loc(#loc83)
            %16 = cir.binop(mul, %14, %15) nsw : !s32i loc(#loc84)
            %17 = cir.cast(integral, %16 : !s32i), !s8i loc(#loc84)
            cir.store %17, %12 : !s8i, !cir.ptr<!s8i> loc(#loc127)
            %18 = cir.load %12 : !cir.ptr<!s8i>, !s8i loc(#loc85)
            cir.call @printHexCharLine(%18) : (!s8i) -> () loc(#loc86)
          } else {
            %12 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc60)
            %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc60)
            cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc87)
          } loc(#loc126)
        } loc(#loc123)
      } loc(#loc122)
    } loc(#loc120)
    cir.return loc(#loc62)
  } loc(#loc117)
  cir.func  @_ZN45CWE190_Integer_Overflow__char_max_multiply_434goodEv() extra(#fn_attr) {
    cir.call @_ZN45CWE190_Integer_Overflow__char_max_multiply_43L7goodG2BEv() : () -> () loc(#loc90)
    cir.call @_ZN45CWE190_Integer_Overflow__char_max_multiply_43L7goodB2GEv() : () -> () loc(#loc91)
    cir.return loc(#loc89)
  } loc(#loc128)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_max_multiply_43.cpp":0:0)
#loc1 = loc("CWE190_Integer_Overflow__char_max_multiply_43.cpp":25:1)
#loc2 = loc("CWE190_Integer_Overflow__char_max_multiply_43.cpp":29:1)
#loc5 = loc("CWE190_Integer_Overflow__char_max_multiply_43.cpp":26:1)
#loc6 = loc("CWE190_Integer_Overflow__char_max_multiply_43.cpp":28:12)
#loc7 = loc("CWE190_Integer_Overflow__char_max_multiply_43.cpp":28:5)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":30:1)
#loc9 = loc("../../../testcasesupport/std_testcase_io.h":30:35)
#loc10 = loc("CWE190_Integer_Overflow__char_max_multiply_43.cpp":31:1)
#loc11 = loc("CWE190_Integer_Overflow__char_max_multiply_43.cpp":42:1)
#loc12 = loc("CWE190_Integer_Overflow__char_max_multiply_43.cpp":33:5)
#loc13 = loc("CWE190_Integer_Overflow__char_max_multiply_43.cpp":33:10)
#loc14 = loc("CWE190_Integer_Overflow__char_max_multiply_43.cpp":34:12)
#loc15 = loc("CWE190_Integer_Overflow__char_max_multiply_43.cpp":34:5)
#loc16 = loc("CWE190_Integer_Overflow__char_max_multiply_43.cpp":35:5)
#loc17 = loc("CWE190_Integer_Overflow__char_max_multiply_43.cpp":36:5)
#loc18 = loc("CWE190_Integer_Overflow__char_max_multiply_43.cpp":41:5)
#loc19 = loc("CWE190_Integer_Overflow__char_max_multiply_43.cpp":36:8)
#loc20 = loc("CWE190_Integer_Overflow__char_max_multiply_43.cpp":36:15)
#loc21 = loc("CWE190_Integer_Overflow__char_max_multiply_43.cpp":37:5)
#loc22 = loc("CWE190_Integer_Overflow__char_max_multiply_43.cpp":39:9)
#loc23 = loc("CWE190_Integer_Overflow__char_max_multiply_43.cpp":39:30)
#loc24 = loc("CWE190_Integer_Overflow__char_max_multiply_43.cpp":39:23)
#loc25 = loc("CWE190_Integer_Overflow__char_max_multiply_43.cpp":40:26)
#loc26 = loc("CWE190_Integer_Overflow__char_max_multiply_43.cpp":40:9)
#loc27 = loc("CWE190_Integer_Overflow__char_max_multiply_43.cpp":49:1)
#loc28 = loc("CWE190_Integer_Overflow__char_max_multiply_43.cpp":53:1)
#loc31 = loc("CWE190_Integer_Overflow__char_max_multiply_43.cpp":50:1)
#loc32 = loc("CWE190_Integer_Overflow__char_max_multiply_43.cpp":52:12)
#loc33 = loc("CWE190_Integer_Overflow__char_max_multiply_43.cpp":52:5)
#loc34 = loc("CWE190_Integer_Overflow__char_max_multiply_43.cpp":55:1)
#loc35 = loc("CWE190_Integer_Overflow__char_max_multiply_43.cpp":66:1)
#loc36 = loc("CWE190_Integer_Overflow__char_max_multiply_43.cpp":57:5)
#loc37 = loc("CWE190_Integer_Overflow__char_max_multiply_43.cpp":57:10)
#loc38 = loc("CWE190_Integer_Overflow__char_max_multiply_43.cpp":58:12)
#loc39 = loc("CWE190_Integer_Overflow__char_max_multiply_43.cpp":58:5)
#loc40 = loc("CWE190_Integer_Overflow__char_max_multiply_43.cpp":59:5)
#loc41 = loc("CWE190_Integer_Overflow__char_max_multiply_43.cpp":60:5)
#loc42 = loc("CWE190_Integer_Overflow__char_max_multiply_43.cpp":65:5)
#loc43 = loc("CWE190_Integer_Overflow__char_max_multiply_43.cpp":60:8)
#loc44 = loc("CWE190_Integer_Overflow__char_max_multiply_43.cpp":60:15)
#loc45 = loc("CWE190_Integer_Overflow__char_max_multiply_43.cpp":61:5)
#loc46 = loc("CWE190_Integer_Overflow__char_max_multiply_43.cpp":63:9)
#loc47 = loc("CWE190_Integer_Overflow__char_max_multiply_43.cpp":63:30)
#loc48 = loc("CWE190_Integer_Overflow__char_max_multiply_43.cpp":63:23)
#loc49 = loc("CWE190_Integer_Overflow__char_max_multiply_43.cpp":64:26)
#loc50 = loc("CWE190_Integer_Overflow__char_max_multiply_43.cpp":64:9)
#loc51 = loc("CWE190_Integer_Overflow__char_max_multiply_43.cpp":69:1)
#loc52 = loc("CWE190_Integer_Overflow__char_max_multiply_43.cpp":73:1)
#loc55 = loc("CWE190_Integer_Overflow__char_max_multiply_43.cpp":70:1)
#loc56 = loc("CWE190_Integer_Overflow__char_max_multiply_43.cpp":72:12)
#loc57 = loc("CWE190_Integer_Overflow__char_max_multiply_43.cpp":72:5)
#loc58 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc59 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc60 = loc("CWE190_Integer_Overflow__char_max_multiply_43.cpp":90:23)
#loc61 = loc("CWE190_Integer_Overflow__char_max_multiply_43.cpp":75:1)
#loc62 = loc("CWE190_Integer_Overflow__char_max_multiply_43.cpp":93:1)
#loc63 = loc("CWE190_Integer_Overflow__char_max_multiply_43.cpp":77:5)
#loc64 = loc("CWE190_Integer_Overflow__char_max_multiply_43.cpp":77:10)
#loc65 = loc("CWE190_Integer_Overflow__char_max_multiply_43.cpp":78:12)
#loc66 = loc("CWE190_Integer_Overflow__char_max_multiply_43.cpp":78:5)
#loc67 = loc("CWE190_Integer_Overflow__char_max_multiply_43.cpp":79:5)
#loc68 = loc("CWE190_Integer_Overflow__char_max_multiply_43.cpp":80:5)
#loc69 = loc("CWE190_Integer_Overflow__char_max_multiply_43.cpp":92:5)
#loc70 = loc("CWE190_Integer_Overflow__char_max_multiply_43.cpp":80:8)
#loc71 = loc("CWE190_Integer_Overflow__char_max_multiply_43.cpp":80:15)
#loc72 = loc("CWE190_Integer_Overflow__char_max_multiply_43.cpp":81:5)
#loc73 = loc("CWE190_Integer_Overflow__char_max_multiply_43.cpp":83:9)
#loc74 = loc("CWE190_Integer_Overflow__char_max_multiply_43.cpp":91:9)
#loc75 = loc("CWE190_Integer_Overflow__char_max_multiply_43.cpp":83:13)
#loc76 = loc("CWE190_Integer_Overflow__char_max_multiply_43.cpp":83:21)
#loc77 = loc("CWE190_Integer_Overflow__char_max_multiply_43.cpp":83:30)
#loc78 = loc("CWE190_Integer_Overflow__char_max_multiply_43.cpp":83:31)
#loc79 = loc("CWE190_Integer_Overflow__char_max_multiply_43.cpp":84:9)
#loc80 = loc("CWE190_Integer_Overflow__char_max_multiply_43.cpp":87:9)
#loc81 = loc("CWE190_Integer_Overflow__char_max_multiply_43.cpp":89:9)
#loc82 = loc("CWE190_Integer_Overflow__char_max_multiply_43.cpp":85:13)
#loc83 = loc("CWE190_Integer_Overflow__char_max_multiply_43.cpp":85:34)
#loc84 = loc("CWE190_Integer_Overflow__char_max_multiply_43.cpp":85:27)
#loc85 = loc("CWE190_Integer_Overflow__char_max_multiply_43.cpp":86:30)
#loc86 = loc("CWE190_Integer_Overflow__char_max_multiply_43.cpp":86:13)
#loc87 = loc("CWE190_Integer_Overflow__char_max_multiply_43.cpp":90:13)
#loc88 = loc("CWE190_Integer_Overflow__char_max_multiply_43.cpp":95:1)
#loc89 = loc("CWE190_Integer_Overflow__char_max_multiply_43.cpp":99:1)
#loc90 = loc("CWE190_Integer_Overflow__char_max_multiply_43.cpp":97:5)
#loc91 = loc("CWE190_Integer_Overflow__char_max_multiply_43.cpp":98:5)
#loc92 = loc(fused[#loc1, #loc2])
#loc94 = loc(fused[#loc7, #loc6])
#loc95 = loc(fused[#loc8, #loc9])
#loc96 = loc(fused[#loc10, #loc11])
#loc97 = loc(fused[#loc12, #loc13])
#loc98 = loc(fused[#loc15, #loc14])
#loc99 = loc(fused[#loc17, #loc18])
#loc100 = loc(fused[#loc19, #loc20])
#loc101 = loc(fused[#loc21, #loc18])
#loc102 = loc(fused[#loc22, #loc23])
#loc103 = loc(fused[#loc27, #loc28])
#loc105 = loc(fused[#loc33, #loc32])
#loc106 = loc(fused[#loc34, #loc35])
#loc107 = loc(fused[#loc36, #loc37])
#loc108 = loc(fused[#loc39, #loc38])
#loc109 = loc(fused[#loc41, #loc42])
#loc110 = loc(fused[#loc43, #loc44])
#loc111 = loc(fused[#loc45, #loc42])
#loc112 = loc(fused[#loc46, #loc47])
#loc113 = loc(fused[#loc51, #loc52])
#loc115 = loc(fused[#loc57, #loc56])
#loc116 = loc(fused[#loc58, #loc59])
#loc117 = loc(fused[#loc61, #loc62])
#loc118 = loc(fused[#loc63, #loc64])
#loc119 = loc(fused[#loc66, #loc65])
#loc120 = loc(fused[#loc68, #loc69])
#loc121 = loc(fused[#loc70, #loc71])
#loc122 = loc(fused[#loc72, #loc69])
#loc123 = loc(fused[#loc73, #loc74])
#loc124 = loc(fused[#loc76, #loc77])
#loc125 = loc(fused[#loc75, #loc78])
#loc126 = loc(fused[#loc79, #loc80, #loc81, #loc74])
#loc127 = loc(fused[#loc82, #loc83])
#loc128 = loc(fused[#loc88, #loc89])
