!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc5 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":30:22)
#loc6 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":30:26)
#loc39 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":72:26)
#loc40 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":72:30)
#loc75 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":53:26)
#loc76 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":53:30)
#true = #cir.bool<true> : !cir.bool
#loc99 = loc(fused[#loc5, #loc6])
#loc112 = loc(fused[#loc39, #loc40])
#loc124 = loc(fused[#loc75, #loc76])
module @"/workspaces/juliet-c/testcases/CWE400_Resource_Exhaustion/s02/CWE400_Resource_Exhaustion__rand_sleep_42.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<270> = dense<32> : vector<4xi64>, i32 = dense<32> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little", "dlti.mangling_mode" = "e">} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc97)
  cir.func internal private @badSource(%arg0: !s32i loc(fused[#loc5, #loc6])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count", init] {alignment = 4 : i64} loc(#loc99)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc4)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc7)
    %2 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc8)
    %4 = cir.binop(and, %2, %3) : !s32i loc(#loc8)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc8)
    %6 = cir.ternary(%5, true {
      %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
      %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc8)
      %12 = cir.const #cir.int<30> : !s32i loc(#loc8)
      %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc8)
      %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
      %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc8)
      %16 = cir.const #cir.int<15> : !s32i loc(#loc8)
      %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc8)
      %18 = cir.binop(xor, %13, %17) : !u32i loc(#loc8)
      %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
      %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc8)
      %21 = cir.binop(xor, %18, %20) : !u32i loc(#loc8)
      cir.yield %21 : !u32i loc(#loc8)
    }, false {
      %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
      %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc8)
      %12 = cir.const #cir.int<30> : !s32i loc(#loc8)
      %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc8)
      %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
      %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc8)
      %16 = cir.const #cir.int<15> : !s32i loc(#loc8)
      %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc8)
      %18 = cir.binop(xor, %13, %17) : !u32i loc(#loc8)
      %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
      %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc8)
      %21 = cir.binop(xor, %18, %20) : !u32i loc(#loc8)
      %22 = cir.unary(minus, %21) : !u32i, !u32i loc(#loc8)
      %23 = cir.const #cir.int<1> : !s32i loc(#loc8)
      %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc8)
      %25 = cir.binop(sub, %22, %24) : !u32i loc(#loc8)
      cir.yield %25 : !u32i loc(#loc8)
    }) : (!cir.bool) -> !u32i loc(#loc8)
    %7 = cir.cast(integral, %6 : !u32i), !s32i loc(#loc8)
    cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc100)
    %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc10)
    cir.store %8, %1 : !s32i, !cir.ptr<!s32i> loc(#loc101)
    %9 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc101)
    cir.return %9 : !s32i loc(#loc101)
  } loc(#loc98)
  cir.func private @usleep(!u32i) -> !s32i loc(#loc102)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc103)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Sleep time possibly too long\00" : !cir.array<!s8i x 29>> : !cir.array<!s8i x 29> {alignment = 1 : i64} loc(#loc16)
  cir.func no_proto @CWE400_Resource_Exhaustion__rand_sleep_42_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count"] {alignment = 4 : i64} loc(#loc105)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc21)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc22)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc106)
    %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc24)
    %4 = cir.call @badSource(%3) : (!s32i) -> !s32i loc(#loc25)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc107)
    %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc28)
    %6 = cir.cast(integral, %5 : !s32i), !u32i loc(#loc28)
    %7 = cir.call @usleep(%6) : (!u32i) -> !s32i loc(#loc29)
    %8 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 29>> loc(#loc16)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 29>>), !cir.ptr<!s8i> loc(#loc16)
    cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc30)
    cir.return loc(#loc18)
  } loc(#loc104)
  cir.func no_proto @CWE400_Resource_Exhaustion__rand_sleep_42_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc109)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc33)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc110)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc35)
    cir.return loc(#loc32)
  } loc(#loc108)
  cir.func internal private @goodB2GSource(%arg0: !s32i loc(fused[#loc39, #loc40])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count", init] {alignment = 4 : i64} loc(#loc112)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc38)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc41)
    %2 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc42)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc42)
    %4 = cir.binop(and, %2, %3) : !s32i loc(#loc42)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc42)
    %6 = cir.ternary(%5, true {
      %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc42)
      %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc42)
      %12 = cir.const #cir.int<30> : !s32i loc(#loc42)
      %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc42)
      %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc42)
      %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc42)
      %16 = cir.const #cir.int<15> : !s32i loc(#loc42)
      %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc42)
      %18 = cir.binop(xor, %13, %17) : !u32i loc(#loc42)
      %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc42)
      %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc42)
      %21 = cir.binop(xor, %18, %20) : !u32i loc(#loc42)
      cir.yield %21 : !u32i loc(#loc42)
    }, false {
      %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc42)
      %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc42)
      %12 = cir.const #cir.int<30> : !s32i loc(#loc42)
      %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc42)
      %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc42)
      %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc42)
      %16 = cir.const #cir.int<15> : !s32i loc(#loc42)
      %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc42)
      %18 = cir.binop(xor, %13, %17) : !u32i loc(#loc42)
      %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc42)
      %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc42)
      %21 = cir.binop(xor, %18, %20) : !u32i loc(#loc42)
      %22 = cir.unary(minus, %21) : !u32i, !u32i loc(#loc42)
      %23 = cir.const #cir.int<1> : !s32i loc(#loc42)
      %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc42)
      %25 = cir.binop(sub, %22, %24) : !u32i loc(#loc42)
      cir.yield %25 : !u32i loc(#loc42)
    }) : (!cir.bool) -> !u32i loc(#loc42)
    %7 = cir.cast(integral, %6 : !u32i), !s32i loc(#loc42)
    cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc113)
    %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc44)
    cir.store %8, %1 : !s32i, !cir.ptr<!s32i> loc(#loc114)
    %9 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc114)
    cir.return %9 : !s32i loc(#loc114)
  } loc(#loc111)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Sleep time OK\00" : !cir.array<!s8i x 14>> : !cir.array<!s8i x 14> {alignment = 1 : i64} loc(#loc46)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Sleep time too long\00" : !cir.array<!s8i x 20>> : !cir.array<!s8i x 20> {alignment = 1 : i64} loc(#loc47)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count"] {alignment = 4 : i64} loc(#loc116)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc52)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc53)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc117)
    %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc55)
    %4 = cir.call @goodB2GSource(%3) : (!s32i) -> !s32i loc(#loc56)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc118)
    cir.scope {
      %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc61)
      %6 = cir.const #cir.int<0> : !s32i loc(#loc62)
      %7 = cir.cmp(gt, %5, %6) : !s32i, !cir.bool loc(#loc120)
      %8 = cir.ternary(%7, true {
        %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc64)
        %10 = cir.const #cir.int<2000> : !s32i loc(#loc65)
        %11 = cir.cmp(le, %9, %10) : !s32i, !cir.bool loc(#loc121)
        %12 = cir.ternary(%11, true {
          %13 = cir.const #true loc(#loc63)
          cir.yield %13 : !cir.bool loc(#loc63)
        }, false {
          %13 = cir.const #false loc(#loc63)
          cir.yield %13 : !cir.bool loc(#loc63)
        }) : (!cir.bool) -> !cir.bool loc(#loc63)
        cir.yield %12 : !cir.bool loc(#loc63)
      }, false {
        %9 = cir.const #false loc(#loc63)
        cir.yield %9 : !cir.bool loc(#loc63)
      }) : (!cir.bool) -> !cir.bool loc(#loc63)
      cir.if %8 {
        %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc69)
        %10 = cir.cast(integral, %9 : !s32i), !u32i loc(#loc69)
        %11 = cir.call @usleep(%10) : (!u32i) -> !s32i loc(#loc70)
        %12 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 14>> loc(#loc46)
        %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc46)
        cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc71)
      } else {
        %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 20>> loc(#loc47)
        %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc47)
        cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc72)
      } loc(#loc122)
    } loc(#loc119)
    cir.return loc(#loc49)
  } loc(#loc115)
  cir.func internal private @goodG2BSource(%arg0: !s32i loc(fused[#loc75, #loc76])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count", init] {alignment = 4 : i64} loc(#loc124)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc74)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc77)
    %2 = cir.const #cir.int<20> : !s32i loc(#loc78)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc125)
    %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc80)
    cir.store %3, %1 : !s32i, !cir.ptr<!s32i> loc(#loc126)
    %4 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc126)
    cir.return %4 : !s32i loc(#loc126)
  } loc(#loc123)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count"] {alignment = 4 : i64} loc(#loc128)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc86)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc87)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc129)
    %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc89)
    %4 = cir.call @goodG2BSource(%3) : (!s32i) -> !s32i loc(#loc90)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc130)
    %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc93)
    %6 = cir.cast(integral, %5 : !s32i), !u32i loc(#loc93)
    %7 = cir.call @usleep(%6) : (!u32i) -> !s32i loc(#loc94)
    %8 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 29>> loc(#loc95)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 29>>), !cir.ptr<!s8i> loc(#loc95)
    cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc96)
    cir.return loc(#loc83)
  } loc(#loc127)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE400_Resource_Exhaustion/s02/CWE400_Resource_Exhaustion__rand_sleep_42.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":30:1)
#loc4 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":35:1)
#loc7 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":31:1)
#loc8 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":33:13)
#loc9 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":33:5)
#loc10 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":34:12)
#loc11 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":34:5)
#loc12 = loc("/usr/include/unistd.h":480:1)
#loc13 = loc("/usr/include/unistd.h":480:43)
#loc14 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc15 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc16 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":45:15)
#loc17 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":37:1)
#loc18 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":46:1)
#loc19 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":39:5)
#loc20 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":39:9)
#loc21 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":41:14)
#loc22 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":41:13)
#loc23 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":41:5)
#loc24 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":42:23)
#loc25 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":42:13)
#loc26 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":42:5)
#loc27 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":42:28)
#loc28 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":44:11)
#loc29 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":44:5)
#loc30 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":45:5)
#loc31 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":97:1)
#loc32 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":101:1)
#loc33 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":99:5)
#loc34 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":99:13)
#loc35 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":100:5)
#loc36 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":100:13)
#loc37 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":72:1)
#loc38 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":77:1)
#loc41 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":73:1)
#loc42 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":75:13)
#loc43 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":75:5)
#loc44 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":76:12)
#loc45 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":76:5)
#loc46 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":89:19)
#loc47 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":93:19)
#loc48 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":79:1)
#loc49 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":95:1)
#loc50 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":81:5)
#loc51 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":81:9)
#loc52 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":83:14)
#loc53 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":83:13)
#loc54 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":83:5)
#loc55 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":84:27)
#loc56 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":84:13)
#loc57 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":84:5)
#loc58 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":84:32)
#loc59 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":86:5)
#loc60 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":94:5)
#loc61 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":86:9)
#loc62 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":86:17)
#loc63 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":86:19)
#loc64 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":86:22)
#loc65 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":86:31)
#loc66 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":87:5)
#loc67 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":90:5)
#loc68 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":92:5)
#loc69 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":88:15)
#loc70 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":88:9)
#loc71 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":89:9)
#loc72 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":93:9)
#loc73 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":53:1)
#loc74 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":58:1)
#loc77 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":54:1)
#loc78 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":56:13)
#loc79 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":56:5)
#loc80 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":57:12)
#loc81 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":57:5)
#loc82 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":60:1)
#loc83 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":69:1)
#loc84 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":62:5)
#loc85 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":62:9)
#loc86 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":64:14)
#loc87 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":64:13)
#loc88 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":64:5)
#loc89 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":65:27)
#loc90 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":65:13)
#loc91 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":65:5)
#loc92 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":65:32)
#loc93 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":67:11)
#loc94 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":67:5)
#loc95 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":68:15)
#loc96 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":68:5)
#loc97 = loc(fused[#loc1, #loc2])
#loc98 = loc(fused[#loc3, #loc4])
#loc100 = loc(fused[#loc9, #loc8])
#loc101 = loc(fused[#loc11, #loc10])
#loc102 = loc(fused[#loc12, #loc13])
#loc103 = loc(fused[#loc14, #loc15])
#loc104 = loc(fused[#loc17, #loc18])
#loc105 = loc(fused[#loc19, #loc20])
#loc106 = loc(fused[#loc23, #loc21])
#loc107 = loc(fused[#loc26, #loc27])
#loc108 = loc(fused[#loc31, #loc32])
#loc109 = loc(fused[#loc33, #loc34])
#loc110 = loc(fused[#loc35, #loc36])
#loc111 = loc(fused[#loc37, #loc38])
#loc113 = loc(fused[#loc43, #loc42])
#loc114 = loc(fused[#loc45, #loc44])
#loc115 = loc(fused[#loc48, #loc49])
#loc116 = loc(fused[#loc50, #loc51])
#loc117 = loc(fused[#loc54, #loc52])
#loc118 = loc(fused[#loc57, #loc58])
#loc119 = loc(fused[#loc59, #loc60])
#loc120 = loc(fused[#loc61, #loc62])
#loc121 = loc(fused[#loc64, #loc65])
#loc122 = loc(fused[#loc66, #loc67, #loc68, #loc60])
#loc123 = loc(fused[#loc73, #loc74])
#loc125 = loc(fused[#loc79, #loc78])
#loc126 = loc(fused[#loc81, #loc80])
#loc127 = loc(fused[#loc82, #loc83])
#loc128 = loc(fused[#loc84, #loc85])
#loc129 = loc(fused[#loc88, #loc86])
#loc130 = loc(fused[#loc91, #loc92])
