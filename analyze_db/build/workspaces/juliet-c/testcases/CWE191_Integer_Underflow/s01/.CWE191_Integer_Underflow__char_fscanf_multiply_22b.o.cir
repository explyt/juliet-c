!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc7 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_22b.c":25:64)
#loc8 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_22b.c":25:69)
#loc32 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_22b.c":48:69)
#loc33 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_22b.c":48:74)
#loc66 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_22b.c":74:69)
#loc67 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_22b.c":74:74)
#loc98 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_22b.c":95:68)
#loc99 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_22b.c":95:73)
#loc118 = loc(fused[#loc7, #loc8])
#loc128 = loc(fused[#loc32, #loc33])
#loc141 = loc(fused[#loc66, #loc67])
#loc154 = loc(fused[#loc98, #loc99])
module @"/workspaces/juliet-c/testcases/CWE191_Integer_Underflow/s01/CWE191_Integer_Underflow__char_fscanf_multiply_22b.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i32 = dense<32> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.global "private" external @CWE191_Integer_Underflow__char_fscanf_multiply_22_badGlobal : !s32i {alignment = 4 : i64} loc(#loc115)
  cir.func private @printHexCharLine(!s8i) loc(#loc116)
  cir.func @CWE191_Integer_Underflow__char_fscanf_multiply_22_badSink(%arg0: !s8i loc(fused[#loc7, #loc8])) extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data", init] {alignment = 1 : i64} loc(#loc118)
    cir.store %arg0, %0 : !s8i, !cir.ptr<!s8i> loc(#loc9)
    cir.scope {
      %1 = cir.get_global @CWE191_Integer_Underflow__char_fscanf_multiply_22_badGlobal : !cir.ptr<!s32i> loc(#loc115)
      %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc12)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc12)
      cir.if %3 {
        cir.scope {
          %4 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc16)
          %5 = cir.cast(integral, %4 : !s8i), !s32i loc(#loc16)
          %6 = cir.const #cir.int<0> : !s32i loc(#loc17)
          %7 = cir.cmp(lt, %5, %6) : !s32i, !cir.bool loc(#loc122)
          cir.if %7 {
            %8 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc124)
            %9 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc21)
            %10 = cir.cast(integral, %9 : !s8i), !s32i loc(#loc21)
            %11 = cir.const #cir.int<2> : !s32i loc(#loc20)
            %12 = cir.binop(mul, %10, %11) nsw : !s32i loc(#loc21)
            %13 = cir.cast(integral, %12 : !s32i), !s8i loc(#loc21)
            cir.store %13, %8 : !s8i, !cir.ptr<!s8i> loc(#loc124)
            %14 = cir.load %8 : !cir.ptr<!s8i>, !s8i loc(#loc22)
            cir.call @printHexCharLine(%14) : (!s8i) -> () loc(#loc23)
          } loc(#loc123)
        } loc(#loc121)
      } loc(#loc120)
    } loc(#loc119)
    cir.return loc(#loc6)
  } loc(#loc117)
  cir.global "private" external @CWE191_Integer_Underflow__char_fscanf_multiply_22_goodB2G1Global : !s32i {alignment = 4 : i64} loc(#loc125)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc126)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc28)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"data value is too small to perform multiplication.\00" : !cir.array<!s8i x 51>> : !cir.array<!s8i x 51> {alignment = 1 : i64} loc(#loc29)
  cir.func @CWE191_Integer_Underflow__char_fscanf_multiply_22_goodB2G1Sink(%arg0: !s8i loc(fused[#loc32, #loc33])) extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data", init] {alignment = 1 : i64} loc(#loc128)
    cir.store %arg0, %0 : !s8i, !cir.ptr<!s8i> loc(#loc34)
    cir.scope {
      %1 = cir.get_global @CWE191_Integer_Underflow__char_fscanf_multiply_22_goodB2G1Global : !cir.ptr<!s32i> loc(#loc125)
      %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc37)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc37)
      cir.if %3 {
        %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc28)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc28)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc41)
      } else {
        cir.scope {
          %4 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc44)
          %5 = cir.cast(integral, %4 : !s8i), !s32i loc(#loc44)
          %6 = cir.const #cir.int<0> : !s32i loc(#loc45)
          %7 = cir.cmp(lt, %5, %6) : !s32i, !cir.bool loc(#loc132)
          cir.if %7 {
            cir.scope {
              %8 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc49)
              %9 = cir.cast(integral, %8 : !s8i), !s32i loc(#loc49)
              %10 = cir.const #cir.int<127> : !s32i loc(#loc50)
              %11 = cir.unary(minus, %10) nsw : !s32i, !s32i loc(#loc50)
              %12 = cir.const #cir.int<1> : !s32i loc(#loc50)
              %13 = cir.binop(sub, %11, %12) nsw : !s32i loc(#loc50)
              %14 = cir.const #cir.int<2> : !s32i loc(#loc51)
              %15 = cir.binop(div, %13, %14) : !s32i loc(#loc135)
              %16 = cir.cmp(gt, %9, %15) : !s32i, !cir.bool loc(#loc136)
              cir.if %16 {
                %17 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc138)
                %18 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc58)
                %19 = cir.cast(integral, %18 : !s8i), !s32i loc(#loc58)
                %20 = cir.const #cir.int<2> : !s32i loc(#loc57)
                %21 = cir.binop(mul, %19, %20) nsw : !s32i loc(#loc58)
                %22 = cir.cast(integral, %21 : !s32i), !s8i loc(#loc58)
                cir.store %22, %17 : !s8i, !cir.ptr<!s8i> loc(#loc138)
                %23 = cir.load %17 : !cir.ptr<!s8i>, !s8i loc(#loc59)
                cir.call @printHexCharLine(%23) : (!s8i) -> () loc(#loc60)
              } else {
                %17 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 51>> loc(#loc29)
                %18 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s8i x 51>>), !cir.ptr<!s8i> loc(#loc29)
                cir.call @printLine(%18) : (!cir.ptr<!s8i>) -> () loc(#loc61)
              } loc(#loc137)
            } loc(#loc134)
          } loc(#loc133)
        } loc(#loc131)
      } loc(#loc130)
    } loc(#loc129)
    cir.return loc(#loc31)
  } loc(#loc127)
  cir.global "private" external @CWE191_Integer_Underflow__char_fscanf_multiply_22_goodB2G2Global : !s32i {alignment = 4 : i64} loc(#loc139)
  cir.func @CWE191_Integer_Underflow__char_fscanf_multiply_22_goodB2G2Sink(%arg0: !s8i loc(fused[#loc66, #loc67])) extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data", init] {alignment = 1 : i64} loc(#loc141)
    cir.store %arg0, %0 : !s8i, !cir.ptr<!s8i> loc(#loc68)
    cir.scope {
      %1 = cir.get_global @CWE191_Integer_Underflow__char_fscanf_multiply_22_goodB2G2Global : !cir.ptr<!s32i> loc(#loc139)
      %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc71)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc71)
      cir.if %3 {
        cir.scope {
          %4 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc75)
          %5 = cir.cast(integral, %4 : !s8i), !s32i loc(#loc75)
          %6 = cir.const #cir.int<0> : !s32i loc(#loc76)
          %7 = cir.cmp(lt, %5, %6) : !s32i, !cir.bool loc(#loc145)
          cir.if %7 {
            cir.scope {
              %8 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc80)
              %9 = cir.cast(integral, %8 : !s8i), !s32i loc(#loc80)
              %10 = cir.const #cir.int<127> : !s32i loc(#loc81)
              %11 = cir.unary(minus, %10) nsw : !s32i, !s32i loc(#loc81)
              %12 = cir.const #cir.int<1> : !s32i loc(#loc81)
              %13 = cir.binop(sub, %11, %12) nsw : !s32i loc(#loc81)
              %14 = cir.const #cir.int<2> : !s32i loc(#loc82)
              %15 = cir.binop(div, %13, %14) : !s32i loc(#loc148)
              %16 = cir.cmp(gt, %9, %15) : !s32i, !cir.bool loc(#loc149)
              cir.if %16 {
                %17 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc151)
                %18 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc89)
                %19 = cir.cast(integral, %18 : !s8i), !s32i loc(#loc89)
                %20 = cir.const #cir.int<2> : !s32i loc(#loc88)
                %21 = cir.binop(mul, %19, %20) nsw : !s32i loc(#loc89)
                %22 = cir.cast(integral, %21 : !s32i), !s8i loc(#loc89)
                cir.store %22, %17 : !s8i, !cir.ptr<!s8i> loc(#loc151)
                %23 = cir.load %17 : !cir.ptr<!s8i>, !s8i loc(#loc90)
                cir.call @printHexCharLine(%23) : (!s8i) -> () loc(#loc91)
              } else {
                %17 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 51>> loc(#loc92)
                %18 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s8i x 51>>), !cir.ptr<!s8i> loc(#loc92)
                cir.call @printLine(%18) : (!cir.ptr<!s8i>) -> () loc(#loc93)
              } loc(#loc150)
            } loc(#loc147)
          } loc(#loc146)
        } loc(#loc144)
      } loc(#loc143)
    } loc(#loc142)
    cir.return loc(#loc65)
  } loc(#loc140)
  cir.global "private" external @CWE191_Integer_Underflow__char_fscanf_multiply_22_goodG2BGlobal : !s32i {alignment = 4 : i64} loc(#loc152)
  cir.func @CWE191_Integer_Underflow__char_fscanf_multiply_22_goodG2BSink(%arg0: !s8i loc(fused[#loc98, #loc99])) extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data", init] {alignment = 1 : i64} loc(#loc154)
    cir.store %arg0, %0 : !s8i, !cir.ptr<!s8i> loc(#loc100)
    cir.scope {
      %1 = cir.get_global @CWE191_Integer_Underflow__char_fscanf_multiply_22_goodG2BGlobal : !cir.ptr<!s32i> loc(#loc152)
      %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc103)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc103)
      cir.if %3 {
        cir.scope {
          %4 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc107)
          %5 = cir.cast(integral, %4 : !s8i), !s32i loc(#loc107)
          %6 = cir.const #cir.int<0> : !s32i loc(#loc108)
          %7 = cir.cmp(lt, %5, %6) : !s32i, !cir.bool loc(#loc158)
          cir.if %7 {
            %8 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc160)
            %9 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc112)
            %10 = cir.cast(integral, %9 : !s8i), !s32i loc(#loc112)
            %11 = cir.const #cir.int<2> : !s32i loc(#loc111)
            %12 = cir.binop(mul, %10, %11) nsw : !s32i loc(#loc112)
            %13 = cir.cast(integral, %12 : !s32i), !s8i loc(#loc112)
            cir.store %13, %8 : !s8i, !cir.ptr<!s8i> loc(#loc160)
            %14 = cir.load %8 : !cir.ptr<!s8i>, !s8i loc(#loc113)
            cir.call @printHexCharLine(%14) : (!s8i) -> () loc(#loc114)
          } loc(#loc159)
        } loc(#loc157)
      } loc(#loc156)
    } loc(#loc155)
    cir.return loc(#loc97)
  } loc(#loc153)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE191_Integer_Underflow/s01/CWE191_Integer_Underflow__char_fscanf_multiply_22b.c":0:0)
#loc1 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_22b.c":23:1)
#loc2 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_22b.c":23:12)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":30:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":30:35)
#loc5 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_22b.c":25:1)
#loc6 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_22b.c":36:1)
#loc9 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_22b.c":26:1)
#loc10 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_22b.c":27:5)
#loc11 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_22b.c":35:5)
#loc12 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_22b.c":27:8)
#loc13 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_22b.c":28:5)
#loc14 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_22b.c":29:9)
#loc15 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_22b.c":34:9)
#loc16 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_22b.c":29:12)
#loc17 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_22b.c":29:19)
#loc18 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_22b.c":30:9)
#loc19 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_22b.c":32:13)
#loc20 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_22b.c":32:34)
#loc21 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_22b.c":32:27)
#loc22 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_22b.c":33:30)
#loc23 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_22b.c":33:13)
#loc24 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_22b.c":43:1)
#loc25 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_22b.c":43:12)
#loc26 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc27 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc28 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_22b.c":53:19)
#loc29 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_22b.c":67:27)
#loc30 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_22b.c":48:1)
#loc31 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_22b.c":71:1)
#loc34 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_22b.c":49:1)
#loc35 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_22b.c":50:5)
#loc36 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_22b.c":70:5)
#loc37 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_22b.c":50:8)
#loc38 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_22b.c":51:5)
#loc39 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_22b.c":54:5)
#loc40 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_22b.c":56:5)
#loc41 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_22b.c":53:9)
#loc42 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_22b.c":57:9)
#loc43 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_22b.c":69:9)
#loc44 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_22b.c":57:12)
#loc45 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_22b.c":57:19)
#loc46 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_22b.c":58:9)
#loc47 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_22b.c":60:13)
#loc48 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_22b.c":68:13)
#loc49 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_22b.c":60:17)
#loc50 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_22b.c":60:25)
#loc51 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_22b.c":60:34)
#loc52 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_22b.c":60:35)
#loc53 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_22b.c":61:13)
#loc54 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_22b.c":64:13)
#loc55 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_22b.c":66:13)
#loc56 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_22b.c":62:17)
#loc57 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_22b.c":62:38)
#loc58 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_22b.c":62:31)
#loc59 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_22b.c":63:34)
#loc60 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_22b.c":63:17)
#loc61 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_22b.c":67:17)
#loc62 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_22b.c":44:1)
#loc63 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_22b.c":44:12)
#loc64 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_22b.c":74:1)
#loc65 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_22b.c":92:1)
#loc68 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_22b.c":75:1)
#loc69 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_22b.c":76:5)
#loc70 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_22b.c":91:5)
#loc71 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_22b.c":76:8)
#loc72 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_22b.c":77:5)
#loc73 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_22b.c":78:9)
#loc74 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_22b.c":90:9)
#loc75 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_22b.c":78:12)
#loc76 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_22b.c":78:19)
#loc77 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_22b.c":79:9)
#loc78 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_22b.c":81:13)
#loc79 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_22b.c":89:13)
#loc80 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_22b.c":81:17)
#loc81 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_22b.c":81:25)
#loc82 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_22b.c":81:34)
#loc83 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_22b.c":81:35)
#loc84 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_22b.c":82:13)
#loc85 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_22b.c":85:13)
#loc86 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_22b.c":87:13)
#loc87 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_22b.c":83:17)
#loc88 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_22b.c":83:38)
#loc89 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_22b.c":83:31)
#loc90 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_22b.c":84:34)
#loc91 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_22b.c":84:17)
#loc92 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_22b.c":88:27)
#loc93 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_22b.c":88:17)
#loc94 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_22b.c":45:1)
#loc95 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_22b.c":45:12)
#loc96 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_22b.c":95:1)
#loc97 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_22b.c":106:1)
#loc100 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_22b.c":96:1)
#loc101 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_22b.c":97:5)
#loc102 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_22b.c":105:5)
#loc103 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_22b.c":97:8)
#loc104 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_22b.c":98:5)
#loc105 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_22b.c":99:9)
#loc106 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_22b.c":104:9)
#loc107 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_22b.c":99:12)
#loc108 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_22b.c":99:19)
#loc109 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_22b.c":100:9)
#loc110 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_22b.c":102:13)
#loc111 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_22b.c":102:34)
#loc112 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_22b.c":102:27)
#loc113 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_22b.c":103:30)
#loc114 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_22b.c":103:13)
#loc115 = loc(fused[#loc1, #loc2])
#loc116 = loc(fused[#loc3, #loc4])
#loc117 = loc(fused[#loc5, #loc6])
#loc119 = loc(fused[#loc10, #loc11])
#loc120 = loc(fused[#loc13, #loc11])
#loc121 = loc(fused[#loc14, #loc15])
#loc122 = loc(fused[#loc16, #loc17])
#loc123 = loc(fused[#loc18, #loc15])
#loc124 = loc(fused[#loc19, #loc20])
#loc125 = loc(fused[#loc24, #loc25])
#loc126 = loc(fused[#loc26, #loc27])
#loc127 = loc(fused[#loc30, #loc31])
#loc129 = loc(fused[#loc35, #loc36])
#loc130 = loc(fused[#loc38, #loc39, #loc40, #loc36])
#loc131 = loc(fused[#loc42, #loc43])
#loc132 = loc(fused[#loc44, #loc45])
#loc133 = loc(fused[#loc46, #loc43])
#loc134 = loc(fused[#loc47, #loc48])
#loc135 = loc(fused[#loc50, #loc51])
#loc136 = loc(fused[#loc49, #loc52])
#loc137 = loc(fused[#loc53, #loc54, #loc55, #loc48])
#loc138 = loc(fused[#loc56, #loc57])
#loc139 = loc(fused[#loc62, #loc63])
#loc140 = loc(fused[#loc64, #loc65])
#loc142 = loc(fused[#loc69, #loc70])
#loc143 = loc(fused[#loc72, #loc70])
#loc144 = loc(fused[#loc73, #loc74])
#loc145 = loc(fused[#loc75, #loc76])
#loc146 = loc(fused[#loc77, #loc74])
#loc147 = loc(fused[#loc78, #loc79])
#loc148 = loc(fused[#loc81, #loc82])
#loc149 = loc(fused[#loc80, #loc83])
#loc150 = loc(fused[#loc84, #loc85, #loc86, #loc79])
#loc151 = loc(fused[#loc87, #loc88])
#loc152 = loc(fused[#loc94, #loc95])
#loc153 = loc(fused[#loc96, #loc97])
#loc155 = loc(fused[#loc101, #loc102])
#loc156 = loc(fused[#loc104, #loc102])
#loc157 = loc(fused[#loc105, #loc106])
#loc158 = loc(fused[#loc107, #loc108])
#loc159 = loc(fused[#loc109, #loc106])
#loc160 = loc(fused[#loc110, #loc111])
