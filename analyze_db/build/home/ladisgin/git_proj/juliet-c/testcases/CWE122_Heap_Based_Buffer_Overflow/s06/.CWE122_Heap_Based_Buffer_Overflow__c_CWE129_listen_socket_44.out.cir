!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":44:21)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":44:25)
#loc235 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":323:10)
#loc236 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":323:14)
#loc237 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":323:20)
#loc238 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":323:32)
#loc255 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":159:25)
#loc256 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":159:29)
#loc335 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":202:25)
#loc336 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":202:29)
#true = #cir.bool<true> : !cir.bool
!ty_in_addr = !cir.struct<struct "in_addr" {!u32i} #cir.record.decl.ast>
#loc529 = loc(fused[#loc12, #loc13])
#loc616 = loc(fused[#loc235, #loc236])
#loc617 = loc(fused[#loc237, #loc238])
#loc622 = loc(fused[#loc255, #loc256])
#loc653 = loc(fused[#loc335, #loc336])
!ty_sockaddr = !cir.struct<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.struct<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc524)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc525)
  cir.func private @printIntLine(!s32i) loc(#loc526)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"ERROR: Array index is negative.\00" : !cir.array<!s8i x 32>> : !cir.array<!s8i x 32> {alignment = 1 : i64} loc(#loc7)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc527)
  cir.func internal private @badSink(%arg0: !s32i loc(fused[#loc12, #loc13])) extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc529)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc14)
    cir.scope {
      %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc531)
      %2 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc532)
      %3 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc21)
      %4 = cir.const #cir.int<10> : !s32i loc(#loc22)
      %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc22)
      %6 = cir.const #cir.int<4> : !u64i loc(#loc533)
      %7 = cir.binop(mul, %5, %6) : !u64i loc(#loc534)
      %8 = cir.call @malloc(%7) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc21)
      %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc535)
      cir.store %9, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc532)
      cir.scope {
        %13 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc27)
        %14 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc28)
        %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc28)
        %16 = cir.cmp(eq, %13, %15) : !cir.ptr<!s32i>, !cir.bool loc(#loc537)
        cir.if %16 {
          %17 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc30)
          %18 = cir.const #cir.int<1> : !s32i loc(#loc31)
          %19 = cir.unary(minus, %18) : !s32i, !s32i loc(#loc32)
          cir.call @exit(%19) : (!s32i) -> () extra(#fn_attr) loc(#loc30)
        } loc(#loc538)
      } loc(#loc536)
      cir.scope {
        %13 = cir.const #cir.int<0> : !s32i loc(#loc35)
        cir.store %13, %1 : !s32i, !cir.ptr<!s32i> loc(#loc540)
        cir.for : cond {
          %14 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc37)
          %15 = cir.const #cir.int<10> : !s32i loc(#loc38)
          %16 = cir.cmp(lt, %14, %15) : !s32i, !cir.bool loc(#loc541)
          cir.condition(%16) loc(#loc39)
        } body {
          cir.scope {
            %14 = cir.const #cir.int<0> : !s32i loc(#loc41)
            %15 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc42)
            %16 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc43)
            %17 = cir.ptr_stride(%15 : !cir.ptr<!s32i>, %16 : !s32i), !cir.ptr<!s32i> loc(#loc44)
            cir.store %14, %17 : !s32i, !cir.ptr<!s32i> loc(#loc543)
          } loc(#loc542)
          cir.yield loc(#loc34)
        } step {
          %14 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc45)
          %15 = cir.unary(inc, %14) : !s32i, !s32i loc(#loc46)
          cir.store %15, %1 : !s32i, !cir.ptr<!s32i> loc(#loc544)
          cir.yield loc(#loc539)
        } loc(#loc539)
      } loc(#loc539)
      cir.scope {
        %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc49)
        %14 = cir.const #cir.int<0> : !s32i loc(#loc50)
        %15 = cir.cmp(ge, %13, %14) : !s32i, !cir.bool loc(#loc546)
        cir.if %15 {
          %16 = cir.const #cir.int<1> : !s32i loc(#loc54)
          %17 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc55)
          %18 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc56)
          %19 = cir.ptr_stride(%17 : !cir.ptr<!s32i>, %18 : !s32i), !cir.ptr<!s32i> loc(#loc57)
          cir.store %16, %19 : !s32i, !cir.ptr<!s32i> loc(#loc548)
          cir.scope {
            %20 = cir.const #cir.int<0> : !s32i loc(#loc60)
            cir.store %20, %1 : !s32i, !cir.ptr<!s32i> loc(#loc550)
            cir.for : cond {
              %21 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc62)
              %22 = cir.const #cir.int<10> : !s32i loc(#loc63)
              %23 = cir.cmp(lt, %21, %22) : !s32i, !cir.bool loc(#loc551)
              cir.condition(%23) loc(#loc64)
            } body {
              cir.scope {
                %21 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc66)
                %22 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc67)
                %23 = cir.ptr_stride(%21 : !cir.ptr<!s32i>, %22 : !s32i), !cir.ptr<!s32i> loc(#loc68)
                %24 = cir.load %23 : !cir.ptr<!s32i>, !s32i loc(#loc66)
                cir.call @printIntLine(%24) : (!s32i) -> () loc(#loc69)
              } loc(#loc552)
              cir.yield loc(#loc59)
            } step {
              %21 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc70)
              %22 = cir.unary(inc, %21) : !s32i, !s32i loc(#loc71)
              cir.store %22, %1 : !s32i, !cir.ptr<!s32i> loc(#loc553)
              cir.yield loc(#loc549)
            } loc(#loc549)
          } loc(#loc549)
        } else {
          %16 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc7)
          %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc7)
          cir.call @printLine(%17) : (!cir.ptr<!s8i>) -> () loc(#loc72)
        } loc(#loc547)
      } loc(#loc545)
      %10 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc73)
      %11 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc74)
      %12 = cir.cast(bitcast, %11 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc74)
      cir.call @free(%12) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc73)
    } loc(#loc530)
    cir.return loc(#loc11)
  } loc(#loc528)
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc554)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc555)
  cir.func private @bind(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc556)
  cir.func private @listen(!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc557)
  cir.func private @accept(!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc558)
  cir.func private @recv(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc559)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc560)
  cir.func private @close(!s32i) -> !s32i loc(#loc561)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc563)
    %1 = cir.alloca !cir.ptr<!cir.func<!void (!s32i)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!s32i)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc564)
    %2 = cir.get_global @badSink : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc96)
    cir.store %2, %1 : !cir.ptr<!cir.func<!void (!s32i)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!s32i)>>> loc(#loc564)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc97)
    %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc98)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc565)
    cir.scope {
      %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc567)
      %8 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc568)
      %9 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc569)
      %10 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc570)
      %11 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc571)
      %12 = cir.const #cir.int<1> : !s32i loc(#loc107)
      %13 = cir.unary(minus, %12) : !s32i, !s32i loc(#loc107)
      cir.store %13, %9 : !s32i, !cir.ptr<!s32i> loc(#loc569)
      %14 = cir.const #cir.int<1> : !s32i loc(#loc109)
      %15 = cir.unary(minus, %14) : !s32i, !s32i loc(#loc109)
      cir.store %15, %10 : !s32i, !cir.ptr<!s32i> loc(#loc570)
      cir.scope {
        cir.do {
          %16 = cir.const #cir.int<2> : !s32i loc(#loc114)
          %17 = cir.const #cir.int<1> : !s32i loc(#loc115)
          %18 = cir.const #cir.int<6> : !s32i loc(#loc116)
          %19 = cir.call @socket(%16, %17, %18) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc117)
          cir.store %19, %9 : !s32i, !cir.ptr<!s32i> loc(#loc573)
          cir.scope {
            %61 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc122)
            %62 = cir.const #cir.int<1> : !s32i loc(#loc123)
            %63 = cir.unary(minus, %62) : !s32i, !s32i loc(#loc123)
            %64 = cir.cmp(eq, %61, %63) : !s32i, !cir.bool loc(#loc575)
            cir.if %64 {
              cir.break loc(#loc125)
            } loc(#loc576)
          } loc(#loc574)
          %20 = cir.cast(bitcast, %8 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc577)
          %21 = cir.const #cir.int<0> : !s32i loc(#loc128)
          %22 = cir.const #cir.int<16> : !u64i loc(#loc578)
          cir.libc.memset %22 bytes from %20 set to %21 : !cir.ptr<!void>, !s32i, !u64i loc(#loc579)
          %23 = cir.const #cir.int<2> : !s32i loc(#loc133)
          %24 = cir.cast(integral, %23 : !s32i), !u16i loc(#loc133)
          %25 = cir.get_member %8[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc134)
          cir.store %24, %25 : !u16i, !cir.ptr<!u16i> loc(#loc580)
          %26 = cir.const #cir.int<0> : !s32i loc(#loc136)
          %27 = cir.cast(integral, %26 : !s32i), !u32i loc(#loc136)
          %28 = cir.get_member %8[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc137)
          %29 = cir.get_member %28[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc138)
          cir.store %27, %29 : !u32i, !cir.ptr<!u32i> loc(#loc581)
          %30 = cir.const #cir.int<27015> : !s32i loc(#loc140)
          %31 = cir.cast(integral, %30 : !s32i), !u16i loc(#loc140)
          %32 = cir.call @htons(%31) : (!u16i) -> !u16i extra(#fn_attr) loc(#loc141)
          %33 = cir.get_member %8[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc142)
          cir.store %32, %33 : !u16i, !cir.ptr<!u16i> loc(#loc582)
          cir.scope {
            %61 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc147)
            %62 = cir.cast(bitcast, %8 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc584)
            %63 = cir.const #cir.int<16> : !u64i loc(#loc585)
            %64 = cir.cast(integral, %63 : !u64i), !u32i loc(#loc585)
            %65 = cir.call @bind(%61, %62, %64) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc152)
            %66 = cir.const #cir.int<1> : !s32i loc(#loc153)
            %67 = cir.unary(minus, %66) : !s32i, !s32i loc(#loc153)
            %68 = cir.cmp(eq, %65, %67) : !s32i, !cir.bool loc(#loc586)
            cir.if %68 {
              cir.break loc(#loc155)
            } loc(#loc587)
          } loc(#loc583)
          cir.scope {
            %61 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc158)
            %62 = cir.const #cir.int<5> : !s32i loc(#loc159)
            %63 = cir.call @listen(%61, %62) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc160)
            %64 = cir.const #cir.int<1> : !s32i loc(#loc161)
            %65 = cir.unary(minus, %64) : !s32i, !s32i loc(#loc161)
            %66 = cir.cmp(eq, %63, %65) : !s32i, !cir.bool loc(#loc589)
            cir.if %66 {
              cir.break loc(#loc163)
            } loc(#loc590)
          } loc(#loc588)
          %34 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc164)
          %35 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc165)
          %36 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc166)
          %37 = cir.call @accept(%34, %35, %36) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc167)
          cir.store %37, %10 : !s32i, !cir.ptr<!s32i> loc(#loc591)
          cir.scope {
            %61 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc172)
            %62 = cir.const #cir.int<1> : !s32i loc(#loc173)
            %63 = cir.unary(minus, %62) : !s32i, !s32i loc(#loc173)
            %64 = cir.cmp(eq, %61, %63) : !s32i, !cir.bool loc(#loc593)
            cir.if %64 {
              cir.break loc(#loc175)
            } loc(#loc594)
          } loc(#loc592)
          %38 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc176)
          %39 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc177)
          %40 = cir.cast(bitcast, %39 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc177)
          %41 = cir.const #cir.int<3> : !s32i loc(#loc178)
          %42 = cir.cast(integral, %41 : !s32i), !u64i loc(#loc178)
          %43 = cir.const #cir.int<4> : !u64i loc(#loc178)
          %44 = cir.binop(mul, %42, %43) : !u64i loc(#loc178)
          %45 = cir.const #cir.int<2> : !s32i loc(#loc178)
          %46 = cir.cast(integral, %45 : !s32i), !u64i loc(#loc178)
          %47 = cir.binop(add, %44, %46) : !u64i loc(#loc178)
          %48 = cir.const #cir.int<1> : !s32i loc(#loc179)
          %49 = cir.cast(integral, %48 : !s32i), !u64i loc(#loc179)
          %50 = cir.binop(sub, %47, %49) : !u64i loc(#loc595)
          %51 = cir.const #cir.int<0> : !s32i loc(#loc180)
          %52 = cir.call @recv(%38, %40, %50, %51) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc181)
          %53 = cir.cast(integral, %52 : !s64i), !s32i loc(#loc181)
          cir.store %53, %7 : !s32i, !cir.ptr<!s32i> loc(#loc596)
          cir.scope {
            %61 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc186)
            %62 = cir.const #cir.int<1> : !s32i loc(#loc187)
            %63 = cir.unary(minus, %62) : !s32i, !s32i loc(#loc187)
            %64 = cir.cmp(eq, %61, %63) : !s32i, !cir.bool loc(#loc598)
            %65 = cir.ternary(%64, true {
              %66 = cir.const #true loc(#loc188)
              cir.yield %66 : !cir.bool loc(#loc188)
            }, false {
              %66 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc189)
              %67 = cir.const #cir.int<0> : !s32i loc(#loc190)
              %68 = cir.cmp(eq, %66, %67) : !s32i, !cir.bool loc(#loc599)
              %69 = cir.ternary(%68, true {
                %70 = cir.const #true loc(#loc188)
                cir.yield %70 : !cir.bool loc(#loc188)
              }, false {
                %70 = cir.const #false loc(#loc188)
                cir.yield %70 : !cir.bool loc(#loc188)
              }) : (!cir.bool) -> !cir.bool loc(#loc188)
              cir.yield %69 : !cir.bool loc(#loc188)
            }) : (!cir.bool) -> !cir.bool loc(#loc188)
            cir.if %65 {
              cir.break loc(#loc192)
            } loc(#loc600)
          } loc(#loc597)
          %54 = cir.const #cir.int<0> : !s32i loc(#loc193)
          %55 = cir.cast(integral, %54 : !s32i), !s8i loc(#loc193)
          %56 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc194)
          %57 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc195)
          %58 = cir.ptr_stride(%57 : !cir.ptr<!s8i>, %56 : !s32i), !cir.ptr<!s8i> loc(#loc195)
          cir.store %55, %58 : !s8i, !cir.ptr<!s8i> loc(#loc601)
          %59 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc196)
          %60 = cir.call @atoi(%59) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc197)
          cir.store %60, %0 : !s32i, !cir.ptr<!s32i> loc(#loc602)
          cir.yield loc(#loc113)
        } while {
          %16 = cir.const #cir.int<0> : !s32i loc(#loc200)
          %17 = cir.cast(int_to_bool, %16 : !s32i), !cir.bool loc(#loc200)
          cir.condition(%17) loc(#loc200)
        } loc(#loc572)
      } loc(#loc572)
      cir.scope {
        %16 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc203)
        %17 = cir.const #cir.int<1> : !s32i loc(#loc204)
        %18 = cir.unary(minus, %17) : !s32i, !s32i loc(#loc204)
        %19 = cir.cmp(ne, %16, %18) : !s32i, !cir.bool loc(#loc604)
        cir.if %19 {
          %20 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc206)
          %21 = cir.call @close(%20) : (!s32i) -> !s32i loc(#loc207)
        } loc(#loc605)
      } loc(#loc603)
      cir.scope {
        %16 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc210)
        %17 = cir.const #cir.int<1> : !s32i loc(#loc211)
        %18 = cir.unary(minus, %17) : !s32i, !s32i loc(#loc211)
        %19 = cir.cmp(ne, %16, %18) : !s32i, !cir.bool loc(#loc607)
        cir.if %19 {
          %20 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc213)
          %21 = cir.call @close(%20) : (!s32i) -> !s32i loc(#loc214)
        } loc(#loc608)
      } loc(#loc606)
    } loc(#loc566)
    %5 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<!void (!s32i)>>>, !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc215)
    %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc216)
    cir.call %5(%6) : (!cir.ptr<!cir.func<!void (!s32i)>>, !s32i) -> () loc(#loc215)
    cir.return loc(#loc92)
  } loc(#loc562)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc610)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc219)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc611)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc221)
    cir.return loc(#loc218)
  } loc(#loc609)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc612)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc613)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc614)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc229)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc230)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc231)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc232)
  cir.func @main(%arg0: !s32i loc(fused[#loc235, #loc236]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc237, #loc238])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc616)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc617)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc234)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc239)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc239)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc240)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc241)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc241)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc242)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc229)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc229)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc243)
    %8 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44_good : !cir.ptr<!cir.func<!void ()>> loc(#loc618)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44_good() : () -> () loc(#loc244)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc230)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc230)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc246)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc231)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc231)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc247)
    %13 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc619)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44_bad() : () -> () loc(#loc248)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc232)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc232)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc250)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc251)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc620)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc620)
    cir.return %17 : !s32i loc(#loc620)
  } loc(#loc615)
  cir.func internal private @goodG2BSink(%arg0: !s32i loc(fused[#loc255, #loc256])) extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc622)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc257)
    cir.scope {
      %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc624)
      %2 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc625)
      %3 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc264)
      %4 = cir.const #cir.int<10> : !s32i loc(#loc265)
      %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc265)
      %6 = cir.const #cir.int<4> : !u64i loc(#loc626)
      %7 = cir.binop(mul, %5, %6) : !u64i loc(#loc627)
      %8 = cir.call @malloc(%7) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc264)
      %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc628)
      cir.store %9, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc625)
      cir.scope {
        %13 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc270)
        %14 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc271)
        %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc271)
        %16 = cir.cmp(eq, %13, %15) : !cir.ptr<!s32i>, !cir.bool loc(#loc630)
        cir.if %16 {
          %17 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc273)
          %18 = cir.const #cir.int<1> : !s32i loc(#loc274)
          %19 = cir.unary(minus, %18) : !s32i, !s32i loc(#loc275)
          cir.call @exit(%19) : (!s32i) -> () extra(#fn_attr) loc(#loc273)
        } loc(#loc631)
      } loc(#loc629)
      cir.scope {
        %13 = cir.const #cir.int<0> : !s32i loc(#loc278)
        cir.store %13, %1 : !s32i, !cir.ptr<!s32i> loc(#loc633)
        cir.for : cond {
          %14 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc280)
          %15 = cir.const #cir.int<10> : !s32i loc(#loc281)
          %16 = cir.cmp(lt, %14, %15) : !s32i, !cir.bool loc(#loc634)
          cir.condition(%16) loc(#loc282)
        } body {
          cir.scope {
            %14 = cir.const #cir.int<0> : !s32i loc(#loc284)
            %15 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc285)
            %16 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc286)
            %17 = cir.ptr_stride(%15 : !cir.ptr<!s32i>, %16 : !s32i), !cir.ptr<!s32i> loc(#loc287)
            cir.store %14, %17 : !s32i, !cir.ptr<!s32i> loc(#loc636)
          } loc(#loc635)
          cir.yield loc(#loc277)
        } step {
          %14 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc288)
          %15 = cir.unary(inc, %14) : !s32i, !s32i loc(#loc289)
          cir.store %15, %1 : !s32i, !cir.ptr<!s32i> loc(#loc637)
          cir.yield loc(#loc632)
        } loc(#loc632)
      } loc(#loc632)
      cir.scope {
        %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc292)
        %14 = cir.const #cir.int<0> : !s32i loc(#loc293)
        %15 = cir.cmp(ge, %13, %14) : !s32i, !cir.bool loc(#loc639)
        cir.if %15 {
          %16 = cir.const #cir.int<1> : !s32i loc(#loc297)
          %17 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc298)
          %18 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc299)
          %19 = cir.ptr_stride(%17 : !cir.ptr<!s32i>, %18 : !s32i), !cir.ptr<!s32i> loc(#loc300)
          cir.store %16, %19 : !s32i, !cir.ptr<!s32i> loc(#loc641)
          cir.scope {
            %20 = cir.const #cir.int<0> : !s32i loc(#loc303)
            cir.store %20, %1 : !s32i, !cir.ptr<!s32i> loc(#loc643)
            cir.for : cond {
              %21 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc305)
              %22 = cir.const #cir.int<10> : !s32i loc(#loc306)
              %23 = cir.cmp(lt, %21, %22) : !s32i, !cir.bool loc(#loc644)
              cir.condition(%23) loc(#loc307)
            } body {
              cir.scope {
                %21 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc309)
                %22 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc310)
                %23 = cir.ptr_stride(%21 : !cir.ptr<!s32i>, %22 : !s32i), !cir.ptr<!s32i> loc(#loc311)
                %24 = cir.load %23 : !cir.ptr<!s32i>, !s32i loc(#loc309)
                cir.call @printIntLine(%24) : (!s32i) -> () loc(#loc312)
              } loc(#loc645)
              cir.yield loc(#loc302)
            } step {
              %21 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc313)
              %22 = cir.unary(inc, %21) : !s32i, !s32i loc(#loc314)
              cir.store %22, %1 : !s32i, !cir.ptr<!s32i> loc(#loc646)
              cir.yield loc(#loc642)
            } loc(#loc642)
          } loc(#loc642)
        } else {
          %16 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc315)
          %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc315)
          cir.call @printLine(%17) : (!cir.ptr<!s8i>) -> () loc(#loc316)
        } loc(#loc640)
      } loc(#loc638)
      %10 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc317)
      %11 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc318)
      %12 = cir.cast(bitcast, %11 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc318)
      cir.call @free(%12) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc317)
    } loc(#loc623)
    cir.return loc(#loc254)
  } loc(#loc621)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc648)
    %1 = cir.alloca !cir.ptr<!cir.func<!void (!s32i)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!s32i)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc649)
    %2 = cir.get_global @goodG2BSink : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc324)
    cir.store %2, %1 : !cir.ptr<!cir.func<!void (!s32i)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!s32i)>>> loc(#loc649)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc325)
    %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc326)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc650)
    %5 = cir.const #cir.int<7> : !s32i loc(#loc328)
    cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc651)
    %6 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<!void (!s32i)>>>, !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc330)
    %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc331)
    cir.call %6(%7) : (!cir.ptr<!cir.func<!void (!s32i)>>, !s32i) -> () loc(#loc330)
    cir.return loc(#loc320)
  } loc(#loc647)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"ERROR: Array index is out-of-bounds\00" : !cir.array<!s8i x 36>> : !cir.array<!s8i x 36> {alignment = 1 : i64} loc(#loc332)
  cir.func internal private @goodB2GSink(%arg0: !s32i loc(fused[#loc335, #loc336])) extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc653)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc337)
    cir.scope {
      %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc655)
      %2 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc656)
      %3 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc344)
      %4 = cir.const #cir.int<10> : !s32i loc(#loc345)
      %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc345)
      %6 = cir.const #cir.int<4> : !u64i loc(#loc657)
      %7 = cir.binop(mul, %5, %6) : !u64i loc(#loc658)
      %8 = cir.call @malloc(%7) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc344)
      %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc659)
      cir.store %9, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc656)
      cir.scope {
        %13 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc350)
        %14 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc351)
        %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc351)
        %16 = cir.cmp(eq, %13, %15) : !cir.ptr<!s32i>, !cir.bool loc(#loc661)
        cir.if %16 {
          %17 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc353)
          %18 = cir.const #cir.int<1> : !s32i loc(#loc354)
          %19 = cir.unary(minus, %18) : !s32i, !s32i loc(#loc355)
          cir.call @exit(%19) : (!s32i) -> () extra(#fn_attr) loc(#loc353)
        } loc(#loc662)
      } loc(#loc660)
      cir.scope {
        %13 = cir.const #cir.int<0> : !s32i loc(#loc358)
        cir.store %13, %1 : !s32i, !cir.ptr<!s32i> loc(#loc664)
        cir.for : cond {
          %14 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc360)
          %15 = cir.const #cir.int<10> : !s32i loc(#loc361)
          %16 = cir.cmp(lt, %14, %15) : !s32i, !cir.bool loc(#loc665)
          cir.condition(%16) loc(#loc362)
        } body {
          cir.scope {
            %14 = cir.const #cir.int<0> : !s32i loc(#loc364)
            %15 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc365)
            %16 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc366)
            %17 = cir.ptr_stride(%15 : !cir.ptr<!s32i>, %16 : !s32i), !cir.ptr<!s32i> loc(#loc367)
            cir.store %14, %17 : !s32i, !cir.ptr<!s32i> loc(#loc667)
          } loc(#loc666)
          cir.yield loc(#loc357)
        } step {
          %14 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc368)
          %15 = cir.unary(inc, %14) : !s32i, !s32i loc(#loc369)
          cir.store %15, %1 : !s32i, !cir.ptr<!s32i> loc(#loc668)
          cir.yield loc(#loc663)
        } loc(#loc663)
      } loc(#loc663)
      cir.scope {
        %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc372)
        %14 = cir.const #cir.int<0> : !s32i loc(#loc373)
        %15 = cir.cmp(ge, %13, %14) : !s32i, !cir.bool loc(#loc670)
        %16 = cir.ternary(%15, true {
          %17 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc375)
          %18 = cir.const #cir.int<10> : !s32i loc(#loc376)
          %19 = cir.cmp(lt, %17, %18) : !s32i, !cir.bool loc(#loc671)
          %20 = cir.ternary(%19, true {
            %21 = cir.const #true loc(#loc374)
            cir.yield %21 : !cir.bool loc(#loc374)
          }, false {
            %21 = cir.const #false loc(#loc374)
            cir.yield %21 : !cir.bool loc(#loc374)
          }) : (!cir.bool) -> !cir.bool loc(#loc374)
          cir.yield %20 : !cir.bool loc(#loc374)
        }, false {
          %17 = cir.const #false loc(#loc374)
          cir.yield %17 : !cir.bool loc(#loc374)
        }) : (!cir.bool) -> !cir.bool loc(#loc374)
        cir.if %16 {
          %17 = cir.const #cir.int<1> : !s32i loc(#loc381)
          %18 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc382)
          %19 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc383)
          %20 = cir.ptr_stride(%18 : !cir.ptr<!s32i>, %19 : !s32i), !cir.ptr<!s32i> loc(#loc384)
          cir.store %17, %20 : !s32i, !cir.ptr<!s32i> loc(#loc673)
          cir.scope {
            %21 = cir.const #cir.int<0> : !s32i loc(#loc387)
            cir.store %21, %1 : !s32i, !cir.ptr<!s32i> loc(#loc675)
            cir.for : cond {
              %22 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc389)
              %23 = cir.const #cir.int<10> : !s32i loc(#loc390)
              %24 = cir.cmp(lt, %22, %23) : !s32i, !cir.bool loc(#loc676)
              cir.condition(%24) loc(#loc391)
            } body {
              cir.scope {
                %22 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc393)
                %23 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc394)
                %24 = cir.ptr_stride(%22 : !cir.ptr<!s32i>, %23 : !s32i), !cir.ptr<!s32i> loc(#loc395)
                %25 = cir.load %24 : !cir.ptr<!s32i>, !s32i loc(#loc393)
                cir.call @printIntLine(%25) : (!s32i) -> () loc(#loc396)
              } loc(#loc677)
              cir.yield loc(#loc386)
            } step {
              %22 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc397)
              %23 = cir.unary(inc, %22) : !s32i, !s32i loc(#loc398)
              cir.store %23, %1 : !s32i, !cir.ptr<!s32i> loc(#loc678)
              cir.yield loc(#loc674)
            } loc(#loc674)
          } loc(#loc674)
        } else {
          %17 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc332)
          %18 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc332)
          cir.call @printLine(%18) : (!cir.ptr<!s8i>) -> () loc(#loc399)
        } loc(#loc672)
      } loc(#loc669)
      %10 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc400)
      %11 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc401)
      %12 = cir.cast(bitcast, %11 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc401)
      cir.call @free(%12) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc400)
    } loc(#loc654)
    cir.return loc(#loc334)
  } loc(#loc652)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc680)
    %1 = cir.alloca !cir.ptr<!cir.func<!void (!s32i)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!s32i)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc681)
    %2 = cir.get_global @goodB2GSink : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc407)
    cir.store %2, %1 : !cir.ptr<!cir.func<!void (!s32i)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!s32i)>>> loc(#loc681)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc408)
    %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc409)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc682)
    cir.scope {
      %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc684)
      %8 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc685)
      %9 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc686)
      %10 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc687)
      %11 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc688)
      %12 = cir.const #cir.int<1> : !s32i loc(#loc418)
      %13 = cir.unary(minus, %12) : !s32i, !s32i loc(#loc418)
      cir.store %13, %9 : !s32i, !cir.ptr<!s32i> loc(#loc686)
      %14 = cir.const #cir.int<1> : !s32i loc(#loc420)
      %15 = cir.unary(minus, %14) : !s32i, !s32i loc(#loc420)
      cir.store %15, %10 : !s32i, !cir.ptr<!s32i> loc(#loc687)
      cir.scope {
        cir.do {
          %16 = cir.const #cir.int<2> : !s32i loc(#loc425)
          %17 = cir.const #cir.int<1> : !s32i loc(#loc426)
          %18 = cir.const #cir.int<6> : !s32i loc(#loc427)
          %19 = cir.call @socket(%16, %17, %18) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc428)
          cir.store %19, %9 : !s32i, !cir.ptr<!s32i> loc(#loc690)
          cir.scope {
            %61 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc433)
            %62 = cir.const #cir.int<1> : !s32i loc(#loc434)
            %63 = cir.unary(minus, %62) : !s32i, !s32i loc(#loc434)
            %64 = cir.cmp(eq, %61, %63) : !s32i, !cir.bool loc(#loc692)
            cir.if %64 {
              cir.break loc(#loc436)
            } loc(#loc693)
          } loc(#loc691)
          %20 = cir.cast(bitcast, %8 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc694)
          %21 = cir.const #cir.int<0> : !s32i loc(#loc439)
          %22 = cir.const #cir.int<16> : !u64i loc(#loc695)
          cir.libc.memset %22 bytes from %20 set to %21 : !cir.ptr<!void>, !s32i, !u64i loc(#loc696)
          %23 = cir.const #cir.int<2> : !s32i loc(#loc444)
          %24 = cir.cast(integral, %23 : !s32i), !u16i loc(#loc444)
          %25 = cir.get_member %8[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc134)
          cir.store %24, %25 : !u16i, !cir.ptr<!u16i> loc(#loc697)
          %26 = cir.const #cir.int<0> : !s32i loc(#loc446)
          %27 = cir.cast(integral, %26 : !s32i), !u32i loc(#loc446)
          %28 = cir.get_member %8[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc137)
          %29 = cir.get_member %28[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc138)
          cir.store %27, %29 : !u32i, !cir.ptr<!u32i> loc(#loc698)
          %30 = cir.const #cir.int<27015> : !s32i loc(#loc448)
          %31 = cir.cast(integral, %30 : !s32i), !u16i loc(#loc448)
          %32 = cir.call @htons(%31) : (!u16i) -> !u16i extra(#fn_attr) loc(#loc449)
          %33 = cir.get_member %8[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc142)
          cir.store %32, %33 : !u16i, !cir.ptr<!u16i> loc(#loc699)
          cir.scope {
            %61 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc454)
            %62 = cir.cast(bitcast, %8 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc701)
            %63 = cir.const #cir.int<16> : !u64i loc(#loc702)
            %64 = cir.cast(integral, %63 : !u64i), !u32i loc(#loc702)
            %65 = cir.call @bind(%61, %62, %64) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc459)
            %66 = cir.const #cir.int<1> : !s32i loc(#loc460)
            %67 = cir.unary(minus, %66) : !s32i, !s32i loc(#loc460)
            %68 = cir.cmp(eq, %65, %67) : !s32i, !cir.bool loc(#loc703)
            cir.if %68 {
              cir.break loc(#loc462)
            } loc(#loc704)
          } loc(#loc700)
          cir.scope {
            %61 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc465)
            %62 = cir.const #cir.int<5> : !s32i loc(#loc466)
            %63 = cir.call @listen(%61, %62) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc467)
            %64 = cir.const #cir.int<1> : !s32i loc(#loc468)
            %65 = cir.unary(minus, %64) : !s32i, !s32i loc(#loc468)
            %66 = cir.cmp(eq, %63, %65) : !s32i, !cir.bool loc(#loc706)
            cir.if %66 {
              cir.break loc(#loc470)
            } loc(#loc707)
          } loc(#loc705)
          %34 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc471)
          %35 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc472)
          %36 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc473)
          %37 = cir.call @accept(%34, %35, %36) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc474)
          cir.store %37, %10 : !s32i, !cir.ptr<!s32i> loc(#loc708)
          cir.scope {
            %61 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc479)
            %62 = cir.const #cir.int<1> : !s32i loc(#loc480)
            %63 = cir.unary(minus, %62) : !s32i, !s32i loc(#loc480)
            %64 = cir.cmp(eq, %61, %63) : !s32i, !cir.bool loc(#loc710)
            cir.if %64 {
              cir.break loc(#loc482)
            } loc(#loc711)
          } loc(#loc709)
          %38 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc483)
          %39 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc484)
          %40 = cir.cast(bitcast, %39 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc484)
          %41 = cir.const #cir.int<3> : !s32i loc(#loc485)
          %42 = cir.cast(integral, %41 : !s32i), !u64i loc(#loc485)
          %43 = cir.const #cir.int<4> : !u64i loc(#loc485)
          %44 = cir.binop(mul, %42, %43) : !u64i loc(#loc485)
          %45 = cir.const #cir.int<2> : !s32i loc(#loc485)
          %46 = cir.cast(integral, %45 : !s32i), !u64i loc(#loc485)
          %47 = cir.binop(add, %44, %46) : !u64i loc(#loc485)
          %48 = cir.const #cir.int<1> : !s32i loc(#loc486)
          %49 = cir.cast(integral, %48 : !s32i), !u64i loc(#loc486)
          %50 = cir.binop(sub, %47, %49) : !u64i loc(#loc712)
          %51 = cir.const #cir.int<0> : !s32i loc(#loc487)
          %52 = cir.call @recv(%38, %40, %50, %51) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc488)
          %53 = cir.cast(integral, %52 : !s64i), !s32i loc(#loc488)
          cir.store %53, %7 : !s32i, !cir.ptr<!s32i> loc(#loc713)
          cir.scope {
            %61 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc493)
            %62 = cir.const #cir.int<1> : !s32i loc(#loc494)
            %63 = cir.unary(minus, %62) : !s32i, !s32i loc(#loc494)
            %64 = cir.cmp(eq, %61, %63) : !s32i, !cir.bool loc(#loc715)
            %65 = cir.ternary(%64, true {
              %66 = cir.const #true loc(#loc495)
              cir.yield %66 : !cir.bool loc(#loc495)
            }, false {
              %66 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc496)
              %67 = cir.const #cir.int<0> : !s32i loc(#loc497)
              %68 = cir.cmp(eq, %66, %67) : !s32i, !cir.bool loc(#loc716)
              %69 = cir.ternary(%68, true {
                %70 = cir.const #true loc(#loc495)
                cir.yield %70 : !cir.bool loc(#loc495)
              }, false {
                %70 = cir.const #false loc(#loc495)
                cir.yield %70 : !cir.bool loc(#loc495)
              }) : (!cir.bool) -> !cir.bool loc(#loc495)
              cir.yield %69 : !cir.bool loc(#loc495)
            }) : (!cir.bool) -> !cir.bool loc(#loc495)
            cir.if %65 {
              cir.break loc(#loc499)
            } loc(#loc717)
          } loc(#loc714)
          %54 = cir.const #cir.int<0> : !s32i loc(#loc500)
          %55 = cir.cast(integral, %54 : !s32i), !s8i loc(#loc500)
          %56 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc501)
          %57 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc502)
          %58 = cir.ptr_stride(%57 : !cir.ptr<!s8i>, %56 : !s32i), !cir.ptr<!s8i> loc(#loc502)
          cir.store %55, %58 : !s8i, !cir.ptr<!s8i> loc(#loc718)
          %59 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc503)
          %60 = cir.call @atoi(%59) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc504)
          cir.store %60, %0 : !s32i, !cir.ptr<!s32i> loc(#loc719)
          cir.yield loc(#loc424)
        } while {
          %16 = cir.const #cir.int<0> : !s32i loc(#loc507)
          %17 = cir.cast(int_to_bool, %16 : !s32i), !cir.bool loc(#loc507)
          cir.condition(%17) loc(#loc507)
        } loc(#loc689)
      } loc(#loc689)
      cir.scope {
        %16 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc510)
        %17 = cir.const #cir.int<1> : !s32i loc(#loc511)
        %18 = cir.unary(minus, %17) : !s32i, !s32i loc(#loc511)
        %19 = cir.cmp(ne, %16, %18) : !s32i, !cir.bool loc(#loc721)
        cir.if %19 {
          %20 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc513)
          %21 = cir.call @close(%20) : (!s32i) -> !s32i loc(#loc514)
        } loc(#loc722)
      } loc(#loc720)
      cir.scope {
        %16 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc517)
        %17 = cir.const #cir.int<1> : !s32i loc(#loc518)
        %18 = cir.unary(minus, %17) : !s32i, !s32i loc(#loc518)
        %19 = cir.cmp(ne, %16, %18) : !s32i, !cir.bool loc(#loc724)
        cir.if %19 {
          %20 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc520)
          %21 = cir.call @close(%20) : (!s32i) -> !s32i loc(#loc521)
        } loc(#loc725)
      } loc(#loc723)
    } loc(#loc683)
    %5 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<!void (!s32i)>>>, !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc522)
    %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc523)
    cir.call %5(%6) : (!cir.ptr<!cir.func<!void (!s32i)>>, !s32i) -> () loc(#loc522)
    cir.return loc(#loc403)
  } loc(#loc679)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc7 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":68:23)
#loc8 = loc("/usr/include/stdlib.h":687:1)
#loc9 = loc("/usr/include/stdlib.h":687:32)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":44:1)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":72:1)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":45:1)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":46:5)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":71:5)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":47:9)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":47:13)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":48:9)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":48:54)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":48:31)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":48:38)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":48:43)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":48:53)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":49:9)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":49:39)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":49:13)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":49:23)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":49:29)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":49:30)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":49:36)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":49:35)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":51:9)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":54:9)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":51:18)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":51:14)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":51:21)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":51:25)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":51:23)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":52:9)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":53:25)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":53:13)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":53:20)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":53:21)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":51:30)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":51:29)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":57:9)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":69:9)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":57:13)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":57:21)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":58:9)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":65:9)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":67:9)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":59:28)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":59:13)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":59:20)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":59:24)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":61:13)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":64:13)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":61:21)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":61:17)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":61:24)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":61:28)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":61:26)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":62:13)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":63:30)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":63:37)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":63:38)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":63:17)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":61:33)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":61:32)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":68:13)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":70:9)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":70:14)
#loc75 = loc("/usr/include/sys/socket.h":102:1)
#loc76 = loc("/usr/include/sys/socket.h":102:62)
#loc77 = loc("/usr/include/netinet/in.h":404:1)
#loc78 = loc("/usr/include/netinet/in.h":405:40)
#loc79 = loc("/usr/include/sys/socket.h":112:1)
#loc80 = loc("/usr/include/sys/socket.h":113:6)
#loc81 = loc("/usr/include/sys/socket.h":296:1)
#loc82 = loc("/usr/include/sys/socket.h":296:39)
#loc83 = loc("/usr/include/sys/socket.h":306:1)
#loc84 = loc("/usr/include/sys/socket.h":307:38)
#loc85 = loc("/usr/include/sys/socket.h":145:1)
#loc86 = loc("/usr/include/sys/socket.h":145:68)
#loc87 = loc("/usr/include/stdlib.h":105:1)
#loc88 = loc("/usr/include/stdlib.h":106:33)
#loc89 = loc("/usr/include/unistd.h":358:1)
#loc90 = loc("/usr/include/unistd.h":358:27)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":74:1)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":152:1)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":76:5)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":76:9)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":78:5)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":78:29)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":80:13)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":80:12)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":80:5)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":81:5)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":149:5)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":86:9)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":86:13)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":87:9)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":87:28)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":88:9)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":88:31)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":89:9)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":89:31)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":90:9)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":90:41)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":91:9)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":134:17)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":101:35)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":101:44)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":101:57)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":101:28)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":101:13)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":101:68)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":102:13)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":105:13)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":102:17)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":102:33)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":103:13)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":104:17)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":106:20)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":106:21)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":106:30)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":106:33)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":106:47)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":106:13)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":106:48)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":107:34)
#loc134 = loc("/usr/include/netinet/in.h":249:5)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":107:13)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":108:39)
#loc137 = loc("/usr/include/netinet/in.h":251:20)
#loc138 = loc("/usr/include/netinet/in.h":33:15)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":108:13)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":109:38)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":109:32)
#loc142 = loc("/usr/include/netinet/in.h":250:15)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":109:13)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":109:46)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":110:13)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":113:13)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":110:22)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":110:54)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":110:55)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":110:64)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":110:78)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":110:17)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":110:84)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":111:13)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":112:17)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":114:13)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":117:13)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":114:24)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":114:38)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":114:17)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":114:57)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":115:13)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":116:17)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":118:35)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":118:49)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":118:55)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":118:28)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":118:13)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":118:59)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":119:13)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":122:13)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":119:17)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":119:33)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":120:13)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":121:17)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":124:31)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":124:45)
#loc178 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":124:58)
#loc179 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":124:76)
#loc180 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":124:79)
#loc181 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":124:26)
#loc182 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":124:13)
#loc183 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":124:80)
#loc184 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":125:13)
#loc185 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":128:13)
#loc186 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":125:17)
#loc187 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":125:31)
#loc188 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":125:44)
#loc189 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":125:47)
#loc190 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":125:61)
#loc191 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":126:13)
#loc192 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":127:17)
#loc193 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":130:39)
#loc194 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":130:25)
#loc195 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":130:13)
#loc196 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":132:25)
#loc197 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":132:20)
#loc198 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":132:13)
#loc199 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":132:36)
#loc200 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":134:16)
#loc201 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":135:9)
#loc202 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":138:9)
#loc203 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":135:13)
#loc204 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":135:29)
#loc205 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":136:9)
#loc206 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":137:26)
#loc207 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":137:13)
#loc208 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":139:9)
#loc209 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":142:9)
#loc210 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":139:13)
#loc211 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":139:29)
#loc212 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":140:9)
#loc213 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":141:26)
#loc214 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":141:13)
#loc215 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":151:5)
#loc216 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":151:13)
#loc217 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":309:1)
#loc218 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":313:1)
#loc219 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":311:5)
#loc220 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":311:13)
#loc221 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":312:5)
#loc222 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":312:13)
#loc223 = loc("/usr/include/stdlib.h":575:1)
#loc224 = loc("/usr/include/stdlib.h":575:41)
#loc225 = loc("/usr/include/time.h":76:1)
#loc226 = loc("/usr/include/time.h":76:38)
#loc227 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc228 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc229 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":328:15)
#loc230 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":330:15)
#loc231 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":333:15)
#loc232 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":335:15)
#loc233 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":323:1)
#loc234 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":338:1)
#loc239 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":324:1)
#loc240 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":326:27)
#loc241 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":326:22)
#loc242 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":326:5)
#loc243 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":328:5)
#loc244 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":329:5)
#loc245 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":329:71)
#loc246 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":330:5)
#loc247 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":333:5)
#loc248 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":334:5)
#loc249 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":334:70)
#loc250 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":335:5)
#loc251 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":337:12)
#loc252 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":337:5)
#loc253 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":159:1)
#loc254 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":187:1)
#loc257 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":160:1)
#loc258 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":161:5)
#loc259 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":186:5)
#loc260 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":162:9)
#loc261 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":162:13)
#loc262 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":163:9)
#loc263 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":163:54)
#loc264 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":163:31)
#loc265 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":163:38)
#loc266 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":163:43)
#loc267 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":163:53)
#loc268 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":164:9)
#loc269 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":164:39)
#loc270 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":164:13)
#loc271 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":164:23)
#loc272 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":164:29)
#loc273 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":164:30)
#loc274 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":164:36)
#loc275 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":164:35)
#loc276 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":166:9)
#loc277 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":169:9)
#loc278 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":166:18)
#loc279 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":166:14)
#loc280 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":166:21)
#loc281 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":166:25)
#loc282 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":166:23)
#loc283 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":167:9)
#loc284 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":168:25)
#loc285 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":168:13)
#loc286 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":168:20)
#loc287 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":168:21)
#loc288 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":166:30)
#loc289 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":166:29)
#loc290 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":172:9)
#loc291 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":184:9)
#loc292 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":172:13)
#loc293 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":172:21)
#loc294 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":173:9)
#loc295 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":180:9)
#loc296 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":182:9)
#loc297 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":174:28)
#loc298 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":174:13)
#loc299 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":174:20)
#loc300 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":174:24)
#loc301 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":176:13)
#loc302 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":179:13)
#loc303 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":176:21)
#loc304 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":176:17)
#loc305 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":176:24)
#loc306 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":176:28)
#loc307 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":176:26)
#loc308 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":177:13)
#loc309 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":178:30)
#loc310 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":178:37)
#loc311 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":178:38)
#loc312 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":178:17)
#loc313 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":176:33)
#loc314 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":176:32)
#loc315 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":183:23)
#loc316 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":183:13)
#loc317 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":185:9)
#loc318 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":185:14)
#loc319 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":189:1)
#loc320 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":199:1)
#loc321 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":191:5)
#loc322 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":191:9)
#loc323 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":192:5)
#loc324 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":192:29)
#loc325 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":194:13)
#loc326 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":194:12)
#loc327 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":194:5)
#loc328 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":197:12)
#loc329 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":197:5)
#loc330 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":198:5)
#loc331 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":198:13)
#loc332 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":225:23)
#loc333 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":202:1)
#loc334 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":229:1)
#loc337 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":203:1)
#loc338 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":204:5)
#loc339 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":228:5)
#loc340 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":205:9)
#loc341 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":205:13)
#loc342 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":206:9)
#loc343 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":206:54)
#loc344 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":206:31)
#loc345 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":206:38)
#loc346 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":206:43)
#loc347 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":206:53)
#loc348 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":207:9)
#loc349 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":207:39)
#loc350 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":207:13)
#loc351 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":207:23)
#loc352 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":207:29)
#loc353 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":207:30)
#loc354 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":207:36)
#loc355 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":207:35)
#loc356 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":209:9)
#loc357 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":212:9)
#loc358 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":209:18)
#loc359 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":209:14)
#loc360 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":209:21)
#loc361 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":209:25)
#loc362 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":209:23)
#loc363 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":210:9)
#loc364 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":211:25)
#loc365 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":211:13)
#loc366 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":211:20)
#loc367 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":211:21)
#loc368 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":209:30)
#loc369 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":209:29)
#loc370 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":214:9)
#loc371 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":226:9)
#loc372 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":214:13)
#loc373 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":214:21)
#loc374 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":214:23)
#loc375 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":214:26)
#loc376 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":214:34)
#loc377 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":214:36)
#loc378 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":215:9)
#loc379 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":222:9)
#loc380 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":224:9)
#loc381 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":216:28)
#loc382 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":216:13)
#loc383 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":216:20)
#loc384 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":216:24)
#loc385 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":218:13)
#loc386 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":221:13)
#loc387 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":218:21)
#loc388 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":218:17)
#loc389 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":218:24)
#loc390 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":218:28)
#loc391 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":218:26)
#loc392 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":219:13)
#loc393 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":220:30)
#loc394 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":220:37)
#loc395 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":220:38)
#loc396 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":220:17)
#loc397 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":218:33)
#loc398 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":218:32)
#loc399 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":225:13)
#loc400 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":227:9)
#loc401 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":227:14)
#loc402 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":231:1)
#loc403 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":307:1)
#loc404 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":233:5)
#loc405 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":233:9)
#loc406 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":234:5)
#loc407 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":234:29)
#loc408 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":236:13)
#loc409 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":236:12)
#loc410 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":236:5)
#loc411 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":237:5)
#loc412 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":305:5)
#loc413 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":242:9)
#loc414 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":242:13)
#loc415 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":243:9)
#loc416 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":243:28)
#loc417 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":244:9)
#loc418 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":244:31)
#loc419 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":245:9)
#loc420 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":245:31)
#loc421 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":246:9)
#loc422 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":246:41)
#loc423 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":247:9)
#loc424 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":290:17)
#loc425 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":257:35)
#loc426 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":257:44)
#loc427 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":257:57)
#loc428 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":257:28)
#loc429 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":257:13)
#loc430 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":257:68)
#loc431 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":258:13)
#loc432 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":261:13)
#loc433 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":258:17)
#loc434 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":258:33)
#loc435 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":259:13)
#loc436 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":260:17)
#loc437 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":262:20)
#loc438 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":262:21)
#loc439 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":262:30)
#loc440 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":262:33)
#loc441 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":262:47)
#loc442 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":262:13)
#loc443 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":262:48)
#loc444 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":263:34)
#loc445 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":263:13)
#loc446 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":264:39)
#loc447 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":264:13)
#loc448 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":265:38)
#loc449 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":265:32)
#loc450 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":265:13)
#loc451 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":265:46)
#loc452 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":266:13)
#loc453 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":269:13)
#loc454 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":266:22)
#loc455 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":266:54)
#loc456 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":266:55)
#loc457 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":266:64)
#loc458 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":266:78)
#loc459 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":266:17)
#loc460 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":266:84)
#loc461 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":267:13)
#loc462 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":268:17)
#loc463 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":270:13)
#loc464 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":273:13)
#loc465 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":270:24)
#loc466 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":270:38)
#loc467 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":270:17)
#loc468 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":270:57)
#loc469 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":271:13)
#loc470 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":272:17)
#loc471 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":274:35)
#loc472 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":274:49)
#loc473 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":274:55)
#loc474 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":274:28)
#loc475 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":274:13)
#loc476 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":274:59)
#loc477 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":275:13)
#loc478 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":278:13)
#loc479 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":275:17)
#loc480 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":275:33)
#loc481 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":276:13)
#loc482 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":277:17)
#loc483 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":280:31)
#loc484 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":280:45)
#loc485 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":280:58)
#loc486 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":280:76)
#loc487 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":280:79)
#loc488 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":280:26)
#loc489 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":280:13)
#loc490 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":280:80)
#loc491 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":281:13)
#loc492 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":284:13)
#loc493 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":281:17)
#loc494 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":281:31)
#loc495 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":281:44)
#loc496 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":281:47)
#loc497 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":281:61)
#loc498 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":282:13)
#loc499 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":283:17)
#loc500 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":286:39)
#loc501 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":286:25)
#loc502 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":286:13)
#loc503 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":288:25)
#loc504 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":288:20)
#loc505 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":288:13)
#loc506 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":288:36)
#loc507 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":290:16)
#loc508 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":291:9)
#loc509 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":294:9)
#loc510 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":291:13)
#loc511 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":291:29)
#loc512 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":292:9)
#loc513 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":293:26)
#loc514 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":293:13)
#loc515 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":295:9)
#loc516 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":298:9)
#loc517 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":295:13)
#loc518 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":295:29)
#loc519 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":296:9)
#loc520 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":297:26)
#loc521 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":297:13)
#loc522 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":306:5)
#loc523 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c":306:13)
#loc524 = loc(fused[#loc1, #loc2])
#loc525 = loc(fused[#loc3, #loc4])
#loc526 = loc(fused[#loc5, #loc6])
#loc527 = loc(fused[#loc8, #loc9])
#loc528 = loc(fused[#loc10, #loc11])
#loc530 = loc(fused[#loc15, #loc16])
#loc531 = loc(fused[#loc17, #loc18])
#loc532 = loc(fused[#loc19, #loc20])
#loc533 = loc(fused[#loc23, #loc24])
#loc534 = loc(fused[#loc22, #loc24])
#loc535 = loc(fused[#loc21, #loc20])
#loc536 = loc(fused[#loc25, #loc26])
#loc537 = loc(fused[#loc27, #loc28])
#loc538 = loc(fused[#loc29, #loc26])
#loc539 = loc(fused[#loc33, #loc34])
#loc540 = loc(fused[#loc36, #loc35])
#loc541 = loc(fused[#loc37, #loc38])
#loc542 = loc(fused[#loc40, #loc34])
#loc543 = loc(fused[#loc42, #loc41])
#loc544 = loc(fused[#loc46, #loc45])
#loc545 = loc(fused[#loc47, #loc48])
#loc546 = loc(fused[#loc49, #loc50])
#loc547 = loc(fused[#loc51, #loc52, #loc53, #loc48])
#loc548 = loc(fused[#loc55, #loc54])
#loc549 = loc(fused[#loc58, #loc59])
#loc550 = loc(fused[#loc61, #loc60])
#loc551 = loc(fused[#loc62, #loc63])
#loc552 = loc(fused[#loc65, #loc59])
#loc553 = loc(fused[#loc71, #loc70])
#loc554 = loc(fused[#loc75, #loc76])
#loc555 = loc(fused[#loc77, #loc78])
#loc556 = loc(fused[#loc79, #loc80])
#loc557 = loc(fused[#loc81, #loc82])
#loc558 = loc(fused[#loc83, #loc84])
#loc559 = loc(fused[#loc85, #loc86])
#loc560 = loc(fused[#loc87, #loc88])
#loc561 = loc(fused[#loc89, #loc90])
#loc562 = loc(fused[#loc91, #loc92])
#loc563 = loc(fused[#loc93, #loc94])
#loc564 = loc(fused[#loc95, #loc96])
#loc565 = loc(fused[#loc99, #loc97])
#loc566 = loc(fused[#loc100, #loc101])
#loc567 = loc(fused[#loc102, #loc103])
#loc568 = loc(fused[#loc104, #loc105])
#loc569 = loc(fused[#loc106, #loc107])
#loc570 = loc(fused[#loc108, #loc109])
#loc571 = loc(fused[#loc110, #loc111])
#loc572 = loc(fused[#loc112, #loc113])
#loc573 = loc(fused[#loc118, #loc119])
#loc574 = loc(fused[#loc120, #loc121])
#loc575 = loc(fused[#loc122, #loc123])
#loc576 = loc(fused[#loc124, #loc121])
#loc577 = loc(fused[#loc126, #loc127])
#loc578 = loc(fused[#loc129, #loc130])
#loc579 = loc(fused[#loc131, #loc132])
#loc580 = loc(fused[#loc135, #loc133])
#loc581 = loc(fused[#loc139, #loc136])
#loc582 = loc(fused[#loc143, #loc144])
#loc583 = loc(fused[#loc145, #loc146])
#loc584 = loc(fused[#loc148, #loc149])
#loc585 = loc(fused[#loc150, #loc151])
#loc586 = loc(fused[#loc152, #loc153])
#loc587 = loc(fused[#loc154, #loc146])
#loc588 = loc(fused[#loc156, #loc157])
#loc589 = loc(fused[#loc160, #loc161])
#loc590 = loc(fused[#loc162, #loc157])
#loc591 = loc(fused[#loc168, #loc169])
#loc592 = loc(fused[#loc170, #loc171])
#loc593 = loc(fused[#loc172, #loc173])
#loc594 = loc(fused[#loc174, #loc171])
#loc595 = loc(fused[#loc178, #loc179])
#loc596 = loc(fused[#loc182, #loc183])
#loc597 = loc(fused[#loc184, #loc185])
#loc598 = loc(fused[#loc186, #loc187])
#loc599 = loc(fused[#loc189, #loc190])
#loc600 = loc(fused[#loc191, #loc185])
#loc601 = loc(fused[#loc195, #loc193])
#loc602 = loc(fused[#loc198, #loc199])
#loc603 = loc(fused[#loc201, #loc202])
#loc604 = loc(fused[#loc203, #loc204])
#loc605 = loc(fused[#loc205, #loc202])
#loc606 = loc(fused[#loc208, #loc209])
#loc607 = loc(fused[#loc210, #loc211])
#loc608 = loc(fused[#loc212, #loc209])
#loc609 = loc(fused[#loc217, #loc218])
#loc610 = loc(fused[#loc219, #loc220])
#loc611 = loc(fused[#loc221, #loc222])
#loc612 = loc(fused[#loc223, #loc224])
#loc613 = loc(fused[#loc225, #loc226])
#loc614 = loc(fused[#loc227, #loc228])
#loc615 = loc(fused[#loc233, #loc234])
#loc618 = loc(fused[#loc244, #loc245])
#loc619 = loc(fused[#loc248, #loc249])
#loc620 = loc(fused[#loc252, #loc251])
#loc621 = loc(fused[#loc253, #loc254])
#loc623 = loc(fused[#loc258, #loc259])
#loc624 = loc(fused[#loc260, #loc261])
#loc625 = loc(fused[#loc262, #loc263])
#loc626 = loc(fused[#loc266, #loc267])
#loc627 = loc(fused[#loc265, #loc267])
#loc628 = loc(fused[#loc264, #loc263])
#loc629 = loc(fused[#loc268, #loc269])
#loc630 = loc(fused[#loc270, #loc271])
#loc631 = loc(fused[#loc272, #loc269])
#loc632 = loc(fused[#loc276, #loc277])
#loc633 = loc(fused[#loc279, #loc278])
#loc634 = loc(fused[#loc280, #loc281])
#loc635 = loc(fused[#loc283, #loc277])
#loc636 = loc(fused[#loc285, #loc284])
#loc637 = loc(fused[#loc289, #loc288])
#loc638 = loc(fused[#loc290, #loc291])
#loc639 = loc(fused[#loc292, #loc293])
#loc640 = loc(fused[#loc294, #loc295, #loc296, #loc291])
#loc641 = loc(fused[#loc298, #loc297])
#loc642 = loc(fused[#loc301, #loc302])
#loc643 = loc(fused[#loc304, #loc303])
#loc644 = loc(fused[#loc305, #loc306])
#loc645 = loc(fused[#loc308, #loc302])
#loc646 = loc(fused[#loc314, #loc313])
#loc647 = loc(fused[#loc319, #loc320])
#loc648 = loc(fused[#loc321, #loc322])
#loc649 = loc(fused[#loc323, #loc324])
#loc650 = loc(fused[#loc327, #loc325])
#loc651 = loc(fused[#loc329, #loc328])
#loc652 = loc(fused[#loc333, #loc334])
#loc654 = loc(fused[#loc338, #loc339])
#loc655 = loc(fused[#loc340, #loc341])
#loc656 = loc(fused[#loc342, #loc343])
#loc657 = loc(fused[#loc346, #loc347])
#loc658 = loc(fused[#loc345, #loc347])
#loc659 = loc(fused[#loc344, #loc343])
#loc660 = loc(fused[#loc348, #loc349])
#loc661 = loc(fused[#loc350, #loc351])
#loc662 = loc(fused[#loc352, #loc349])
#loc663 = loc(fused[#loc356, #loc357])
#loc664 = loc(fused[#loc359, #loc358])
#loc665 = loc(fused[#loc360, #loc361])
#loc666 = loc(fused[#loc363, #loc357])
#loc667 = loc(fused[#loc365, #loc364])
#loc668 = loc(fused[#loc369, #loc368])
#loc669 = loc(fused[#loc370, #loc371])
#loc670 = loc(fused[#loc372, #loc373])
#loc671 = loc(fused[#loc375, #loc377])
#loc672 = loc(fused[#loc378, #loc379, #loc380, #loc371])
#loc673 = loc(fused[#loc382, #loc381])
#loc674 = loc(fused[#loc385, #loc386])
#loc675 = loc(fused[#loc388, #loc387])
#loc676 = loc(fused[#loc389, #loc390])
#loc677 = loc(fused[#loc392, #loc386])
#loc678 = loc(fused[#loc398, #loc397])
#loc679 = loc(fused[#loc402, #loc403])
#loc680 = loc(fused[#loc404, #loc405])
#loc681 = loc(fused[#loc406, #loc407])
#loc682 = loc(fused[#loc410, #loc408])
#loc683 = loc(fused[#loc411, #loc412])
#loc684 = loc(fused[#loc413, #loc414])
#loc685 = loc(fused[#loc415, #loc416])
#loc686 = loc(fused[#loc417, #loc418])
#loc687 = loc(fused[#loc419, #loc420])
#loc688 = loc(fused[#loc421, #loc422])
#loc689 = loc(fused[#loc423, #loc424])
#loc690 = loc(fused[#loc429, #loc430])
#loc691 = loc(fused[#loc431, #loc432])
#loc692 = loc(fused[#loc433, #loc434])
#loc693 = loc(fused[#loc435, #loc432])
#loc694 = loc(fused[#loc437, #loc438])
#loc695 = loc(fused[#loc440, #loc441])
#loc696 = loc(fused[#loc442, #loc443])
#loc697 = loc(fused[#loc445, #loc444])
#loc698 = loc(fused[#loc447, #loc446])
#loc699 = loc(fused[#loc450, #loc451])
#loc700 = loc(fused[#loc452, #loc453])
#loc701 = loc(fused[#loc455, #loc456])
#loc702 = loc(fused[#loc457, #loc458])
#loc703 = loc(fused[#loc459, #loc460])
#loc704 = loc(fused[#loc461, #loc453])
#loc705 = loc(fused[#loc463, #loc464])
#loc706 = loc(fused[#loc467, #loc468])
#loc707 = loc(fused[#loc469, #loc464])
#loc708 = loc(fused[#loc475, #loc476])
#loc709 = loc(fused[#loc477, #loc478])
#loc710 = loc(fused[#loc479, #loc480])
#loc711 = loc(fused[#loc481, #loc478])
#loc712 = loc(fused[#loc485, #loc486])
#loc713 = loc(fused[#loc489, #loc490])
#loc714 = loc(fused[#loc491, #loc492])
#loc715 = loc(fused[#loc493, #loc494])
#loc716 = loc(fused[#loc496, #loc497])
#loc717 = loc(fused[#loc498, #loc492])
#loc718 = loc(fused[#loc502, #loc500])
#loc719 = loc(fused[#loc505, #loc506])
#loc720 = loc(fused[#loc508, #loc509])
#loc721 = loc(fused[#loc510, #loc511])
#loc722 = loc(fused[#loc512, #loc509])
#loc723 = loc(fused[#loc515, #loc516])
#loc724 = loc(fused[#loc517, #loc518])
#loc725 = loc(fused[#loc519, #loc516])
