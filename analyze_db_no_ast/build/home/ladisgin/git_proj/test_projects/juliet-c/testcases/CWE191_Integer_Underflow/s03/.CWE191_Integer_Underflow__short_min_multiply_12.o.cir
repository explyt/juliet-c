!s16i = !cir.int<s, 16>
!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE191_Integer_Underflow/s03/CWE191_Integer_Underflow__short_min_multiply_12.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func no_proto private  @globalReturnsTrueOrFalse(...) -> !s32i loc(#loc190)
  cir.func private  @printIntLine(!s32i) loc(#loc191)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc192)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"data value is too small to perform multiplication.\00" : !cir.array<!s8i x 51>> : !cir.array<!s8i x 51> {alignment = 1 : i64} loc(#loc7)
  cir.func no_proto  @CWE191_Integer_Underflow__short_min_multiply_12_bad() extra(#fn_attr) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc194)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc12)
    %2 = cir.cast(integral, %1 : !s32i), !s16i loc(#loc12)
    cir.store %2, %0 : !s16i, !cir.ptr<!s16i> loc(#loc195)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc197)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc197)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc16)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc16)
      cir.if %6 {
        %7 = cir.const #cir.int<32767> : !s32i loc(#loc21)
        %8 = cir.unary(minus, %7) : !s32i, !s32i loc(#loc21)
        %9 = cir.const #cir.int<1> : !s32i loc(#loc21)
        %10 = cir.binop(sub, %8, %9) nsw : !s32i loc(#loc21)
        %11 = cir.cast(integral, %10 : !s32i), !s16i loc(#loc21)
        cir.store %11, %0 : !s16i, !cir.ptr<!s16i> loc(#loc199)
      } else {
        %7 = cir.const #cir.int<2> : !s32i loc(#loc23)
        %8 = cir.unary(minus, %7) : !s32i, !s32i loc(#loc24)
        %9 = cir.cast(integral, %8 : !s32i), !s16i loc(#loc24)
        cir.store %9, %0 : !s16i, !cir.ptr<!s16i> loc(#loc200)
      } loc(#loc198)
    } loc(#loc196)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc202)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc202)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc28)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc28)
      cir.if %6 {
        cir.scope {
          %7 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc35)
          %8 = cir.cast(integral, %7 : !s16i), !s32i loc(#loc35)
          %9 = cir.const #cir.int<0> : !s32i loc(#loc36)
          %10 = cir.cmp(lt, %8, %9) : !s32i, !s32i loc(#loc205)
          %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc37)
          cir.if %11 {
            %12 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc207)
            %13 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc41)
            %14 = cir.cast(integral, %13 : !s16i), !s32i loc(#loc41)
            %15 = cir.const #cir.int<2> : !s32i loc(#loc40)
            %16 = cir.binop(mul, %14, %15) nsw : !s32i loc(#loc41)
            %17 = cir.cast(integral, %16 : !s32i), !s16i loc(#loc41)
            cir.store %17, %12 : !s16i, !cir.ptr<!s16i> loc(#loc207)
            %18 = cir.load %12 : !cir.ptr<!s16i>, !s16i loc(#loc42)
            %19 = cir.cast(integral, %18 : !s16i), !s32i loc(#loc42)
            cir.call @printIntLine(%19) : (!s32i) -> () loc(#loc43)
          } loc(#loc206)
        } loc(#loc204)
      } else {
        cir.scope {
          %7 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc46)
          %8 = cir.cast(integral, %7 : !s16i), !s32i loc(#loc46)
          %9 = cir.const #cir.int<0> : !s32i loc(#loc47)
          %10 = cir.cmp(lt, %8, %9) : !s32i, !s32i loc(#loc209)
          %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc48)
          cir.if %11 {
            cir.scope {
              %12 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc52)
              %13 = cir.cast(integral, %12 : !s16i), !s32i loc(#loc52)
              %14 = cir.const #cir.int<32767> : !s32i loc(#loc53)
              %15 = cir.unary(minus, %14) : !s32i, !s32i loc(#loc53)
              %16 = cir.const #cir.int<1> : !s32i loc(#loc53)
              %17 = cir.binop(sub, %15, %16) nsw : !s32i loc(#loc53)
              %18 = cir.const #cir.int<2> : !s32i loc(#loc54)
              %19 = cir.binop(div, %17, %18) : !s32i loc(#loc212)
              %20 = cir.cmp(gt, %13, %19) : !s32i, !s32i loc(#loc213)
              %21 = cir.cast(int_to_bool, %20 : !s32i), !cir.bool loc(#loc56)
              cir.if %21 {
                %22 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc215)
                %23 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc62)
                %24 = cir.cast(integral, %23 : !s16i), !s32i loc(#loc62)
                %25 = cir.const #cir.int<2> : !s32i loc(#loc61)
                %26 = cir.binop(mul, %24, %25) nsw : !s32i loc(#loc62)
                %27 = cir.cast(integral, %26 : !s32i), !s16i loc(#loc62)
                cir.store %27, %22 : !s16i, !cir.ptr<!s16i> loc(#loc215)
                %28 = cir.load %22 : !cir.ptr<!s16i>, !s16i loc(#loc63)
                %29 = cir.cast(integral, %28 : !s16i), !s32i loc(#loc63)
                cir.call @printIntLine(%29) : (!s32i) -> () loc(#loc64)
              } else {
                %22 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 51>> loc(#loc7)
                %23 = cir.cast(array_to_ptrdecay, %22 : !cir.ptr<!cir.array<!s8i x 51>>), !cir.ptr<!s8i> loc(#loc7)
                cir.call @printLine(%23) : (!cir.ptr<!s8i>) -> () loc(#loc65)
              } loc(#loc214)
            } loc(#loc211)
          } loc(#loc210)
        } loc(#loc208)
      } loc(#loc203)
    } loc(#loc201)
    cir.return loc(#loc9)
  } loc(#loc193)
  cir.func no_proto  @CWE191_Integer_Underflow__short_min_multiply_12_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc217)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc68)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc218)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc70)
    cir.return loc(#loc67)
  } loc(#loc216)
  cir.func no_proto internal private  @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc220)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc76)
    %2 = cir.cast(integral, %1 : !s32i), !s16i loc(#loc76)
    cir.store %2, %0 : !s16i, !cir.ptr<!s16i> loc(#loc221)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc223)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc223)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc80)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc80)
      cir.if %6 {
        %7 = cir.const #cir.int<32767> : !s32i loc(#loc85)
        %8 = cir.unary(minus, %7) : !s32i, !s32i loc(#loc85)
        %9 = cir.const #cir.int<1> : !s32i loc(#loc85)
        %10 = cir.binop(sub, %8, %9) nsw : !s32i loc(#loc85)
        %11 = cir.cast(integral, %10 : !s32i), !s16i loc(#loc85)
        cir.store %11, %0 : !s16i, !cir.ptr<!s16i> loc(#loc225)
      } else {
        %7 = cir.const #cir.int<32767> : !s32i loc(#loc87)
        %8 = cir.unary(minus, %7) : !s32i, !s32i loc(#loc87)
        %9 = cir.const #cir.int<1> : !s32i loc(#loc87)
        %10 = cir.binop(sub, %8, %9) nsw : !s32i loc(#loc87)
        %11 = cir.cast(integral, %10 : !s32i), !s16i loc(#loc87)
        cir.store %11, %0 : !s16i, !cir.ptr<!s16i> loc(#loc226)
      } loc(#loc224)
    } loc(#loc222)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc228)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc228)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc91)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc91)
      cir.if %6 {
        cir.scope {
          %7 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc98)
          %8 = cir.cast(integral, %7 : !s16i), !s32i loc(#loc98)
          %9 = cir.const #cir.int<0> : !s32i loc(#loc99)
          %10 = cir.cmp(lt, %8, %9) : !s32i, !s32i loc(#loc231)
          %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc100)
          cir.if %11 {
            cir.scope {
              %12 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc104)
              %13 = cir.cast(integral, %12 : !s16i), !s32i loc(#loc104)
              %14 = cir.const #cir.int<32767> : !s32i loc(#loc105)
              %15 = cir.unary(minus, %14) : !s32i, !s32i loc(#loc105)
              %16 = cir.const #cir.int<1> : !s32i loc(#loc105)
              %17 = cir.binop(sub, %15, %16) nsw : !s32i loc(#loc105)
              %18 = cir.const #cir.int<2> : !s32i loc(#loc106)
              %19 = cir.binop(div, %17, %18) : !s32i loc(#loc234)
              %20 = cir.cmp(gt, %13, %19) : !s32i, !s32i loc(#loc235)
              %21 = cir.cast(int_to_bool, %20 : !s32i), !cir.bool loc(#loc108)
              cir.if %21 {
                %22 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc237)
                %23 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc114)
                %24 = cir.cast(integral, %23 : !s16i), !s32i loc(#loc114)
                %25 = cir.const #cir.int<2> : !s32i loc(#loc113)
                %26 = cir.binop(mul, %24, %25) nsw : !s32i loc(#loc114)
                %27 = cir.cast(integral, %26 : !s32i), !s16i loc(#loc114)
                cir.store %27, %22 : !s16i, !cir.ptr<!s16i> loc(#loc237)
                %28 = cir.load %22 : !cir.ptr<!s16i>, !s16i loc(#loc115)
                %29 = cir.cast(integral, %28 : !s16i), !s32i loc(#loc115)
                cir.call @printIntLine(%29) : (!s32i) -> () loc(#loc116)
              } else {
                %22 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 51>> loc(#loc117)
                %23 = cir.cast(array_to_ptrdecay, %22 : !cir.ptr<!cir.array<!s8i x 51>>), !cir.ptr<!s8i> loc(#loc117)
                cir.call @printLine(%23) : (!cir.ptr<!s8i>) -> () loc(#loc118)
              } loc(#loc236)
            } loc(#loc233)
          } loc(#loc232)
        } loc(#loc230)
      } else {
        cir.scope {
          %7 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc121)
          %8 = cir.cast(integral, %7 : !s16i), !s32i loc(#loc121)
          %9 = cir.const #cir.int<0> : !s32i loc(#loc122)
          %10 = cir.cmp(lt, %8, %9) : !s32i, !s32i loc(#loc239)
          %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc123)
          cir.if %11 {
            cir.scope {
              %12 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc127)
              %13 = cir.cast(integral, %12 : !s16i), !s32i loc(#loc127)
              %14 = cir.const #cir.int<32767> : !s32i loc(#loc128)
              %15 = cir.unary(minus, %14) : !s32i, !s32i loc(#loc128)
              %16 = cir.const #cir.int<1> : !s32i loc(#loc128)
              %17 = cir.binop(sub, %15, %16) nsw : !s32i loc(#loc128)
              %18 = cir.const #cir.int<2> : !s32i loc(#loc129)
              %19 = cir.binop(div, %17, %18) : !s32i loc(#loc242)
              %20 = cir.cmp(gt, %13, %19) : !s32i, !s32i loc(#loc243)
              %21 = cir.cast(int_to_bool, %20 : !s32i), !cir.bool loc(#loc131)
              cir.if %21 {
                %22 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc245)
                %23 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc137)
                %24 = cir.cast(integral, %23 : !s16i), !s32i loc(#loc137)
                %25 = cir.const #cir.int<2> : !s32i loc(#loc136)
                %26 = cir.binop(mul, %24, %25) nsw : !s32i loc(#loc137)
                %27 = cir.cast(integral, %26 : !s32i), !s16i loc(#loc137)
                cir.store %27, %22 : !s16i, !cir.ptr<!s16i> loc(#loc245)
                %28 = cir.load %22 : !cir.ptr<!s16i>, !s16i loc(#loc138)
                %29 = cir.cast(integral, %28 : !s16i), !s32i loc(#loc138)
                cir.call @printIntLine(%29) : (!s32i) -> () loc(#loc139)
              } else {
                %22 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 51>> loc(#loc140)
                %23 = cir.cast(array_to_ptrdecay, %22 : !cir.ptr<!cir.array<!s8i x 51>>), !cir.ptr<!s8i> loc(#loc140)
                cir.call @printLine(%23) : (!cir.ptr<!s8i>) -> () loc(#loc141)
              } loc(#loc244)
            } loc(#loc241)
          } loc(#loc240)
        } loc(#loc238)
      } loc(#loc229)
    } loc(#loc227)
    cir.return loc(#loc73)
  } loc(#loc219)
  cir.func no_proto internal private  @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc247)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc146)
    %2 = cir.cast(integral, %1 : !s32i), !s16i loc(#loc146)
    cir.store %2, %0 : !s16i, !cir.ptr<!s16i> loc(#loc248)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc250)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc250)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc150)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc150)
      cir.if %6 {
        %7 = cir.const #cir.int<2> : !s32i loc(#loc155)
        %8 = cir.unary(minus, %7) : !s32i, !s32i loc(#loc156)
        %9 = cir.cast(integral, %8 : !s32i), !s16i loc(#loc156)
        cir.store %9, %0 : !s16i, !cir.ptr<!s16i> loc(#loc252)
      } else {
        %7 = cir.const #cir.int<2> : !s32i loc(#loc158)
        %8 = cir.unary(minus, %7) : !s32i, !s32i loc(#loc159)
        %9 = cir.cast(integral, %8 : !s32i), !s16i loc(#loc159)
        cir.store %9, %0 : !s16i, !cir.ptr<!s16i> loc(#loc253)
      } loc(#loc251)
    } loc(#loc249)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc255)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc255)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc163)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc163)
      cir.if %6 {
        cir.scope {
          %7 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc170)
          %8 = cir.cast(integral, %7 : !s16i), !s32i loc(#loc170)
          %9 = cir.const #cir.int<0> : !s32i loc(#loc171)
          %10 = cir.cmp(lt, %8, %9) : !s32i, !s32i loc(#loc258)
          %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc172)
          cir.if %11 {
            %12 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc260)
            %13 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc176)
            %14 = cir.cast(integral, %13 : !s16i), !s32i loc(#loc176)
            %15 = cir.const #cir.int<2> : !s32i loc(#loc175)
            %16 = cir.binop(mul, %14, %15) nsw : !s32i loc(#loc176)
            %17 = cir.cast(integral, %16 : !s32i), !s16i loc(#loc176)
            cir.store %17, %12 : !s16i, !cir.ptr<!s16i> loc(#loc260)
            %18 = cir.load %12 : !cir.ptr<!s16i>, !s16i loc(#loc177)
            %19 = cir.cast(integral, %18 : !s16i), !s32i loc(#loc177)
            cir.call @printIntLine(%19) : (!s32i) -> () loc(#loc178)
          } loc(#loc259)
        } loc(#loc257)
      } else {
        cir.scope {
          %7 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc181)
          %8 = cir.cast(integral, %7 : !s16i), !s32i loc(#loc181)
          %9 = cir.const #cir.int<0> : !s32i loc(#loc182)
          %10 = cir.cmp(lt, %8, %9) : !s32i, !s32i loc(#loc262)
          %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc183)
          cir.if %11 {
            %12 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc264)
            %13 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc187)
            %14 = cir.cast(integral, %13 : !s16i), !s32i loc(#loc187)
            %15 = cir.const #cir.int<2> : !s32i loc(#loc186)
            %16 = cir.binop(mul, %14, %15) nsw : !s32i loc(#loc187)
            %17 = cir.cast(integral, %16 : !s32i), !s16i loc(#loc187)
            cir.store %17, %12 : !s16i, !cir.ptr<!s16i> loc(#loc264)
            %18 = cir.load %12 : !cir.ptr<!s16i>, !s16i loc(#loc188)
            %19 = cir.cast(integral, %18 : !s16i), !s32i loc(#loc188)
            cir.call @printIntLine(%19) : (!s32i) -> () loc(#loc189)
          } loc(#loc263)
        } loc(#loc261)
      } loc(#loc256)
    } loc(#loc254)
    cir.return loc(#loc143)
  } loc(#loc246)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE191_Integer_Underflow/s03/CWE191_Integer_Underflow__short_min_multiply_12.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":52:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":52:30)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc7 = loc("CWE191_Integer_Underflow__short_min_multiply_12.c":57:27)
#loc8 = loc("CWE191_Integer_Underflow__short_min_multiply_12.c":22:1)
#loc9 = loc("CWE191_Integer_Underflow__short_min_multiply_12.c":61:1)
#loc10 = loc("CWE191_Integer_Underflow__short_min_multiply_12.c":24:5)
#loc11 = loc("CWE191_Integer_Underflow__short_min_multiply_12.c":24:11)
#loc12 = loc("CWE191_Integer_Underflow__short_min_multiply_12.c":25:12)
#loc13 = loc("CWE191_Integer_Underflow__short_min_multiply_12.c":25:5)
#loc14 = loc("CWE191_Integer_Underflow__short_min_multiply_12.c":26:5)
#loc15 = loc("CWE191_Integer_Underflow__short_min_multiply_12.c":35:5)
#loc16 = loc("CWE191_Integer_Underflow__short_min_multiply_12.c":26:8)
#loc17 = loc("CWE191_Integer_Underflow__short_min_multiply_12.c":26:33)
#loc18 = loc("CWE191_Integer_Underflow__short_min_multiply_12.c":27:5)
#loc19 = loc("CWE191_Integer_Underflow__short_min_multiply_12.c":30:5)
#loc20 = loc("CWE191_Integer_Underflow__short_min_multiply_12.c":32:5)
#loc21 = loc("CWE191_Integer_Underflow__short_min_multiply_12.c":29:16)
#loc22 = loc("CWE191_Integer_Underflow__short_min_multiply_12.c":29:9)
#loc23 = loc("CWE191_Integer_Underflow__short_min_multiply_12.c":34:17)
#loc24 = loc("CWE191_Integer_Underflow__short_min_multiply_12.c":34:16)
#loc25 = loc("CWE191_Integer_Underflow__short_min_multiply_12.c":34:9)
#loc26 = loc("CWE191_Integer_Underflow__short_min_multiply_12.c":36:5)
#loc27 = loc("CWE191_Integer_Underflow__short_min_multiply_12.c":60:5)
#loc28 = loc("CWE191_Integer_Underflow__short_min_multiply_12.c":36:8)
#loc29 = loc("CWE191_Integer_Underflow__short_min_multiply_12.c":36:33)
#loc30 = loc("CWE191_Integer_Underflow__short_min_multiply_12.c":37:5)
#loc31 = loc("CWE191_Integer_Underflow__short_min_multiply_12.c":44:5)
#loc32 = loc("CWE191_Integer_Underflow__short_min_multiply_12.c":46:5)
#loc33 = loc("CWE191_Integer_Underflow__short_min_multiply_12.c":38:9)
#loc34 = loc("CWE191_Integer_Underflow__short_min_multiply_12.c":43:9)
#loc35 = loc("CWE191_Integer_Underflow__short_min_multiply_12.c":38:12)
#loc36 = loc("CWE191_Integer_Underflow__short_min_multiply_12.c":38:19)
#loc37 = loc("CWE191_Integer_Underflow__short_min_multiply_12.c":38:17)
#loc38 = loc("CWE191_Integer_Underflow__short_min_multiply_12.c":39:9)
#loc39 = loc("CWE191_Integer_Underflow__short_min_multiply_12.c":41:13)
#loc40 = loc("CWE191_Integer_Underflow__short_min_multiply_12.c":41:35)
#loc41 = loc("CWE191_Integer_Underflow__short_min_multiply_12.c":41:28)
#loc42 = loc("CWE191_Integer_Underflow__short_min_multiply_12.c":42:26)
#loc43 = loc("CWE191_Integer_Underflow__short_min_multiply_12.c":42:13)
#loc44 = loc("CWE191_Integer_Underflow__short_min_multiply_12.c":47:9)
#loc45 = loc("CWE191_Integer_Underflow__short_min_multiply_12.c":59:9)
#loc46 = loc("CWE191_Integer_Underflow__short_min_multiply_12.c":47:12)
#loc47 = loc("CWE191_Integer_Underflow__short_min_multiply_12.c":47:19)
#loc48 = loc("CWE191_Integer_Underflow__short_min_multiply_12.c":47:17)
#loc49 = loc("CWE191_Integer_Underflow__short_min_multiply_12.c":48:9)
#loc50 = loc("CWE191_Integer_Underflow__short_min_multiply_12.c":50:13)
#loc51 = loc("CWE191_Integer_Underflow__short_min_multiply_12.c":58:13)
#loc52 = loc("CWE191_Integer_Underflow__short_min_multiply_12.c":50:17)
#loc53 = loc("CWE191_Integer_Underflow__short_min_multiply_12.c":50:25)
#loc54 = loc("CWE191_Integer_Underflow__short_min_multiply_12.c":50:34)
#loc55 = loc("CWE191_Integer_Underflow__short_min_multiply_12.c":50:35)
#loc56 = loc("CWE191_Integer_Underflow__short_min_multiply_12.c":50:22)
#loc57 = loc("CWE191_Integer_Underflow__short_min_multiply_12.c":51:13)
#loc58 = loc("CWE191_Integer_Underflow__short_min_multiply_12.c":54:13)
#loc59 = loc("CWE191_Integer_Underflow__short_min_multiply_12.c":56:13)
#loc60 = loc("CWE191_Integer_Underflow__short_min_multiply_12.c":52:17)
#loc61 = loc("CWE191_Integer_Underflow__short_min_multiply_12.c":52:39)
#loc62 = loc("CWE191_Integer_Underflow__short_min_multiply_12.c":52:32)
#loc63 = loc("CWE191_Integer_Underflow__short_min_multiply_12.c":53:30)
#loc64 = loc("CWE191_Integer_Underflow__short_min_multiply_12.c":53:17)
#loc65 = loc("CWE191_Integer_Underflow__short_min_multiply_12.c":57:17)
#loc66 = loc("CWE191_Integer_Underflow__short_min_multiply_12.c":155:1)
#loc67 = loc("CWE191_Integer_Underflow__short_min_multiply_12.c":159:1)
#loc68 = loc("CWE191_Integer_Underflow__short_min_multiply_12.c":157:5)
#loc69 = loc("CWE191_Integer_Underflow__short_min_multiply_12.c":157:13)
#loc70 = loc("CWE191_Integer_Underflow__short_min_multiply_12.c":158:5)
#loc71 = loc("CWE191_Integer_Underflow__short_min_multiply_12.c":158:13)
#loc72 = loc("CWE191_Integer_Underflow__short_min_multiply_12.c":70:1)
#loc73 = loc("CWE191_Integer_Underflow__short_min_multiply_12.c":116:1)
#loc74 = loc("CWE191_Integer_Underflow__short_min_multiply_12.c":72:5)
#loc75 = loc("CWE191_Integer_Underflow__short_min_multiply_12.c":72:11)
#loc76 = loc("CWE191_Integer_Underflow__short_min_multiply_12.c":73:12)
#loc77 = loc("CWE191_Integer_Underflow__short_min_multiply_12.c":73:5)
#loc78 = loc("CWE191_Integer_Underflow__short_min_multiply_12.c":74:5)
#loc79 = loc("CWE191_Integer_Underflow__short_min_multiply_12.c":83:5)
#loc80 = loc("CWE191_Integer_Underflow__short_min_multiply_12.c":74:8)
#loc81 = loc("CWE191_Integer_Underflow__short_min_multiply_12.c":74:33)
#loc82 = loc("CWE191_Integer_Underflow__short_min_multiply_12.c":75:5)
#loc83 = loc("CWE191_Integer_Underflow__short_min_multiply_12.c":78:5)
#loc84 = loc("CWE191_Integer_Underflow__short_min_multiply_12.c":80:5)
#loc85 = loc("CWE191_Integer_Underflow__short_min_multiply_12.c":77:16)
#loc86 = loc("CWE191_Integer_Underflow__short_min_multiply_12.c":77:9)
#loc87 = loc("CWE191_Integer_Underflow__short_min_multiply_12.c":82:16)
#loc88 = loc("CWE191_Integer_Underflow__short_min_multiply_12.c":82:9)
#loc89 = loc("CWE191_Integer_Underflow__short_min_multiply_12.c":84:5)
#loc90 = loc("CWE191_Integer_Underflow__short_min_multiply_12.c":115:5)
#loc91 = loc("CWE191_Integer_Underflow__short_min_multiply_12.c":84:8)
#loc92 = loc("CWE191_Integer_Underflow__short_min_multiply_12.c":84:33)
#loc93 = loc("CWE191_Integer_Underflow__short_min_multiply_12.c":85:5)
#loc94 = loc("CWE191_Integer_Underflow__short_min_multiply_12.c":99:5)
#loc95 = loc("CWE191_Integer_Underflow__short_min_multiply_12.c":101:5)
#loc96 = loc("CWE191_Integer_Underflow__short_min_multiply_12.c":86:9)
#loc97 = loc("CWE191_Integer_Underflow__short_min_multiply_12.c":98:9)
#loc98 = loc("CWE191_Integer_Underflow__short_min_multiply_12.c":86:12)
#loc99 = loc("CWE191_Integer_Underflow__short_min_multiply_12.c":86:19)
#loc100 = loc("CWE191_Integer_Underflow__short_min_multiply_12.c":86:17)
#loc101 = loc("CWE191_Integer_Underflow__short_min_multiply_12.c":87:9)
#loc102 = loc("CWE191_Integer_Underflow__short_min_multiply_12.c":89:13)
#loc103 = loc("CWE191_Integer_Underflow__short_min_multiply_12.c":97:13)
#loc104 = loc("CWE191_Integer_Underflow__short_min_multiply_12.c":89:17)
#loc105 = loc("CWE191_Integer_Underflow__short_min_multiply_12.c":89:25)
#loc106 = loc("CWE191_Integer_Underflow__short_min_multiply_12.c":89:34)
#loc107 = loc("CWE191_Integer_Underflow__short_min_multiply_12.c":89:35)
#loc108 = loc("CWE191_Integer_Underflow__short_min_multiply_12.c":89:22)
#loc109 = loc("CWE191_Integer_Underflow__short_min_multiply_12.c":90:13)
#loc110 = loc("CWE191_Integer_Underflow__short_min_multiply_12.c":93:13)
#loc111 = loc("CWE191_Integer_Underflow__short_min_multiply_12.c":95:13)
#loc112 = loc("CWE191_Integer_Underflow__short_min_multiply_12.c":91:17)
#loc113 = loc("CWE191_Integer_Underflow__short_min_multiply_12.c":91:39)
#loc114 = loc("CWE191_Integer_Underflow__short_min_multiply_12.c":91:32)
#loc115 = loc("CWE191_Integer_Underflow__short_min_multiply_12.c":92:30)
#loc116 = loc("CWE191_Integer_Underflow__short_min_multiply_12.c":92:17)
#loc117 = loc("CWE191_Integer_Underflow__short_min_multiply_12.c":96:27)
#loc118 = loc("CWE191_Integer_Underflow__short_min_multiply_12.c":96:17)
#loc119 = loc("CWE191_Integer_Underflow__short_min_multiply_12.c":102:9)
#loc120 = loc("CWE191_Integer_Underflow__short_min_multiply_12.c":114:9)
#loc121 = loc("CWE191_Integer_Underflow__short_min_multiply_12.c":102:12)
#loc122 = loc("CWE191_Integer_Underflow__short_min_multiply_12.c":102:19)
#loc123 = loc("CWE191_Integer_Underflow__short_min_multiply_12.c":102:17)
#loc124 = loc("CWE191_Integer_Underflow__short_min_multiply_12.c":103:9)
#loc125 = loc("CWE191_Integer_Underflow__short_min_multiply_12.c":105:13)
#loc126 = loc("CWE191_Integer_Underflow__short_min_multiply_12.c":113:13)
#loc127 = loc("CWE191_Integer_Underflow__short_min_multiply_12.c":105:17)
#loc128 = loc("CWE191_Integer_Underflow__short_min_multiply_12.c":105:25)
#loc129 = loc("CWE191_Integer_Underflow__short_min_multiply_12.c":105:34)
#loc130 = loc("CWE191_Integer_Underflow__short_min_multiply_12.c":105:35)
#loc131 = loc("CWE191_Integer_Underflow__short_min_multiply_12.c":105:22)
#loc132 = loc("CWE191_Integer_Underflow__short_min_multiply_12.c":106:13)
#loc133 = loc("CWE191_Integer_Underflow__short_min_multiply_12.c":109:13)
#loc134 = loc("CWE191_Integer_Underflow__short_min_multiply_12.c":111:13)
#loc135 = loc("CWE191_Integer_Underflow__short_min_multiply_12.c":107:17)
#loc136 = loc("CWE191_Integer_Underflow__short_min_multiply_12.c":107:39)
#loc137 = loc("CWE191_Integer_Underflow__short_min_multiply_12.c":107:32)
#loc138 = loc("CWE191_Integer_Underflow__short_min_multiply_12.c":108:30)
#loc139 = loc("CWE191_Integer_Underflow__short_min_multiply_12.c":108:17)
#loc140 = loc("CWE191_Integer_Underflow__short_min_multiply_12.c":112:27)
#loc141 = loc("CWE191_Integer_Underflow__short_min_multiply_12.c":112:17)
#loc142 = loc("CWE191_Integer_Underflow__short_min_multiply_12.c":121:1)
#loc143 = loc("CWE191_Integer_Underflow__short_min_multiply_12.c":153:1)
#loc144 = loc("CWE191_Integer_Underflow__short_min_multiply_12.c":123:5)
#loc145 = loc("CWE191_Integer_Underflow__short_min_multiply_12.c":123:11)
#loc146 = loc("CWE191_Integer_Underflow__short_min_multiply_12.c":124:12)
#loc147 = loc("CWE191_Integer_Underflow__short_min_multiply_12.c":124:5)
#loc148 = loc("CWE191_Integer_Underflow__short_min_multiply_12.c":125:5)
#loc149 = loc("CWE191_Integer_Underflow__short_min_multiply_12.c":134:5)
#loc150 = loc("CWE191_Integer_Underflow__short_min_multiply_12.c":125:8)
#loc151 = loc("CWE191_Integer_Underflow__short_min_multiply_12.c":125:33)
#loc152 = loc("CWE191_Integer_Underflow__short_min_multiply_12.c":126:5)
#loc153 = loc("CWE191_Integer_Underflow__short_min_multiply_12.c":129:5)
#loc154 = loc("CWE191_Integer_Underflow__short_min_multiply_12.c":131:5)
#loc155 = loc("CWE191_Integer_Underflow__short_min_multiply_12.c":128:17)
#loc156 = loc("CWE191_Integer_Underflow__short_min_multiply_12.c":128:16)
#loc157 = loc("CWE191_Integer_Underflow__short_min_multiply_12.c":128:9)
#loc158 = loc("CWE191_Integer_Underflow__short_min_multiply_12.c":133:17)
#loc159 = loc("CWE191_Integer_Underflow__short_min_multiply_12.c":133:16)
#loc160 = loc("CWE191_Integer_Underflow__short_min_multiply_12.c":133:9)
#loc161 = loc("CWE191_Integer_Underflow__short_min_multiply_12.c":135:5)
#loc162 = loc("CWE191_Integer_Underflow__short_min_multiply_12.c":152:5)
#loc163 = loc("CWE191_Integer_Underflow__short_min_multiply_12.c":135:8)
#loc164 = loc("CWE191_Integer_Underflow__short_min_multiply_12.c":135:33)
#loc165 = loc("CWE191_Integer_Underflow__short_min_multiply_12.c":136:5)
#loc166 = loc("CWE191_Integer_Underflow__short_min_multiply_12.c":143:5)
#loc167 = loc("CWE191_Integer_Underflow__short_min_multiply_12.c":145:5)
#loc168 = loc("CWE191_Integer_Underflow__short_min_multiply_12.c":137:9)
#loc169 = loc("CWE191_Integer_Underflow__short_min_multiply_12.c":142:9)
#loc170 = loc("CWE191_Integer_Underflow__short_min_multiply_12.c":137:12)
#loc171 = loc("CWE191_Integer_Underflow__short_min_multiply_12.c":137:19)
#loc172 = loc("CWE191_Integer_Underflow__short_min_multiply_12.c":137:17)
#loc173 = loc("CWE191_Integer_Underflow__short_min_multiply_12.c":138:9)
#loc174 = loc("CWE191_Integer_Underflow__short_min_multiply_12.c":140:13)
#loc175 = loc("CWE191_Integer_Underflow__short_min_multiply_12.c":140:35)
#loc176 = loc("CWE191_Integer_Underflow__short_min_multiply_12.c":140:28)
#loc177 = loc("CWE191_Integer_Underflow__short_min_multiply_12.c":141:26)
#loc178 = loc("CWE191_Integer_Underflow__short_min_multiply_12.c":141:13)
#loc179 = loc("CWE191_Integer_Underflow__short_min_multiply_12.c":146:9)
#loc180 = loc("CWE191_Integer_Underflow__short_min_multiply_12.c":151:9)
#loc181 = loc("CWE191_Integer_Underflow__short_min_multiply_12.c":146:12)
#loc182 = loc("CWE191_Integer_Underflow__short_min_multiply_12.c":146:19)
#loc183 = loc("CWE191_Integer_Underflow__short_min_multiply_12.c":146:17)
#loc184 = loc("CWE191_Integer_Underflow__short_min_multiply_12.c":147:9)
#loc185 = loc("CWE191_Integer_Underflow__short_min_multiply_12.c":149:13)
#loc186 = loc("CWE191_Integer_Underflow__short_min_multiply_12.c":149:35)
#loc187 = loc("CWE191_Integer_Underflow__short_min_multiply_12.c":149:28)
#loc188 = loc("CWE191_Integer_Underflow__short_min_multiply_12.c":150:26)
#loc189 = loc("CWE191_Integer_Underflow__short_min_multiply_12.c":150:13)
#loc190 = loc(fused[#loc1, #loc2])
#loc191 = loc(fused[#loc3, #loc4])
#loc192 = loc(fused[#loc5, #loc6])
#loc193 = loc(fused[#loc8, #loc9])
#loc194 = loc(fused[#loc10, #loc11])
#loc195 = loc(fused[#loc13, #loc12])
#loc196 = loc(fused[#loc14, #loc15])
#loc197 = loc(fused[#loc16, #loc17])
#loc198 = loc(fused[#loc18, #loc19, #loc20, #loc15])
#loc199 = loc(fused[#loc22, #loc21])
#loc200 = loc(fused[#loc25, #loc23])
#loc201 = loc(fused[#loc26, #loc27])
#loc202 = loc(fused[#loc28, #loc29])
#loc203 = loc(fused[#loc30, #loc31, #loc32, #loc27])
#loc204 = loc(fused[#loc33, #loc34])
#loc205 = loc(fused[#loc35, #loc36])
#loc206 = loc(fused[#loc38, #loc34])
#loc207 = loc(fused[#loc39, #loc40])
#loc208 = loc(fused[#loc44, #loc45])
#loc209 = loc(fused[#loc46, #loc47])
#loc210 = loc(fused[#loc49, #loc45])
#loc211 = loc(fused[#loc50, #loc51])
#loc212 = loc(fused[#loc53, #loc54])
#loc213 = loc(fused[#loc52, #loc55])
#loc214 = loc(fused[#loc57, #loc58, #loc59, #loc51])
#loc215 = loc(fused[#loc60, #loc61])
#loc216 = loc(fused[#loc66, #loc67])
#loc217 = loc(fused[#loc68, #loc69])
#loc218 = loc(fused[#loc70, #loc71])
#loc219 = loc(fused[#loc72, #loc73])
#loc220 = loc(fused[#loc74, #loc75])
#loc221 = loc(fused[#loc77, #loc76])
#loc222 = loc(fused[#loc78, #loc79])
#loc223 = loc(fused[#loc80, #loc81])
#loc224 = loc(fused[#loc82, #loc83, #loc84, #loc79])
#loc225 = loc(fused[#loc86, #loc85])
#loc226 = loc(fused[#loc88, #loc87])
#loc227 = loc(fused[#loc89, #loc90])
#loc228 = loc(fused[#loc91, #loc92])
#loc229 = loc(fused[#loc93, #loc94, #loc95, #loc90])
#loc230 = loc(fused[#loc96, #loc97])
#loc231 = loc(fused[#loc98, #loc99])
#loc232 = loc(fused[#loc101, #loc97])
#loc233 = loc(fused[#loc102, #loc103])
#loc234 = loc(fused[#loc105, #loc106])
#loc235 = loc(fused[#loc104, #loc107])
#loc236 = loc(fused[#loc109, #loc110, #loc111, #loc103])
#loc237 = loc(fused[#loc112, #loc113])
#loc238 = loc(fused[#loc119, #loc120])
#loc239 = loc(fused[#loc121, #loc122])
#loc240 = loc(fused[#loc124, #loc120])
#loc241 = loc(fused[#loc125, #loc126])
#loc242 = loc(fused[#loc128, #loc129])
#loc243 = loc(fused[#loc127, #loc130])
#loc244 = loc(fused[#loc132, #loc133, #loc134, #loc126])
#loc245 = loc(fused[#loc135, #loc136])
#loc246 = loc(fused[#loc142, #loc143])
#loc247 = loc(fused[#loc144, #loc145])
#loc248 = loc(fused[#loc147, #loc146])
#loc249 = loc(fused[#loc148, #loc149])
#loc250 = loc(fused[#loc150, #loc151])
#loc251 = loc(fused[#loc152, #loc153, #loc154, #loc149])
#loc252 = loc(fused[#loc157, #loc155])
#loc253 = loc(fused[#loc160, #loc158])
#loc254 = loc(fused[#loc161, #loc162])
#loc255 = loc(fused[#loc163, #loc164])
#loc256 = loc(fused[#loc165, #loc166, #loc167, #loc162])
#loc257 = loc(fused[#loc168, #loc169])
#loc258 = loc(fused[#loc170, #loc171])
#loc259 = loc(fused[#loc173, #loc169])
#loc260 = loc(fused[#loc174, #loc175])
#loc261 = loc(fused[#loc179, #loc180])
#loc262 = loc(fused[#loc181, #loc182])
#loc263 = loc(fused[#loc184, #loc180])
#loc264 = loc(fused[#loc185, #loc186])
