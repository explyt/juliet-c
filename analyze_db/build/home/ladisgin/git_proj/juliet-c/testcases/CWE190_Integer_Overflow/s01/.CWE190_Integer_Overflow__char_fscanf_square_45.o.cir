!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.struct<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.struct<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.struct<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
!ty__IO_FILE = !cir.struct<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!cir.struct<struct "_IO_FILE">>>, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_fscanf_square_45.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @__isoc99_fscanf(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i loc(#loc103)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc104)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"%c\00" : !cir.array<!s8i x 3>> : !cir.array<!s8i x 3> {alignment = 1 : i64} loc(#loc5)
  cir.global "private" internal dsolocal @CWE190_Integer_Overflow__char_fscanf_square_45_badData = #cir.int<0> : !s8i {alignment = 1 : i64} loc(#loc105)
  cir.func no_proto @CWE190_Integer_Overflow__char_fscanf_square_45_bad() extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc107)
    %1 = cir.const #cir.int<32> : !s32i loc(#loc12)
    %2 = cir.cast(integral, %1 : !s32i), !s8i loc(#loc12)
    cir.store %2, %0 : !s8i, !cir.ptr<!s8i> loc(#loc108)
    %3 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc14)
    %4 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc104)
    %5 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc15)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc5)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc5)
    %8 = cir.call @__isoc99_fscanf(%5, %7, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i loc(#loc14)
    %9 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc16)
    %10 = cir.get_global @CWE190_Integer_Overflow__char_fscanf_square_45_badData : !cir.ptr<!s8i> loc(#loc105)
    cir.store %9, %10 : !s8i, !cir.ptr<!s8i> loc(#loc109)
    %11 = cir.get_global @badSink : !cir.ptr<!cir.func<!void ()>> loc(#loc110)
    cir.call %11() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc18)
    cir.return loc(#loc9)
  } loc(#loc106)
  cir.func no_proto @CWE190_Integer_Overflow__char_fscanf_square_45_good() extra(#fn_attr) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc112)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc22)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc113)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc24)
    cir.return loc(#loc21)
  } loc(#loc111)
  cir.func private @printHexCharLine(!s8i) loc(#loc114)
  cir.func no_proto internal private @badSink() extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc116)
    %1 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data", init] {alignment = 1 : i64} loc(#loc117)
    %2 = cir.get_global @CWE190_Integer_Overflow__char_fscanf_square_45_badData : !cir.ptr<!s8i> loc(#loc105)
    %3 = cir.load %2 : !cir.ptr<!s8i>, !s8i loc(#loc33)
    cir.store %3, %1 : !s8i, !cir.ptr<!s8i> loc(#loc117)
    cir.br ^bb1 loc(#loc118)
  ^bb1:  // pred: ^bb0
    %4 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc36)
    %5 = cir.cast(integral, %4 : !s8i), !s32i loc(#loc36)
    %6 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc31)
    %7 = cir.cast(integral, %6 : !s8i), !s32i loc(#loc31)
    %8 = cir.binop(mul, %5, %7) nsw : !s32i loc(#loc36)
    %9 = cir.cast(integral, %8 : !s32i), !s8i loc(#loc36)
    cir.store %9, %0 : !s8i, !cir.ptr<!s8i> loc(#loc116)
    %10 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc37)
    cir.call @printHexCharLine(%10) : (!s8i) -> () loc(#loc38)
    cir.br ^bb2 loc(#loc35)
  ^bb2:  // pred: ^bb1
    cir.return loc(#loc29)
  } loc(#loc115)
  cir.global "private" internal dsolocal @CWE190_Integer_Overflow__char_fscanf_square_45_goodG2BData = #cir.int<0> : !s8i {alignment = 1 : i64} loc(#loc119)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc121)
    %1 = cir.const #cir.int<32> : !s32i loc(#loc45)
    %2 = cir.cast(integral, %1 : !s32i), !s8i loc(#loc45)
    cir.store %2, %0 : !s8i, !cir.ptr<!s8i> loc(#loc122)
    %3 = cir.const #cir.int<2> : !s32i loc(#loc47)
    %4 = cir.cast(integral, %3 : !s32i), !s8i loc(#loc47)
    cir.store %4, %0 : !s8i, !cir.ptr<!s8i> loc(#loc123)
    %5 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc49)
    %6 = cir.get_global @CWE190_Integer_Overflow__char_fscanf_square_45_goodG2BData : !cir.ptr<!s8i> loc(#loc119)
    cir.store %5, %6 : !s8i, !cir.ptr<!s8i> loc(#loc124)
    %7 = cir.get_global @goodG2BSink : !cir.ptr<!cir.func<!void ()>> loc(#loc125)
    cir.call %7() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc51)
    cir.return loc(#loc42)
  } loc(#loc120)
  cir.func no_proto internal private @goodG2BSink() extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc127)
    %1 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data", init] {alignment = 1 : i64} loc(#loc128)
    %2 = cir.get_global @CWE190_Integer_Overflow__char_fscanf_square_45_goodG2BData : !cir.ptr<!s8i> loc(#loc119)
    %3 = cir.load %2 : !cir.ptr<!s8i>, !s8i loc(#loc58)
    cir.store %3, %1 : !s8i, !cir.ptr<!s8i> loc(#loc128)
    cir.br ^bb1 loc(#loc129)
  ^bb1:  // pred: ^bb0
    %4 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc61)
    %5 = cir.cast(integral, %4 : !s8i), !s32i loc(#loc61)
    %6 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc56)
    %7 = cir.cast(integral, %6 : !s8i), !s32i loc(#loc56)
    %8 = cir.binop(mul, %5, %7) nsw : !s32i loc(#loc61)
    %9 = cir.cast(integral, %8 : !s32i), !s8i loc(#loc61)
    cir.store %9, %0 : !s8i, !cir.ptr<!s8i> loc(#loc127)
    %10 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc62)
    cir.call @printHexCharLine(%10) : (!s8i) -> () loc(#loc63)
    cir.br ^bb2 loc(#loc60)
  ^bb2:  // pred: ^bb1
    cir.return loc(#loc54)
  } loc(#loc126)
  cir.global "private" internal dsolocal @CWE190_Integer_Overflow__char_fscanf_square_45_goodB2GData = #cir.int<0> : !s8i {alignment = 1 : i64} loc(#loc130)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc132)
    %1 = cir.const #cir.int<32> : !s32i loc(#loc70)
    %2 = cir.cast(integral, %1 : !s32i), !s8i loc(#loc70)
    cir.store %2, %0 : !s8i, !cir.ptr<!s8i> loc(#loc133)
    %3 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc72)
    %4 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc104)
    %5 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc73)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc74)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc74)
    %8 = cir.call @__isoc99_fscanf(%5, %7, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i loc(#loc72)
    %9 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc75)
    %10 = cir.get_global @CWE190_Integer_Overflow__char_fscanf_square_45_goodB2GData : !cir.ptr<!s8i> loc(#loc130)
    cir.store %9, %10 : !s8i, !cir.ptr<!s8i> loc(#loc134)
    %11 = cir.get_global @goodB2GSink : !cir.ptr<!cir.func<!void ()>> loc(#loc135)
    cir.call %11() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc77)
    cir.return loc(#loc67)
  } loc(#loc131)
  cir.func private @sqrt(!cir.double) -> !cir.double extra(#fn_attr1) loc(#loc79)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc136)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc82)
  cir.func no_proto internal private @goodB2GSink() extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc138)
    %1 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data", init] {alignment = 1 : i64} loc(#loc139)
    %2 = cir.get_global @CWE190_Integer_Overflow__char_fscanf_square_45_goodB2GData : !cir.ptr<!s8i> loc(#loc130)
    %3 = cir.load %2 : !cir.ptr<!s8i>, !s8i loc(#loc88)
    cir.store %3, %1 : !s8i, !cir.ptr<!s8i> loc(#loc139)
    cir.br ^bb1 loc(#loc140)
  ^bb1:  // pred: ^bb0
    %4 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc91)
    %5 = cir.cast(integral, %4 : !s8i), !s64i loc(#loc91)
    %6 = cir.cast(integral, %5 : !s64i), !s32i loc(#loc91)
    %7 = cir.abs %6 poison : !s32i loc(#loc92)
    %8 = cir.cast(integral, %7 : !s32i), !s64i loc(#loc92)
    %9 = cir.get_global @sqrt : !cir.ptr<!cir.func<!cir.double (!cir.double)>> loc(#loc93)
    %10 = cir.const #cir.int<127> : !s32i loc(#loc94)
    %11 = cir.cast(int_to_float, %10 : !s32i), !cir.double loc(#loc94)
    %12 = cir.call @sqrt(%11) : (!cir.double) -> !cir.double extra(#fn_attr1) loc(#loc93)
    %13 = cir.cast(float_to_int, %12 : !cir.double), !s64i loc(#loc93)
    %14 = cir.cmp(le, %8, %13) : !s64i, !cir.bool loc(#loc141)
    cir.brcond %14 ^bb2, ^bb3 loc(#loc142)
  ^bb2:  // pred: ^bb1
    %15 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc99)
    %16 = cir.cast(integral, %15 : !s8i), !s32i loc(#loc99)
    %17 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc86)
    %18 = cir.cast(integral, %17 : !s8i), !s32i loc(#loc86)
    %19 = cir.binop(mul, %16, %18) nsw : !s32i loc(#loc99)
    %20 = cir.cast(integral, %19 : !s32i), !s8i loc(#loc99)
    cir.store %20, %0 : !s8i, !cir.ptr<!s8i> loc(#loc138)
    %21 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc100)
    cir.call @printHexCharLine(%21) : (!s8i) -> () loc(#loc101)
    cir.br ^bb4 loc(#loc97)
  ^bb3:  // pred: ^bb1
    %22 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc82)
    %23 = cir.cast(array_to_ptrdecay, %22 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc82)
    cir.call @printLine(%23) : (!cir.ptr<!s8i>) -> () loc(#loc102)
    cir.br ^bb4 loc(#loc90)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc90)
  ^bb5:  // pred: ^bb4
    cir.return loc(#loc84)
  } loc(#loc137)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_fscanf_square_45.c":0:0)
#loc1 = loc("/usr/include/stdio.h":463:1)
#loc2 = loc("/usr/include/stdio.h":465:33)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("CWE190_Integer_Overflow__char_fscanf_square_45.c":43:20)
#loc6 = loc("CWE190_Integer_Overflow__char_fscanf_square_45.c":22:1)
#loc7 = loc("CWE190_Integer_Overflow__char_fscanf_square_45.c":22:13)
#loc8 = loc("CWE190_Integer_Overflow__char_fscanf_square_45.c":38:1)
#loc9 = loc("CWE190_Integer_Overflow__char_fscanf_square_45.c":46:1)
#loc10 = loc("CWE190_Integer_Overflow__char_fscanf_square_45.c":40:5)
#loc11 = loc("CWE190_Integer_Overflow__char_fscanf_square_45.c":40:10)
#loc12 = loc("CWE190_Integer_Overflow__char_fscanf_square_45.c":41:12)
#loc13 = loc("CWE190_Integer_Overflow__char_fscanf_square_45.c":41:5)
#loc14 = loc("CWE190_Integer_Overflow__char_fscanf_square_45.c":43:5)
#loc15 = loc("CWE190_Integer_Overflow__char_fscanf_square_45.c":43:13)
#loc16 = loc("CWE190_Integer_Overflow__char_fscanf_square_45.c":44:62)
#loc17 = loc("CWE190_Integer_Overflow__char_fscanf_square_45.c":44:5)
#loc18 = loc("CWE190_Integer_Overflow__char_fscanf_square_45.c":45:5)
#loc19 = loc("CWE190_Integer_Overflow__char_fscanf_square_45.c":45:13)
#loc20 = loc("CWE190_Integer_Overflow__char_fscanf_square_45.c":99:1)
#loc21 = loc("CWE190_Integer_Overflow__char_fscanf_square_45.c":103:1)
#loc22 = loc("CWE190_Integer_Overflow__char_fscanf_square_45.c":101:5)
#loc23 = loc("CWE190_Integer_Overflow__char_fscanf_square_45.c":101:13)
#loc24 = loc("CWE190_Integer_Overflow__char_fscanf_square_45.c":102:5)
#loc25 = loc("CWE190_Integer_Overflow__char_fscanf_square_45.c":102:13)
#loc26 = loc("../../../testcasesupport/std_testcase_io.h":30:1)
#loc27 = loc("../../../testcasesupport/std_testcase_io.h":30:35)
#loc28 = loc("CWE190_Integer_Overflow__char_fscanf_square_45.c":28:1)
#loc29 = loc("CWE190_Integer_Overflow__char_fscanf_square_45.c":36:1)
#loc30 = loc("CWE190_Integer_Overflow__char_fscanf_square_45.c":33:9)
#loc31 = loc("CWE190_Integer_Overflow__char_fscanf_square_45.c":33:30)
#loc32 = loc("CWE190_Integer_Overflow__char_fscanf_square_45.c":30:5)
#loc33 = loc("CWE190_Integer_Overflow__char_fscanf_square_45.c":30:17)
#loc34 = loc("CWE190_Integer_Overflow__char_fscanf_square_45.c":31:5)
#loc35 = loc("CWE190_Integer_Overflow__char_fscanf_square_45.c":35:5)
#loc36 = loc("CWE190_Integer_Overflow__char_fscanf_square_45.c":33:23)
#loc37 = loc("CWE190_Integer_Overflow__char_fscanf_square_45.c":34:26)
#loc38 = loc("CWE190_Integer_Overflow__char_fscanf_square_45.c":34:9)
#loc39 = loc("CWE190_Integer_Overflow__char_fscanf_square_45.c":23:1)
#loc40 = loc("CWE190_Integer_Overflow__char_fscanf_square_45.c":23:13)
#loc41 = loc("CWE190_Integer_Overflow__char_fscanf_square_45.c":63:1)
#loc42 = loc("CWE190_Integer_Overflow__char_fscanf_square_45.c":71:1)
#loc43 = loc("CWE190_Integer_Overflow__char_fscanf_square_45.c":65:5)
#loc44 = loc("CWE190_Integer_Overflow__char_fscanf_square_45.c":65:10)
#loc45 = loc("CWE190_Integer_Overflow__char_fscanf_square_45.c":66:12)
#loc46 = loc("CWE190_Integer_Overflow__char_fscanf_square_45.c":66:5)
#loc47 = loc("CWE190_Integer_Overflow__char_fscanf_square_45.c":68:12)
#loc48 = loc("CWE190_Integer_Overflow__char_fscanf_square_45.c":68:5)
#loc49 = loc("CWE190_Integer_Overflow__char_fscanf_square_45.c":69:66)
#loc50 = loc("CWE190_Integer_Overflow__char_fscanf_square_45.c":69:5)
#loc51 = loc("CWE190_Integer_Overflow__char_fscanf_square_45.c":70:5)
#loc52 = loc("CWE190_Integer_Overflow__char_fscanf_square_45.c":70:17)
#loc53 = loc("CWE190_Integer_Overflow__char_fscanf_square_45.c":53:1)
#loc54 = loc("CWE190_Integer_Overflow__char_fscanf_square_45.c":61:1)
#loc55 = loc("CWE190_Integer_Overflow__char_fscanf_square_45.c":58:9)
#loc56 = loc("CWE190_Integer_Overflow__char_fscanf_square_45.c":58:30)
#loc57 = loc("CWE190_Integer_Overflow__char_fscanf_square_45.c":55:5)
#loc58 = loc("CWE190_Integer_Overflow__char_fscanf_square_45.c":55:17)
#loc59 = loc("CWE190_Integer_Overflow__char_fscanf_square_45.c":56:5)
#loc60 = loc("CWE190_Integer_Overflow__char_fscanf_square_45.c":60:5)
#loc61 = loc("CWE190_Integer_Overflow__char_fscanf_square_45.c":58:23)
#loc62 = loc("CWE190_Integer_Overflow__char_fscanf_square_45.c":59:26)
#loc63 = loc("CWE190_Integer_Overflow__char_fscanf_square_45.c":59:9)
#loc64 = loc("CWE190_Integer_Overflow__char_fscanf_square_45.c":24:1)
#loc65 = loc("CWE190_Integer_Overflow__char_fscanf_square_45.c":24:13)
#loc66 = loc("CWE190_Integer_Overflow__char_fscanf_square_45.c":89:1)
#loc67 = loc("CWE190_Integer_Overflow__char_fscanf_square_45.c":97:1)
#loc68 = loc("CWE190_Integer_Overflow__char_fscanf_square_45.c":91:5)
#loc69 = loc("CWE190_Integer_Overflow__char_fscanf_square_45.c":91:10)
#loc70 = loc("CWE190_Integer_Overflow__char_fscanf_square_45.c":92:12)
#loc71 = loc("CWE190_Integer_Overflow__char_fscanf_square_45.c":92:5)
#loc72 = loc("CWE190_Integer_Overflow__char_fscanf_square_45.c":94:5)
#loc73 = loc("CWE190_Integer_Overflow__char_fscanf_square_45.c":94:13)
#loc74 = loc("CWE190_Integer_Overflow__char_fscanf_square_45.c":94:20)
#loc75 = loc("CWE190_Integer_Overflow__char_fscanf_square_45.c":95:66)
#loc76 = loc("CWE190_Integer_Overflow__char_fscanf_square_45.c":95:5)
#loc77 = loc("CWE190_Integer_Overflow__char_fscanf_square_45.c":96:5)
#loc78 = loc("CWE190_Integer_Overflow__char_fscanf_square_45.c":96:17)
#loc79 = loc("/usr/include/bits/mathcalls.h":158:1)
#loc80 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc81 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc82 = loc("CWE190_Integer_Overflow__char_fscanf_square_45.c":85:19)
#loc83 = loc("CWE190_Integer_Overflow__char_fscanf_square_45.c":74:1)
#loc84 = loc("CWE190_Integer_Overflow__char_fscanf_square_45.c":87:1)
#loc85 = loc("CWE190_Integer_Overflow__char_fscanf_square_45.c":80:9)
#loc86 = loc("CWE190_Integer_Overflow__char_fscanf_square_45.c":80:30)
#loc87 = loc("CWE190_Integer_Overflow__char_fscanf_square_45.c":76:5)
#loc88 = loc("CWE190_Integer_Overflow__char_fscanf_square_45.c":76:17)
#loc89 = loc("CWE190_Integer_Overflow__char_fscanf_square_45.c":78:5)
#loc90 = loc("CWE190_Integer_Overflow__char_fscanf_square_45.c":86:5)
#loc91 = loc("CWE190_Integer_Overflow__char_fscanf_square_45.c":78:19)
#loc92 = loc("CWE190_Integer_Overflow__char_fscanf_square_45.c":78:9)
#loc93 = loc("CWE190_Integer_Overflow__char_fscanf_square_45.c":78:34)
#loc94 = loc("CWE190_Integer_Overflow__char_fscanf_square_45.c":78:47)
#loc95 = loc("CWE190_Integer_Overflow__char_fscanf_square_45.c":78:55)
#loc96 = loc("CWE190_Integer_Overflow__char_fscanf_square_45.c":79:5)
#loc97 = loc("CWE190_Integer_Overflow__char_fscanf_square_45.c":82:5)
#loc98 = loc("CWE190_Integer_Overflow__char_fscanf_square_45.c":84:5)
#loc99 = loc("CWE190_Integer_Overflow__char_fscanf_square_45.c":80:23)
#loc100 = loc("CWE190_Integer_Overflow__char_fscanf_square_45.c":81:26)
#loc101 = loc("CWE190_Integer_Overflow__char_fscanf_square_45.c":81:9)
#loc102 = loc("CWE190_Integer_Overflow__char_fscanf_square_45.c":85:9)
#loc103 = loc(fused[#loc1, #loc2])
#loc104 = loc(fused[#loc3, #loc4])
#loc105 = loc(fused[#loc6, #loc7])
#loc106 = loc(fused[#loc8, #loc9])
#loc107 = loc(fused[#loc10, #loc11])
#loc108 = loc(fused[#loc13, #loc12])
#loc109 = loc(fused[#loc17, #loc16])
#loc110 = loc(fused[#loc18, #loc19])
#loc111 = loc(fused[#loc20, #loc21])
#loc112 = loc(fused[#loc22, #loc23])
#loc113 = loc(fused[#loc24, #loc25])
#loc114 = loc(fused[#loc26, #loc27])
#loc115 = loc(fused[#loc28, #loc29])
#loc116 = loc(fused[#loc30, #loc31])
#loc117 = loc(fused[#loc32, #loc33])
#loc118 = loc(fused[#loc34, #loc35])
#loc119 = loc(fused[#loc39, #loc40])
#loc120 = loc(fused[#loc41, #loc42])
#loc121 = loc(fused[#loc43, #loc44])
#loc122 = loc(fused[#loc46, #loc45])
#loc123 = loc(fused[#loc48, #loc47])
#loc124 = loc(fused[#loc50, #loc49])
#loc125 = loc(fused[#loc51, #loc52])
#loc126 = loc(fused[#loc53, #loc54])
#loc127 = loc(fused[#loc55, #loc56])
#loc128 = loc(fused[#loc57, #loc58])
#loc129 = loc(fused[#loc59, #loc60])
#loc130 = loc(fused[#loc64, #loc65])
#loc131 = loc(fused[#loc66, #loc67])
#loc132 = loc(fused[#loc68, #loc69])
#loc133 = loc(fused[#loc71, #loc70])
#loc134 = loc(fused[#loc76, #loc75])
#loc135 = loc(fused[#loc77, #loc78])
#loc136 = loc(fused[#loc80, #loc81])
#loc137 = loc(fused[#loc83, #loc84])
#loc138 = loc(fused[#loc85, #loc86])
#loc139 = loc(fused[#loc87, #loc88])
#loc140 = loc(fused[#loc89, #loc90])
#loc141 = loc(fused[#loc92, #loc95])
#loc142 = loc(fused[#loc96, #loc97, #loc98, #loc90])
