!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
!ty_in_addr = !cir.record<struct "in_addr" {!u32i} #cir.record.decl.ast>
!ty_sockaddr = !cir.record<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.record<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/workspaces/juliet-c/testcases/CWE510_Trapdoor/CWE510_Trapdoor__hostname_based_logic_09.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.global "private" constant external @GLOBAL_CONST_TRUE : !s32i {alignment = 4 : i64} loc(#loc405)
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc406)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc407)
  cir.func private @bind(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc408)
  cir.func private @listen(!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc409)
  cir.func private @accept(!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc410)
  cir.func private @getsockname(!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i extra(#fn_attr) loc(#loc411)
  cir.func private @getnameinfo(!cir.ptr<!ty_sockaddr>, !u32i, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>, !u32i, !s32i) -> !s32i loc(#loc412)
  cir.func private @strcmp(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc413)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"admin.google.com\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc19)
  cir.func private @send(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc414)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Welcome, admin!\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc22)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Welcome!\00" : !cir.array<!s8i x 9>> : !cir.array<!s8i x 9> {alignment = 1 : i64} loc(#loc23)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc415)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Send failed!\00" : !cir.array<!s8i x 13>> : !cir.array<!s8i x 13> {alignment = 1 : i64} loc(#loc26)
  cir.func private @close(!s32i) -> !s32i loc(#loc416)
  cir.func no_proto @CWE510_Trapdoor__hostname_based_logic_09_bad() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.get_global @GLOBAL_CONST_TRUE : !cir.ptr<!s32i> loc(#loc405)
      %1 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc33)
      %2 = cir.cast(int_to_bool, %1 : !s32i), !cir.bool loc(#loc33)
      cir.if %2 {
        cir.scope {
          %3 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc421)
          %4 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["acceptService"] {alignment = 4 : i64} loc(#loc422)
          %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptServiceLen", init] {alignment = 4 : i64} loc(#loc423)
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc424)
          %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc425)
          %8 = cir.alloca !cir.array<!s8i x 1025>, !cir.ptr<!cir.array<!s8i x 1025>>, ["hostname"] {alignment = 16 : i64} loc(#loc426)
          %9 = cir.alloca !cir.array<!s8i x 32>, !cir.ptr<!cir.array<!s8i x 32>>, ["servInfo"] {alignment = 16 : i64} loc(#loc427)
          %10 = cir.const #cir.int<16> : !u64i loc(#loc428)
          %11 = cir.cast(integral, %10 : !u64i), !s32i loc(#loc428)
          cir.store %11, %5 : !s32i, !cir.ptr<!s32i> loc(#loc423)
          %12 = cir.const #cir.int<1> : !s32i loc(#loc43)
          %13 = cir.unary(minus, %12) nsw : !s32i, !s32i loc(#loc43)
          cir.store %13, %6 : !s32i, !cir.ptr<!s32i> loc(#loc424)
          %14 = cir.const #cir.int<1> : !s32i loc(#loc45)
          %15 = cir.unary(minus, %14) nsw : !s32i, !s32i loc(#loc45)
          cir.store %15, %7 : !s32i, !cir.ptr<!s32i> loc(#loc425)
          cir.scope {
            cir.do {
              cir.scope {
                %16 = cir.const #cir.int<2> : !s32i loc(#loc55)
                %17 = cir.const #cir.int<1> : !s32i loc(#loc56)
                %18 = cir.const #cir.int<6> : !s32i loc(#loc57)
                %19 = cir.call @socket(%16, %17, %18) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc58)
                cir.store %19, %6 : !s32i, !cir.ptr<!s32i> loc(#loc431)
                cir.scope {
                  %38 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc63)
                  %39 = cir.const #cir.int<1> : !s32i loc(#loc64)
                  %40 = cir.unary(minus, %39) nsw : !s32i, !s32i loc(#loc64)
                  %41 = cir.cmp(eq, %38, %40) : !s32i, !cir.bool loc(#loc433)
                  cir.if %41 {
                    cir.break loc(#loc66)
                  } loc(#loc434)
                } loc(#loc432)
                %20 = cir.cast(bitcast, %3 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc435)
                %21 = cir.const #cir.int<0> : !s32i loc(#loc69)
                %22 = cir.const #cir.int<16> : !u64i loc(#loc436)
                cir.libc.memset %22 bytes from %20 set to %21 : !cir.ptr<!void>, !s32i, !u64i loc(#loc437)
                %23 = cir.const #cir.int<2> : !s32i loc(#loc74)
                %24 = cir.cast(integral, %23 : !s32i), !u16i loc(#loc74)
                %25 = cir.get_member %3[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc75)
                cir.store %24, %25 : !u16i, !cir.ptr<!u16i> loc(#loc438)
                %26 = cir.const #cir.int<0> : !s32i loc(#loc77)
                %27 = cir.cast(integral, %26 : !s32i), !u32i loc(#loc77)
                %28 = cir.get_member %3[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc78)
                %29 = cir.get_member %28[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc79)
                cir.store %27, %29 : !u32i, !cir.ptr<!u32i> loc(#loc439)
                %30 = cir.const #cir.int<20000> : !s32i loc(#loc81)
                %31 = cir.cast(integral, %30 : !s32i), !u16i loc(#loc81)
                %32 = cir.call @htons(%31) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc82)
                %33 = cir.get_member %3[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc83)
                cir.store %32, %33 : !u16i, !cir.ptr<!u16i> loc(#loc440)
                cir.scope {
                  %38 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc88)
                  %39 = cir.cast(bitcast, %3 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc442)
                  %40 = cir.const #cir.int<16> : !u64i loc(#loc443)
                  %41 = cir.cast(integral, %40 : !u64i), !u32i loc(#loc443)
                  %42 = cir.call @bind(%38, %39, %41) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc93)
                  %43 = cir.const #cir.int<1> : !s32i loc(#loc94)
                  %44 = cir.unary(minus, %43) nsw : !s32i, !s32i loc(#loc94)
                  %45 = cir.cmp(eq, %42, %44) : !s32i, !cir.bool loc(#loc444)
                  cir.if %45 {
                    cir.break loc(#loc96)
                  } loc(#loc445)
                } loc(#loc441)
                cir.scope {
                  %38 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc99)
                  %39 = cir.const #cir.int<5> : !s32i loc(#loc100)
                  %40 = cir.call @listen(%38, %39) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc101)
                  %41 = cir.const #cir.int<1> : !s32i loc(#loc102)
                  %42 = cir.unary(minus, %41) nsw : !s32i, !s32i loc(#loc102)
                  %43 = cir.cmp(eq, %40, %42) : !s32i, !cir.bool loc(#loc447)
                  cir.if %43 {
                    cir.break loc(#loc104)
                  } loc(#loc448)
                } loc(#loc446)
                %34 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc105)
                %35 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc106)
                %36 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc107)
                %37 = cir.call @accept(%34, %35, %36) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc108)
                cir.store %37, %7 : !s32i, !cir.ptr<!s32i> loc(#loc449)
                cir.scope {
                  %38 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc113)
                  %39 = cir.const #cir.int<1> : !s32i loc(#loc114)
                  %40 = cir.unary(minus, %39) nsw : !s32i, !s32i loc(#loc114)
                  %41 = cir.cmp(eq, %38, %40) : !s32i, !cir.bool loc(#loc451)
                  cir.if %41 {
                    cir.break loc(#loc116)
                  } loc(#loc452)
                } loc(#loc450)
                cir.scope {
                  %38 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc119)
                  %39 = cir.cast(bitcast, %4 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc454)
                  %40 = cir.cast(bitcast, %5 : !cir.ptr<!s32i>), !cir.ptr<!u32i> loc(#loc455)
                  %41 = cir.call @getsockname(%38, %39, %40) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i extra(#fn_attr) loc(#loc124)
                  %42 = cir.const #cir.int<1> : !s32i loc(#loc125)
                  %43 = cir.unary(minus, %42) nsw : !s32i, !s32i loc(#loc126)
                  %44 = cir.cmp(eq, %41, %43) : !s32i, !cir.bool loc(#loc456)
                  cir.if %44 {
                    cir.break loc(#loc128)
                  } loc(#loc457)
                } loc(#loc453)
                cir.scope {
                  %38 = cir.cast(bitcast, %4 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc459)
                  %39 = cir.const #cir.int<16> : !u64i loc(#loc460)
                  %40 = cir.cast(integral, %39 : !u64i), !u32i loc(#loc460)
                  %41 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 1025>>), !cir.ptr<!s8i> loc(#loc135)
                  %42 = cir.const #cir.int<1025> : !s32i loc(#loc136)
                  %43 = cir.cast(integral, %42 : !s32i), !u32i loc(#loc136)
                  %44 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc137)
                  %45 = cir.const #cir.int<32> : !s32i loc(#loc138)
                  %46 = cir.cast(integral, %45 : !s32i), !u32i loc(#loc138)
                  %47 = cir.const #cir.int<2> : !s32i loc(#loc139)
                  %48 = cir.call @getnameinfo(%38, %40, %41, %43, %44, %46, %47) : (!cir.ptr<!ty_sockaddr>, !u32i, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>, !u32i, !s32i) -> !s32i loc(#loc140)
                  %49 = cir.const #cir.int<0> : !s32i loc(#loc141)
                  %50 = cir.cmp(ne, %48, %49) : !s32i, !cir.bool loc(#loc461)
                  cir.if %50 {
                    cir.break loc(#loc143)
                  } loc(#loc462)
                } loc(#loc458)
                cir.scope {
                  %38 = cir.get_global @strcmp : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i>> loc(#loc146)
                  %39 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc19)
                  %40 = cir.cast(array_to_ptrdecay, %39 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc19)
                  %41 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 1025>>), !cir.ptr<!s8i> loc(#loc147)
                  %42 = cir.call @strcmp(%40, %41) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc146)
                  %43 = cir.const #cir.int<0> : !s32i loc(#loc148)
                  %44 = cir.cmp(eq, %42, %43) : !s32i, !cir.bool loc(#loc464)
                  cir.if %44 {
                    cir.scope {
                      %45 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc154)
                      %46 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc22)
                      %47 = cir.cast(array_to_ptrdecay, %46 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc22)
                      %48 = cir.cast(bitcast, %47 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc22)
                      %49 = cir.const #cir.int<15> : !u64i loc(#loc467)
                      %50 = cir.const #cir.int<0> : !s32i loc(#loc157)
                      %51 = cir.call @send(%45, %48, %49, %50) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc158)
                      %52 = cir.const #cir.int<1> : !s32i loc(#loc159)
                      %53 = cir.unary(minus, %52) nsw : !s32i, !s32i loc(#loc159)
                      %54 = cir.cast(integral, %53 : !s32i), !s64i loc(#loc159)
                      %55 = cir.cmp(eq, %51, %54) : !s64i, !cir.bool loc(#loc468)
                      cir.if %55 {
                        cir.break loc(#loc161)
                      } loc(#loc469)
                    } loc(#loc466)
                  } else {
                    cir.scope {
                      %45 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc164)
                      %46 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc23)
                      %47 = cir.cast(array_to_ptrdecay, %46 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc23)
                      %48 = cir.cast(bitcast, %47 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc23)
                      %49 = cir.const #cir.int<8> : !u64i loc(#loc471)
                      %50 = cir.const #cir.int<0> : !s32i loc(#loc167)
                      %51 = cir.call @send(%45, %48, %49, %50) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc168)
                      %52 = cir.const #cir.int<1> : !s32i loc(#loc169)
                      %53 = cir.unary(minus, %52) nsw : !s32i, !s32i loc(#loc169)
                      %54 = cir.cast(integral, %53 : !s32i), !s64i loc(#loc169)
                      %55 = cir.cmp(eq, %51, %54) : !s64i, !cir.bool loc(#loc472)
                      cir.if %55 {
                        %56 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 13>> loc(#loc26)
                        %57 = cir.cast(array_to_ptrdecay, %56 : !cir.ptr<!cir.array<!s8i x 13>>), !cir.ptr<!s8i> loc(#loc26)
                        cir.call @printLine(%57) : (!cir.ptr<!s8i>) -> () loc(#loc171)
                      } loc(#loc473)
                    } loc(#loc470)
                  } loc(#loc465)
                } loc(#loc463)
              } loc(#loc430)
              cir.yield loc(#loc52)
            } while {
              %16 = cir.const #cir.int<0> : !s32i loc(#loc172)
              %17 = cir.cast(int_to_bool, %16 : !s32i), !cir.bool loc(#loc172)
              cir.condition(%17) loc(#loc172)
            } loc(#loc429)
          } loc(#loc429)
          cir.scope {
            %16 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc175)
            %17 = cir.const #cir.int<1> : !s32i loc(#loc176)
            %18 = cir.unary(minus, %17) nsw : !s32i, !s32i loc(#loc176)
            %19 = cir.cmp(ne, %16, %18) : !s32i, !cir.bool loc(#loc475)
            cir.if %19 {
              %20 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc178)
              %21 = cir.call @close(%20) : (!s32i) -> !s32i loc(#loc179)
            } loc(#loc476)
          } loc(#loc474)
          cir.scope {
            %16 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc182)
            %17 = cir.const #cir.int<1> : !s32i loc(#loc183)
            %18 = cir.unary(minus, %17) nsw : !s32i, !s32i loc(#loc183)
            %19 = cir.cmp(ne, %16, %18) : !s32i, !cir.bool loc(#loc478)
            cir.if %19 {
              %20 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc185)
              %21 = cir.call @close(%20) : (!s32i) -> !s32i loc(#loc186)
            } loc(#loc479)
          } loc(#loc477)
        } loc(#loc420)
      } loc(#loc419)
    } loc(#loc418)
    cir.return loc(#loc30)
  } loc(#loc417)
  cir.func no_proto @CWE510_Trapdoor__hostname_based_logic_09_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<()>> loc(#loc481)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc189)
    %1 = cir.get_global @good2 : !cir.ptr<!cir.func<()>> loc(#loc482)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc191)
    cir.return loc(#loc188)
  } loc(#loc480)
  cir.global "private" constant external @GLOBAL_CONST_FALSE : !s32i {alignment = 4 : i64} loc(#loc483)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc195)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.get_global @GLOBAL_CONST_FALSE : !cir.ptr<!s32i> loc(#loc483)
      %1 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc200)
      %2 = cir.cast(int_to_bool, %1 : !s32i), !cir.bool loc(#loc200)
      cir.if %2 {
        %3 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc195)
        %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc195)
        cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc204)
      } else {
        cir.scope {
          %3 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc488)
          %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc489)
          %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc490)
          %6 = cir.const #cir.int<1> : !s32i loc(#loc210)
          %7 = cir.unary(minus, %6) nsw : !s32i, !s32i loc(#loc210)
          cir.store %7, %4 : !s32i, !cir.ptr<!s32i> loc(#loc489)
          %8 = cir.const #cir.int<1> : !s32i loc(#loc212)
          %9 = cir.unary(minus, %8) nsw : !s32i, !s32i loc(#loc212)
          cir.store %9, %5 : !s32i, !cir.ptr<!s32i> loc(#loc490)
          cir.scope {
            cir.do {
              cir.scope {
                %10 = cir.const #cir.int<2> : !s32i loc(#loc217)
                %11 = cir.const #cir.int<1> : !s32i loc(#loc218)
                %12 = cir.const #cir.int<6> : !s32i loc(#loc219)
                %13 = cir.call @socket(%10, %11, %12) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc220)
                cir.store %13, %4 : !s32i, !cir.ptr<!s32i> loc(#loc493)
                cir.scope {
                  %32 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc225)
                  %33 = cir.const #cir.int<1> : !s32i loc(#loc226)
                  %34 = cir.unary(minus, %33) nsw : !s32i, !s32i loc(#loc226)
                  %35 = cir.cmp(eq, %32, %34) : !s32i, !cir.bool loc(#loc495)
                  cir.if %35 {
                    cir.break loc(#loc228)
                  } loc(#loc496)
                } loc(#loc494)
                %14 = cir.cast(bitcast, %3 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc497)
                %15 = cir.const #cir.int<0> : !s32i loc(#loc231)
                %16 = cir.const #cir.int<16> : !u64i loc(#loc498)
                cir.libc.memset %16 bytes from %14 set to %15 : !cir.ptr<!void>, !s32i, !u64i loc(#loc499)
                %17 = cir.const #cir.int<2> : !s32i loc(#loc236)
                %18 = cir.cast(integral, %17 : !s32i), !u16i loc(#loc236)
                %19 = cir.get_member %3[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc75)
                cir.store %18, %19 : !u16i, !cir.ptr<!u16i> loc(#loc500)
                %20 = cir.const #cir.int<0> : !s32i loc(#loc238)
                %21 = cir.cast(integral, %20 : !s32i), !u32i loc(#loc238)
                %22 = cir.get_member %3[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc78)
                %23 = cir.get_member %22[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc79)
                cir.store %21, %23 : !u32i, !cir.ptr<!u32i> loc(#loc501)
                %24 = cir.const #cir.int<20000> : !s32i loc(#loc240)
                %25 = cir.cast(integral, %24 : !s32i), !u16i loc(#loc240)
                %26 = cir.call @htons(%25) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc241)
                %27 = cir.get_member %3[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc83)
                cir.store %26, %27 : !u16i, !cir.ptr<!u16i> loc(#loc502)
                cir.scope {
                  %32 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc246)
                  %33 = cir.cast(bitcast, %3 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc504)
                  %34 = cir.const #cir.int<16> : !u64i loc(#loc505)
                  %35 = cir.cast(integral, %34 : !u64i), !u32i loc(#loc505)
                  %36 = cir.call @bind(%32, %33, %35) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc251)
                  %37 = cir.const #cir.int<1> : !s32i loc(#loc252)
                  %38 = cir.unary(minus, %37) nsw : !s32i, !s32i loc(#loc252)
                  %39 = cir.cmp(eq, %36, %38) : !s32i, !cir.bool loc(#loc506)
                  cir.if %39 {
                    cir.break loc(#loc254)
                  } loc(#loc507)
                } loc(#loc503)
                cir.scope {
                  %32 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc257)
                  %33 = cir.const #cir.int<5> : !s32i loc(#loc258)
                  %34 = cir.call @listen(%32, %33) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc259)
                  %35 = cir.const #cir.int<1> : !s32i loc(#loc260)
                  %36 = cir.unary(minus, %35) nsw : !s32i, !s32i loc(#loc260)
                  %37 = cir.cmp(eq, %34, %36) : !s32i, !cir.bool loc(#loc509)
                  cir.if %37 {
                    cir.break loc(#loc262)
                  } loc(#loc510)
                } loc(#loc508)
                %28 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc263)
                %29 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc264)
                %30 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc265)
                %31 = cir.call @accept(%28, %29, %30) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc266)
                cir.store %31, %5 : !s32i, !cir.ptr<!s32i> loc(#loc511)
                cir.scope {
                  %32 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc271)
                  %33 = cir.const #cir.int<1> : !s32i loc(#loc272)
                  %34 = cir.unary(minus, %33) nsw : !s32i, !s32i loc(#loc272)
                  %35 = cir.cmp(eq, %32, %34) : !s32i, !cir.bool loc(#loc513)
                  cir.if %35 {
                    cir.break loc(#loc274)
                  } loc(#loc514)
                } loc(#loc512)
                cir.scope {
                  %32 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc277)
                  %33 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc278)
                  %34 = cir.cast(array_to_ptrdecay, %33 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc278)
                  %35 = cir.cast(bitcast, %34 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc278)
                  %36 = cir.const #cir.int<8> : !u64i loc(#loc516)
                  %37 = cir.const #cir.int<0> : !s32i loc(#loc281)
                  %38 = cir.call @send(%32, %35, %36, %37) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc282)
                  %39 = cir.const #cir.int<1> : !s32i loc(#loc283)
                  %40 = cir.unary(minus, %39) nsw : !s32i, !s32i loc(#loc283)
                  %41 = cir.cast(integral, %40 : !s32i), !s64i loc(#loc283)
                  %42 = cir.cmp(eq, %38, %41) : !s64i, !cir.bool loc(#loc517)
                  cir.if %42 {
                    %43 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 13>> loc(#loc285)
                    %44 = cir.cast(array_to_ptrdecay, %43 : !cir.ptr<!cir.array<!s8i x 13>>), !cir.ptr<!s8i> loc(#loc285)
                    cir.call @printLine(%44) : (!cir.ptr<!s8i>) -> () loc(#loc286)
                  } loc(#loc518)
                } loc(#loc515)
              } loc(#loc492)
              cir.yield loc(#loc214)
            } while {
              %10 = cir.const #cir.int<0> : !s32i loc(#loc287)
              %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc287)
              cir.condition(%11) loc(#loc287)
            } loc(#loc491)
          } loc(#loc491)
          cir.scope {
            %10 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc290)
            %11 = cir.const #cir.int<1> : !s32i loc(#loc291)
            %12 = cir.unary(minus, %11) nsw : !s32i, !s32i loc(#loc291)
            %13 = cir.cmp(ne, %10, %12) : !s32i, !cir.bool loc(#loc520)
            cir.if %13 {
              %14 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc293)
              %15 = cir.call @close(%14) : (!s32i) -> !s32i loc(#loc294)
            } loc(#loc521)
          } loc(#loc519)
          cir.scope {
            %10 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc297)
            %11 = cir.const #cir.int<1> : !s32i loc(#loc298)
            %12 = cir.unary(minus, %11) nsw : !s32i, !s32i loc(#loc298)
            %13 = cir.cmp(ne, %10, %12) : !s32i, !cir.bool loc(#loc523)
            cir.if %13 {
              %14 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc300)
              %15 = cir.call @close(%14) : (!s32i) -> !s32i loc(#loc301)
            } loc(#loc524)
          } loc(#loc522)
        } loc(#loc487)
      } loc(#loc486)
    } loc(#loc485)
    cir.return loc(#loc197)
  } loc(#loc484)
  cir.func no_proto internal private @good2() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.get_global @GLOBAL_CONST_TRUE : !cir.ptr<!s32i> loc(#loc405)
      %1 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc306)
      %2 = cir.cast(int_to_bool, %1 : !s32i), !cir.bool loc(#loc306)
      cir.if %2 {
        cir.scope {
          %3 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc529)
          %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc530)
          %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc531)
          %6 = cir.const #cir.int<1> : !s32i loc(#loc313)
          %7 = cir.unary(minus, %6) nsw : !s32i, !s32i loc(#loc313)
          cir.store %7, %4 : !s32i, !cir.ptr<!s32i> loc(#loc530)
          %8 = cir.const #cir.int<1> : !s32i loc(#loc315)
          %9 = cir.unary(minus, %8) nsw : !s32i, !s32i loc(#loc315)
          cir.store %9, %5 : !s32i, !cir.ptr<!s32i> loc(#loc531)
          cir.scope {
            cir.do {
              cir.scope {
                %10 = cir.const #cir.int<2> : !s32i loc(#loc320)
                %11 = cir.const #cir.int<1> : !s32i loc(#loc321)
                %12 = cir.const #cir.int<6> : !s32i loc(#loc322)
                %13 = cir.call @socket(%10, %11, %12) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc323)
                cir.store %13, %4 : !s32i, !cir.ptr<!s32i> loc(#loc534)
                cir.scope {
                  %32 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc328)
                  %33 = cir.const #cir.int<1> : !s32i loc(#loc329)
                  %34 = cir.unary(minus, %33) nsw : !s32i, !s32i loc(#loc329)
                  %35 = cir.cmp(eq, %32, %34) : !s32i, !cir.bool loc(#loc536)
                  cir.if %35 {
                    cir.break loc(#loc331)
                  } loc(#loc537)
                } loc(#loc535)
                %14 = cir.cast(bitcast, %3 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc538)
                %15 = cir.const #cir.int<0> : !s32i loc(#loc334)
                %16 = cir.const #cir.int<16> : !u64i loc(#loc539)
                cir.libc.memset %16 bytes from %14 set to %15 : !cir.ptr<!void>, !s32i, !u64i loc(#loc540)
                %17 = cir.const #cir.int<2> : !s32i loc(#loc339)
                %18 = cir.cast(integral, %17 : !s32i), !u16i loc(#loc339)
                %19 = cir.get_member %3[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc75)
                cir.store %18, %19 : !u16i, !cir.ptr<!u16i> loc(#loc541)
                %20 = cir.const #cir.int<0> : !s32i loc(#loc341)
                %21 = cir.cast(integral, %20 : !s32i), !u32i loc(#loc341)
                %22 = cir.get_member %3[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc78)
                %23 = cir.get_member %22[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc79)
                cir.store %21, %23 : !u32i, !cir.ptr<!u32i> loc(#loc542)
                %24 = cir.const #cir.int<20000> : !s32i loc(#loc343)
                %25 = cir.cast(integral, %24 : !s32i), !u16i loc(#loc343)
                %26 = cir.call @htons(%25) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc344)
                %27 = cir.get_member %3[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc83)
                cir.store %26, %27 : !u16i, !cir.ptr<!u16i> loc(#loc543)
                cir.scope {
                  %32 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc349)
                  %33 = cir.cast(bitcast, %3 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc545)
                  %34 = cir.const #cir.int<16> : !u64i loc(#loc546)
                  %35 = cir.cast(integral, %34 : !u64i), !u32i loc(#loc546)
                  %36 = cir.call @bind(%32, %33, %35) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc354)
                  %37 = cir.const #cir.int<1> : !s32i loc(#loc355)
                  %38 = cir.unary(minus, %37) nsw : !s32i, !s32i loc(#loc355)
                  %39 = cir.cmp(eq, %36, %38) : !s32i, !cir.bool loc(#loc547)
                  cir.if %39 {
                    cir.break loc(#loc357)
                  } loc(#loc548)
                } loc(#loc544)
                cir.scope {
                  %32 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc360)
                  %33 = cir.const #cir.int<5> : !s32i loc(#loc361)
                  %34 = cir.call @listen(%32, %33) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc362)
                  %35 = cir.const #cir.int<1> : !s32i loc(#loc363)
                  %36 = cir.unary(minus, %35) nsw : !s32i, !s32i loc(#loc363)
                  %37 = cir.cmp(eq, %34, %36) : !s32i, !cir.bool loc(#loc550)
                  cir.if %37 {
                    cir.break loc(#loc365)
                  } loc(#loc551)
                } loc(#loc549)
                %28 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc366)
                %29 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc367)
                %30 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc368)
                %31 = cir.call @accept(%28, %29, %30) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc369)
                cir.store %31, %5 : !s32i, !cir.ptr<!s32i> loc(#loc552)
                cir.scope {
                  %32 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc374)
                  %33 = cir.const #cir.int<1> : !s32i loc(#loc375)
                  %34 = cir.unary(minus, %33) nsw : !s32i, !s32i loc(#loc375)
                  %35 = cir.cmp(eq, %32, %34) : !s32i, !cir.bool loc(#loc554)
                  cir.if %35 {
                    cir.break loc(#loc377)
                  } loc(#loc555)
                } loc(#loc553)
                cir.scope {
                  %32 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc380)
                  %33 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc381)
                  %34 = cir.cast(array_to_ptrdecay, %33 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc381)
                  %35 = cir.cast(bitcast, %34 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc381)
                  %36 = cir.const #cir.int<8> : !u64i loc(#loc557)
                  %37 = cir.const #cir.int<0> : !s32i loc(#loc384)
                  %38 = cir.call @send(%32, %35, %36, %37) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc385)
                  %39 = cir.const #cir.int<1> : !s32i loc(#loc386)
                  %40 = cir.unary(minus, %39) nsw : !s32i, !s32i loc(#loc386)
                  %41 = cir.cast(integral, %40 : !s32i), !s64i loc(#loc386)
                  %42 = cir.cmp(eq, %38, %41) : !s64i, !cir.bool loc(#loc558)
                  cir.if %42 {
                    %43 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 13>> loc(#loc388)
                    %44 = cir.cast(array_to_ptrdecay, %43 : !cir.ptr<!cir.array<!s8i x 13>>), !cir.ptr<!s8i> loc(#loc388)
                    cir.call @printLine(%44) : (!cir.ptr<!s8i>) -> () loc(#loc389)
                  } loc(#loc559)
                } loc(#loc556)
              } loc(#loc533)
              cir.yield loc(#loc317)
            } while {
              %10 = cir.const #cir.int<0> : !s32i loc(#loc390)
              %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc390)
              cir.condition(%11) loc(#loc390)
            } loc(#loc532)
          } loc(#loc532)
          cir.scope {
            %10 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc393)
            %11 = cir.const #cir.int<1> : !s32i loc(#loc394)
            %12 = cir.unary(minus, %11) nsw : !s32i, !s32i loc(#loc394)
            %13 = cir.cmp(ne, %10, %12) : !s32i, !cir.bool loc(#loc561)
            cir.if %13 {
              %14 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc396)
              %15 = cir.call @close(%14) : (!s32i) -> !s32i loc(#loc397)
            } loc(#loc562)
          } loc(#loc560)
          cir.scope {
            %10 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc400)
            %11 = cir.const #cir.int<1> : !s32i loc(#loc401)
            %12 = cir.unary(minus, %11) nsw : !s32i, !s32i loc(#loc401)
            %13 = cir.cmp(ne, %10, %12) : !s32i, !cir.bool loc(#loc564)
            cir.if %13 {
              %14 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc403)
              %15 = cir.call @close(%14) : (!s32i) -> !s32i loc(#loc404)
            } loc(#loc565)
          } loc(#loc563)
        } loc(#loc528)
      } loc(#loc527)
    } loc(#loc526)
    cir.return loc(#loc303)
  } loc(#loc525)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE510_Trapdoor/CWE510_Trapdoor__hostname_based_logic_09.c":0:0)
#loc1 = loc("../../testcasesupport/std_testcase.h":109:1)
#loc2 = loc("../../testcasesupport/std_testcase.h":109:18)
#loc3 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:1)
#loc4 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:62)
#loc5 = loc("/usr/include/netinet/in.h":402:1)
#loc6 = loc("/usr/include/netinet/in.h":403:40)
#loc7 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":112:1)
#loc8 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":113:6)
#loc9 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":296:1)
#loc10 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":296:39)
#loc11 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":306:1)
#loc12 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":307:38)
#loc13 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":116:1)
#loc14 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":117:33)
#loc15 = loc("/usr/include/netdb.h":675:1)
#loc16 = loc("/usr/include/netdb.h":678:36)
#loc17 = loc("/usr/include/string.h":156:1)
#loc18 = loc("/usr/include/string.h":157:33)
#loc19 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":105:28)
#loc20 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":138:1)
#loc21 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":138:74)
#loc22 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":107:44)
#loc23 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":115:44)
#loc24 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc25 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc26 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":117:35)
#loc27 = loc("/usr/include/unistd.h":358:1)
#loc28 = loc("/usr/include/unistd.h":358:27)
#loc29 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":47:1)
#loc30 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":138:1)
#loc31 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":49:5)
#loc32 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":137:5)
#loc33 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":49:8)
#loc34 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":50:5)
#loc35 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":51:9)
#loc36 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":136:9)
#loc37 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":56:13)
#loc38 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":56:32)
#loc39 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":56:41)
#loc40 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":57:13)
#loc41 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":57:56)
#loc42 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":58:13)
#loc43 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":58:35)
#loc44 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":59:13)
#loc45 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":59:35)
#loc46 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":60:13)
#loc47 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":60:37)
#loc48 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":61:13)
#loc49 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":61:37)
#loc50 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":57:36)
#loc51 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":62:13)
#loc52 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":121:21)
#loc53 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":63:13)
#loc54 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":120:13)
#loc55 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":71:39)
#loc56 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":71:48)
#loc57 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":71:61)
#loc58 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":71:32)
#loc59 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":71:17)
#loc60 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":71:72)
#loc61 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":72:17)
#loc62 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":75:17)
#loc63 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":72:21)
#loc64 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":72:37)
#loc65 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":73:17)
#loc66 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":74:21)
#loc67 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":76:24)
#loc68 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":76:25)
#loc69 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":76:34)
#loc70 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":76:37)
#loc71 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":76:51)
#loc72 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":76:17)
#loc73 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":76:52)
#loc74 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":77:38)
#loc75 = loc("/usr/include/netinet/in.h":249:5)
#loc76 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":77:17)
#loc77 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":78:43)
#loc78 = loc("/usr/include/netinet/in.h":251:20)
#loc79 = loc("/usr/include/netinet/in.h":33:15)
#loc80 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":78:17)
#loc81 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":79:42)
#loc82 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":79:36)
#loc83 = loc("/usr/include/netinet/in.h":250:15)
#loc84 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":79:17)
#loc85 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":79:47)
#loc86 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":80:17)
#loc87 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":83:17)
#loc88 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":80:26)
#loc89 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":80:58)
#loc90 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":80:59)
#loc91 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":80:68)
#loc92 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":80:82)
#loc93 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":80:21)
#loc94 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":80:88)
#loc95 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":81:17)
#loc96 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":82:21)
#loc97 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":84:17)
#loc98 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":87:17)
#loc99 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":84:28)
#loc100 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":84:42)
#loc101 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":84:21)
#loc102 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":84:48)
#loc103 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":85:17)
#loc104 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":86:21)
#loc105 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":88:39)
#loc106 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":88:53)
#loc107 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":88:59)
#loc108 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":88:32)
#loc109 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":88:17)
#loc110 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":88:63)
#loc111 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":89:17)
#loc112 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":92:17)
#loc113 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":89:21)
#loc114 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":89:37)
#loc115 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":90:17)
#loc116 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":91:21)
#loc117 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":93:17)
#loc118 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":96:17)
#loc119 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":93:33)
#loc120 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":93:66)
#loc121 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":93:67)
#loc122 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":93:82)
#loc123 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":93:83)
#loc124 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":93:21)
#loc125 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":93:105)
#loc126 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":93:104)
#loc127 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":94:17)
#loc128 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":95:21)
#loc129 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":97:17)
#loc130 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":103:17)
#loc131 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":97:52)
#loc132 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":97:53)
#loc133 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":98:33)
#loc134 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":98:55)
#loc135 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":99:33)
#loc136 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":100:33)
#loc137 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":100:45)
#loc138 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":100:55)
#loc139 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":100:67)
#loc140 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":97:21)
#loc141 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":100:86)
#loc142 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":101:17)
#loc143 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":102:21)
#loc144 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":105:17)
#loc145 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":119:17)
#loc146 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":105:21)
#loc147 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":105:48)
#loc148 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":105:61)
#loc149 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":106:17)
#loc150 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":112:17)
#loc151 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":114:17)
#loc152 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":107:21)
#loc153 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":111:21)
#loc154 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":107:30)
#loc155 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":107:59)
#loc156 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":107:79)
#loc157 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":107:82)
#loc158 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":107:25)
#loc159 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":107:89)
#loc160 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":108:21)
#loc161 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":110:25)
#loc162 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":115:21)
#loc163 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":118:21)
#loc164 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":115:30)
#loc165 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":115:61)
#loc166 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":115:83)
#loc167 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":115:86)
#loc168 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":115:25)
#loc169 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":115:92)
#loc170 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":116:21)
#loc171 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":117:25)
#loc172 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":121:20)
#loc173 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":122:13)
#loc174 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":125:13)
#loc175 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":122:17)
#loc176 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":122:33)
#loc177 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":123:13)
#loc178 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":124:30)
#loc179 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":124:17)
#loc180 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":126:13)
#loc181 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":129:13)
#loc182 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":126:17)
#loc183 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":126:33)
#loc184 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":127:13)
#loc185 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":128:30)
#loc186 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":128:17)
#loc187 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":287:1)
#loc188 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":291:1)
#loc189 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":289:5)
#loc190 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":289:11)
#loc191 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":290:5)
#loc192 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":290:11)
#loc193 = loc("../../testcasesupport/std_testcase.h":110:1)
#loc194 = loc("../../testcasesupport/std_testcase.h":110:18)
#loc195 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":150:19)
#loc196 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":145:1)
#loc197 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":216:1)
#loc198 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":147:5)
#loc199 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":215:5)
#loc200 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":147:8)
#loc201 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":148:5)
#loc202 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":151:5)
#loc203 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":153:5)
#loc204 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":150:9)
#loc205 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":154:9)
#loc206 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":214:9)
#loc207 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":159:13)
#loc208 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":159:32)
#loc209 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":160:13)
#loc210 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":160:35)
#loc211 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":161:13)
#loc212 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":161:35)
#loc213 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":162:13)
#loc214 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":199:21)
#loc215 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":163:13)
#loc216 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":198:13)
#loc217 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":171:39)
#loc218 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":171:48)
#loc219 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":171:61)
#loc220 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":171:32)
#loc221 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":171:17)
#loc222 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":171:72)
#loc223 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":172:17)
#loc224 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":175:17)
#loc225 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":172:21)
#loc226 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":172:37)
#loc227 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":173:17)
#loc228 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":174:21)
#loc229 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":176:24)
#loc230 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":176:25)
#loc231 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":176:34)
#loc232 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":176:37)
#loc233 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":176:51)
#loc234 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":176:17)
#loc235 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":176:52)
#loc236 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":177:38)
#loc237 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":177:17)
#loc238 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":178:43)
#loc239 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":178:17)
#loc240 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":179:42)
#loc241 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":179:36)
#loc242 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":179:17)
#loc243 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":179:47)
#loc244 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":180:17)
#loc245 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":183:17)
#loc246 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":180:26)
#loc247 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":180:58)
#loc248 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":180:59)
#loc249 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":180:68)
#loc250 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":180:82)
#loc251 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":180:21)
#loc252 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":180:88)
#loc253 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":181:17)
#loc254 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":182:21)
#loc255 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":184:17)
#loc256 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":187:17)
#loc257 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":184:28)
#loc258 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":184:42)
#loc259 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":184:21)
#loc260 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":184:48)
#loc261 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":185:17)
#loc262 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":186:21)
#loc263 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":188:39)
#loc264 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":188:53)
#loc265 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":188:59)
#loc266 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":188:32)
#loc267 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":188:17)
#loc268 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":188:63)
#loc269 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":189:17)
#loc270 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":192:17)
#loc271 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":189:21)
#loc272 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":189:37)
#loc273 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":190:17)
#loc274 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":191:21)
#loc275 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":194:17)
#loc276 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":197:17)
#loc277 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":194:26)
#loc278 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":194:40)
#loc279 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":194:57)
#loc280 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":194:79)
#loc281 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":194:82)
#loc282 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":194:21)
#loc283 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":194:88)
#loc284 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":195:17)
#loc285 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":196:31)
#loc286 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":196:21)
#loc287 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":199:20)
#loc288 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":200:13)
#loc289 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":203:13)
#loc290 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":200:17)
#loc291 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":200:33)
#loc292 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":201:13)
#loc293 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":202:30)
#loc294 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":202:17)
#loc295 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":204:13)
#loc296 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":207:13)
#loc297 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":204:17)
#loc298 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":204:33)
#loc299 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":205:13)
#loc300 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":206:30)
#loc301 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":206:17)
#loc302 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":219:1)
#loc303 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":285:1)
#loc304 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":221:5)
#loc305 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":284:5)
#loc306 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":221:8)
#loc307 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":222:5)
#loc308 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":223:9)
#loc309 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":283:9)
#loc310 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":228:13)
#loc311 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":228:32)
#loc312 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":229:13)
#loc313 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":229:35)
#loc314 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":230:13)
#loc315 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":230:35)
#loc316 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":231:13)
#loc317 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":268:21)
#loc318 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":232:13)
#loc319 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":267:13)
#loc320 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":240:39)
#loc321 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":240:48)
#loc322 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":240:61)
#loc323 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":240:32)
#loc324 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":240:17)
#loc325 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":240:72)
#loc326 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":241:17)
#loc327 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":244:17)
#loc328 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":241:21)
#loc329 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":241:37)
#loc330 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":242:17)
#loc331 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":243:21)
#loc332 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":245:24)
#loc333 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":245:25)
#loc334 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":245:34)
#loc335 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":245:37)
#loc336 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":245:51)
#loc337 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":245:17)
#loc338 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":245:52)
#loc339 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":246:38)
#loc340 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":246:17)
#loc341 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":247:43)
#loc342 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":247:17)
#loc343 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":248:42)
#loc344 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":248:36)
#loc345 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":248:17)
#loc346 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":248:47)
#loc347 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":249:17)
#loc348 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":252:17)
#loc349 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":249:26)
#loc350 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":249:58)
#loc351 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":249:59)
#loc352 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":249:68)
#loc353 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":249:82)
#loc354 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":249:21)
#loc355 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":249:88)
#loc356 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":250:17)
#loc357 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":251:21)
#loc358 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":253:17)
#loc359 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":256:17)
#loc360 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":253:28)
#loc361 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":253:42)
#loc362 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":253:21)
#loc363 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":253:48)
#loc364 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":254:17)
#loc365 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":255:21)
#loc366 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":257:39)
#loc367 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":257:53)
#loc368 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":257:59)
#loc369 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":257:32)
#loc370 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":257:17)
#loc371 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":257:63)
#loc372 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":258:17)
#loc373 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":261:17)
#loc374 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":258:21)
#loc375 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":258:37)
#loc376 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":259:17)
#loc377 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":260:21)
#loc378 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":263:17)
#loc379 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":266:17)
#loc380 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":263:26)
#loc381 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":263:40)
#loc382 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":263:57)
#loc383 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":263:79)
#loc384 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":263:82)
#loc385 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":263:21)
#loc386 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":263:88)
#loc387 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":264:17)
#loc388 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":265:31)
#loc389 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":265:21)
#loc390 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":268:20)
#loc391 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":269:13)
#loc392 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":272:13)
#loc393 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":269:17)
#loc394 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":269:33)
#loc395 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":270:13)
#loc396 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":271:30)
#loc397 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":271:17)
#loc398 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":273:13)
#loc399 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":276:13)
#loc400 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":273:17)
#loc401 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":273:33)
#loc402 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":274:13)
#loc403 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":275:30)
#loc404 = loc("CWE510_Trapdoor__hostname_based_logic_09.c":275:17)
#loc405 = loc(fused[#loc1, #loc2])
#loc406 = loc(fused[#loc3, #loc4])
#loc407 = loc(fused[#loc5, #loc6])
#loc408 = loc(fused[#loc7, #loc8])
#loc409 = loc(fused[#loc9, #loc10])
#loc410 = loc(fused[#loc11, #loc12])
#loc411 = loc(fused[#loc13, #loc14])
#loc412 = loc(fused[#loc15, #loc16])
#loc413 = loc(fused[#loc17, #loc18])
#loc414 = loc(fused[#loc20, #loc21])
#loc415 = loc(fused[#loc24, #loc25])
#loc416 = loc(fused[#loc27, #loc28])
#loc417 = loc(fused[#loc29, #loc30])
#loc418 = loc(fused[#loc31, #loc32])
#loc419 = loc(fused[#loc34, #loc32])
#loc420 = loc(fused[#loc35, #loc36])
#loc421 = loc(fused[#loc37, #loc38])
#loc422 = loc(fused[#loc37, #loc39])
#loc423 = loc(fused[#loc40, #loc41])
#loc424 = loc(fused[#loc42, #loc43])
#loc425 = loc(fused[#loc44, #loc45])
#loc426 = loc(fused[#loc46, #loc47])
#loc427 = loc(fused[#loc48, #loc49])
#loc428 = loc(fused[#loc50, #loc41])
#loc429 = loc(fused[#loc51, #loc52])
#loc430 = loc(fused[#loc53, #loc54])
#loc431 = loc(fused[#loc59, #loc60])
#loc432 = loc(fused[#loc61, #loc62])
#loc433 = loc(fused[#loc63, #loc64])
#loc434 = loc(fused[#loc65, #loc62])
#loc435 = loc(fused[#loc67, #loc68])
#loc436 = loc(fused[#loc70, #loc71])
#loc437 = loc(fused[#loc72, #loc73])
#loc438 = loc(fused[#loc76, #loc74])
#loc439 = loc(fused[#loc80, #loc77])
#loc440 = loc(fused[#loc84, #loc85])
#loc441 = loc(fused[#loc86, #loc87])
#loc442 = loc(fused[#loc89, #loc90])
#loc443 = loc(fused[#loc91, #loc92])
#loc444 = loc(fused[#loc93, #loc94])
#loc445 = loc(fused[#loc95, #loc87])
#loc446 = loc(fused[#loc97, #loc98])
#loc447 = loc(fused[#loc101, #loc102])
#loc448 = loc(fused[#loc103, #loc98])
#loc449 = loc(fused[#loc109, #loc110])
#loc450 = loc(fused[#loc111, #loc112])
#loc451 = loc(fused[#loc113, #loc114])
#loc452 = loc(fused[#loc115, #loc112])
#loc453 = loc(fused[#loc117, #loc118])
#loc454 = loc(fused[#loc120, #loc121])
#loc455 = loc(fused[#loc122, #loc123])
#loc456 = loc(fused[#loc124, #loc125])
#loc457 = loc(fused[#loc127, #loc118])
#loc458 = loc(fused[#loc129, #loc130])
#loc459 = loc(fused[#loc131, #loc132])
#loc460 = loc(fused[#loc133, #loc134])
#loc461 = loc(fused[#loc140, #loc141])
#loc462 = loc(fused[#loc142, #loc130])
#loc463 = loc(fused[#loc144, #loc145])
#loc464 = loc(fused[#loc146, #loc148])
#loc465 = loc(fused[#loc149, #loc150, #loc151, #loc145])
#loc466 = loc(fused[#loc152, #loc153])
#loc467 = loc(fused[#loc155, #loc156])
#loc468 = loc(fused[#loc158, #loc159])
#loc469 = loc(fused[#loc160, #loc153])
#loc470 = loc(fused[#loc162, #loc163])
#loc471 = loc(fused[#loc165, #loc166])
#loc472 = loc(fused[#loc168, #loc169])
#loc473 = loc(fused[#loc170, #loc163])
#loc474 = loc(fused[#loc173, #loc174])
#loc475 = loc(fused[#loc175, #loc176])
#loc476 = loc(fused[#loc177, #loc174])
#loc477 = loc(fused[#loc180, #loc181])
#loc478 = loc(fused[#loc182, #loc183])
#loc479 = loc(fused[#loc184, #loc181])
#loc480 = loc(fused[#loc187, #loc188])
#loc481 = loc(fused[#loc189, #loc190])
#loc482 = loc(fused[#loc191, #loc192])
#loc483 = loc(fused[#loc193, #loc194])
#loc484 = loc(fused[#loc196, #loc197])
#loc485 = loc(fused[#loc198, #loc199])
#loc486 = loc(fused[#loc201, #loc202, #loc203, #loc199])
#loc487 = loc(fused[#loc205, #loc206])
#loc488 = loc(fused[#loc207, #loc208])
#loc489 = loc(fused[#loc209, #loc210])
#loc490 = loc(fused[#loc211, #loc212])
#loc491 = loc(fused[#loc213, #loc214])
#loc492 = loc(fused[#loc215, #loc216])
#loc493 = loc(fused[#loc221, #loc222])
#loc494 = loc(fused[#loc223, #loc224])
#loc495 = loc(fused[#loc225, #loc226])
#loc496 = loc(fused[#loc227, #loc224])
#loc497 = loc(fused[#loc229, #loc230])
#loc498 = loc(fused[#loc232, #loc233])
#loc499 = loc(fused[#loc234, #loc235])
#loc500 = loc(fused[#loc237, #loc236])
#loc501 = loc(fused[#loc239, #loc238])
#loc502 = loc(fused[#loc242, #loc243])
#loc503 = loc(fused[#loc244, #loc245])
#loc504 = loc(fused[#loc247, #loc248])
#loc505 = loc(fused[#loc249, #loc250])
#loc506 = loc(fused[#loc251, #loc252])
#loc507 = loc(fused[#loc253, #loc245])
#loc508 = loc(fused[#loc255, #loc256])
#loc509 = loc(fused[#loc259, #loc260])
#loc510 = loc(fused[#loc261, #loc256])
#loc511 = loc(fused[#loc267, #loc268])
#loc512 = loc(fused[#loc269, #loc270])
#loc513 = loc(fused[#loc271, #loc272])
#loc514 = loc(fused[#loc273, #loc270])
#loc515 = loc(fused[#loc275, #loc276])
#loc516 = loc(fused[#loc279, #loc280])
#loc517 = loc(fused[#loc282, #loc283])
#loc518 = loc(fused[#loc284, #loc276])
#loc519 = loc(fused[#loc288, #loc289])
#loc520 = loc(fused[#loc290, #loc291])
#loc521 = loc(fused[#loc292, #loc289])
#loc522 = loc(fused[#loc295, #loc296])
#loc523 = loc(fused[#loc297, #loc298])
#loc524 = loc(fused[#loc299, #loc296])
#loc525 = loc(fused[#loc302, #loc303])
#loc526 = loc(fused[#loc304, #loc305])
#loc527 = loc(fused[#loc307, #loc305])
#loc528 = loc(fused[#loc308, #loc309])
#loc529 = loc(fused[#loc310, #loc311])
#loc530 = loc(fused[#loc312, #loc313])
#loc531 = loc(fused[#loc314, #loc315])
#loc532 = loc(fused[#loc316, #loc317])
#loc533 = loc(fused[#loc318, #loc319])
#loc534 = loc(fused[#loc324, #loc325])
#loc535 = loc(fused[#loc326, #loc327])
#loc536 = loc(fused[#loc328, #loc329])
#loc537 = loc(fused[#loc330, #loc327])
#loc538 = loc(fused[#loc332, #loc333])
#loc539 = loc(fused[#loc335, #loc336])
#loc540 = loc(fused[#loc337, #loc338])
#loc541 = loc(fused[#loc340, #loc339])
#loc542 = loc(fused[#loc342, #loc341])
#loc543 = loc(fused[#loc345, #loc346])
#loc544 = loc(fused[#loc347, #loc348])
#loc545 = loc(fused[#loc350, #loc351])
#loc546 = loc(fused[#loc352, #loc353])
#loc547 = loc(fused[#loc354, #loc355])
#loc548 = loc(fused[#loc356, #loc348])
#loc549 = loc(fused[#loc358, #loc359])
#loc550 = loc(fused[#loc362, #loc363])
#loc551 = loc(fused[#loc364, #loc359])
#loc552 = loc(fused[#loc370, #loc371])
#loc553 = loc(fused[#loc372, #loc373])
#loc554 = loc(fused[#loc374, #loc375])
#loc555 = loc(fused[#loc376, #loc373])
#loc556 = loc(fused[#loc378, #loc379])
#loc557 = loc(fused[#loc382, #loc383])
#loc558 = loc(fused[#loc385, #loc386])
#loc559 = loc(fused[#loc387, #loc379])
#loc560 = loc(fused[#loc391, #loc392])
#loc561 = loc(fused[#loc393, #loc394])
#loc562 = loc(fused[#loc395, #loc392])
#loc563 = loc(fused[#loc398, #loc399])
#loc564 = loc(fused[#loc400, #loc401])
#loc565 = loc(fused[#loc402, #loc399])
