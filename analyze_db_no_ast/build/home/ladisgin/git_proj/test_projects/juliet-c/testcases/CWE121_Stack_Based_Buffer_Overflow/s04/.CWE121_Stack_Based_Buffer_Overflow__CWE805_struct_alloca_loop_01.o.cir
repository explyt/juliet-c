!s32i = !cir.int<s, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
!ty__twoIntsStruct = !cir.struct<struct "_twoIntsStruct" {!s32i, !s32i} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s04/CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_01.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @printStructLine(!cir.ptr<!ty__twoIntsStruct>) loc(#loc123)
  cir.func no_proto  @CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_01_bad() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["data"] {alignment = 8 : i64} loc(#loc125)
    %1 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc126)
    %2 = cir.const #cir.int<50> : !s32i loc(#loc8)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc8)
    %4 = cir.const #cir.int<8> : !u64i loc(#loc8)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc8)
    %6 = cir.alloca !u8i, !cir.ptr<!u8i>, %5 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc8)
    %7 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc127)
    %8 = cir.cast(bitcast, %6 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc8)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!ty__twoIntsStruct> loc(#loc8)
    cir.store %9, %1 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc126)
    %10 = cir.const #cir.int<100> : !s32i loc(#loc10)
    %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc10)
    %12 = cir.const #cir.int<8> : !u64i loc(#loc10)
    %13 = cir.binop(mul, %11, %12) : !u64i loc(#loc10)
    %14 = cir.alloca !u8i, !cir.ptr<!u8i>, %13 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc10)
    %15 = cir.cast(bitcast, %14 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc10)
    %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!ty__twoIntsStruct> loc(#loc10)
    cir.store %16, %7 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc127)
    %17 = cir.load %1 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc11)
    cir.store %17, %0 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc128)
    cir.scope {
      %18 = cir.alloca !cir.array<!ty__twoIntsStruct x 100>, !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>, ["source"] {alignment = 16 : i64} loc(#loc130)
      cir.scope {
        %19 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc132)
        cir.scope {
          %20 = cir.const #cir.int<0> : !s32i loc(#loc23)
          %21 = cir.cast(integral, %20 : !s32i), !u64i loc(#loc23)
          cir.store %21, %19 : !u64i, !cir.ptr<!u64i> loc(#loc134)
          cir.for : cond {
            %22 = cir.load %19 : !cir.ptr<!u64i>, !u64i loc(#loc25)
            %23 = cir.const #cir.int<100> : !s32i loc(#loc26)
            %24 = cir.cast(integral, %23 : !s32i), !u64i loc(#loc26)
            %25 = cir.cmp(lt, %22, %24) : !u64i, !s32i loc(#loc135)
            %26 = cir.cast(int_to_bool, %25 : !s32i), !cir.bool loc(#loc27)
            cir.condition(%26) loc(#loc27)
          } body {
            cir.scope {
              %22 = cir.const #cir.int<0> : !s32i loc(#loc29)
              %23 = cir.load %19 : !cir.ptr<!u64i>, !u64i loc(#loc30)
              %24 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc31)
              %25 = cir.ptr_stride(%24 : !cir.ptr<!ty__twoIntsStruct>, %23 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc31)
              %26 = cir.get_member %25[0] {name = "intOne"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc32)
              cir.store %22, %26 : !s32i, !cir.ptr<!s32i> loc(#loc137)
              %27 = cir.const #cir.int<0> : !s32i loc(#loc33)
              %28 = cir.load %19 : !cir.ptr<!u64i>, !u64i loc(#loc34)
              %29 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc35)
              %30 = cir.ptr_stride(%29 : !cir.ptr<!ty__twoIntsStruct>, %28 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc35)
              %31 = cir.get_member %30[1] {name = "intTwo"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc36)
              cir.store %27, %31 : !s32i, !cir.ptr<!s32i> loc(#loc138)
            } loc(#loc136)
            cir.yield loc(#loc22)
          } step {
            %22 = cir.load %19 : !cir.ptr<!u64i>, !u64i loc(#loc37)
            %23 = cir.unary(inc, %22) : !u64i, !u64i loc(#loc38)
            cir.store %23, %19 : !u64i, !cir.ptr<!u64i> loc(#loc139)
            cir.yield loc(#loc133)
          } loc(#loc133)
        } loc(#loc133)
      } loc(#loc131)
      cir.scope {
        %19 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc141)
        cir.scope {
          %23 = cir.const #cir.int<0> : !s32i loc(#loc45)
          %24 = cir.cast(integral, %23 : !s32i), !u64i loc(#loc45)
          cir.store %24, %19 : !u64i, !cir.ptr<!u64i> loc(#loc143)
          cir.for : cond {
            %25 = cir.load %19 : !cir.ptr<!u64i>, !u64i loc(#loc47)
            %26 = cir.const #cir.int<100> : !s32i loc(#loc48)
            %27 = cir.cast(integral, %26 : !s32i), !u64i loc(#loc48)
            %28 = cir.cmp(lt, %25, %27) : !u64i, !s32i loc(#loc144)
            %29 = cir.cast(int_to_bool, %28 : !s32i), !cir.bool loc(#loc49)
            cir.condition(%29) loc(#loc49)
          } body {
            cir.scope {
              %25 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc51)
              %26 = cir.load %19 : !cir.ptr<!u64i>, !u64i loc(#loc52)
              %27 = cir.ptr_stride(%25 : !cir.ptr<!ty__twoIntsStruct>, %26 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc53)
              %28 = cir.load %19 : !cir.ptr<!u64i>, !u64i loc(#loc54)
              %29 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc55)
              %30 = cir.ptr_stride(%29 : !cir.ptr<!ty__twoIntsStruct>, %28 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc55)
              cir.copy %30 to %27 : !cir.ptr<!ty__twoIntsStruct> loc(#loc53)
            } loc(#loc145)
            cir.yield loc(#loc44)
          } step {
            %25 = cir.load %19 : !cir.ptr<!u64i>, !u64i loc(#loc56)
            %26 = cir.unary(inc, %25) : !u64i, !u64i loc(#loc57)
            cir.store %26, %19 : !u64i, !cir.ptr<!u64i> loc(#loc146)
            cir.yield loc(#loc142)
          } loc(#loc142)
        } loc(#loc142)
        %20 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc58)
        %21 = cir.const #cir.int<0> : !s32i loc(#loc59)
        %22 = cir.ptr_stride(%20 : !cir.ptr<!ty__twoIntsStruct>, %21 : !s32i), !cir.ptr<!ty__twoIntsStruct> loc(#loc60)
        cir.call @printStructLine(%22) : (!cir.ptr<!ty__twoIntsStruct>) -> () loc(#loc61)
      } loc(#loc140)
    } loc(#loc129)
    cir.return loc(#loc4)
  } loc(#loc124)
  cir.func no_proto  @CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_01_good() extra(#fn_attr) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc148)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc64)
    cir.return loc(#loc63)
  } loc(#loc147)
  cir.func no_proto internal private  @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["data"] {alignment = 8 : i64} loc(#loc150)
    %1 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc151)
    %2 = cir.const #cir.int<50> : !s32i loc(#loc71)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc71)
    %4 = cir.const #cir.int<8> : !u64i loc(#loc71)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc71)
    %6 = cir.alloca !u8i, !cir.ptr<!u8i>, %5 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc71)
    %7 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc152)
    %8 = cir.cast(bitcast, %6 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc71)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!ty__twoIntsStruct> loc(#loc71)
    cir.store %9, %1 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc151)
    %10 = cir.const #cir.int<100> : !s32i loc(#loc73)
    %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc73)
    %12 = cir.const #cir.int<8> : !u64i loc(#loc73)
    %13 = cir.binop(mul, %11, %12) : !u64i loc(#loc73)
    %14 = cir.alloca !u8i, !cir.ptr<!u8i>, %13 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc73)
    %15 = cir.cast(bitcast, %14 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc73)
    %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!ty__twoIntsStruct> loc(#loc73)
    cir.store %16, %7 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc152)
    %17 = cir.load %7 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc74)
    cir.store %17, %0 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc153)
    cir.scope {
      %18 = cir.alloca !cir.array<!ty__twoIntsStruct x 100>, !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>, ["source"] {alignment = 16 : i64} loc(#loc155)
      cir.scope {
        %19 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc157)
        cir.scope {
          %20 = cir.const #cir.int<0> : !s32i loc(#loc86)
          %21 = cir.cast(integral, %20 : !s32i), !u64i loc(#loc86)
          cir.store %21, %19 : !u64i, !cir.ptr<!u64i> loc(#loc159)
          cir.for : cond {
            %22 = cir.load %19 : !cir.ptr<!u64i>, !u64i loc(#loc88)
            %23 = cir.const #cir.int<100> : !s32i loc(#loc89)
            %24 = cir.cast(integral, %23 : !s32i), !u64i loc(#loc89)
            %25 = cir.cmp(lt, %22, %24) : !u64i, !s32i loc(#loc160)
            %26 = cir.cast(int_to_bool, %25 : !s32i), !cir.bool loc(#loc90)
            cir.condition(%26) loc(#loc90)
          } body {
            cir.scope {
              %22 = cir.const #cir.int<0> : !s32i loc(#loc92)
              %23 = cir.load %19 : !cir.ptr<!u64i>, !u64i loc(#loc93)
              %24 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc94)
              %25 = cir.ptr_stride(%24 : !cir.ptr<!ty__twoIntsStruct>, %23 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc94)
              %26 = cir.get_member %25[0] {name = "intOne"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc32)
              cir.store %22, %26 : !s32i, !cir.ptr<!s32i> loc(#loc162)
              %27 = cir.const #cir.int<0> : !s32i loc(#loc95)
              %28 = cir.load %19 : !cir.ptr<!u64i>, !u64i loc(#loc96)
              %29 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc97)
              %30 = cir.ptr_stride(%29 : !cir.ptr<!ty__twoIntsStruct>, %28 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc97)
              %31 = cir.get_member %30[1] {name = "intTwo"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc36)
              cir.store %27, %31 : !s32i, !cir.ptr<!s32i> loc(#loc163)
            } loc(#loc161)
            cir.yield loc(#loc85)
          } step {
            %22 = cir.load %19 : !cir.ptr<!u64i>, !u64i loc(#loc98)
            %23 = cir.unary(inc, %22) : !u64i, !u64i loc(#loc99)
            cir.store %23, %19 : !u64i, !cir.ptr<!u64i> loc(#loc164)
            cir.yield loc(#loc158)
          } loc(#loc158)
        } loc(#loc158)
      } loc(#loc156)
      cir.scope {
        %19 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc166)
        cir.scope {
          %23 = cir.const #cir.int<0> : !s32i loc(#loc106)
          %24 = cir.cast(integral, %23 : !s32i), !u64i loc(#loc106)
          cir.store %24, %19 : !u64i, !cir.ptr<!u64i> loc(#loc168)
          cir.for : cond {
            %25 = cir.load %19 : !cir.ptr<!u64i>, !u64i loc(#loc108)
            %26 = cir.const #cir.int<100> : !s32i loc(#loc109)
            %27 = cir.cast(integral, %26 : !s32i), !u64i loc(#loc109)
            %28 = cir.cmp(lt, %25, %27) : !u64i, !s32i loc(#loc169)
            %29 = cir.cast(int_to_bool, %28 : !s32i), !cir.bool loc(#loc110)
            cir.condition(%29) loc(#loc110)
          } body {
            cir.scope {
              %25 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc112)
              %26 = cir.load %19 : !cir.ptr<!u64i>, !u64i loc(#loc113)
              %27 = cir.ptr_stride(%25 : !cir.ptr<!ty__twoIntsStruct>, %26 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc114)
              %28 = cir.load %19 : !cir.ptr<!u64i>, !u64i loc(#loc115)
              %29 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc116)
              %30 = cir.ptr_stride(%29 : !cir.ptr<!ty__twoIntsStruct>, %28 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc116)
              cir.copy %30 to %27 : !cir.ptr<!ty__twoIntsStruct> loc(#loc114)
            } loc(#loc170)
            cir.yield loc(#loc105)
          } step {
            %25 = cir.load %19 : !cir.ptr<!u64i>, !u64i loc(#loc117)
            %26 = cir.unary(inc, %25) : !u64i, !u64i loc(#loc118)
            cir.store %26, %19 : !u64i, !cir.ptr<!u64i> loc(#loc171)
            cir.yield loc(#loc167)
          } loc(#loc167)
        } loc(#loc167)
        %20 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc119)
        %21 = cir.const #cir.int<0> : !s32i loc(#loc120)
        %22 = cir.ptr_stride(%20 : !cir.ptr<!ty__twoIntsStruct>, %21 : !s32i), !cir.ptr<!ty__twoIntsStruct> loc(#loc121)
        cir.call @printStructLine(%22) : (!cir.ptr<!ty__twoIntsStruct>) -> () loc(#loc122)
      } loc(#loc165)
    } loc(#loc154)
    cir.return loc(#loc67)
  } loc(#loc149)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s04/CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_01.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":40:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":40:63)
#loc3 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_01.c":21:1)
#loc4 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_01.c":50:1)
#loc5 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_01.c":23:5)
#loc6 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_01.c":23:21)
#loc7 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_01.c":24:5)
#loc8 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_01.c":24:54)
#loc9 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_01.c":25:5)
#loc10 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_01.c":25:55)
#loc11 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_01.c":28:12)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_01.c":28:5)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_01.c":29:5)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_01.c":49:5)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_01.c":30:9)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_01.c":30:33)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_01.c":31:9)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_01.c":39:9)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_01.c":32:13)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_01.c":32:20)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_01.c":34:13)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_01.c":38:13)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_01.c":34:22)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_01.c":34:18)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_01.c":34:25)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_01.c":34:29)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_01.c":34:27)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_01.c":35:13)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_01.c":36:36)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_01.c":36:24)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_01.c":36:17)
#loc32 = loc("../../../testcasesupport/std_testcase.h":98:9)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_01.c":37:36)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_01.c":37:24)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_01.c":37:17)
#loc36 = loc("../../../testcasesupport/std_testcase.h":99:9)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_01.c":34:35)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_01.c":34:34)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_01.c":40:9)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_01.c":48:9)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_01.c":41:13)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_01.c":41:20)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_01.c":43:13)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_01.c":46:13)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_01.c":43:22)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_01.c":43:18)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_01.c":43:25)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_01.c":43:29)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_01.c":43:27)
#loc50 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_01.c":44:13)
#loc51 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_01.c":45:17)
#loc52 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_01.c":45:22)
#loc53 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_01.c":45:23)
#loc54 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_01.c":45:34)
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_01.c":45:27)
#loc56 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_01.c":43:35)
#loc57 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_01.c":43:34)
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_01.c":47:30)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_01.c":47:35)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_01.c":47:36)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_01.c":47:13)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_01.c":87:1)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_01.c":90:1)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_01.c":89:5)
#loc65 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_01.c":89:13)
#loc66 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_01.c":57:1)
#loc67 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_01.c":85:1)
#loc68 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_01.c":59:5)
#loc69 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_01.c":59:21)
#loc70 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_01.c":60:5)
#loc71 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_01.c":60:54)
#loc72 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_01.c":61:5)
#loc73 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_01.c":61:55)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_01.c":63:12)
#loc75 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_01.c":63:5)
#loc76 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_01.c":64:5)
#loc77 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_01.c":84:5)
#loc78 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_01.c":65:9)
#loc79 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_01.c":65:33)
#loc80 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_01.c":66:9)
#loc81 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_01.c":74:9)
#loc82 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_01.c":67:13)
#loc83 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_01.c":67:20)
#loc84 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_01.c":69:13)
#loc85 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_01.c":73:13)
#loc86 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_01.c":69:22)
#loc87 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_01.c":69:18)
#loc88 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_01.c":69:25)
#loc89 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_01.c":69:29)
#loc90 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_01.c":69:27)
#loc91 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_01.c":70:13)
#loc92 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_01.c":71:36)
#loc93 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_01.c":71:24)
#loc94 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_01.c":71:17)
#loc95 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_01.c":72:36)
#loc96 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_01.c":72:24)
#loc97 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_01.c":72:17)
#loc98 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_01.c":69:35)
#loc99 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_01.c":69:34)
#loc100 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_01.c":75:9)
#loc101 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_01.c":83:9)
#loc102 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_01.c":76:13)
#loc103 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_01.c":76:20)
#loc104 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_01.c":78:13)
#loc105 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_01.c":81:13)
#loc106 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_01.c":78:22)
#loc107 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_01.c":78:18)
#loc108 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_01.c":78:25)
#loc109 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_01.c":78:29)
#loc110 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_01.c":78:27)
#loc111 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_01.c":79:13)
#loc112 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_01.c":80:17)
#loc113 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_01.c":80:22)
#loc114 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_01.c":80:23)
#loc115 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_01.c":80:34)
#loc116 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_01.c":80:27)
#loc117 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_01.c":78:35)
#loc118 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_01.c":78:34)
#loc119 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_01.c":82:30)
#loc120 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_01.c":82:35)
#loc121 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_01.c":82:36)
#loc122 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_01.c":82:13)
#loc123 = loc(fused[#loc1, #loc2])
#loc124 = loc(fused[#loc3, #loc4])
#loc125 = loc(fused[#loc5, #loc6])
#loc126 = loc(fused[#loc7, #loc8])
#loc127 = loc(fused[#loc9, #loc10])
#loc128 = loc(fused[#loc12, #loc11])
#loc129 = loc(fused[#loc13, #loc14])
#loc130 = loc(fused[#loc15, #loc16])
#loc131 = loc(fused[#loc17, #loc18])
#loc132 = loc(fused[#loc19, #loc20])
#loc133 = loc(fused[#loc21, #loc22])
#loc134 = loc(fused[#loc24, #loc23])
#loc135 = loc(fused[#loc25, #loc26])
#loc136 = loc(fused[#loc28, #loc22])
#loc137 = loc(fused[#loc31, #loc29])
#loc138 = loc(fused[#loc35, #loc33])
#loc139 = loc(fused[#loc38, #loc37])
#loc140 = loc(fused[#loc39, #loc40])
#loc141 = loc(fused[#loc41, #loc42])
#loc142 = loc(fused[#loc43, #loc44])
#loc143 = loc(fused[#loc46, #loc45])
#loc144 = loc(fused[#loc47, #loc48])
#loc145 = loc(fused[#loc50, #loc44])
#loc146 = loc(fused[#loc57, #loc56])
#loc147 = loc(fused[#loc62, #loc63])
#loc148 = loc(fused[#loc64, #loc65])
#loc149 = loc(fused[#loc66, #loc67])
#loc150 = loc(fused[#loc68, #loc69])
#loc151 = loc(fused[#loc70, #loc71])
#loc152 = loc(fused[#loc72, #loc73])
#loc153 = loc(fused[#loc75, #loc74])
#loc154 = loc(fused[#loc76, #loc77])
#loc155 = loc(fused[#loc78, #loc79])
#loc156 = loc(fused[#loc80, #loc81])
#loc157 = loc(fused[#loc82, #loc83])
#loc158 = loc(fused[#loc84, #loc85])
#loc159 = loc(fused[#loc87, #loc86])
#loc160 = loc(fused[#loc88, #loc89])
#loc161 = loc(fused[#loc91, #loc85])
#loc162 = loc(fused[#loc94, #loc92])
#loc163 = loc(fused[#loc97, #loc95])
#loc164 = loc(fused[#loc99, #loc98])
#loc165 = loc(fused[#loc100, #loc101])
#loc166 = loc(fused[#loc102, #loc103])
#loc167 = loc(fused[#loc104, #loc105])
#loc168 = loc(fused[#loc107, #loc106])
#loc169 = loc(fused[#loc108, #loc109])
#loc170 = loc(fused[#loc111, #loc105])
#loc171 = loc(fused[#loc118, #loc117])
