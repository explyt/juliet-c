!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":27:59)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":27:66)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":53:64)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":53:71)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":75:64)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":75:71)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":92:63)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":92:70)
#loc186 = loc(fused[#loc17, #loc18])
#loc201 = loc(fused[#loc61, #loc62])
#loc214 = loc(fused[#loc103, #loc104])
#loc228 = loc(fused[#loc144, #loc145])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.global "private" external @CWE122_Heap_Based_Buffer_Overflow__CWE135_22_badGlobal : !s32i {alignment = 4 : i64} loc(#loc178)
  cir.func private @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc179)
  cir.func private @calloc(!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc180)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc181)
  cir.func private @wcscpy(!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc182)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc183)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc184)
  cir.func @CWE122_Heap_Based_Buffer_Overflow__CWE135_22_badSink(%arg0: !cir.ptr<!void> loc(fused[#loc17, #loc18])) extra(#fn_attr1) {
    %0 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc187)
    %1 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc188)
    %2 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data", init] {alignment = 8 : i64} loc(#loc186)
    cir.store %arg0, %2 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc23)
    cir.br ^bb1 loc(#loc189)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__CWE135_22_badGlobal : !cir.ptr<!s32i> loc(#loc178)
    %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc26)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc26)
    cir.brcond %5 ^bb2, ^bb9 loc(#loc190)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc191)
  ^bb3:  // pred: ^bb2
    %6 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc30)
    %7 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc31)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc31)
    %9 = cir.call @strlen(%8) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc30)
    cir.store %9, %0 : !u64i, !cir.ptr<!u64i> loc(#loc187)
    %10 = cir.get_global @calloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i, !u64i)>> loc(#loc32)
    %11 = cir.load %0 : !cir.ptr<!u64i>, !u64i loc(#loc33)
    %12 = cir.const #cir.int<1> : !s32i loc(#loc34)
    %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc34)
    %14 = cir.binop(add, %11, %13) : !u64i loc(#loc192)
    %15 = cir.const #cir.int<4> : !u64i loc(#loc193)
    %16 = cir.call @calloc(%14, %15) : (!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc32)
    cir.store %16, %1 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc188)
    cir.br ^bb4 loc(#loc194)
  ^bb4:  // pred: ^bb3
    %17 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc39)
    %18 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc40)
    %19 = cir.cmp(eq, %17, %18) : !cir.ptr<!void>, !cir.bool loc(#loc195)
    cir.brcond %19 ^bb5, ^bb6 loc(#loc196)
  ^bb5:  // pred: ^bb4
    %20 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc42)
    %21 = cir.const #cir.int<1> : !s32i loc(#loc43)
    %22 = cir.unary(minus, %21) : !s32i, !s32i loc(#loc44)
    cir.call @exit(%22) : (!s32i) -> () extra(#fn_attr) loc(#loc42)
    cir.br ^bb6 loc(#loc38)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc38)
  ^bb7:  // pred: ^bb6
    %23 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc45)
    %24 = cir.cast(bitcast, %23 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc45)
    %25 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc46)
    %26 = cir.cast(bitcast, %25 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc46)
    %27 = cir.call @wcscpy(%24, %26) : (!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc47)
    %28 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc48)
    %29 = cir.cast(bitcast, %28 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc48)
    cir.call @printLine(%29) : (!cir.ptr<!s8i>) -> () loc(#loc49)
    %30 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc50)
    cir.call @free(%30) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc51)
    cir.br ^bb8 loc(#loc29)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc25)
  ^bb9:  // 2 preds: ^bb1, ^bb8
    cir.br ^bb10 loc(#loc25)
  ^bb10:  // pred: ^bb9
    cir.return loc(#loc16)
  } loc(#loc185)
  cir.global "private" external @CWE122_Heap_Based_Buffer_Overflow__CWE135_22_goodB2G1Global : !s32i {alignment = 4 : i64} loc(#loc197)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc54)
  cir.func private @wcslen(!cir.ptr<!s32i>) -> !u64i extra(#fn_attr) loc(#loc198)
  cir.func private @printWLine(!cir.ptr<!s32i>) loc(#loc199)
  cir.func @CWE122_Heap_Based_Buffer_Overflow__CWE135_22_goodB2G1Sink(%arg0: !cir.ptr<!void> loc(fused[#loc61, #loc62])) extra(#fn_attr1) {
    %0 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc202)
    %1 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc203)
    %2 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data", init] {alignment = 8 : i64} loc(#loc201)
    cir.store %arg0, %2 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc67)
    cir.br ^bb1 loc(#loc204)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__CWE135_22_goodB2G1Global : !cir.ptr<!s32i> loc(#loc197)
    %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc70)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc70)
    cir.brcond %5 ^bb2, ^bb3 loc(#loc205)
  ^bb2:  // pred: ^bb1
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc54)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc54)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc74)
    cir.br ^bb10 loc(#loc72)
  ^bb3:  // pred: ^bb1
    cir.br ^bb4 loc(#loc206)
  ^bb4:  // pred: ^bb3
    %8 = cir.get_global @wcslen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s32i>)>> loc(#loc77)
    %9 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc78)
    %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc78)
    %11 = cir.call @wcslen(%10) : (!cir.ptr<!s32i>) -> !u64i extra(#fn_attr) loc(#loc77)
    cir.store %11, %0 : !u64i, !cir.ptr<!u64i> loc(#loc202)
    %12 = cir.get_global @calloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i, !u64i)>> loc(#loc79)
    %13 = cir.load %0 : !cir.ptr<!u64i>, !u64i loc(#loc80)
    %14 = cir.const #cir.int<1> : !s32i loc(#loc81)
    %15 = cir.cast(integral, %14 : !s32i), !u64i loc(#loc81)
    %16 = cir.binop(add, %13, %15) : !u64i loc(#loc207)
    %17 = cir.const #cir.int<4> : !u64i loc(#loc208)
    %18 = cir.call @calloc(%16, %17) : (!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc79)
    cir.store %18, %1 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc203)
    cir.br ^bb5 loc(#loc209)
  ^bb5:  // pred: ^bb4
    %19 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc86)
    %20 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc87)
    %21 = cir.cmp(eq, %19, %20) : !cir.ptr<!void>, !cir.bool loc(#loc210)
    cir.brcond %21 ^bb6, ^bb7 loc(#loc211)
  ^bb6:  // pred: ^bb5
    %22 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc89)
    %23 = cir.const #cir.int<1> : !s32i loc(#loc90)
    %24 = cir.unary(minus, %23) : !s32i, !s32i loc(#loc91)
    cir.call @exit(%24) : (!s32i) -> () extra(#fn_attr) loc(#loc89)
    cir.br ^bb7 loc(#loc85)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc85)
  ^bb8:  // pred: ^bb7
    %25 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc92)
    %26 = cir.cast(bitcast, %25 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc92)
    %27 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc93)
    %28 = cir.cast(bitcast, %27 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc93)
    %29 = cir.call @wcscpy(%26, %28) : (!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc94)
    %30 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc95)
    %31 = cir.cast(bitcast, %30 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc95)
    cir.call @printWLine(%31) : (!cir.ptr<!s32i>) -> () loc(#loc96)
    %32 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc97)
    cir.call @free(%32) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc98)
    cir.br ^bb9 loc(#loc76)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc69)
  ^bb10:  // 2 preds: ^bb2, ^bb9
    cir.br ^bb11 loc(#loc69)
  ^bb11:  // pred: ^bb10
    cir.return loc(#loc60)
  } loc(#loc200)
  cir.global "private" external @CWE122_Heap_Based_Buffer_Overflow__CWE135_22_goodB2G2Global : !s32i {alignment = 4 : i64} loc(#loc212)
  cir.func @CWE122_Heap_Based_Buffer_Overflow__CWE135_22_goodB2G2Sink(%arg0: !cir.ptr<!void> loc(fused[#loc103, #loc104])) extra(#fn_attr1) {
    %0 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc215)
    %1 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc216)
    %2 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data", init] {alignment = 8 : i64} loc(#loc214)
    cir.store %arg0, %2 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc109)
    cir.br ^bb1 loc(#loc217)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__CWE135_22_goodB2G2Global : !cir.ptr<!s32i> loc(#loc212)
    %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc112)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc112)
    cir.brcond %5 ^bb2, ^bb9 loc(#loc218)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc219)
  ^bb3:  // pred: ^bb2
    %6 = cir.get_global @wcslen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s32i>)>> loc(#loc116)
    %7 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc117)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc117)
    %9 = cir.call @wcslen(%8) : (!cir.ptr<!s32i>) -> !u64i extra(#fn_attr) loc(#loc116)
    cir.store %9, %0 : !u64i, !cir.ptr<!u64i> loc(#loc215)
    %10 = cir.get_global @calloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i, !u64i)>> loc(#loc118)
    %11 = cir.load %0 : !cir.ptr<!u64i>, !u64i loc(#loc119)
    %12 = cir.const #cir.int<1> : !s32i loc(#loc120)
    %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc120)
    %14 = cir.binop(add, %11, %13) : !u64i loc(#loc220)
    %15 = cir.const #cir.int<4> : !u64i loc(#loc221)
    %16 = cir.call @calloc(%14, %15) : (!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc118)
    cir.store %16, %1 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc216)
    cir.br ^bb4 loc(#loc222)
  ^bb4:  // pred: ^bb3
    %17 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc125)
    %18 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc126)
    %19 = cir.cmp(eq, %17, %18) : !cir.ptr<!void>, !cir.bool loc(#loc223)
    cir.brcond %19 ^bb5, ^bb6 loc(#loc224)
  ^bb5:  // pred: ^bb4
    %20 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc128)
    %21 = cir.const #cir.int<1> : !s32i loc(#loc129)
    %22 = cir.unary(minus, %21) : !s32i, !s32i loc(#loc130)
    cir.call @exit(%22) : (!s32i) -> () extra(#fn_attr) loc(#loc128)
    cir.br ^bb6 loc(#loc124)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc124)
  ^bb7:  // pred: ^bb6
    %23 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc131)
    %24 = cir.cast(bitcast, %23 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc131)
    %25 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc132)
    %26 = cir.cast(bitcast, %25 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc132)
    %27 = cir.call @wcscpy(%24, %26) : (!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc133)
    %28 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc134)
    %29 = cir.cast(bitcast, %28 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc134)
    cir.call @printWLine(%29) : (!cir.ptr<!s32i>) -> () loc(#loc135)
    %30 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc136)
    cir.call @free(%30) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc137)
    cir.br ^bb8 loc(#loc115)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc111)
  ^bb9:  // 2 preds: ^bb1, ^bb8
    cir.br ^bb10 loc(#loc111)
  ^bb10:  // pred: ^bb9
    cir.return loc(#loc102)
  } loc(#loc213)
  cir.global "private" external @CWE122_Heap_Based_Buffer_Overflow__CWE135_22_goodG2BGlobal : !s32i {alignment = 4 : i64} loc(#loc225)
  cir.func private @strcpy(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc226)
  cir.func @CWE122_Heap_Based_Buffer_Overflow__CWE135_22_goodG2BSink(%arg0: !cir.ptr<!void> loc(fused[#loc144, #loc145])) extra(#fn_attr1) {
    %0 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc229)
    %1 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc230)
    %2 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data", init] {alignment = 8 : i64} loc(#loc228)
    cir.store %arg0, %2 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc150)
    cir.br ^bb1 loc(#loc231)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__CWE135_22_goodG2BGlobal : !cir.ptr<!s32i> loc(#loc225)
    %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc153)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc153)
    cir.brcond %5 ^bb2, ^bb9 loc(#loc232)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc233)
  ^bb3:  // pred: ^bb2
    %6 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc157)
    %7 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc158)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc158)
    %9 = cir.call @strlen(%8) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc157)
    cir.store %9, %0 : !u64i, !cir.ptr<!u64i> loc(#loc229)
    %10 = cir.get_global @calloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i, !u64i)>> loc(#loc159)
    %11 = cir.load %0 : !cir.ptr<!u64i>, !u64i loc(#loc160)
    %12 = cir.const #cir.int<1> : !s32i loc(#loc161)
    %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc161)
    %14 = cir.binop(add, %11, %13) : !u64i loc(#loc234)
    %15 = cir.const #cir.int<1> : !s32i loc(#loc162)
    %16 = cir.cast(integral, %15 : !s32i), !u64i loc(#loc162)
    %17 = cir.call @calloc(%14, %16) : (!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc159)
    cir.store %17, %1 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc230)
    cir.br ^bb4 loc(#loc235)
  ^bb4:  // pred: ^bb3
    %18 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc165)
    %19 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc166)
    %20 = cir.cmp(eq, %18, %19) : !cir.ptr<!void>, !cir.bool loc(#loc236)
    cir.brcond %20 ^bb5, ^bb6 loc(#loc237)
  ^bb5:  // pred: ^bb4
    %21 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc168)
    %22 = cir.const #cir.int<1> : !s32i loc(#loc169)
    %23 = cir.unary(minus, %22) : !s32i, !s32i loc(#loc170)
    cir.call @exit(%23) : (!s32i) -> () extra(#fn_attr) loc(#loc168)
    cir.br ^bb6 loc(#loc164)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc164)
  ^bb7:  // pred: ^bb6
    %24 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc171)
    %25 = cir.cast(bitcast, %24 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc171)
    %26 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc172)
    %27 = cir.cast(bitcast, %26 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc172)
    %28 = cir.call @strcpy(%25, %27) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc173)
    %29 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc174)
    %30 = cir.cast(bitcast, %29 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc174)
    cir.call @printLine(%30) : (!cir.ptr<!s8i>) -> () loc(#loc175)
    %31 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc176)
    cir.call @free(%31) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc177)
    cir.br ^bb8 loc(#loc156)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc152)
  ^bb9:  // 2 preds: ^bb1, ^bb8
    cir.br ^bb10 loc(#loc152)
  ^bb10:  // pred: ^bb9
    cir.return loc(#loc143)
  } loc(#loc227)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":0:0)
#loc1 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":25:1)
#loc2 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":25:12)
#loc3 = loc("/usr/include/string.h":407:1)
#loc4 = loc("/usr/include/string.h":408:33)
#loc5 = loc("/usr/include/stdlib.h":675:1)
#loc6 = loc("/usr/include/stdlib.h":676:14)
#loc7 = loc("/usr/include/stdlib.h":756:1)
#loc8 = loc("/usr/include/stdlib.h":756:70)
#loc9 = loc("/usr/include/wchar.h":98:1)
#loc10 = loc("/usr/include/wchar.h":100:14)
#loc11 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc12 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc13 = loc("/usr/include/stdlib.h":687:1)
#loc14 = loc("/usr/include/stdlib.h":687:32)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":27:1)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":41:1)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":33:13)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":33:49)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":34:13)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":34:68)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":28:1)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":29:5)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":40:5)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":29:8)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":30:5)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":31:9)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":39:9)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":33:30)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":33:45)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":34:35)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":34:42)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":34:50)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":34:53)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":34:67)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":35:13)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":35:41)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":35:17)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":35:25)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":35:31)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":35:32)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":35:38)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":35:37)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":36:26)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":36:32)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":36:19)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":37:31)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":37:13)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":38:18)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":38:13)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":48:1)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":48:12)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":58:19)
#loc55 = loc("/usr/include/wchar.h":247:1)
#loc56 = loc("/usr/include/wchar.h":247:51)
#loc57 = loc("../../../testcasesupport/std_testcase_io.h":16:1)
#loc58 = loc("../../../testcasesupport/std_testcase_io.h":16:37)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":53:1)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":72:1)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":64:13)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":64:52)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":65:13)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":65:68)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":54:1)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":55:5)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":71:5)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":55:8)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":56:5)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":59:5)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":61:5)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":58:9)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":62:9)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":70:9)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":64:30)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":64:48)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":65:35)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":65:42)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":65:50)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":65:53)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":65:67)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":66:13)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":66:41)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":66:17)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":66:25)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":66:31)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":66:32)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":66:38)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":66:37)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":67:26)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":67:32)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":67:19)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":68:35)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":68:13)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":69:18)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":69:13)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":49:1)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":49:12)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":75:1)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":89:1)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":81:13)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":81:52)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":82:13)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":82:68)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":76:1)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":77:5)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":88:5)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":77:8)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":78:5)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":79:9)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":87:9)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":81:30)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":81:48)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":82:35)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":82:42)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":82:50)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":82:53)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":82:67)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":83:13)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":83:41)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":83:17)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":83:25)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":83:31)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":83:32)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":83:38)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":83:37)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":84:26)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":84:32)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":84:19)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":85:35)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":85:13)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":86:18)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":86:13)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":50:1)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":50:12)
#loc140 = loc("/usr/include/string.h":141:1)
#loc141 = loc("/usr/include/string.h":142:14)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":92:1)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":106:1)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":98:13)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":98:49)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":99:13)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":99:54)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":93:1)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":94:5)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":105:5)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":94:8)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":95:5)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":96:9)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":104:9)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":98:30)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":98:45)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":99:35)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":99:42)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":99:50)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":99:53)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":100:13)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":100:41)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":100:17)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":100:25)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":100:31)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":100:32)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":100:38)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":100:37)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":101:26)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":101:32)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":101:19)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":102:31)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":102:13)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":103:18)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c":103:13)
#loc178 = loc(fused[#loc1, #loc2])
#loc179 = loc(fused[#loc3, #loc4])
#loc180 = loc(fused[#loc5, #loc6])
#loc181 = loc(fused[#loc7, #loc8])
#loc182 = loc(fused[#loc9, #loc10])
#loc183 = loc(fused[#loc11, #loc12])
#loc184 = loc(fused[#loc13, #loc14])
#loc185 = loc(fused[#loc15, #loc16])
#loc187 = loc(fused[#loc19, #loc20])
#loc188 = loc(fused[#loc21, #loc22])
#loc189 = loc(fused[#loc24, #loc25])
#loc190 = loc(fused[#loc27, #loc25])
#loc191 = loc(fused[#loc28, #loc29])
#loc192 = loc(fused[#loc33, #loc34])
#loc193 = loc(fused[#loc35, #loc36])
#loc194 = loc(fused[#loc37, #loc38])
#loc195 = loc(fused[#loc39, #loc40])
#loc196 = loc(fused[#loc41, #loc38])
#loc197 = loc(fused[#loc52, #loc53])
#loc198 = loc(fused[#loc55, #loc56])
#loc199 = loc(fused[#loc57, #loc58])
#loc200 = loc(fused[#loc59, #loc60])
#loc202 = loc(fused[#loc63, #loc64])
#loc203 = loc(fused[#loc65, #loc66])
#loc204 = loc(fused[#loc68, #loc69])
#loc205 = loc(fused[#loc71, #loc72, #loc73, #loc69])
#loc206 = loc(fused[#loc75, #loc76])
#loc207 = loc(fused[#loc80, #loc81])
#loc208 = loc(fused[#loc82, #loc83])
#loc209 = loc(fused[#loc84, #loc85])
#loc210 = loc(fused[#loc86, #loc87])
#loc211 = loc(fused[#loc88, #loc85])
#loc212 = loc(fused[#loc99, #loc100])
#loc213 = loc(fused[#loc101, #loc102])
#loc215 = loc(fused[#loc105, #loc106])
#loc216 = loc(fused[#loc107, #loc108])
#loc217 = loc(fused[#loc110, #loc111])
#loc218 = loc(fused[#loc113, #loc111])
#loc219 = loc(fused[#loc114, #loc115])
#loc220 = loc(fused[#loc119, #loc120])
#loc221 = loc(fused[#loc121, #loc122])
#loc222 = loc(fused[#loc123, #loc124])
#loc223 = loc(fused[#loc125, #loc126])
#loc224 = loc(fused[#loc127, #loc124])
#loc225 = loc(fused[#loc138, #loc139])
#loc226 = loc(fused[#loc140, #loc141])
#loc227 = loc(fused[#loc142, #loc143])
#loc229 = loc(fused[#loc146, #loc147])
#loc230 = loc(fused[#loc148, #loc149])
#loc231 = loc(fused[#loc151, #loc152])
#loc232 = loc(fused[#loc154, #loc152])
#loc233 = loc(fused[#loc155, #loc156])
#loc234 = loc(fused[#loc160, #loc161])
#loc235 = loc(fused[#loc163, #loc164])
#loc236 = loc(fused[#loc165, #loc166])
#loc237 = loc(fused[#loc167, #loc164])
