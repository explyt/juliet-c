!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc10 = loc("CWE78_OS_Command_Injection__char_connect_socket_system_51b.c":58:73)
#loc11 = loc("CWE78_OS_Command_Injection__char_connect_socket_system_51b.c":58:80)
#loc25 = loc("CWE78_OS_Command_Injection__char_connect_socket_system_51b.c":73:77)
#loc26 = loc("CWE78_OS_Command_Injection__char_connect_socket_system_51b.c":73:84)
#loc43 = loc(fused[#loc10, #loc11])
#loc48 = loc(fused[#loc25, #loc26])
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE78_OS_Command_Injection/s01/CWE78_OS_Command_Injection__char_connect_socket_system_51b.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @system(!cir.ptr<!s8i>) -> !s32i loc(#loc39)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc40)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"command execution failed!\00" : !cir.array<!s8i x 26>> : !cir.array<!s8i x 26> {alignment = 1 : i64} loc(#loc5)
  cir.func private  @exit(!s32i) extra(#fn_attr) loc(#loc41)
  cir.func  @CWE78_OS_Command_Injection__char_connect_socket_system_51b_badSink(%arg0: !cir.ptr<!s8i> loc(fused[#loc10, #loc11])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc43)
    cir.store %arg0, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc12)
    cir.scope {
      %1 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc15)
      %2 = cir.call @system(%1) : (!cir.ptr<!s8i>) -> !s32i loc(#loc16)
      %3 = cir.const #cir.int<0> : !s32i loc(#loc17)
      %4 = cir.cmp(ne, %2, %3) : !s32i, !s32i loc(#loc45)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc18)
      cir.if %5 {
        %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 26>> loc(#loc5)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 26>>), !cir.ptr<!s8i> loc(#loc5)
        cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc20)
        %8 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc21)
        %9 = cir.const #cir.int<1> : !s32i loc(#loc22)
        cir.call @exit(%9) : (!s32i) -> () extra(#fn_attr) loc(#loc21)
      } loc(#loc46)
    } loc(#loc44)
    cir.return loc(#loc9)
  } loc(#loc42)
  cir.func  @CWE78_OS_Command_Injection__char_connect_socket_system_51b_goodG2BSink(%arg0: !cir.ptr<!s8i> loc(fused[#loc25, #loc26])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc48)
    cir.store %arg0, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc27)
    cir.scope {
      %1 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc30)
      %2 = cir.call @system(%1) : (!cir.ptr<!s8i>) -> !s32i loc(#loc31)
      %3 = cir.const #cir.int<0> : !s32i loc(#loc32)
      %4 = cir.cmp(ne, %2, %3) : !s32i, !s32i loc(#loc50)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc33)
      cir.if %5 {
        %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 26>> loc(#loc35)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 26>>), !cir.ptr<!s8i> loc(#loc35)
        cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc36)
        %8 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc37)
        %9 = cir.const #cir.int<1> : !s32i loc(#loc38)
        cir.call @exit(%9) : (!s32i) -> () extra(#fn_attr) loc(#loc37)
      } loc(#loc51)
    } loc(#loc49)
    cir.return loc(#loc24)
  } loc(#loc47)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE78_OS_Command_Injection/s01/CWE78_OS_Command_Injection__char_connect_socket_system_51b.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":923:1)
#loc2 = loc("/usr/include/stdlib.h":923:41)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc5 = loc("CWE78_OS_Command_Injection__char_connect_socket_system_51b.c":63:19)
#loc6 = loc("/usr/include/stdlib.h":756:1)
#loc7 = loc("/usr/include/stdlib.h":756:70)
#loc8 = loc("CWE78_OS_Command_Injection__char_connect_socket_system_51b.c":58:1)
#loc9 = loc("CWE78_OS_Command_Injection__char_connect_socket_system_51b.c":66:1)
#loc12 = loc("CWE78_OS_Command_Injection__char_connect_socket_system_51b.c":59:1)
#loc13 = loc("CWE78_OS_Command_Injection__char_connect_socket_system_51b.c":61:5)
#loc14 = loc("CWE78_OS_Command_Injection__char_connect_socket_system_51b.c":65:5)
#loc15 = loc("CWE78_OS_Command_Injection__char_connect_socket_system_51b.c":61:16)
#loc16 = loc("CWE78_OS_Command_Injection__char_connect_socket_system_51b.c":61:9)
#loc17 = loc("CWE78_OS_Command_Injection__char_connect_socket_system_51b.c":61:25)
#loc18 = loc("CWE78_OS_Command_Injection__char_connect_socket_system_51b.c":61:22)
#loc19 = loc("CWE78_OS_Command_Injection__char_connect_socket_system_51b.c":62:5)
#loc20 = loc("CWE78_OS_Command_Injection__char_connect_socket_system_51b.c":63:9)
#loc21 = loc("CWE78_OS_Command_Injection__char_connect_socket_system_51b.c":64:9)
#loc22 = loc("CWE78_OS_Command_Injection__char_connect_socket_system_51b.c":64:14)
#loc23 = loc("CWE78_OS_Command_Injection__char_connect_socket_system_51b.c":73:1)
#loc24 = loc("CWE78_OS_Command_Injection__char_connect_socket_system_51b.c":81:1)
#loc27 = loc("CWE78_OS_Command_Injection__char_connect_socket_system_51b.c":74:1)
#loc28 = loc("CWE78_OS_Command_Injection__char_connect_socket_system_51b.c":76:5)
#loc29 = loc("CWE78_OS_Command_Injection__char_connect_socket_system_51b.c":80:5)
#loc30 = loc("CWE78_OS_Command_Injection__char_connect_socket_system_51b.c":76:16)
#loc31 = loc("CWE78_OS_Command_Injection__char_connect_socket_system_51b.c":76:9)
#loc32 = loc("CWE78_OS_Command_Injection__char_connect_socket_system_51b.c":76:25)
#loc33 = loc("CWE78_OS_Command_Injection__char_connect_socket_system_51b.c":76:22)
#loc34 = loc("CWE78_OS_Command_Injection__char_connect_socket_system_51b.c":77:5)
#loc35 = loc("CWE78_OS_Command_Injection__char_connect_socket_system_51b.c":78:19)
#loc36 = loc("CWE78_OS_Command_Injection__char_connect_socket_system_51b.c":78:9)
#loc37 = loc("CWE78_OS_Command_Injection__char_connect_socket_system_51b.c":79:9)
#loc38 = loc("CWE78_OS_Command_Injection__char_connect_socket_system_51b.c":79:14)
#loc39 = loc(fused[#loc1, #loc2])
#loc40 = loc(fused[#loc3, #loc4])
#loc41 = loc(fused[#loc6, #loc7])
#loc42 = loc(fused[#loc8, #loc9])
#loc44 = loc(fused[#loc13, #loc14])
#loc45 = loc(fused[#loc16, #loc17])
#loc46 = loc(fused[#loc19, #loc14])
#loc47 = loc(fused[#loc23, #loc24])
#loc49 = loc(fused[#loc28, #loc29])
#loc50 = loc(fused[#loc31, #loc32])
#loc51 = loc(fused[#loc34, #loc29])
