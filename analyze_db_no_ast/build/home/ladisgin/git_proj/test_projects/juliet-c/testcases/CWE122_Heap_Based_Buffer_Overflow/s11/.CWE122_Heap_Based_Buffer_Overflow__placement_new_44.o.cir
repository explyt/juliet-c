!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr2 = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone})>
#loc1 = loc("../../../testcasesupport/std_testcase.h":61:7)
#loc8 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_44.cpp":25:21)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_44.cpp":25:28)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_44.cpp":63:25)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_44.cpp":63:32)
#loc124 = loc("../../../testcasesupport/std_testcase.h":68:7)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_44.cpp":95:25)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_44.cpp":95:32)
!ty_OneIntClass = !cir.struct<class "OneIntClass" {!s32i} #cir.record.decl.ast>
!ty_TwoIntsClass = !cir.struct<class "TwoIntsClass" {!s32i, !s32i} #cir.record.decl.ast>
#loc187 = loc(fused[#loc8, #loc9])
#loc212 = loc(fused[#loc70, #loc71])
#loc235 = loc(fused[#loc127, #loc128])
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__placement_new_44.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func linkonce_odr  @_ZN12TwoIntsClassC2Ev(%arg0: !cir.ptr<!ty_TwoIntsClass> loc("../../../testcasesupport/std_testcase.h":61:7)) extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, ["this", init] {alignment = 8 : i64} loc(#loc1)
    cir.store %arg0, %0 : !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>> loc(#loc1)
    %1 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc1)
    cir.return loc(#loc1)
  } loc(#loc1)
  cir.func private  @printIntLine(!s32i) loc(#loc184)
  cir.func private  @free(!cir.ptr<!void>) extra(#fn_attr1) loc(#loc185)
  cir.func internal private  @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_44L7badSinkEPc(%arg0: !cir.ptr<!s8i> loc(fused[#loc8, #loc9])) extra(#fn_attr2) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc187)
    cir.store %arg0, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc10)
    cir.scope {
      %1 = cir.alloca !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, ["classTwo", init] {alignment = 8 : i64} loc(#loc189)
      %2 = cir.const #cir.int<8> : !u64i loc(#loc190)
      %3 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc16)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc16)
      %5 = cir.cast(bitcast, %4 : !cir.ptr<!void>), !cir.ptr<!ty_TwoIntsClass> loc(#loc190)
      cir.call @_ZN12TwoIntsClassC2Ev(%5) : (!cir.ptr<!ty_TwoIntsClass>) -> () extra(#fn_attr1) loc(#loc14)
      cir.store %5, %1 : !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>> loc(#loc189)
      %6 = cir.const #cir.int<5> : !s32i loc(#loc17)
      %7 = cir.load %1 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc18)
      %8 = cir.get_member %7[0] {name = "intOne"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc19)
      cir.store %6, %8 : !s32i, !cir.ptr<!s32i> loc(#loc191)
      %9 = cir.const #cir.int<10> : !s32i loc(#loc20)
      %10 = cir.load %1 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc21)
      %11 = cir.get_member %10[1] {name = "intTwo"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc22)
      cir.store %9, %11 : !s32i, !cir.ptr<!s32i> loc(#loc192)
      %12 = cir.load %1 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc23)
      %13 = cir.get_member %12[0] {name = "intOne"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc19)
      %14 = cir.load %13 : !cir.ptr<!s32i>, !s32i loc(#loc24)
      cir.call @printIntLine(%14) : (!s32i) -> () loc(#loc25)
      %15 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc26)
      %16 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc27)
      %17 = cir.cast(bitcast, %16 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc27)
      cir.call @free(%17) : (!cir.ptr<!void>) -> () extra(#fn_attr1) loc(#loc26)
    } loc(#loc188)
    cir.return loc(#loc7)
  } loc(#loc186)
  cir.func private  @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr1) loc(#loc193)
  cir.func private  @exit(!s32i) extra(#fn_attr1) loc(#loc194)
  cir.func  @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_443badEv() extra(#fn_attr2) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc196)
    %1 = cir.alloca !cir.ptr<!cir.func<!void (!cir.ptr<!s8i>)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!cir.ptr<!s8i>)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc197)
    %2 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc198)
    %3 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc199)
    %4 = cir.get_global @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_44L7badSinkEPc : !cir.ptr<!cir.func<!void (!cir.ptr<!s8i>)>> loc(#loc37)
    cir.store %4, %1 : !cir.ptr<!cir.func<!void (!cir.ptr<!s8i>)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!cir.ptr<!s8i>)>>> loc(#loc197)
    %5 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc42)
    %6 = cir.const #cir.int<4> : !u64i loc(#loc200)
    %7 = cir.call @malloc(%6) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr1) loc(#loc42)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc201)
    cir.store %8, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc198)
    cir.scope {
      %16 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc47)
      %17 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc48)
      %18 = cir.cmp(eq, %16, %17) : !cir.ptr<!s8i>, !cir.bool loc(#loc203)
      cir.if %18 {
        %19 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc50)
        %20 = cir.const #cir.int<1> : !s32i loc(#loc51)
        %21 = cir.unary(minus, %20) : !s32i, !s32i loc(#loc52)
        cir.call @exit(%21) : (!s32i) -> () extra(#fn_attr1) loc(#loc50)
      } loc(#loc204)
    } loc(#loc202)
    %9 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc53)
    %10 = cir.const #cir.int<8> : !u64i loc(#loc205)
    %11 = cir.call @malloc(%10) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr1) loc(#loc53)
    %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc206)
    cir.store %12, %3 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc199)
    cir.scope {
      %16 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc58)
      %17 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc59)
      %18 = cir.cmp(eq, %16, %17) : !cir.ptr<!s8i>, !cir.bool loc(#loc208)
      cir.if %18 {
        %19 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc61)
        %20 = cir.const #cir.int<1> : !s32i loc(#loc62)
        %21 = cir.unary(minus, %20) : !s32i, !s32i loc(#loc63)
        cir.call @exit(%21) : (!s32i) -> () extra(#fn_attr1) loc(#loc61)
      } loc(#loc209)
    } loc(#loc207)
    %13 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc64)
    cir.store %13, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc210)
    %14 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<!void (!cir.ptr<!s8i>)>>>, !cir.ptr<!cir.func<!void (!cir.ptr<!s8i>)>> loc(#loc66)
    %15 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc67)
    cir.call %14(%15) : (!cir.ptr<!cir.func<!void (!cir.ptr<!s8i>)>>, !cir.ptr<!s8i>) -> () loc(#loc66)
    cir.return loc(#loc33)
  } loc(#loc195)
  cir.func internal private  @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_44L11goodG2BSinkEPc(%arg0: !cir.ptr<!s8i> loc(fused[#loc70, #loc71])) extra(#fn_attr2) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc212)
    cir.store %arg0, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc72)
    cir.scope {
      %1 = cir.alloca !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, ["classTwo", init] {alignment = 8 : i64} loc(#loc214)
      %2 = cir.const #cir.int<8> : !u64i loc(#loc215)
      %3 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc78)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc78)
      %5 = cir.cast(bitcast, %4 : !cir.ptr<!void>), !cir.ptr<!ty_TwoIntsClass> loc(#loc215)
      cir.call @_ZN12TwoIntsClassC2Ev(%5) : (!cir.ptr<!ty_TwoIntsClass>) -> () extra(#fn_attr1) loc(#loc76)
      cir.store %5, %1 : !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>> loc(#loc214)
      %6 = cir.const #cir.int<5> : !s32i loc(#loc79)
      %7 = cir.load %1 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc80)
      %8 = cir.get_member %7[0] {name = "intOne"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc19)
      cir.store %6, %8 : !s32i, !cir.ptr<!s32i> loc(#loc216)
      %9 = cir.const #cir.int<10> : !s32i loc(#loc81)
      %10 = cir.load %1 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc82)
      %11 = cir.get_member %10[1] {name = "intTwo"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc22)
      cir.store %9, %11 : !s32i, !cir.ptr<!s32i> loc(#loc217)
      %12 = cir.load %1 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc83)
      %13 = cir.get_member %12[0] {name = "intOne"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc19)
      %14 = cir.load %13 : !cir.ptr<!s32i>, !s32i loc(#loc84)
      cir.call @printIntLine(%14) : (!s32i) -> () loc(#loc85)
      %15 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc86)
      %16 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc87)
      %17 = cir.cast(bitcast, %16 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc87)
      cir.call @free(%17) : (!cir.ptr<!void>) -> () extra(#fn_attr1) loc(#loc86)
    } loc(#loc213)
    cir.return loc(#loc69)
  } loc(#loc211)
  cir.func internal private  @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_44L7goodG2BEv() extra(#fn_attr2) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc219)
    %1 = cir.alloca !cir.ptr<!cir.func<!void (!cir.ptr<!s8i>)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!cir.ptr<!s8i>)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc220)
    %2 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc221)
    %3 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc222)
    %4 = cir.get_global @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_44L11goodG2BSinkEPc : !cir.ptr<!cir.func<!void (!cir.ptr<!s8i>)>> loc(#loc93)
    cir.store %4, %1 : !cir.ptr<!cir.func<!void (!cir.ptr<!s8i>)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!cir.ptr<!s8i>)>>> loc(#loc220)
    %5 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc98)
    %6 = cir.const #cir.int<4> : !u64i loc(#loc223)
    %7 = cir.call @malloc(%6) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr1) loc(#loc98)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc224)
    cir.store %8, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc221)
    cir.scope {
      %16 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc103)
      %17 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc104)
      %18 = cir.cmp(eq, %16, %17) : !cir.ptr<!s8i>, !cir.bool loc(#loc226)
      cir.if %18 {
        %19 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc106)
        %20 = cir.const #cir.int<1> : !s32i loc(#loc107)
        %21 = cir.unary(minus, %20) : !s32i, !s32i loc(#loc108)
        cir.call @exit(%21) : (!s32i) -> () extra(#fn_attr1) loc(#loc106)
      } loc(#loc227)
    } loc(#loc225)
    %9 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc109)
    %10 = cir.const #cir.int<8> : !u64i loc(#loc228)
    %11 = cir.call @malloc(%10) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr1) loc(#loc109)
    %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc229)
    cir.store %12, %3 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc222)
    cir.scope {
      %16 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc114)
      %17 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc115)
      %18 = cir.cmp(eq, %16, %17) : !cir.ptr<!s8i>, !cir.bool loc(#loc231)
      cir.if %18 {
        %19 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc117)
        %20 = cir.const #cir.int<1> : !s32i loc(#loc118)
        %21 = cir.unary(minus, %20) : !s32i, !s32i loc(#loc119)
        cir.call @exit(%21) : (!s32i) -> () extra(#fn_attr1) loc(#loc117)
      } loc(#loc232)
    } loc(#loc230)
    %13 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc120)
    cir.store %13, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc233)
    %14 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<!void (!cir.ptr<!s8i>)>>>, !cir.ptr<!cir.func<!void (!cir.ptr<!s8i>)>> loc(#loc122)
    %15 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc123)
    cir.call %14(%15) : (!cir.ptr<!cir.func<!void (!cir.ptr<!s8i>)>>, !cir.ptr<!s8i>) -> () loc(#loc122)
    cir.return loc(#loc89)
  } loc(#loc218)
  cir.func linkonce_odr  @_ZN11OneIntClassC2Ev(%arg0: !cir.ptr<!ty_OneIntClass> loc("../../../testcasesupport/std_testcase.h":68:7)) extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!ty_OneIntClass>, !cir.ptr<!cir.ptr<!ty_OneIntClass>>, ["this", init] {alignment = 8 : i64} loc(#loc124)
    cir.store %arg0, %0 : !cir.ptr<!ty_OneIntClass>, !cir.ptr<!cir.ptr<!ty_OneIntClass>> loc(#loc124)
    %1 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_OneIntClass>>, !cir.ptr<!ty_OneIntClass> loc(#loc124)
    cir.return loc(#loc124)
  } loc(#loc124)
  cir.func internal private  @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_44L11goodB2GSinkEPc(%arg0: !cir.ptr<!s8i> loc(fused[#loc127, #loc128])) extra(#fn_attr2) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc235)
    cir.store %arg0, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc129)
    cir.scope {
      %1 = cir.alloca !cir.ptr<!ty_OneIntClass>, !cir.ptr<!cir.ptr<!ty_OneIntClass>>, ["classOne", init] {alignment = 8 : i64} loc(#loc237)
      %2 = cir.const #cir.int<4> : !u64i loc(#loc238)
      %3 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc135)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc135)
      %5 = cir.cast(bitcast, %4 : !cir.ptr<!void>), !cir.ptr<!ty_OneIntClass> loc(#loc238)
      cir.call @_ZN11OneIntClassC2Ev(%5) : (!cir.ptr<!ty_OneIntClass>) -> () extra(#fn_attr1) loc(#loc133)
      cir.store %5, %1 : !cir.ptr<!ty_OneIntClass>, !cir.ptr<!cir.ptr<!ty_OneIntClass>> loc(#loc237)
      %6 = cir.const #cir.int<5> : !s32i loc(#loc136)
      %7 = cir.load %1 : !cir.ptr<!cir.ptr<!ty_OneIntClass>>, !cir.ptr<!ty_OneIntClass> loc(#loc137)
      %8 = cir.get_member %7[0] {name = "intOne"} : !cir.ptr<!ty_OneIntClass> -> !cir.ptr<!s32i> loc(#loc138)
      cir.store %6, %8 : !s32i, !cir.ptr<!s32i> loc(#loc239)
      %9 = cir.load %1 : !cir.ptr<!cir.ptr<!ty_OneIntClass>>, !cir.ptr<!ty_OneIntClass> loc(#loc139)
      %10 = cir.get_member %9[0] {name = "intOne"} : !cir.ptr<!ty_OneIntClass> -> !cir.ptr<!s32i> loc(#loc138)
      %11 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc140)
      cir.call @printIntLine(%11) : (!s32i) -> () loc(#loc141)
      %12 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc142)
      %13 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc143)
      %14 = cir.cast(bitcast, %13 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc143)
      cir.call @free(%14) : (!cir.ptr<!void>) -> () extra(#fn_attr1) loc(#loc142)
    } loc(#loc236)
    cir.return loc(#loc126)
  } loc(#loc234)
  cir.func internal private  @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_44L7goodB2GEv() extra(#fn_attr2) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc241)
    %1 = cir.alloca !cir.ptr<!cir.func<!void (!cir.ptr<!s8i>)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!cir.ptr<!s8i>)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc242)
    %2 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc243)
    %3 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc244)
    %4 = cir.get_global @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_44L11goodB2GSinkEPc : !cir.ptr<!cir.func<!void (!cir.ptr<!s8i>)>> loc(#loc149)
    cir.store %4, %1 : !cir.ptr<!cir.func<!void (!cir.ptr<!s8i>)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!cir.ptr<!s8i>)>>> loc(#loc242)
    %5 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc154)
    %6 = cir.const #cir.int<4> : !u64i loc(#loc245)
    %7 = cir.call @malloc(%6) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr1) loc(#loc154)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc246)
    cir.store %8, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc243)
    cir.scope {
      %16 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc159)
      %17 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc160)
      %18 = cir.cmp(eq, %16, %17) : !cir.ptr<!s8i>, !cir.bool loc(#loc248)
      cir.if %18 {
        %19 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc162)
        %20 = cir.const #cir.int<1> : !s32i loc(#loc163)
        %21 = cir.unary(minus, %20) : !s32i, !s32i loc(#loc164)
        cir.call @exit(%21) : (!s32i) -> () extra(#fn_attr1) loc(#loc162)
      } loc(#loc249)
    } loc(#loc247)
    %9 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc165)
    %10 = cir.const #cir.int<8> : !u64i loc(#loc250)
    %11 = cir.call @malloc(%10) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr1) loc(#loc165)
    %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc251)
    cir.store %12, %3 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc244)
    cir.scope {
      %16 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc170)
      %17 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc171)
      %18 = cir.cmp(eq, %16, %17) : !cir.ptr<!s8i>, !cir.bool loc(#loc253)
      cir.if %18 {
        %19 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc173)
        %20 = cir.const #cir.int<1> : !s32i loc(#loc174)
        %21 = cir.unary(minus, %20) : !s32i, !s32i loc(#loc175)
        cir.call @exit(%21) : (!s32i) -> () extra(#fn_attr1) loc(#loc173)
      } loc(#loc254)
    } loc(#loc252)
    %13 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc176)
    cir.store %13, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc255)
    %14 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<!void (!cir.ptr<!s8i>)>>>, !cir.ptr<!cir.func<!void (!cir.ptr<!s8i>)>> loc(#loc178)
    %15 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc179)
    cir.call %14(%15) : (!cir.ptr<!cir.func<!void (!cir.ptr<!s8i>)>>, !cir.ptr<!s8i>) -> () loc(#loc178)
    cir.return loc(#loc145)
  } loc(#loc240)
  cir.func  @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_444goodEv() extra(#fn_attr2) {
    cir.call @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_44L7goodG2BEv() : () -> () loc(#loc182)
    cir.call @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_44L7goodB2GEv() : () -> () loc(#loc183)
    cir.return loc(#loc181)
  } loc(#loc256)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__placement_new_44.cpp":0:0)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc4 = loc("/usr/include/stdlib.h":687:1)
#loc5 = loc("/usr/include/stdlib.h":687:32)
#loc6 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_44.cpp":25:1)
#loc7 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_44.cpp":41:1)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_44.cpp":26:1)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_44.cpp":27:5)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_44.cpp":40:5)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_44.cpp":33:9)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_44.cpp":33:45)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_44.cpp":33:35)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_44.cpp":33:39)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_44.cpp":35:28)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_44.cpp":35:9)
#loc19 = loc("../../../testcasesupport/std_testcase.h":64:13)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_44.cpp":36:28)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_44.cpp":36:9)
#loc22 = loc("../../../testcasesupport/std_testcase.h":65:13)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_44.cpp":37:22)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_44.cpp":37:32)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_44.cpp":37:9)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_44.cpp":39:9)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_44.cpp":39:14)
#loc28 = loc("/usr/include/stdlib.h":672:1)
#loc29 = loc("/usr/include/stdlib.h":672:45)
#loc30 = loc("/usr/include/stdlib.h":756:1)
#loc31 = loc("/usr/include/stdlib.h":756:70)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_44.cpp":43:1)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_44.cpp":56:1)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_44.cpp":45:5)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_44.cpp":45:12)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_44.cpp":47:5)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_44.cpp":47:32)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_44.cpp":48:5)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_44.cpp":48:62)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_44.cpp":50:5)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_44.cpp":50:64)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_44.cpp":48:36)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_44.cpp":48:43)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_44.cpp":48:61)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_44.cpp":49:5)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_44.cpp":49:42)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_44.cpp":49:9)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_44.cpp":49:26)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_44.cpp":49:32)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_44.cpp":49:33)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_44.cpp":49:39)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_44.cpp":49:38)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_44.cpp":50:37)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_44.cpp":50:44)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_44.cpp":50:63)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_44.cpp":51:5)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_44.cpp":51:43)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_44.cpp":51:9)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_44.cpp":51:27)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_44.cpp":51:33)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_44.cpp":51:34)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_44.cpp":51:40)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_44.cpp":51:39)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_44.cpp":53:12)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_44.cpp":53:5)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_44.cpp":55:5)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_44.cpp":55:13)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_44.cpp":63:1)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_44.cpp":79:1)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_44.cpp":64:1)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_44.cpp":65:5)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_44.cpp":78:5)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_44.cpp":71:9)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_44.cpp":71:45)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_44.cpp":71:35)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_44.cpp":71:39)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_44.cpp":73:28)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_44.cpp":73:9)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_44.cpp":74:28)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_44.cpp":74:9)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_44.cpp":75:22)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_44.cpp":75:32)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_44.cpp":75:9)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_44.cpp":77:9)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_44.cpp":77:14)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_44.cpp":81:1)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_44.cpp":92:1)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_44.cpp":83:5)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_44.cpp":83:12)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_44.cpp":84:5)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_44.cpp":84:32)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_44.cpp":85:5)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_44.cpp":85:62)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_44.cpp":87:5)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_44.cpp":87:64)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_44.cpp":85:36)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_44.cpp":85:43)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_44.cpp":85:61)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_44.cpp":86:5)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_44.cpp":86:42)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_44.cpp":86:9)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_44.cpp":86:26)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_44.cpp":86:32)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_44.cpp":86:33)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_44.cpp":86:39)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_44.cpp":86:38)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_44.cpp":87:37)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_44.cpp":87:44)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_44.cpp":87:63)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_44.cpp":88:5)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_44.cpp":88:43)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_44.cpp":88:9)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_44.cpp":88:27)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_44.cpp":88:33)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_44.cpp":88:34)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_44.cpp":88:40)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_44.cpp":88:39)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_44.cpp":90:12)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_44.cpp":90:5)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_44.cpp":91:5)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_44.cpp":91:13)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_44.cpp":95:1)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_44.cpp":109:1)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_44.cpp":96:1)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_44.cpp":97:5)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_44.cpp":108:5)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_44.cpp":103:9)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_44.cpp":103:44)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_44.cpp":103:34)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_44.cpp":103:38)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_44.cpp":105:28)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_44.cpp":105:9)
#loc138 = loc("../../../testcasesupport/std_testcase.h":71:13)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_44.cpp":106:22)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_44.cpp":106:32)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_44.cpp":106:9)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_44.cpp":107:9)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_44.cpp":107:14)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_44.cpp":111:1)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_44.cpp":122:1)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_44.cpp":113:5)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_44.cpp":113:12)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_44.cpp":114:5)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_44.cpp":114:32)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_44.cpp":115:5)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_44.cpp":115:62)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_44.cpp":117:5)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_44.cpp":117:64)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_44.cpp":115:36)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_44.cpp":115:43)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_44.cpp":115:61)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_44.cpp":116:5)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_44.cpp":116:42)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_44.cpp":116:9)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_44.cpp":116:26)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_44.cpp":116:32)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_44.cpp":116:33)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_44.cpp":116:39)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_44.cpp":116:38)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_44.cpp":117:37)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_44.cpp":117:44)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_44.cpp":117:63)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_44.cpp":118:5)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_44.cpp":118:43)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_44.cpp":118:9)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_44.cpp":118:27)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_44.cpp":118:33)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_44.cpp":118:34)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_44.cpp":118:40)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_44.cpp":118:39)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_44.cpp":120:12)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_44.cpp":120:5)
#loc178 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_44.cpp":121:5)
#loc179 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_44.cpp":121:13)
#loc180 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_44.cpp":124:1)
#loc181 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_44.cpp":128:1)
#loc182 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_44.cpp":126:5)
#loc183 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_44.cpp":127:5)
#loc184 = loc(fused[#loc2, #loc3])
#loc185 = loc(fused[#loc4, #loc5])
#loc186 = loc(fused[#loc6, #loc7])
#loc188 = loc(fused[#loc11, #loc12])
#loc189 = loc(fused[#loc13, #loc14])
#loc190 = loc(fused[#loc15, #loc14])
#loc191 = loc(fused[#loc18, #loc17])
#loc192 = loc(fused[#loc21, #loc20])
#loc193 = loc(fused[#loc28, #loc29])
#loc194 = loc(fused[#loc30, #loc31])
#loc195 = loc(fused[#loc32, #loc33])
#loc196 = loc(fused[#loc34, #loc35])
#loc197 = loc(fused[#loc36, #loc37])
#loc198 = loc(fused[#loc38, #loc39])
#loc199 = loc(fused[#loc40, #loc41])
#loc200 = loc(fused[#loc43, #loc44])
#loc201 = loc(fused[#loc42, #loc39])
#loc202 = loc(fused[#loc45, #loc46])
#loc203 = loc(fused[#loc47, #loc48])
#loc204 = loc(fused[#loc49, #loc46])
#loc205 = loc(fused[#loc54, #loc55])
#loc206 = loc(fused[#loc53, #loc41])
#loc207 = loc(fused[#loc56, #loc57])
#loc208 = loc(fused[#loc58, #loc59])
#loc209 = loc(fused[#loc60, #loc57])
#loc210 = loc(fused[#loc65, #loc64])
#loc211 = loc(fused[#loc68, #loc69])
#loc213 = loc(fused[#loc73, #loc74])
#loc214 = loc(fused[#loc75, #loc76])
#loc215 = loc(fused[#loc77, #loc76])
#loc216 = loc(fused[#loc80, #loc79])
#loc217 = loc(fused[#loc82, #loc81])
#loc218 = loc(fused[#loc88, #loc89])
#loc219 = loc(fused[#loc90, #loc91])
#loc220 = loc(fused[#loc92, #loc93])
#loc221 = loc(fused[#loc94, #loc95])
#loc222 = loc(fused[#loc96, #loc97])
#loc223 = loc(fused[#loc99, #loc100])
#loc224 = loc(fused[#loc98, #loc95])
#loc225 = loc(fused[#loc101, #loc102])
#loc226 = loc(fused[#loc103, #loc104])
#loc227 = loc(fused[#loc105, #loc102])
#loc228 = loc(fused[#loc110, #loc111])
#loc229 = loc(fused[#loc109, #loc97])
#loc230 = loc(fused[#loc112, #loc113])
#loc231 = loc(fused[#loc114, #loc115])
#loc232 = loc(fused[#loc116, #loc113])
#loc233 = loc(fused[#loc121, #loc120])
#loc234 = loc(fused[#loc125, #loc126])
#loc236 = loc(fused[#loc130, #loc131])
#loc237 = loc(fused[#loc132, #loc133])
#loc238 = loc(fused[#loc134, #loc133])
#loc239 = loc(fused[#loc137, #loc136])
#loc240 = loc(fused[#loc144, #loc145])
#loc241 = loc(fused[#loc146, #loc147])
#loc242 = loc(fused[#loc148, #loc149])
#loc243 = loc(fused[#loc150, #loc151])
#loc244 = loc(fused[#loc152, #loc153])
#loc245 = loc(fused[#loc155, #loc156])
#loc246 = loc(fused[#loc154, #loc151])
#loc247 = loc(fused[#loc157, #loc158])
#loc248 = loc(fused[#loc159, #loc160])
#loc249 = loc(fused[#loc161, #loc158])
#loc250 = loc(fused[#loc166, #loc167])
#loc251 = loc(fused[#loc165, #loc153])
#loc252 = loc(fused[#loc168, #loc169])
#loc253 = loc(fused[#loc170, #loc171])
#loc254 = loc(fused[#loc172, #loc169])
#loc255 = loc(fused[#loc177, #loc176])
#loc256 = loc(fused[#loc180, #loc181])
