!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__stdThread = !cir.struct<struct "_stdThread" incomplete>
!ty__stdThreadLock = !cir.struct<struct "_stdThreadLock" incomplete>
!u32i = !cir.int<u, 32>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc9 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":26:23)
#loc10 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":26:29)
#loc102 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":180:10)
#loc103 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":180:14)
#loc104 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":180:20)
#loc105 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":180:32)
#loc131 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":44:24)
#loc132 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":44:30)
#true = #cir.bool<true> : !cir.bool
#loc276 = loc(fused[#loc9, #loc10])
#loc312 = loc(fused[#loc102, #loc103])
#loc313 = loc(fused[#loc104, #loc105])
#loc322 = loc(fused[#loc131, #loc132])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE366_Race_Condition_Within_Thread/CWE366_Race_Condition_Within_Thread__global_int_14.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.global "private" external @globalFive : !s32i {alignment = 4 : i64} loc(#loc272)
  cir.global "private" internal dsolocal @gBadInt = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc273)
  cir.func private @stdThreadCreate(!cir.ptr<!cir.func<!void (!cir.ptr<!void>)>>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!ty__stdThread>>) -> !s32i loc(#loc274)
  cir.func internal private @helperBad(%arg0: !cir.ptr<!void> loc(fused[#loc9, #loc10])) extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["args", init] {alignment = 8 : i64} loc(#loc276)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc277)
    cir.store %arg0, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc13)
    cir.scope {
      %2 = cir.const #cir.int<0> : !s32i loc(#loc16)
      cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc279)
      cir.for : cond {
        %3 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc18)
        %4 = cir.const #cir.int<1000000> : !s32i loc(#loc19)
        %5 = cir.cmp(lt, %3, %4) : !s32i, !cir.bool loc(#loc280)
        cir.condition(%5) loc(#loc20)
      } body {
        cir.scope {
          %3 = cir.get_global @gBadInt : !cir.ptr<!s32i> loc(#loc273)
          %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc22)
          %5 = cir.const #cir.int<1> : !s32i loc(#loc23)
          %6 = cir.binop(add, %4, %5) nsw : !s32i loc(#loc22)
          %7 = cir.get_global @gBadInt : !cir.ptr<!s32i> loc(#loc273)
          cir.store %6, %7 : !s32i, !cir.ptr<!s32i> loc(#loc282)
        } loc(#loc281)
        cir.yield loc(#loc15)
      } step {
        %3 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc25)
        %4 = cir.unary(inc, %3) : !s32i, !s32i loc(#loc26)
        cir.store %4, %1 : !s32i, !cir.ptr<!s32i> loc(#loc283)
        cir.yield loc(#loc278)
      } loc(#loc278)
    } loc(#loc278)
    cir.return loc(#loc8)
  } loc(#loc275)
  cir.func private @stdThreadJoin(!cir.ptr<!ty__stdThread>) -> !s32i loc(#loc284)
  cir.func private @stdThreadDestroy(!cir.ptr<!ty__stdThread>) -> !s32i loc(#loc285)
  cir.func private @printIntLine(!s32i) loc(#loc286)
  cir.func no_proto @CWE366_Race_Condition_Within_Thread__global_int_14_bad() extra(#fn_attr) {
    cir.scope {
      %0 = cir.get_global @globalFive : !cir.ptr<!s32i> loc(#loc272)
      %1 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc37)
      %2 = cir.const #cir.int<5> : !s32i loc(#loc38)
      %3 = cir.cmp(eq, %1, %2) : !s32i, !cir.bool loc(#loc289)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>>, ["threadA", init] {alignment = 8 : i64} loc(#loc292)
          %5 = cir.alloca !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>>, ["threadB", init] {alignment = 8 : i64} loc(#loc293)
          %6 = cir.const #cir.ptr<null> : !cir.ptr<!ty__stdThread> loc(#loc43)
          cir.store %6, %4 : !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>> loc(#loc292)
          %7 = cir.const #cir.ptr<null> : !cir.ptr<!ty__stdThread> loc(#loc45)
          cir.store %7, %5 : !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>> loc(#loc293)
          %8 = cir.const #cir.int<0> : !s32i loc(#loc46)
          %9 = cir.get_global @gBadInt : !cir.ptr<!s32i> loc(#loc273)
          cir.store %8, %9 : !s32i, !cir.ptr<!s32i> loc(#loc294)
          cir.scope {
            %12 = cir.get_global @helperBad : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc50)
            %13 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc51)
            %14 = cir.call @stdThreadCreate(%12, %13, %4) : (!cir.ptr<!cir.func<!void (!cir.ptr<!void>)>>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!ty__stdThread>>) -> !s32i loc(#loc52)
            %15 = cir.cast(int_to_bool, %14 : !s32i), !cir.bool loc(#loc52)
            %16 = cir.unary(not, %15) : !cir.bool, !cir.bool loc(#loc52)
            cir.if %16 {
              %17 = cir.const #cir.ptr<null> : !cir.ptr<!ty__stdThread> loc(#loc54)
              cir.store %17, %4 : !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>> loc(#loc297)
            } loc(#loc296)
          } loc(#loc295)
          cir.scope {
            %12 = cir.get_global @helperBad : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc58)
            %13 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc59)
            %14 = cir.call @stdThreadCreate(%12, %13, %5) : (!cir.ptr<!cir.func<!void (!cir.ptr<!void>)>>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!ty__stdThread>>) -> !s32i loc(#loc60)
            %15 = cir.cast(int_to_bool, %14 : !s32i), !cir.bool loc(#loc60)
            %16 = cir.unary(not, %15) : !cir.bool, !cir.bool loc(#loc60)
            cir.if %16 {
              %17 = cir.const #cir.ptr<null> : !cir.ptr<!ty__stdThread> loc(#loc62)
              cir.store %17, %5 : !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>> loc(#loc300)
            } loc(#loc299)
          } loc(#loc298)
          cir.scope {
            %12 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc66)
            %13 = cir.cast(ptr_to_bool, %12 : !cir.ptr<!ty__stdThread>), !cir.bool loc(#loc66)
            %14 = cir.ternary(%13, true {
              %15 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc68)
              %16 = cir.call @stdThreadJoin(%15) : (!cir.ptr<!ty__stdThread>) -> !s32i loc(#loc69)
              %17 = cir.cast(int_to_bool, %16 : !s32i), !cir.bool loc(#loc69)
              %18 = cir.ternary(%17, true {
                %19 = cir.const #true loc(#loc67)
                cir.yield %19 : !cir.bool loc(#loc67)
              }, false {
                %19 = cir.const #false loc(#loc67)
                cir.yield %19 : !cir.bool loc(#loc67)
              }) : (!cir.bool) -> !cir.bool loc(#loc67)
              cir.yield %18 : !cir.bool loc(#loc67)
            }, false {
              %15 = cir.const #false loc(#loc67)
              cir.yield %15 : !cir.bool loc(#loc67)
            }) : (!cir.bool) -> !cir.bool loc(#loc67)
            cir.if %14 {
              %15 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc71)
              %16 = cir.call @stdThreadDestroy(%15) : (!cir.ptr<!ty__stdThread>) -> !s32i loc(#loc72)
            } loc(#loc302)
          } loc(#loc301)
          cir.scope {
            %12 = cir.load %5 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc75)
            %13 = cir.cast(ptr_to_bool, %12 : !cir.ptr<!ty__stdThread>), !cir.bool loc(#loc75)
            %14 = cir.ternary(%13, true {
              %15 = cir.load %5 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc77)
              %16 = cir.call @stdThreadJoin(%15) : (!cir.ptr<!ty__stdThread>) -> !s32i loc(#loc78)
              %17 = cir.cast(int_to_bool, %16 : !s32i), !cir.bool loc(#loc78)
              %18 = cir.ternary(%17, true {
                %19 = cir.const #true loc(#loc76)
                cir.yield %19 : !cir.bool loc(#loc76)
              }, false {
                %19 = cir.const #false loc(#loc76)
                cir.yield %19 : !cir.bool loc(#loc76)
              }) : (!cir.bool) -> !cir.bool loc(#loc76)
              cir.yield %18 : !cir.bool loc(#loc76)
            }, false {
              %15 = cir.const #false loc(#loc76)
              cir.yield %15 : !cir.bool loc(#loc76)
            }) : (!cir.bool) -> !cir.bool loc(#loc76)
            cir.if %14 {
              %15 = cir.load %5 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc80)
              %16 = cir.call @stdThreadDestroy(%15) : (!cir.ptr<!ty__stdThread>) -> !s32i loc(#loc81)
            } loc(#loc304)
          } loc(#loc303)
          %10 = cir.get_global @gBadInt : !cir.ptr<!s32i> loc(#loc273)
          %11 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc82)
          cir.call @printIntLine(%11) : (!s32i) -> () loc(#loc83)
        } loc(#loc291)
      } loc(#loc290)
    } loc(#loc288)
    cir.return loc(#loc34)
  } loc(#loc287)
  cir.func no_proto @CWE366_Race_Condition_Within_Thread__global_int_14_good() extra(#fn_attr) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<!void ()>> loc(#loc306)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc86)
    %1 = cir.get_global @good2 : !cir.ptr<!cir.func<!void ()>> loc(#loc307)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc88)
    cir.return loc(#loc85)
  } loc(#loc305)
  cir.func private @srand(!u32i) extra(#fn_attr1) loc(#loc308)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc309)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc310)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc96)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc97)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc98)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc99)
  cir.func @main(%arg0: !s32i loc(fused[#loc102, #loc103]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc104, #loc105])) -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc312)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc313)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc101)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc106)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc106)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc107)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc108)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc108)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr1) loc(#loc109)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc96)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc96)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc110)
    %8 = cir.get_global @CWE366_Race_Condition_Within_Thread__global_int_14_good : !cir.ptr<!cir.func<!void ()>> loc(#loc314)
    cir.call @CWE366_Race_Condition_Within_Thread__global_int_14_good() : () -> () loc(#loc111)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc97)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc97)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc113)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc98)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc98)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc114)
    %13 = cir.get_global @CWE366_Race_Condition_Within_Thread__global_int_14_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc315)
    cir.call @CWE366_Race_Condition_Within_Thread__global_int_14_bad() : () -> () loc(#loc115)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc99)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc99)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc117)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc118)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc316)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc316)
    cir.return %17 : !s32i loc(#loc316)
  } loc(#loc311)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc120)
  cir.func private @stdThreadLockCreate(!cir.ptr<!cir.ptr<!ty__stdThreadLock>>) -> !s32i loc(#loc317)
  cir.global "private" internal dsolocal @gGoodLock = #cir.ptr<null> : !cir.ptr<!ty__stdThreadLock> {alignment = 8 : i64} loc(#loc318)
  cir.func private @stdThreadLockAcquire(!cir.ptr<!ty__stdThreadLock>) loc(#loc319)
  cir.func private @stdThreadLockRelease(!cir.ptr<!ty__stdThreadLock>) loc(#loc320)
  cir.func internal private @helperGood(%arg0: !cir.ptr<!void> loc(fused[#loc131, #loc132])) extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["args", init] {alignment = 8 : i64} loc(#loc322)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc323)
    cir.store %arg0, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc135)
    %2 = cir.get_global @gGoodLock : !cir.ptr<!cir.ptr<!ty__stdThreadLock>> loc(#loc318)
    %3 = cir.load %2 : !cir.ptr<!cir.ptr<!ty__stdThreadLock>>, !cir.ptr<!ty__stdThreadLock> loc(#loc136)
    cir.call @stdThreadLockAcquire(%3) : (!cir.ptr<!ty__stdThreadLock>) -> () loc(#loc137)
    cir.scope {
      %6 = cir.const #cir.int<0> : !s32i loc(#loc140)
      cir.store %6, %1 : !s32i, !cir.ptr<!s32i> loc(#loc325)
      cir.for : cond {
        %7 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc142)
        %8 = cir.const #cir.int<1000000> : !s32i loc(#loc143)
        %9 = cir.cmp(lt, %7, %8) : !s32i, !cir.bool loc(#loc326)
        cir.condition(%9) loc(#loc144)
      } body {
        cir.scope {
          %7 = cir.get_global @gGoodInt : !cir.ptr<!s32i> loc(#loc328)
          %8 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc148)
          %9 = cir.const #cir.int<1> : !s32i loc(#loc149)
          %10 = cir.binop(add, %8, %9) nsw : !s32i loc(#loc148)
          %11 = cir.get_global @gGoodInt : !cir.ptr<!s32i> loc(#loc328)
          cir.store %10, %11 : !s32i, !cir.ptr<!s32i> loc(#loc329)
        } loc(#loc327)
        cir.yield loc(#loc139)
      } step {
        %7 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc151)
        %8 = cir.unary(inc, %7) : !s32i, !s32i loc(#loc152)
        cir.store %8, %1 : !s32i, !cir.ptr<!s32i> loc(#loc330)
        cir.yield loc(#loc324)
      } loc(#loc324)
    } loc(#loc324)
    %4 = cir.get_global @gGoodLock : !cir.ptr<!cir.ptr<!ty__stdThreadLock>> loc(#loc318)
    %5 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__stdThreadLock>>, !cir.ptr<!ty__stdThreadLock> loc(#loc153)
    cir.call @stdThreadLockRelease(%5) : (!cir.ptr<!ty__stdThreadLock>) -> () loc(#loc154)
    cir.return loc(#loc130)
  } loc(#loc321)
  cir.func private @stdThreadLockDestroy(!cir.ptr<!ty__stdThreadLock>) loc(#loc331)
  cir.global "private" internal dsolocal @gGoodInt = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc328)
  cir.func no_proto internal private @good1() extra(#fn_attr) {
    cir.scope {
      %0 = cir.get_global @globalFive : !cir.ptr<!s32i> loc(#loc272)
      %1 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc161)
      %2 = cir.const #cir.int<5> : !s32i loc(#loc162)
      %3 = cir.cmp(ne, %1, %2) : !s32i, !cir.bool loc(#loc334)
      cir.if %3 {
        %4 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc120)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc120)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc166)
      } else {
        cir.scope {
          %4 = cir.alloca !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>>, ["threadA", init] {alignment = 8 : i64} loc(#loc337)
          %5 = cir.alloca !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>>, ["threadB", init] {alignment = 8 : i64} loc(#loc338)
          %6 = cir.const #cir.ptr<null> : !cir.ptr<!ty__stdThread> loc(#loc170)
          cir.store %6, %4 : !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>> loc(#loc337)
          %7 = cir.const #cir.ptr<null> : !cir.ptr<!ty__stdThread> loc(#loc172)
          cir.store %7, %5 : !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>> loc(#loc338)
          cir.scope {
            %12 = cir.get_global @gGoodLock : !cir.ptr<!cir.ptr<!ty__stdThreadLock>> loc(#loc318)
            %13 = cir.call @stdThreadLockCreate(%12) : (!cir.ptr<!cir.ptr<!ty__stdThreadLock>>) -> !s32i loc(#loc175)
            %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc175)
            %15 = cir.unary(not, %14) : !cir.bool, !cir.bool loc(#loc175)
            cir.if %15 {
              cir.return loc(#loc177)
            } loc(#loc340)
          } loc(#loc339)
          cir.scope {
            %12 = cir.get_global @helperGood : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc180)
            %13 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc181)
            %14 = cir.call @stdThreadCreate(%12, %13, %4) : (!cir.ptr<!cir.func<!void (!cir.ptr<!void>)>>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!ty__stdThread>>) -> !s32i loc(#loc182)
            %15 = cir.cast(int_to_bool, %14 : !s32i), !cir.bool loc(#loc182)
            %16 = cir.unary(not, %15) : !cir.bool, !cir.bool loc(#loc182)
            cir.if %16 {
              %17 = cir.const #cir.ptr<null> : !cir.ptr<!ty__stdThread> loc(#loc184)
              cir.store %17, %4 : !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>> loc(#loc343)
            } loc(#loc342)
          } loc(#loc341)
          cir.scope {
            %12 = cir.get_global @helperGood : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc188)
            %13 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc189)
            %14 = cir.call @stdThreadCreate(%12, %13, %5) : (!cir.ptr<!cir.func<!void (!cir.ptr<!void>)>>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!ty__stdThread>>) -> !s32i loc(#loc190)
            %15 = cir.cast(int_to_bool, %14 : !s32i), !cir.bool loc(#loc190)
            %16 = cir.unary(not, %15) : !cir.bool, !cir.bool loc(#loc190)
            cir.if %16 {
              %17 = cir.const #cir.ptr<null> : !cir.ptr<!ty__stdThread> loc(#loc192)
              cir.store %17, %5 : !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>> loc(#loc346)
            } loc(#loc345)
          } loc(#loc344)
          cir.scope {
            %12 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc196)
            %13 = cir.cast(ptr_to_bool, %12 : !cir.ptr<!ty__stdThread>), !cir.bool loc(#loc196)
            %14 = cir.ternary(%13, true {
              %15 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc198)
              %16 = cir.call @stdThreadJoin(%15) : (!cir.ptr<!ty__stdThread>) -> !s32i loc(#loc199)
              %17 = cir.cast(int_to_bool, %16 : !s32i), !cir.bool loc(#loc199)
              %18 = cir.ternary(%17, true {
                %19 = cir.const #true loc(#loc197)
                cir.yield %19 : !cir.bool loc(#loc197)
              }, false {
                %19 = cir.const #false loc(#loc197)
                cir.yield %19 : !cir.bool loc(#loc197)
              }) : (!cir.bool) -> !cir.bool loc(#loc197)
              cir.yield %18 : !cir.bool loc(#loc197)
            }, false {
              %15 = cir.const #false loc(#loc197)
              cir.yield %15 : !cir.bool loc(#loc197)
            }) : (!cir.bool) -> !cir.bool loc(#loc197)
            cir.if %14 {
              %15 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc201)
              %16 = cir.call @stdThreadDestroy(%15) : (!cir.ptr<!ty__stdThread>) -> !s32i loc(#loc202)
            } loc(#loc348)
          } loc(#loc347)
          cir.scope {
            %12 = cir.load %5 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc205)
            %13 = cir.cast(ptr_to_bool, %12 : !cir.ptr<!ty__stdThread>), !cir.bool loc(#loc205)
            %14 = cir.ternary(%13, true {
              %15 = cir.load %5 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc207)
              %16 = cir.call @stdThreadJoin(%15) : (!cir.ptr<!ty__stdThread>) -> !s32i loc(#loc208)
              %17 = cir.cast(int_to_bool, %16 : !s32i), !cir.bool loc(#loc208)
              %18 = cir.ternary(%17, true {
                %19 = cir.const #true loc(#loc206)
                cir.yield %19 : !cir.bool loc(#loc206)
              }, false {
                %19 = cir.const #false loc(#loc206)
                cir.yield %19 : !cir.bool loc(#loc206)
              }) : (!cir.bool) -> !cir.bool loc(#loc206)
              cir.yield %18 : !cir.bool loc(#loc206)
            }, false {
              %15 = cir.const #false loc(#loc206)
              cir.yield %15 : !cir.bool loc(#loc206)
            }) : (!cir.bool) -> !cir.bool loc(#loc206)
            cir.if %14 {
              %15 = cir.load %5 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc210)
              %16 = cir.call @stdThreadDestroy(%15) : (!cir.ptr<!ty__stdThread>) -> !s32i loc(#loc211)
            } loc(#loc350)
          } loc(#loc349)
          %8 = cir.get_global @gGoodLock : !cir.ptr<!cir.ptr<!ty__stdThreadLock>> loc(#loc318)
          %9 = cir.load %8 : !cir.ptr<!cir.ptr<!ty__stdThreadLock>>, !cir.ptr<!ty__stdThreadLock> loc(#loc212)
          cir.call @stdThreadLockDestroy(%9) : (!cir.ptr<!ty__stdThreadLock>) -> () loc(#loc213)
          %10 = cir.get_global @gGoodInt : !cir.ptr<!s32i> loc(#loc328)
          %11 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc214)
          cir.call @printIntLine(%11) : (!s32i) -> () loc(#loc215)
        } loc(#loc336)
      } loc(#loc335)
    } loc(#loc333)
    cir.return loc(#loc158)
  } loc(#loc332)
  cir.func no_proto internal private @good2() extra(#fn_attr) {
    cir.scope {
      %0 = cir.get_global @globalFive : !cir.ptr<!s32i> loc(#loc272)
      %1 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc220)
      %2 = cir.const #cir.int<5> : !s32i loc(#loc221)
      %3 = cir.cmp(eq, %1, %2) : !s32i, !cir.bool loc(#loc353)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>>, ["threadA", init] {alignment = 8 : i64} loc(#loc356)
          %5 = cir.alloca !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>>, ["threadB", init] {alignment = 8 : i64} loc(#loc357)
          %6 = cir.const #cir.ptr<null> : !cir.ptr<!ty__stdThread> loc(#loc226)
          cir.store %6, %4 : !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>> loc(#loc356)
          %7 = cir.const #cir.ptr<null> : !cir.ptr<!ty__stdThread> loc(#loc228)
          cir.store %7, %5 : !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>> loc(#loc357)
          cir.scope {
            %12 = cir.get_global @gGoodLock : !cir.ptr<!cir.ptr<!ty__stdThreadLock>> loc(#loc318)
            %13 = cir.call @stdThreadLockCreate(%12) : (!cir.ptr<!cir.ptr<!ty__stdThreadLock>>) -> !s32i loc(#loc231)
            %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc231)
            %15 = cir.unary(not, %14) : !cir.bool, !cir.bool loc(#loc231)
            cir.if %15 {
              cir.return loc(#loc233)
            } loc(#loc359)
          } loc(#loc358)
          cir.scope {
            %12 = cir.get_global @helperGood : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc236)
            %13 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc237)
            %14 = cir.call @stdThreadCreate(%12, %13, %4) : (!cir.ptr<!cir.func<!void (!cir.ptr<!void>)>>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!ty__stdThread>>) -> !s32i loc(#loc238)
            %15 = cir.cast(int_to_bool, %14 : !s32i), !cir.bool loc(#loc238)
            %16 = cir.unary(not, %15) : !cir.bool, !cir.bool loc(#loc238)
            cir.if %16 {
              %17 = cir.const #cir.ptr<null> : !cir.ptr<!ty__stdThread> loc(#loc240)
              cir.store %17, %4 : !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>> loc(#loc362)
            } loc(#loc361)
          } loc(#loc360)
          cir.scope {
            %12 = cir.get_global @helperGood : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc244)
            %13 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc245)
            %14 = cir.call @stdThreadCreate(%12, %13, %5) : (!cir.ptr<!cir.func<!void (!cir.ptr<!void>)>>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!ty__stdThread>>) -> !s32i loc(#loc246)
            %15 = cir.cast(int_to_bool, %14 : !s32i), !cir.bool loc(#loc246)
            %16 = cir.unary(not, %15) : !cir.bool, !cir.bool loc(#loc246)
            cir.if %16 {
              %17 = cir.const #cir.ptr<null> : !cir.ptr<!ty__stdThread> loc(#loc248)
              cir.store %17, %5 : !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>> loc(#loc365)
            } loc(#loc364)
          } loc(#loc363)
          cir.scope {
            %12 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc252)
            %13 = cir.cast(ptr_to_bool, %12 : !cir.ptr<!ty__stdThread>), !cir.bool loc(#loc252)
            %14 = cir.ternary(%13, true {
              %15 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc254)
              %16 = cir.call @stdThreadJoin(%15) : (!cir.ptr<!ty__stdThread>) -> !s32i loc(#loc255)
              %17 = cir.cast(int_to_bool, %16 : !s32i), !cir.bool loc(#loc255)
              %18 = cir.ternary(%17, true {
                %19 = cir.const #true loc(#loc253)
                cir.yield %19 : !cir.bool loc(#loc253)
              }, false {
                %19 = cir.const #false loc(#loc253)
                cir.yield %19 : !cir.bool loc(#loc253)
              }) : (!cir.bool) -> !cir.bool loc(#loc253)
              cir.yield %18 : !cir.bool loc(#loc253)
            }, false {
              %15 = cir.const #false loc(#loc253)
              cir.yield %15 : !cir.bool loc(#loc253)
            }) : (!cir.bool) -> !cir.bool loc(#loc253)
            cir.if %14 {
              %15 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc257)
              %16 = cir.call @stdThreadDestroy(%15) : (!cir.ptr<!ty__stdThread>) -> !s32i loc(#loc258)
            } loc(#loc367)
          } loc(#loc366)
          cir.scope {
            %12 = cir.load %5 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc261)
            %13 = cir.cast(ptr_to_bool, %12 : !cir.ptr<!ty__stdThread>), !cir.bool loc(#loc261)
            %14 = cir.ternary(%13, true {
              %15 = cir.load %5 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc263)
              %16 = cir.call @stdThreadJoin(%15) : (!cir.ptr<!ty__stdThread>) -> !s32i loc(#loc264)
              %17 = cir.cast(int_to_bool, %16 : !s32i), !cir.bool loc(#loc264)
              %18 = cir.ternary(%17, true {
                %19 = cir.const #true loc(#loc262)
                cir.yield %19 : !cir.bool loc(#loc262)
              }, false {
                %19 = cir.const #false loc(#loc262)
                cir.yield %19 : !cir.bool loc(#loc262)
              }) : (!cir.bool) -> !cir.bool loc(#loc262)
              cir.yield %18 : !cir.bool loc(#loc262)
            }, false {
              %15 = cir.const #false loc(#loc262)
              cir.yield %15 : !cir.bool loc(#loc262)
            }) : (!cir.bool) -> !cir.bool loc(#loc262)
            cir.if %14 {
              %15 = cir.load %5 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc266)
              %16 = cir.call @stdThreadDestroy(%15) : (!cir.ptr<!ty__stdThread>) -> !s32i loc(#loc267)
            } loc(#loc369)
          } loc(#loc368)
          %8 = cir.get_global @gGoodLock : !cir.ptr<!cir.ptr<!ty__stdThreadLock>> loc(#loc318)
          %9 = cir.load %8 : !cir.ptr<!cir.ptr<!ty__stdThreadLock>>, !cir.ptr<!ty__stdThreadLock> loc(#loc268)
          cir.call @stdThreadLockDestroy(%9) : (!cir.ptr<!ty__stdThreadLock>) -> () loc(#loc269)
          %10 = cir.get_global @gGoodInt : !cir.ptr<!s32i> loc(#loc328)
          %11 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc270)
          cir.call @printIntLine(%11) : (!s32i) -> () loc(#loc271)
        } loc(#loc355)
      } loc(#loc354)
    } loc(#loc352)
    cir.return loc(#loc217)
  } loc(#loc351)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE366_Race_Condition_Within_Thread/CWE366_Race_Condition_Within_Thread__global_int_14.c":0:0)
#loc1 = loc("../../testcasesupport/std_testcase.h":118:1)
#loc2 = loc("../../testcasesupport/std_testcase.h":118:12)
#loc3 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":22:1)
#loc4 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":22:22)
#loc5 = loc("../../testcasesupport/std_thread.h":14:1)
#loc6 = loc("../../testcasesupport/std_thread.h":14:74)
#loc7 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":26:1)
#loc8 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":42:1)
#loc11 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":28:5)
#loc12 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":28:9)
#loc13 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":27:1)
#loc14 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":38:5)
#loc15 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":41:5)
#loc16 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":38:14)
#loc17 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":38:10)
#loc18 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":38:17)
#loc19 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":38:21)
#loc20 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":38:19)
#loc21 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":39:5)
#loc22 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":40:19)
#loc23 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":40:29)
#loc24 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":40:9)
#loc25 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":38:31)
#loc26 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":38:30)
#loc27 = loc("../../testcasesupport/std_thread.h":15:1)
#loc28 = loc("../../testcasesupport/std_thread.h":15:35)
#loc29 = loc("../../testcasesupport/std_thread.h":16:1)
#loc30 = loc("../../testcasesupport/std_thread.h":16:38)
#loc31 = loc("../../testcasesupport/std_testcase_io.h":18:1)
#loc32 = loc("../../testcasesupport/std_testcase_io.h":18:33)
#loc33 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":59:1)
#loc34 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":86:1)
#loc35 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":61:5)
#loc36 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":85:5)
#loc37 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":61:8)
#loc38 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":61:20)
#loc39 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":62:5)
#loc40 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":63:9)
#loc41 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":84:9)
#loc42 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":64:13)
#loc43 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":64:33)
#loc44 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":65:13)
#loc45 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":65:33)
#loc46 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":66:23)
#loc47 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":66:13)
#loc48 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":67:13)
#loc49 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":70:13)
#loc50 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":67:34)
#loc51 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":67:45)
#loc52 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":67:18)
#loc53 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":68:13)
#loc54 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":69:27)
#loc55 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":69:17)
#loc56 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":71:13)
#loc57 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":74:13)
#loc58 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":71:34)
#loc59 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":71:45)
#loc60 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":71:18)
#loc61 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":72:13)
#loc62 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":73:27)
#loc63 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":73:17)
#loc64 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":75:13)
#loc65 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":78:13)
#loc66 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":75:17)
#loc67 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":75:25)
#loc68 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":75:42)
#loc69 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":75:28)
#loc70 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":76:13)
#loc71 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":77:34)
#loc72 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":77:17)
#loc73 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":79:13)
#loc74 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":82:13)
#loc75 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":79:17)
#loc76 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":79:25)
#loc77 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":79:42)
#loc78 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":79:28)
#loc79 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":80:13)
#loc80 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":81:34)
#loc81 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":81:17)
#loc82 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":83:26)
#loc83 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":83:13)
#loc84 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":165:1)
#loc85 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":169:1)
#loc86 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":167:5)
#loc87 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":167:11)
#loc88 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":168:5)
#loc89 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":168:11)
#loc90 = loc("/usr/include/stdlib.h":575:1)
#loc91 = loc("/usr/include/stdlib.h":575:41)
#loc92 = loc("/usr/include/time.h":76:1)
#loc93 = loc("/usr/include/time.h":76:38)
#loc94 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc95 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc96 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":185:15)
#loc97 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":187:15)
#loc98 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":190:15)
#loc99 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":192:15)
#loc100 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":180:1)
#loc101 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":195:1)
#loc106 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":181:1)
#loc107 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":183:27)
#loc108 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":183:22)
#loc109 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":183:5)
#loc110 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":185:5)
#loc111 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":186:5)
#loc112 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":186:61)
#loc113 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":187:5)
#loc114 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":190:5)
#loc115 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":191:5)
#loc116 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":191:60)
#loc117 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":192:5)
#loc118 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":194:12)
#loc119 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":194:5)
#loc120 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":98:19)
#loc121 = loc("../../testcasesupport/std_thread.h":18:1)
#loc122 = loc("../../testcasesupport/std_thread.h":18:44)
#loc123 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":24:1)
#loc124 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":24:34)
#loc125 = loc("../../testcasesupport/std_thread.h":19:1)
#loc126 = loc("../../testcasesupport/std_thread.h":19:45)
#loc127 = loc("../../testcasesupport/std_thread.h":20:1)
#loc128 = loc("../../testcasesupport/std_thread.h":20:45)
#loc129 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":44:1)
#loc130 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":55:1)
#loc133 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":46:5)
#loc134 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":46:9)
#loc135 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":45:1)
#loc136 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":49:26)
#loc137 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":49:5)
#loc138 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":50:5)
#loc139 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":53:5)
#loc140 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":50:14)
#loc141 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":50:10)
#loc142 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":50:17)
#loc143 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":50:21)
#loc144 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":50:19)
#loc145 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":51:5)
#loc146 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":23:1)
#loc147 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":23:23)
#loc148 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":52:20)
#loc149 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":52:31)
#loc150 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":52:9)
#loc151 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":50:31)
#loc152 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":50:30)
#loc153 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":54:26)
#loc154 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":54:5)
#loc155 = loc("../../testcasesupport/std_thread.h":21:1)
#loc156 = loc("../../testcasesupport/std_thread.h":21:45)
#loc157 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":93:1)
#loc158 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":129:1)
#loc159 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":95:5)
#loc160 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":128:5)
#loc161 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":95:8)
#loc162 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":95:20)
#loc163 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":96:5)
#loc164 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":99:5)
#loc165 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":101:5)
#loc166 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":98:9)
#loc167 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":102:9)
#loc168 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":127:9)
#loc169 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":103:13)
#loc170 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":103:33)
#loc171 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":104:13)
#loc172 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":104:33)
#loc173 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":105:13)
#loc174 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":108:13)
#loc175 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":105:18)
#loc176 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":106:13)
#loc177 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":107:17)
#loc178 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":109:13)
#loc179 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":112:13)
#loc180 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":109:34)
#loc181 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":109:46)
#loc182 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":109:18)
#loc183 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":110:13)
#loc184 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":111:27)
#loc185 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":111:17)
#loc186 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":113:13)
#loc187 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":116:13)
#loc188 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":113:34)
#loc189 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":113:46)
#loc190 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":113:18)
#loc191 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":114:13)
#loc192 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":115:27)
#loc193 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":115:17)
#loc194 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":117:13)
#loc195 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":120:13)
#loc196 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":117:17)
#loc197 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":117:25)
#loc198 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":117:42)
#loc199 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":117:28)
#loc200 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":118:13)
#loc201 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":119:34)
#loc202 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":119:17)
#loc203 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":121:13)
#loc204 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":124:13)
#loc205 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":121:17)
#loc206 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":121:25)
#loc207 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":121:42)
#loc208 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":121:28)
#loc209 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":122:13)
#loc210 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":123:34)
#loc211 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":123:17)
#loc212 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":125:34)
#loc213 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":125:13)
#loc214 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":126:26)
#loc215 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":126:13)
#loc216 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":132:1)
#loc217 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":163:1)
#loc218 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":134:5)
#loc219 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":162:5)
#loc220 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":134:8)
#loc221 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":134:20)
#loc222 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":135:5)
#loc223 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":136:9)
#loc224 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":161:9)
#loc225 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":137:13)
#loc226 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":137:33)
#loc227 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":138:13)
#loc228 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":138:33)
#loc229 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":139:13)
#loc230 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":142:13)
#loc231 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":139:18)
#loc232 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":140:13)
#loc233 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":141:17)
#loc234 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":143:13)
#loc235 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":146:13)
#loc236 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":143:34)
#loc237 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":143:46)
#loc238 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":143:18)
#loc239 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":144:13)
#loc240 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":145:27)
#loc241 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":145:17)
#loc242 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":147:13)
#loc243 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":150:13)
#loc244 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":147:34)
#loc245 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":147:46)
#loc246 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":147:18)
#loc247 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":148:13)
#loc248 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":149:27)
#loc249 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":149:17)
#loc250 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":151:13)
#loc251 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":154:13)
#loc252 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":151:17)
#loc253 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":151:25)
#loc254 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":151:42)
#loc255 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":151:28)
#loc256 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":152:13)
#loc257 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":153:34)
#loc258 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":153:17)
#loc259 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":155:13)
#loc260 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":158:13)
#loc261 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":155:17)
#loc262 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":155:25)
#loc263 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":155:42)
#loc264 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":155:28)
#loc265 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":156:13)
#loc266 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":157:34)
#loc267 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":157:17)
#loc268 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":159:34)
#loc269 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":159:13)
#loc270 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":160:26)
#loc271 = loc("CWE366_Race_Condition_Within_Thread__global_int_14.c":160:13)
#loc272 = loc(fused[#loc1, #loc2])
#loc273 = loc(fused[#loc3, #loc4])
#loc274 = loc(fused[#loc5, #loc6])
#loc275 = loc(fused[#loc7, #loc8])
#loc277 = loc(fused[#loc11, #loc12])
#loc278 = loc(fused[#loc14, #loc15])
#loc279 = loc(fused[#loc17, #loc16])
#loc280 = loc(fused[#loc18, #loc19])
#loc281 = loc(fused[#loc21, #loc15])
#loc282 = loc(fused[#loc24, #loc23])
#loc283 = loc(fused[#loc26, #loc25])
#loc284 = loc(fused[#loc27, #loc28])
#loc285 = loc(fused[#loc29, #loc30])
#loc286 = loc(fused[#loc31, #loc32])
#loc287 = loc(fused[#loc33, #loc34])
#loc288 = loc(fused[#loc35, #loc36])
#loc289 = loc(fused[#loc37, #loc38])
#loc290 = loc(fused[#loc39, #loc36])
#loc291 = loc(fused[#loc40, #loc41])
#loc292 = loc(fused[#loc42, #loc43])
#loc293 = loc(fused[#loc44, #loc45])
#loc294 = loc(fused[#loc47, #loc46])
#loc295 = loc(fused[#loc48, #loc49])
#loc296 = loc(fused[#loc53, #loc49])
#loc297 = loc(fused[#loc55, #loc54])
#loc298 = loc(fused[#loc56, #loc57])
#loc299 = loc(fused[#loc61, #loc57])
#loc300 = loc(fused[#loc63, #loc62])
#loc301 = loc(fused[#loc64, #loc65])
#loc302 = loc(fused[#loc70, #loc65])
#loc303 = loc(fused[#loc73, #loc74])
#loc304 = loc(fused[#loc79, #loc74])
#loc305 = loc(fused[#loc84, #loc85])
#loc306 = loc(fused[#loc86, #loc87])
#loc307 = loc(fused[#loc88, #loc89])
#loc308 = loc(fused[#loc90, #loc91])
#loc309 = loc(fused[#loc92, #loc93])
#loc310 = loc(fused[#loc94, #loc95])
#loc311 = loc(fused[#loc100, #loc101])
#loc314 = loc(fused[#loc111, #loc112])
#loc315 = loc(fused[#loc115, #loc116])
#loc316 = loc(fused[#loc119, #loc118])
#loc317 = loc(fused[#loc121, #loc122])
#loc318 = loc(fused[#loc123, #loc124])
#loc319 = loc(fused[#loc125, #loc126])
#loc320 = loc(fused[#loc127, #loc128])
#loc321 = loc(fused[#loc129, #loc130])
#loc323 = loc(fused[#loc133, #loc134])
#loc324 = loc(fused[#loc138, #loc139])
#loc325 = loc(fused[#loc141, #loc140])
#loc326 = loc(fused[#loc142, #loc143])
#loc327 = loc(fused[#loc145, #loc139])
#loc328 = loc(fused[#loc146, #loc147])
#loc329 = loc(fused[#loc150, #loc149])
#loc330 = loc(fused[#loc152, #loc151])
#loc331 = loc(fused[#loc155, #loc156])
#loc332 = loc(fused[#loc157, #loc158])
#loc333 = loc(fused[#loc159, #loc160])
#loc334 = loc(fused[#loc161, #loc162])
#loc335 = loc(fused[#loc163, #loc164, #loc165, #loc160])
#loc336 = loc(fused[#loc167, #loc168])
#loc337 = loc(fused[#loc169, #loc170])
#loc338 = loc(fused[#loc171, #loc172])
#loc339 = loc(fused[#loc173, #loc174])
#loc340 = loc(fused[#loc176, #loc174])
#loc341 = loc(fused[#loc178, #loc179])
#loc342 = loc(fused[#loc183, #loc179])
#loc343 = loc(fused[#loc185, #loc184])
#loc344 = loc(fused[#loc186, #loc187])
#loc345 = loc(fused[#loc191, #loc187])
#loc346 = loc(fused[#loc193, #loc192])
#loc347 = loc(fused[#loc194, #loc195])
#loc348 = loc(fused[#loc200, #loc195])
#loc349 = loc(fused[#loc203, #loc204])
#loc350 = loc(fused[#loc209, #loc204])
#loc351 = loc(fused[#loc216, #loc217])
#loc352 = loc(fused[#loc218, #loc219])
#loc353 = loc(fused[#loc220, #loc221])
#loc354 = loc(fused[#loc222, #loc219])
#loc355 = loc(fused[#loc223, #loc224])
#loc356 = loc(fused[#loc225, #loc226])
#loc357 = loc(fused[#loc227, #loc228])
#loc358 = loc(fused[#loc229, #loc230])
#loc359 = loc(fused[#loc232, #loc230])
#loc360 = loc(fused[#loc234, #loc235])
#loc361 = loc(fused[#loc239, #loc235])
#loc362 = loc(fused[#loc241, #loc240])
#loc363 = loc(fused[#loc242, #loc243])
#loc364 = loc(fused[#loc247, #loc243])
#loc365 = loc(fused[#loc249, #loc248])
#loc366 = loc(fused[#loc250, #loc251])
#loc367 = loc(fused[#loc256, #loc251])
#loc368 = loc(fused[#loc259, #loc260])
#loc369 = loc(fused[#loc265, #loc260])
