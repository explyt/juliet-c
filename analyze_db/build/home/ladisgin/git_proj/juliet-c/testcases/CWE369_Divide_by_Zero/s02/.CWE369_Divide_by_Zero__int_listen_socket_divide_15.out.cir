!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc184 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":429:10)
#loc185 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":429:14)
#loc186 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":429:20)
#loc187 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":429:32)
#true = #cir.bool<true> : !cir.bool
!ty_in_addr = !cir.struct<struct "in_addr" {!u32i} #cir.record.decl.ast>
#loc625 = loc(fused[#loc184, #loc185])
#loc626 = loc(fused[#loc186, #loc187])
!ty_sockaddr = !cir.struct<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.struct<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE369_Divide_by_Zero/s02/CWE369_Divide_by_Zero__int_listen_socket_divide_15.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc558)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc559)
  cir.func private @bind(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc560)
  cir.func private @listen(!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc561)
  cir.func private @accept(!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc562)
  cir.func private @recv(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc563)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc564)
  cir.func private @close(!s32i) -> !s32i loc(#loc565)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc566)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc19)
  cir.func private @printIntLine(!s32i) loc(#loc567)
  cir.func no_proto @CWE369_Divide_by_Zero__int_listen_socket_divide_15_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc569)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc26)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc27)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc570)
    cir.scope {
      %3 = cir.const #cir.int<6> : !s32i loc(#loc31)
      cir.switch (%3 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          cir.scope {
            %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc573)
            %5 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc574)
            %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc575)
            %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc576)
            %8 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc577)
            %9 = cir.const #cir.int<1> : !s32i loc(#loc40)
            %10 = cir.unary(minus, %9) : !s32i, !s32i loc(#loc40)
            cir.store %10, %6 : !s32i, !cir.ptr<!s32i> loc(#loc575)
            %11 = cir.const #cir.int<1> : !s32i loc(#loc42)
            %12 = cir.unary(minus, %11) : !s32i, !s32i loc(#loc42)
            cir.store %12, %7 : !s32i, !cir.ptr<!s32i> loc(#loc576)
            cir.scope {
              cir.do {
                %13 = cir.const #cir.int<2> : !s32i loc(#loc47)
                %14 = cir.const #cir.int<1> : !s32i loc(#loc48)
                %15 = cir.const #cir.int<6> : !s32i loc(#loc49)
                %16 = cir.call @socket(%13, %14, %15) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc50)
                cir.store %16, %6 : !s32i, !cir.ptr<!s32i> loc(#loc579)
                cir.scope {
                  %58 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc55)
                  %59 = cir.const #cir.int<1> : !s32i loc(#loc56)
                  %60 = cir.unary(minus, %59) : !s32i, !s32i loc(#loc56)
                  %61 = cir.cmp(eq, %58, %60) : !s32i, !cir.bool loc(#loc581)
                  cir.if %61 {
                    cir.break loc(#loc58)
                  } loc(#loc582)
                } loc(#loc580)
                %17 = cir.cast(bitcast, %5 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc583)
                %18 = cir.const #cir.int<0> : !s32i loc(#loc61)
                %19 = cir.const #cir.int<16> : !u64i loc(#loc584)
                cir.libc.memset %19 bytes from %17 set to %18 : !cir.ptr<!void>, !s32i, !u64i loc(#loc585)
                %20 = cir.const #cir.int<2> : !s32i loc(#loc66)
                %21 = cir.cast(integral, %20 : !s32i), !u16i loc(#loc66)
                %22 = cir.get_member %5[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc67)
                cir.store %21, %22 : !u16i, !cir.ptr<!u16i> loc(#loc586)
                %23 = cir.const #cir.int<0> : !s32i loc(#loc69)
                %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc69)
                %25 = cir.get_member %5[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc70)
                %26 = cir.get_member %25[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc71)
                cir.store %24, %26 : !u32i, !cir.ptr<!u32i> loc(#loc587)
                %27 = cir.const #cir.int<27015> : !s32i loc(#loc73)
                %28 = cir.cast(integral, %27 : !s32i), !u16i loc(#loc73)
                %29 = cir.call @htons(%28) : (!u16i) -> !u16i extra(#fn_attr) loc(#loc74)
                %30 = cir.get_member %5[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc75)
                cir.store %29, %30 : !u16i, !cir.ptr<!u16i> loc(#loc588)
                cir.scope {
                  %58 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc80)
                  %59 = cir.cast(bitcast, %5 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc590)
                  %60 = cir.const #cir.int<16> : !u64i loc(#loc591)
                  %61 = cir.cast(integral, %60 : !u64i), !u32i loc(#loc591)
                  %62 = cir.call @bind(%58, %59, %61) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc85)
                  %63 = cir.const #cir.int<1> : !s32i loc(#loc86)
                  %64 = cir.unary(minus, %63) : !s32i, !s32i loc(#loc86)
                  %65 = cir.cmp(eq, %62, %64) : !s32i, !cir.bool loc(#loc592)
                  cir.if %65 {
                    cir.break loc(#loc88)
                  } loc(#loc593)
                } loc(#loc589)
                cir.scope {
                  %58 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc91)
                  %59 = cir.const #cir.int<5> : !s32i loc(#loc92)
                  %60 = cir.call @listen(%58, %59) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc93)
                  %61 = cir.const #cir.int<1> : !s32i loc(#loc94)
                  %62 = cir.unary(minus, %61) : !s32i, !s32i loc(#loc94)
                  %63 = cir.cmp(eq, %60, %62) : !s32i, !cir.bool loc(#loc595)
                  cir.if %63 {
                    cir.break loc(#loc96)
                  } loc(#loc596)
                } loc(#loc594)
                %31 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc97)
                %32 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc98)
                %33 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc99)
                %34 = cir.call @accept(%31, %32, %33) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc100)
                cir.store %34, %7 : !s32i, !cir.ptr<!s32i> loc(#loc597)
                cir.scope {
                  %58 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc105)
                  %59 = cir.const #cir.int<1> : !s32i loc(#loc106)
                  %60 = cir.unary(minus, %59) : !s32i, !s32i loc(#loc106)
                  %61 = cir.cmp(eq, %58, %60) : !s32i, !cir.bool loc(#loc599)
                  cir.if %61 {
                    cir.break loc(#loc108)
                  } loc(#loc600)
                } loc(#loc598)
                %35 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc109)
                %36 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc110)
                %37 = cir.cast(bitcast, %36 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc110)
                %38 = cir.const #cir.int<3> : !s32i loc(#loc111)
                %39 = cir.cast(integral, %38 : !s32i), !u64i loc(#loc111)
                %40 = cir.const #cir.int<4> : !u64i loc(#loc111)
                %41 = cir.binop(mul, %39, %40) : !u64i loc(#loc111)
                %42 = cir.const #cir.int<2> : !s32i loc(#loc111)
                %43 = cir.cast(integral, %42 : !s32i), !u64i loc(#loc111)
                %44 = cir.binop(add, %41, %43) : !u64i loc(#loc111)
                %45 = cir.const #cir.int<1> : !s32i loc(#loc112)
                %46 = cir.cast(integral, %45 : !s32i), !u64i loc(#loc112)
                %47 = cir.binop(sub, %44, %46) : !u64i loc(#loc601)
                %48 = cir.const #cir.int<0> : !s32i loc(#loc113)
                %49 = cir.call @recv(%35, %37, %47, %48) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc114)
                %50 = cir.cast(integral, %49 : !s64i), !s32i loc(#loc114)
                cir.store %50, %4 : !s32i, !cir.ptr<!s32i> loc(#loc602)
                cir.scope {
                  %58 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc119)
                  %59 = cir.const #cir.int<1> : !s32i loc(#loc120)
                  %60 = cir.unary(minus, %59) : !s32i, !s32i loc(#loc120)
                  %61 = cir.cmp(eq, %58, %60) : !s32i, !cir.bool loc(#loc604)
                  %62 = cir.ternary(%61, true {
                    %63 = cir.const #true loc(#loc121)
                    cir.yield %63 : !cir.bool loc(#loc121)
                  }, false {
                    %63 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc122)
                    %64 = cir.const #cir.int<0> : !s32i loc(#loc123)
                    %65 = cir.cmp(eq, %63, %64) : !s32i, !cir.bool loc(#loc605)
                    %66 = cir.ternary(%65, true {
                      %67 = cir.const #true loc(#loc121)
                      cir.yield %67 : !cir.bool loc(#loc121)
                    }, false {
                      %67 = cir.const #false loc(#loc121)
                      cir.yield %67 : !cir.bool loc(#loc121)
                    }) : (!cir.bool) -> !cir.bool loc(#loc121)
                    cir.yield %66 : !cir.bool loc(#loc121)
                  }) : (!cir.bool) -> !cir.bool loc(#loc121)
                  cir.if %62 {
                    cir.break loc(#loc125)
                  } loc(#loc606)
                } loc(#loc603)
                %51 = cir.const #cir.int<0> : !s32i loc(#loc126)
                %52 = cir.cast(integral, %51 : !s32i), !s8i loc(#loc126)
                %53 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc127)
                %54 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc128)
                %55 = cir.ptr_stride(%54 : !cir.ptr<!s8i>, %53 : !s32i), !cir.ptr<!s8i> loc(#loc128)
                cir.store %52, %55 : !s8i, !cir.ptr<!s8i> loc(#loc607)
                %56 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc129)
                %57 = cir.call @atoi(%56) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc130)
                cir.store %57, %0 : !s32i, !cir.ptr<!s32i> loc(#loc608)
                cir.yield loc(#loc46)
              } while {
                %13 = cir.const #cir.int<0> : !s32i loc(#loc133)
                %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc133)
                cir.condition(%14) loc(#loc133)
              } loc(#loc578)
            } loc(#loc578)
            cir.scope {
              %13 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc136)
              %14 = cir.const #cir.int<1> : !s32i loc(#loc137)
              %15 = cir.unary(minus, %14) : !s32i, !s32i loc(#loc137)
              %16 = cir.cmp(ne, %13, %15) : !s32i, !cir.bool loc(#loc610)
              cir.if %16 {
                %17 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc139)
                %18 = cir.call @close(%17) : (!s32i) -> !s32i loc(#loc140)
              } loc(#loc611)
            } loc(#loc609)
            cir.scope {
              %13 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc143)
              %14 = cir.const #cir.int<1> : !s32i loc(#loc144)
              %15 = cir.unary(minus, %14) : !s32i, !s32i loc(#loc144)
              %16 = cir.cmp(ne, %13, %15) : !s32i, !cir.bool loc(#loc613)
              cir.if %16 {
                %17 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc146)
                %18 = cir.call @close(%17) : (!s32i) -> !s32i loc(#loc147)
              } loc(#loc614)
            } loc(#loc612)
          } loc(#loc572)
          cir.break loc(#loc148)
        } loc(#loc32)
        cir.case(default, []) {
          %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc19)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc19)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc150)
          cir.break loc(#loc151)
        } loc(#loc149)
        cir.yield loc(#loc29)
      } loc(#loc29)
    } loc(#loc571)
    cir.scope {
      %3 = cir.const #cir.int<7> : !s32i loc(#loc154)
      cir.switch (%3 : !s32i) {
        cir.case(equal, [#cir.int<7> : !s32i]) {
          %4 = cir.const #cir.int<100> : !s32i loc(#loc156)
          %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc157)
          %6 = cir.binop(div, %4, %5) : !s32i loc(#loc616)
          cir.call @printIntLine(%6) : (!s32i) -> () loc(#loc158)
          cir.break loc(#loc159)
        } loc(#loc155)
        cir.case(default, []) {
          %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc161)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc161)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc162)
          cir.break loc(#loc163)
        } loc(#loc160)
        cir.yield loc(#loc152)
      } loc(#loc152)
    } loc(#loc615)
    cir.return loc(#loc23)
  } loc(#loc568)
  cir.func no_proto @CWE369_Divide_by_Zero__int_listen_socket_divide_15_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc618)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc166)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc619)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc168)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc620)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc170)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc621)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc172)
    cir.return loc(#loc165)
  } loc(#loc617)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc622)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc623)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc178)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc179)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc180)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc181)
  cir.func @main(%arg0: !s32i loc(fused[#loc184, #loc185]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc186, #loc187])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc625)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc626)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc183)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc188)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc188)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc189)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc190)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc190)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc191)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc178)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc178)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc192)
    %8 = cir.get_global @CWE369_Divide_by_Zero__int_listen_socket_divide_15_good : !cir.ptr<!cir.func<!void ()>> loc(#loc627)
    cir.call @CWE369_Divide_by_Zero__int_listen_socket_divide_15_good() : () -> () loc(#loc193)
    %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc179)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc179)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc195)
    %11 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc180)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc180)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc196)
    %13 = cir.get_global @CWE369_Divide_by_Zero__int_listen_socket_divide_15_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc628)
    cir.call @CWE369_Divide_by_Zero__int_listen_socket_divide_15_bad() : () -> () loc(#loc197)
    %14 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc181)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc181)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc199)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc200)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc629)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc629)
    cir.return %17 : !s32i loc(#loc629)
  } loc(#loc624)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"This would result in a divide by zero\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc202)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc631)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc207)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc208)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc632)
    cir.scope {
      %3 = cir.const #cir.int<6> : !s32i loc(#loc212)
      cir.switch (%3 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          cir.scope {
            %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc635)
            %5 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc636)
            %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc637)
            %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc638)
            %8 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc639)
            %9 = cir.const #cir.int<1> : !s32i loc(#loc221)
            %10 = cir.unary(minus, %9) : !s32i, !s32i loc(#loc221)
            cir.store %10, %6 : !s32i, !cir.ptr<!s32i> loc(#loc637)
            %11 = cir.const #cir.int<1> : !s32i loc(#loc223)
            %12 = cir.unary(minus, %11) : !s32i, !s32i loc(#loc223)
            cir.store %12, %7 : !s32i, !cir.ptr<!s32i> loc(#loc638)
            cir.scope {
              cir.do {
                %13 = cir.const #cir.int<2> : !s32i loc(#loc228)
                %14 = cir.const #cir.int<1> : !s32i loc(#loc229)
                %15 = cir.const #cir.int<6> : !s32i loc(#loc230)
                %16 = cir.call @socket(%13, %14, %15) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc231)
                cir.store %16, %6 : !s32i, !cir.ptr<!s32i> loc(#loc641)
                cir.scope {
                  %58 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc236)
                  %59 = cir.const #cir.int<1> : !s32i loc(#loc237)
                  %60 = cir.unary(minus, %59) : !s32i, !s32i loc(#loc237)
                  %61 = cir.cmp(eq, %58, %60) : !s32i, !cir.bool loc(#loc643)
                  cir.if %61 {
                    cir.break loc(#loc239)
                  } loc(#loc644)
                } loc(#loc642)
                %17 = cir.cast(bitcast, %5 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc645)
                %18 = cir.const #cir.int<0> : !s32i loc(#loc242)
                %19 = cir.const #cir.int<16> : !u64i loc(#loc646)
                cir.libc.memset %19 bytes from %17 set to %18 : !cir.ptr<!void>, !s32i, !u64i loc(#loc647)
                %20 = cir.const #cir.int<2> : !s32i loc(#loc247)
                %21 = cir.cast(integral, %20 : !s32i), !u16i loc(#loc247)
                %22 = cir.get_member %5[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc67)
                cir.store %21, %22 : !u16i, !cir.ptr<!u16i> loc(#loc648)
                %23 = cir.const #cir.int<0> : !s32i loc(#loc249)
                %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc249)
                %25 = cir.get_member %5[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc70)
                %26 = cir.get_member %25[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc71)
                cir.store %24, %26 : !u32i, !cir.ptr<!u32i> loc(#loc649)
                %27 = cir.const #cir.int<27015> : !s32i loc(#loc251)
                %28 = cir.cast(integral, %27 : !s32i), !u16i loc(#loc251)
                %29 = cir.call @htons(%28) : (!u16i) -> !u16i extra(#fn_attr) loc(#loc252)
                %30 = cir.get_member %5[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc75)
                cir.store %29, %30 : !u16i, !cir.ptr<!u16i> loc(#loc650)
                cir.scope {
                  %58 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc257)
                  %59 = cir.cast(bitcast, %5 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc652)
                  %60 = cir.const #cir.int<16> : !u64i loc(#loc653)
                  %61 = cir.cast(integral, %60 : !u64i), !u32i loc(#loc653)
                  %62 = cir.call @bind(%58, %59, %61) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc262)
                  %63 = cir.const #cir.int<1> : !s32i loc(#loc263)
                  %64 = cir.unary(minus, %63) : !s32i, !s32i loc(#loc263)
                  %65 = cir.cmp(eq, %62, %64) : !s32i, !cir.bool loc(#loc654)
                  cir.if %65 {
                    cir.break loc(#loc265)
                  } loc(#loc655)
                } loc(#loc651)
                cir.scope {
                  %58 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc268)
                  %59 = cir.const #cir.int<5> : !s32i loc(#loc269)
                  %60 = cir.call @listen(%58, %59) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc270)
                  %61 = cir.const #cir.int<1> : !s32i loc(#loc271)
                  %62 = cir.unary(minus, %61) : !s32i, !s32i loc(#loc271)
                  %63 = cir.cmp(eq, %60, %62) : !s32i, !cir.bool loc(#loc657)
                  cir.if %63 {
                    cir.break loc(#loc273)
                  } loc(#loc658)
                } loc(#loc656)
                %31 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc274)
                %32 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc275)
                %33 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc276)
                %34 = cir.call @accept(%31, %32, %33) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc277)
                cir.store %34, %7 : !s32i, !cir.ptr<!s32i> loc(#loc659)
                cir.scope {
                  %58 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc282)
                  %59 = cir.const #cir.int<1> : !s32i loc(#loc283)
                  %60 = cir.unary(minus, %59) : !s32i, !s32i loc(#loc283)
                  %61 = cir.cmp(eq, %58, %60) : !s32i, !cir.bool loc(#loc661)
                  cir.if %61 {
                    cir.break loc(#loc285)
                  } loc(#loc662)
                } loc(#loc660)
                %35 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc286)
                %36 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc287)
                %37 = cir.cast(bitcast, %36 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc287)
                %38 = cir.const #cir.int<3> : !s32i loc(#loc288)
                %39 = cir.cast(integral, %38 : !s32i), !u64i loc(#loc288)
                %40 = cir.const #cir.int<4> : !u64i loc(#loc288)
                %41 = cir.binop(mul, %39, %40) : !u64i loc(#loc288)
                %42 = cir.const #cir.int<2> : !s32i loc(#loc288)
                %43 = cir.cast(integral, %42 : !s32i), !u64i loc(#loc288)
                %44 = cir.binop(add, %41, %43) : !u64i loc(#loc288)
                %45 = cir.const #cir.int<1> : !s32i loc(#loc289)
                %46 = cir.cast(integral, %45 : !s32i), !u64i loc(#loc289)
                %47 = cir.binop(sub, %44, %46) : !u64i loc(#loc663)
                %48 = cir.const #cir.int<0> : !s32i loc(#loc290)
                %49 = cir.call @recv(%35, %37, %47, %48) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc291)
                %50 = cir.cast(integral, %49 : !s64i), !s32i loc(#loc291)
                cir.store %50, %4 : !s32i, !cir.ptr<!s32i> loc(#loc664)
                cir.scope {
                  %58 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc296)
                  %59 = cir.const #cir.int<1> : !s32i loc(#loc297)
                  %60 = cir.unary(minus, %59) : !s32i, !s32i loc(#loc297)
                  %61 = cir.cmp(eq, %58, %60) : !s32i, !cir.bool loc(#loc666)
                  %62 = cir.ternary(%61, true {
                    %63 = cir.const #true loc(#loc298)
                    cir.yield %63 : !cir.bool loc(#loc298)
                  }, false {
                    %63 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc299)
                    %64 = cir.const #cir.int<0> : !s32i loc(#loc300)
                    %65 = cir.cmp(eq, %63, %64) : !s32i, !cir.bool loc(#loc667)
                    %66 = cir.ternary(%65, true {
                      %67 = cir.const #true loc(#loc298)
                      cir.yield %67 : !cir.bool loc(#loc298)
                    }, false {
                      %67 = cir.const #false loc(#loc298)
                      cir.yield %67 : !cir.bool loc(#loc298)
                    }) : (!cir.bool) -> !cir.bool loc(#loc298)
                    cir.yield %66 : !cir.bool loc(#loc298)
                  }) : (!cir.bool) -> !cir.bool loc(#loc298)
                  cir.if %62 {
                    cir.break loc(#loc302)
                  } loc(#loc668)
                } loc(#loc665)
                %51 = cir.const #cir.int<0> : !s32i loc(#loc303)
                %52 = cir.cast(integral, %51 : !s32i), !s8i loc(#loc303)
                %53 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc304)
                %54 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc305)
                %55 = cir.ptr_stride(%54 : !cir.ptr<!s8i>, %53 : !s32i), !cir.ptr<!s8i> loc(#loc305)
                cir.store %52, %55 : !s8i, !cir.ptr<!s8i> loc(#loc669)
                %56 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc306)
                %57 = cir.call @atoi(%56) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc307)
                cir.store %57, %0 : !s32i, !cir.ptr<!s32i> loc(#loc670)
                cir.yield loc(#loc227)
              } while {
                %13 = cir.const #cir.int<0> : !s32i loc(#loc310)
                %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc310)
                cir.condition(%14) loc(#loc310)
              } loc(#loc640)
            } loc(#loc640)
            cir.scope {
              %13 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc313)
              %14 = cir.const #cir.int<1> : !s32i loc(#loc314)
              %15 = cir.unary(minus, %14) : !s32i, !s32i loc(#loc314)
              %16 = cir.cmp(ne, %13, %15) : !s32i, !cir.bool loc(#loc672)
              cir.if %16 {
                %17 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc316)
                %18 = cir.call @close(%17) : (!s32i) -> !s32i loc(#loc317)
              } loc(#loc673)
            } loc(#loc671)
            cir.scope {
              %13 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc320)
              %14 = cir.const #cir.int<1> : !s32i loc(#loc321)
              %15 = cir.unary(minus, %14) : !s32i, !s32i loc(#loc321)
              %16 = cir.cmp(ne, %13, %15) : !s32i, !cir.bool loc(#loc675)
              cir.if %16 {
                %17 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc323)
                %18 = cir.call @close(%17) : (!s32i) -> !s32i loc(#loc324)
              } loc(#loc676)
            } loc(#loc674)
          } loc(#loc634)
          cir.break loc(#loc325)
        } loc(#loc213)
        cir.case(default, []) {
          %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc327)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc327)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc328)
          cir.break loc(#loc329)
        } loc(#loc326)
        cir.yield loc(#loc210)
      } loc(#loc210)
    } loc(#loc633)
    cir.scope {
      %3 = cir.const #cir.int<8> : !s32i loc(#loc332)
      cir.switch (%3 : !s32i) {
        cir.case(equal, [#cir.int<7> : !s32i]) {
          %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc334)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc334)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc335)
          cir.break loc(#loc336)
        } loc(#loc333)
        cir.case(default, []) {
          cir.scope {
            %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc340)
            %5 = cir.const #cir.int<0> : !s32i loc(#loc341)
            %6 = cir.cmp(ne, %4, %5) : !s32i, !cir.bool loc(#loc679)
            cir.if %6 {
              %7 = cir.const #cir.int<100> : !s32i loc(#loc345)
              %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc346)
              %9 = cir.binop(div, %7, %8) : !s32i loc(#loc681)
              cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc347)
            } else {
              %7 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc202)
              %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc202)
              cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc348)
            } loc(#loc680)
          } loc(#loc678)
          cir.break loc(#loc349)
        } loc(#loc337)
        cir.yield loc(#loc330)
      } loc(#loc330)
    } loc(#loc677)
    cir.return loc(#loc204)
  } loc(#loc630)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc683)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc354)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc355)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc684)
    cir.scope {
      %3 = cir.const #cir.int<6> : !s32i loc(#loc359)
      cir.switch (%3 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          cir.scope {
            %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc687)
            %5 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc688)
            %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc689)
            %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc690)
            %8 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc691)
            %9 = cir.const #cir.int<1> : !s32i loc(#loc368)
            %10 = cir.unary(minus, %9) : !s32i, !s32i loc(#loc368)
            cir.store %10, %6 : !s32i, !cir.ptr<!s32i> loc(#loc689)
            %11 = cir.const #cir.int<1> : !s32i loc(#loc370)
            %12 = cir.unary(minus, %11) : !s32i, !s32i loc(#loc370)
            cir.store %12, %7 : !s32i, !cir.ptr<!s32i> loc(#loc690)
            cir.scope {
              cir.do {
                %13 = cir.const #cir.int<2> : !s32i loc(#loc375)
                %14 = cir.const #cir.int<1> : !s32i loc(#loc376)
                %15 = cir.const #cir.int<6> : !s32i loc(#loc377)
                %16 = cir.call @socket(%13, %14, %15) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc378)
                cir.store %16, %6 : !s32i, !cir.ptr<!s32i> loc(#loc693)
                cir.scope {
                  %58 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc383)
                  %59 = cir.const #cir.int<1> : !s32i loc(#loc384)
                  %60 = cir.unary(minus, %59) : !s32i, !s32i loc(#loc384)
                  %61 = cir.cmp(eq, %58, %60) : !s32i, !cir.bool loc(#loc695)
                  cir.if %61 {
                    cir.break loc(#loc386)
                  } loc(#loc696)
                } loc(#loc694)
                %17 = cir.cast(bitcast, %5 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc697)
                %18 = cir.const #cir.int<0> : !s32i loc(#loc389)
                %19 = cir.const #cir.int<16> : !u64i loc(#loc698)
                cir.libc.memset %19 bytes from %17 set to %18 : !cir.ptr<!void>, !s32i, !u64i loc(#loc699)
                %20 = cir.const #cir.int<2> : !s32i loc(#loc394)
                %21 = cir.cast(integral, %20 : !s32i), !u16i loc(#loc394)
                %22 = cir.get_member %5[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc67)
                cir.store %21, %22 : !u16i, !cir.ptr<!u16i> loc(#loc700)
                %23 = cir.const #cir.int<0> : !s32i loc(#loc396)
                %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc396)
                %25 = cir.get_member %5[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc70)
                %26 = cir.get_member %25[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc71)
                cir.store %24, %26 : !u32i, !cir.ptr<!u32i> loc(#loc701)
                %27 = cir.const #cir.int<27015> : !s32i loc(#loc398)
                %28 = cir.cast(integral, %27 : !s32i), !u16i loc(#loc398)
                %29 = cir.call @htons(%28) : (!u16i) -> !u16i extra(#fn_attr) loc(#loc399)
                %30 = cir.get_member %5[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc75)
                cir.store %29, %30 : !u16i, !cir.ptr<!u16i> loc(#loc702)
                cir.scope {
                  %58 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc404)
                  %59 = cir.cast(bitcast, %5 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc704)
                  %60 = cir.const #cir.int<16> : !u64i loc(#loc705)
                  %61 = cir.cast(integral, %60 : !u64i), !u32i loc(#loc705)
                  %62 = cir.call @bind(%58, %59, %61) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc409)
                  %63 = cir.const #cir.int<1> : !s32i loc(#loc410)
                  %64 = cir.unary(minus, %63) : !s32i, !s32i loc(#loc410)
                  %65 = cir.cmp(eq, %62, %64) : !s32i, !cir.bool loc(#loc706)
                  cir.if %65 {
                    cir.break loc(#loc412)
                  } loc(#loc707)
                } loc(#loc703)
                cir.scope {
                  %58 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc415)
                  %59 = cir.const #cir.int<5> : !s32i loc(#loc416)
                  %60 = cir.call @listen(%58, %59) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc417)
                  %61 = cir.const #cir.int<1> : !s32i loc(#loc418)
                  %62 = cir.unary(minus, %61) : !s32i, !s32i loc(#loc418)
                  %63 = cir.cmp(eq, %60, %62) : !s32i, !cir.bool loc(#loc709)
                  cir.if %63 {
                    cir.break loc(#loc420)
                  } loc(#loc710)
                } loc(#loc708)
                %31 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc421)
                %32 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc422)
                %33 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc423)
                %34 = cir.call @accept(%31, %32, %33) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc424)
                cir.store %34, %7 : !s32i, !cir.ptr<!s32i> loc(#loc711)
                cir.scope {
                  %58 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc429)
                  %59 = cir.const #cir.int<1> : !s32i loc(#loc430)
                  %60 = cir.unary(minus, %59) : !s32i, !s32i loc(#loc430)
                  %61 = cir.cmp(eq, %58, %60) : !s32i, !cir.bool loc(#loc713)
                  cir.if %61 {
                    cir.break loc(#loc432)
                  } loc(#loc714)
                } loc(#loc712)
                %35 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc433)
                %36 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc434)
                %37 = cir.cast(bitcast, %36 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc434)
                %38 = cir.const #cir.int<3> : !s32i loc(#loc435)
                %39 = cir.cast(integral, %38 : !s32i), !u64i loc(#loc435)
                %40 = cir.const #cir.int<4> : !u64i loc(#loc435)
                %41 = cir.binop(mul, %39, %40) : !u64i loc(#loc435)
                %42 = cir.const #cir.int<2> : !s32i loc(#loc435)
                %43 = cir.cast(integral, %42 : !s32i), !u64i loc(#loc435)
                %44 = cir.binop(add, %41, %43) : !u64i loc(#loc435)
                %45 = cir.const #cir.int<1> : !s32i loc(#loc436)
                %46 = cir.cast(integral, %45 : !s32i), !u64i loc(#loc436)
                %47 = cir.binop(sub, %44, %46) : !u64i loc(#loc715)
                %48 = cir.const #cir.int<0> : !s32i loc(#loc437)
                %49 = cir.call @recv(%35, %37, %47, %48) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc438)
                %50 = cir.cast(integral, %49 : !s64i), !s32i loc(#loc438)
                cir.store %50, %4 : !s32i, !cir.ptr<!s32i> loc(#loc716)
                cir.scope {
                  %58 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc443)
                  %59 = cir.const #cir.int<1> : !s32i loc(#loc444)
                  %60 = cir.unary(minus, %59) : !s32i, !s32i loc(#loc444)
                  %61 = cir.cmp(eq, %58, %60) : !s32i, !cir.bool loc(#loc718)
                  %62 = cir.ternary(%61, true {
                    %63 = cir.const #true loc(#loc445)
                    cir.yield %63 : !cir.bool loc(#loc445)
                  }, false {
                    %63 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc446)
                    %64 = cir.const #cir.int<0> : !s32i loc(#loc447)
                    %65 = cir.cmp(eq, %63, %64) : !s32i, !cir.bool loc(#loc719)
                    %66 = cir.ternary(%65, true {
                      %67 = cir.const #true loc(#loc445)
                      cir.yield %67 : !cir.bool loc(#loc445)
                    }, false {
                      %67 = cir.const #false loc(#loc445)
                      cir.yield %67 : !cir.bool loc(#loc445)
                    }) : (!cir.bool) -> !cir.bool loc(#loc445)
                    cir.yield %66 : !cir.bool loc(#loc445)
                  }) : (!cir.bool) -> !cir.bool loc(#loc445)
                  cir.if %62 {
                    cir.break loc(#loc449)
                  } loc(#loc720)
                } loc(#loc717)
                %51 = cir.const #cir.int<0> : !s32i loc(#loc450)
                %52 = cir.cast(integral, %51 : !s32i), !s8i loc(#loc450)
                %53 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc451)
                %54 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc452)
                %55 = cir.ptr_stride(%54 : !cir.ptr<!s8i>, %53 : !s32i), !cir.ptr<!s8i> loc(#loc452)
                cir.store %52, %55 : !s8i, !cir.ptr<!s8i> loc(#loc721)
                %56 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc453)
                %57 = cir.call @atoi(%56) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc454)
                cir.store %57, %0 : !s32i, !cir.ptr<!s32i> loc(#loc722)
                cir.yield loc(#loc374)
              } while {
                %13 = cir.const #cir.int<0> : !s32i loc(#loc457)
                %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc457)
                cir.condition(%14) loc(#loc457)
              } loc(#loc692)
            } loc(#loc692)
            cir.scope {
              %13 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc460)
              %14 = cir.const #cir.int<1> : !s32i loc(#loc461)
              %15 = cir.unary(minus, %14) : !s32i, !s32i loc(#loc461)
              %16 = cir.cmp(ne, %13, %15) : !s32i, !cir.bool loc(#loc724)
              cir.if %16 {
                %17 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc463)
                %18 = cir.call @close(%17) : (!s32i) -> !s32i loc(#loc464)
              } loc(#loc725)
            } loc(#loc723)
            cir.scope {
              %13 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc467)
              %14 = cir.const #cir.int<1> : !s32i loc(#loc468)
              %15 = cir.unary(minus, %14) : !s32i, !s32i loc(#loc468)
              %16 = cir.cmp(ne, %13, %15) : !s32i, !cir.bool loc(#loc727)
              cir.if %16 {
                %17 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc470)
                %18 = cir.call @close(%17) : (!s32i) -> !s32i loc(#loc471)
              } loc(#loc728)
            } loc(#loc726)
          } loc(#loc686)
          cir.break loc(#loc472)
        } loc(#loc360)
        cir.case(default, []) {
          %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc474)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc474)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc475)
          cir.break loc(#loc476)
        } loc(#loc473)
        cir.yield loc(#loc357)
      } loc(#loc357)
    } loc(#loc685)
    cir.scope {
      %3 = cir.const #cir.int<7> : !s32i loc(#loc479)
      cir.switch (%3 : !s32i) {
        cir.case(equal, [#cir.int<7> : !s32i]) {
          cir.scope {
            %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc483)
            %5 = cir.const #cir.int<0> : !s32i loc(#loc484)
            %6 = cir.cmp(ne, %4, %5) : !s32i, !cir.bool loc(#loc731)
            cir.if %6 {
              %7 = cir.const #cir.int<100> : !s32i loc(#loc488)
              %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc489)
              %9 = cir.binop(div, %7, %8) : !s32i loc(#loc733)
              cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc490)
            } else {
              %7 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc491)
              %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc491)
              cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc492)
            } loc(#loc732)
          } loc(#loc730)
          cir.break loc(#loc493)
        } loc(#loc480)
        cir.case(default, []) {
          %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc495)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc495)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc496)
          cir.break loc(#loc497)
        } loc(#loc494)
        cir.yield loc(#loc477)
      } loc(#loc477)
    } loc(#loc729)
    cir.return loc(#loc351)
  } loc(#loc682)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc735)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc502)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc503)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc736)
    cir.scope {
      %3 = cir.const #cir.int<5> : !s32i loc(#loc507)
      cir.switch (%3 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc509)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc509)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc510)
          cir.break loc(#loc511)
        } loc(#loc508)
        cir.case(default, []) {
          %4 = cir.const #cir.int<7> : !s32i loc(#loc513)
          cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc738)
          cir.break loc(#loc515)
        } loc(#loc512)
        cir.yield loc(#loc505)
      } loc(#loc505)
    } loc(#loc737)
    cir.scope {
      %3 = cir.const #cir.int<7> : !s32i loc(#loc518)
      cir.switch (%3 : !s32i) {
        cir.case(equal, [#cir.int<7> : !s32i]) {
          %4 = cir.const #cir.int<100> : !s32i loc(#loc520)
          %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc521)
          %6 = cir.binop(div, %4, %5) : !s32i loc(#loc740)
          cir.call @printIntLine(%6) : (!s32i) -> () loc(#loc522)
          cir.break loc(#loc523)
        } loc(#loc519)
        cir.case(default, []) {
          %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc525)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc525)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc526)
          cir.break loc(#loc527)
        } loc(#loc524)
        cir.yield loc(#loc516)
      } loc(#loc516)
    } loc(#loc739)
    cir.return loc(#loc499)
  } loc(#loc734)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc742)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc532)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc533)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc743)
    cir.scope {
      %3 = cir.const #cir.int<6> : !s32i loc(#loc537)
      cir.switch (%3 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %4 = cir.const #cir.int<7> : !s32i loc(#loc539)
          cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc745)
          cir.break loc(#loc541)
        } loc(#loc538)
        cir.case(default, []) {
          %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc543)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc543)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc544)
          cir.break loc(#loc545)
        } loc(#loc542)
        cir.yield loc(#loc535)
      } loc(#loc535)
    } loc(#loc744)
    cir.scope {
      %3 = cir.const #cir.int<7> : !s32i loc(#loc548)
      cir.switch (%3 : !s32i) {
        cir.case(equal, [#cir.int<7> : !s32i]) {
          %4 = cir.const #cir.int<100> : !s32i loc(#loc550)
          %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc551)
          %6 = cir.binop(div, %4, %5) : !s32i loc(#loc747)
          cir.call @printIntLine(%6) : (!s32i) -> () loc(#loc552)
          cir.break loc(#loc553)
        } loc(#loc549)
        cir.case(default, []) {
          %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc555)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc555)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc556)
          cir.break loc(#loc557)
        } loc(#loc554)
        cir.yield loc(#loc546)
      } loc(#loc546)
    } loc(#loc746)
    cir.return loc(#loc529)
  } loc(#loc741)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE369_Divide_by_Zero/s02/CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":0:0)
#loc1 = loc("/usr/include/sys/socket.h":102:1)
#loc2 = loc("/usr/include/sys/socket.h":102:62)
#loc3 = loc("/usr/include/netinet/in.h":404:1)
#loc4 = loc("/usr/include/netinet/in.h":405:40)
#loc5 = loc("/usr/include/sys/socket.h":112:1)
#loc6 = loc("/usr/include/sys/socket.h":113:6)
#loc7 = loc("/usr/include/sys/socket.h":296:1)
#loc8 = loc("/usr/include/sys/socket.h":296:39)
#loc9 = loc("/usr/include/sys/socket.h":306:1)
#loc10 = loc("/usr/include/sys/socket.h":307:38)
#loc11 = loc("/usr/include/sys/socket.h":145:1)
#loc12 = loc("/usr/include/sys/socket.h":145:68)
#loc13 = loc("/usr/include/stdlib.h":105:1)
#loc14 = loc("/usr/include/stdlib.h":106:33)
#loc15 = loc("/usr/include/unistd.h":358:1)
#loc16 = loc("/usr/include/unistd.h":358:27)
#loc17 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc18 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc19 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":124:19)
#loc20 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc21 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc22 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":44:1)
#loc23 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":138:1)
#loc24 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":46:5)
#loc25 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":46:9)
#loc26 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":48:13)
#loc27 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":48:12)
#loc28 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":48:5)
#loc29 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":49:5)
#loc30 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":126:5)
#loc31 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":49:12)
#loc32 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":51:5)
#loc33 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":52:5)
#loc34 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":120:5)
#loc35 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":57:9)
#loc36 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":57:13)
#loc37 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":58:9)
#loc38 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":58:28)
#loc39 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":59:9)
#loc40 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":59:31)
#loc41 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":60:9)
#loc42 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":60:31)
#loc43 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":61:9)
#loc44 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":61:41)
#loc45 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":62:9)
#loc46 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":105:17)
#loc47 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":72:35)
#loc48 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":72:44)
#loc49 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":72:57)
#loc50 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":72:28)
#loc51 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":72:13)
#loc52 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":72:68)
#loc53 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":73:13)
#loc54 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":76:13)
#loc55 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":73:17)
#loc56 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":73:33)
#loc57 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":74:13)
#loc58 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":75:17)
#loc59 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":77:20)
#loc60 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":77:21)
#loc61 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":77:30)
#loc62 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":77:33)
#loc63 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":77:47)
#loc64 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":77:13)
#loc65 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":77:48)
#loc66 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":78:34)
#loc67 = loc("/usr/include/netinet/in.h":249:5)
#loc68 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":78:13)
#loc69 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":79:39)
#loc70 = loc("/usr/include/netinet/in.h":251:20)
#loc71 = loc("/usr/include/netinet/in.h":33:15)
#loc72 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":79:13)
#loc73 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":80:38)
#loc74 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":80:32)
#loc75 = loc("/usr/include/netinet/in.h":250:15)
#loc76 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":80:13)
#loc77 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":80:46)
#loc78 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":81:13)
#loc79 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":84:13)
#loc80 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":81:22)
#loc81 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":81:54)
#loc82 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":81:55)
#loc83 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":81:64)
#loc84 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":81:78)
#loc85 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":81:17)
#loc86 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":81:84)
#loc87 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":82:13)
#loc88 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":83:17)
#loc89 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":85:13)
#loc90 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":88:13)
#loc91 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":85:24)
#loc92 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":85:38)
#loc93 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":85:17)
#loc94 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":85:57)
#loc95 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":86:13)
#loc96 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":87:17)
#loc97 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":89:35)
#loc98 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":89:49)
#loc99 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":89:55)
#loc100 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":89:28)
#loc101 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":89:13)
#loc102 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":89:59)
#loc103 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":90:13)
#loc104 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":93:13)
#loc105 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":90:17)
#loc106 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":90:33)
#loc107 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":91:13)
#loc108 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":92:17)
#loc109 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":95:31)
#loc110 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":95:45)
#loc111 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":95:58)
#loc112 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":95:76)
#loc113 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":95:79)
#loc114 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":95:26)
#loc115 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":95:13)
#loc116 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":95:80)
#loc117 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":96:13)
#loc118 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":99:13)
#loc119 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":96:17)
#loc120 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":96:31)
#loc121 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":96:44)
#loc122 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":96:47)
#loc123 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":96:61)
#loc124 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":97:13)
#loc125 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":98:17)
#loc126 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":101:39)
#loc127 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":101:25)
#loc128 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":101:13)
#loc129 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":103:25)
#loc130 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":103:20)
#loc131 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":103:13)
#loc132 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":103:36)
#loc133 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":105:16)
#loc134 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":106:9)
#loc135 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":109:9)
#loc136 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":106:13)
#loc137 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":106:29)
#loc138 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":107:9)
#loc139 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":108:26)
#loc140 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":108:13)
#loc141 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":110:9)
#loc142 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":113:9)
#loc143 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":110:13)
#loc144 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":110:29)
#loc145 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":111:9)
#loc146 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":112:26)
#loc147 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":112:13)
#loc148 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":121:5)
#loc149 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":122:5)
#loc150 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":124:9)
#loc151 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":125:9)
#loc152 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":127:5)
#loc153 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":137:5)
#loc154 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":127:12)
#loc155 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":129:5)
#loc156 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":131:22)
#loc157 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":131:28)
#loc158 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":131:9)
#loc159 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":132:9)
#loc160 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":133:5)
#loc161 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":135:19)
#loc162 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":135:9)
#loc163 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":136:9)
#loc164 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":412:1)
#loc165 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":418:1)
#loc166 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":414:5)
#loc167 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":414:14)
#loc168 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":415:5)
#loc169 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":415:14)
#loc170 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":416:5)
#loc171 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":416:14)
#loc172 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":417:5)
#loc173 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":417:14)
#loc174 = loc("/usr/include/stdlib.h":575:1)
#loc175 = loc("/usr/include/stdlib.h":575:41)
#loc176 = loc("/usr/include/time.h":76:1)
#loc177 = loc("/usr/include/time.h":76:38)
#loc178 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":434:15)
#loc179 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":436:15)
#loc180 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":439:15)
#loc181 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":441:15)
#loc182 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":429:1)
#loc183 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":444:1)
#loc188 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":430:1)
#loc189 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":432:27)
#loc190 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":432:22)
#loc191 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":432:5)
#loc192 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":434:5)
#loc193 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":435:5)
#loc194 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":435:61)
#loc195 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":436:5)
#loc196 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":439:5)
#loc197 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":440:5)
#loc198 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":440:60)
#loc199 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":441:5)
#loc200 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":443:12)
#loc201 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":443:5)
#loc202 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":242:23)
#loc203 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":145:1)
#loc204 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":246:1)
#loc205 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":147:5)
#loc206 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":147:9)
#loc207 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":149:13)
#loc208 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":149:12)
#loc209 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":149:5)
#loc210 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":150:5)
#loc211 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":227:5)
#loc212 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":150:12)
#loc213 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":152:5)
#loc214 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":153:5)
#loc215 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":221:5)
#loc216 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":158:9)
#loc217 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":158:13)
#loc218 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":159:9)
#loc219 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":159:28)
#loc220 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":160:9)
#loc221 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":160:31)
#loc222 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":161:9)
#loc223 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":161:31)
#loc224 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":162:9)
#loc225 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":162:41)
#loc226 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":163:9)
#loc227 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":206:17)
#loc228 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":173:35)
#loc229 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":173:44)
#loc230 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":173:57)
#loc231 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":173:28)
#loc232 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":173:13)
#loc233 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":173:68)
#loc234 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":174:13)
#loc235 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":177:13)
#loc236 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":174:17)
#loc237 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":174:33)
#loc238 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":175:13)
#loc239 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":176:17)
#loc240 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":178:20)
#loc241 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":178:21)
#loc242 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":178:30)
#loc243 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":178:33)
#loc244 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":178:47)
#loc245 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":178:13)
#loc246 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":178:48)
#loc247 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":179:34)
#loc248 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":179:13)
#loc249 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":180:39)
#loc250 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":180:13)
#loc251 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":181:38)
#loc252 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":181:32)
#loc253 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":181:13)
#loc254 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":181:46)
#loc255 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":182:13)
#loc256 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":185:13)
#loc257 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":182:22)
#loc258 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":182:54)
#loc259 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":182:55)
#loc260 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":182:64)
#loc261 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":182:78)
#loc262 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":182:17)
#loc263 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":182:84)
#loc264 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":183:13)
#loc265 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":184:17)
#loc266 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":186:13)
#loc267 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":189:13)
#loc268 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":186:24)
#loc269 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":186:38)
#loc270 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":186:17)
#loc271 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":186:57)
#loc272 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":187:13)
#loc273 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":188:17)
#loc274 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":190:35)
#loc275 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":190:49)
#loc276 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":190:55)
#loc277 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":190:28)
#loc278 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":190:13)
#loc279 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":190:59)
#loc280 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":191:13)
#loc281 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":194:13)
#loc282 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":191:17)
#loc283 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":191:33)
#loc284 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":192:13)
#loc285 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":193:17)
#loc286 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":196:31)
#loc287 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":196:45)
#loc288 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":196:58)
#loc289 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":196:76)
#loc290 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":196:79)
#loc291 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":196:26)
#loc292 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":196:13)
#loc293 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":196:80)
#loc294 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":197:13)
#loc295 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":200:13)
#loc296 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":197:17)
#loc297 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":197:31)
#loc298 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":197:44)
#loc299 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":197:47)
#loc300 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":197:61)
#loc301 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":198:13)
#loc302 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":199:17)
#loc303 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":202:39)
#loc304 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":202:25)
#loc305 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":202:13)
#loc306 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":204:25)
#loc307 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":204:20)
#loc308 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":204:13)
#loc309 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":204:36)
#loc310 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":206:16)
#loc311 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":207:9)
#loc312 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":210:9)
#loc313 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":207:13)
#loc314 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":207:29)
#loc315 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":208:9)
#loc316 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":209:26)
#loc317 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":209:13)
#loc318 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":211:9)
#loc319 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":214:9)
#loc320 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":211:13)
#loc321 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":211:29)
#loc322 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":212:9)
#loc323 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":213:26)
#loc324 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":213:13)
#loc325 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":222:5)
#loc326 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":223:5)
#loc327 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":225:19)
#loc328 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":225:9)
#loc329 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":226:9)
#loc330 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":228:5)
#loc331 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":245:5)
#loc332 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":228:12)
#loc333 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":230:5)
#loc334 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":232:19)
#loc335 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":232:9)
#loc336 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":233:9)
#loc337 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":234:5)
#loc338 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":236:9)
#loc339 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":243:9)
#loc340 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":236:13)
#loc341 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":236:21)
#loc342 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":237:9)
#loc343 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":239:9)
#loc344 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":241:9)
#loc345 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":238:26)
#loc346 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":238:32)
#loc347 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":238:13)
#loc348 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":242:13)
#loc349 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":244:9)
#loc350 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":249:1)
#loc351 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":350:1)
#loc352 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":251:5)
#loc353 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":251:9)
#loc354 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":253:13)
#loc355 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":253:12)
#loc356 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":253:5)
#loc357 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":254:5)
#loc358 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":331:5)
#loc359 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":254:12)
#loc360 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":256:5)
#loc361 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":257:5)
#loc362 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":325:5)
#loc363 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":262:9)
#loc364 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":262:13)
#loc365 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":263:9)
#loc366 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":263:28)
#loc367 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":264:9)
#loc368 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":264:31)
#loc369 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":265:9)
#loc370 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":265:31)
#loc371 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":266:9)
#loc372 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":266:41)
#loc373 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":267:9)
#loc374 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":310:17)
#loc375 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":277:35)
#loc376 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":277:44)
#loc377 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":277:57)
#loc378 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":277:28)
#loc379 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":277:13)
#loc380 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":277:68)
#loc381 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":278:13)
#loc382 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":281:13)
#loc383 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":278:17)
#loc384 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":278:33)
#loc385 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":279:13)
#loc386 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":280:17)
#loc387 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":282:20)
#loc388 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":282:21)
#loc389 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":282:30)
#loc390 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":282:33)
#loc391 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":282:47)
#loc392 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":282:13)
#loc393 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":282:48)
#loc394 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":283:34)
#loc395 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":283:13)
#loc396 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":284:39)
#loc397 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":284:13)
#loc398 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":285:38)
#loc399 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":285:32)
#loc400 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":285:13)
#loc401 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":285:46)
#loc402 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":286:13)
#loc403 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":289:13)
#loc404 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":286:22)
#loc405 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":286:54)
#loc406 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":286:55)
#loc407 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":286:64)
#loc408 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":286:78)
#loc409 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":286:17)
#loc410 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":286:84)
#loc411 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":287:13)
#loc412 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":288:17)
#loc413 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":290:13)
#loc414 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":293:13)
#loc415 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":290:24)
#loc416 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":290:38)
#loc417 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":290:17)
#loc418 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":290:57)
#loc419 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":291:13)
#loc420 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":292:17)
#loc421 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":294:35)
#loc422 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":294:49)
#loc423 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":294:55)
#loc424 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":294:28)
#loc425 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":294:13)
#loc426 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":294:59)
#loc427 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":295:13)
#loc428 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":298:13)
#loc429 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":295:17)
#loc430 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":295:33)
#loc431 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":296:13)
#loc432 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":297:17)
#loc433 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":300:31)
#loc434 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":300:45)
#loc435 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":300:58)
#loc436 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":300:76)
#loc437 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":300:79)
#loc438 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":300:26)
#loc439 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":300:13)
#loc440 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":300:80)
#loc441 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":301:13)
#loc442 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":304:13)
#loc443 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":301:17)
#loc444 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":301:31)
#loc445 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":301:44)
#loc446 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":301:47)
#loc447 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":301:61)
#loc448 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":302:13)
#loc449 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":303:17)
#loc450 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":306:39)
#loc451 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":306:25)
#loc452 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":306:13)
#loc453 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":308:25)
#loc454 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":308:20)
#loc455 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":308:13)
#loc456 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":308:36)
#loc457 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":310:16)
#loc458 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":311:9)
#loc459 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":314:9)
#loc460 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":311:13)
#loc461 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":311:29)
#loc462 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":312:9)
#loc463 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":313:26)
#loc464 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":313:13)
#loc465 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":315:9)
#loc466 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":318:9)
#loc467 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":315:13)
#loc468 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":315:29)
#loc469 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":316:9)
#loc470 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":317:26)
#loc471 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":317:13)
#loc472 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":326:5)
#loc473 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":327:5)
#loc474 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":329:19)
#loc475 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":329:9)
#loc476 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":330:9)
#loc477 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":332:5)
#loc478 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":349:5)
#loc479 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":332:12)
#loc480 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":334:5)
#loc481 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":336:9)
#loc482 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":343:9)
#loc483 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":336:13)
#loc484 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":336:21)
#loc485 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":337:9)
#loc486 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":339:9)
#loc487 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":341:9)
#loc488 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":338:26)
#loc489 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":338:32)
#loc490 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":338:13)
#loc491 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":342:23)
#loc492 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":342:13)
#loc493 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":344:9)
#loc494 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":345:5)
#loc495 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":347:19)
#loc496 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":347:9)
#loc497 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":348:9)
#loc498 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":353:1)
#loc499 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":380:1)
#loc500 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":355:5)
#loc501 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":355:9)
#loc502 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":357:13)
#loc503 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":357:12)
#loc504 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":357:5)
#loc505 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":358:5)
#loc506 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":368:5)
#loc507 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":358:12)
#loc508 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":360:5)
#loc509 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":362:19)
#loc510 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":362:9)
#loc511 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":363:9)
#loc512 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":364:5)
#loc513 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":366:16)
#loc514 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":366:9)
#loc515 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":367:9)
#loc516 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":369:5)
#loc517 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":379:5)
#loc518 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":369:12)
#loc519 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":371:5)
#loc520 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":373:22)
#loc521 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":373:28)
#loc522 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":373:9)
#loc523 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":374:9)
#loc524 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":375:5)
#loc525 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":377:19)
#loc526 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":377:9)
#loc527 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":378:9)
#loc528 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":383:1)
#loc529 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":410:1)
#loc530 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":385:5)
#loc531 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":385:9)
#loc532 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":387:13)
#loc533 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":387:12)
#loc534 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":387:5)
#loc535 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":388:5)
#loc536 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":398:5)
#loc537 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":388:12)
#loc538 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":390:5)
#loc539 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":392:16)
#loc540 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":392:9)
#loc541 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":393:9)
#loc542 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":394:5)
#loc543 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":396:19)
#loc544 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":396:9)
#loc545 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":397:9)
#loc546 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":399:5)
#loc547 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":409:5)
#loc548 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":399:12)
#loc549 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":401:5)
#loc550 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":403:22)
#loc551 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":403:28)
#loc552 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":403:9)
#loc553 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":404:9)
#loc554 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":405:5)
#loc555 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":407:19)
#loc556 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":407:9)
#loc557 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_15.c":408:9)
#loc558 = loc(fused[#loc1, #loc2])
#loc559 = loc(fused[#loc3, #loc4])
#loc560 = loc(fused[#loc5, #loc6])
#loc561 = loc(fused[#loc7, #loc8])
#loc562 = loc(fused[#loc9, #loc10])
#loc563 = loc(fused[#loc11, #loc12])
#loc564 = loc(fused[#loc13, #loc14])
#loc565 = loc(fused[#loc15, #loc16])
#loc566 = loc(fused[#loc17, #loc18])
#loc567 = loc(fused[#loc20, #loc21])
#loc568 = loc(fused[#loc22, #loc23])
#loc569 = loc(fused[#loc24, #loc25])
#loc570 = loc(fused[#loc28, #loc26])
#loc571 = loc(fused[#loc29, #loc30])
#loc572 = loc(fused[#loc33, #loc34])
#loc573 = loc(fused[#loc35, #loc36])
#loc574 = loc(fused[#loc37, #loc38])
#loc575 = loc(fused[#loc39, #loc40])
#loc576 = loc(fused[#loc41, #loc42])
#loc577 = loc(fused[#loc43, #loc44])
#loc578 = loc(fused[#loc45, #loc46])
#loc579 = loc(fused[#loc51, #loc52])
#loc580 = loc(fused[#loc53, #loc54])
#loc581 = loc(fused[#loc55, #loc56])
#loc582 = loc(fused[#loc57, #loc54])
#loc583 = loc(fused[#loc59, #loc60])
#loc584 = loc(fused[#loc62, #loc63])
#loc585 = loc(fused[#loc64, #loc65])
#loc586 = loc(fused[#loc68, #loc66])
#loc587 = loc(fused[#loc72, #loc69])
#loc588 = loc(fused[#loc76, #loc77])
#loc589 = loc(fused[#loc78, #loc79])
#loc590 = loc(fused[#loc81, #loc82])
#loc591 = loc(fused[#loc83, #loc84])
#loc592 = loc(fused[#loc85, #loc86])
#loc593 = loc(fused[#loc87, #loc79])
#loc594 = loc(fused[#loc89, #loc90])
#loc595 = loc(fused[#loc93, #loc94])
#loc596 = loc(fused[#loc95, #loc90])
#loc597 = loc(fused[#loc101, #loc102])
#loc598 = loc(fused[#loc103, #loc104])
#loc599 = loc(fused[#loc105, #loc106])
#loc600 = loc(fused[#loc107, #loc104])
#loc601 = loc(fused[#loc111, #loc112])
#loc602 = loc(fused[#loc115, #loc116])
#loc603 = loc(fused[#loc117, #loc118])
#loc604 = loc(fused[#loc119, #loc120])
#loc605 = loc(fused[#loc122, #loc123])
#loc606 = loc(fused[#loc124, #loc118])
#loc607 = loc(fused[#loc128, #loc126])
#loc608 = loc(fused[#loc131, #loc132])
#loc609 = loc(fused[#loc134, #loc135])
#loc610 = loc(fused[#loc136, #loc137])
#loc611 = loc(fused[#loc138, #loc135])
#loc612 = loc(fused[#loc141, #loc142])
#loc613 = loc(fused[#loc143, #loc144])
#loc614 = loc(fused[#loc145, #loc142])
#loc615 = loc(fused[#loc152, #loc153])
#loc616 = loc(fused[#loc156, #loc157])
#loc617 = loc(fused[#loc164, #loc165])
#loc618 = loc(fused[#loc166, #loc167])
#loc619 = loc(fused[#loc168, #loc169])
#loc620 = loc(fused[#loc170, #loc171])
#loc621 = loc(fused[#loc172, #loc173])
#loc622 = loc(fused[#loc174, #loc175])
#loc623 = loc(fused[#loc176, #loc177])
#loc624 = loc(fused[#loc182, #loc183])
#loc627 = loc(fused[#loc193, #loc194])
#loc628 = loc(fused[#loc197, #loc198])
#loc629 = loc(fused[#loc201, #loc200])
#loc630 = loc(fused[#loc203, #loc204])
#loc631 = loc(fused[#loc205, #loc206])
#loc632 = loc(fused[#loc209, #loc207])
#loc633 = loc(fused[#loc210, #loc211])
#loc634 = loc(fused[#loc214, #loc215])
#loc635 = loc(fused[#loc216, #loc217])
#loc636 = loc(fused[#loc218, #loc219])
#loc637 = loc(fused[#loc220, #loc221])
#loc638 = loc(fused[#loc222, #loc223])
#loc639 = loc(fused[#loc224, #loc225])
#loc640 = loc(fused[#loc226, #loc227])
#loc641 = loc(fused[#loc232, #loc233])
#loc642 = loc(fused[#loc234, #loc235])
#loc643 = loc(fused[#loc236, #loc237])
#loc644 = loc(fused[#loc238, #loc235])
#loc645 = loc(fused[#loc240, #loc241])
#loc646 = loc(fused[#loc243, #loc244])
#loc647 = loc(fused[#loc245, #loc246])
#loc648 = loc(fused[#loc248, #loc247])
#loc649 = loc(fused[#loc250, #loc249])
#loc650 = loc(fused[#loc253, #loc254])
#loc651 = loc(fused[#loc255, #loc256])
#loc652 = loc(fused[#loc258, #loc259])
#loc653 = loc(fused[#loc260, #loc261])
#loc654 = loc(fused[#loc262, #loc263])
#loc655 = loc(fused[#loc264, #loc256])
#loc656 = loc(fused[#loc266, #loc267])
#loc657 = loc(fused[#loc270, #loc271])
#loc658 = loc(fused[#loc272, #loc267])
#loc659 = loc(fused[#loc278, #loc279])
#loc660 = loc(fused[#loc280, #loc281])
#loc661 = loc(fused[#loc282, #loc283])
#loc662 = loc(fused[#loc284, #loc281])
#loc663 = loc(fused[#loc288, #loc289])
#loc664 = loc(fused[#loc292, #loc293])
#loc665 = loc(fused[#loc294, #loc295])
#loc666 = loc(fused[#loc296, #loc297])
#loc667 = loc(fused[#loc299, #loc300])
#loc668 = loc(fused[#loc301, #loc295])
#loc669 = loc(fused[#loc305, #loc303])
#loc670 = loc(fused[#loc308, #loc309])
#loc671 = loc(fused[#loc311, #loc312])
#loc672 = loc(fused[#loc313, #loc314])
#loc673 = loc(fused[#loc315, #loc312])
#loc674 = loc(fused[#loc318, #loc319])
#loc675 = loc(fused[#loc320, #loc321])
#loc676 = loc(fused[#loc322, #loc319])
#loc677 = loc(fused[#loc330, #loc331])
#loc678 = loc(fused[#loc338, #loc339])
#loc679 = loc(fused[#loc340, #loc341])
#loc680 = loc(fused[#loc342, #loc343, #loc344, #loc339])
#loc681 = loc(fused[#loc345, #loc346])
#loc682 = loc(fused[#loc350, #loc351])
#loc683 = loc(fused[#loc352, #loc353])
#loc684 = loc(fused[#loc356, #loc354])
#loc685 = loc(fused[#loc357, #loc358])
#loc686 = loc(fused[#loc361, #loc362])
#loc687 = loc(fused[#loc363, #loc364])
#loc688 = loc(fused[#loc365, #loc366])
#loc689 = loc(fused[#loc367, #loc368])
#loc690 = loc(fused[#loc369, #loc370])
#loc691 = loc(fused[#loc371, #loc372])
#loc692 = loc(fused[#loc373, #loc374])
#loc693 = loc(fused[#loc379, #loc380])
#loc694 = loc(fused[#loc381, #loc382])
#loc695 = loc(fused[#loc383, #loc384])
#loc696 = loc(fused[#loc385, #loc382])
#loc697 = loc(fused[#loc387, #loc388])
#loc698 = loc(fused[#loc390, #loc391])
#loc699 = loc(fused[#loc392, #loc393])
#loc700 = loc(fused[#loc395, #loc394])
#loc701 = loc(fused[#loc397, #loc396])
#loc702 = loc(fused[#loc400, #loc401])
#loc703 = loc(fused[#loc402, #loc403])
#loc704 = loc(fused[#loc405, #loc406])
#loc705 = loc(fused[#loc407, #loc408])
#loc706 = loc(fused[#loc409, #loc410])
#loc707 = loc(fused[#loc411, #loc403])
#loc708 = loc(fused[#loc413, #loc414])
#loc709 = loc(fused[#loc417, #loc418])
#loc710 = loc(fused[#loc419, #loc414])
#loc711 = loc(fused[#loc425, #loc426])
#loc712 = loc(fused[#loc427, #loc428])
#loc713 = loc(fused[#loc429, #loc430])
#loc714 = loc(fused[#loc431, #loc428])
#loc715 = loc(fused[#loc435, #loc436])
#loc716 = loc(fused[#loc439, #loc440])
#loc717 = loc(fused[#loc441, #loc442])
#loc718 = loc(fused[#loc443, #loc444])
#loc719 = loc(fused[#loc446, #loc447])
#loc720 = loc(fused[#loc448, #loc442])
#loc721 = loc(fused[#loc452, #loc450])
#loc722 = loc(fused[#loc455, #loc456])
#loc723 = loc(fused[#loc458, #loc459])
#loc724 = loc(fused[#loc460, #loc461])
#loc725 = loc(fused[#loc462, #loc459])
#loc726 = loc(fused[#loc465, #loc466])
#loc727 = loc(fused[#loc467, #loc468])
#loc728 = loc(fused[#loc469, #loc466])
#loc729 = loc(fused[#loc477, #loc478])
#loc730 = loc(fused[#loc481, #loc482])
#loc731 = loc(fused[#loc483, #loc484])
#loc732 = loc(fused[#loc485, #loc486, #loc487, #loc482])
#loc733 = loc(fused[#loc488, #loc489])
#loc734 = loc(fused[#loc498, #loc499])
#loc735 = loc(fused[#loc500, #loc501])
#loc736 = loc(fused[#loc504, #loc502])
#loc737 = loc(fused[#loc505, #loc506])
#loc738 = loc(fused[#loc514, #loc513])
#loc739 = loc(fused[#loc516, #loc517])
#loc740 = loc(fused[#loc520, #loc521])
#loc741 = loc(fused[#loc528, #loc529])
#loc742 = loc(fused[#loc530, #loc531])
#loc743 = loc(fused[#loc534, #loc532])
#loc744 = loc(fused[#loc535, #loc536])
#loc745 = loc(fused[#loc540, #loc539])
#loc746 = loc(fused[#loc546, #loc547])
#loc747 = loc(fused[#loc550, #loc551])
