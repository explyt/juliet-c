!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.struct<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.struct<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.struct<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc49 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":116:10)
#loc50 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":116:14)
#loc51 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":116:20)
#loc52 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":116:32)
#true = #cir.bool<true> : !cir.bool
#loc145 = loc(fused[#loc49, #loc50])
#loc146 = loc(fused[#loc51, #loc52])
!ty__IO_FILE = !cir.struct<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!cir.struct<struct "_IO_FILE">>>, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_fscanf_square_16.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @__isoc99_fscanf(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i loc(#loc128)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc129)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"%d\00" : !cir.array<!s8i x 3>> : !cir.array<!s8i x 3> {alignment = 1 : i64} loc(#loc5)
  cir.func private @printIntLine(!s32i) loc(#loc130)
  cir.func no_proto @CWE190_Integer_Overflow__int_fscanf_square_16_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc132)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc12)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc133)
    cir.scope {
      cir.while {
        %2 = cir.const #cir.int<1> : !s32i loc(#loc16)
        %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc16)
        cir.condition(%3) loc(#loc16)
      } do {
        %2 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc17)
        %3 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc129)
        %4 = cir.load %3 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc18)
        %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc5)
        %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc5)
        %7 = cir.call @__isoc99_fscanf(%4, %6, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s32i>) -> !s32i loc(#loc17)
        cir.break loc(#loc19)
      } loc(#loc134)
    } loc(#loc134)
    cir.scope {
      cir.while {
        %2 = cir.const #cir.int<1> : !s32i loc(#loc22)
        %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc22)
        cir.condition(%3) loc(#loc22)
      } do {
        cir.scope {
          %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc137)
          %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc27)
          %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc26)
          %5 = cir.binop(mul, %3, %4) nsw : !s32i loc(#loc27)
          cir.store %5, %2 : !s32i, !cir.ptr<!s32i> loc(#loc137)
          %6 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc28)
          cir.call @printIntLine(%6) : (!s32i) -> () loc(#loc29)
        } loc(#loc136)
        cir.break loc(#loc30)
      } loc(#loc135)
    } loc(#loc135)
    cir.return loc(#loc9)
  } loc(#loc131)
  cir.func no_proto @CWE190_Integer_Overflow__int_fscanf_square_16_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc139)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc33)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc140)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc35)
    cir.return loc(#loc32)
  } loc(#loc138)
  cir.func private @srand(!u32i) extra(#fn_attr1) loc(#loc141)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc142)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc143)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc43)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc44)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc45)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc46)
  cir.func @main(%arg0: !s32i loc(fused[#loc49, #loc50]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc51, #loc52])) -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc145)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc146)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc48)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc53)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc53)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc54)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc55)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc55)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr1) loc(#loc56)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc43)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc43)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc57)
    %8 = cir.get_global @CWE190_Integer_Overflow__int_fscanf_square_16_good : !cir.ptr<!cir.func<!void ()>> loc(#loc147)
    cir.call @CWE190_Integer_Overflow__int_fscanf_square_16_good() : () -> () loc(#loc58)
    %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc44)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc44)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc60)
    %11 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc45)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc45)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc61)
    %13 = cir.get_global @CWE190_Integer_Overflow__int_fscanf_square_16_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc148)
    cir.call @CWE190_Integer_Overflow__int_fscanf_square_16_bad() : () -> () loc(#loc62)
    %14 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc46)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc46)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc64)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc65)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc149)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc149)
    cir.return %17 : !s32i loc(#loc149)
  } loc(#loc144)
  cir.func private @sqrt(!cir.double) -> !cir.double extra(#fn_attr1) loc(#loc67)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc68)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc151)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc73)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc152)
    cir.scope {
      cir.while {
        %2 = cir.const #cir.int<1> : !s32i loc(#loc77)
        %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc77)
        cir.condition(%3) loc(#loc77)
      } do {
        %2 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc78)
        %3 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc129)
        %4 = cir.load %3 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc79)
        %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc80)
        %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc80)
        %7 = cir.call @__isoc99_fscanf(%4, %6, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s32i>) -> !s32i loc(#loc78)
        cir.break loc(#loc81)
      } loc(#loc153)
    } loc(#loc153)
    cir.scope {
      cir.while {
        %2 = cir.const #cir.int<1> : !s32i loc(#loc84)
        %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc84)
        cir.condition(%3) loc(#loc84)
      } do {
        cir.scope {
          %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc87)
          %3 = cir.const #cir.int<2147483647> : !s32i loc(#loc88)
          %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc88)
          %5 = cir.const #cir.int<1> : !s32i loc(#loc88)
          %6 = cir.binop(sub, %4, %5) nsw : !s32i loc(#loc88)
          %7 = cir.cmp(gt, %2, %6) : !s32i, !cir.bool loc(#loc156)
          %8 = cir.ternary(%7, true {
            %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc90)
            %10 = cir.abs %9 poison : !s32i loc(#loc91)
            %11 = cir.cast(integral, %10 : !s32i), !s64i loc(#loc91)
            %12 = cir.get_global @sqrt : !cir.ptr<!cir.func<!cir.double (!cir.double)>> loc(#loc92)
            %13 = cir.const #cir.int<2147483647> : !s32i loc(#loc93)
            %14 = cir.cast(int_to_float, %13 : !s32i), !cir.double loc(#loc93)
            %15 = cir.call @sqrt(%14) : (!cir.double) -> !cir.double extra(#fn_attr1) loc(#loc92)
            %16 = cir.cast(float_to_int, %15 : !cir.double), !s64i loc(#loc92)
            %17 = cir.cmp(lt, %11, %16) : !s64i, !cir.bool loc(#loc157)
            %18 = cir.ternary(%17, true {
              %19 = cir.const #true loc(#loc89)
              cir.yield %19 : !cir.bool loc(#loc89)
            }, false {
              %19 = cir.const #false loc(#loc89)
              cir.yield %19 : !cir.bool loc(#loc89)
            }) : (!cir.bool) -> !cir.bool loc(#loc89)
            cir.yield %18 : !cir.bool loc(#loc89)
          }, false {
            %9 = cir.const #false loc(#loc89)
            cir.yield %9 : !cir.bool loc(#loc89)
          }) : (!cir.bool) -> !cir.bool loc(#loc89)
          cir.if %8 {
            %9 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc159)
            %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc100)
            %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc99)
            %12 = cir.binop(mul, %10, %11) nsw : !s32i loc(#loc100)
            cir.store %12, %9 : !s32i, !cir.ptr<!s32i> loc(#loc159)
            %13 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc101)
            cir.call @printIntLine(%13) : (!s32i) -> () loc(#loc102)
          } else {
            %9 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc68)
            %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc68)
            cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc103)
          } loc(#loc158)
        } loc(#loc155)
        cir.break loc(#loc104)
      } loc(#loc154)
    } loc(#loc154)
    cir.return loc(#loc70)
  } loc(#loc150)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc161)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc109)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc162)
    cir.scope {
      cir.while {
        %2 = cir.const #cir.int<1> : !s32i loc(#loc113)
        %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc113)
        cir.condition(%3) loc(#loc113)
      } do {
        %2 = cir.const #cir.int<2> : !s32i loc(#loc114)
        cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc164)
        cir.break loc(#loc116)
      } loc(#loc163)
    } loc(#loc163)
    cir.scope {
      cir.while {
        %2 = cir.const #cir.int<1> : !s32i loc(#loc119)
        %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc119)
        cir.condition(%3) loc(#loc119)
      } do {
        cir.scope {
          %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc167)
          %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc124)
          %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc123)
          %5 = cir.binop(mul, %3, %4) nsw : !s32i loc(#loc124)
          cir.store %5, %2 : !s32i, !cir.ptr<!s32i> loc(#loc167)
          %6 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc125)
          cir.call @printIntLine(%6) : (!s32i) -> () loc(#loc126)
        } loc(#loc166)
        cir.break loc(#loc127)
      } loc(#loc165)
    } loc(#loc165)
    cir.return loc(#loc106)
  } loc(#loc160)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_fscanf_square_16.c":0:0)
#loc1 = loc("/usr/include/stdio.h":463:1)
#loc2 = loc("/usr/include/stdio.h":465:33)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":32:23)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc8 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":24:1)
#loc9 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":44:1)
#loc10 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":26:5)
#loc11 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":26:9)
#loc12 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":28:12)
#loc13 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":28:5)
#loc14 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":29:5)
#loc15 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":34:5)
#loc16 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":29:11)
#loc17 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":32:9)
#loc18 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":32:16)
#loc19 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":33:9)
#loc20 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":35:5)
#loc21 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":43:5)
#loc22 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":35:11)
#loc23 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":37:9)
#loc24 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":41:9)
#loc25 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":39:13)
#loc26 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":39:33)
#loc27 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":39:26)
#loc28 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":40:26)
#loc29 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":40:13)
#loc30 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":42:9)
#loc31 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":101:1)
#loc32 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":105:1)
#loc33 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":103:5)
#loc34 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":103:13)
#loc35 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":104:5)
#loc36 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":104:13)
#loc37 = loc("/usr/include/stdlib.h":575:1)
#loc38 = loc("/usr/include/stdlib.h":575:41)
#loc39 = loc("/usr/include/time.h":76:1)
#loc40 = loc("/usr/include/time.h":76:38)
#loc41 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc42 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc43 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":121:15)
#loc44 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":123:15)
#loc45 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":126:15)
#loc46 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":128:15)
#loc47 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":116:1)
#loc48 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":131:1)
#loc53 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":117:1)
#loc54 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":119:27)
#loc55 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":119:22)
#loc56 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":119:5)
#loc57 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":121:5)
#loc58 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":122:5)
#loc59 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":122:56)
#loc60 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":123:5)
#loc61 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":126:5)
#loc62 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":127:5)
#loc63 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":127:55)
#loc64 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":128:5)
#loc65 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":130:12)
#loc66 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":130:5)
#loc67 = loc("/usr/include/bits/mathcalls.h":158:1)
#loc68 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":72:23)
#loc69 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":51:1)
#loc70 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":76:1)
#loc71 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":53:5)
#loc72 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":53:9)
#loc73 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":55:12)
#loc74 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":55:5)
#loc75 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":56:5)
#loc76 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":61:5)
#loc77 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":56:11)
#loc78 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":59:9)
#loc79 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":59:16)
#loc80 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":59:23)
#loc81 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":60:9)
#loc82 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":62:5)
#loc83 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":75:5)
#loc84 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":62:11)
#loc85 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":65:9)
#loc86 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":73:9)
#loc87 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":65:13)
#loc88 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":65:20)
#loc89 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":65:28)
#loc90 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":65:35)
#loc91 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":65:31)
#loc92 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":65:49)
#loc93 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":65:62)
#loc94 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":65:69)
#loc95 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":66:9)
#loc96 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":69:9)
#loc97 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":71:9)
#loc98 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":67:13)
#loc99 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":67:33)
#loc100 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":67:26)
#loc101 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":68:26)
#loc102 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":68:13)
#loc103 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":72:13)
#loc104 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":74:9)
#loc105 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":79:1)
#loc106 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":99:1)
#loc107 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":81:5)
#loc108 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":81:9)
#loc109 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":83:12)
#loc110 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":83:5)
#loc111 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":84:5)
#loc112 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":89:5)
#loc113 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":84:11)
#loc114 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":87:16)
#loc115 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":87:9)
#loc116 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":88:9)
#loc117 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":90:5)
#loc118 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":98:5)
#loc119 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":90:11)
#loc120 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":92:9)
#loc121 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":96:9)
#loc122 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":94:13)
#loc123 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":94:33)
#loc124 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":94:26)
#loc125 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":95:26)
#loc126 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":95:13)
#loc127 = loc("CWE190_Integer_Overflow__int_fscanf_square_16.c":97:9)
#loc128 = loc(fused[#loc1, #loc2])
#loc129 = loc(fused[#loc3, #loc4])
#loc130 = loc(fused[#loc6, #loc7])
#loc131 = loc(fused[#loc8, #loc9])
#loc132 = loc(fused[#loc10, #loc11])
#loc133 = loc(fused[#loc13, #loc12])
#loc134 = loc(fused[#loc14, #loc15])
#loc135 = loc(fused[#loc20, #loc21])
#loc136 = loc(fused[#loc23, #loc24])
#loc137 = loc(fused[#loc25, #loc26])
#loc138 = loc(fused[#loc31, #loc32])
#loc139 = loc(fused[#loc33, #loc34])
#loc140 = loc(fused[#loc35, #loc36])
#loc141 = loc(fused[#loc37, #loc38])
#loc142 = loc(fused[#loc39, #loc40])
#loc143 = loc(fused[#loc41, #loc42])
#loc144 = loc(fused[#loc47, #loc48])
#loc147 = loc(fused[#loc58, #loc59])
#loc148 = loc(fused[#loc62, #loc63])
#loc149 = loc(fused[#loc66, #loc65])
#loc150 = loc(fused[#loc69, #loc70])
#loc151 = loc(fused[#loc71, #loc72])
#loc152 = loc(fused[#loc74, #loc73])
#loc153 = loc(fused[#loc75, #loc76])
#loc154 = loc(fused[#loc82, #loc83])
#loc155 = loc(fused[#loc85, #loc86])
#loc156 = loc(fused[#loc87, #loc88])
#loc157 = loc(fused[#loc91, #loc94])
#loc158 = loc(fused[#loc95, #loc96, #loc97, #loc86])
#loc159 = loc(fused[#loc98, #loc99])
#loc160 = loc(fused[#loc105, #loc106])
#loc161 = loc(fused[#loc107, #loc108])
#loc162 = loc(fused[#loc110, #loc109])
#loc163 = loc(fused[#loc111, #loc112])
#loc164 = loc(fused[#loc115, #loc114])
#loc165 = loc(fused[#loc117, #loc118])
#loc166 = loc(fused[#loc120, #loc121])
#loc167 = loc(fused[#loc122, #loc123])
