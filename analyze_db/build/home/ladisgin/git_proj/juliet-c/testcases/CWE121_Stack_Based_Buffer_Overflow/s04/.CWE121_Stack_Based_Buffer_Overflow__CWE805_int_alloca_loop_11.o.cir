!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s04/CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_11.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func no_proto private @globalReturnsTrue(...) -> !s32i loc(#loc148)
  cir.func private @printIntLine(!s32i) loc(#loc149)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_11_bad() extra(#fn_attr) {
    %0 = cir.alloca !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc151)
    %1 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc152)
    %2 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc153)
    %3 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc154)
    %4 = cir.const #cir.int<50> : !s32i loc(#loc14)
    %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc14)
    %6 = cir.const #cir.int<4> : !u64i loc(#loc14)
    %7 = cir.binop(mul, %5, %6) : !u64i loc(#loc14)
    %8 = cir.alloca !u8i, !cir.ptr<!u8i>, %7 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc14)
    %9 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc155)
    %10 = cir.cast(bitcast, %8 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc14)
    %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc14)
    cir.store %11, %3 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc154)
    %12 = cir.const #cir.int<100> : !s32i loc(#loc16)
    %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc16)
    %14 = cir.const #cir.int<4> : !u64i loc(#loc16)
    %15 = cir.binop(mul, %13, %14) : !u64i loc(#loc16)
    %16 = cir.alloca !u8i, !cir.ptr<!u8i>, %15 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc16)
    %17 = cir.cast(bitcast, %16 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc16)
    %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc16)
    cir.store %18, %9 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc155)
    cir.br ^bb1 loc(#loc156)
  ^bb1:  // pred: ^bb0
    %19 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc157)
    %20 = cir.cast(bitcast, %19 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc157)
    %21 = cir.call %20() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc19)
    %22 = cir.cast(int_to_bool, %21 : !s32i), !cir.bool loc(#loc19)
    cir.brcond %22 ^bb2, ^bb3 loc(#loc158)
  ^bb2:  // pred: ^bb1
    %23 = cir.load %3 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc22)
    cir.store %23, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc159)
    cir.br ^bb3 loc(#loc18)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc18)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc160)
  ^bb5:  // pred: ^bb4
    %24 = cir.const #cir.zero : !cir.array<!s32i x 100> loc(#loc151)
    cir.store %24, %0 : !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>> loc(#loc151)
    cir.br ^bb6 loc(#loc161)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc162)
  ^bb7:  // pred: ^bb6
    %25 = cir.const #cir.int<0> : !s32i loc(#loc30)
    %26 = cir.cast(integral, %25 : !s32i), !u64i loc(#loc30)
    cir.store %26, %1 : !u64i, !cir.ptr<!u64i> loc(#loc163)
    cir.br ^bb8 loc(#loc162)
  ^bb8:  // 2 preds: ^bb7, ^bb12
    %27 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc32)
    %28 = cir.const #cir.int<100> : !s32i loc(#loc33)
    %29 = cir.cast(integral, %28 : !s32i), !u64i loc(#loc33)
    %30 = cir.cmp(lt, %27, %29) : !u64i, !cir.bool loc(#loc164)
    cir.brcond %30 ^bb9, ^bb13 loc(#loc34)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc165)
  ^bb10:  // pred: ^bb9
    %31 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc36)
    %32 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s32i x 100>>), !cir.ptr<!s32i> loc(#loc37)
    %33 = cir.ptr_stride(%32 : !cir.ptr<!s32i>, %31 : !u64i), !cir.ptr<!s32i> loc(#loc37)
    %34 = cir.load %33 : !cir.ptr<!s32i>, !s32i loc(#loc37)
    %35 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc38)
    %36 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc39)
    %37 = cir.ptr_stride(%35 : !cir.ptr<!s32i>, %36 : !u64i), !cir.ptr<!s32i> loc(#loc40)
    cir.store %34, %37 : !s32i, !cir.ptr<!s32i> loc(#loc166)
    cir.br ^bb11 loc(#loc29)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc29)
  ^bb12:  // pred: ^bb11
    %38 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc42)
    %39 = cir.unary(inc, %38) : !u64i, !u64i loc(#loc43)
    cir.store %39, %1 : !u64i, !cir.ptr<!u64i> loc(#loc167)
    cir.br ^bb8 loc(#loc162)
  ^bb13:  // pred: ^bb8
    cir.br ^bb14 loc(#loc29)
  ^bb14:  // pred: ^bb13
    %40 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc44)
    %41 = cir.const #cir.int<0> : !s32i loc(#loc45)
    %42 = cir.ptr_stride(%40 : !cir.ptr<!s32i>, %41 : !s32i), !cir.ptr<!s32i> loc(#loc46)
    %43 = cir.load %42 : !cir.ptr<!s32i>, !s32i loc(#loc44)
    cir.call @printIntLine(%43) : (!s32i) -> () loc(#loc47)
    cir.br ^bb15 loc(#loc27)
  ^bb15:  // pred: ^bb14
    cir.br ^bb16 loc(#loc25)
  ^bb16:  // pred: ^bb15
    cir.return loc(#loc6)
  } loc(#loc150)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_11_good() extra(#fn_attr) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc169)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc50)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc170)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc52)
    cir.return loc(#loc49)
  } loc(#loc168)
  cir.func no_proto private @globalReturnsFalse(...) -> !s32i loc(#loc171)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc172)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc58)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr) {
    %0 = cir.alloca !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc174)
    %1 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc175)
    %2 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc176)
    %3 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc177)
    %4 = cir.const #cir.int<50> : !s32i loc(#loc68)
    %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc68)
    %6 = cir.const #cir.int<4> : !u64i loc(#loc68)
    %7 = cir.binop(mul, %5, %6) : !u64i loc(#loc68)
    %8 = cir.alloca !u8i, !cir.ptr<!u8i>, %7 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc68)
    %9 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc178)
    %10 = cir.cast(bitcast, %8 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc68)
    %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc68)
    cir.store %11, %3 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc177)
    %12 = cir.const #cir.int<100> : !s32i loc(#loc70)
    %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc70)
    %14 = cir.const #cir.int<4> : !u64i loc(#loc70)
    %15 = cir.binop(mul, %13, %14) : !u64i loc(#loc70)
    %16 = cir.alloca !u8i, !cir.ptr<!u8i>, %15 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc70)
    %17 = cir.cast(bitcast, %16 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc70)
    %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc70)
    cir.store %18, %9 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc178)
    cir.br ^bb1 loc(#loc179)
  ^bb1:  // pred: ^bb0
    %19 = cir.get_global @globalReturnsFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc180)
    %20 = cir.cast(bitcast, %19 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc180)
    %21 = cir.call %20() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc73)
    %22 = cir.cast(int_to_bool, %21 : !s32i), !cir.bool loc(#loc73)
    cir.brcond %22 ^bb2, ^bb3 loc(#loc181)
  ^bb2:  // pred: ^bb1
    %23 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc58)
    %24 = cir.cast(array_to_ptrdecay, %23 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc58)
    cir.call @printLine(%24) : (!cir.ptr<!s8i>) -> () loc(#loc78)
    cir.br ^bb4 loc(#loc76)
  ^bb3:  // pred: ^bb1
    %25 = cir.load %9 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc79)
    cir.store %25, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc182)
    cir.br ^bb4 loc(#loc72)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc72)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc183)
  ^bb6:  // pred: ^bb5
    %26 = cir.const #cir.zero : !cir.array<!s32i x 100> loc(#loc174)
    cir.store %26, %0 : !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>> loc(#loc174)
    cir.br ^bb7 loc(#loc184)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc185)
  ^bb8:  // pred: ^bb7
    %27 = cir.const #cir.int<0> : !s32i loc(#loc87)
    %28 = cir.cast(integral, %27 : !s32i), !u64i loc(#loc87)
    cir.store %28, %1 : !u64i, !cir.ptr<!u64i> loc(#loc186)
    cir.br ^bb9 loc(#loc185)
  ^bb9:  // 2 preds: ^bb8, ^bb13
    %29 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc89)
    %30 = cir.const #cir.int<100> : !s32i loc(#loc90)
    %31 = cir.cast(integral, %30 : !s32i), !u64i loc(#loc90)
    %32 = cir.cmp(lt, %29, %31) : !u64i, !cir.bool loc(#loc187)
    cir.brcond %32 ^bb10, ^bb14 loc(#loc91)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc188)
  ^bb11:  // pred: ^bb10
    %33 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc93)
    %34 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s32i x 100>>), !cir.ptr<!s32i> loc(#loc94)
    %35 = cir.ptr_stride(%34 : !cir.ptr<!s32i>, %33 : !u64i), !cir.ptr<!s32i> loc(#loc94)
    %36 = cir.load %35 : !cir.ptr<!s32i>, !s32i loc(#loc94)
    %37 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc95)
    %38 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc96)
    %39 = cir.ptr_stride(%37 : !cir.ptr<!s32i>, %38 : !u64i), !cir.ptr<!s32i> loc(#loc97)
    cir.store %36, %39 : !s32i, !cir.ptr<!s32i> loc(#loc189)
    cir.br ^bb12 loc(#loc86)
  ^bb12:  // pred: ^bb11
    cir.br ^bb13 loc(#loc86)
  ^bb13:  // pred: ^bb12
    %40 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc99)
    %41 = cir.unary(inc, %40) : !u64i, !u64i loc(#loc100)
    cir.store %41, %1 : !u64i, !cir.ptr<!u64i> loc(#loc190)
    cir.br ^bb9 loc(#loc185)
  ^bb14:  // pred: ^bb9
    cir.br ^bb15 loc(#loc86)
  ^bb15:  // pred: ^bb14
    %42 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc101)
    %43 = cir.const #cir.int<0> : !s32i loc(#loc102)
    %44 = cir.ptr_stride(%42 : !cir.ptr<!s32i>, %43 : !s32i), !cir.ptr<!s32i> loc(#loc103)
    %45 = cir.load %44 : !cir.ptr<!s32i>, !s32i loc(#loc101)
    cir.call @printIntLine(%45) : (!s32i) -> () loc(#loc104)
    cir.br ^bb16 loc(#loc84)
  ^bb16:  // pred: ^bb15
    cir.br ^bb17 loc(#loc82)
  ^bb17:  // pred: ^bb16
    cir.return loc(#loc60)
  } loc(#loc173)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr) {
    %0 = cir.alloca !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc192)
    %1 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc193)
    %2 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc194)
    %3 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc195)
    %4 = cir.const #cir.int<50> : !s32i loc(#loc114)
    %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc114)
    %6 = cir.const #cir.int<4> : !u64i loc(#loc114)
    %7 = cir.binop(mul, %5, %6) : !u64i loc(#loc114)
    %8 = cir.alloca !u8i, !cir.ptr<!u8i>, %7 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc114)
    %9 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc196)
    %10 = cir.cast(bitcast, %8 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc114)
    %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc114)
    cir.store %11, %3 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc195)
    %12 = cir.const #cir.int<100> : !s32i loc(#loc116)
    %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc116)
    %14 = cir.const #cir.int<4> : !u64i loc(#loc116)
    %15 = cir.binop(mul, %13, %14) : !u64i loc(#loc116)
    %16 = cir.alloca !u8i, !cir.ptr<!u8i>, %15 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc116)
    %17 = cir.cast(bitcast, %16 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc116)
    %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc116)
    cir.store %18, %9 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc196)
    cir.br ^bb1 loc(#loc197)
  ^bb1:  // pred: ^bb0
    %19 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc198)
    %20 = cir.cast(bitcast, %19 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc198)
    %21 = cir.call %20() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc119)
    %22 = cir.cast(int_to_bool, %21 : !s32i), !cir.bool loc(#loc119)
    cir.brcond %22 ^bb2, ^bb3 loc(#loc199)
  ^bb2:  // pred: ^bb1
    %23 = cir.load %9 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc122)
    cir.store %23, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc200)
    cir.br ^bb3 loc(#loc118)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc118)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc201)
  ^bb5:  // pred: ^bb4
    %24 = cir.const #cir.zero : !cir.array<!s32i x 100> loc(#loc192)
    cir.store %24, %0 : !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>> loc(#loc192)
    cir.br ^bb6 loc(#loc202)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc203)
  ^bb7:  // pred: ^bb6
    %25 = cir.const #cir.int<0> : !s32i loc(#loc130)
    %26 = cir.cast(integral, %25 : !s32i), !u64i loc(#loc130)
    cir.store %26, %1 : !u64i, !cir.ptr<!u64i> loc(#loc204)
    cir.br ^bb8 loc(#loc203)
  ^bb8:  // 2 preds: ^bb7, ^bb12
    %27 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc132)
    %28 = cir.const #cir.int<100> : !s32i loc(#loc133)
    %29 = cir.cast(integral, %28 : !s32i), !u64i loc(#loc133)
    %30 = cir.cmp(lt, %27, %29) : !u64i, !cir.bool loc(#loc205)
    cir.brcond %30 ^bb9, ^bb13 loc(#loc134)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc206)
  ^bb10:  // pred: ^bb9
    %31 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc136)
    %32 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s32i x 100>>), !cir.ptr<!s32i> loc(#loc137)
    %33 = cir.ptr_stride(%32 : !cir.ptr<!s32i>, %31 : !u64i), !cir.ptr<!s32i> loc(#loc137)
    %34 = cir.load %33 : !cir.ptr<!s32i>, !s32i loc(#loc137)
    %35 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc138)
    %36 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc139)
    %37 = cir.ptr_stride(%35 : !cir.ptr<!s32i>, %36 : !u64i), !cir.ptr<!s32i> loc(#loc140)
    cir.store %34, %37 : !s32i, !cir.ptr<!s32i> loc(#loc207)
    cir.br ^bb11 loc(#loc129)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc129)
  ^bb12:  // pred: ^bb11
    %38 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc142)
    %39 = cir.unary(inc, %38) : !u64i, !u64i loc(#loc143)
    cir.store %39, %1 : !u64i, !cir.ptr<!u64i> loc(#loc208)
    cir.br ^bb8 loc(#loc203)
  ^bb13:  // pred: ^bb8
    cir.br ^bb14 loc(#loc129)
  ^bb14:  // pred: ^bb13
    %40 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc144)
    %41 = cir.const #cir.int<0> : !s32i loc(#loc145)
    %42 = cir.ptr_stride(%40 : !cir.ptr<!s32i>, %41 : !s32i), !cir.ptr<!s32i> loc(#loc146)
    %43 = cir.load %42 : !cir.ptr<!s32i>, !s32i loc(#loc144)
    cir.call @printIntLine(%43) : (!s32i) -> () loc(#loc147)
    cir.br ^bb15 loc(#loc127)
  ^bb15:  // pred: ^bb14
    cir.br ^bb16 loc(#loc125)
  ^bb16:  // pred: ^bb15
    cir.return loc(#loc106)
  } loc(#loc191)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s04/CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_11.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":48:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":48:23)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc5 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_11.c":21:1)
#loc6 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_11.c":44:1)
#loc7 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_11.c":33:9)
#loc8 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_11.c":33:29)
#loc9 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_11.c":35:13)
#loc10 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_11.c":35:20)
#loc11 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_11.c":23:5)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_11.c":23:11)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_11.c":24:5)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_11.c":24:34)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_11.c":25:5)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_11.c":25:35)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_11.c":26:5)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_11.c":31:5)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_11.c":26:8)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_11.c":26:26)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_11.c":27:5)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_11.c":30:16)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_11.c":30:9)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_11.c":32:5)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_11.c":43:5)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_11.c":34:9)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_11.c":42:9)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_11.c":37:13)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_11.c":40:13)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_11.c":37:22)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_11.c":37:18)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_11.c":37:25)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_11.c":37:29)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_11.c":37:27)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_11.c":38:13)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_11.c":39:34)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_11.c":39:27)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_11.c":39:17)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_11.c":39:22)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_11.c":39:23)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_11.c":39:35)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_11.c":37:35)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_11.c":37:34)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_11.c":41:26)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_11.c":41:31)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_11.c":41:32)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_11.c":41:13)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_11.c":105:1)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_11.c":109:1)
#loc50 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_11.c":107:5)
#loc51 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_11.c":107:14)
#loc52 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_11.c":108:5)
#loc53 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_11.c":108:14)
#loc54 = loc("../../../testcasesupport/std_testcase_io.h":50:1)
#loc55 = loc("../../../testcasesupport/std_testcase_io.h":50:24)
#loc56 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc57 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_11.c":59:19)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_11.c":51:1)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_11.c":78:1)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_11.c":67:9)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_11.c":67:29)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_11.c":69:13)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_11.c":69:20)
#loc65 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_11.c":53:5)
#loc66 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_11.c":53:11)
#loc67 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_11.c":54:5)
#loc68 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_11.c":54:34)
#loc69 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_11.c":55:5)
#loc70 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_11.c":55:35)
#loc71 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_11.c":56:5)
#loc72 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_11.c":65:5)
#loc73 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_11.c":56:8)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_11.c":56:27)
#loc75 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_11.c":57:5)
#loc76 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_11.c":60:5)
#loc77 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_11.c":62:5)
#loc78 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_11.c":59:9)
#loc79 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_11.c":64:16)
#loc80 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_11.c":64:9)
#loc81 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_11.c":66:5)
#loc82 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_11.c":77:5)
#loc83 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_11.c":68:9)
#loc84 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_11.c":76:9)
#loc85 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_11.c":71:13)
#loc86 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_11.c":74:13)
#loc87 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_11.c":71:22)
#loc88 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_11.c":71:18)
#loc89 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_11.c":71:25)
#loc90 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_11.c":71:29)
#loc91 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_11.c":71:27)
#loc92 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_11.c":72:13)
#loc93 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_11.c":73:34)
#loc94 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_11.c":73:27)
#loc95 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_11.c":73:17)
#loc96 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_11.c":73:22)
#loc97 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_11.c":73:23)
#loc98 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_11.c":73:35)
#loc99 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_11.c":71:35)
#loc100 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_11.c":71:34)
#loc101 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_11.c":75:26)
#loc102 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_11.c":75:31)
#loc103 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_11.c":75:32)
#loc104 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_11.c":75:13)
#loc105 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_11.c":81:1)
#loc106 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_11.c":103:1)
#loc107 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_11.c":92:9)
#loc108 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_11.c":92:29)
#loc109 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_11.c":94:13)
#loc110 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_11.c":94:20)
#loc111 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_11.c":83:5)
#loc112 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_11.c":83:11)
#loc113 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_11.c":84:5)
#loc114 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_11.c":84:34)
#loc115 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_11.c":85:5)
#loc116 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_11.c":85:35)
#loc117 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_11.c":86:5)
#loc118 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_11.c":90:5)
#loc119 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_11.c":86:8)
#loc120 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_11.c":86:26)
#loc121 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_11.c":87:5)
#loc122 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_11.c":89:16)
#loc123 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_11.c":89:9)
#loc124 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_11.c":91:5)
#loc125 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_11.c":102:5)
#loc126 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_11.c":93:9)
#loc127 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_11.c":101:9)
#loc128 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_11.c":96:13)
#loc129 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_11.c":99:13)
#loc130 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_11.c":96:22)
#loc131 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_11.c":96:18)
#loc132 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_11.c":96:25)
#loc133 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_11.c":96:29)
#loc134 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_11.c":96:27)
#loc135 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_11.c":97:13)
#loc136 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_11.c":98:34)
#loc137 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_11.c":98:27)
#loc138 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_11.c":98:17)
#loc139 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_11.c":98:22)
#loc140 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_11.c":98:23)
#loc141 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_11.c":98:35)
#loc142 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_11.c":96:35)
#loc143 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_11.c":96:34)
#loc144 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_11.c":100:26)
#loc145 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_11.c":100:31)
#loc146 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_11.c":100:32)
#loc147 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_11.c":100:13)
#loc148 = loc(fused[#loc1, #loc2])
#loc149 = loc(fused[#loc3, #loc4])
#loc150 = loc(fused[#loc5, #loc6])
#loc151 = loc(fused[#loc7, #loc8])
#loc152 = loc(fused[#loc9, #loc10])
#loc153 = loc(fused[#loc11, #loc12])
#loc154 = loc(fused[#loc13, #loc14])
#loc155 = loc(fused[#loc15, #loc16])
#loc156 = loc(fused[#loc17, #loc18])
#loc157 = loc(fused[#loc19, #loc20])
#loc158 = loc(fused[#loc21, #loc18])
#loc159 = loc(fused[#loc23, #loc22])
#loc160 = loc(fused[#loc24, #loc25])
#loc161 = loc(fused[#loc26, #loc27])
#loc162 = loc(fused[#loc28, #loc29])
#loc163 = loc(fused[#loc31, #loc30])
#loc164 = loc(fused[#loc32, #loc33])
#loc165 = loc(fused[#loc35, #loc29])
#loc166 = loc(fused[#loc38, #loc41])
#loc167 = loc(fused[#loc43, #loc42])
#loc168 = loc(fused[#loc48, #loc49])
#loc169 = loc(fused[#loc50, #loc51])
#loc170 = loc(fused[#loc52, #loc53])
#loc171 = loc(fused[#loc54, #loc55])
#loc172 = loc(fused[#loc56, #loc57])
#loc173 = loc(fused[#loc59, #loc60])
#loc174 = loc(fused[#loc61, #loc62])
#loc175 = loc(fused[#loc63, #loc64])
#loc176 = loc(fused[#loc65, #loc66])
#loc177 = loc(fused[#loc67, #loc68])
#loc178 = loc(fused[#loc69, #loc70])
#loc179 = loc(fused[#loc71, #loc72])
#loc180 = loc(fused[#loc73, #loc74])
#loc181 = loc(fused[#loc75, #loc76, #loc77, #loc72])
#loc182 = loc(fused[#loc80, #loc79])
#loc183 = loc(fused[#loc81, #loc82])
#loc184 = loc(fused[#loc83, #loc84])
#loc185 = loc(fused[#loc85, #loc86])
#loc186 = loc(fused[#loc88, #loc87])
#loc187 = loc(fused[#loc89, #loc90])
#loc188 = loc(fused[#loc92, #loc86])
#loc189 = loc(fused[#loc95, #loc98])
#loc190 = loc(fused[#loc100, #loc99])
#loc191 = loc(fused[#loc105, #loc106])
#loc192 = loc(fused[#loc107, #loc108])
#loc193 = loc(fused[#loc109, #loc110])
#loc194 = loc(fused[#loc111, #loc112])
#loc195 = loc(fused[#loc113, #loc114])
#loc196 = loc(fused[#loc115, #loc116])
#loc197 = loc(fused[#loc117, #loc118])
#loc198 = loc(fused[#loc119, #loc120])
#loc199 = loc(fused[#loc121, #loc118])
#loc200 = loc(fused[#loc123, #loc122])
#loc201 = loc(fused[#loc124, #loc125])
#loc202 = loc(fused[#loc126, #loc127])
#loc203 = loc(fused[#loc128, #loc129])
#loc204 = loc(fused[#loc131, #loc130])
#loc205 = loc(fused[#loc132, #loc133])
#loc206 = loc(fused[#loc135, #loc129])
#loc207 = loc(fused[#loc138, #loc141])
#loc208 = loc(fused[#loc143, #loc142])
