!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc40 = loc("CWE511_Logic_Time_Bomb__counter_18.c":86:10)
#loc41 = loc("CWE511_Logic_Time_Bomb__counter_18.c":86:14)
#loc42 = loc("CWE511_Logic_Time_Bomb__counter_18.c":86:20)
#loc43 = loc("CWE511_Logic_Time_Bomb__counter_18.c":86:32)
#loc95 = loc(fused[#loc40, #loc41])
#loc96 = loc(fused[#loc42, #loc43])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE511_Logic_Time_Bomb/CWE511_Logic_Time_Bomb__counter_18.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @unlink(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc79)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"important_file.txt\00" : !cir.array<!s8i x 19>> : !cir.array<!s8i x 19> {alignment = 1 : i64} loc(#loc3)
  cir.func no_proto @CWE511_Logic_Time_Bomb__counter_18_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count", init] {alignment = 4 : i64} loc(#loc81)
    cir.goto "sink" loc(#loc82)
  ^bb1:  // no predecessors
    cir.label "sink" loc(#loc10)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc7)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc81)
    cir.scope {
      cir.do {
        cir.scope {
          %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc15)
          %5 = cir.const #cir.int<20000> : !s32i loc(#loc16)
          %6 = cir.cmp(eq, %4, %5) : !s32i, !cir.bool loc(#loc85)
          cir.if %6 {
            %7 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 19>> loc(#loc3)
            %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 19>>), !cir.ptr<!s8i> loc(#loc3)
            %9 = cir.call @unlink(%8) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc18)
          } loc(#loc86)
        } loc(#loc84)
        %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc19)
        %3 = cir.unary(inc, %2) : !s32i, !s32i loc(#loc20)
        cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc87)
        cir.yield loc(#loc12)
      } while {
        %2 = cir.const #cir.int<1> : !s32i loc(#loc21)
        %3 = cir.const #cir.int<1> : !s32i loc(#loc22)
        %4 = cir.cmp(eq, %2, %3) : !s32i, !cir.bool loc(#loc88)
        cir.condition(%4) loc(#loc23)
      } loc(#loc83)
    } loc(#loc83)
    cir.return loc(#loc5)
  } loc(#loc80)
  cir.func no_proto @CWE511_Logic_Time_Bomb__counter_18_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<!void ()>> loc(#loc90)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc26)
    cir.return loc(#loc25)
  } loc(#loc89)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc91)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc92)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc93)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc34)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc35)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc36)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc37)
  cir.func @main(%arg0: !s32i loc(fused[#loc40, #loc41]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc42, #loc43])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc95)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc96)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc39)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc44)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc44)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc45)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc46)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc46)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc47)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc34)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc34)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc48)
    %8 = cir.get_global @CWE511_Logic_Time_Bomb__counter_18_good : !cir.ptr<!cir.func<!void ()>> loc(#loc97)
    cir.call @CWE511_Logic_Time_Bomb__counter_18_good() : () -> () loc(#loc49)
    %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc35)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc35)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc51)
    %11 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc36)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc36)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc52)
    %13 = cir.get_global @CWE511_Logic_Time_Bomb__counter_18_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc98)
    cir.call @CWE511_Logic_Time_Bomb__counter_18_bad() : () -> () loc(#loc53)
    %14 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc37)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc37)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc55)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc56)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc99)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc99)
    cir.return %17 : !s32i loc(#loc99)
  } loc(#loc94)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"Happy New Year!\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc58)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count", init] {alignment = 4 : i64} loc(#loc101)
    cir.goto "sink" loc(#loc102)
  ^bb1:  // no predecessors
    cir.label "sink" loc(#loc65)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc62)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc101)
    cir.scope {
      cir.do {
        cir.scope {
          %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc70)
          %5 = cir.const #cir.int<20000> : !s32i loc(#loc71)
          %6 = cir.cmp(eq, %4, %5) : !s32i, !cir.bool loc(#loc105)
          cir.if %6 {
            %7 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc58)
            %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc58)
            cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc73)
          } loc(#loc106)
        } loc(#loc104)
        %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc74)
        %3 = cir.unary(inc, %2) : !s32i, !s32i loc(#loc75)
        cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc107)
        cir.yield loc(#loc67)
      } while {
        %2 = cir.const #cir.int<1> : !s32i loc(#loc76)
        %3 = cir.const #cir.int<1> : !s32i loc(#loc77)
        %4 = cir.cmp(eq, %2, %3) : !s32i, !cir.bool loc(#loc108)
        cir.condition(%4) loc(#loc78)
      } loc(#loc103)
    } loc(#loc103)
    cir.return loc(#loc60)
  } loc(#loc100)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE511_Logic_Time_Bomb/CWE511_Logic_Time_Bomb__counter_18.c":0:0)
#loc1 = loc("/usr/include/unistd.h":858:1)
#loc2 = loc("/usr/include/unistd.h":858:48)
#loc3 = loc("CWE511_Logic_Time_Bomb__counter_18.c":40:24)
#loc4 = loc("CWE511_Logic_Time_Bomb__counter_18.c":29:1)
#loc5 = loc("CWE511_Logic_Time_Bomb__counter_18.c":46:1)
#loc6 = loc("CWE511_Logic_Time_Bomb__counter_18.c":34:9)
#loc7 = loc("CWE511_Logic_Time_Bomb__counter_18.c":34:21)
#loc8 = loc("CWE511_Logic_Time_Bomb__counter_18.c":31:5)
#loc9 = loc("CWE511_Logic_Time_Bomb__counter_18.c":31:10)
#loc10 = loc("CWE511_Logic_Time_Bomb__counter_18.c":32:1)
#loc11 = loc("CWE511_Logic_Time_Bomb__counter_18.c":35:9)
#loc12 = loc("CWE511_Logic_Time_Bomb__counter_18.c":44:21)
#loc13 = loc("CWE511_Logic_Time_Bomb__counter_18.c":38:13)
#loc14 = loc("CWE511_Logic_Time_Bomb__counter_18.c":41:13)
#loc15 = loc("CWE511_Logic_Time_Bomb__counter_18.c":38:17)
#loc16 = loc("CWE511_Logic_Time_Bomb__counter_18.c":38:26)
#loc17 = loc("CWE511_Logic_Time_Bomb__counter_18.c":39:13)
#loc18 = loc("CWE511_Logic_Time_Bomb__counter_18.c":40:17)
#loc19 = loc("CWE511_Logic_Time_Bomb__counter_18.c":42:18)
#loc20 = loc("CWE511_Logic_Time_Bomb__counter_18.c":42:13)
#loc21 = loc("CWE511_Logic_Time_Bomb__counter_18.c":44:15)
#loc22 = loc("CWE511_Logic_Time_Bomb__counter_18.c":44:20)
#loc23 = loc("CWE511_Logic_Time_Bomb__counter_18.c":44:17)
#loc24 = loc("CWE511_Logic_Time_Bomb__counter_18.c":72:1)
#loc25 = loc("CWE511_Logic_Time_Bomb__counter_18.c":75:1)
#loc26 = loc("CWE511_Logic_Time_Bomb__counter_18.c":74:5)
#loc27 = loc("CWE511_Logic_Time_Bomb__counter_18.c":74:11)
#loc28 = loc("/usr/include/stdlib.h":575:1)
#loc29 = loc("/usr/include/stdlib.h":575:41)
#loc30 = loc("/usr/include/time.h":76:1)
#loc31 = loc("/usr/include/time.h":76:38)
#loc32 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc33 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc34 = loc("CWE511_Logic_Time_Bomb__counter_18.c":91:15)
#loc35 = loc("CWE511_Logic_Time_Bomb__counter_18.c":93:15)
#loc36 = loc("CWE511_Logic_Time_Bomb__counter_18.c":96:15)
#loc37 = loc("CWE511_Logic_Time_Bomb__counter_18.c":98:15)
#loc38 = loc("CWE511_Logic_Time_Bomb__counter_18.c":86:1)
#loc39 = loc("CWE511_Logic_Time_Bomb__counter_18.c":101:1)
#loc44 = loc("CWE511_Logic_Time_Bomb__counter_18.c":87:1)
#loc45 = loc("CWE511_Logic_Time_Bomb__counter_18.c":89:27)
#loc46 = loc("CWE511_Logic_Time_Bomb__counter_18.c":89:22)
#loc47 = loc("CWE511_Logic_Time_Bomb__counter_18.c":89:5)
#loc48 = loc("CWE511_Logic_Time_Bomb__counter_18.c":91:5)
#loc49 = loc("CWE511_Logic_Time_Bomb__counter_18.c":92:5)
#loc50 = loc("CWE511_Logic_Time_Bomb__counter_18.c":92:45)
#loc51 = loc("CWE511_Logic_Time_Bomb__counter_18.c":93:5)
#loc52 = loc("CWE511_Logic_Time_Bomb__counter_18.c":96:5)
#loc53 = loc("CWE511_Logic_Time_Bomb__counter_18.c":97:5)
#loc54 = loc("CWE511_Logic_Time_Bomb__counter_18.c":97:44)
#loc55 = loc("CWE511_Logic_Time_Bomb__counter_18.c":98:5)
#loc56 = loc("CWE511_Logic_Time_Bomb__counter_18.c":100:12)
#loc57 = loc("CWE511_Logic_Time_Bomb__counter_18.c":100:5)
#loc58 = loc("CWE511_Logic_Time_Bomb__counter_18.c":64:27)
#loc59 = loc("CWE511_Logic_Time_Bomb__counter_18.c":53:1)
#loc60 = loc("CWE511_Logic_Time_Bomb__counter_18.c":70:1)
#loc61 = loc("CWE511_Logic_Time_Bomb__counter_18.c":58:9)
#loc62 = loc("CWE511_Logic_Time_Bomb__counter_18.c":58:21)
#loc63 = loc("CWE511_Logic_Time_Bomb__counter_18.c":55:5)
#loc64 = loc("CWE511_Logic_Time_Bomb__counter_18.c":55:10)
#loc65 = loc("CWE511_Logic_Time_Bomb__counter_18.c":56:1)
#loc66 = loc("CWE511_Logic_Time_Bomb__counter_18.c":59:9)
#loc67 = loc("CWE511_Logic_Time_Bomb__counter_18.c":68:21)
#loc68 = loc("CWE511_Logic_Time_Bomb__counter_18.c":62:13)
#loc69 = loc("CWE511_Logic_Time_Bomb__counter_18.c":65:13)
#loc70 = loc("CWE511_Logic_Time_Bomb__counter_18.c":62:17)
#loc71 = loc("CWE511_Logic_Time_Bomb__counter_18.c":62:26)
#loc72 = loc("CWE511_Logic_Time_Bomb__counter_18.c":63:13)
#loc73 = loc("CWE511_Logic_Time_Bomb__counter_18.c":64:17)
#loc74 = loc("CWE511_Logic_Time_Bomb__counter_18.c":66:18)
#loc75 = loc("CWE511_Logic_Time_Bomb__counter_18.c":66:13)
#loc76 = loc("CWE511_Logic_Time_Bomb__counter_18.c":68:15)
#loc77 = loc("CWE511_Logic_Time_Bomb__counter_18.c":68:20)
#loc78 = loc("CWE511_Logic_Time_Bomb__counter_18.c":68:17)
#loc79 = loc(fused[#loc1, #loc2])
#loc80 = loc(fused[#loc4, #loc5])
#loc81 = loc(fused[#loc6, #loc7])
#loc82 = loc(fused[#loc8, #loc9])
#loc83 = loc(fused[#loc11, #loc12])
#loc84 = loc(fused[#loc13, #loc14])
#loc85 = loc(fused[#loc15, #loc16])
#loc86 = loc(fused[#loc17, #loc14])
#loc87 = loc(fused[#loc20, #loc19])
#loc88 = loc(fused[#loc21, #loc22])
#loc89 = loc(fused[#loc24, #loc25])
#loc90 = loc(fused[#loc26, #loc27])
#loc91 = loc(fused[#loc28, #loc29])
#loc92 = loc(fused[#loc30, #loc31])
#loc93 = loc(fused[#loc32, #loc33])
#loc94 = loc(fused[#loc38, #loc39])
#loc97 = loc(fused[#loc49, #loc50])
#loc98 = loc(fused[#loc53, #loc54])
#loc99 = loc(fused[#loc57, #loc56])
#loc100 = loc(fused[#loc59, #loc60])
#loc101 = loc(fused[#loc61, #loc62])
#loc102 = loc(fused[#loc63, #loc64])
#loc103 = loc(fused[#loc66, #loc67])
#loc104 = loc(fused[#loc68, #loc69])
#loc105 = loc(fused[#loc70, #loc71])
#loc106 = loc(fused[#loc72, #loc69])
#loc107 = loc(fused[#loc75, #loc74])
#loc108 = loc(fused[#loc76, #loc77])
