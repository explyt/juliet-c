clang: warning: argument unused during compilation: '-c' [-Wunused-command-line-argument]
NYI
UNREACHABLE executed at /home/ladisgin/git_proj/clangir/clang/lib/CIR/CodeGen/CIRGenExprCXX.cpp:914!
PLEASE submit a bug report to https://github.com/llvm/llvm-project/issues/ and include the crash backtrace, preprocessed source, and associated run script.
Stack dump:
0.	Program arguments: /home/ladisgin/git_proj/clangir/build/bin/clang -S -Xclang -emit-cir -std=c++11 -I ../../../testcasesupport -DINCLUDEMAIN -c CWE122_Heap_Based_Buffer_Overflow__cpp_src_char_cpy_83_goodG2B.cpp -o /home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/.CWE122_Heap_Based_Buffer_Overflow__cpp_src_char_cpy_83.out.cir
1.	<eof> parser at end of file
2.	CWE122_Heap_Based_Buffer_Overflow__cpp_src_char_cpy_83_goodG2B.cpp:21:11: LLVM IR generation of declaration 'CWE122_Heap_Based_Buffer_Overflow__cpp_src_char_cpy_83'
Stack dump without symbol names (ensure you have llvm-symbolizer in your PATH or set the environment var `LLVM_SYMBOLIZER_PATH` to point 0  clang0  clang     0x0000000001aaf03b llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) + 43
1  clang     0x0000000001aac584 llvm::sys::CleanupOnSignal(unsigned long) + 132
2  clang     0x00000000019f5e10
3  libc.so.6 0x00007fcf3b825dd0
4  libc.so.6 0x00007fcf3b87ec94
5  libc.so.6 0x00007fcf3b825d1e gsignal + 30
6  libc.so.6 0x00007fcf3b80d942 abort + 223
7  clang     0x0000000001a0165a
8  clang     0x000000000327e78b clang::CIRGen::CIRGenFunction::emitCXXDeleteExpr(clang::CXXDeleteExpr const*) + 1899
9  clang     0x000000000328e0e6
10 clang     0x000000000328f1ae clang::CIRGen::CIRGenFunction::emitScalarExpr(clang::Expr const*) + 62
11 clang     0x000000000323cbb7 clang::CIRGen::CIRGenFunction::emitAnyExpr(clang::Expr const*, clang::CIRGen::AggValueSlot, bool) + 87
12 clang     0x00000000032454c4 clang::CIRGen::CIRGenFunction::emitIgnoredExpr(clang::Expr const*13 clang13 clang     0x00000000032bfda5 clang::CIRGen::CIRGenFunction::emitStmt(clang::Stmt const*, bool, llvm::ArrayRef<clang::Attr const*>14 clang14 clang     0x00000000032c296f clang::CIRGen::CIRGenFunction::emitCompoundStmtWithoutScope(clang::CompoundStmt const&, bool, clang::CIRGen::AggValueSlot15 clang15 clang     0x00000000016 clang16 clang     0x00000000043a19b6 cir::ScopeOp::build(mlir::OpBuilder&, mlir::OperationState&, llvm::function_ref<void (mlir::OpBuilder&, mlir::Type&, mlir::Location)>17 clang17 clang     0x00000000032bce4a clang::CIRGen::CIRGenFunction::emitCompoundStmt(clang::CompoundStmt const&, bool, clang::CIRGen::AggValueSlot18 clang18 clang     0x00000000032bf9c4 clang::CIRGen::CIRGenFunction::emitSimpleStmt(clang::Stmt const*, bool19 clang19 clang     0x00000000032bfcfe clang::CIRGen::CIRGenFunction::emitStmt(clang::Stmt const*, bool, llvm::ArrayRef<clang::Attr const*20 clang20 clang     0x00000000032c296f clang::CIRGen::CIRGenFunction::emitCompoundStmtWithoutScope(clang::CompoundStmt const&, bool, clang::CIRGen::AggValueSlot21 clang21 clang     0x00000000032bf704 clang::CIRGen::CIRGenFunction::emitSimpleStmt(clang::Stmt const*, bool22 clang22 clang     0x00000000032bfcfe clang::CIRGen::CIRGenFunction::emitStmt(clang::Stmt const*, bool, llvm::ArrayRef<clang::Attr const*23 clang23 clang     0x0000000003312809 clang::CIRGen::CIRGenFunction::emitDestructorBody(clang::CIRGen::FunctionArgList&24 clang24 clang     0x00000000032a685d clang::CIRGen::CIRGenFunction::generateCode(clang::GlobalDecl, cir::FuncOp, clang::CIRGen::CIRGenFunctionInfo const&)25 clang25 clang     0x000000000330060f clang::CIRGen::CIRGenModule::codegenCXXStructor(clang::GlobalDecl26 clang26 clang     0x00000000027 clang27 clang     0x00000000031e45de clang::CIRGen::CIRGenModule::emitGlobalDefinition(clang::GlobalDecl, mlir::Operation*28 clang28 clang     0x00000000031e5747 clang::CIRGen::CIRGenModule::emitGlobal(clang::GlobalDecl)29 clang29 clang     0x00000000030 clang30 clang     0x00000000031e62b5 clang::CIRGen::CIRGenModule::emitDeclContext(clang::DeclContext const*31 clang31 clang     0x00000000031c8ca3 cir::CIRGenerator::HandleTopLevelDecl(clang::DeclGroupRef32 clang32 clang     0x00000000033 clang33 clang     0x00000000053c09b4 clang::ParseAST(clang::Sema&, bool, bool34 clang34 clang     0x0000000002741cd9 clang::FrontendAction::Execute(35 clang35 clang     0x00000000026bdf7e clang::CompilerInstance::ExecuteAction(clang::FrontendAction&)36 clang36 clang     0x00000000028273ee clang::ExecuteCompilerInvocation(clang::CompilerInstance*)37 clang37 clang     0x0000000000522f6b cc1_main(llvm::ArrayRef<char const*>, char const*, void*)38 clang38 clang     0x00000000039 clang39 clang     0x00000000040 clang40 clang     0x00000000019f6272 llvm::CrashRecoveryContext::RunSafely(llvm::function_ref<void ()>41 clang41 clang     0x00000000042 clang42 clang     0x000000000244139b clang::driver::Compilation::ExecuteCommand(clang::driver::Command const&, clang::driver::Command const*&, bool) cons43 clang43 clang     0x000000000244245e clang::dclang: error: unable to execute command: Aborted (core dumped)
clang: note: diagnostic msg: Error generating preprocessed source(s).
 bool) cons44 clang44 clang     0x000000000244e554 clang::driver::Driver::ExecuteCompilation(clang::driver::Compilation&, llvm::SmallVectorImpl<std::pair<int, clang::driver::Command const*>>&45 clang45 clang     0x000000000051f110 clang_main(int, char**, llvm::ToolContext const&)46 clang46 clang     0x000000000042abb3 ma47 libc.47 libc.so.6 0x00007fcf348 libc.48 libc.so.6 0x00007fcf3b80f30b __libc_start_mai49 clang49 clang     0x000000000051952  _staclang: error::cerror: clang frontend command failed with exit code 134 (use -v to see invoclang veclang version 20.0.0git (git@github.com:llvm/clangir.git 888f00c5bd78e8355c9f7288c1a3237884Target:
Target: x86_64-unknown-liThread 
Thread mode
Install
InstalledDir: /home/ladisgin/git_proj/clangir/buBuild c
Build config: +assclang: eclang: error: unable to execute command: Aborted (core dumped)
clang: note: diagnostic msg: Error generating preprocessed source(s).
