!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":22:67)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":22:74)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":61:71)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":61:78)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":96:71)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":96:78)
#loc203 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":112:23)
#true = #cir.bool<true> : !cir.bool
#loc237 = loc(fused[#loc14, #loc15])
#loc265 = loc(fused[#loc85, #loc86])
#loc293 = loc(fused[#loc158, #loc159])
module @"/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc231)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc232)
  cir.func private @printIntLine(!s32i) loc(#loc233)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc234)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"ERROR: Array index is negative.\00" : !cir.array<!s8i x 32>> : !cir.array<!s8i x 32> {alignment = 1 : i64} loc(#loc9)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc235)
  cir.func @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b_badSink(%arg0: !cir.ptr<!void> loc(fused[#loc14, #loc15])) extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc238)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc239)
    %2 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dataVoidPtr", init] {alignment = 8 : i64} loc(#loc237)
    %3 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr", init] {alignment = 8 : i64} loc(#loc240)
    %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc241)
    cir.store %arg0, %2 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc24)
    %5 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc21)
    %6 = cir.cast(bitcast, %5 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc21)
    cir.store %6, %3 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc240)
    %7 = cir.load deref %3 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc25)
    %8 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc26)
    cir.store %8, %4 : !s32i, !cir.ptr<!s32i> loc(#loc241)
    cir.br ^bb1 loc(#loc242)
  ^bb1:  // pred: ^bb0
    %9 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc29)
    %10 = cir.const #cir.int<10> : !s32i loc(#loc30)
    %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc30)
    %12 = cir.const #cir.int<4> : !u64i loc(#loc243)
    %13 = cir.binop(mul, %11, %12) : !u64i loc(#loc244)
    %14 = cir.call @malloc(%13) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc29)
    %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc245)
    cir.store %15, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc239)
    cir.br ^bb2 loc(#loc246)
  ^bb2:  // pred: ^bb1
    %16 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc35)
    %17 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc36)
    %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc36)
    %19 = cir.cmp(eq, %16, %18) : !cir.ptr<!s32i>, !cir.bool loc(#loc247)
    cir.brcond %19 ^bb3, ^bb4 loc(#loc248)
  ^bb3:  // pred: ^bb2
    %20 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc38)
    %21 = cir.const #cir.int<1> : !s32i loc(#loc39)
    %22 = cir.unary(minus, %21) nsw : !s32i, !s32i loc(#loc40)
    cir.call @exit(%22) : (!s32i) -> () extra(#fn_attr) loc(#loc38)
    cir.br ^bb4 loc(#loc34)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc34)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc249)
  ^bb6:  // pred: ^bb5
    %23 = cir.const #cir.int<0> : !s32i loc(#loc43)
    cir.store %23, %0 : !s32i, !cir.ptr<!s32i> loc(#loc250)
    cir.br ^bb7 loc(#loc249)
  ^bb7:  // 2 preds: ^bb6, ^bb11
    %24 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc45)
    %25 = cir.const #cir.int<10> : !s32i loc(#loc46)
    %26 = cir.cmp(lt, %24, %25) : !s32i, !cir.bool loc(#loc251)
    cir.brcond %26 ^bb8, ^bb12 loc(#loc47)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc252)
  ^bb9:  // pred: ^bb8
    %27 = cir.const #cir.int<0> : !s32i loc(#loc49)
    %28 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc50)
    %29 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc51)
    %30 = cir.ptr_stride(%28 : !cir.ptr<!s32i>, %29 : !s32i), !cir.ptr<!s32i> loc(#loc52)
    cir.store %27, %30 : !s32i, !cir.ptr<!s32i> loc(#loc253)
    cir.br ^bb10 loc(#loc42)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc42)
  ^bb11:  // pred: ^bb10
    %31 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc53)
    %32 = cir.unary(inc, %31) nsw : !s32i, !s32i loc(#loc54)
    cir.store %32, %0 : !s32i, !cir.ptr<!s32i> loc(#loc254)
    cir.br ^bb7 loc(#loc249)
  ^bb12:  // pred: ^bb7
    cir.br ^bb13 loc(#loc42)
  ^bb13:  // pred: ^bb12
    cir.br ^bb14 loc(#loc255)
  ^bb14:  // pred: ^bb13
    %33 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc57)
    %34 = cir.const #cir.int<0> : !s32i loc(#loc58)
    %35 = cir.cmp(ge, %33, %34) : !s32i, !cir.bool loc(#loc256)
    cir.brcond %35 ^bb15, ^bb24 loc(#loc257)
  ^bb15:  // pred: ^bb14
    %36 = cir.const #cir.int<1> : !s32i loc(#loc62)
    %37 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc63)
    %38 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc64)
    %39 = cir.ptr_stride(%37 : !cir.ptr<!s32i>, %38 : !s32i), !cir.ptr<!s32i> loc(#loc65)
    cir.store %36, %39 : !s32i, !cir.ptr<!s32i> loc(#loc258)
    cir.br ^bb16 loc(#loc259)
  ^bb16:  // pred: ^bb15
    %40 = cir.const #cir.int<0> : !s32i loc(#loc68)
    cir.store %40, %0 : !s32i, !cir.ptr<!s32i> loc(#loc260)
    cir.br ^bb17 loc(#loc259)
  ^bb17:  // 2 preds: ^bb16, ^bb21
    %41 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc70)
    %42 = cir.const #cir.int<10> : !s32i loc(#loc71)
    %43 = cir.cmp(lt, %41, %42) : !s32i, !cir.bool loc(#loc261)
    cir.brcond %43 ^bb18, ^bb22 loc(#loc72)
  ^bb18:  // pred: ^bb17
    cir.br ^bb19 loc(#loc262)
  ^bb19:  // pred: ^bb18
    %44 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc74)
    %45 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc75)
    %46 = cir.ptr_stride(%44 : !cir.ptr<!s32i>, %45 : !s32i), !cir.ptr<!s32i> loc(#loc76)
    %47 = cir.load %46 : !cir.ptr<!s32i>, !s32i loc(#loc74)
    cir.call @printIntLine(%47) : (!s32i) -> () loc(#loc77)
    cir.br ^bb20 loc(#loc67)
  ^bb20:  // pred: ^bb19
    cir.br ^bb21 loc(#loc67)
  ^bb21:  // pred: ^bb20
    %48 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc78)
    %49 = cir.unary(inc, %48) nsw : !s32i, !s32i loc(#loc79)
    cir.store %49, %0 : !s32i, !cir.ptr<!s32i> loc(#loc263)
    cir.br ^bb17 loc(#loc259)
  ^bb22:  // pred: ^bb17
    cir.br ^bb23 loc(#loc67)
  ^bb23:  // pred: ^bb22
    cir.br ^bb25 loc(#loc60)
  ^bb24:  // pred: ^bb14
    %50 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc9)
    %51 = cir.cast(array_to_ptrdecay, %50 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc9)
    cir.call @printLine(%51) : (!cir.ptr<!s8i>) -> () loc(#loc80)
    cir.br ^bb25 loc(#loc56)
  ^bb25:  // 2 preds: ^bb23, ^bb24
    cir.br ^bb26 loc(#loc56)
  ^bb26:  // pred: ^bb25
    %52 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc81)
    %53 = cir.cast(bitcast, %52 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc81)
    cir.call @free(%53) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc82)
    cir.br ^bb27 loc(#loc28)
  ^bb27:  // pred: ^bb26
    cir.return loc(#loc13)
  } loc(#loc236)
  cir.func @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b_goodG2BSink(%arg0: !cir.ptr<!void> loc(fused[#loc85, #loc86])) extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc266)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc267)
    %2 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dataVoidPtr", init] {alignment = 8 : i64} loc(#loc265)
    %3 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr", init] {alignment = 8 : i64} loc(#loc268)
    %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc269)
    cir.store %arg0, %2 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc95)
    %5 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc92)
    %6 = cir.cast(bitcast, %5 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc92)
    cir.store %6, %3 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc268)
    %7 = cir.load deref %3 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc96)
    %8 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc97)
    cir.store %8, %4 : !s32i, !cir.ptr<!s32i> loc(#loc269)
    cir.br ^bb1 loc(#loc270)
  ^bb1:  // pred: ^bb0
    %9 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc100)
    %10 = cir.const #cir.int<10> : !s32i loc(#loc101)
    %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc101)
    %12 = cir.const #cir.int<4> : !u64i loc(#loc271)
    %13 = cir.binop(mul, %11, %12) : !u64i loc(#loc272)
    %14 = cir.call @malloc(%13) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc100)
    %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc273)
    cir.store %15, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc267)
    cir.br ^bb2 loc(#loc274)
  ^bb2:  // pred: ^bb1
    %16 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc106)
    %17 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc107)
    %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc107)
    %19 = cir.cmp(eq, %16, %18) : !cir.ptr<!s32i>, !cir.bool loc(#loc275)
    cir.brcond %19 ^bb3, ^bb4 loc(#loc276)
  ^bb3:  // pred: ^bb2
    %20 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc109)
    %21 = cir.const #cir.int<1> : !s32i loc(#loc110)
    %22 = cir.unary(minus, %21) nsw : !s32i, !s32i loc(#loc111)
    cir.call @exit(%22) : (!s32i) -> () extra(#fn_attr) loc(#loc109)
    cir.br ^bb4 loc(#loc105)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc105)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc277)
  ^bb6:  // pred: ^bb5
    %23 = cir.const #cir.int<0> : !s32i loc(#loc114)
    cir.store %23, %0 : !s32i, !cir.ptr<!s32i> loc(#loc278)
    cir.br ^bb7 loc(#loc277)
  ^bb7:  // 2 preds: ^bb6, ^bb11
    %24 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc116)
    %25 = cir.const #cir.int<10> : !s32i loc(#loc117)
    %26 = cir.cmp(lt, %24, %25) : !s32i, !cir.bool loc(#loc279)
    cir.brcond %26 ^bb8, ^bb12 loc(#loc118)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc280)
  ^bb9:  // pred: ^bb8
    %27 = cir.const #cir.int<0> : !s32i loc(#loc120)
    %28 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc121)
    %29 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc122)
    %30 = cir.ptr_stride(%28 : !cir.ptr<!s32i>, %29 : !s32i), !cir.ptr<!s32i> loc(#loc123)
    cir.store %27, %30 : !s32i, !cir.ptr<!s32i> loc(#loc281)
    cir.br ^bb10 loc(#loc113)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc113)
  ^bb11:  // pred: ^bb10
    %31 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc124)
    %32 = cir.unary(inc, %31) nsw : !s32i, !s32i loc(#loc125)
    cir.store %32, %0 : !s32i, !cir.ptr<!s32i> loc(#loc282)
    cir.br ^bb7 loc(#loc277)
  ^bb12:  // pred: ^bb7
    cir.br ^bb13 loc(#loc113)
  ^bb13:  // pred: ^bb12
    cir.br ^bb14 loc(#loc283)
  ^bb14:  // pred: ^bb13
    %33 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc128)
    %34 = cir.const #cir.int<0> : !s32i loc(#loc129)
    %35 = cir.cmp(ge, %33, %34) : !s32i, !cir.bool loc(#loc284)
    cir.brcond %35 ^bb15, ^bb24 loc(#loc285)
  ^bb15:  // pred: ^bb14
    %36 = cir.const #cir.int<1> : !s32i loc(#loc133)
    %37 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc134)
    %38 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc135)
    %39 = cir.ptr_stride(%37 : !cir.ptr<!s32i>, %38 : !s32i), !cir.ptr<!s32i> loc(#loc136)
    cir.store %36, %39 : !s32i, !cir.ptr<!s32i> loc(#loc286)
    cir.br ^bb16 loc(#loc287)
  ^bb16:  // pred: ^bb15
    %40 = cir.const #cir.int<0> : !s32i loc(#loc139)
    cir.store %40, %0 : !s32i, !cir.ptr<!s32i> loc(#loc288)
    cir.br ^bb17 loc(#loc287)
  ^bb17:  // 2 preds: ^bb16, ^bb21
    %41 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc141)
    %42 = cir.const #cir.int<10> : !s32i loc(#loc142)
    %43 = cir.cmp(lt, %41, %42) : !s32i, !cir.bool loc(#loc289)
    cir.brcond %43 ^bb18, ^bb22 loc(#loc143)
  ^bb18:  // pred: ^bb17
    cir.br ^bb19 loc(#loc290)
  ^bb19:  // pred: ^bb18
    %44 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc145)
    %45 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc146)
    %46 = cir.ptr_stride(%44 : !cir.ptr<!s32i>, %45 : !s32i), !cir.ptr<!s32i> loc(#loc147)
    %47 = cir.load %46 : !cir.ptr<!s32i>, !s32i loc(#loc145)
    cir.call @printIntLine(%47) : (!s32i) -> () loc(#loc148)
    cir.br ^bb20 loc(#loc138)
  ^bb20:  // pred: ^bb19
    cir.br ^bb21 loc(#loc138)
  ^bb21:  // pred: ^bb20
    %48 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc149)
    %49 = cir.unary(inc, %48) nsw : !s32i, !s32i loc(#loc150)
    cir.store %49, %0 : !s32i, !cir.ptr<!s32i> loc(#loc291)
    cir.br ^bb17 loc(#loc287)
  ^bb22:  // pred: ^bb17
    cir.br ^bb23 loc(#loc138)
  ^bb23:  // pred: ^bb22
    cir.br ^bb25 loc(#loc131)
  ^bb24:  // pred: ^bb14
    %50 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc151)
    %51 = cir.cast(array_to_ptrdecay, %50 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc151)
    cir.call @printLine(%51) : (!cir.ptr<!s8i>) -> () loc(#loc152)
    cir.br ^bb25 loc(#loc127)
  ^bb25:  // 2 preds: ^bb23, ^bb24
    cir.br ^bb26 loc(#loc127)
  ^bb26:  // pred: ^bb25
    %52 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc153)
    %53 = cir.cast(bitcast, %52 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc153)
    cir.call @free(%53) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc154)
    cir.br ^bb27 loc(#loc99)
  ^bb27:  // pred: ^bb26
    cir.return loc(#loc84)
  } loc(#loc264)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"ERROR: Array index is out-of-bounds\00" : !cir.array<!s8i x 36>> : !cir.array<!s8i x 36> {alignment = 1 : i64} loc(#loc155)
  cir.func @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b_goodB2GSink(%arg0: !cir.ptr<!void> loc(fused[#loc158, #loc159])) extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc294)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc295)
    %2 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dataVoidPtr", init] {alignment = 8 : i64} loc(#loc293)
    %3 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr", init] {alignment = 8 : i64} loc(#loc296)
    %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc297)
    cir.store %arg0, %2 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc168)
    %5 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc165)
    %6 = cir.cast(bitcast, %5 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc165)
    cir.store %6, %3 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc296)
    %7 = cir.load deref %3 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc169)
    %8 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc170)
    cir.store %8, %4 : !s32i, !cir.ptr<!s32i> loc(#loc297)
    cir.br ^bb1 loc(#loc298)
  ^bb1:  // pred: ^bb0
    %9 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc173)
    %10 = cir.const #cir.int<10> : !s32i loc(#loc174)
    %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc174)
    %12 = cir.const #cir.int<4> : !u64i loc(#loc299)
    %13 = cir.binop(mul, %11, %12) : !u64i loc(#loc300)
    %14 = cir.call @malloc(%13) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc173)
    %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc301)
    cir.store %15, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc295)
    cir.br ^bb2 loc(#loc302)
  ^bb2:  // pred: ^bb1
    %16 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc179)
    %17 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc180)
    %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc180)
    %19 = cir.cmp(eq, %16, %18) : !cir.ptr<!s32i>, !cir.bool loc(#loc303)
    cir.brcond %19 ^bb3, ^bb4 loc(#loc304)
  ^bb3:  // pred: ^bb2
    %20 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc182)
    %21 = cir.const #cir.int<1> : !s32i loc(#loc183)
    %22 = cir.unary(minus, %21) nsw : !s32i, !s32i loc(#loc184)
    cir.call @exit(%22) : (!s32i) -> () extra(#fn_attr) loc(#loc182)
    cir.br ^bb4 loc(#loc178)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc178)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc305)
  ^bb6:  // pred: ^bb5
    %23 = cir.const #cir.int<0> : !s32i loc(#loc187)
    cir.store %23, %0 : !s32i, !cir.ptr<!s32i> loc(#loc306)
    cir.br ^bb7 loc(#loc305)
  ^bb7:  // 2 preds: ^bb6, ^bb11
    %24 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc189)
    %25 = cir.const #cir.int<10> : !s32i loc(#loc190)
    %26 = cir.cmp(lt, %24, %25) : !s32i, !cir.bool loc(#loc307)
    cir.brcond %26 ^bb8, ^bb12 loc(#loc191)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc308)
  ^bb9:  // pred: ^bb8
    %27 = cir.const #cir.int<0> : !s32i loc(#loc193)
    %28 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc194)
    %29 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc195)
    %30 = cir.ptr_stride(%28 : !cir.ptr<!s32i>, %29 : !s32i), !cir.ptr<!s32i> loc(#loc196)
    cir.store %27, %30 : !s32i, !cir.ptr<!s32i> loc(#loc309)
    cir.br ^bb10 loc(#loc186)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc186)
  ^bb11:  // pred: ^bb10
    %31 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc197)
    %32 = cir.unary(inc, %31) nsw : !s32i, !s32i loc(#loc198)
    cir.store %32, %0 : !s32i, !cir.ptr<!s32i> loc(#loc310)
    cir.br ^bb7 loc(#loc305)
  ^bb12:  // pred: ^bb7
    cir.br ^bb13 loc(#loc186)
  ^bb13:  // pred: ^bb12
    cir.br ^bb14 loc(#loc311)
  ^bb14:  // pred: ^bb13
    %33 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc201)
    %34 = cir.const #cir.int<0> : !s32i loc(#loc202)
    %35 = cir.cmp(ge, %33, %34) : !s32i, !cir.bool loc(#loc312)
    cir.brcond %35 ^bb15, ^bb20 loc(#loc203)
  ^bb15:  // pred: ^bb14
    %36 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc204)
    %37 = cir.const #cir.int<10> : !s32i loc(#loc205)
    %38 = cir.cmp(lt, %36, %37) : !s32i, !cir.bool loc(#loc313)
    cir.brcond %38 ^bb16, ^bb17 loc(#loc203)
  ^bb16:  // pred: ^bb15
    %39 = cir.const #true loc(#loc203)
    cir.br ^bb18(%39 : !cir.bool) loc(#loc203)
  ^bb17:  // pred: ^bb15
    %40 = cir.const #false loc(#loc203)
    cir.br ^bb18(%40 : !cir.bool) loc(#loc203)
  ^bb18(%41: !cir.bool loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":112:23)):  // 2 preds: ^bb16, ^bb17
    cir.br ^bb19 loc(#loc203)
  ^bb19:  // pred: ^bb18
    cir.br ^bb21(%41 : !cir.bool) loc(#loc203)
  ^bb20:  // pred: ^bb14
    %42 = cir.const #false loc(#loc203)
    cir.br ^bb21(%42 : !cir.bool) loc(#loc203)
  ^bb21(%43: !cir.bool loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":112:23)):  // 2 preds: ^bb19, ^bb20
    cir.br ^bb22 loc(#loc203)
  ^bb22:  // pred: ^bb21
    cir.brcond %43 ^bb23, ^bb32 loc(#loc314)
  ^bb23:  // pred: ^bb22
    %44 = cir.const #cir.int<1> : !s32i loc(#loc210)
    %45 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc211)
    %46 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc212)
    %47 = cir.ptr_stride(%45 : !cir.ptr<!s32i>, %46 : !s32i), !cir.ptr<!s32i> loc(#loc213)
    cir.store %44, %47 : !s32i, !cir.ptr<!s32i> loc(#loc315)
    cir.br ^bb24 loc(#loc316)
  ^bb24:  // pred: ^bb23
    %48 = cir.const #cir.int<0> : !s32i loc(#loc216)
    cir.store %48, %0 : !s32i, !cir.ptr<!s32i> loc(#loc317)
    cir.br ^bb25 loc(#loc316)
  ^bb25:  // 2 preds: ^bb24, ^bb29
    %49 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc218)
    %50 = cir.const #cir.int<10> : !s32i loc(#loc219)
    %51 = cir.cmp(lt, %49, %50) : !s32i, !cir.bool loc(#loc318)
    cir.brcond %51 ^bb26, ^bb30 loc(#loc220)
  ^bb26:  // pred: ^bb25
    cir.br ^bb27 loc(#loc319)
  ^bb27:  // pred: ^bb26
    %52 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc222)
    %53 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc223)
    %54 = cir.ptr_stride(%52 : !cir.ptr<!s32i>, %53 : !s32i), !cir.ptr<!s32i> loc(#loc224)
    %55 = cir.load %54 : !cir.ptr<!s32i>, !s32i loc(#loc222)
    cir.call @printIntLine(%55) : (!s32i) -> () loc(#loc225)
    cir.br ^bb28 loc(#loc215)
  ^bb28:  // pred: ^bb27
    cir.br ^bb29 loc(#loc215)
  ^bb29:  // pred: ^bb28
    %56 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc226)
    %57 = cir.unary(inc, %56) nsw : !s32i, !s32i loc(#loc227)
    cir.store %57, %0 : !s32i, !cir.ptr<!s32i> loc(#loc320)
    cir.br ^bb25 loc(#loc316)
  ^bb30:  // pred: ^bb25
    cir.br ^bb31 loc(#loc215)
  ^bb31:  // pred: ^bb30
    cir.br ^bb33 loc(#loc208)
  ^bb32:  // pred: ^bb22
    %58 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc155)
    %59 = cir.cast(array_to_ptrdecay, %58 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc155)
    cir.call @printLine(%59) : (!cir.ptr<!s8i>) -> () loc(#loc228)
    cir.br ^bb33 loc(#loc200)
  ^bb33:  // 2 preds: ^bb31, ^bb32
    cir.br ^bb34 loc(#loc200)
  ^bb34:  // pred: ^bb33
    %60 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc229)
    %61 = cir.cast(bitcast, %60 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc229)
    cir.call @free(%61) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc230)
    cir.br ^bb35 loc(#loc172)
  ^bb35:  // pred: ^bb34
    cir.return loc(#loc157)
  } loc(#loc292)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":50:23)
#loc10 = loc("/usr/include/stdlib.h":687:1)
#loc11 = loc("/usr/include/stdlib.h":687:32)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":22:1)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":54:1)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":29:9)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":29:13)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":30:9)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":30:54)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":25:5)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":25:28)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":27:5)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":27:25)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":23:1)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":27:18)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":27:17)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":28:5)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":53:5)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":30:31)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":30:38)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":30:43)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":30:53)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":31:9)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":31:39)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":31:13)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":31:23)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":31:29)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":31:30)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":31:36)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":31:35)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":33:9)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":36:9)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":33:18)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":33:14)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":33:21)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":33:25)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":33:23)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":34:9)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":35:25)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":35:13)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":35:20)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":35:21)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":33:30)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":33:29)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":39:9)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":51:9)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":39:13)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":39:21)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":40:9)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":47:9)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":49:9)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":41:28)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":41:13)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":41:20)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":41:24)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":43:13)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":46:13)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":43:21)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":43:17)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":43:24)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":43:28)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":43:26)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":44:13)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":45:30)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":45:37)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":45:38)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":45:17)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":43:33)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":43:32)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":50:13)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":52:14)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":52:9)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":61:1)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":93:1)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":68:9)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":68:13)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":69:9)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":69:54)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":64:5)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":64:28)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":66:5)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":66:25)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":62:1)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":66:18)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":66:17)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":67:5)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":92:5)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":69:31)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":69:38)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":69:43)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":69:53)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":70:9)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":70:39)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":70:13)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":70:23)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":70:29)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":70:30)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":70:36)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":70:35)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":72:9)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":75:9)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":72:18)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":72:14)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":72:21)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":72:25)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":72:23)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":73:9)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":74:25)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":74:13)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":74:20)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":74:21)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":72:30)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":72:29)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":78:9)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":90:9)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":78:13)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":78:21)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":79:9)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":86:9)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":88:9)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":80:28)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":80:13)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":80:20)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":80:24)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":82:13)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":85:13)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":82:21)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":82:17)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":82:24)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":82:28)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":82:26)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":83:13)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":84:30)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":84:37)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":84:38)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":84:17)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":82:33)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":82:32)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":89:23)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":89:13)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":91:14)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":91:9)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":123:23)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":96:1)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":127:1)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":103:9)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":103:13)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":104:9)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":104:54)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":99:5)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":99:28)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":101:5)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":101:25)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":97:1)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":101:18)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":101:17)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":102:5)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":126:5)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":104:31)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":104:38)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":104:43)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":104:53)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":105:9)
#loc178 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":105:39)
#loc179 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":105:13)
#loc180 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":105:23)
#loc181 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":105:29)
#loc182 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":105:30)
#loc183 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":105:36)
#loc184 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":105:35)
#loc185 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":107:9)
#loc186 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":110:9)
#loc187 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":107:18)
#loc188 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":107:14)
#loc189 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":107:21)
#loc190 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":107:25)
#loc191 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":107:23)
#loc192 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":108:9)
#loc193 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":109:25)
#loc194 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":109:13)
#loc195 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":109:20)
#loc196 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":109:21)
#loc197 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":107:30)
#loc198 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":107:29)
#loc199 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":112:9)
#loc200 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":124:9)
#loc201 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":112:13)
#loc202 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":112:21)
#loc204 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":112:26)
#loc205 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":112:34)
#loc206 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":112:36)
#loc207 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":113:9)
#loc208 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":120:9)
#loc209 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":122:9)
#loc210 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":114:28)
#loc211 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":114:13)
#loc212 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":114:20)
#loc213 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":114:24)
#loc214 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":116:13)
#loc215 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":119:13)
#loc216 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":116:21)
#loc217 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":116:17)
#loc218 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":116:24)
#loc219 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":116:28)
#loc220 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":116:26)
#loc221 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":117:13)
#loc222 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":118:30)
#loc223 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":118:37)
#loc224 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":118:38)
#loc225 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":118:17)
#loc226 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":116:33)
#loc227 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":116:32)
#loc228 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":123:13)
#loc229 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":125:14)
#loc230 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c":125:9)
#loc231 = loc(fused[#loc1, #loc2])
#loc232 = loc(fused[#loc3, #loc4])
#loc233 = loc(fused[#loc5, #loc6])
#loc234 = loc(fused[#loc7, #loc8])
#loc235 = loc(fused[#loc10, #loc11])
#loc236 = loc(fused[#loc12, #loc13])
#loc238 = loc(fused[#loc16, #loc17])
#loc239 = loc(fused[#loc18, #loc19])
#loc240 = loc(fused[#loc20, #loc21])
#loc241 = loc(fused[#loc22, #loc23])
#loc242 = loc(fused[#loc27, #loc28])
#loc243 = loc(fused[#loc31, #loc32])
#loc244 = loc(fused[#loc30, #loc32])
#loc245 = loc(fused[#loc29, #loc19])
#loc246 = loc(fused[#loc33, #loc34])
#loc247 = loc(fused[#loc35, #loc36])
#loc248 = loc(fused[#loc37, #loc34])
#loc249 = loc(fused[#loc41, #loc42])
#loc250 = loc(fused[#loc44, #loc43])
#loc251 = loc(fused[#loc45, #loc46])
#loc252 = loc(fused[#loc48, #loc42])
#loc253 = loc(fused[#loc50, #loc49])
#loc254 = loc(fused[#loc54, #loc53])
#loc255 = loc(fused[#loc55, #loc56])
#loc256 = loc(fused[#loc57, #loc58])
#loc257 = loc(fused[#loc59, #loc60, #loc61, #loc56])
#loc258 = loc(fused[#loc63, #loc62])
#loc259 = loc(fused[#loc66, #loc67])
#loc260 = loc(fused[#loc69, #loc68])
#loc261 = loc(fused[#loc70, #loc71])
#loc262 = loc(fused[#loc73, #loc67])
#loc263 = loc(fused[#loc79, #loc78])
#loc264 = loc(fused[#loc83, #loc84])
#loc266 = loc(fused[#loc87, #loc88])
#loc267 = loc(fused[#loc89, #loc90])
#loc268 = loc(fused[#loc91, #loc92])
#loc269 = loc(fused[#loc93, #loc94])
#loc270 = loc(fused[#loc98, #loc99])
#loc271 = loc(fused[#loc102, #loc103])
#loc272 = loc(fused[#loc101, #loc103])
#loc273 = loc(fused[#loc100, #loc90])
#loc274 = loc(fused[#loc104, #loc105])
#loc275 = loc(fused[#loc106, #loc107])
#loc276 = loc(fused[#loc108, #loc105])
#loc277 = loc(fused[#loc112, #loc113])
#loc278 = loc(fused[#loc115, #loc114])
#loc279 = loc(fused[#loc116, #loc117])
#loc280 = loc(fused[#loc119, #loc113])
#loc281 = loc(fused[#loc121, #loc120])
#loc282 = loc(fused[#loc125, #loc124])
#loc283 = loc(fused[#loc126, #loc127])
#loc284 = loc(fused[#loc128, #loc129])
#loc285 = loc(fused[#loc130, #loc131, #loc132, #loc127])
#loc286 = loc(fused[#loc134, #loc133])
#loc287 = loc(fused[#loc137, #loc138])
#loc288 = loc(fused[#loc140, #loc139])
#loc289 = loc(fused[#loc141, #loc142])
#loc290 = loc(fused[#loc144, #loc138])
#loc291 = loc(fused[#loc150, #loc149])
#loc292 = loc(fused[#loc156, #loc157])
#loc294 = loc(fused[#loc160, #loc161])
#loc295 = loc(fused[#loc162, #loc163])
#loc296 = loc(fused[#loc164, #loc165])
#loc297 = loc(fused[#loc166, #loc167])
#loc298 = loc(fused[#loc171, #loc172])
#loc299 = loc(fused[#loc175, #loc176])
#loc300 = loc(fused[#loc174, #loc176])
#loc301 = loc(fused[#loc173, #loc163])
#loc302 = loc(fused[#loc177, #loc178])
#loc303 = loc(fused[#loc179, #loc180])
#loc304 = loc(fused[#loc181, #loc178])
#loc305 = loc(fused[#loc185, #loc186])
#loc306 = loc(fused[#loc188, #loc187])
#loc307 = loc(fused[#loc189, #loc190])
#loc308 = loc(fused[#loc192, #loc186])
#loc309 = loc(fused[#loc194, #loc193])
#loc310 = loc(fused[#loc198, #loc197])
#loc311 = loc(fused[#loc199, #loc200])
#loc312 = loc(fused[#loc201, #loc202])
#loc313 = loc(fused[#loc204, #loc206])
#loc314 = loc(fused[#loc207, #loc208, #loc209, #loc200])
#loc315 = loc(fused[#loc211, #loc210])
#loc316 = loc(fused[#loc214, #loc215])
#loc317 = loc(fused[#loc217, #loc216])
#loc318 = loc(fused[#loc218, #loc219])
#loc319 = loc(fused[#loc221, #loc215])
#loc320 = loc(fused[#loc227, #loc226])
