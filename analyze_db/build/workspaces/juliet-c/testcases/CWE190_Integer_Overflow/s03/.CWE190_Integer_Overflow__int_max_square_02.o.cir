!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc66 = loc("CWE190_Integer_Overflow__int_max_square_02.c":67:28)
#loc101 = loc("CWE190_Integer_Overflow__int_max_square_02.c":93:28)
#true = #cir.bool<true> : !cir.bool
module @"/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_max_square_02.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e">} {
  cir.func private @printIntLine(!s32i) loc(#loc165)
  cir.func no_proto @CWE190_Integer_Overflow__int_max_square_02_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc167)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc168)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc9)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc169)
    cir.br ^bb1 loc(#loc170)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.int<1> : !s32i loc(#loc13)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc13)
    cir.brcond %4 ^bb2, ^bb3 loc(#loc171)
  ^bb2:  // pred: ^bb1
    %5 = cir.const #cir.int<2147483647> : !s32i loc(#loc15)
    cir.store %5, %1 : !s32i, !cir.ptr<!s32i> loc(#loc172)
    cir.br ^bb3 loc(#loc12)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc12)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc173)
  ^bb5:  // pred: ^bb4
    %6 = cir.const #cir.int<1> : !s32i loc(#loc19)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc19)
    cir.brcond %7 ^bb6, ^bb9 loc(#loc174)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc175)
  ^bb7:  // pred: ^bb6
    %8 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc23)
    %9 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc6)
    %10 = cir.binop(mul, %8, %9) nsw : !s32i loc(#loc23)
    cir.store %10, %0 : !s32i, !cir.ptr<!s32i> loc(#loc167)
    %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc24)
    cir.call @printIntLine(%11) : (!s32i) -> () loc(#loc25)
    cir.br ^bb8 loc(#loc22)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc18)
  ^bb9:  // 2 preds: ^bb5, ^bb8
    cir.br ^bb10 loc(#loc18)
  ^bb10:  // pred: ^bb9
    cir.return loc(#loc4)
  } loc(#loc166)
  cir.func no_proto @CWE190_Integer_Overflow__int_max_square_02_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<()>> loc(#loc177)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc28)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<()>> loc(#loc178)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc30)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<()>> loc(#loc179)
    cir.call %2() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc32)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<()>> loc(#loc180)
    cir.call %3() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc34)
    cir.return loc(#loc27)
  } loc(#loc176)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc181)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc38)
  cir.func private @sqrt(!cir.double) -> !cir.double extra(#fn_attr1) loc(#loc39)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc40)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc183)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc184)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc47)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc185)
    cir.br ^bb1 loc(#loc186)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.int<1> : !s32i loc(#loc51)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc51)
    cir.brcond %4 ^bb2, ^bb3 loc(#loc187)
  ^bb2:  // pred: ^bb1
    %5 = cir.const #cir.int<2147483647> : !s32i loc(#loc53)
    cir.store %5, %1 : !s32i, !cir.ptr<!s32i> loc(#loc188)
    cir.br ^bb3 loc(#loc50)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc50)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc189)
  ^bb5:  // pred: ^bb4
    %6 = cir.const #cir.int<0> : !s32i loc(#loc57)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc57)
    cir.brcond %7 ^bb6, ^bb7 loc(#loc190)
  ^bb6:  // pred: ^bb5
    %8 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc38)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc38)
    cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc61)
    cir.br ^bb21 loc(#loc59)
  ^bb7:  // pred: ^bb5
    cir.br ^bb8 loc(#loc191)
  ^bb8:  // pred: ^bb7
    %10 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc64)
    %11 = cir.const #cir.int<2147483647> : !s32i loc(#loc65)
    %12 = cir.unary(minus, %11) nsw : !s32i, !s32i loc(#loc65)
    %13 = cir.const #cir.int<1> : !s32i loc(#loc65)
    %14 = cir.binop(sub, %12, %13) nsw : !s32i loc(#loc65)
    %15 = cir.cmp(gt, %10, %14) : !s32i, !cir.bool loc(#loc192)
    cir.brcond %15 ^bb9, ^bb14 loc(#loc66)
  ^bb9:  // pred: ^bb8
    %16 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc67)
    %17 = cir.abs %16 poison : !s32i loc(#loc68)
    %18 = cir.cast(integral, %17 : !s32i), !s64i loc(#loc68)
    %19 = cir.get_global @sqrt : !cir.ptr<!cir.func<(!cir.double) -> !cir.double>> loc(#loc69)
    %20 = cir.const #cir.int<2147483647> : !s32i loc(#loc70)
    %21 = cir.cast(int_to_float, %20 : !s32i), !cir.double loc(#loc70)
    %22 = cir.call @sqrt(%21) : (!cir.double) -> !cir.double extra(#fn_attr1) loc(#loc69)
    %23 = cir.cast(float_to_int, %22 : !cir.double), !s64i loc(#loc69)
    %24 = cir.cmp(lt, %18, %23) : !s64i, !cir.bool loc(#loc193)
    cir.brcond %24 ^bb10, ^bb11 loc(#loc66)
  ^bb10:  // pred: ^bb9
    %25 = cir.const #true loc(#loc66)
    cir.br ^bb12(%25 : !cir.bool) loc(#loc66)
  ^bb11:  // pred: ^bb9
    %26 = cir.const #false loc(#loc66)
    cir.br ^bb12(%26 : !cir.bool) loc(#loc66)
  ^bb12(%27: !cir.bool loc("CWE190_Integer_Overflow__int_max_square_02.c":67:28)):  // 2 preds: ^bb10, ^bb11
    cir.br ^bb13 loc(#loc66)
  ^bb13:  // pred: ^bb12
    cir.br ^bb15(%27 : !cir.bool) loc(#loc66)
  ^bb14:  // pred: ^bb8
    %28 = cir.const #false loc(#loc66)
    cir.br ^bb15(%28 : !cir.bool) loc(#loc66)
  ^bb15(%29: !cir.bool loc("CWE190_Integer_Overflow__int_max_square_02.c":67:28)):  // 2 preds: ^bb13, ^bb14
    cir.br ^bb16 loc(#loc66)
  ^bb16:  // pred: ^bb15
    cir.brcond %29 ^bb17, ^bb18 loc(#loc194)
  ^bb17:  // pred: ^bb16
    %30 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc75)
    %31 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc44)
    %32 = cir.binop(mul, %30, %31) nsw : !s32i loc(#loc75)
    cir.store %32, %0 : !s32i, !cir.ptr<!s32i> loc(#loc183)
    %33 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc76)
    cir.call @printIntLine(%33) : (!s32i) -> () loc(#loc77)
    cir.br ^bb19 loc(#loc73)
  ^bb18:  // pred: ^bb16
    %34 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc40)
    %35 = cir.cast(array_to_ptrdecay, %34 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc40)
    cir.call @printLine(%35) : (!cir.ptr<!s8i>) -> () loc(#loc78)
    cir.br ^bb19 loc(#loc63)
  ^bb19:  // 2 preds: ^bb17, ^bb18
    cir.br ^bb20 loc(#loc63)
  ^bb20:  // pred: ^bb19
    cir.br ^bb21 loc(#loc56)
  ^bb21:  // 2 preds: ^bb6, ^bb20
    cir.br ^bb22 loc(#loc56)
  ^bb22:  // pred: ^bb21
    cir.return loc(#loc42)
  } loc(#loc182)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc196)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc197)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc85)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc198)
    cir.br ^bb1 loc(#loc199)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.int<1> : !s32i loc(#loc89)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc89)
    cir.brcond %4 ^bb2, ^bb3 loc(#loc200)
  ^bb2:  // pred: ^bb1
    %5 = cir.const #cir.int<2147483647> : !s32i loc(#loc91)
    cir.store %5, %1 : !s32i, !cir.ptr<!s32i> loc(#loc201)
    cir.br ^bb3 loc(#loc88)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc88)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc202)
  ^bb5:  // pred: ^bb4
    %6 = cir.const #cir.int<1> : !s32i loc(#loc95)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc95)
    cir.brcond %7 ^bb6, ^bb20 loc(#loc203)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc204)
  ^bb7:  // pred: ^bb6
    %8 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc99)
    %9 = cir.const #cir.int<2147483647> : !s32i loc(#loc100)
    %10 = cir.unary(minus, %9) nsw : !s32i, !s32i loc(#loc100)
    %11 = cir.const #cir.int<1> : !s32i loc(#loc100)
    %12 = cir.binop(sub, %10, %11) nsw : !s32i loc(#loc100)
    %13 = cir.cmp(gt, %8, %12) : !s32i, !cir.bool loc(#loc205)
    cir.brcond %13 ^bb8, ^bb13 loc(#loc101)
  ^bb8:  // pred: ^bb7
    %14 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc102)
    %15 = cir.abs %14 poison : !s32i loc(#loc103)
    %16 = cir.cast(integral, %15 : !s32i), !s64i loc(#loc103)
    %17 = cir.get_global @sqrt : !cir.ptr<!cir.func<(!cir.double) -> !cir.double>> loc(#loc104)
    %18 = cir.const #cir.int<2147483647> : !s32i loc(#loc105)
    %19 = cir.cast(int_to_float, %18 : !s32i), !cir.double loc(#loc105)
    %20 = cir.call @sqrt(%19) : (!cir.double) -> !cir.double extra(#fn_attr1) loc(#loc104)
    %21 = cir.cast(float_to_int, %20 : !cir.double), !s64i loc(#loc104)
    %22 = cir.cmp(lt, %16, %21) : !s64i, !cir.bool loc(#loc206)
    cir.brcond %22 ^bb9, ^bb10 loc(#loc101)
  ^bb9:  // pred: ^bb8
    %23 = cir.const #true loc(#loc101)
    cir.br ^bb11(%23 : !cir.bool) loc(#loc101)
  ^bb10:  // pred: ^bb8
    %24 = cir.const #false loc(#loc101)
    cir.br ^bb11(%24 : !cir.bool) loc(#loc101)
  ^bb11(%25: !cir.bool loc("CWE190_Integer_Overflow__int_max_square_02.c":93:28)):  // 2 preds: ^bb9, ^bb10
    cir.br ^bb12 loc(#loc101)
  ^bb12:  // pred: ^bb11
    cir.br ^bb14(%25 : !cir.bool) loc(#loc101)
  ^bb13:  // pred: ^bb7
    %26 = cir.const #false loc(#loc101)
    cir.br ^bb14(%26 : !cir.bool) loc(#loc101)
  ^bb14(%27: !cir.bool loc("CWE190_Integer_Overflow__int_max_square_02.c":93:28)):  // 2 preds: ^bb12, ^bb13
    cir.br ^bb15 loc(#loc101)
  ^bb15:  // pred: ^bb14
    cir.brcond %27 ^bb16, ^bb17 loc(#loc207)
  ^bb16:  // pred: ^bb15
    %28 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc110)
    %29 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc82)
    %30 = cir.binop(mul, %28, %29) nsw : !s32i loc(#loc110)
    cir.store %30, %0 : !s32i, !cir.ptr<!s32i> loc(#loc196)
    %31 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc111)
    cir.call @printIntLine(%31) : (!s32i) -> () loc(#loc112)
    cir.br ^bb18 loc(#loc108)
  ^bb17:  // pred: ^bb15
    %32 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc113)
    %33 = cir.cast(array_to_ptrdecay, %32 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc113)
    cir.call @printLine(%33) : (!cir.ptr<!s8i>) -> () loc(#loc114)
    cir.br ^bb18 loc(#loc98)
  ^bb18:  // 2 preds: ^bb16, ^bb17
    cir.br ^bb19 loc(#loc98)
  ^bb19:  // pred: ^bb18
    cir.br ^bb20 loc(#loc94)
  ^bb20:  // 2 preds: ^bb5, ^bb19
    cir.br ^bb21 loc(#loc94)
  ^bb21:  // pred: ^bb20
    cir.return loc(#loc80)
  } loc(#loc195)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc209)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc210)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc121)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc211)
    cir.br ^bb1 loc(#loc212)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.int<0> : !s32i loc(#loc125)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc125)
    cir.brcond %4 ^bb2, ^bb3 loc(#loc213)
  ^bb2:  // pred: ^bb1
    %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc129)
    %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc129)
    cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc130)
    cir.br ^bb4 loc(#loc127)
  ^bb3:  // pred: ^bb1
    %7 = cir.const #cir.int<2> : !s32i loc(#loc131)
    cir.store %7, %1 : !s32i, !cir.ptr<!s32i> loc(#loc214)
    cir.br ^bb4 loc(#loc124)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc124)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc215)
  ^bb6:  // pred: ^bb5
    %8 = cir.const #cir.int<1> : !s32i loc(#loc135)
    %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc135)
    cir.brcond %9 ^bb7, ^bb10 loc(#loc216)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc217)
  ^bb8:  // pred: ^bb7
    %10 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc139)
    %11 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc118)
    %12 = cir.binop(mul, %10, %11) nsw : !s32i loc(#loc139)
    cir.store %12, %0 : !s32i, !cir.ptr<!s32i> loc(#loc209)
    %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc140)
    cir.call @printIntLine(%13) : (!s32i) -> () loc(#loc141)
    cir.br ^bb9 loc(#loc138)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc134)
  ^bb10:  // 2 preds: ^bb6, ^bb9
    cir.br ^bb11 loc(#loc134)
  ^bb11:  // pred: ^bb10
    cir.return loc(#loc116)
  } loc(#loc208)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc219)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc220)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc148)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc221)
    cir.br ^bb1 loc(#loc222)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.int<1> : !s32i loc(#loc152)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc152)
    cir.brcond %4 ^bb2, ^bb3 loc(#loc223)
  ^bb2:  // pred: ^bb1
    %5 = cir.const #cir.int<2> : !s32i loc(#loc154)
    cir.store %5, %1 : !s32i, !cir.ptr<!s32i> loc(#loc224)
    cir.br ^bb3 loc(#loc151)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc151)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc225)
  ^bb5:  // pred: ^bb4
    %6 = cir.const #cir.int<1> : !s32i loc(#loc158)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc158)
    cir.brcond %7 ^bb6, ^bb9 loc(#loc226)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc227)
  ^bb7:  // pred: ^bb6
    %8 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc162)
    %9 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc145)
    %10 = cir.binop(mul, %8, %9) nsw : !s32i loc(#loc162)
    cir.store %10, %0 : !s32i, !cir.ptr<!s32i> loc(#loc219)
    %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc163)
    cir.call @printIntLine(%11) : (!s32i) -> () loc(#loc164)
    cir.br ^bb8 loc(#loc161)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc157)
  ^bb9:  // 2 preds: ^bb5, ^bb8
    cir.br ^bb10 loc(#loc157)
  ^bb10:  // pred: ^bb9
    cir.return loc(#loc143)
  } loc(#loc218)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_max_square_02.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("CWE190_Integer_Overflow__int_max_square_02.c":24:1)
#loc4 = loc("CWE190_Integer_Overflow__int_max_square_02.c":42:1)
#loc5 = loc("CWE190_Integer_Overflow__int_max_square_02.c":38:13)
#loc6 = loc("CWE190_Integer_Overflow__int_max_square_02.c":38:33)
#loc7 = loc("CWE190_Integer_Overflow__int_max_square_02.c":26:5)
#loc8 = loc("CWE190_Integer_Overflow__int_max_square_02.c":26:9)
#loc9 = loc("CWE190_Integer_Overflow__int_max_square_02.c":28:12)
#loc10 = loc("CWE190_Integer_Overflow__int_max_square_02.c":28:5)
#loc11 = loc("CWE190_Integer_Overflow__int_max_square_02.c":29:5)
#loc12 = loc("CWE190_Integer_Overflow__int_max_square_02.c":33:5)
#loc13 = loc("CWE190_Integer_Overflow__int_max_square_02.c":29:8)
#loc14 = loc("CWE190_Integer_Overflow__int_max_square_02.c":30:5)
#loc15 = loc("CWE190_Integer_Overflow__int_max_square_02.c":32:16)
#loc16 = loc("CWE190_Integer_Overflow__int_max_square_02.c":32:9)
#loc17 = loc("CWE190_Integer_Overflow__int_max_square_02.c":34:5)
#loc18 = loc("CWE190_Integer_Overflow__int_max_square_02.c":41:5)
#loc19 = loc("CWE190_Integer_Overflow__int_max_square_02.c":34:8)
#loc20 = loc("CWE190_Integer_Overflow__int_max_square_02.c":35:5)
#loc21 = loc("CWE190_Integer_Overflow__int_max_square_02.c":36:9)
#loc22 = loc("CWE190_Integer_Overflow__int_max_square_02.c":40:9)
#loc23 = loc("CWE190_Integer_Overflow__int_max_square_02.c":38:26)
#loc24 = loc("CWE190_Integer_Overflow__int_max_square_02.c":39:26)
#loc25 = loc("CWE190_Integer_Overflow__int_max_square_02.c":39:13)
#loc26 = loc("CWE190_Integer_Overflow__int_max_square_02.c":152:1)
#loc27 = loc("CWE190_Integer_Overflow__int_max_square_02.c":158:1)
#loc28 = loc("CWE190_Integer_Overflow__int_max_square_02.c":154:5)
#loc29 = loc("CWE190_Integer_Overflow__int_max_square_02.c":154:14)
#loc30 = loc("CWE190_Integer_Overflow__int_max_square_02.c":155:5)
#loc31 = loc("CWE190_Integer_Overflow__int_max_square_02.c":155:14)
#loc32 = loc("CWE190_Integer_Overflow__int_max_square_02.c":156:5)
#loc33 = loc("CWE190_Integer_Overflow__int_max_square_02.c":156:14)
#loc34 = loc("CWE190_Integer_Overflow__int_max_square_02.c":157:5)
#loc35 = loc("CWE190_Integer_Overflow__int_max_square_02.c":157:14)
#loc36 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc37 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc38 = loc("CWE190_Integer_Overflow__int_max_square_02.c":62:19)
#loc39 = loc("/usr/include/x86_64-linux-gnu/bits/mathcalls.h":143:1)
#loc40 = loc("CWE190_Integer_Overflow__int_max_square_02.c":74:23)
#loc41 = loc("CWE190_Integer_Overflow__int_max_square_02.c":49:1)
#loc42 = loc("CWE190_Integer_Overflow__int_max_square_02.c":77:1)
#loc43 = loc("CWE190_Integer_Overflow__int_max_square_02.c":69:13)
#loc44 = loc("CWE190_Integer_Overflow__int_max_square_02.c":69:33)
#loc45 = loc("CWE190_Integer_Overflow__int_max_square_02.c":51:5)
#loc46 = loc("CWE190_Integer_Overflow__int_max_square_02.c":51:9)
#loc47 = loc("CWE190_Integer_Overflow__int_max_square_02.c":53:12)
#loc48 = loc("CWE190_Integer_Overflow__int_max_square_02.c":53:5)
#loc49 = loc("CWE190_Integer_Overflow__int_max_square_02.c":54:5)
#loc50 = loc("CWE190_Integer_Overflow__int_max_square_02.c":58:5)
#loc51 = loc("CWE190_Integer_Overflow__int_max_square_02.c":54:8)
#loc52 = loc("CWE190_Integer_Overflow__int_max_square_02.c":55:5)
#loc53 = loc("CWE190_Integer_Overflow__int_max_square_02.c":57:16)
#loc54 = loc("CWE190_Integer_Overflow__int_max_square_02.c":57:9)
#loc55 = loc("CWE190_Integer_Overflow__int_max_square_02.c":59:5)
#loc56 = loc("CWE190_Integer_Overflow__int_max_square_02.c":76:5)
#loc57 = loc("CWE190_Integer_Overflow__int_max_square_02.c":59:8)
#loc58 = loc("CWE190_Integer_Overflow__int_max_square_02.c":60:5)
#loc59 = loc("CWE190_Integer_Overflow__int_max_square_02.c":63:5)
#loc60 = loc("CWE190_Integer_Overflow__int_max_square_02.c":65:5)
#loc61 = loc("CWE190_Integer_Overflow__int_max_square_02.c":62:9)
#loc62 = loc("CWE190_Integer_Overflow__int_max_square_02.c":67:9)
#loc63 = loc("CWE190_Integer_Overflow__int_max_square_02.c":75:9)
#loc64 = loc("CWE190_Integer_Overflow__int_max_square_02.c":67:13)
#loc65 = loc("CWE190_Integer_Overflow__int_max_square_02.c":67:20)
#loc67 = loc("CWE190_Integer_Overflow__int_max_square_02.c":67:35)
#loc68 = loc("CWE190_Integer_Overflow__int_max_square_02.c":67:31)
#loc69 = loc("CWE190_Integer_Overflow__int_max_square_02.c":67:49)
#loc70 = loc("CWE190_Integer_Overflow__int_max_square_02.c":67:62)
#loc71 = loc("CWE190_Integer_Overflow__int_max_square_02.c":67:69)
#loc72 = loc("CWE190_Integer_Overflow__int_max_square_02.c":68:9)
#loc73 = loc("CWE190_Integer_Overflow__int_max_square_02.c":71:9)
#loc74 = loc("CWE190_Integer_Overflow__int_max_square_02.c":73:9)
#loc75 = loc("CWE190_Integer_Overflow__int_max_square_02.c":69:26)
#loc76 = loc("CWE190_Integer_Overflow__int_max_square_02.c":70:26)
#loc77 = loc("CWE190_Integer_Overflow__int_max_square_02.c":70:13)
#loc78 = loc("CWE190_Integer_Overflow__int_max_square_02.c":74:13)
#loc79 = loc("CWE190_Integer_Overflow__int_max_square_02.c":80:1)
#loc80 = loc("CWE190_Integer_Overflow__int_max_square_02.c":103:1)
#loc81 = loc("CWE190_Integer_Overflow__int_max_square_02.c":95:13)
#loc82 = loc("CWE190_Integer_Overflow__int_max_square_02.c":95:33)
#loc83 = loc("CWE190_Integer_Overflow__int_max_square_02.c":82:5)
#loc84 = loc("CWE190_Integer_Overflow__int_max_square_02.c":82:9)
#loc85 = loc("CWE190_Integer_Overflow__int_max_square_02.c":84:12)
#loc86 = loc("CWE190_Integer_Overflow__int_max_square_02.c":84:5)
#loc87 = loc("CWE190_Integer_Overflow__int_max_square_02.c":85:5)
#loc88 = loc("CWE190_Integer_Overflow__int_max_square_02.c":89:5)
#loc89 = loc("CWE190_Integer_Overflow__int_max_square_02.c":85:8)
#loc90 = loc("CWE190_Integer_Overflow__int_max_square_02.c":86:5)
#loc91 = loc("CWE190_Integer_Overflow__int_max_square_02.c":88:16)
#loc92 = loc("CWE190_Integer_Overflow__int_max_square_02.c":88:9)
#loc93 = loc("CWE190_Integer_Overflow__int_max_square_02.c":90:5)
#loc94 = loc("CWE190_Integer_Overflow__int_max_square_02.c":102:5)
#loc95 = loc("CWE190_Integer_Overflow__int_max_square_02.c":90:8)
#loc96 = loc("CWE190_Integer_Overflow__int_max_square_02.c":91:5)
#loc97 = loc("CWE190_Integer_Overflow__int_max_square_02.c":93:9)
#loc98 = loc("CWE190_Integer_Overflow__int_max_square_02.c":101:9)
#loc99 = loc("CWE190_Integer_Overflow__int_max_square_02.c":93:13)
#loc100 = loc("CWE190_Integer_Overflow__int_max_square_02.c":93:20)
#loc102 = loc("CWE190_Integer_Overflow__int_max_square_02.c":93:35)
#loc103 = loc("CWE190_Integer_Overflow__int_max_square_02.c":93:31)
#loc104 = loc("CWE190_Integer_Overflow__int_max_square_02.c":93:49)
#loc105 = loc("CWE190_Integer_Overflow__int_max_square_02.c":93:62)
#loc106 = loc("CWE190_Integer_Overflow__int_max_square_02.c":93:69)
#loc107 = loc("CWE190_Integer_Overflow__int_max_square_02.c":94:9)
#loc108 = loc("CWE190_Integer_Overflow__int_max_square_02.c":97:9)
#loc109 = loc("CWE190_Integer_Overflow__int_max_square_02.c":99:9)
#loc110 = loc("CWE190_Integer_Overflow__int_max_square_02.c":95:26)
#loc111 = loc("CWE190_Integer_Overflow__int_max_square_02.c":96:26)
#loc112 = loc("CWE190_Integer_Overflow__int_max_square_02.c":96:13)
#loc113 = loc("CWE190_Integer_Overflow__int_max_square_02.c":100:23)
#loc114 = loc("CWE190_Integer_Overflow__int_max_square_02.c":100:13)
#loc115 = loc("CWE190_Integer_Overflow__int_max_square_02.c":106:1)
#loc116 = loc("CWE190_Integer_Overflow__int_max_square_02.c":129:1)
#loc117 = loc("CWE190_Integer_Overflow__int_max_square_02.c":125:13)
#loc118 = loc("CWE190_Integer_Overflow__int_max_square_02.c":125:33)
#loc119 = loc("CWE190_Integer_Overflow__int_max_square_02.c":108:5)
#loc120 = loc("CWE190_Integer_Overflow__int_max_square_02.c":108:9)
#loc121 = loc("CWE190_Integer_Overflow__int_max_square_02.c":110:12)
#loc122 = loc("CWE190_Integer_Overflow__int_max_square_02.c":110:5)
#loc123 = loc("CWE190_Integer_Overflow__int_max_square_02.c":111:5)
#loc124 = loc("CWE190_Integer_Overflow__int_max_square_02.c":120:5)
#loc125 = loc("CWE190_Integer_Overflow__int_max_square_02.c":111:8)
#loc126 = loc("CWE190_Integer_Overflow__int_max_square_02.c":112:5)
#loc127 = loc("CWE190_Integer_Overflow__int_max_square_02.c":115:5)
#loc128 = loc("CWE190_Integer_Overflow__int_max_square_02.c":117:5)
#loc129 = loc("CWE190_Integer_Overflow__int_max_square_02.c":114:19)
#loc130 = loc("CWE190_Integer_Overflow__int_max_square_02.c":114:9)
#loc131 = loc("CWE190_Integer_Overflow__int_max_square_02.c":119:16)
#loc132 = loc("CWE190_Integer_Overflow__int_max_square_02.c":119:9)
#loc133 = loc("CWE190_Integer_Overflow__int_max_square_02.c":121:5)
#loc134 = loc("CWE190_Integer_Overflow__int_max_square_02.c":128:5)
#loc135 = loc("CWE190_Integer_Overflow__int_max_square_02.c":121:8)
#loc136 = loc("CWE190_Integer_Overflow__int_max_square_02.c":122:5)
#loc137 = loc("CWE190_Integer_Overflow__int_max_square_02.c":123:9)
#loc138 = loc("CWE190_Integer_Overflow__int_max_square_02.c":127:9)
#loc139 = loc("CWE190_Integer_Overflow__int_max_square_02.c":125:26)
#loc140 = loc("CWE190_Integer_Overflow__int_max_square_02.c":126:26)
#loc141 = loc("CWE190_Integer_Overflow__int_max_square_02.c":126:13)
#loc142 = loc("CWE190_Integer_Overflow__int_max_square_02.c":132:1)
#loc143 = loc("CWE190_Integer_Overflow__int_max_square_02.c":150:1)
#loc144 = loc("CWE190_Integer_Overflow__int_max_square_02.c":146:13)
#loc145 = loc("CWE190_Integer_Overflow__int_max_square_02.c":146:33)
#loc146 = loc("CWE190_Integer_Overflow__int_max_square_02.c":134:5)
#loc147 = loc("CWE190_Integer_Overflow__int_max_square_02.c":134:9)
#loc148 = loc("CWE190_Integer_Overflow__int_max_square_02.c":136:12)
#loc149 = loc("CWE190_Integer_Overflow__int_max_square_02.c":136:5)
#loc150 = loc("CWE190_Integer_Overflow__int_max_square_02.c":137:5)
#loc151 = loc("CWE190_Integer_Overflow__int_max_square_02.c":141:5)
#loc152 = loc("CWE190_Integer_Overflow__int_max_square_02.c":137:8)
#loc153 = loc("CWE190_Integer_Overflow__int_max_square_02.c":138:5)
#loc154 = loc("CWE190_Integer_Overflow__int_max_square_02.c":140:16)
#loc155 = loc("CWE190_Integer_Overflow__int_max_square_02.c":140:9)
#loc156 = loc("CWE190_Integer_Overflow__int_max_square_02.c":142:5)
#loc157 = loc("CWE190_Integer_Overflow__int_max_square_02.c":149:5)
#loc158 = loc("CWE190_Integer_Overflow__int_max_square_02.c":142:8)
#loc159 = loc("CWE190_Integer_Overflow__int_max_square_02.c":143:5)
#loc160 = loc("CWE190_Integer_Overflow__int_max_square_02.c":144:9)
#loc161 = loc("CWE190_Integer_Overflow__int_max_square_02.c":148:9)
#loc162 = loc("CWE190_Integer_Overflow__int_max_square_02.c":146:26)
#loc163 = loc("CWE190_Integer_Overflow__int_max_square_02.c":147:26)
#loc164 = loc("CWE190_Integer_Overflow__int_max_square_02.c":147:13)
#loc165 = loc(fused[#loc1, #loc2])
#loc166 = loc(fused[#loc3, #loc4])
#loc167 = loc(fused[#loc5, #loc6])
#loc168 = loc(fused[#loc7, #loc8])
#loc169 = loc(fused[#loc10, #loc9])
#loc170 = loc(fused[#loc11, #loc12])
#loc171 = loc(fused[#loc14, #loc12])
#loc172 = loc(fused[#loc16, #loc15])
#loc173 = loc(fused[#loc17, #loc18])
#loc174 = loc(fused[#loc20, #loc18])
#loc175 = loc(fused[#loc21, #loc22])
#loc176 = loc(fused[#loc26, #loc27])
#loc177 = loc(fused[#loc28, #loc29])
#loc178 = loc(fused[#loc30, #loc31])
#loc179 = loc(fused[#loc32, #loc33])
#loc180 = loc(fused[#loc34, #loc35])
#loc181 = loc(fused[#loc36, #loc37])
#loc182 = loc(fused[#loc41, #loc42])
#loc183 = loc(fused[#loc43, #loc44])
#loc184 = loc(fused[#loc45, #loc46])
#loc185 = loc(fused[#loc48, #loc47])
#loc186 = loc(fused[#loc49, #loc50])
#loc187 = loc(fused[#loc52, #loc50])
#loc188 = loc(fused[#loc54, #loc53])
#loc189 = loc(fused[#loc55, #loc56])
#loc190 = loc(fused[#loc58, #loc59, #loc60, #loc56])
#loc191 = loc(fused[#loc62, #loc63])
#loc192 = loc(fused[#loc64, #loc65])
#loc193 = loc(fused[#loc68, #loc71])
#loc194 = loc(fused[#loc72, #loc73, #loc74, #loc63])
#loc195 = loc(fused[#loc79, #loc80])
#loc196 = loc(fused[#loc81, #loc82])
#loc197 = loc(fused[#loc83, #loc84])
#loc198 = loc(fused[#loc86, #loc85])
#loc199 = loc(fused[#loc87, #loc88])
#loc200 = loc(fused[#loc90, #loc88])
#loc201 = loc(fused[#loc92, #loc91])
#loc202 = loc(fused[#loc93, #loc94])
#loc203 = loc(fused[#loc96, #loc94])
#loc204 = loc(fused[#loc97, #loc98])
#loc205 = loc(fused[#loc99, #loc100])
#loc206 = loc(fused[#loc103, #loc106])
#loc207 = loc(fused[#loc107, #loc108, #loc109, #loc98])
#loc208 = loc(fused[#loc115, #loc116])
#loc209 = loc(fused[#loc117, #loc118])
#loc210 = loc(fused[#loc119, #loc120])
#loc211 = loc(fused[#loc122, #loc121])
#loc212 = loc(fused[#loc123, #loc124])
#loc213 = loc(fused[#loc126, #loc127, #loc128, #loc124])
#loc214 = loc(fused[#loc132, #loc131])
#loc215 = loc(fused[#loc133, #loc134])
#loc216 = loc(fused[#loc136, #loc134])
#loc217 = loc(fused[#loc137, #loc138])
#loc218 = loc(fused[#loc142, #loc143])
#loc219 = loc(fused[#loc144, #loc145])
#loc220 = loc(fused[#loc146, #loc147])
#loc221 = loc(fused[#loc149, #loc148])
#loc222 = loc(fused[#loc150, #loc151])
#loc223 = loc(fused[#loc153, #loc151])
#loc224 = loc(fused[#loc155, #loc154])
#loc225 = loc(fused[#loc156, #loc157])
#loc226 = loc(fused[#loc159, #loc157])
#loc227 = loc(fused[#loc160, #loc161])
