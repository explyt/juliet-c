!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc8 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":27:21)
#loc9 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":27:28)
#loc51 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":108:10)
#loc52 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":108:14)
#loc53 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":108:20)
#loc54 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":108:32)
#loc75 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":73:25)
#loc76 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":73:32)
#loc106 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":52:25)
#loc107 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":52:32)
#loc134 = loc(fused[#loc8, #loc9])
#loc149 = loc(fused[#loc51, #loc52])
#loc150 = loc(fused[#loc53, #loc54])
#loc157 = loc(fused[#loc75, #loc76])
#loc167 = loc(fused[#loc106, #loc107])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<[#cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<0> : !s32i]> : !cir.array<!s32i x 43> {alignment = 4 : i64} loc(#loc1)
  cir.func private @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc131)
  cir.func private @wcscpy(!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc132)
  cir.func internal private @badSink(%arg0: !cir.ptr<!void> loc(fused[#loc8, #loc9])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data", init] {alignment = 8 : i64} loc(#loc134)
    cir.store %arg0, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc10)
    cir.scope {
      %1 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc136)
      %2 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc137)
      %3 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc17)
      %4 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc18)
      %5 = cir.cast(bitcast, %4 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc18)
      %6 = cir.call @strlen(%5) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc17)
      cir.store %6, %1 : !u64i, !cir.ptr<!u64i> loc(#loc136)
      %7 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc16)
      %8 = cir.const #cir.int<1> : !s32i loc(#loc16)
      %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc16)
      %10 = cir.binop(add, %7, %9) : !u64i loc(#loc16)
      %11 = cir.const #cir.int<4> : !u64i loc(#loc16)
      %12 = cir.binop(mul, %10, %11) : !u64i loc(#loc16)
      %13 = cir.alloca !u8i, !cir.ptr<!u8i>, %12 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc16)
      %14 = cir.cast(bitcast, %13 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc16)
      cir.store %14, %2 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc137)
      %15 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc19)
      %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc19)
      %17 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc20)
      %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc20)
      %19 = cir.call @wcscpy(%16, %18) : (!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc21)
      %20 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc22)
      %21 = cir.cast(bitcast, %20 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc22)
      cir.call @printLine(%21) : (!cir.ptr<!s8i>) -> () loc(#loc23)
    } loc(#loc135)
    cir.return loc(#loc7)
  } loc(#loc133)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE135_41_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc139)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc28)
    cir.store %1, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc140)
    %2 = cir.get_global @".str" : !cir.ptr<!cir.array<!s32i x 43>> loc(#loc1)
    %3 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s32i x 43>>), !cir.ptr<!s32i> loc(#loc1)
    %4 = cir.cast(bitcast, %3 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc1)
    cir.store %4, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc141)
    %5 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc31)
    cir.call @badSink(%5) : (!cir.ptr<!void>) -> () loc(#loc32)
    cir.return loc(#loc25)
  } loc(#loc138)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE135_41_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc143)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc35)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc144)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc37)
    cir.return loc(#loc34)
  } loc(#loc142)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc145)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc146)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc147)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc45)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc46)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc47)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc48)
  cir.func @main(%arg0: !s32i loc(fused[#loc51, #loc52]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc53, #loc54])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc149)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc150)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc50)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc55)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc55)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc56)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc57)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc57)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc58)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc45)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc45)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc59)
    %8 = cir.get_global @CWE121_Stack_Based_Buffer_Overflow__CWE135_41_good : !cir.ptr<!cir.func<!void ()>> loc(#loc151)
    cir.call @CWE121_Stack_Based_Buffer_Overflow__CWE135_41_good() : () -> () loc(#loc60)
    %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc46)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc46)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc62)
    %11 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc47)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc47)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc63)
    %13 = cir.get_global @CWE121_Stack_Based_Buffer_Overflow__CWE135_41_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc152)
    cir.call @CWE121_Stack_Based_Buffer_Overflow__CWE135_41_bad() : () -> () loc(#loc64)
    %14 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc48)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc48)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc66)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc67)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc153)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc153)
    cir.return %17 : !s32i loc(#loc153)
  } loc(#loc148)
  cir.func private @wcslen(!cir.ptr<!s32i>) -> !u64i extra(#fn_attr) loc(#loc154)
  cir.func private @printWLine(!cir.ptr<!s32i>) loc(#loc155)
  cir.func internal private @goodB2GSink(%arg0: !cir.ptr<!void> loc(fused[#loc75, #loc76])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data", init] {alignment = 8 : i64} loc(#loc157)
    cir.store %arg0, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc77)
    cir.scope {
      %1 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc159)
      %2 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc160)
      %3 = cir.get_global @wcslen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s32i>)>> loc(#loc84)
      %4 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc85)
      %5 = cir.cast(bitcast, %4 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc85)
      %6 = cir.call @wcslen(%5) : (!cir.ptr<!s32i>) -> !u64i extra(#fn_attr) loc(#loc84)
      cir.store %6, %1 : !u64i, !cir.ptr<!u64i> loc(#loc159)
      %7 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc83)
      %8 = cir.const #cir.int<1> : !s32i loc(#loc83)
      %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc83)
      %10 = cir.binop(add, %7, %9) : !u64i loc(#loc83)
      %11 = cir.const #cir.int<4> : !u64i loc(#loc83)
      %12 = cir.binop(mul, %10, %11) : !u64i loc(#loc83)
      %13 = cir.alloca !u8i, !cir.ptr<!u8i>, %12 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc83)
      %14 = cir.cast(bitcast, %13 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc83)
      cir.store %14, %2 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc160)
      %15 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc86)
      %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc86)
      %17 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc87)
      %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc87)
      %19 = cir.call @wcscpy(%16, %18) : (!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc88)
      %20 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc89)
      %21 = cir.cast(bitcast, %20 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc89)
      cir.call @printWLine(%21) : (!cir.ptr<!s32i>) -> () loc(#loc90)
    } loc(#loc158)
    cir.return loc(#loc74)
  } loc(#loc156)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc162)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc95)
    cir.store %1, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc163)
    %2 = cir.get_global @".str" : !cir.ptr<!cir.array<!s32i x 43>> loc(#loc97)
    %3 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s32i x 43>>), !cir.ptr<!s32i> loc(#loc97)
    %4 = cir.cast(bitcast, %3 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc97)
    cir.store %4, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc164)
    %5 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc99)
    cir.call @goodB2GSink(%5) : (!cir.ptr<!void>) -> () loc(#loc100)
    cir.return loc(#loc92)
  } loc(#loc161)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\00" : !cir.array<!s8i x 43>> : !cir.array<!s8i x 43> {alignment = 1 : i64} loc(#loc101)
  cir.func private @strcpy(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc165)
  cir.func internal private @goodG2BSink(%arg0: !cir.ptr<!void> loc(fused[#loc106, #loc107])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data", init] {alignment = 8 : i64} loc(#loc167)
    cir.store %arg0, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc108)
    cir.scope {
      %1 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc169)
      %2 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc170)
      %3 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc115)
      %4 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc116)
      %5 = cir.cast(bitcast, %4 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc116)
      %6 = cir.call @strlen(%5) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc115)
      cir.store %6, %1 : !u64i, !cir.ptr<!u64i> loc(#loc169)
      %7 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc114)
      %8 = cir.const #cir.int<1> : !s32i loc(#loc114)
      %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc114)
      %10 = cir.binop(add, %7, %9) : !u64i loc(#loc114)
      %11 = cir.const #cir.int<1> : !s32i loc(#loc114)
      %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc114)
      %13 = cir.binop(mul, %10, %12) : !u64i loc(#loc114)
      %14 = cir.alloca !u8i, !cir.ptr<!u8i>, %13 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc114)
      %15 = cir.cast(bitcast, %14 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc114)
      cir.store %15, %2 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc170)
      %16 = cir.get_global @strcpy : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc117)
      %17 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc118)
      %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc118)
      %19 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc119)
      %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc119)
      %21 = cir.call @strcpy(%18, %20) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc117)
      %22 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc120)
      %23 = cir.cast(bitcast, %22 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc120)
      cir.call @printLine(%23) : (!cir.ptr<!s8i>) -> () loc(#loc121)
    } loc(#loc168)
    cir.return loc(#loc105)
  } loc(#loc166)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc172)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc126)
    cir.store %1, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc173)
    %2 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 43>> loc(#loc101)
    %3 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 43>>), !cir.ptr<!s8i> loc(#loc101)
    %4 = cir.cast(bitcast, %3 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc101)
    cir.store %4, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc174)
    %5 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc129)
    cir.call @goodG2BSink(%5) : (!cir.ptr<!void>) -> () loc(#loc130)
    cir.return loc(#loc123)
  } loc(#loc171)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":0:0)
#loc1 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":43:20)
#loc2 = loc("/usr/include/string.h":407:1)
#loc3 = loc("/usr/include/string.h":408:33)
#loc4 = loc("/usr/include/wchar.h":98:1)
#loc5 = loc("/usr/include/wchar.h":100:14)
#loc6 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":27:1)
#loc7 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":36:1)
#loc10 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":28:1)
#loc11 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":29:5)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":35:5)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":31:9)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":31:45)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":32:9)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":32:31)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":31:26)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":31:41)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":33:22)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":33:28)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":33:15)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":34:27)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":34:9)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":38:1)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":45:1)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":40:5)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":40:12)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":41:12)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":41:5)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":43:5)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":44:13)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":44:5)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":93:1)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":97:1)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":95:5)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":95:13)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":96:5)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":96:13)
#loc39 = loc("/usr/include/stdlib.h":575:1)
#loc40 = loc("/usr/include/stdlib.h":575:41)
#loc41 = loc("/usr/include/time.h":76:1)
#loc42 = loc("/usr/include/time.h":76:38)
#loc43 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc44 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":113:15)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":115:15)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":118:15)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":120:15)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":108:1)
#loc50 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":123:1)
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":109:1)
#loc56 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":111:27)
#loc57 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":111:22)
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":111:5)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":113:5)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":114:5)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":114:56)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":115:5)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":118:5)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":119:5)
#loc65 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":119:55)
#loc66 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":120:5)
#loc67 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":122:12)
#loc68 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":122:5)
#loc69 = loc("/usr/include/wchar.h":247:1)
#loc70 = loc("/usr/include/wchar.h":247:51)
#loc71 = loc("../../../testcasesupport/std_testcase_io.h":16:1)
#loc72 = loc("../../../testcasesupport/std_testcase_io.h":16:37)
#loc73 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":73:1)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":82:1)
#loc77 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":74:1)
#loc78 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":75:5)
#loc79 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":81:5)
#loc80 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":77:9)
#loc81 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":77:48)
#loc82 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":78:9)
#loc83 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":78:31)
#loc84 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":77:26)
#loc85 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":77:44)
#loc86 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":79:22)
#loc87 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":79:28)
#loc88 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":79:15)
#loc89 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":80:31)
#loc90 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":80:9)
#loc91 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":84:1)
#loc92 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":91:1)
#loc93 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":86:5)
#loc94 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":86:12)
#loc95 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":87:12)
#loc96 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":87:5)
#loc97 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":89:20)
#loc98 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":89:5)
#loc99 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":90:17)
#loc100 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":90:5)
#loc101 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":68:20)
#loc102 = loc("/usr/include/string.h":141:1)
#loc103 = loc("/usr/include/string.h":142:14)
#loc104 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":52:1)
#loc105 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":61:1)
#loc108 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":53:1)
#loc109 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":54:5)
#loc110 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":60:5)
#loc111 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":56:9)
#loc112 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":56:45)
#loc113 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":57:9)
#loc114 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":57:31)
#loc115 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":56:26)
#loc116 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":56:41)
#loc117 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":58:15)
#loc118 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":58:22)
#loc119 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":58:28)
#loc120 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":59:27)
#loc121 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":59:9)
#loc122 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":63:1)
#loc123 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":70:1)
#loc124 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":65:5)
#loc125 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":65:12)
#loc126 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":66:12)
#loc127 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":66:5)
#loc128 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":68:5)
#loc129 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":69:17)
#loc130 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c":69:5)
#loc131 = loc(fused[#loc2, #loc3])
#loc132 = loc(fused[#loc4, #loc5])
#loc133 = loc(fused[#loc6, #loc7])
#loc135 = loc(fused[#loc11, #loc12])
#loc136 = loc(fused[#loc13, #loc14])
#loc137 = loc(fused[#loc15, #loc16])
#loc138 = loc(fused[#loc24, #loc25])
#loc139 = loc(fused[#loc26, #loc27])
#loc140 = loc(fused[#loc29, #loc28])
#loc141 = loc(fused[#loc30, #loc1])
#loc142 = loc(fused[#loc33, #loc34])
#loc143 = loc(fused[#loc35, #loc36])
#loc144 = loc(fused[#loc37, #loc38])
#loc145 = loc(fused[#loc39, #loc40])
#loc146 = loc(fused[#loc41, #loc42])
#loc147 = loc(fused[#loc43, #loc44])
#loc148 = loc(fused[#loc49, #loc50])
#loc151 = loc(fused[#loc60, #loc61])
#loc152 = loc(fused[#loc64, #loc65])
#loc153 = loc(fused[#loc68, #loc67])
#loc154 = loc(fused[#loc69, #loc70])
#loc155 = loc(fused[#loc71, #loc72])
#loc156 = loc(fused[#loc73, #loc74])
#loc158 = loc(fused[#loc78, #loc79])
#loc159 = loc(fused[#loc80, #loc81])
#loc160 = loc(fused[#loc82, #loc83])
#loc161 = loc(fused[#loc91, #loc92])
#loc162 = loc(fused[#loc93, #loc94])
#loc163 = loc(fused[#loc96, #loc95])
#loc164 = loc(fused[#loc98, #loc97])
#loc165 = loc(fused[#loc102, #loc103])
#loc166 = loc(fused[#loc104, #loc105])
#loc168 = loc(fused[#loc109, #loc110])
#loc169 = loc(fused[#loc111, #loc112])
#loc170 = loc(fused[#loc113, #loc114])
#loc171 = loc(fused[#loc122, #loc123])
#loc172 = loc(fused[#loc124, #loc125])
#loc173 = loc(fused[#loc127, #loc126])
#loc174 = loc(fused[#loc128, #loc101])
