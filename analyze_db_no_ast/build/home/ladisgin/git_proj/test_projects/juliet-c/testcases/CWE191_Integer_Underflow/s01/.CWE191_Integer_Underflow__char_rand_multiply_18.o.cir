!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE191_Integer_Underflow/s01/CWE191_Integer_Underflow__char_rand_multiply_18.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @rand() -> !s32i extra(#fn_attr) loc(#loc101)
  cir.func private  @printHexCharLine(!s8i) loc(#loc102)
  cir.func no_proto  @CWE191_Integer_Underflow__char_rand_multiply_18_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc104)
    %1 = cir.const #cir.int<32> : !s32i loc(#loc9)
    %2 = cir.cast(integral, %1 : !s32i), !s8i loc(#loc9)
    cir.store %2, %0 : !s8i, !cir.ptr<!s8i> loc(#loc105)
    cir.goto "source" loc(#loc106)
  ^bb1:  // no predecessors
    cir.label "source" loc(#loc13)
    %3 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc14)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc14)
    %5 = cir.binop(and, %3, %4) : !s32i loc(#loc14)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc14)
    %7 = cir.ternary(%6, true {
      %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc14)
      %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc14)
      %12 = cir.const #cir.int<30> : !s32i loc(#loc14)
      %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc14)
      %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc14)
      %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc14)
      %16 = cir.const #cir.int<15> : !s32i loc(#loc14)
      %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc14)
      %18 = cir.binop(xor, %13, %17) : !u32i loc(#loc14)
      %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc14)
      %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc14)
      %21 = cir.binop(xor, %18, %20) : !u32i loc(#loc14)
      cir.yield %21 : !u32i loc(#loc14)
    }, false {
      %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc14)
      %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc14)
      %12 = cir.const #cir.int<30> : !s32i loc(#loc14)
      %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc14)
      %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc14)
      %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc14)
      %16 = cir.const #cir.int<15> : !s32i loc(#loc14)
      %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc14)
      %18 = cir.binop(xor, %13, %17) : !u32i loc(#loc14)
      %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc14)
      %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc14)
      %21 = cir.binop(xor, %18, %20) : !u32i loc(#loc14)
      %22 = cir.unary(minus, %21) : !u32i, !u32i loc(#loc14)
      %23 = cir.const #cir.int<1> : !s32i loc(#loc14)
      %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc14)
      %25 = cir.binop(sub, %22, %24) : !u32i loc(#loc14)
      cir.yield %25 : !u32i loc(#loc14)
    }) : (!cir.bool) -> !u32i loc(#loc14)
    %8 = cir.cast(integral, %7 : !u32i), !s32i loc(#loc14)
    %9 = cir.cast(integral, %8 : !s32i), !s8i loc(#loc14)
    cir.store %9, %0 : !s8i, !cir.ptr<!s8i> loc(#loc107)
    cir.goto "sink" loc(#loc108)
  ^bb2:  // no predecessors
    cir.label "sink" loc(#loc18)
    cir.scope {
      %10 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc21)
      %11 = cir.cast(integral, %10 : !s8i), !s32i loc(#loc21)
      %12 = cir.const #cir.int<0> : !s32i loc(#loc22)
      %13 = cir.cmp(lt, %11, %12) : !s32i, !s32i loc(#loc110)
      %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc23)
      cir.if %14 {
        %15 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc112)
        %16 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc27)
        %17 = cir.cast(integral, %16 : !s8i), !s32i loc(#loc27)
        %18 = cir.const #cir.int<2> : !s32i loc(#loc26)
        %19 = cir.binop(mul, %17, %18) nsw : !s32i loc(#loc27)
        %20 = cir.cast(integral, %19 : !s32i), !s8i loc(#loc27)
        cir.store %20, %15 : !s8i, !cir.ptr<!s8i> loc(#loc112)
        %21 = cir.load %15 : !cir.ptr<!s8i>, !s8i loc(#loc28)
        cir.call @printHexCharLine(%21) : (!s8i) -> () loc(#loc29)
      } loc(#loc111)
    } loc(#loc109)
    cir.return loc(#loc6)
  } loc(#loc103)
  cir.func no_proto  @CWE191_Integer_Underflow__char_rand_multiply_18_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc114)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc32)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc115)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc34)
    cir.return loc(#loc31)
  } loc(#loc113)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc116)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"data value is too small to perform multiplication.\00" : !cir.array<!s8i x 51>> : !cir.array<!s8i x 51> {alignment = 1 : i64} loc(#loc38)
  cir.func no_proto internal private  @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc118)
    %1 = cir.const #cir.int<32> : !s32i loc(#loc43)
    %2 = cir.cast(integral, %1 : !s32i), !s8i loc(#loc43)
    cir.store %2, %0 : !s8i, !cir.ptr<!s8i> loc(#loc119)
    cir.goto "source" loc(#loc120)
  ^bb1:  // no predecessors
    cir.label "source" loc(#loc47)
    %3 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc48)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc48)
    %5 = cir.binop(and, %3, %4) : !s32i loc(#loc48)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc48)
    %7 = cir.ternary(%6, true {
      %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc48)
      %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc48)
      %12 = cir.const #cir.int<30> : !s32i loc(#loc48)
      %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc48)
      %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc48)
      %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc48)
      %16 = cir.const #cir.int<15> : !s32i loc(#loc48)
      %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc48)
      %18 = cir.binop(xor, %13, %17) : !u32i loc(#loc48)
      %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc48)
      %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc48)
      %21 = cir.binop(xor, %18, %20) : !u32i loc(#loc48)
      cir.yield %21 : !u32i loc(#loc48)
    }, false {
      %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc48)
      %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc48)
      %12 = cir.const #cir.int<30> : !s32i loc(#loc48)
      %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc48)
      %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc48)
      %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc48)
      %16 = cir.const #cir.int<15> : !s32i loc(#loc48)
      %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc48)
      %18 = cir.binop(xor, %13, %17) : !u32i loc(#loc48)
      %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc48)
      %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc48)
      %21 = cir.binop(xor, %18, %20) : !u32i loc(#loc48)
      %22 = cir.unary(minus, %21) : !u32i, !u32i loc(#loc48)
      %23 = cir.const #cir.int<1> : !s32i loc(#loc48)
      %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc48)
      %25 = cir.binop(sub, %22, %24) : !u32i loc(#loc48)
      cir.yield %25 : !u32i loc(#loc48)
    }) : (!cir.bool) -> !u32i loc(#loc48)
    %8 = cir.cast(integral, %7 : !u32i), !s32i loc(#loc48)
    %9 = cir.cast(integral, %8 : !s32i), !s8i loc(#loc48)
    cir.store %9, %0 : !s8i, !cir.ptr<!s8i> loc(#loc121)
    cir.goto "sink" loc(#loc122)
  ^bb2:  // no predecessors
    cir.label "sink" loc(#loc52)
    cir.scope {
      %10 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc55)
      %11 = cir.cast(integral, %10 : !s8i), !s32i loc(#loc55)
      %12 = cir.const #cir.int<0> : !s32i loc(#loc56)
      %13 = cir.cmp(lt, %11, %12) : !s32i, !s32i loc(#loc124)
      %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc57)
      cir.if %14 {
        cir.scope {
          %15 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc61)
          %16 = cir.cast(integral, %15 : !s8i), !s32i loc(#loc61)
          %17 = cir.const #cir.int<127> : !s32i loc(#loc62)
          %18 = cir.unary(minus, %17) : !s32i, !s32i loc(#loc62)
          %19 = cir.const #cir.int<1> : !s32i loc(#loc62)
          %20 = cir.binop(sub, %18, %19) nsw : !s32i loc(#loc62)
          %21 = cir.const #cir.int<2> : !s32i loc(#loc63)
          %22 = cir.binop(div, %20, %21) : !s32i loc(#loc127)
          %23 = cir.cmp(gt, %16, %22) : !s32i, !s32i loc(#loc128)
          %24 = cir.cast(int_to_bool, %23 : !s32i), !cir.bool loc(#loc65)
          cir.if %24 {
            %25 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc130)
            %26 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc71)
            %27 = cir.cast(integral, %26 : !s8i), !s32i loc(#loc71)
            %28 = cir.const #cir.int<2> : !s32i loc(#loc70)
            %29 = cir.binop(mul, %27, %28) nsw : !s32i loc(#loc71)
            %30 = cir.cast(integral, %29 : !s32i), !s8i loc(#loc71)
            cir.store %30, %25 : !s8i, !cir.ptr<!s8i> loc(#loc130)
            %31 = cir.load %25 : !cir.ptr<!s8i>, !s8i loc(#loc72)
            cir.call @printHexCharLine(%31) : (!s8i) -> () loc(#loc73)
          } else {
            %25 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 51>> loc(#loc38)
            %26 = cir.cast(array_to_ptrdecay, %25 : !cir.ptr<!cir.array<!s8i x 51>>), !cir.ptr<!s8i> loc(#loc38)
            cir.call @printLine(%26) : (!cir.ptr<!s8i>) -> () loc(#loc74)
          } loc(#loc129)
        } loc(#loc126)
      } loc(#loc125)
    } loc(#loc123)
    cir.return loc(#loc40)
  } loc(#loc117)
  cir.func no_proto internal private  @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc132)
    %1 = cir.const #cir.int<32> : !s32i loc(#loc79)
    %2 = cir.cast(integral, %1 : !s32i), !s8i loc(#loc79)
    cir.store %2, %0 : !s8i, !cir.ptr<!s8i> loc(#loc133)
    cir.goto "source" loc(#loc134)
  ^bb1:  // no predecessors
    cir.label "source" loc(#loc83)
    %3 = cir.const #cir.int<2> : !s32i loc(#loc84)
    %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc85)
    %5 = cir.cast(integral, %4 : !s32i), !s8i loc(#loc85)
    cir.store %5, %0 : !s8i, !cir.ptr<!s8i> loc(#loc135)
    cir.goto "sink" loc(#loc136)
  ^bb2:  // no predecessors
    cir.label "sink" loc(#loc89)
    cir.scope {
      %6 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc92)
      %7 = cir.cast(integral, %6 : !s8i), !s32i loc(#loc92)
      %8 = cir.const #cir.int<0> : !s32i loc(#loc93)
      %9 = cir.cmp(lt, %7, %8) : !s32i, !s32i loc(#loc138)
      %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc94)
      cir.if %10 {
        %11 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc140)
        %12 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc98)
        %13 = cir.cast(integral, %12 : !s8i), !s32i loc(#loc98)
        %14 = cir.const #cir.int<2> : !s32i loc(#loc97)
        %15 = cir.binop(mul, %13, %14) nsw : !s32i loc(#loc98)
        %16 = cir.cast(integral, %15 : !s32i), !s8i loc(#loc98)
        cir.store %16, %11 : !s8i, !cir.ptr<!s8i> loc(#loc140)
        %17 = cir.load %11 : !cir.ptr<!s8i>, !s8i loc(#loc99)
        cir.call @printHexCharLine(%17) : (!s8i) -> () loc(#loc100)
      } loc(#loc139)
    } loc(#loc137)
    cir.return loc(#loc76)
  } loc(#loc131)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE191_Integer_Underflow/s01/CWE191_Integer_Underflow__char_rand_multiply_18.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":30:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":30:35)
#loc5 = loc("CWE191_Integer_Underflow__char_rand_multiply_18.c":22:1)
#loc6 = loc("CWE191_Integer_Underflow__char_rand_multiply_18.c":38:1)
#loc7 = loc("CWE191_Integer_Underflow__char_rand_multiply_18.c":24:5)
#loc8 = loc("CWE191_Integer_Underflow__char_rand_multiply_18.c":24:10)
#loc9 = loc("CWE191_Integer_Underflow__char_rand_multiply_18.c":25:12)
#loc10 = loc("CWE191_Integer_Underflow__char_rand_multiply_18.c":25:5)
#loc11 = loc("CWE191_Integer_Underflow__char_rand_multiply_18.c":26:5)
#loc12 = loc("CWE191_Integer_Underflow__char_rand_multiply_18.c":26:10)
#loc13 = loc("CWE191_Integer_Underflow__char_rand_multiply_18.c":27:1)
#loc14 = loc("CWE191_Integer_Underflow__char_rand_multiply_18.c":29:18)
#loc15 = loc("CWE191_Integer_Underflow__char_rand_multiply_18.c":29:5)
#loc16 = loc("CWE191_Integer_Underflow__char_rand_multiply_18.c":30:5)
#loc17 = loc("CWE191_Integer_Underflow__char_rand_multiply_18.c":30:10)
#loc18 = loc("CWE191_Integer_Underflow__char_rand_multiply_18.c":31:1)
#loc19 = loc("CWE191_Integer_Underflow__char_rand_multiply_18.c":32:5)
#loc20 = loc("CWE191_Integer_Underflow__char_rand_multiply_18.c":37:5)
#loc21 = loc("CWE191_Integer_Underflow__char_rand_multiply_18.c":32:8)
#loc22 = loc("CWE191_Integer_Underflow__char_rand_multiply_18.c":32:15)
#loc23 = loc("CWE191_Integer_Underflow__char_rand_multiply_18.c":32:13)
#loc24 = loc("CWE191_Integer_Underflow__char_rand_multiply_18.c":33:5)
#loc25 = loc("CWE191_Integer_Underflow__char_rand_multiply_18.c":35:9)
#loc26 = loc("CWE191_Integer_Underflow__char_rand_multiply_18.c":35:30)
#loc27 = loc("CWE191_Integer_Underflow__char_rand_multiply_18.c":35:23)
#loc28 = loc("CWE191_Integer_Underflow__char_rand_multiply_18.c":36:26)
#loc29 = loc("CWE191_Integer_Underflow__char_rand_multiply_18.c":36:9)
#loc30 = loc("CWE191_Integer_Underflow__char_rand_multiply_18.c":89:1)
#loc31 = loc("CWE191_Integer_Underflow__char_rand_multiply_18.c":93:1)
#loc32 = loc("CWE191_Integer_Underflow__char_rand_multiply_18.c":91:5)
#loc33 = loc("CWE191_Integer_Underflow__char_rand_multiply_18.c":91:13)
#loc34 = loc("CWE191_Integer_Underflow__char_rand_multiply_18.c":92:5)
#loc35 = loc("CWE191_Integer_Underflow__char_rand_multiply_18.c":92:13)
#loc36 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc37 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc38 = loc("CWE191_Integer_Underflow__char_rand_multiply_18.c":65:23)
#loc39 = loc("CWE191_Integer_Underflow__char_rand_multiply_18.c":45:1)
#loc40 = loc("CWE191_Integer_Underflow__char_rand_multiply_18.c":68:1)
#loc41 = loc("CWE191_Integer_Underflow__char_rand_multiply_18.c":47:5)
#loc42 = loc("CWE191_Integer_Underflow__char_rand_multiply_18.c":47:10)
#loc43 = loc("CWE191_Integer_Underflow__char_rand_multiply_18.c":48:12)
#loc44 = loc("CWE191_Integer_Underflow__char_rand_multiply_18.c":48:5)
#loc45 = loc("CWE191_Integer_Underflow__char_rand_multiply_18.c":49:5)
#loc46 = loc("CWE191_Integer_Underflow__char_rand_multiply_18.c":49:10)
#loc47 = loc("CWE191_Integer_Underflow__char_rand_multiply_18.c":50:1)
#loc48 = loc("CWE191_Integer_Underflow__char_rand_multiply_18.c":52:18)
#loc49 = loc("CWE191_Integer_Underflow__char_rand_multiply_18.c":52:5)
#loc50 = loc("CWE191_Integer_Underflow__char_rand_multiply_18.c":53:5)
#loc51 = loc("CWE191_Integer_Underflow__char_rand_multiply_18.c":53:10)
#loc52 = loc("CWE191_Integer_Underflow__char_rand_multiply_18.c":54:1)
#loc53 = loc("CWE191_Integer_Underflow__char_rand_multiply_18.c":55:5)
#loc54 = loc("CWE191_Integer_Underflow__char_rand_multiply_18.c":67:5)
#loc55 = loc("CWE191_Integer_Underflow__char_rand_multiply_18.c":55:8)
#loc56 = loc("CWE191_Integer_Underflow__char_rand_multiply_18.c":55:15)
#loc57 = loc("CWE191_Integer_Underflow__char_rand_multiply_18.c":55:13)
#loc58 = loc("CWE191_Integer_Underflow__char_rand_multiply_18.c":56:5)
#loc59 = loc("CWE191_Integer_Underflow__char_rand_multiply_18.c":58:9)
#loc60 = loc("CWE191_Integer_Underflow__char_rand_multiply_18.c":66:9)
#loc61 = loc("CWE191_Integer_Underflow__char_rand_multiply_18.c":58:13)
#loc62 = loc("CWE191_Integer_Underflow__char_rand_multiply_18.c":58:21)
#loc63 = loc("CWE191_Integer_Underflow__char_rand_multiply_18.c":58:30)
#loc64 = loc("CWE191_Integer_Underflow__char_rand_multiply_18.c":58:31)
#loc65 = loc("CWE191_Integer_Underflow__char_rand_multiply_18.c":58:18)
#loc66 = loc("CWE191_Integer_Underflow__char_rand_multiply_18.c":59:9)
#loc67 = loc("CWE191_Integer_Underflow__char_rand_multiply_18.c":62:9)
#loc68 = loc("CWE191_Integer_Underflow__char_rand_multiply_18.c":64:9)
#loc69 = loc("CWE191_Integer_Underflow__char_rand_multiply_18.c":60:13)
#loc70 = loc("CWE191_Integer_Underflow__char_rand_multiply_18.c":60:34)
#loc71 = loc("CWE191_Integer_Underflow__char_rand_multiply_18.c":60:27)
#loc72 = loc("CWE191_Integer_Underflow__char_rand_multiply_18.c":61:30)
#loc73 = loc("CWE191_Integer_Underflow__char_rand_multiply_18.c":61:13)
#loc74 = loc("CWE191_Integer_Underflow__char_rand_multiply_18.c":65:13)
#loc75 = loc("CWE191_Integer_Underflow__char_rand_multiply_18.c":71:1)
#loc76 = loc("CWE191_Integer_Underflow__char_rand_multiply_18.c":87:1)
#loc77 = loc("CWE191_Integer_Underflow__char_rand_multiply_18.c":73:5)
#loc78 = loc("CWE191_Integer_Underflow__char_rand_multiply_18.c":73:10)
#loc79 = loc("CWE191_Integer_Underflow__char_rand_multiply_18.c":74:12)
#loc80 = loc("CWE191_Integer_Underflow__char_rand_multiply_18.c":74:5)
#loc81 = loc("CWE191_Integer_Underflow__char_rand_multiply_18.c":75:5)
#loc82 = loc("CWE191_Integer_Underflow__char_rand_multiply_18.c":75:10)
#loc83 = loc("CWE191_Integer_Underflow__char_rand_multiply_18.c":76:1)
#loc84 = loc("CWE191_Integer_Underflow__char_rand_multiply_18.c":78:13)
#loc85 = loc("CWE191_Integer_Underflow__char_rand_multiply_18.c":78:12)
#loc86 = loc("CWE191_Integer_Underflow__char_rand_multiply_18.c":78:5)
#loc87 = loc("CWE191_Integer_Underflow__char_rand_multiply_18.c":79:5)
#loc88 = loc("CWE191_Integer_Underflow__char_rand_multiply_18.c":79:10)
#loc89 = loc("CWE191_Integer_Underflow__char_rand_multiply_18.c":80:1)
#loc90 = loc("CWE191_Integer_Underflow__char_rand_multiply_18.c":81:5)
#loc91 = loc("CWE191_Integer_Underflow__char_rand_multiply_18.c":86:5)
#loc92 = loc("CWE191_Integer_Underflow__char_rand_multiply_18.c":81:8)
#loc93 = loc("CWE191_Integer_Underflow__char_rand_multiply_18.c":81:15)
#loc94 = loc("CWE191_Integer_Underflow__char_rand_multiply_18.c":81:13)
#loc95 = loc("CWE191_Integer_Underflow__char_rand_multiply_18.c":82:5)
#loc96 = loc("CWE191_Integer_Underflow__char_rand_multiply_18.c":84:9)
#loc97 = loc("CWE191_Integer_Underflow__char_rand_multiply_18.c":84:30)
#loc98 = loc("CWE191_Integer_Underflow__char_rand_multiply_18.c":84:23)
#loc99 = loc("CWE191_Integer_Underflow__char_rand_multiply_18.c":85:26)
#loc100 = loc("CWE191_Integer_Underflow__char_rand_multiply_18.c":85:9)
#loc101 = loc(fused[#loc1, #loc2])
#loc102 = loc(fused[#loc3, #loc4])
#loc103 = loc(fused[#loc5, #loc6])
#loc104 = loc(fused[#loc7, #loc8])
#loc105 = loc(fused[#loc10, #loc9])
#loc106 = loc(fused[#loc11, #loc12])
#loc107 = loc(fused[#loc15, #loc14])
#loc108 = loc(fused[#loc16, #loc17])
#loc109 = loc(fused[#loc19, #loc20])
#loc110 = loc(fused[#loc21, #loc22])
#loc111 = loc(fused[#loc24, #loc20])
#loc112 = loc(fused[#loc25, #loc26])
#loc113 = loc(fused[#loc30, #loc31])
#loc114 = loc(fused[#loc32, #loc33])
#loc115 = loc(fused[#loc34, #loc35])
#loc116 = loc(fused[#loc36, #loc37])
#loc117 = loc(fused[#loc39, #loc40])
#loc118 = loc(fused[#loc41, #loc42])
#loc119 = loc(fused[#loc44, #loc43])
#loc120 = loc(fused[#loc45, #loc46])
#loc121 = loc(fused[#loc49, #loc48])
#loc122 = loc(fused[#loc50, #loc51])
#loc123 = loc(fused[#loc53, #loc54])
#loc124 = loc(fused[#loc55, #loc56])
#loc125 = loc(fused[#loc58, #loc54])
#loc126 = loc(fused[#loc59, #loc60])
#loc127 = loc(fused[#loc62, #loc63])
#loc128 = loc(fused[#loc61, #loc64])
#loc129 = loc(fused[#loc66, #loc67, #loc68, #loc60])
#loc130 = loc(fused[#loc69, #loc70])
#loc131 = loc(fused[#loc75, #loc76])
#loc132 = loc(fused[#loc77, #loc78])
#loc133 = loc(fused[#loc80, #loc79])
#loc134 = loc(fused[#loc81, #loc82])
#loc135 = loc(fused[#loc86, #loc84])
#loc136 = loc(fused[#loc87, #loc88])
#loc137 = loc(fused[#loc90, #loc91])
#loc138 = loc(fused[#loc92, #loc93])
#loc139 = loc(fused[#loc95, #loc91])
#loc140 = loc(fused[#loc96, #loc97])
