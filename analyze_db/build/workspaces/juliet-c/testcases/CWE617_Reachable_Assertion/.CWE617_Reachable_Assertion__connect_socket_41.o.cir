!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc6 = loc("CWE617_Reachable_Assertion__connect_socket_41.c":47:60)
#loc7 = loc("CWE617_Reachable_Assertion__connect_socket_41.c":47:64)
#loc125 = loc("CWE617_Reachable_Assertion__connect_socket_41.c":121:64)
#loc126 = loc("CWE617_Reachable_Assertion__connect_socket_41.c":121:68)
#true = #cir.bool<true> : !cir.bool
!ty_in_addr = !cir.record<struct "in_addr" {!u32i} #cir.record.decl.ast>
#loc146 = loc(fused[#loc6, #loc7])
#loc191 = loc(fused[#loc125, #loc126])
!ty_sockaddr = !cir.record<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.record<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/workspaces/juliet-c/testcases/CWE617_Reachable_Assertion/CWE617_Reachable_Assertion__connect_socket_41.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little", "dlti.mangling_mode" = "e">} {
  cir.func private @__assert_fail(!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) extra(#fn_attr) loc(#loc144)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data > ASSERT_VALUE\00" : !cir.array<!s8i x 20>> : !cir.array<!s8i x 20> {alignment = 1 : i64} loc(#loc3)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"CWE617_Reachable_Assertion__connect_socket_41.c\00" : !cir.array<!s8i x 48>> : !cir.array<!s8i x 48> {alignment = 1 : i64} loc(#loc3)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"void CWE617_Reachable_Assertion__connect_socket_41_badSink(int)\00" : !cir.array<!s8i x 64>> : !cir.array<!s8i x 64> {alignment = 1 : i64} loc(#loc3)
  cir.func @CWE617_Reachable_Assertion__connect_socket_41_badSink(%arg0: !s32i loc(fused[#loc6, #loc7])) extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc146)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc8)
    %1 = cir.const #cir.int<4> : !u64i loc(#loc3)
    cir.scope {
      cir.scope {
        %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc3)
        %3 = cir.const #cir.int<5> : !s32i loc(#loc3)
        %4 = cir.cmp(gt, %2, %3) : !s32i, !cir.bool loc(#loc3)
        cir.if %4 {
        } else {
          %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 20>> loc(#loc3)
          %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc3)
          %7 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 48>> loc(#loc3)
          %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 48>>), !cir.ptr<!s8i> loc(#loc3)
          %9 = cir.const #cir.int<50> : !s32i loc(#loc3)
          %10 = cir.cast(integral, %9 : !s32i), !u32i loc(#loc3)
          %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 64>> loc(#loc3)
          %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 64>>), !cir.ptr<!s8i> loc(#loc3)
          cir.call @__assert_fail(%6, %8, %10, %12) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) -> () extra(#fn_attr) loc(#loc3)
        } loc(#loc3)
      } loc(#loc3)
    } loc(#loc3)
    cir.return loc(#loc5)
  } loc(#loc145)
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc147)
  cir.func private @inet_addr(!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc148)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"127.0.0.1\00" : !cir.array<!s8i x 10>> : !cir.array<!s8i x 10> {alignment = 1 : i64} loc(#loc13)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc149)
  cir.func private @connect(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc150)
  cir.func private @recv(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc151)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc152)
  cir.func private @close(!s32i) -> !s32i loc(#loc153)
  cir.func no_proto @CWE617_Reachable_Assertion__connect_socket_41_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc155)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc28)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc29)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc156)
    cir.scope {
      %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc158)
      %5 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc159)
      %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["connectSocket", init] {alignment = 4 : i64} loc(#loc160)
      %7 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc161)
      %8 = cir.const #cir.int<1> : !s32i loc(#loc38)
      %9 = cir.unary(minus, %8) nsw : !s32i, !s32i loc(#loc38)
      cir.store %9, %6 : !s32i, !cir.ptr<!s32i> loc(#loc160)
      cir.scope {
        cir.do {
          cir.scope {
            %10 = cir.const #cir.int<2> : !s32i loc(#loc45)
            %11 = cir.const #cir.int<1> : !s32i loc(#loc46)
            %12 = cir.const #cir.int<6> : !s32i loc(#loc47)
            %13 = cir.call @socket(%10, %11, %12) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc48)
            cir.store %13, %6 : !s32i, !cir.ptr<!s32i> loc(#loc164)
            cir.scope {
              %52 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc53)
              %53 = cir.const #cir.int<1> : !s32i loc(#loc54)
              %54 = cir.unary(minus, %53) nsw : !s32i, !s32i loc(#loc54)
              %55 = cir.cmp(eq, %52, %54) : !s32i, !cir.bool loc(#loc166)
              cir.if %55 {
                cir.break loc(#loc56)
              } loc(#loc167)
            } loc(#loc165)
            %14 = cir.cast(bitcast, %5 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc168)
            %15 = cir.const #cir.int<0> : !s32i loc(#loc59)
            %16 = cir.const #cir.int<16> : !u64i loc(#loc169)
            cir.libc.memset %16 bytes from %14 set to %15 : !cir.ptr<!void>, !s32i, !u64i loc(#loc170)
            %17 = cir.const #cir.int<2> : !s32i loc(#loc64)
            %18 = cir.cast(integral, %17 : !s32i), !u16i loc(#loc64)
            %19 = cir.get_member %5[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc65)
            cir.store %18, %19 : !u16i, !cir.ptr<!u16i> loc(#loc171)
            %20 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 10>> loc(#loc13)
            %21 = cir.cast(array_to_ptrdecay, %20 : !cir.ptr<!cir.array<!s8i x 10>>), !cir.ptr<!s8i> loc(#loc13)
            %22 = cir.call @inet_addr(%21) : (!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc67)
            %23 = cir.get_member %5[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc68)
            %24 = cir.get_member %23[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc69)
            cir.store %22, %24 : !u32i, !cir.ptr<!u32i> loc(#loc172)
            %25 = cir.const #cir.int<27015> : !s32i loc(#loc72)
            %26 = cir.cast(integral, %25 : !s32i), !u16i loc(#loc72)
            %27 = cir.call @htons(%26) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc73)
            %28 = cir.get_member %5[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc74)
            cir.store %27, %28 : !u16i, !cir.ptr<!u16i> loc(#loc173)
            cir.scope {
              %52 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc79)
              %53 = cir.cast(bitcast, %5 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc175)
              %54 = cir.const #cir.int<16> : !u64i loc(#loc176)
              %55 = cir.cast(integral, %54 : !u64i), !u32i loc(#loc176)
              %56 = cir.call @connect(%52, %53, %55) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc84)
              %57 = cir.const #cir.int<1> : !s32i loc(#loc85)
              %58 = cir.unary(minus, %57) nsw : !s32i, !s32i loc(#loc85)
              %59 = cir.cmp(eq, %56, %58) : !s32i, !cir.bool loc(#loc177)
              cir.if %59 {
                cir.break loc(#loc87)
              } loc(#loc178)
            } loc(#loc174)
            %29 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc88)
            %30 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc89)
            %31 = cir.cast(bitcast, %30 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc89)
            %32 = cir.const #cir.int<3> : !s32i loc(#loc90)
            %33 = cir.cast(integral, %32 : !s32i), !u64i loc(#loc90)
            %34 = cir.const #cir.int<4> : !u64i loc(#loc90)
            %35 = cir.binop(mul, %33, %34) : !u64i loc(#loc90)
            %36 = cir.const #cir.int<2> : !s32i loc(#loc90)
            %37 = cir.cast(integral, %36 : !s32i), !u64i loc(#loc90)
            %38 = cir.binop(add, %35, %37) : !u64i loc(#loc90)
            %39 = cir.const #cir.int<1> : !s32i loc(#loc91)
            %40 = cir.cast(integral, %39 : !s32i), !u64i loc(#loc91)
            %41 = cir.binop(sub, %38, %40) : !u64i loc(#loc179)
            %42 = cir.const #cir.int<0> : !s32i loc(#loc92)
            %43 = cir.call @recv(%29, %31, %41, %42) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc93)
            %44 = cir.cast(integral, %43 : !s64i), !s32i loc(#loc93)
            cir.store %44, %4 : !s32i, !cir.ptr<!s32i> loc(#loc180)
            cir.scope {
              %52 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc98)
              %53 = cir.const #cir.int<1> : !s32i loc(#loc99)
              %54 = cir.unary(minus, %53) nsw : !s32i, !s32i loc(#loc99)
              %55 = cir.cmp(eq, %52, %54) : !s32i, !cir.bool loc(#loc182)
              %56 = cir.ternary(%55, true {
                %57 = cir.const #true loc(#loc100)
                cir.yield %57 : !cir.bool loc(#loc100)
              }, false {
                %57 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc101)
                %58 = cir.const #cir.int<0> : !s32i loc(#loc102)
                %59 = cir.cmp(eq, %57, %58) : !s32i, !cir.bool loc(#loc183)
                %60 = cir.ternary(%59, true {
                  %61 = cir.const #true loc(#loc100)
                  cir.yield %61 : !cir.bool loc(#loc100)
                }, false {
                  %61 = cir.const #false loc(#loc100)
                  cir.yield %61 : !cir.bool loc(#loc100)
                }) : (!cir.bool) -> !cir.bool loc(#loc100)
                cir.yield %60 : !cir.bool loc(#loc100)
              }) : (!cir.bool) -> !cir.bool loc(#loc100)
              cir.if %56 {
                cir.break loc(#loc104)
              } loc(#loc184)
            } loc(#loc181)
            %45 = cir.const #cir.int<0> : !s32i loc(#loc105)
            %46 = cir.cast(integral, %45 : !s32i), !s8i loc(#loc105)
            %47 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc106)
            %48 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc107)
            %49 = cir.ptr_stride(%48 : !cir.ptr<!s8i>, %47 : !s32i), !cir.ptr<!s8i> loc(#loc107)
            cir.store %46, %49 : !s8i, !cir.ptr<!s8i> loc(#loc185)
            %50 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc108)
            %51 = cir.call @atoi(%50) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc109)
            cir.store %51, %0 : !s32i, !cir.ptr<!s32i> loc(#loc186)
          } loc(#loc163)
          cir.yield loc(#loc42)
        } while {
          %10 = cir.const #cir.int<0> : !s32i loc(#loc112)
          %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc112)
          cir.condition(%11) loc(#loc112)
        } loc(#loc162)
      } loc(#loc162)
      cir.scope {
        %10 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc115)
        %11 = cir.const #cir.int<1> : !s32i loc(#loc116)
        %12 = cir.unary(minus, %11) nsw : !s32i, !s32i loc(#loc116)
        %13 = cir.cmp(ne, %10, %12) : !s32i, !cir.bool loc(#loc188)
        cir.if %13 {
          %14 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc118)
          %15 = cir.call @close(%14) : (!s32i) -> !s32i loc(#loc119)
        } loc(#loc189)
      } loc(#loc187)
    } loc(#loc157)
    %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc120)
    cir.call @CWE617_Reachable_Assertion__connect_socket_41_badSink(%3) : (!s32i) -> () loc(#loc121)
    cir.return loc(#loc25)
  } loc(#loc154)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"void CWE617_Reachable_Assertion__connect_socket_41_goodG2BSink(int)\00" : !cir.array<!s8i x 68>> : !cir.array<!s8i x 68> {alignment = 1 : i64} loc(#loc122)
  cir.func @CWE617_Reachable_Assertion__connect_socket_41_goodG2BSink(%arg0: !s32i loc(fused[#loc125, #loc126])) extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc191)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc127)
    %1 = cir.const #cir.int<4> : !u64i loc(#loc122)
    cir.scope {
      cir.scope {
        %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc122)
        %3 = cir.const #cir.int<5> : !s32i loc(#loc122)
        %4 = cir.cmp(gt, %2, %3) : !s32i, !cir.bool loc(#loc122)
        cir.if %4 {
        } else {
          %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 20>> loc(#loc122)
          %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc122)
          %7 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 48>> loc(#loc122)
          %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 48>>), !cir.ptr<!s8i> loc(#loc122)
          %9 = cir.const #cir.int<124> : !s32i loc(#loc122)
          %10 = cir.cast(integral, %9 : !s32i), !u32i loc(#loc122)
          %11 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 68>> loc(#loc122)
          %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 68>>), !cir.ptr<!s8i> loc(#loc122)
          cir.call @__assert_fail(%6, %8, %10, %12) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) -> () extra(#fn_attr) loc(#loc122)
        } loc(#loc122)
      } loc(#loc122)
    } loc(#loc122)
    cir.return loc(#loc124)
  } loc(#loc190)
  cir.func no_proto @CWE617_Reachable_Assertion__connect_socket_41_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc193)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc130)
    cir.return loc(#loc129)
  } loc(#loc192)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc195)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc136)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc137)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc196)
    %3 = cir.const #cir.int<5> : !s32i loc(#loc139)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc140)
    %5 = cir.binop(add, %3, %4) nsw : !s32i loc(#loc139)
    cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc197)
    %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc142)
    cir.call @CWE617_Reachable_Assertion__connect_socket_41_goodG2BSink(%6) : (!s32i) -> () loc(#loc143)
    cir.return loc(#loc133)
  } loc(#loc194)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE617_Reachable_Assertion/CWE617_Reachable_Assertion__connect_socket_41.c":0:0)
#loc1 = loc("/usr/include/assert.h":69:1)
#loc2 = loc("/usr/include/assert.h":71:43)
#loc3 = loc("CWE617_Reachable_Assertion__connect_socket_41.c":50:5)
#loc4 = loc("CWE617_Reachable_Assertion__connect_socket_41.c":47:1)
#loc5 = loc("CWE617_Reachable_Assertion__connect_socket_41.c":51:1)
#loc8 = loc("CWE617_Reachable_Assertion__connect_socket_41.c":48:1)
#loc9 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:1)
#loc10 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:62)
#loc11 = loc("/usr/include/arpa/inet.h":34:1)
#loc12 = loc("/usr/include/arpa/inet.h":34:47)
#loc13 = loc("CWE617_Reachable_Assertion__connect_socket_41.c":84:49)
#loc14 = loc("/usr/include/netinet/in.h":402:1)
#loc15 = loc("/usr/include/netinet/in.h":403:40)
#loc16 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":126:1)
#loc17 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":126:75)
#loc18 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":145:1)
#loc19 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":145:68)
#loc20 = loc("/usr/include/stdlib.h":105:1)
#loc21 = loc("/usr/include/stdlib.h":106:33)
#loc22 = loc("/usr/include/unistd.h":358:1)
#loc23 = loc("/usr/include/unistd.h":358:27)
#loc24 = loc("CWE617_Reachable_Assertion__connect_socket_41.c":53:1)
#loc25 = loc("CWE617_Reachable_Assertion__connect_socket_41.c":115:1)
#loc26 = loc("CWE617_Reachable_Assertion__connect_socket_41.c":55:5)
#loc27 = loc("CWE617_Reachable_Assertion__connect_socket_41.c":55:9)
#loc28 = loc("CWE617_Reachable_Assertion__connect_socket_41.c":57:13)
#loc29 = loc("CWE617_Reachable_Assertion__connect_socket_41.c":57:12)
#loc30 = loc("CWE617_Reachable_Assertion__connect_socket_41.c":57:5)
#loc31 = loc("CWE617_Reachable_Assertion__connect_socket_41.c":58:5)
#loc32 = loc("CWE617_Reachable_Assertion__connect_socket_41.c":113:5)
#loc33 = loc("CWE617_Reachable_Assertion__connect_socket_41.c":63:9)
#loc34 = loc("CWE617_Reachable_Assertion__connect_socket_41.c":63:13)
#loc35 = loc("CWE617_Reachable_Assertion__connect_socket_41.c":64:9)
#loc36 = loc("CWE617_Reachable_Assertion__connect_socket_41.c":64:28)
#loc37 = loc("CWE617_Reachable_Assertion__connect_socket_41.c":65:9)
#loc38 = loc("CWE617_Reachable_Assertion__connect_socket_41.c":65:32)
#loc39 = loc("CWE617_Reachable_Assertion__connect_socket_41.c":66:9)
#loc40 = loc("CWE617_Reachable_Assertion__connect_socket_41.c":66:41)
#loc41 = loc("CWE617_Reachable_Assertion__connect_socket_41.c":67:9)
#loc42 = loc("CWE617_Reachable_Assertion__connect_socket_41.c":102:17)
#loc43 = loc("CWE617_Reachable_Assertion__connect_socket_41.c":68:9)
#loc44 = loc("CWE617_Reachable_Assertion__connect_socket_41.c":101:9)
#loc45 = loc("CWE617_Reachable_Assertion__connect_socket_41.c":77:36)
#loc46 = loc("CWE617_Reachable_Assertion__connect_socket_41.c":77:45)
#loc47 = loc("CWE617_Reachable_Assertion__connect_socket_41.c":77:58)
#loc48 = loc("CWE617_Reachable_Assertion__connect_socket_41.c":77:29)
#loc49 = loc("CWE617_Reachable_Assertion__connect_socket_41.c":77:13)
#loc50 = loc("CWE617_Reachable_Assertion__connect_socket_41.c":77:69)
#loc51 = loc("CWE617_Reachable_Assertion__connect_socket_41.c":78:13)
#loc52 = loc("CWE617_Reachable_Assertion__connect_socket_41.c":81:13)
#loc53 = loc("CWE617_Reachable_Assertion__connect_socket_41.c":78:17)
#loc54 = loc("CWE617_Reachable_Assertion__connect_socket_41.c":78:34)
#loc55 = loc("CWE617_Reachable_Assertion__connect_socket_41.c":79:13)
#loc56 = loc("CWE617_Reachable_Assertion__connect_socket_41.c":80:17)
#loc57 = loc("CWE617_Reachable_Assertion__connect_socket_41.c":82:20)
#loc58 = loc("CWE617_Reachable_Assertion__connect_socket_41.c":82:21)
#loc59 = loc("CWE617_Reachable_Assertion__connect_socket_41.c":82:30)
#loc60 = loc("CWE617_Reachable_Assertion__connect_socket_41.c":82:33)
#loc61 = loc("CWE617_Reachable_Assertion__connect_socket_41.c":82:47)
#loc62 = loc("CWE617_Reachable_Assertion__connect_socket_41.c":82:13)
#loc63 = loc("CWE617_Reachable_Assertion__connect_socket_41.c":82:48)
#loc64 = loc("CWE617_Reachable_Assertion__connect_socket_41.c":83:34)
#loc65 = loc("/usr/include/netinet/in.h":249:5)
#loc66 = loc("CWE617_Reachable_Assertion__connect_socket_41.c":83:13)
#loc67 = loc("CWE617_Reachable_Assertion__connect_socket_41.c":84:39)
#loc68 = loc("/usr/include/netinet/in.h":251:20)
#loc69 = loc("/usr/include/netinet/in.h":33:15)
#loc70 = loc("CWE617_Reachable_Assertion__connect_socket_41.c":84:13)
#loc71 = loc("CWE617_Reachable_Assertion__connect_socket_41.c":84:59)
#loc72 = loc("CWE617_Reachable_Assertion__connect_socket_41.c":85:38)
#loc73 = loc("CWE617_Reachable_Assertion__connect_socket_41.c":85:32)
#loc74 = loc("/usr/include/netinet/in.h":250:15)
#loc75 = loc("CWE617_Reachable_Assertion__connect_socket_41.c":85:13)
#loc76 = loc("CWE617_Reachable_Assertion__connect_socket_41.c":85:46)
#loc77 = loc("CWE617_Reachable_Assertion__connect_socket_41.c":86:13)
#loc78 = loc("CWE617_Reachable_Assertion__connect_socket_41.c":89:13)
#loc79 = loc("CWE617_Reachable_Assertion__connect_socket_41.c":86:25)
#loc80 = loc("CWE617_Reachable_Assertion__connect_socket_41.c":86:58)
#loc81 = loc("CWE617_Reachable_Assertion__connect_socket_41.c":86:59)
#loc82 = loc("CWE617_Reachable_Assertion__connect_socket_41.c":86:68)
#loc83 = loc("CWE617_Reachable_Assertion__connect_socket_41.c":86:82)
#loc84 = loc("CWE617_Reachable_Assertion__connect_socket_41.c":86:17)
#loc85 = loc("CWE617_Reachable_Assertion__connect_socket_41.c":86:88)
#loc86 = loc("CWE617_Reachable_Assertion__connect_socket_41.c":87:13)
#loc87 = loc("CWE617_Reachable_Assertion__connect_socket_41.c":88:17)
#loc88 = loc("CWE617_Reachable_Assertion__connect_socket_41.c":92:31)
#loc89 = loc("CWE617_Reachable_Assertion__connect_socket_41.c":92:46)
#loc90 = loc("CWE617_Reachable_Assertion__connect_socket_41.c":92:59)
#loc91 = loc("CWE617_Reachable_Assertion__connect_socket_41.c":92:77)
#loc92 = loc("CWE617_Reachable_Assertion__connect_socket_41.c":92:80)
#loc93 = loc("CWE617_Reachable_Assertion__connect_socket_41.c":92:26)
#loc94 = loc("CWE617_Reachable_Assertion__connect_socket_41.c":92:13)
#loc95 = loc("CWE617_Reachable_Assertion__connect_socket_41.c":92:81)
#loc96 = loc("CWE617_Reachable_Assertion__connect_socket_41.c":93:13)
#loc97 = loc("CWE617_Reachable_Assertion__connect_socket_41.c":96:13)
#loc98 = loc("CWE617_Reachable_Assertion__connect_socket_41.c":93:17)
#loc99 = loc("CWE617_Reachable_Assertion__connect_socket_41.c":93:31)
#loc100 = loc("CWE617_Reachable_Assertion__connect_socket_41.c":93:44)
#loc101 = loc("CWE617_Reachable_Assertion__connect_socket_41.c":93:47)
#loc102 = loc("CWE617_Reachable_Assertion__connect_socket_41.c":93:61)
#loc103 = loc("CWE617_Reachable_Assertion__connect_socket_41.c":94:13)
#loc104 = loc("CWE617_Reachable_Assertion__connect_socket_41.c":95:17)
#loc105 = loc("CWE617_Reachable_Assertion__connect_socket_41.c":98:39)
#loc106 = loc("CWE617_Reachable_Assertion__connect_socket_41.c":98:25)
#loc107 = loc("CWE617_Reachable_Assertion__connect_socket_41.c":98:13)
#loc108 = loc("CWE617_Reachable_Assertion__connect_socket_41.c":100:25)
#loc109 = loc("CWE617_Reachable_Assertion__connect_socket_41.c":100:20)
#loc110 = loc("CWE617_Reachable_Assertion__connect_socket_41.c":100:13)
#loc111 = loc("CWE617_Reachable_Assertion__connect_socket_41.c":100:36)
#loc112 = loc("CWE617_Reachable_Assertion__connect_socket_41.c":102:16)
#loc113 = loc("CWE617_Reachable_Assertion__connect_socket_41.c":103:9)
#loc114 = loc("CWE617_Reachable_Assertion__connect_socket_41.c":106:9)
#loc115 = loc("CWE617_Reachable_Assertion__connect_socket_41.c":103:13)
#loc116 = loc("CWE617_Reachable_Assertion__connect_socket_41.c":103:30)
#loc117 = loc("CWE617_Reachable_Assertion__connect_socket_41.c":104:9)
#loc118 = loc("CWE617_Reachable_Assertion__connect_socket_41.c":105:26)
#loc119 = loc("CWE617_Reachable_Assertion__connect_socket_41.c":105:13)
#loc120 = loc("CWE617_Reachable_Assertion__connect_socket_41.c":114:59)
#loc121 = loc("CWE617_Reachable_Assertion__connect_socket_41.c":114:5)
#loc122 = loc("CWE617_Reachable_Assertion__connect_socket_41.c":124:5)
#loc123 = loc("CWE617_Reachable_Assertion__connect_socket_41.c":121:1)
#loc124 = loc("CWE617_Reachable_Assertion__connect_socket_41.c":125:1)
#loc127 = loc("CWE617_Reachable_Assertion__connect_socket_41.c":122:1)
#loc128 = loc("CWE617_Reachable_Assertion__connect_socket_41.c":138:1)
#loc129 = loc("CWE617_Reachable_Assertion__connect_socket_41.c":141:1)
#loc130 = loc("CWE617_Reachable_Assertion__connect_socket_41.c":140:5)
#loc131 = loc("CWE617_Reachable_Assertion__connect_socket_41.c":140:13)
#loc132 = loc("CWE617_Reachable_Assertion__connect_socket_41.c":128:1)
#loc133 = loc("CWE617_Reachable_Assertion__connect_socket_41.c":136:1)
#loc134 = loc("CWE617_Reachable_Assertion__connect_socket_41.c":130:5)
#loc135 = loc("CWE617_Reachable_Assertion__connect_socket_41.c":130:9)
#loc136 = loc("CWE617_Reachable_Assertion__connect_socket_41.c":132:13)
#loc137 = loc("CWE617_Reachable_Assertion__connect_socket_41.c":132:12)
#loc138 = loc("CWE617_Reachable_Assertion__connect_socket_41.c":132:5)
#loc139 = loc("CWE617_Reachable_Assertion__connect_socket_41.c":134:12)
#loc140 = loc("CWE617_Reachable_Assertion__connect_socket_41.c":134:25)
#loc141 = loc("CWE617_Reachable_Assertion__connect_socket_41.c":134:5)
#loc142 = loc("CWE617_Reachable_Assertion__connect_socket_41.c":135:63)
#loc143 = loc("CWE617_Reachable_Assertion__connect_socket_41.c":135:5)
#loc144 = loc(fused[#loc1, #loc2])
#loc145 = loc(fused[#loc4, #loc5])
#loc147 = loc(fused[#loc9, #loc10])
#loc148 = loc(fused[#loc11, #loc12])
#loc149 = loc(fused[#loc14, #loc15])
#loc150 = loc(fused[#loc16, #loc17])
#loc151 = loc(fused[#loc18, #loc19])
#loc152 = loc(fused[#loc20, #loc21])
#loc153 = loc(fused[#loc22, #loc23])
#loc154 = loc(fused[#loc24, #loc25])
#loc155 = loc(fused[#loc26, #loc27])
#loc156 = loc(fused[#loc30, #loc28])
#loc157 = loc(fused[#loc31, #loc32])
#loc158 = loc(fused[#loc33, #loc34])
#loc159 = loc(fused[#loc35, #loc36])
#loc160 = loc(fused[#loc37, #loc38])
#loc161 = loc(fused[#loc39, #loc40])
#loc162 = loc(fused[#loc41, #loc42])
#loc163 = loc(fused[#loc43, #loc44])
#loc164 = loc(fused[#loc49, #loc50])
#loc165 = loc(fused[#loc51, #loc52])
#loc166 = loc(fused[#loc53, #loc54])
#loc167 = loc(fused[#loc55, #loc52])
#loc168 = loc(fused[#loc57, #loc58])
#loc169 = loc(fused[#loc60, #loc61])
#loc170 = loc(fused[#loc62, #loc63])
#loc171 = loc(fused[#loc66, #loc64])
#loc172 = loc(fused[#loc70, #loc71])
#loc173 = loc(fused[#loc75, #loc76])
#loc174 = loc(fused[#loc77, #loc78])
#loc175 = loc(fused[#loc80, #loc81])
#loc176 = loc(fused[#loc82, #loc83])
#loc177 = loc(fused[#loc84, #loc85])
#loc178 = loc(fused[#loc86, #loc78])
#loc179 = loc(fused[#loc90, #loc91])
#loc180 = loc(fused[#loc94, #loc95])
#loc181 = loc(fused[#loc96, #loc97])
#loc182 = loc(fused[#loc98, #loc99])
#loc183 = loc(fused[#loc101, #loc102])
#loc184 = loc(fused[#loc103, #loc97])
#loc185 = loc(fused[#loc107, #loc105])
#loc186 = loc(fused[#loc110, #loc111])
#loc187 = loc(fused[#loc113, #loc114])
#loc188 = loc(fused[#loc115, #loc116])
#loc189 = loc(fused[#loc117, #loc114])
#loc190 = loc(fused[#loc123, #loc124])
#loc192 = loc(fused[#loc128, #loc129])
#loc193 = loc(fused[#loc130, #loc131])
#loc194 = loc(fused[#loc132, #loc133])
#loc195 = loc(fused[#loc134, #loc135])
#loc196 = loc(fused[#loc138, #loc136])
#loc197 = loc(fused[#loc141, #loc140])
