!s16i = !cir.int<s, 16>
!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE194_Unexpected_Sign_Extension/s02/CWE194_Unexpected_Sign_Extension__rand_malloc_18.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e", "dlti.endianness" = "little">} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc102)
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc103)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc104)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc105)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc106)
  cir.func no_proto @CWE194_Unexpected_Sign_Extension__rand_malloc_18_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc108)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc15)
    %2 = cir.cast(integral, %1 : !s32i), !s16i loc(#loc15)
    cir.store %2, %0 : !s16i, !cir.ptr<!s16i> loc(#loc109)
    cir.goto "source" loc(#loc110)
  ^bb1:  // no predecessors
    cir.label "source" loc(#loc19)
    %3 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc20)
    %5 = cir.binop(and, %3, %4) : !s32i loc(#loc20)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc20)
    %7 = cir.ternary(%6, true {
      %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
      %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc20)
      %12 = cir.const #cir.int<30> : !s32i loc(#loc20)
      %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc20)
      %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
      %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc20)
      %16 = cir.const #cir.int<15> : !s32i loc(#loc20)
      %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc20)
      %18 = cir.binop(xor, %13, %17) : !u32i loc(#loc20)
      %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
      %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc20)
      %21 = cir.binop(xor, %18, %20) : !u32i loc(#loc20)
      cir.yield %21 : !u32i loc(#loc20)
    }, false {
      %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
      %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc20)
      %12 = cir.const #cir.int<30> : !s32i loc(#loc20)
      %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc20)
      %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
      %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc20)
      %16 = cir.const #cir.int<15> : !s32i loc(#loc20)
      %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc20)
      %18 = cir.binop(xor, %13, %17) : !u32i loc(#loc20)
      %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
      %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc20)
      %21 = cir.binop(xor, %18, %20) : !u32i loc(#loc20)
      %22 = cir.unary(minus, %21) : !u32i, !u32i loc(#loc20)
      %23 = cir.const #cir.int<1> : !s32i loc(#loc20)
      %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc20)
      %25 = cir.binop(sub, %22, %24) : !u32i loc(#loc20)
      cir.yield %25 : !u32i loc(#loc20)
    }) : (!cir.bool) -> !u32i loc(#loc20)
    %8 = cir.cast(integral, %7 : !u32i), !s32i loc(#loc20)
    %9 = cir.cast(integral, %8 : !s32i), !s16i loc(#loc20)
    cir.store %9, %0 : !s16i, !cir.ptr<!s16i> loc(#loc111)
    cir.scope {
      %10 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc24)
      %11 = cir.cast(integral, %10 : !s16i), !s32i loc(#loc24)
      %12 = cir.const #cir.int<100> : !s32i loc(#loc25)
      %13 = cir.cmp(lt, %11, %12) : !s32i, !cir.bool loc(#loc113)
      cir.if %13 {
        %14 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBuffer", init] {alignment = 8 : i64} loc(#loc115)
        %15 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc29)
        %16 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc30)
        %17 = cir.cast(integral, %16 : !s16i), !u64i loc(#loc30)
        %18 = cir.call @malloc(%17) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc29)
        %19 = cir.cast(bitcast, %18 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc116)
        cir.store %19, %14 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc115)
        cir.scope {
          %40 = cir.load %14 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc33)
          %41 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc34)
          %42 = cir.cast(bitcast, %41 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc34)
          %43 = cir.cmp(eq, %40, %42) : !cir.ptr<!s8i>, !cir.bool loc(#loc118)
          cir.if %43 {
            %44 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc36)
            %45 = cir.const #cir.int<1> : !s32i loc(#loc37)
            %46 = cir.unary(minus, %45) nsw : !s32i, !s32i loc(#loc38)
            cir.call @exit(%46) : (!s32i) -> () extra(#fn_attr) loc(#loc36)
          } loc(#loc119)
        } loc(#loc117)
        %20 = cir.load %14 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc39)
        %21 = cir.cast(bitcast, %20 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc39)
        %22 = cir.const #cir.int<65> : !s32i loc(#loc40)
        %23 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc41)
        %24 = cir.cast(integral, %23 : !s16i), !s32i loc(#loc41)
        %25 = cir.const #cir.int<1> : !s32i loc(#loc42)
        %26 = cir.binop(sub, %24, %25) nsw : !s32i loc(#loc41)
        %27 = cir.cast(integral, %26 : !s32i), !u64i loc(#loc41)
        cir.libc.memset %27 bytes from %21 set to %22 : !cir.ptr<!void>, !s32i, !u64i loc(#loc120)
        %28 = cir.const #cir.int<0> : !s32i loc(#loc45)
        %29 = cir.cast(integral, %28 : !s32i), !s8i loc(#loc45)
        %30 = cir.load %14 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc46)
        %31 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc47)
        %32 = cir.cast(integral, %31 : !s16i), !s32i loc(#loc47)
        %33 = cir.const #cir.int<1> : !s32i loc(#loc48)
        %34 = cir.binop(sub, %32, %33) nsw : !s32i loc(#loc47)
        %35 = cir.ptr_stride(%30 : !cir.ptr<!s8i>, %34 : !s32i), !cir.ptr<!s8i> loc(#loc49)
        cir.store %29, %35 : !s8i, !cir.ptr<!s8i> loc(#loc121)
        %36 = cir.load %14 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc50)
        cir.call @printLine(%36) : (!cir.ptr<!s8i>) -> () loc(#loc51)
        %37 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc52)
        %38 = cir.load %14 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc53)
        %39 = cir.cast(bitcast, %38 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc53)
        cir.call @free(%39) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc52)
      } loc(#loc114)
    } loc(#loc112)
    cir.return loc(#loc12)
  } loc(#loc107)
  cir.func no_proto @CWE194_Unexpected_Sign_Extension__rand_malloc_18_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc123)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc56)
    cir.return loc(#loc55)
  } loc(#loc122)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc125)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc62)
    %2 = cir.cast(integral, %1 : !s32i), !s16i loc(#loc62)
    cir.store %2, %0 : !s16i, !cir.ptr<!s16i> loc(#loc126)
    cir.goto "source" loc(#loc127)
  ^bb1:  // no predecessors
    cir.label "source" loc(#loc66)
    %3 = cir.const #cir.int<100> : !s32i loc(#loc67)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc68)
    %5 = cir.binop(sub, %3, %4) nsw : !s32i loc(#loc67)
    %6 = cir.cast(integral, %5 : !s32i), !s16i loc(#loc67)
    cir.store %6, %0 : !s16i, !cir.ptr<!s16i> loc(#loc128)
    cir.scope {
      %7 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc72)
      %8 = cir.cast(integral, %7 : !s16i), !s32i loc(#loc72)
      %9 = cir.const #cir.int<100> : !s32i loc(#loc73)
      %10 = cir.cmp(lt, %8, %9) : !s32i, !cir.bool loc(#loc130)
      cir.if %10 {
        %11 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBuffer", init] {alignment = 8 : i64} loc(#loc132)
        %12 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc77)
        %13 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc78)
        %14 = cir.cast(integral, %13 : !s16i), !u64i loc(#loc78)
        %15 = cir.call @malloc(%14) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc77)
        %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc133)
        cir.store %16, %11 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc132)
        cir.scope {
          %37 = cir.load %11 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc81)
          %38 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc82)
          %39 = cir.cast(bitcast, %38 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc82)
          %40 = cir.cmp(eq, %37, %39) : !cir.ptr<!s8i>, !cir.bool loc(#loc135)
          cir.if %40 {
            %41 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc84)
            %42 = cir.const #cir.int<1> : !s32i loc(#loc85)
            %43 = cir.unary(minus, %42) nsw : !s32i, !s32i loc(#loc86)
            cir.call @exit(%43) : (!s32i) -> () extra(#fn_attr) loc(#loc84)
          } loc(#loc136)
        } loc(#loc134)
        %17 = cir.load %11 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc87)
        %18 = cir.cast(bitcast, %17 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc87)
        %19 = cir.const #cir.int<65> : !s32i loc(#loc88)
        %20 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc89)
        %21 = cir.cast(integral, %20 : !s16i), !s32i loc(#loc89)
        %22 = cir.const #cir.int<1> : !s32i loc(#loc90)
        %23 = cir.binop(sub, %21, %22) nsw : !s32i loc(#loc89)
        %24 = cir.cast(integral, %23 : !s32i), !u64i loc(#loc89)
        cir.libc.memset %24 bytes from %18 set to %19 : !cir.ptr<!void>, !s32i, !u64i loc(#loc137)
        %25 = cir.const #cir.int<0> : !s32i loc(#loc93)
        %26 = cir.cast(integral, %25 : !s32i), !s8i loc(#loc93)
        %27 = cir.load %11 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc94)
        %28 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc95)
        %29 = cir.cast(integral, %28 : !s16i), !s32i loc(#loc95)
        %30 = cir.const #cir.int<1> : !s32i loc(#loc96)
        %31 = cir.binop(sub, %29, %30) nsw : !s32i loc(#loc95)
        %32 = cir.ptr_stride(%27 : !cir.ptr<!s8i>, %31 : !s32i), !cir.ptr<!s8i> loc(#loc97)
        cir.store %26, %32 : !s8i, !cir.ptr<!s8i> loc(#loc138)
        %33 = cir.load %11 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc98)
        cir.call @printLine(%33) : (!cir.ptr<!s8i>) -> () loc(#loc99)
        %34 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc100)
        %35 = cir.load %11 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc101)
        %36 = cir.cast(bitcast, %35 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc101)
        cir.call @free(%36) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc100)
      } loc(#loc131)
    } loc(#loc129)
    cir.return loc(#loc59)
  } loc(#loc124)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE194_Unexpected_Sign_Extension/s02/CWE194_Unexpected_Sign_Extension__rand_malloc_18.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("/usr/include/stdlib.h":672:1)
#loc4 = loc("/usr/include/stdlib.h":672:45)
#loc5 = loc("/usr/include/stdlib.h":756:1)
#loc6 = loc("/usr/include/stdlib.h":756:70)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("/usr/include/stdlib.h":687:1)
#loc10 = loc("/usr/include/stdlib.h":687:32)
#loc11 = loc("CWE194_Unexpected_Sign_Extension__rand_malloc_18.c":21:1)
#loc12 = loc("CWE194_Unexpected_Sign_Extension__rand_malloc_18.c":43:1)
#loc13 = loc("CWE194_Unexpected_Sign_Extension__rand_malloc_18.c":23:5)
#loc14 = loc("CWE194_Unexpected_Sign_Extension__rand_malloc_18.c":23:11)
#loc15 = loc("CWE194_Unexpected_Sign_Extension__rand_malloc_18.c":25:12)
#loc16 = loc("CWE194_Unexpected_Sign_Extension__rand_malloc_18.c":25:5)
#loc17 = loc("CWE194_Unexpected_Sign_Extension__rand_malloc_18.c":26:5)
#loc18 = loc("CWE194_Unexpected_Sign_Extension__rand_malloc_18.c":26:10)
#loc19 = loc("CWE194_Unexpected_Sign_Extension__rand_malloc_18.c":27:1)
#loc20 = loc("CWE194_Unexpected_Sign_Extension__rand_malloc_18.c":29:19)
#loc21 = loc("CWE194_Unexpected_Sign_Extension__rand_malloc_18.c":29:5)
#loc22 = loc("CWE194_Unexpected_Sign_Extension__rand_malloc_18.c":31:5)
#loc23 = loc("CWE194_Unexpected_Sign_Extension__rand_malloc_18.c":42:5)
#loc24 = loc("CWE194_Unexpected_Sign_Extension__rand_malloc_18.c":31:9)
#loc25 = loc("CWE194_Unexpected_Sign_Extension__rand_malloc_18.c":31:16)
#loc26 = loc("CWE194_Unexpected_Sign_Extension__rand_malloc_18.c":32:5)
#loc27 = loc("CWE194_Unexpected_Sign_Extension__rand_malloc_18.c":35:9)
#loc28 = loc("CWE194_Unexpected_Sign_Extension__rand_malloc_18.c":35:48)
#loc29 = loc("CWE194_Unexpected_Sign_Extension__rand_malloc_18.c":35:37)
#loc30 = loc("CWE194_Unexpected_Sign_Extension__rand_malloc_18.c":35:44)
#loc31 = loc("CWE194_Unexpected_Sign_Extension__rand_malloc_18.c":36:9)
#loc32 = loc("CWE194_Unexpected_Sign_Extension__rand_malloc_18.c":36:43)
#loc33 = loc("CWE194_Unexpected_Sign_Extension__rand_malloc_18.c":36:13)
#loc34 = loc("CWE194_Unexpected_Sign_Extension__rand_malloc_18.c":36:27)
#loc35 = loc("CWE194_Unexpected_Sign_Extension__rand_malloc_18.c":36:33)
#loc36 = loc("CWE194_Unexpected_Sign_Extension__rand_malloc_18.c":36:34)
#loc37 = loc("CWE194_Unexpected_Sign_Extension__rand_malloc_18.c":36:40)
#loc38 = loc("CWE194_Unexpected_Sign_Extension__rand_malloc_18.c":36:39)
#loc39 = loc("CWE194_Unexpected_Sign_Extension__rand_malloc_18.c":38:16)
#loc40 = loc("CWE194_Unexpected_Sign_Extension__rand_malloc_18.c":38:28)
#loc41 = loc("CWE194_Unexpected_Sign_Extension__rand_malloc_18.c":38:33)
#loc42 = loc("CWE194_Unexpected_Sign_Extension__rand_malloc_18.c":38:38)
#loc43 = loc("CWE194_Unexpected_Sign_Extension__rand_malloc_18.c":38:9)
#loc44 = loc("CWE194_Unexpected_Sign_Extension__rand_malloc_18.c":38:39)
#loc45 = loc("CWE194_Unexpected_Sign_Extension__rand_malloc_18.c":39:30)
#loc46 = loc("CWE194_Unexpected_Sign_Extension__rand_malloc_18.c":39:9)
#loc47 = loc("CWE194_Unexpected_Sign_Extension__rand_malloc_18.c":39:20)
#loc48 = loc("CWE194_Unexpected_Sign_Extension__rand_malloc_18.c":39:25)
#loc49 = loc("CWE194_Unexpected_Sign_Extension__rand_malloc_18.c":39:26)
#loc50 = loc("CWE194_Unexpected_Sign_Extension__rand_malloc_18.c":40:19)
#loc51 = loc("CWE194_Unexpected_Sign_Extension__rand_malloc_18.c":40:9)
#loc52 = loc("CWE194_Unexpected_Sign_Extension__rand_malloc_18.c":41:9)
#loc53 = loc("CWE194_Unexpected_Sign_Extension__rand_malloc_18.c":41:14)
#loc54 = loc("CWE194_Unexpected_Sign_Extension__rand_malloc_18.c":74:1)
#loc55 = loc("CWE194_Unexpected_Sign_Extension__rand_malloc_18.c":77:1)
#loc56 = loc("CWE194_Unexpected_Sign_Extension__rand_malloc_18.c":76:5)
#loc57 = loc("CWE194_Unexpected_Sign_Extension__rand_malloc_18.c":76:13)
#loc58 = loc("CWE194_Unexpected_Sign_Extension__rand_malloc_18.c":50:1)
#loc59 = loc("CWE194_Unexpected_Sign_Extension__rand_malloc_18.c":72:1)
#loc60 = loc("CWE194_Unexpected_Sign_Extension__rand_malloc_18.c":52:5)
#loc61 = loc("CWE194_Unexpected_Sign_Extension__rand_malloc_18.c":52:11)
#loc62 = loc("CWE194_Unexpected_Sign_Extension__rand_malloc_18.c":54:12)
#loc63 = loc("CWE194_Unexpected_Sign_Extension__rand_malloc_18.c":54:5)
#loc64 = loc("CWE194_Unexpected_Sign_Extension__rand_malloc_18.c":55:5)
#loc65 = loc("CWE194_Unexpected_Sign_Extension__rand_malloc_18.c":55:10)
#loc66 = loc("CWE194_Unexpected_Sign_Extension__rand_malloc_18.c":56:1)
#loc67 = loc("CWE194_Unexpected_Sign_Extension__rand_malloc_18.c":58:12)
#loc68 = loc("CWE194_Unexpected_Sign_Extension__rand_malloc_18.c":58:16)
#loc69 = loc("CWE194_Unexpected_Sign_Extension__rand_malloc_18.c":58:5)
#loc70 = loc("CWE194_Unexpected_Sign_Extension__rand_malloc_18.c":60:5)
#loc71 = loc("CWE194_Unexpected_Sign_Extension__rand_malloc_18.c":71:5)
#loc72 = loc("CWE194_Unexpected_Sign_Extension__rand_malloc_18.c":60:9)
#loc73 = loc("CWE194_Unexpected_Sign_Extension__rand_malloc_18.c":60:16)
#loc74 = loc("CWE194_Unexpected_Sign_Extension__rand_malloc_18.c":61:5)
#loc75 = loc("CWE194_Unexpected_Sign_Extension__rand_malloc_18.c":64:9)
#loc76 = loc("CWE194_Unexpected_Sign_Extension__rand_malloc_18.c":64:48)
#loc77 = loc("CWE194_Unexpected_Sign_Extension__rand_malloc_18.c":64:37)
#loc78 = loc("CWE194_Unexpected_Sign_Extension__rand_malloc_18.c":64:44)
#loc79 = loc("CWE194_Unexpected_Sign_Extension__rand_malloc_18.c":65:9)
#loc80 = loc("CWE194_Unexpected_Sign_Extension__rand_malloc_18.c":65:43)
#loc81 = loc("CWE194_Unexpected_Sign_Extension__rand_malloc_18.c":65:13)
#loc82 = loc("CWE194_Unexpected_Sign_Extension__rand_malloc_18.c":65:27)
#loc83 = loc("CWE194_Unexpected_Sign_Extension__rand_malloc_18.c":65:33)
#loc84 = loc("CWE194_Unexpected_Sign_Extension__rand_malloc_18.c":65:34)
#loc85 = loc("CWE194_Unexpected_Sign_Extension__rand_malloc_18.c":65:40)
#loc86 = loc("CWE194_Unexpected_Sign_Extension__rand_malloc_18.c":65:39)
#loc87 = loc("CWE194_Unexpected_Sign_Extension__rand_malloc_18.c":67:16)
#loc88 = loc("CWE194_Unexpected_Sign_Extension__rand_malloc_18.c":67:28)
#loc89 = loc("CWE194_Unexpected_Sign_Extension__rand_malloc_18.c":67:33)
#loc90 = loc("CWE194_Unexpected_Sign_Extension__rand_malloc_18.c":67:38)
#loc91 = loc("CWE194_Unexpected_Sign_Extension__rand_malloc_18.c":67:9)
#loc92 = loc("CWE194_Unexpected_Sign_Extension__rand_malloc_18.c":67:39)
#loc93 = loc("CWE194_Unexpected_Sign_Extension__rand_malloc_18.c":68:30)
#loc94 = loc("CWE194_Unexpected_Sign_Extension__rand_malloc_18.c":68:9)
#loc95 = loc("CWE194_Unexpected_Sign_Extension__rand_malloc_18.c":68:20)
#loc96 = loc("CWE194_Unexpected_Sign_Extension__rand_malloc_18.c":68:25)
#loc97 = loc("CWE194_Unexpected_Sign_Extension__rand_malloc_18.c":68:26)
#loc98 = loc("CWE194_Unexpected_Sign_Extension__rand_malloc_18.c":69:19)
#loc99 = loc("CWE194_Unexpected_Sign_Extension__rand_malloc_18.c":69:9)
#loc100 = loc("CWE194_Unexpected_Sign_Extension__rand_malloc_18.c":70:9)
#loc101 = loc("CWE194_Unexpected_Sign_Extension__rand_malloc_18.c":70:14)
#loc102 = loc(fused[#loc1, #loc2])
#loc103 = loc(fused[#loc3, #loc4])
#loc104 = loc(fused[#loc5, #loc6])
#loc105 = loc(fused[#loc7, #loc8])
#loc106 = loc(fused[#loc9, #loc10])
#loc107 = loc(fused[#loc11, #loc12])
#loc108 = loc(fused[#loc13, #loc14])
#loc109 = loc(fused[#loc16, #loc15])
#loc110 = loc(fused[#loc17, #loc18])
#loc111 = loc(fused[#loc21, #loc20])
#loc112 = loc(fused[#loc22, #loc23])
#loc113 = loc(fused[#loc24, #loc25])
#loc114 = loc(fused[#loc26, #loc23])
#loc115 = loc(fused[#loc27, #loc28])
#loc116 = loc(fused[#loc29, #loc28])
#loc117 = loc(fused[#loc31, #loc32])
#loc118 = loc(fused[#loc33, #loc34])
#loc119 = loc(fused[#loc35, #loc32])
#loc120 = loc(fused[#loc43, #loc44])
#loc121 = loc(fused[#loc46, #loc45])
#loc122 = loc(fused[#loc54, #loc55])
#loc123 = loc(fused[#loc56, #loc57])
#loc124 = loc(fused[#loc58, #loc59])
#loc125 = loc(fused[#loc60, #loc61])
#loc126 = loc(fused[#loc63, #loc62])
#loc127 = loc(fused[#loc64, #loc65])
#loc128 = loc(fused[#loc69, #loc68])
#loc129 = loc(fused[#loc70, #loc71])
#loc130 = loc(fused[#loc72, #loc73])
#loc131 = loc(fused[#loc74, #loc71])
#loc132 = loc(fused[#loc75, #loc76])
#loc133 = loc(fused[#loc77, #loc76])
#loc134 = loc(fused[#loc79, #loc80])
#loc135 = loc(fused[#loc81, #loc82])
#loc136 = loc(fused[#loc83, #loc80])
#loc137 = loc(fused[#loc91, #loc92])
#loc138 = loc(fused[#loc94, #loc93])
