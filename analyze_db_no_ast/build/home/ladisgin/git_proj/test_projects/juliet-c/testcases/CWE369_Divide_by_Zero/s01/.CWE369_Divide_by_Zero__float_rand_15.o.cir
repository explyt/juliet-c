!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__float_rand_15.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @rand() -> !s32i extra(#fn_attr) loc(#loc185)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc186)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc5)
  cir.func private  @printIntLine(!s32i) loc(#loc187)
  cir.func no_proto  @CWE369_Divide_by_Zero__float_rand_15_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc189)
    %1 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc12)
    cir.store %1, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc190)
    cir.scope {
      %2 = cir.const #cir.int<6> : !s32i loc(#loc16)
      cir.switch (%2 : !s32i) [
      case (equal, 6) {
        %3 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
        %4 = cir.const #cir.int<1> : !s32i loc(#loc17)
        %5 = cir.binop(and, %3, %4) : !s32i loc(#loc17)
        %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc17)
        %7 = cir.ternary(%6, true {
          %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
          %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc17)
          %12 = cir.const #cir.int<30> : !s32i loc(#loc17)
          %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc17)
          %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
          %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc17)
          %16 = cir.const #cir.int<15> : !s32i loc(#loc17)
          %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc17)
          %18 = cir.binop(xor, %13, %17) : !u32i loc(#loc17)
          %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
          %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc17)
          %21 = cir.binop(xor, %18, %20) : !u32i loc(#loc17)
          cir.yield %21 : !u32i loc(#loc17)
        }, false {
          %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
          %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc17)
          %12 = cir.const #cir.int<30> : !s32i loc(#loc17)
          %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc17)
          %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
          %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc17)
          %16 = cir.const #cir.int<15> : !s32i loc(#loc17)
          %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc17)
          %18 = cir.binop(xor, %13, %17) : !u32i loc(#loc17)
          %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
          %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc17)
          %21 = cir.binop(xor, %18, %20) : !u32i loc(#loc17)
          %22 = cir.unary(minus, %21) : !u32i, !u32i loc(#loc17)
          %23 = cir.const #cir.int<1> : !s32i loc(#loc17)
          %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc17)
          %25 = cir.binop(sub, %22, %24) : !u32i loc(#loc17)
          cir.yield %25 : !u32i loc(#loc17)
        }) : (!cir.bool) -> !u32i loc(#loc17)
        %8 = cir.cast(integral, %7 : !u32i), !s32i loc(#loc17)
        %9 = cir.cast(int_to_float, %8 : !s32i), !cir.float loc(#loc17)
        cir.store %9, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc192)
        cir.break loc(#loc19)
      },
      case (default) {
        %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc5)
        %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc5)
        cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc20)
        cir.break loc(#loc21)
      }
      ] loc(#loc14)
    } loc(#loc191)
    cir.scope {
      %2 = cir.const #cir.int<7> : !s32i loc(#loc24)
      cir.switch (%2 : !s32i) [
      case (equal, 7) {
        cir.scope {
          %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc195)
          %4 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc29)
          %5 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc30)
          %6 = cir.cast(floating, %5 : !cir.float), !cir.double loc(#loc30)
          %7 = cir.binop(div, %4, %6) : !cir.double loc(#loc196)
          %8 = cir.cast(float_to_int, %7 : !cir.double), !s32i loc(#loc196)
          cir.store %8, %3 : !s32i, !cir.ptr<!s32i> loc(#loc195)
          %9 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc31)
          cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc32)
        } loc(#loc194)
        cir.break loc(#loc33)
      },
      case (default) {
        %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc34)
        %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc34)
        cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc35)
        cir.break loc(#loc36)
      }
      ] loc(#loc22)
    } loc(#loc193)
    cir.return loc(#loc9)
  } loc(#loc188)
  cir.func no_proto  @CWE369_Divide_by_Zero__float_rand_15_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc198)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc39)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc199)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc41)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc200)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc43)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc201)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc45)
    cir.return loc(#loc38)
  } loc(#loc197)
  cir.global "private"  constant internal dsolocal @".str1" = #cir.const_array<"This would result in a divide by zero\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc47)
  cir.func no_proto internal private  @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc203)
    %1 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc52)
    cir.store %1, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc204)
    cir.scope {
      %2 = cir.const #cir.int<6> : !s32i loc(#loc56)
      cir.switch (%2 : !s32i) [
      case (equal, 6) {
        %3 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc57)
        %4 = cir.const #cir.int<1> : !s32i loc(#loc57)
        %5 = cir.binop(and, %3, %4) : !s32i loc(#loc57)
        %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc57)
        %7 = cir.ternary(%6, true {
          %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc57)
          %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc57)
          %12 = cir.const #cir.int<30> : !s32i loc(#loc57)
          %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc57)
          %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc57)
          %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc57)
          %16 = cir.const #cir.int<15> : !s32i loc(#loc57)
          %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc57)
          %18 = cir.binop(xor, %13, %17) : !u32i loc(#loc57)
          %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc57)
          %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc57)
          %21 = cir.binop(xor, %18, %20) : !u32i loc(#loc57)
          cir.yield %21 : !u32i loc(#loc57)
        }, false {
          %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc57)
          %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc57)
          %12 = cir.const #cir.int<30> : !s32i loc(#loc57)
          %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc57)
          %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc57)
          %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc57)
          %16 = cir.const #cir.int<15> : !s32i loc(#loc57)
          %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc57)
          %18 = cir.binop(xor, %13, %17) : !u32i loc(#loc57)
          %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc57)
          %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc57)
          %21 = cir.binop(xor, %18, %20) : !u32i loc(#loc57)
          %22 = cir.unary(minus, %21) : !u32i, !u32i loc(#loc57)
          %23 = cir.const #cir.int<1> : !s32i loc(#loc57)
          %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc57)
          %25 = cir.binop(sub, %22, %24) : !u32i loc(#loc57)
          cir.yield %25 : !u32i loc(#loc57)
        }) : (!cir.bool) -> !u32i loc(#loc57)
        %8 = cir.cast(integral, %7 : !u32i), !s32i loc(#loc57)
        %9 = cir.cast(int_to_float, %8 : !s32i), !cir.float loc(#loc57)
        cir.store %9, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc206)
        cir.break loc(#loc59)
      },
      case (default) {
        %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc60)
        %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc60)
        cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc61)
        cir.break loc(#loc62)
      }
      ] loc(#loc54)
    } loc(#loc205)
    cir.scope {
      %2 = cir.const #cir.int<8> : !s32i loc(#loc65)
      cir.switch (%2 : !s32i) [
      case (equal, 7) {
        %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc66)
        %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc66)
        cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc67)
        cir.break loc(#loc68)
      },
      case (default) {
        cir.scope {
          %3 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc71)
          %4 = cir.cast(floating, %3 : !cir.float), !cir.double loc(#loc71)
          %5 = cir.fabs %4 : !cir.double loc(#loc71)
          %6 = cir.const #cir.fp<9.9999999999999995E-7> : !cir.double loc(#loc72)
          %7 = cir.cmp(gt, %5, %6) : !cir.double, !s32i loc(#loc209)
          %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc74)
          cir.if %8 {
            %9 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc211)
            %10 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc80)
            %11 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc81)
            %12 = cir.cast(floating, %11 : !cir.float), !cir.double loc(#loc81)
            %13 = cir.binop(div, %10, %12) : !cir.double loc(#loc212)
            %14 = cir.cast(float_to_int, %13 : !cir.double), !s32i loc(#loc212)
            cir.store %14, %9 : !s32i, !cir.ptr<!s32i> loc(#loc211)
            %15 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc82)
            cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc83)
          } else {
            %9 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc47)
            %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc47)
            cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc84)
          } loc(#loc210)
        } loc(#loc208)
        cir.break loc(#loc85)
      }
      ] loc(#loc63)
    } loc(#loc207)
    cir.return loc(#loc49)
  } loc(#loc202)
  cir.func no_proto internal private  @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc214)
    %1 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc90)
    cir.store %1, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc215)
    cir.scope {
      %2 = cir.const #cir.int<6> : !s32i loc(#loc94)
      cir.switch (%2 : !s32i) [
      case (equal, 6) {
        %3 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc95)
        %4 = cir.const #cir.int<1> : !s32i loc(#loc95)
        %5 = cir.binop(and, %3, %4) : !s32i loc(#loc95)
        %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc95)
        %7 = cir.ternary(%6, true {
          %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc95)
          %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc95)
          %12 = cir.const #cir.int<30> : !s32i loc(#loc95)
          %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc95)
          %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc95)
          %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc95)
          %16 = cir.const #cir.int<15> : !s32i loc(#loc95)
          %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc95)
          %18 = cir.binop(xor, %13, %17) : !u32i loc(#loc95)
          %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc95)
          %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc95)
          %21 = cir.binop(xor, %18, %20) : !u32i loc(#loc95)
          cir.yield %21 : !u32i loc(#loc95)
        }, false {
          %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc95)
          %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc95)
          %12 = cir.const #cir.int<30> : !s32i loc(#loc95)
          %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc95)
          %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc95)
          %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc95)
          %16 = cir.const #cir.int<15> : !s32i loc(#loc95)
          %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc95)
          %18 = cir.binop(xor, %13, %17) : !u32i loc(#loc95)
          %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc95)
          %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc95)
          %21 = cir.binop(xor, %18, %20) : !u32i loc(#loc95)
          %22 = cir.unary(minus, %21) : !u32i, !u32i loc(#loc95)
          %23 = cir.const #cir.int<1> : !s32i loc(#loc95)
          %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc95)
          %25 = cir.binop(sub, %22, %24) : !u32i loc(#loc95)
          cir.yield %25 : !u32i loc(#loc95)
        }) : (!cir.bool) -> !u32i loc(#loc95)
        %8 = cir.cast(integral, %7 : !u32i), !s32i loc(#loc95)
        %9 = cir.cast(int_to_float, %8 : !s32i), !cir.float loc(#loc95)
        cir.store %9, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc217)
        cir.break loc(#loc97)
      },
      case (default) {
        %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc98)
        %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc98)
        cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc99)
        cir.break loc(#loc100)
      }
      ] loc(#loc92)
    } loc(#loc216)
    cir.scope {
      %2 = cir.const #cir.int<7> : !s32i loc(#loc103)
      cir.switch (%2 : !s32i) [
      case (equal, 7) {
        cir.scope {
          %3 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc106)
          %4 = cir.cast(floating, %3 : !cir.float), !cir.double loc(#loc106)
          %5 = cir.fabs %4 : !cir.double loc(#loc106)
          %6 = cir.const #cir.fp<9.9999999999999995E-7> : !cir.double loc(#loc107)
          %7 = cir.cmp(gt, %5, %6) : !cir.double, !s32i loc(#loc220)
          %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc109)
          cir.if %8 {
            %9 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc222)
            %10 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc115)
            %11 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc116)
            %12 = cir.cast(floating, %11 : !cir.float), !cir.double loc(#loc116)
            %13 = cir.binop(div, %10, %12) : !cir.double loc(#loc223)
            %14 = cir.cast(float_to_int, %13 : !cir.double), !s32i loc(#loc223)
            cir.store %14, %9 : !s32i, !cir.ptr<!s32i> loc(#loc222)
            %15 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc117)
            cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc118)
          } else {
            %9 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc119)
            %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc119)
            cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc120)
          } loc(#loc221)
        } loc(#loc219)
        cir.break loc(#loc121)
      },
      case (default) {
        %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc122)
        %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc122)
        cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc123)
        cir.break loc(#loc124)
      }
      ] loc(#loc101)
    } loc(#loc218)
    cir.return loc(#loc87)
  } loc(#loc213)
  cir.func no_proto internal private  @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc225)
    %1 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc129)
    cir.store %1, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc226)
    cir.scope {
      %2 = cir.const #cir.int<5> : !s32i loc(#loc133)
      cir.switch (%2 : !s32i) [
      case (equal, 6) {
        %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc134)
        %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc134)
        cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc135)
        cir.break loc(#loc136)
      },
      case (default) {
        %3 = cir.const #cir.fp<2.000000e+00> : !cir.float loc(#loc137)
        cir.store %3, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc228)
        cir.break loc(#loc139)
      }
      ] loc(#loc131)
    } loc(#loc227)
    cir.scope {
      %2 = cir.const #cir.int<7> : !s32i loc(#loc142)
      cir.switch (%2 : !s32i) [
      case (equal, 7) {
        cir.scope {
          %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc231)
          %4 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc147)
          %5 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc148)
          %6 = cir.cast(floating, %5 : !cir.float), !cir.double loc(#loc148)
          %7 = cir.binop(div, %4, %6) : !cir.double loc(#loc232)
          %8 = cir.cast(float_to_int, %7 : !cir.double), !s32i loc(#loc232)
          cir.store %8, %3 : !s32i, !cir.ptr<!s32i> loc(#loc231)
          %9 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc149)
          cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc150)
        } loc(#loc230)
        cir.break loc(#loc151)
      },
      case (default) {
        %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc152)
        %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc152)
        cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc153)
        cir.break loc(#loc154)
      }
      ] loc(#loc140)
    } loc(#loc229)
    cir.return loc(#loc126)
  } loc(#loc224)
  cir.func no_proto internal private  @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc234)
    %1 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc159)
    cir.store %1, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc235)
    cir.scope {
      %2 = cir.const #cir.int<6> : !s32i loc(#loc163)
      cir.switch (%2 : !s32i) [
      case (equal, 6) {
        %3 = cir.const #cir.fp<2.000000e+00> : !cir.float loc(#loc164)
        cir.store %3, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc237)
        cir.break loc(#loc166)
      },
      case (default) {
        %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc167)
        %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc167)
        cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc168)
        cir.break loc(#loc169)
      }
      ] loc(#loc161)
    } loc(#loc236)
    cir.scope {
      %2 = cir.const #cir.int<7> : !s32i loc(#loc172)
      cir.switch (%2 : !s32i) [
      case (equal, 7) {
        cir.scope {
          %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc240)
          %4 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc177)
          %5 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc178)
          %6 = cir.cast(floating, %5 : !cir.float), !cir.double loc(#loc178)
          %7 = cir.binop(div, %4, %6) : !cir.double loc(#loc241)
          %8 = cir.cast(float_to_int, %7 : !cir.double), !s32i loc(#loc241)
          cir.store %8, %3 : !s32i, !cir.ptr<!s32i> loc(#loc240)
          %9 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc179)
          cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc180)
        } loc(#loc239)
        cir.break loc(#loc181)
      },
      case (default) {
        %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc182)
        %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc182)
        cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc183)
        cir.break loc(#loc184)
      }
      ] loc(#loc170)
    } loc(#loc238)
    cir.return loc(#loc156)
  } loc(#loc233)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__float_rand_15.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc5 = loc("CWE369_Divide_by_Zero__float_rand_15.c":37:19)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc8 = loc("CWE369_Divide_by_Zero__float_rand_15.c":24:1)
#loc9 = loc("CWE369_Divide_by_Zero__float_rand_15.c":54:1)
#loc10 = loc("CWE369_Divide_by_Zero__float_rand_15.c":26:5)
#loc11 = loc("CWE369_Divide_by_Zero__float_rand_15.c":26:11)
#loc12 = loc("CWE369_Divide_by_Zero__float_rand_15.c":28:12)
#loc13 = loc("CWE369_Divide_by_Zero__float_rand_15.c":28:5)
#loc14 = loc("CWE369_Divide_by_Zero__float_rand_15.c":29:5)
#loc15 = loc("CWE369_Divide_by_Zero__float_rand_15.c":39:5)
#loc16 = loc("CWE369_Divide_by_Zero__float_rand_15.c":29:12)
#loc17 = loc("CWE369_Divide_by_Zero__float_rand_15.c":33:23)
#loc18 = loc("CWE369_Divide_by_Zero__float_rand_15.c":33:9)
#loc19 = loc("CWE369_Divide_by_Zero__float_rand_15.c":34:9)
#loc20 = loc("CWE369_Divide_by_Zero__float_rand_15.c":37:9)
#loc21 = loc("CWE369_Divide_by_Zero__float_rand_15.c":38:9)
#loc22 = loc("CWE369_Divide_by_Zero__float_rand_15.c":40:5)
#loc23 = loc("CWE369_Divide_by_Zero__float_rand_15.c":53:5)
#loc24 = loc("CWE369_Divide_by_Zero__float_rand_15.c":40:12)
#loc25 = loc("CWE369_Divide_by_Zero__float_rand_15.c":43:5)
#loc26 = loc("CWE369_Divide_by_Zero__float_rand_15.c":47:5)
#loc27 = loc("CWE369_Divide_by_Zero__float_rand_15.c":45:9)
#loc28 = loc("CWE369_Divide_by_Zero__float_rand_15.c":45:40)
#loc29 = loc("CWE369_Divide_by_Zero__float_rand_15.c":45:28)
#loc30 = loc("CWE369_Divide_by_Zero__float_rand_15.c":45:36)
#loc31 = loc("CWE369_Divide_by_Zero__float_rand_15.c":46:22)
#loc32 = loc("CWE369_Divide_by_Zero__float_rand_15.c":46:9)
#loc33 = loc("CWE369_Divide_by_Zero__float_rand_15.c":48:5)
#loc34 = loc("CWE369_Divide_by_Zero__float_rand_15.c":51:19)
#loc35 = loc("CWE369_Divide_by_Zero__float_rand_15.c":51:9)
#loc36 = loc("CWE369_Divide_by_Zero__float_rand_15.c":52:9)
#loc37 = loc("CWE369_Divide_by_Zero__float_rand_15.c":202:1)
#loc38 = loc("CWE369_Divide_by_Zero__float_rand_15.c":208:1)
#loc39 = loc("CWE369_Divide_by_Zero__float_rand_15.c":204:5)
#loc40 = loc("CWE369_Divide_by_Zero__float_rand_15.c":204:14)
#loc41 = loc("CWE369_Divide_by_Zero__float_rand_15.c":205:5)
#loc42 = loc("CWE369_Divide_by_Zero__float_rand_15.c":205:14)
#loc43 = loc("CWE369_Divide_by_Zero__float_rand_15.c":206:5)
#loc44 = loc("CWE369_Divide_by_Zero__float_rand_15.c":206:14)
#loc45 = loc("CWE369_Divide_by_Zero__float_rand_15.c":207:5)
#loc46 = loc("CWE369_Divide_by_Zero__float_rand_15.c":207:14)
#loc47 = loc("CWE369_Divide_by_Zero__float_rand_15.c":92:23)
#loc48 = loc("CWE369_Divide_by_Zero__float_rand_15.c":61:1)
#loc49 = loc("CWE369_Divide_by_Zero__float_rand_15.c":96:1)
#loc50 = loc("CWE369_Divide_by_Zero__float_rand_15.c":63:5)
#loc51 = loc("CWE369_Divide_by_Zero__float_rand_15.c":63:11)
#loc52 = loc("CWE369_Divide_by_Zero__float_rand_15.c":65:12)
#loc53 = loc("CWE369_Divide_by_Zero__float_rand_15.c":65:5)
#loc54 = loc("CWE369_Divide_by_Zero__float_rand_15.c":66:5)
#loc55 = loc("CWE369_Divide_by_Zero__float_rand_15.c":76:5)
#loc56 = loc("CWE369_Divide_by_Zero__float_rand_15.c":66:12)
#loc57 = loc("CWE369_Divide_by_Zero__float_rand_15.c":70:23)
#loc58 = loc("CWE369_Divide_by_Zero__float_rand_15.c":70:9)
#loc59 = loc("CWE369_Divide_by_Zero__float_rand_15.c":71:9)
#loc60 = loc("CWE369_Divide_by_Zero__float_rand_15.c":74:19)
#loc61 = loc("CWE369_Divide_by_Zero__float_rand_15.c":74:9)
#loc62 = loc("CWE369_Divide_by_Zero__float_rand_15.c":75:9)
#loc63 = loc("CWE369_Divide_by_Zero__float_rand_15.c":77:5)
#loc64 = loc("CWE369_Divide_by_Zero__float_rand_15.c":95:5)
#loc65 = loc("CWE369_Divide_by_Zero__float_rand_15.c":77:12)
#loc66 = loc("CWE369_Divide_by_Zero__float_rand_15.c":81:19)
#loc67 = loc("CWE369_Divide_by_Zero__float_rand_15.c":81:9)
#loc68 = loc("CWE369_Divide_by_Zero__float_rand_15.c":82:9)
#loc69 = loc("CWE369_Divide_by_Zero__float_rand_15.c":85:9)
#loc70 = loc("CWE369_Divide_by_Zero__float_rand_15.c":93:9)
#loc71 = loc("CWE369_Divide_by_Zero__float_rand_15.c":85:17)
#loc72 = loc("CWE369_Divide_by_Zero__float_rand_15.c":85:25)
#loc73 = loc("CWE369_Divide_by_Zero__float_rand_15.c":85:12)
#loc74 = loc("CWE369_Divide_by_Zero__float_rand_15.c":85:23)
#loc75 = loc("CWE369_Divide_by_Zero__float_rand_15.c":86:9)
#loc76 = loc("CWE369_Divide_by_Zero__float_rand_15.c":89:9)
#loc77 = loc("CWE369_Divide_by_Zero__float_rand_15.c":91:9)
#loc78 = loc("CWE369_Divide_by_Zero__float_rand_15.c":87:13)
#loc79 = loc("CWE369_Divide_by_Zero__float_rand_15.c":87:44)
#loc80 = loc("CWE369_Divide_by_Zero__float_rand_15.c":87:32)
#loc81 = loc("CWE369_Divide_by_Zero__float_rand_15.c":87:40)
#loc82 = loc("CWE369_Divide_by_Zero__float_rand_15.c":88:26)
#loc83 = loc("CWE369_Divide_by_Zero__float_rand_15.c":88:13)
#loc84 = loc("CWE369_Divide_by_Zero__float_rand_15.c":92:13)
#loc85 = loc("CWE369_Divide_by_Zero__float_rand_15.c":94:9)
#loc86 = loc("CWE369_Divide_by_Zero__float_rand_15.c":99:1)
#loc87 = loc("CWE369_Divide_by_Zero__float_rand_15.c":134:1)
#loc88 = loc("CWE369_Divide_by_Zero__float_rand_15.c":101:5)
#loc89 = loc("CWE369_Divide_by_Zero__float_rand_15.c":101:11)
#loc90 = loc("CWE369_Divide_by_Zero__float_rand_15.c":103:12)
#loc91 = loc("CWE369_Divide_by_Zero__float_rand_15.c":103:5)
#loc92 = loc("CWE369_Divide_by_Zero__float_rand_15.c":104:5)
#loc93 = loc("CWE369_Divide_by_Zero__float_rand_15.c":114:5)
#loc94 = loc("CWE369_Divide_by_Zero__float_rand_15.c":104:12)
#loc95 = loc("CWE369_Divide_by_Zero__float_rand_15.c":108:23)
#loc96 = loc("CWE369_Divide_by_Zero__float_rand_15.c":108:9)
#loc97 = loc("CWE369_Divide_by_Zero__float_rand_15.c":109:9)
#loc98 = loc("CWE369_Divide_by_Zero__float_rand_15.c":112:19)
#loc99 = loc("CWE369_Divide_by_Zero__float_rand_15.c":112:9)
#loc100 = loc("CWE369_Divide_by_Zero__float_rand_15.c":113:9)
#loc101 = loc("CWE369_Divide_by_Zero__float_rand_15.c":115:5)
#loc102 = loc("CWE369_Divide_by_Zero__float_rand_15.c":133:5)
#loc103 = loc("CWE369_Divide_by_Zero__float_rand_15.c":115:12)
#loc104 = loc("CWE369_Divide_by_Zero__float_rand_15.c":119:9)
#loc105 = loc("CWE369_Divide_by_Zero__float_rand_15.c":127:9)
#loc106 = loc("CWE369_Divide_by_Zero__float_rand_15.c":119:17)
#loc107 = loc("CWE369_Divide_by_Zero__float_rand_15.c":119:25)
#loc108 = loc("CWE369_Divide_by_Zero__float_rand_15.c":119:12)
#loc109 = loc("CWE369_Divide_by_Zero__float_rand_15.c":119:23)
#loc110 = loc("CWE369_Divide_by_Zero__float_rand_15.c":120:9)
#loc111 = loc("CWE369_Divide_by_Zero__float_rand_15.c":123:9)
#loc112 = loc("CWE369_Divide_by_Zero__float_rand_15.c":125:9)
#loc113 = loc("CWE369_Divide_by_Zero__float_rand_15.c":121:13)
#loc114 = loc("CWE369_Divide_by_Zero__float_rand_15.c":121:44)
#loc115 = loc("CWE369_Divide_by_Zero__float_rand_15.c":121:32)
#loc116 = loc("CWE369_Divide_by_Zero__float_rand_15.c":121:40)
#loc117 = loc("CWE369_Divide_by_Zero__float_rand_15.c":122:26)
#loc118 = loc("CWE369_Divide_by_Zero__float_rand_15.c":122:13)
#loc119 = loc("CWE369_Divide_by_Zero__float_rand_15.c":126:23)
#loc120 = loc("CWE369_Divide_by_Zero__float_rand_15.c":126:13)
#loc121 = loc("CWE369_Divide_by_Zero__float_rand_15.c":128:9)
#loc122 = loc("CWE369_Divide_by_Zero__float_rand_15.c":131:19)
#loc123 = loc("CWE369_Divide_by_Zero__float_rand_15.c":131:9)
#loc124 = loc("CWE369_Divide_by_Zero__float_rand_15.c":132:9)
#loc125 = loc("CWE369_Divide_by_Zero__float_rand_15.c":137:1)
#loc126 = loc("CWE369_Divide_by_Zero__float_rand_15.c":167:1)
#loc127 = loc("CWE369_Divide_by_Zero__float_rand_15.c":139:5)
#loc128 = loc("CWE369_Divide_by_Zero__float_rand_15.c":139:11)
#loc129 = loc("CWE369_Divide_by_Zero__float_rand_15.c":141:12)
#loc130 = loc("CWE369_Divide_by_Zero__float_rand_15.c":141:5)
#loc131 = loc("CWE369_Divide_by_Zero__float_rand_15.c":142:5)
#loc132 = loc("CWE369_Divide_by_Zero__float_rand_15.c":152:5)
#loc133 = loc("CWE369_Divide_by_Zero__float_rand_15.c":142:12)
#loc134 = loc("CWE369_Divide_by_Zero__float_rand_15.c":146:19)
#loc135 = loc("CWE369_Divide_by_Zero__float_rand_15.c":146:9)
#loc136 = loc("CWE369_Divide_by_Zero__float_rand_15.c":147:9)
#loc137 = loc("CWE369_Divide_by_Zero__float_rand_15.c":150:16)
#loc138 = loc("CWE369_Divide_by_Zero__float_rand_15.c":150:9)
#loc139 = loc("CWE369_Divide_by_Zero__float_rand_15.c":151:9)
#loc140 = loc("CWE369_Divide_by_Zero__float_rand_15.c":153:5)
#loc141 = loc("CWE369_Divide_by_Zero__float_rand_15.c":166:5)
#loc142 = loc("CWE369_Divide_by_Zero__float_rand_15.c":153:12)
#loc143 = loc("CWE369_Divide_by_Zero__float_rand_15.c":156:5)
#loc144 = loc("CWE369_Divide_by_Zero__float_rand_15.c":160:5)
#loc145 = loc("CWE369_Divide_by_Zero__float_rand_15.c":158:9)
#loc146 = loc("CWE369_Divide_by_Zero__float_rand_15.c":158:40)
#loc147 = loc("CWE369_Divide_by_Zero__float_rand_15.c":158:28)
#loc148 = loc("CWE369_Divide_by_Zero__float_rand_15.c":158:36)
#loc149 = loc("CWE369_Divide_by_Zero__float_rand_15.c":159:22)
#loc150 = loc("CWE369_Divide_by_Zero__float_rand_15.c":159:9)
#loc151 = loc("CWE369_Divide_by_Zero__float_rand_15.c":161:5)
#loc152 = loc("CWE369_Divide_by_Zero__float_rand_15.c":164:19)
#loc153 = loc("CWE369_Divide_by_Zero__float_rand_15.c":164:9)
#loc154 = loc("CWE369_Divide_by_Zero__float_rand_15.c":165:9)
#loc155 = loc("CWE369_Divide_by_Zero__float_rand_15.c":170:1)
#loc156 = loc("CWE369_Divide_by_Zero__float_rand_15.c":200:1)
#loc157 = loc("CWE369_Divide_by_Zero__float_rand_15.c":172:5)
#loc158 = loc("CWE369_Divide_by_Zero__float_rand_15.c":172:11)
#loc159 = loc("CWE369_Divide_by_Zero__float_rand_15.c":174:12)
#loc160 = loc("CWE369_Divide_by_Zero__float_rand_15.c":174:5)
#loc161 = loc("CWE369_Divide_by_Zero__float_rand_15.c":175:5)
#loc162 = loc("CWE369_Divide_by_Zero__float_rand_15.c":185:5)
#loc163 = loc("CWE369_Divide_by_Zero__float_rand_15.c":175:12)
#loc164 = loc("CWE369_Divide_by_Zero__float_rand_15.c":179:16)
#loc165 = loc("CWE369_Divide_by_Zero__float_rand_15.c":179:9)
#loc166 = loc("CWE369_Divide_by_Zero__float_rand_15.c":180:9)
#loc167 = loc("CWE369_Divide_by_Zero__float_rand_15.c":183:19)
#loc168 = loc("CWE369_Divide_by_Zero__float_rand_15.c":183:9)
#loc169 = loc("CWE369_Divide_by_Zero__float_rand_15.c":184:9)
#loc170 = loc("CWE369_Divide_by_Zero__float_rand_15.c":186:5)
#loc171 = loc("CWE369_Divide_by_Zero__float_rand_15.c":199:5)
#loc172 = loc("CWE369_Divide_by_Zero__float_rand_15.c":186:12)
#loc173 = loc("CWE369_Divide_by_Zero__float_rand_15.c":189:5)
#loc174 = loc("CWE369_Divide_by_Zero__float_rand_15.c":193:5)
#loc175 = loc("CWE369_Divide_by_Zero__float_rand_15.c":191:9)
#loc176 = loc("CWE369_Divide_by_Zero__float_rand_15.c":191:40)
#loc177 = loc("CWE369_Divide_by_Zero__float_rand_15.c":191:28)
#loc178 = loc("CWE369_Divide_by_Zero__float_rand_15.c":191:36)
#loc179 = loc("CWE369_Divide_by_Zero__float_rand_15.c":192:22)
#loc180 = loc("CWE369_Divide_by_Zero__float_rand_15.c":192:9)
#loc181 = loc("CWE369_Divide_by_Zero__float_rand_15.c":194:5)
#loc182 = loc("CWE369_Divide_by_Zero__float_rand_15.c":197:19)
#loc183 = loc("CWE369_Divide_by_Zero__float_rand_15.c":197:9)
#loc184 = loc("CWE369_Divide_by_Zero__float_rand_15.c":198:9)
#loc185 = loc(fused[#loc1, #loc2])
#loc186 = loc(fused[#loc3, #loc4])
#loc187 = loc(fused[#loc6, #loc7])
#loc188 = loc(fused[#loc8, #loc9])
#loc189 = loc(fused[#loc10, #loc11])
#loc190 = loc(fused[#loc13, #loc12])
#loc191 = loc(fused[#loc14, #loc15])
#loc192 = loc(fused[#loc18, #loc17])
#loc193 = loc(fused[#loc22, #loc23])
#loc194 = loc(fused[#loc25, #loc26])
#loc195 = loc(fused[#loc27, #loc28])
#loc196 = loc(fused[#loc29, #loc30])
#loc197 = loc(fused[#loc37, #loc38])
#loc198 = loc(fused[#loc39, #loc40])
#loc199 = loc(fused[#loc41, #loc42])
#loc200 = loc(fused[#loc43, #loc44])
#loc201 = loc(fused[#loc45, #loc46])
#loc202 = loc(fused[#loc48, #loc49])
#loc203 = loc(fused[#loc50, #loc51])
#loc204 = loc(fused[#loc53, #loc52])
#loc205 = loc(fused[#loc54, #loc55])
#loc206 = loc(fused[#loc58, #loc57])
#loc207 = loc(fused[#loc63, #loc64])
#loc208 = loc(fused[#loc69, #loc70])
#loc209 = loc(fused[#loc73, #loc72])
#loc210 = loc(fused[#loc75, #loc76, #loc77, #loc70])
#loc211 = loc(fused[#loc78, #loc79])
#loc212 = loc(fused[#loc80, #loc81])
#loc213 = loc(fused[#loc86, #loc87])
#loc214 = loc(fused[#loc88, #loc89])
#loc215 = loc(fused[#loc91, #loc90])
#loc216 = loc(fused[#loc92, #loc93])
#loc217 = loc(fused[#loc96, #loc95])
#loc218 = loc(fused[#loc101, #loc102])
#loc219 = loc(fused[#loc104, #loc105])
#loc220 = loc(fused[#loc108, #loc107])
#loc221 = loc(fused[#loc110, #loc111, #loc112, #loc105])
#loc222 = loc(fused[#loc113, #loc114])
#loc223 = loc(fused[#loc115, #loc116])
#loc224 = loc(fused[#loc125, #loc126])
#loc225 = loc(fused[#loc127, #loc128])
#loc226 = loc(fused[#loc130, #loc129])
#loc227 = loc(fused[#loc131, #loc132])
#loc228 = loc(fused[#loc138, #loc137])
#loc229 = loc(fused[#loc140, #loc141])
#loc230 = loc(fused[#loc143, #loc144])
#loc231 = loc(fused[#loc145, #loc146])
#loc232 = loc(fused[#loc147, #loc148])
#loc233 = loc(fused[#loc155, #loc156])
#loc234 = loc(fused[#loc157, #loc158])
#loc235 = loc(fused[#loc160, #loc159])
#loc236 = loc(fused[#loc161, #loc162])
#loc237 = loc(fused[#loc165, #loc164])
#loc238 = loc(fused[#loc170, #loc171])
#loc239 = loc(fused[#loc173, #loc174])
#loc240 = loc(fused[#loc175, #loc176])
#loc241 = loc(fused[#loc177, #loc178])
