!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#true = #cir.bool<true> : !cir.bool
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @printIntLine(!s32i) loc(#loc278)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc279)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"ERROR: Array index is negative.\00" : !cir.array<!s8i x 32>> : !cir.array<!s8i x 32> {alignment = 1 : i64} loc(#loc5)
  cir.func no_proto  @CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc281)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc10)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc11)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc282)
    cir.scope {
      %3 = cir.const #cir.int<1> : !s32i loc(#loc15)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc15)
      cir.if %4 {
        %5 = cir.const #cir.int<10> : !s32i loc(#loc17)
        cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc285)
      } loc(#loc284)
    } loc(#loc283)
    cir.scope {
      %3 = cir.const #cir.int<1> : !s32i loc(#loc21)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc21)
      cir.if %4 {
        cir.scope {
          %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc289)
          %6 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc290)
          %7 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc290)
          cir.store %7, %6 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc290)
          cir.scope {
            %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc31)
            %9 = cir.const #cir.int<0> : !s32i loc(#loc32)
            %10 = cir.cmp(ge, %8, %9) : !s32i, !s32i loc(#loc292)
            %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc33)
            cir.if %11 {
              %12 = cir.const #cir.int<1> : !s32i loc(#loc37)
              %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc38)
              %14 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc39)
              %15 = cir.ptr_stride(%14 : !cir.ptr<!s32i>, %13 : !s32i), !cir.ptr<!s32i> loc(#loc39)
              cir.store %12, %15 : !s32i, !cir.ptr<!s32i> loc(#loc294)
              cir.scope {
                %16 = cir.const #cir.int<0> : !s32i loc(#loc42)
                cir.store %16, %5 : !s32i, !cir.ptr<!s32i> loc(#loc296)
                cir.for : cond {
                  %17 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc44)
                  %18 = cir.const #cir.int<10> : !s32i loc(#loc45)
                  %19 = cir.cmp(lt, %17, %18) : !s32i, !s32i loc(#loc297)
                  %20 = cir.cast(int_to_bool, %19 : !s32i), !cir.bool loc(#loc46)
                  cir.condition(%20) loc(#loc46)
                } body {
                  cir.scope {
                    %17 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc48)
                    %18 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc49)
                    %19 = cir.ptr_stride(%18 : !cir.ptr<!s32i>, %17 : !s32i), !cir.ptr<!s32i> loc(#loc49)
                    %20 = cir.load %19 : !cir.ptr<!s32i>, !s32i loc(#loc49)
                    cir.call @printIntLine(%20) : (!s32i) -> () loc(#loc50)
                  } loc(#loc298)
                  cir.yield loc(#loc41)
                } step {
                  %17 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc51)
                  %18 = cir.unary(inc, %17) : !s32i, !s32i loc(#loc52)
                  cir.store %18, %5 : !s32i, !cir.ptr<!s32i> loc(#loc299)
                  cir.yield loc(#loc295)
                } loc(#loc295)
              } loc(#loc295)
            } else {
              %12 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc5)
              %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc5)
              cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc53)
            } loc(#loc293)
          } loc(#loc291)
        } loc(#loc288)
      } loc(#loc287)
    } loc(#loc286)
    cir.return loc(#loc7)
  } loc(#loc280)
  cir.func no_proto  @CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc301)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc56)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc302)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc58)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc303)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc60)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc304)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc62)
    cir.return loc(#loc55)
  } loc(#loc300)
  cir.global "private"  constant internal dsolocal @".str1" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc64)
  cir.global "private"  constant internal dsolocal @".str2" = #cir.const_array<"ERROR: Array index is out-of-bounds\00" : !cir.array<!s8i x 36>> : !cir.array<!s8i x 36> {alignment = 1 : i64} loc(#loc65)
  cir.func no_proto internal private  @goodB2G1() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc306)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc70)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc71)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc307)
    cir.scope {
      %3 = cir.const #cir.int<1> : !s32i loc(#loc75)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc75)
      cir.if %4 {
        %5 = cir.const #cir.int<10> : !s32i loc(#loc77)
        cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc310)
      } loc(#loc309)
    } loc(#loc308)
    cir.scope {
      %3 = cir.const #cir.int<0> : !s32i loc(#loc81)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc81)
      cir.if %4 {
        %5 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc64)
        %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc64)
        cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc85)
      } else {
        cir.scope {
          %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc314)
          %6 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc315)
          %7 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc315)
          cir.store %7, %6 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc315)
          cir.scope {
            %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc94)
            %9 = cir.const #cir.int<0> : !s32i loc(#loc95)
            %10 = cir.cmp(ge, %8, %9) : !s32i, !s32i loc(#loc317)
            %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc96)
            %12 = cir.ternary(%11, true {
              %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc98)
              %14 = cir.const #cir.int<10> : !s32i loc(#loc99)
              %15 = cir.cmp(lt, %13, %14) : !s32i, !s32i loc(#loc318)
              %16 = cir.cast(int_to_bool, %15 : !s32i), !cir.bool loc(#loc101)
              %17 = cir.ternary(%16, true {
                %18 = cir.const #true loc(#loc97)
                cir.yield %18 : !cir.bool loc(#loc97)
              }, false {
                %18 = cir.const #false loc(#loc97)
                cir.yield %18 : !cir.bool loc(#loc97)
              }) : (!cir.bool) -> !cir.bool loc(#loc97)
              cir.yield %17 : !cir.bool loc(#loc97)
            }, false {
              %13 = cir.const #false loc(#loc97)
              cir.yield %13 : !cir.bool loc(#loc97)
            }) : (!cir.bool) -> !cir.bool loc(#loc97)
            cir.if %12 {
              %13 = cir.const #cir.int<1> : !s32i loc(#loc105)
              %14 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc106)
              %15 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc107)
              %16 = cir.ptr_stride(%15 : !cir.ptr<!s32i>, %14 : !s32i), !cir.ptr<!s32i> loc(#loc107)
              cir.store %13, %16 : !s32i, !cir.ptr<!s32i> loc(#loc320)
              cir.scope {
                %17 = cir.const #cir.int<0> : !s32i loc(#loc110)
                cir.store %17, %5 : !s32i, !cir.ptr<!s32i> loc(#loc322)
                cir.for : cond {
                  %18 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc112)
                  %19 = cir.const #cir.int<10> : !s32i loc(#loc113)
                  %20 = cir.cmp(lt, %18, %19) : !s32i, !s32i loc(#loc323)
                  %21 = cir.cast(int_to_bool, %20 : !s32i), !cir.bool loc(#loc114)
                  cir.condition(%21) loc(#loc114)
                } body {
                  cir.scope {
                    %18 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc116)
                    %19 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc117)
                    %20 = cir.ptr_stride(%19 : !cir.ptr<!s32i>, %18 : !s32i), !cir.ptr<!s32i> loc(#loc117)
                    %21 = cir.load %20 : !cir.ptr<!s32i>, !s32i loc(#loc117)
                    cir.call @printIntLine(%21) : (!s32i) -> () loc(#loc118)
                  } loc(#loc324)
                  cir.yield loc(#loc109)
                } step {
                  %18 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc119)
                  %19 = cir.unary(inc, %18) : !s32i, !s32i loc(#loc120)
                  cir.store %19, %5 : !s32i, !cir.ptr<!s32i> loc(#loc325)
                  cir.yield loc(#loc321)
                } loc(#loc321)
              } loc(#loc321)
            } else {
              %13 = cir.get_global @".str2" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc65)
              %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc65)
              cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc121)
            } loc(#loc319)
          } loc(#loc316)
        } loc(#loc313)
      } loc(#loc312)
    } loc(#loc311)
    cir.return loc(#loc67)
  } loc(#loc305)
  cir.func no_proto internal private  @goodB2G2() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc327)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc126)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc127)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc328)
    cir.scope {
      %3 = cir.const #cir.int<1> : !s32i loc(#loc131)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc131)
      cir.if %4 {
        %5 = cir.const #cir.int<10> : !s32i loc(#loc133)
        cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc331)
      } loc(#loc330)
    } loc(#loc329)
    cir.scope {
      %3 = cir.const #cir.int<1> : !s32i loc(#loc137)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc137)
      cir.if %4 {
        cir.scope {
          %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc335)
          %6 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc336)
          %7 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc336)
          cir.store %7, %6 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc336)
          cir.scope {
            %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc147)
            %9 = cir.const #cir.int<0> : !s32i loc(#loc148)
            %10 = cir.cmp(ge, %8, %9) : !s32i, !s32i loc(#loc338)
            %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc149)
            %12 = cir.ternary(%11, true {
              %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc151)
              %14 = cir.const #cir.int<10> : !s32i loc(#loc152)
              %15 = cir.cmp(lt, %13, %14) : !s32i, !s32i loc(#loc339)
              %16 = cir.cast(int_to_bool, %15 : !s32i), !cir.bool loc(#loc154)
              %17 = cir.ternary(%16, true {
                %18 = cir.const #true loc(#loc150)
                cir.yield %18 : !cir.bool loc(#loc150)
              }, false {
                %18 = cir.const #false loc(#loc150)
                cir.yield %18 : !cir.bool loc(#loc150)
              }) : (!cir.bool) -> !cir.bool loc(#loc150)
              cir.yield %17 : !cir.bool loc(#loc150)
            }, false {
              %13 = cir.const #false loc(#loc150)
              cir.yield %13 : !cir.bool loc(#loc150)
            }) : (!cir.bool) -> !cir.bool loc(#loc150)
            cir.if %12 {
              %13 = cir.const #cir.int<1> : !s32i loc(#loc158)
              %14 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc159)
              %15 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc160)
              %16 = cir.ptr_stride(%15 : !cir.ptr<!s32i>, %14 : !s32i), !cir.ptr<!s32i> loc(#loc160)
              cir.store %13, %16 : !s32i, !cir.ptr<!s32i> loc(#loc341)
              cir.scope {
                %17 = cir.const #cir.int<0> : !s32i loc(#loc163)
                cir.store %17, %5 : !s32i, !cir.ptr<!s32i> loc(#loc343)
                cir.for : cond {
                  %18 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc165)
                  %19 = cir.const #cir.int<10> : !s32i loc(#loc166)
                  %20 = cir.cmp(lt, %18, %19) : !s32i, !s32i loc(#loc344)
                  %21 = cir.cast(int_to_bool, %20 : !s32i), !cir.bool loc(#loc167)
                  cir.condition(%21) loc(#loc167)
                } body {
                  cir.scope {
                    %18 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc169)
                    %19 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc170)
                    %20 = cir.ptr_stride(%19 : !cir.ptr<!s32i>, %18 : !s32i), !cir.ptr<!s32i> loc(#loc170)
                    %21 = cir.load %20 : !cir.ptr<!s32i>, !s32i loc(#loc170)
                    cir.call @printIntLine(%21) : (!s32i) -> () loc(#loc171)
                  } loc(#loc345)
                  cir.yield loc(#loc162)
                } step {
                  %18 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc172)
                  %19 = cir.unary(inc, %18) : !s32i, !s32i loc(#loc173)
                  cir.store %19, %5 : !s32i, !cir.ptr<!s32i> loc(#loc346)
                  cir.yield loc(#loc342)
                } loc(#loc342)
              } loc(#loc342)
            } else {
              %13 = cir.get_global @".str2" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc174)
              %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc174)
              cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc175)
            } loc(#loc340)
          } loc(#loc337)
        } loc(#loc334)
      } loc(#loc333)
    } loc(#loc332)
    cir.return loc(#loc123)
  } loc(#loc326)
  cir.func no_proto internal private  @goodG2B1() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc348)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc180)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc181)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc349)
    cir.scope {
      %3 = cir.const #cir.int<0> : !s32i loc(#loc185)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc185)
      cir.if %4 {
        %5 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc189)
        %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc189)
        cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc190)
      } else {
        %5 = cir.const #cir.int<7> : !s32i loc(#loc191)
        cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc352)
      } loc(#loc351)
    } loc(#loc350)
    cir.scope {
      %3 = cir.const #cir.int<1> : !s32i loc(#loc195)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc195)
      cir.if %4 {
        cir.scope {
          %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc356)
          %6 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc357)
          %7 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc357)
          cir.store %7, %6 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc357)
          cir.scope {
            %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc205)
            %9 = cir.const #cir.int<0> : !s32i loc(#loc206)
            %10 = cir.cmp(ge, %8, %9) : !s32i, !s32i loc(#loc359)
            %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc207)
            cir.if %11 {
              %12 = cir.const #cir.int<1> : !s32i loc(#loc211)
              %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc212)
              %14 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc213)
              %15 = cir.ptr_stride(%14 : !cir.ptr<!s32i>, %13 : !s32i), !cir.ptr<!s32i> loc(#loc213)
              cir.store %12, %15 : !s32i, !cir.ptr<!s32i> loc(#loc361)
              cir.scope {
                %16 = cir.const #cir.int<0> : !s32i loc(#loc216)
                cir.store %16, %5 : !s32i, !cir.ptr<!s32i> loc(#loc363)
                cir.for : cond {
                  %17 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc218)
                  %18 = cir.const #cir.int<10> : !s32i loc(#loc219)
                  %19 = cir.cmp(lt, %17, %18) : !s32i, !s32i loc(#loc364)
                  %20 = cir.cast(int_to_bool, %19 : !s32i), !cir.bool loc(#loc220)
                  cir.condition(%20) loc(#loc220)
                } body {
                  cir.scope {
                    %17 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc222)
                    %18 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc223)
                    %19 = cir.ptr_stride(%18 : !cir.ptr<!s32i>, %17 : !s32i), !cir.ptr<!s32i> loc(#loc223)
                    %20 = cir.load %19 : !cir.ptr<!s32i>, !s32i loc(#loc223)
                    cir.call @printIntLine(%20) : (!s32i) -> () loc(#loc224)
                  } loc(#loc365)
                  cir.yield loc(#loc215)
                } step {
                  %17 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc225)
                  %18 = cir.unary(inc, %17) : !s32i, !s32i loc(#loc226)
                  cir.store %18, %5 : !s32i, !cir.ptr<!s32i> loc(#loc366)
                  cir.yield loc(#loc362)
                } loc(#loc362)
              } loc(#loc362)
            } else {
              %12 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc227)
              %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc227)
              cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc228)
            } loc(#loc360)
          } loc(#loc358)
        } loc(#loc355)
      } loc(#loc354)
    } loc(#loc353)
    cir.return loc(#loc177)
  } loc(#loc347)
  cir.func no_proto internal private  @goodG2B2() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc368)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc233)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc234)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc369)
    cir.scope {
      %3 = cir.const #cir.int<1> : !s32i loc(#loc238)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc238)
      cir.if %4 {
        %5 = cir.const #cir.int<7> : !s32i loc(#loc240)
        cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc372)
      } loc(#loc371)
    } loc(#loc370)
    cir.scope {
      %3 = cir.const #cir.int<1> : !s32i loc(#loc244)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc244)
      cir.if %4 {
        cir.scope {
          %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc376)
          %6 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc377)
          %7 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc377)
          cir.store %7, %6 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc377)
          cir.scope {
            %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc254)
            %9 = cir.const #cir.int<0> : !s32i loc(#loc255)
            %10 = cir.cmp(ge, %8, %9) : !s32i, !s32i loc(#loc379)
            %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc256)
            cir.if %11 {
              %12 = cir.const #cir.int<1> : !s32i loc(#loc260)
              %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc261)
              %14 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc262)
              %15 = cir.ptr_stride(%14 : !cir.ptr<!s32i>, %13 : !s32i), !cir.ptr<!s32i> loc(#loc262)
              cir.store %12, %15 : !s32i, !cir.ptr<!s32i> loc(#loc381)
              cir.scope {
                %16 = cir.const #cir.int<0> : !s32i loc(#loc265)
                cir.store %16, %5 : !s32i, !cir.ptr<!s32i> loc(#loc383)
                cir.for : cond {
                  %17 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc267)
                  %18 = cir.const #cir.int<10> : !s32i loc(#loc268)
                  %19 = cir.cmp(lt, %17, %18) : !s32i, !s32i loc(#loc384)
                  %20 = cir.cast(int_to_bool, %19 : !s32i), !cir.bool loc(#loc269)
                  cir.condition(%20) loc(#loc269)
                } body {
                  cir.scope {
                    %17 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc271)
                    %18 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc272)
                    %19 = cir.ptr_stride(%18 : !cir.ptr<!s32i>, %17 : !s32i), !cir.ptr<!s32i> loc(#loc272)
                    %20 = cir.load %19 : !cir.ptr<!s32i>, !s32i loc(#loc272)
                    cir.call @printIntLine(%20) : (!s32i) -> () loc(#loc273)
                  } loc(#loc385)
                  cir.yield loc(#loc264)
                } step {
                  %17 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc274)
                  %18 = cir.unary(inc, %17) : !s32i, !s32i loc(#loc275)
                  cir.store %18, %5 : !s32i, !cir.ptr<!s32i> loc(#loc386)
                  cir.yield loc(#loc382)
                } loc(#loc382)
              } loc(#loc382)
            } else {
              %12 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc276)
              %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc276)
              cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc277)
            } loc(#loc380)
          } loc(#loc378)
        } loc(#loc375)
      } loc(#loc374)
    } loc(#loc373)
    cir.return loc(#loc230)
  } loc(#loc367)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc5 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":50:27)
#loc6 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":22:1)
#loc7 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":54:1)
#loc8 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":24:5)
#loc9 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":24:9)
#loc10 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":26:13)
#loc11 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":26:12)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":26:5)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":27:5)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":31:5)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":27:8)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":28:5)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":30:16)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":30:9)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":32:5)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":53:5)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":32:8)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":33:5)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":34:9)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":52:9)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":35:13)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":35:17)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":36:13)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":36:34)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":39:13)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":51:13)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":39:17)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":39:25)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":39:22)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":40:13)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":47:13)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":49:13)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":41:32)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":41:24)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":41:17)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":43:17)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":46:17)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":43:25)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":43:21)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":43:28)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":43:32)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":43:30)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":44:17)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":45:41)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":45:34)
#loc50 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":45:21)
#loc51 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":43:37)
#loc52 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":43:36)
#loc53 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":50:17)
#loc54 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":210:1)
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":216:1)
#loc56 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":212:5)
#loc57 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":212:14)
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":213:5)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":213:14)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":214:5)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":214:14)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":215:5)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":215:14)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":74:19)
#loc65 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":93:27)
#loc66 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":61:1)
#loc67 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":97:1)
#loc68 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":63:5)
#loc69 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":63:9)
#loc70 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":65:13)
#loc71 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":65:12)
#loc72 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":65:5)
#loc73 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":66:5)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":70:5)
#loc75 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":66:8)
#loc76 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":67:5)
#loc77 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":69:16)
#loc78 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":69:9)
#loc79 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":71:5)
#loc80 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":96:5)
#loc81 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":71:8)
#loc82 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":72:5)
#loc83 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":75:5)
#loc84 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":77:5)
#loc85 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":74:9)
#loc86 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":78:9)
#loc87 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":95:9)
#loc88 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":79:13)
#loc89 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":79:17)
#loc90 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":80:13)
#loc91 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":80:34)
#loc92 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":82:13)
#loc93 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":94:13)
#loc94 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":82:17)
#loc95 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":82:25)
#loc96 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":82:22)
#loc97 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":82:27)
#loc98 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":82:30)
#loc99 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":82:38)
#loc100 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":82:40)
#loc101 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":82:35)
#loc102 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":83:13)
#loc103 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":90:13)
#loc104 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":92:13)
#loc105 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":84:32)
#loc106 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":84:24)
#loc107 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":84:17)
#loc108 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":86:17)
#loc109 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":89:17)
#loc110 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":86:25)
#loc111 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":86:21)
#loc112 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":86:28)
#loc113 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":86:32)
#loc114 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":86:30)
#loc115 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":87:17)
#loc116 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":88:41)
#loc117 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":88:34)
#loc118 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":88:21)
#loc119 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":86:37)
#loc120 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":86:36)
#loc121 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":93:17)
#loc122 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":100:1)
#loc123 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":131:1)
#loc124 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":102:5)
#loc125 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":102:9)
#loc126 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":104:13)
#loc127 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":104:12)
#loc128 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":104:5)
#loc129 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":105:5)
#loc130 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":109:5)
#loc131 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":105:8)
#loc132 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":106:5)
#loc133 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":108:16)
#loc134 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":108:9)
#loc135 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":110:5)
#loc136 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":130:5)
#loc137 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":110:8)
#loc138 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":111:5)
#loc139 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":112:9)
#loc140 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":129:9)
#loc141 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":113:13)
#loc142 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":113:17)
#loc143 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":114:13)
#loc144 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":114:34)
#loc145 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":116:13)
#loc146 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":128:13)
#loc147 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":116:17)
#loc148 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":116:25)
#loc149 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":116:22)
#loc150 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":116:27)
#loc151 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":116:30)
#loc152 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":116:38)
#loc153 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":116:40)
#loc154 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":116:35)
#loc155 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":117:13)
#loc156 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":124:13)
#loc157 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":126:13)
#loc158 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":118:32)
#loc159 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":118:24)
#loc160 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":118:17)
#loc161 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":120:17)
#loc162 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":123:17)
#loc163 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":120:25)
#loc164 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":120:21)
#loc165 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":120:28)
#loc166 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":120:32)
#loc167 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":120:30)
#loc168 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":121:17)
#loc169 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":122:41)
#loc170 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":122:34)
#loc171 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":122:21)
#loc172 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":120:37)
#loc173 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":120:36)
#loc174 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":127:27)
#loc175 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":127:17)
#loc176 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":134:1)
#loc177 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":172:1)
#loc178 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":136:5)
#loc179 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":136:9)
#loc180 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":138:13)
#loc181 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":138:12)
#loc182 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":138:5)
#loc183 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":139:5)
#loc184 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":149:5)
#loc185 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":139:8)
#loc186 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":140:5)
#loc187 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":143:5)
#loc188 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":145:5)
#loc189 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":142:19)
#loc190 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":142:9)
#loc191 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":148:16)
#loc192 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":148:9)
#loc193 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":150:5)
#loc194 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":171:5)
#loc195 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":150:8)
#loc196 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":151:5)
#loc197 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":152:9)
#loc198 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":170:9)
#loc199 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":153:13)
#loc200 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":153:17)
#loc201 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":154:13)
#loc202 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":154:34)
#loc203 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":157:13)
#loc204 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":169:13)
#loc205 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":157:17)
#loc206 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":157:25)
#loc207 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":157:22)
#loc208 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":158:13)
#loc209 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":165:13)
#loc210 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":167:13)
#loc211 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":159:32)
#loc212 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":159:24)
#loc213 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":159:17)
#loc214 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":161:17)
#loc215 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":164:17)
#loc216 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":161:25)
#loc217 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":161:21)
#loc218 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":161:28)
#loc219 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":161:32)
#loc220 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":161:30)
#loc221 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":162:17)
#loc222 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":163:41)
#loc223 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":163:34)
#loc224 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":163:21)
#loc225 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":161:37)
#loc226 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":161:36)
#loc227 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":168:27)
#loc228 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":168:17)
#loc229 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":175:1)
#loc230 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":208:1)
#loc231 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":177:5)
#loc232 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":177:9)
#loc233 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":179:13)
#loc234 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":179:12)
#loc235 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":179:5)
#loc236 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":180:5)
#loc237 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":185:5)
#loc238 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":180:8)
#loc239 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":181:5)
#loc240 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":184:16)
#loc241 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":184:9)
#loc242 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":186:5)
#loc243 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":207:5)
#loc244 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":186:8)
#loc245 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":187:5)
#loc246 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":188:9)
#loc247 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":206:9)
#loc248 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":189:13)
#loc249 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":189:17)
#loc250 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":190:13)
#loc251 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":190:34)
#loc252 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":193:13)
#loc253 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":205:13)
#loc254 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":193:17)
#loc255 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":193:25)
#loc256 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":193:22)
#loc257 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":194:13)
#loc258 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":201:13)
#loc259 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":203:13)
#loc260 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":195:32)
#loc261 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":195:24)
#loc262 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":195:17)
#loc263 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":197:17)
#loc264 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":200:17)
#loc265 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":197:25)
#loc266 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":197:21)
#loc267 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":197:28)
#loc268 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":197:32)
#loc269 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":197:30)
#loc270 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":198:17)
#loc271 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":199:41)
#loc272 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":199:34)
#loc273 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":199:21)
#loc274 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":197:37)
#loc275 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":197:36)
#loc276 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":204:27)
#loc277 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c":204:17)
#loc278 = loc(fused[#loc1, #loc2])
#loc279 = loc(fused[#loc3, #loc4])
#loc280 = loc(fused[#loc6, #loc7])
#loc281 = loc(fused[#loc8, #loc9])
#loc282 = loc(fused[#loc12, #loc10])
#loc283 = loc(fused[#loc13, #loc14])
#loc284 = loc(fused[#loc16, #loc14])
#loc285 = loc(fused[#loc18, #loc17])
#loc286 = loc(fused[#loc19, #loc20])
#loc287 = loc(fused[#loc22, #loc20])
#loc288 = loc(fused[#loc23, #loc24])
#loc289 = loc(fused[#loc25, #loc26])
#loc290 = loc(fused[#loc27, #loc28])
#loc291 = loc(fused[#loc29, #loc30])
#loc292 = loc(fused[#loc31, #loc32])
#loc293 = loc(fused[#loc34, #loc35, #loc36, #loc30])
#loc294 = loc(fused[#loc39, #loc37])
#loc295 = loc(fused[#loc40, #loc41])
#loc296 = loc(fused[#loc43, #loc42])
#loc297 = loc(fused[#loc44, #loc45])
#loc298 = loc(fused[#loc47, #loc41])
#loc299 = loc(fused[#loc52, #loc51])
#loc300 = loc(fused[#loc54, #loc55])
#loc301 = loc(fused[#loc56, #loc57])
#loc302 = loc(fused[#loc58, #loc59])
#loc303 = loc(fused[#loc60, #loc61])
#loc304 = loc(fused[#loc62, #loc63])
#loc305 = loc(fused[#loc66, #loc67])
#loc306 = loc(fused[#loc68, #loc69])
#loc307 = loc(fused[#loc72, #loc70])
#loc308 = loc(fused[#loc73, #loc74])
#loc309 = loc(fused[#loc76, #loc74])
#loc310 = loc(fused[#loc78, #loc77])
#loc311 = loc(fused[#loc79, #loc80])
#loc312 = loc(fused[#loc82, #loc83, #loc84, #loc80])
#loc313 = loc(fused[#loc86, #loc87])
#loc314 = loc(fused[#loc88, #loc89])
#loc315 = loc(fused[#loc90, #loc91])
#loc316 = loc(fused[#loc92, #loc93])
#loc317 = loc(fused[#loc94, #loc95])
#loc318 = loc(fused[#loc98, #loc100])
#loc319 = loc(fused[#loc102, #loc103, #loc104, #loc93])
#loc320 = loc(fused[#loc107, #loc105])
#loc321 = loc(fused[#loc108, #loc109])
#loc322 = loc(fused[#loc111, #loc110])
#loc323 = loc(fused[#loc112, #loc113])
#loc324 = loc(fused[#loc115, #loc109])
#loc325 = loc(fused[#loc120, #loc119])
#loc326 = loc(fused[#loc122, #loc123])
#loc327 = loc(fused[#loc124, #loc125])
#loc328 = loc(fused[#loc128, #loc126])
#loc329 = loc(fused[#loc129, #loc130])
#loc330 = loc(fused[#loc132, #loc130])
#loc331 = loc(fused[#loc134, #loc133])
#loc332 = loc(fused[#loc135, #loc136])
#loc333 = loc(fused[#loc138, #loc136])
#loc334 = loc(fused[#loc139, #loc140])
#loc335 = loc(fused[#loc141, #loc142])
#loc336 = loc(fused[#loc143, #loc144])
#loc337 = loc(fused[#loc145, #loc146])
#loc338 = loc(fused[#loc147, #loc148])
#loc339 = loc(fused[#loc151, #loc153])
#loc340 = loc(fused[#loc155, #loc156, #loc157, #loc146])
#loc341 = loc(fused[#loc160, #loc158])
#loc342 = loc(fused[#loc161, #loc162])
#loc343 = loc(fused[#loc164, #loc163])
#loc344 = loc(fused[#loc165, #loc166])
#loc345 = loc(fused[#loc168, #loc162])
#loc346 = loc(fused[#loc173, #loc172])
#loc347 = loc(fused[#loc176, #loc177])
#loc348 = loc(fused[#loc178, #loc179])
#loc349 = loc(fused[#loc182, #loc180])
#loc350 = loc(fused[#loc183, #loc184])
#loc351 = loc(fused[#loc186, #loc187, #loc188, #loc184])
#loc352 = loc(fused[#loc192, #loc191])
#loc353 = loc(fused[#loc193, #loc194])
#loc354 = loc(fused[#loc196, #loc194])
#loc355 = loc(fused[#loc197, #loc198])
#loc356 = loc(fused[#loc199, #loc200])
#loc357 = loc(fused[#loc201, #loc202])
#loc358 = loc(fused[#loc203, #loc204])
#loc359 = loc(fused[#loc205, #loc206])
#loc360 = loc(fused[#loc208, #loc209, #loc210, #loc204])
#loc361 = loc(fused[#loc213, #loc211])
#loc362 = loc(fused[#loc214, #loc215])
#loc363 = loc(fused[#loc217, #loc216])
#loc364 = loc(fused[#loc218, #loc219])
#loc365 = loc(fused[#loc221, #loc215])
#loc366 = loc(fused[#loc226, #loc225])
#loc367 = loc(fused[#loc229, #loc230])
#loc368 = loc(fused[#loc231, #loc232])
#loc369 = loc(fused[#loc235, #loc233])
#loc370 = loc(fused[#loc236, #loc237])
#loc371 = loc(fused[#loc239, #loc237])
#loc372 = loc(fused[#loc241, #loc240])
#loc373 = loc(fused[#loc242, #loc243])
#loc374 = loc(fused[#loc245, #loc243])
#loc375 = loc(fused[#loc246, #loc247])
#loc376 = loc(fused[#loc248, #loc249])
#loc377 = loc(fused[#loc250, #loc251])
#loc378 = loc(fused[#loc252, #loc253])
#loc379 = loc(fused[#loc254, #loc255])
#loc380 = loc(fused[#loc257, #loc258, #loc259, #loc253])
#loc381 = loc(fused[#loc262, #loc260])
#loc382 = loc(fused[#loc263, #loc264])
#loc383 = loc(fused[#loc266, #loc265])
#loc384 = loc(fused[#loc267, #loc268])
#loc385 = loc(fused[#loc270, #loc264])
#loc386 = loc(fused[#loc275, #loc274])
