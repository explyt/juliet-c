!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
!ty_CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_343A3AunionType = !cir.record<union "CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34::unionType" {!s32i, !s32i}>
module @"/workspaces/juliet-c/testcases/CWE680_Integer_Overflow_to_Buffer_Overflow/CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, "dlti.endianness" = "little", "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc114)
  cir.func private @_Znam(!u64i) -> !cir.ptr<!void> loc(#loc115)
  cir.func private @printIntLine(!s32i) loc(#loc116)
  cir.func @_ZN55CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_343badEv() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc118)
    %1 = cir.alloca !ty_CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_343A3AunionType, !cir.ptr<!ty_CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_343A3AunionType>, ["myUnion"] {alignment = 4 : i64} loc(#loc119)
    %2 = cir.const #cir.int<1> : !s32i loc(#loc13)
    %3 = cir.unary(minus, %2) nsw : !s32i, !s32i loc(#loc14)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc120)
    %4 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc16)
    %5 = cir.const #cir.int<1> : !s32i loc(#loc16)
    %6 = cir.binop(and, %4, %5) : !s32i loc(#loc16)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc16)
    %8 = cir.ternary(%7, true {
      %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc16)
      %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc16)
      %14 = cir.const #cir.int<30> : !s32i loc(#loc16)
      %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc16)
      %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc16)
      %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc16)
      %18 = cir.const #cir.int<15> : !s32i loc(#loc16)
      %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc16)
      %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc16)
      %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc16)
      %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc16)
      %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc16)
      cir.yield %23 : !u32i loc(#loc16)
    }, false {
      %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc16)
      %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc16)
      %14 = cir.const #cir.int<30> : !s32i loc(#loc16)
      %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc16)
      %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc16)
      %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc16)
      %18 = cir.const #cir.int<15> : !s32i loc(#loc16)
      %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc16)
      %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc16)
      %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc16)
      %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc16)
      %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc16)
      %24 = cir.unary(minus, %23) : !u32i, !u32i loc(#loc16)
      %25 = cir.const #cir.int<1> : !s32i loc(#loc16)
      %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc16)
      %27 = cir.binop(sub, %24, %26) : !u32i loc(#loc16)
      cir.yield %27 : !u32i loc(#loc16)
    }) : (!cir.bool) -> !u32i loc(#loc16)
    %9 = cir.cast(integral, %8 : !u32i), !s32i loc(#loc16)
    cir.store %9, %0 : !s32i, !cir.ptr<!s32i> loc(#loc121)
    %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc18)
    %11 = cir.get_member %1[0] {name = "unionFirst"} : !cir.ptr<!ty_CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_343A3AunionType> -> !cir.ptr<!s32i> loc(#loc19)
    cir.store %10, %11 : !s32i, !cir.ptr<!s32i> loc(#loc122)
    cir.scope {
      %12 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc124)
      %13 = cir.get_member %1[1] {name = "unionSecond"} : !cir.ptr<!ty_CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_343A3AunionType> -> !cir.ptr<!s32i> loc(#loc25)
      %14 = cir.load %13 : !cir.ptr<!s32i>, !s32i loc(#loc24)
      cir.store %14, %12 : !s32i, !cir.ptr<!s32i> loc(#loc124)
      cir.scope {
        %15 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataBytes"] {alignment = 8 : i64} loc(#loc126)
        %16 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc127)
        %17 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["intPointer"] {alignment = 8 : i64} loc(#loc128)
        %18 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc33)
        %19 = cir.cast(integral, %18 : !s32i), !u64i loc(#loc33)
        %20 = cir.const #cir.int<4> : !u64i loc(#loc129)
        %21 = cir.binop(mul, %19, %20) : !u64i loc(#loc130)
        cir.store %21, %15 : !u64i, !cir.ptr<!u64i> loc(#loc131)
        %22 = cir.load %15 : !cir.ptr<!u64i>, !u64i loc(#loc37)
        %23 = cir.call @_Znam(%22) : (!u64i) -> !cir.ptr<!void> loc(#loc38)
        %24 = cir.cast(bitcast, %23 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc132)
        %25 = cir.cast(bitcast, %24 : !cir.ptr<!s8i>), !cir.ptr<!s32i> loc(#loc132)
        cir.store %25, %17 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc133)
        cir.scope {
          %31 = cir.const #cir.int<0> : !s32i loc(#loc44)
          %32 = cir.cast(integral, %31 : !s32i), !u64i loc(#loc44)
          cir.store %32, %16 : !u64i, !cir.ptr<!u64i> loc(#loc135)
          cir.for : cond {
            %33 = cir.load %16 : !cir.ptr<!u64i>, !u64i loc(#loc46)
            %34 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc47)
            %35 = cir.cast(integral, %34 : !s32i), !u64i loc(#loc47)
            %36 = cir.cmp(lt, %33, %35) : !u64i, !cir.bool loc(#loc136)
            cir.condition(%36) loc(#loc136)
          } body {
            cir.scope {
              %33 = cir.const #cir.int<0> : !s32i loc(#loc49)
              %34 = cir.load %17 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc50)
              %35 = cir.load %16 : !cir.ptr<!u64i>, !u64i loc(#loc51)
              %36 = cir.ptr_stride(%34 : !cir.ptr<!s32i>, %35 : !u64i), !cir.ptr<!s32i> loc(#loc52)
              cir.store %33, %36 : !s32i, !cir.ptr<!s32i> loc(#loc138)
            } loc(#loc137)
            cir.yield loc(#loc43)
          } step {
            %33 = cir.load %16 : !cir.ptr<!u64i>, !u64i loc(#loc53)
            %34 = cir.unary(inc, %33) : !u64i, !u64i loc(#loc54)
            cir.store %34, %16 : !u64i, !cir.ptr<!u64i> loc(#loc139)
            cir.yield loc(#loc134)
          } loc(#loc134)
        } loc(#loc134)
        %26 = cir.load %17 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc55)
        %27 = cir.const #cir.int<0> : !s32i loc(#loc56)
        %28 = cir.ptr_stride(%26 : !cir.ptr<!s32i>, %27 : !s32i), !cir.ptr<!s32i> loc(#loc57)
        %29 = cir.load %28 : !cir.ptr<!s32i>, !s32i loc(#loc55)
        cir.call @printIntLine(%29) : (!s32i) -> () loc(#loc58)
        %30 = cir.load %17 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc59)
        cir.delete.array %30 : <!s32i> loc(#loc59)
      } loc(#loc125)
    } loc(#loc123)
    cir.return loc(#loc8)
  } loc(#loc117)
  cir.func internal private @_ZN55CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34L7goodG2BEv() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc141)
    %1 = cir.alloca !ty_CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_343A3AunionType, !cir.ptr<!ty_CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_343A3AunionType>, ["myUnion"] {alignment = 4 : i64} loc(#loc142)
    %2 = cir.const #cir.int<1> : !s32i loc(#loc66)
    %3 = cir.unary(minus, %2) nsw : !s32i, !s32i loc(#loc67)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc143)
    %4 = cir.const #cir.int<20> : !s32i loc(#loc69)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc144)
    %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc71)
    %6 = cir.get_member %1[0] {name = "unionFirst"} : !cir.ptr<!ty_CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_343A3AunionType> -> !cir.ptr<!s32i> loc(#loc19)
    cir.store %5, %6 : !s32i, !cir.ptr<!s32i> loc(#loc145)
    cir.scope {
      %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc147)
      %8 = cir.get_member %1[1] {name = "unionSecond"} : !cir.ptr<!ty_CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_343A3AunionType> -> !cir.ptr<!s32i> loc(#loc25)
      %9 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc76)
      cir.store %9, %7 : !s32i, !cir.ptr<!s32i> loc(#loc147)
      cir.scope {
        %10 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataBytes"] {alignment = 8 : i64} loc(#loc149)
        %11 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc150)
        %12 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["intPointer"] {alignment = 8 : i64} loc(#loc151)
        %13 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc84)
        %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc84)
        %15 = cir.const #cir.int<4> : !u64i loc(#loc152)
        %16 = cir.binop(mul, %14, %15) : !u64i loc(#loc153)
        cir.store %16, %10 : !u64i, !cir.ptr<!u64i> loc(#loc154)
        %17 = cir.load %10 : !cir.ptr<!u64i>, !u64i loc(#loc88)
        %18 = cir.call @_Znam(%17) : (!u64i) -> !cir.ptr<!void> loc(#loc89)
        %19 = cir.cast(bitcast, %18 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc155)
        %20 = cir.cast(bitcast, %19 : !cir.ptr<!s8i>), !cir.ptr<!s32i> loc(#loc155)
        cir.store %20, %12 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc156)
        cir.scope {
          %26 = cir.const #cir.int<0> : !s32i loc(#loc95)
          %27 = cir.cast(integral, %26 : !s32i), !u64i loc(#loc95)
          cir.store %27, %11 : !u64i, !cir.ptr<!u64i> loc(#loc158)
          cir.for : cond {
            %28 = cir.load %11 : !cir.ptr<!u64i>, !u64i loc(#loc97)
            %29 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc98)
            %30 = cir.cast(integral, %29 : !s32i), !u64i loc(#loc98)
            %31 = cir.cmp(lt, %28, %30) : !u64i, !cir.bool loc(#loc159)
            cir.condition(%31) loc(#loc159)
          } body {
            cir.scope {
              %28 = cir.const #cir.int<0> : !s32i loc(#loc100)
              %29 = cir.load %12 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc101)
              %30 = cir.load %11 : !cir.ptr<!u64i>, !u64i loc(#loc102)
              %31 = cir.ptr_stride(%29 : !cir.ptr<!s32i>, %30 : !u64i), !cir.ptr<!s32i> loc(#loc103)
              cir.store %28, %31 : !s32i, !cir.ptr<!s32i> loc(#loc161)
            } loc(#loc160)
            cir.yield loc(#loc94)
          } step {
            %28 = cir.load %11 : !cir.ptr<!u64i>, !u64i loc(#loc104)
            %29 = cir.unary(inc, %28) : !u64i, !u64i loc(#loc105)
            cir.store %29, %11 : !u64i, !cir.ptr<!u64i> loc(#loc162)
            cir.yield loc(#loc157)
          } loc(#loc157)
        } loc(#loc157)
        %21 = cir.load %12 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc106)
        %22 = cir.const #cir.int<0> : !s32i loc(#loc107)
        %23 = cir.ptr_stride(%21 : !cir.ptr<!s32i>, %22 : !s32i), !cir.ptr<!s32i> loc(#loc108)
        %24 = cir.load %23 : !cir.ptr<!s32i>, !s32i loc(#loc106)
        cir.call @printIntLine(%24) : (!s32i) -> () loc(#loc109)
        %25 = cir.load %12 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc110)
        cir.delete.array %25 : <!s32i> loc(#loc110)
      } loc(#loc148)
    } loc(#loc146)
    cir.return loc(#loc61)
  } loc(#loc140)
  cir.func @_ZN55CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_344goodEv() extra(#fn_attr1) {
    cir.call @_ZN55CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34L7goodG2BEv() : () -> () loc(#loc113)
    cir.return loc(#loc112)
  } loc(#loc163)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE680_Integer_Overflow_to_Buffer_Overflow/CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/new":128:20)
#loc4 = loc("/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/new":129:41)
#loc5 = loc("../../testcasesupport/std_testcase_io.h":18:1)
#loc6 = loc("../../testcasesupport/std_testcase_io.h":18:33)
#loc7 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":30:1)
#loc8 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":55:1)
#loc9 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":32:5)
#loc10 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":32:9)
#loc11 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":33:5)
#loc12 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":33:15)
#loc13 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":35:13)
#loc14 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":35:12)
#loc15 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":35:5)
#loc16 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":37:12)
#loc17 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":37:5)
#loc18 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":38:26)
#loc19 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":24:9)
#loc20 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":38:5)
#loc21 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":39:5)
#loc22 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":54:5)
#loc23 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":40:9)
#loc24 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":40:28)
#loc25 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":25:9)
#loc26 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":41:9)
#loc27 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":53:9)
#loc28 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":42:13)
#loc29 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":42:20)
#loc30 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":42:30)
#loc31 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":43:13)
#loc32 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":43:18)
#loc33 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":45:25)
#loc34 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":45:32)
#loc35 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":45:42)
#loc36 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":45:13)
#loc37 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":46:41)
#loc38 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":30:6)
#loc39 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":46:32)
#loc40 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":46:50)
#loc41 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":46:13)
#loc42 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":47:13)
#loc43 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":50:13)
#loc44 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":47:22)
#loc45 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":47:18)
#loc46 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":47:25)
#loc47 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":47:37)
#loc48 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":48:13)
#loc49 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":49:33)
#loc50 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":49:17)
#loc51 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":49:28)
#loc52 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":49:29)
#loc53 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":47:44)
#loc54 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":47:43)
#loc55 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":51:26)
#loc56 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":51:37)
#loc57 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":51:38)
#loc58 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":51:13)
#loc59 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":52:23)
#loc60 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":62:1)
#loc61 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":87:1)
#loc62 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":64:5)
#loc63 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":64:9)
#loc64 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":65:5)
#loc65 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":65:15)
#loc66 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":67:13)
#loc67 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":67:12)
#loc68 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":67:5)
#loc69 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":69:12)
#loc70 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":69:5)
#loc71 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":70:26)
#loc72 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":70:5)
#loc73 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":71:5)
#loc74 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":86:5)
#loc75 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":72:9)
#loc76 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":72:28)
#loc77 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":73:9)
#loc78 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":85:9)
#loc79 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":74:13)
#loc80 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":74:20)
#loc81 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":74:30)
#loc82 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":75:13)
#loc83 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":75:18)
#loc84 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":77:25)
#loc85 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":77:32)
#loc86 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":77:42)
#loc87 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":77:13)
#loc88 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":78:41)
#loc89 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":62:13)
#loc90 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":78:32)
#loc91 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":78:50)
#loc92 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":78:13)
#loc93 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":79:13)
#loc94 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":82:13)
#loc95 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":79:22)
#loc96 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":79:18)
#loc97 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":79:25)
#loc98 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":79:37)
#loc99 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":80:13)
#loc100 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":81:33)
#loc101 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":81:17)
#loc102 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":81:28)
#loc103 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":81:29)
#loc104 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":79:44)
#loc105 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":79:43)
#loc106 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":83:26)
#loc107 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":83:37)
#loc108 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":83:38)
#loc109 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":83:13)
#loc110 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":84:23)
#loc111 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":89:1)
#loc112 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":92:1)
#loc113 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_34.cpp":91:5)
#loc114 = loc(fused[#loc1, #loc2])
#loc115 = loc(fused[#loc3, #loc4])
#loc116 = loc(fused[#loc5, #loc6])
#loc117 = loc(fused[#loc7, #loc8])
#loc118 = loc(fused[#loc9, #loc10])
#loc119 = loc(fused[#loc11, #loc12])
#loc120 = loc(fused[#loc15, #loc13])
#loc121 = loc(fused[#loc17, #loc16])
#loc122 = loc(fused[#loc20, #loc18])
#loc123 = loc(fused[#loc21, #loc22])
#loc124 = loc(fused[#loc23, #loc24])
#loc125 = loc(fused[#loc26, #loc27])
#loc126 = loc(fused[#loc28, #loc29])
#loc127 = loc(fused[#loc28, #loc30])
#loc128 = loc(fused[#loc31, #loc32])
#loc129 = loc(fused[#loc34, #loc35])
#loc130 = loc(fused[#loc33, #loc35])
#loc131 = loc(fused[#loc36, #loc35])
#loc132 = loc(fused[#loc39, #loc40])
#loc133 = loc(fused[#loc41, #loc40])
#loc134 = loc(fused[#loc42, #loc43])
#loc135 = loc(fused[#loc45, #loc44])
#loc136 = loc(fused[#loc46, #loc47])
#loc137 = loc(fused[#loc48, #loc43])
#loc138 = loc(fused[#loc50, #loc49])
#loc139 = loc(fused[#loc54, #loc53])
#loc140 = loc(fused[#loc60, #loc61])
#loc141 = loc(fused[#loc62, #loc63])
#loc142 = loc(fused[#loc64, #loc65])
#loc143 = loc(fused[#loc68, #loc66])
#loc144 = loc(fused[#loc70, #loc69])
#loc145 = loc(fused[#loc72, #loc71])
#loc146 = loc(fused[#loc73, #loc74])
#loc147 = loc(fused[#loc75, #loc76])
#loc148 = loc(fused[#loc77, #loc78])
#loc149 = loc(fused[#loc79, #loc80])
#loc150 = loc(fused[#loc79, #loc81])
#loc151 = loc(fused[#loc82, #loc83])
#loc152 = loc(fused[#loc85, #loc86])
#loc153 = loc(fused[#loc84, #loc86])
#loc154 = loc(fused[#loc87, #loc86])
#loc155 = loc(fused[#loc90, #loc91])
#loc156 = loc(fused[#loc92, #loc91])
#loc157 = loc(fused[#loc93, #loc94])
#loc158 = loc(fused[#loc96, #loc95])
#loc159 = loc(fused[#loc97, #loc98])
#loc160 = loc(fused[#loc99, #loc94])
#loc161 = loc(fused[#loc101, #loc100])
#loc162 = loc(fused[#loc105, #loc104])
#loc163 = loc(fused[#loc111, #loc112])
