!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
!ty_in_addr = !cir.record<struct "in_addr" {!u32i} #cir.record.decl.ast>
!ty_sockaddr = !cir.record<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.record<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/workspaces/juliet-c/testcases/CWE510_Trapdoor/CWE510_Trapdoor__ip_based_logic_18.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f16 = dense<16> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e", "dlti.endianness" = "little">} {
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc265)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc266)
  cir.func private @bind(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc267)
  cir.func private @listen(!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc268)
  cir.func private @accept(!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc269)
  cir.func private @getsockname(!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i extra(#fn_attr) loc(#loc270)
  cir.func private @strcmp(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc271)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"192.168.30.123\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc15)
  cir.func private @inet_ntoa(!ty_in_addr) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc272)
  cir.func private @send(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc273)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Welcome, admin!\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc20)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Welcome!\00" : !cir.array<!s8i x 9>> : !cir.array<!s8i x 9> {alignment = 1 : i64} loc(#loc21)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc274)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Send failed!\00" : !cir.array<!s8i x 13>> : !cir.array<!s8i x 13> {alignment = 1 : i64} loc(#loc24)
  cir.func private @close(!s32i) -> !s32i loc(#loc275)
  cir.func no_proto @CWE510_Trapdoor__ip_based_logic_18_bad() extra(#fn_attr1) {
    %0 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc277)
    %1 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["acceptService"] {alignment = 4 : i64} loc(#loc278)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptServiceLen", init] {alignment = 4 : i64} loc(#loc279)
    %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc280)
    %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc281)
    cir.br ^bb1 loc(#loc282)
  ^bb1:  // pred: ^bb0
    %5 = cir.const #cir.int<16> : !u64i loc(#loc283)
    %6 = cir.cast(integral, %5 : !u64i), !s32i loc(#loc283)
    cir.store %6, %2 : !s32i, !cir.ptr<!s32i> loc(#loc279)
    %7 = cir.const #cir.int<1> : !s32i loc(#loc35)
    %8 = cir.unary(minus, %7) nsw : !s32i, !s32i loc(#loc35)
    cir.store %8, %3 : !s32i, !cir.ptr<!s32i> loc(#loc280)
    %9 = cir.const #cir.int<1> : !s32i loc(#loc37)
    %10 = cir.unary(minus, %9) nsw : !s32i, !s32i loc(#loc37)
    cir.store %10, %4 : !s32i, !cir.ptr<!s32i> loc(#loc281)
    cir.br ^bb2 loc(#loc284)
  ^bb2:  // pred: ^bb1
    cir.br ^bb4 loc(#loc284)
  ^bb3:  // pred: ^bb39
    %11 = cir.const #cir.int<0> : !s32i loc(#loc43)
    %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc43)
    cir.brcond %12 ^bb4, ^bb40 loc(#loc43)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc285)
  ^bb5:  // pred: ^bb4
    %13 = cir.const #cir.int<2> : !s32i loc(#loc46)
    %14 = cir.const #cir.int<1> : !s32i loc(#loc47)
    %15 = cir.const #cir.int<6> : !s32i loc(#loc48)
    %16 = cir.call @socket(%13, %14, %15) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc49)
    cir.store %16, %3 : !s32i, !cir.ptr<!s32i> loc(#loc286)
    cir.br ^bb6 loc(#loc287)
  ^bb6:  // pred: ^bb5
    %17 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc54)
    %18 = cir.const #cir.int<1> : !s32i loc(#loc55)
    %19 = cir.unary(minus, %18) nsw : !s32i, !s32i loc(#loc55)
    %20 = cir.cmp(eq, %17, %19) : !s32i, !cir.bool loc(#loc288)
    cir.brcond %20 ^bb7, ^bb8 loc(#loc289)
  ^bb7:  // pred: ^bb6
    cir.br ^bb40 loc(#loc57)
  ^bb8:  // pred: ^bb6
    cir.br ^bb9 loc(#loc53)
  ^bb9:  // pred: ^bb8
    %21 = cir.cast(bitcast, %0 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc290)
    %22 = cir.const #cir.int<0> : !s32i loc(#loc60)
    %23 = cir.const #cir.int<16> : !u64i loc(#loc291)
    cir.libc.memset %23 bytes from %21 set to %22 : !cir.ptr<!void>, !s32i, !u64i loc(#loc292)
    %24 = cir.const #cir.int<2> : !s32i loc(#loc65)
    %25 = cir.cast(integral, %24 : !s32i), !u16i loc(#loc65)
    %26 = cir.get_member %0[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc66)
    cir.store %25, %26 : !u16i, !cir.ptr<!u16i> loc(#loc293)
    %27 = cir.const #cir.int<0> : !s32i loc(#loc68)
    %28 = cir.cast(integral, %27 : !s32i), !u32i loc(#loc68)
    %29 = cir.get_member %0[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc69)
    %30 = cir.get_member %29[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc70)
    cir.store %28, %30 : !u32i, !cir.ptr<!u32i> loc(#loc294)
    %31 = cir.const #cir.int<20000> : !s32i loc(#loc72)
    %32 = cir.cast(integral, %31 : !s32i), !u16i loc(#loc72)
    %33 = cir.call @htons(%32) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc73)
    %34 = cir.get_member %0[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc74)
    cir.store %33, %34 : !u16i, !cir.ptr<!u16i> loc(#loc295)
    cir.br ^bb10 loc(#loc296)
  ^bb10:  // pred: ^bb9
    %35 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc79)
    %36 = cir.cast(bitcast, %0 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc297)
    %37 = cir.const #cir.int<16> : !u64i loc(#loc298)
    %38 = cir.cast(integral, %37 : !u64i), !u32i loc(#loc298)
    %39 = cir.call @bind(%35, %36, %38) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc84)
    %40 = cir.const #cir.int<1> : !s32i loc(#loc85)
    %41 = cir.unary(minus, %40) nsw : !s32i, !s32i loc(#loc85)
    %42 = cir.cmp(eq, %39, %41) : !s32i, !cir.bool loc(#loc299)
    cir.brcond %42 ^bb11, ^bb12 loc(#loc300)
  ^bb11:  // pred: ^bb10
    cir.br ^bb40 loc(#loc87)
  ^bb12:  // pred: ^bb10
    cir.br ^bb13 loc(#loc78)
  ^bb13:  // pred: ^bb12
    cir.br ^bb14 loc(#loc301)
  ^bb14:  // pred: ^bb13
    %43 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc90)
    %44 = cir.const #cir.int<5> : !s32i loc(#loc91)
    %45 = cir.call @listen(%43, %44) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc92)
    %46 = cir.const #cir.int<1> : !s32i loc(#loc93)
    %47 = cir.unary(minus, %46) nsw : !s32i, !s32i loc(#loc93)
    %48 = cir.cmp(eq, %45, %47) : !s32i, !cir.bool loc(#loc302)
    cir.brcond %48 ^bb15, ^bb16 loc(#loc303)
  ^bb15:  // pred: ^bb14
    cir.br ^bb40 loc(#loc95)
  ^bb16:  // pred: ^bb14
    cir.br ^bb17 loc(#loc89)
  ^bb17:  // pred: ^bb16
    %49 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc96)
    %50 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc97)
    %51 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc98)
    %52 = cir.call @accept(%49, %50, %51) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc99)
    cir.store %52, %4 : !s32i, !cir.ptr<!s32i> loc(#loc304)
    cir.br ^bb18 loc(#loc305)
  ^bb18:  // pred: ^bb17
    %53 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc104)
    %54 = cir.const #cir.int<1> : !s32i loc(#loc105)
    %55 = cir.unary(minus, %54) nsw : !s32i, !s32i loc(#loc105)
    %56 = cir.cmp(eq, %53, %55) : !s32i, !cir.bool loc(#loc306)
    cir.brcond %56 ^bb19, ^bb20 loc(#loc307)
  ^bb19:  // pred: ^bb18
    cir.br ^bb40 loc(#loc107)
  ^bb20:  // pred: ^bb18
    cir.br ^bb21 loc(#loc103)
  ^bb21:  // pred: ^bb20
    cir.br ^bb22 loc(#loc308)
  ^bb22:  // pred: ^bb21
    %57 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc110)
    %58 = cir.cast(bitcast, %1 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc309)
    %59 = cir.cast(bitcast, %2 : !cir.ptr<!s32i>), !cir.ptr<!u32i> loc(#loc310)
    %60 = cir.call @getsockname(%57, %58, %59) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i extra(#fn_attr) loc(#loc115)
    %61 = cir.const #cir.int<1> : !s32i loc(#loc116)
    %62 = cir.unary(minus, %61) nsw : !s32i, !s32i loc(#loc117)
    %63 = cir.cmp(eq, %60, %62) : !s32i, !cir.bool loc(#loc311)
    cir.brcond %63 ^bb23, ^bb24 loc(#loc312)
  ^bb23:  // pred: ^bb22
    cir.br ^bb40 loc(#loc119)
  ^bb24:  // pred: ^bb22
    cir.br ^bb25 loc(#loc109)
  ^bb25:  // pred: ^bb24
    cir.br ^bb26 loc(#loc313)
  ^bb26:  // pred: ^bb25
    %64 = cir.get_global @strcmp : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i>> loc(#loc122)
    %65 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc15)
    %66 = cir.cast(array_to_ptrdecay, %65 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc15)
    %67 = cir.get_member %1[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc69)
    %68 = cir.load %67 : !cir.ptr<!ty_in_addr>, !ty_in_addr loc(#loc123)
    %69 = cir.call @inet_ntoa(%68) : (!ty_in_addr) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc123)
    %70 = cir.call @strcmp(%66, %69) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc122)
    %71 = cir.const #cir.int<0> : !s32i loc(#loc124)
    %72 = cir.cmp(eq, %70, %71) : !s32i, !cir.bool loc(#loc314)
    cir.brcond %72 ^bb27, ^bb32 loc(#loc315)
  ^bb27:  // pred: ^bb26
    cir.br ^bb28 loc(#loc316)
  ^bb28:  // pred: ^bb27
    %73 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc130)
    %74 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc20)
    %75 = cir.cast(array_to_ptrdecay, %74 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc20)
    %76 = cir.cast(bitcast, %75 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc20)
    %77 = cir.const #cir.int<15> : !u64i loc(#loc317)
    %78 = cir.const #cir.int<0> : !s32i loc(#loc133)
    %79 = cir.call @send(%73, %76, %77, %78) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc134)
    %80 = cir.const #cir.int<1> : !s32i loc(#loc135)
    %81 = cir.unary(minus, %80) nsw : !s32i, !s32i loc(#loc135)
    %82 = cir.cast(integral, %81 : !s32i), !s64i loc(#loc135)
    %83 = cir.cmp(eq, %79, %82) : !s64i, !cir.bool loc(#loc318)
    cir.brcond %83 ^bb29, ^bb30 loc(#loc319)
  ^bb29:  // pred: ^bb28
    cir.br ^bb40 loc(#loc137)
  ^bb30:  // pred: ^bb28
    cir.br ^bb31 loc(#loc129)
  ^bb31:  // pred: ^bb30
    cir.br ^bb37 loc(#loc126)
  ^bb32:  // pred: ^bb26
    cir.br ^bb33 loc(#loc320)
  ^bb33:  // pred: ^bb32
    %84 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc140)
    %85 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc21)
    %86 = cir.cast(array_to_ptrdecay, %85 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc21)
    %87 = cir.cast(bitcast, %86 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc21)
    %88 = cir.const #cir.int<8> : !u64i loc(#loc321)
    %89 = cir.const #cir.int<0> : !s32i loc(#loc143)
    %90 = cir.call @send(%84, %87, %88, %89) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc144)
    %91 = cir.const #cir.int<1> : !s32i loc(#loc145)
    %92 = cir.unary(minus, %91) nsw : !s32i, !s32i loc(#loc145)
    %93 = cir.cast(integral, %92 : !s32i), !s64i loc(#loc145)
    %94 = cir.cmp(eq, %90, %93) : !s64i, !cir.bool loc(#loc322)
    cir.brcond %94 ^bb34, ^bb35 loc(#loc323)
  ^bb34:  // pred: ^bb33
    %95 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 13>> loc(#loc24)
    %96 = cir.cast(array_to_ptrdecay, %95 : !cir.ptr<!cir.array<!s8i x 13>>), !cir.ptr<!s8i> loc(#loc24)
    cir.call @printLine(%96) : (!cir.ptr<!s8i>) -> () loc(#loc147)
    cir.br ^bb35 loc(#loc139)
  ^bb35:  // 2 preds: ^bb33, ^bb34
    cir.br ^bb36 loc(#loc139)
  ^bb36:  // pred: ^bb35
    cir.br ^bb37 loc(#loc121)
  ^bb37:  // 2 preds: ^bb31, ^bb36
    cir.br ^bb38 loc(#loc121)
  ^bb38:  // pred: ^bb37
    cir.br ^bb39 loc(#loc45)
  ^bb39:  // pred: ^bb38
    cir.br ^bb3 loc(#loc42)
  ^bb40:  // 7 preds: ^bb3, ^bb7, ^bb11, ^bb15, ^bb19, ^bb23, ^bb29
    cir.br ^bb41 loc(#loc42)
  ^bb41:  // pred: ^bb40
    cir.br ^bb42 loc(#loc324)
  ^bb42:  // pred: ^bb41
    %97 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc150)
    %98 = cir.const #cir.int<1> : !s32i loc(#loc151)
    %99 = cir.unary(minus, %98) nsw : !s32i, !s32i loc(#loc151)
    %100 = cir.cmp(ne, %97, %99) : !s32i, !cir.bool loc(#loc325)
    cir.brcond %100 ^bb43, ^bb44 loc(#loc326)
  ^bb43:  // pred: ^bb42
    %101 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc153)
    %102 = cir.call @close(%101) : (!s32i) -> !s32i loc(#loc154)
    cir.br ^bb44 loc(#loc149)
  ^bb44:  // 2 preds: ^bb42, ^bb43
    cir.br ^bb45 loc(#loc149)
  ^bb45:  // pred: ^bb44
    cir.br ^bb46 loc(#loc327)
  ^bb46:  // pred: ^bb45
    %103 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc157)
    %104 = cir.const #cir.int<1> : !s32i loc(#loc158)
    %105 = cir.unary(minus, %104) nsw : !s32i, !s32i loc(#loc158)
    %106 = cir.cmp(ne, %103, %105) : !s32i, !cir.bool loc(#loc328)
    cir.brcond %106 ^bb47, ^bb48 loc(#loc329)
  ^bb47:  // pred: ^bb46
    %107 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc160)
    %108 = cir.call @close(%107) : (!s32i) -> !s32i loc(#loc161)
    cir.br ^bb48 loc(#loc156)
  ^bb48:  // 2 preds: ^bb46, ^bb47
    cir.br ^bb49 loc(#loc156)
  ^bb49:  // pred: ^bb48
    cir.return loc(#loc28)
  } loc(#loc276)
  cir.func no_proto @CWE510_Trapdoor__ip_based_logic_18_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<()>> loc(#loc331)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc164)
    cir.return loc(#loc163)
  } loc(#loc330)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    %0 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc333)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc334)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc335)
    cir.br ^bb1 loc(#loc336)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.int<1> : !s32i loc(#loc171)
    %4 = cir.unary(minus, %3) nsw : !s32i, !s32i loc(#loc171)
    cir.store %4, %1 : !s32i, !cir.ptr<!s32i> loc(#loc334)
    %5 = cir.const #cir.int<1> : !s32i loc(#loc173)
    %6 = cir.unary(minus, %5) nsw : !s32i, !s32i loc(#loc173)
    cir.store %6, %2 : !s32i, !cir.ptr<!s32i> loc(#loc335)
    cir.br ^bb2 loc(#loc337)
  ^bb2:  // pred: ^bb1
    cir.br ^bb4 loc(#loc337)
  ^bb3:  // pred: ^bb26
    %7 = cir.const #cir.int<0> : !s32i loc(#loc178)
    %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc178)
    cir.brcond %8 ^bb4, ^bb27 loc(#loc178)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc338)
  ^bb5:  // pred: ^bb4
    %9 = cir.const #cir.int<2> : !s32i loc(#loc181)
    %10 = cir.const #cir.int<1> : !s32i loc(#loc182)
    %11 = cir.const #cir.int<6> : !s32i loc(#loc183)
    %12 = cir.call @socket(%9, %10, %11) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc184)
    cir.store %12, %1 : !s32i, !cir.ptr<!s32i> loc(#loc339)
    cir.br ^bb6 loc(#loc340)
  ^bb6:  // pred: ^bb5
    %13 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc189)
    %14 = cir.const #cir.int<1> : !s32i loc(#loc190)
    %15 = cir.unary(minus, %14) nsw : !s32i, !s32i loc(#loc190)
    %16 = cir.cmp(eq, %13, %15) : !s32i, !cir.bool loc(#loc341)
    cir.brcond %16 ^bb7, ^bb8 loc(#loc342)
  ^bb7:  // pred: ^bb6
    cir.br ^bb27 loc(#loc192)
  ^bb8:  // pred: ^bb6
    cir.br ^bb9 loc(#loc188)
  ^bb9:  // pred: ^bb8
    %17 = cir.cast(bitcast, %0 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc343)
    %18 = cir.const #cir.int<0> : !s32i loc(#loc195)
    %19 = cir.const #cir.int<16> : !u64i loc(#loc344)
    cir.libc.memset %19 bytes from %17 set to %18 : !cir.ptr<!void>, !s32i, !u64i loc(#loc345)
    %20 = cir.const #cir.int<2> : !s32i loc(#loc200)
    %21 = cir.cast(integral, %20 : !s32i), !u16i loc(#loc200)
    %22 = cir.get_member %0[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc66)
    cir.store %21, %22 : !u16i, !cir.ptr<!u16i> loc(#loc346)
    %23 = cir.const #cir.int<0> : !s32i loc(#loc202)
    %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc202)
    %25 = cir.get_member %0[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc69)
    %26 = cir.get_member %25[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc70)
    cir.store %24, %26 : !u32i, !cir.ptr<!u32i> loc(#loc347)
    %27 = cir.const #cir.int<20000> : !s32i loc(#loc204)
    %28 = cir.cast(integral, %27 : !s32i), !u16i loc(#loc204)
    %29 = cir.call @htons(%28) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc205)
    %30 = cir.get_member %0[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc74)
    cir.store %29, %30 : !u16i, !cir.ptr<!u16i> loc(#loc348)
    cir.br ^bb10 loc(#loc349)
  ^bb10:  // pred: ^bb9
    %31 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc210)
    %32 = cir.cast(bitcast, %0 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc350)
    %33 = cir.const #cir.int<16> : !u64i loc(#loc351)
    %34 = cir.cast(integral, %33 : !u64i), !u32i loc(#loc351)
    %35 = cir.call @bind(%31, %32, %34) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc215)
    %36 = cir.const #cir.int<1> : !s32i loc(#loc216)
    %37 = cir.unary(minus, %36) nsw : !s32i, !s32i loc(#loc216)
    %38 = cir.cmp(eq, %35, %37) : !s32i, !cir.bool loc(#loc352)
    cir.brcond %38 ^bb11, ^bb12 loc(#loc353)
  ^bb11:  // pred: ^bb10
    cir.br ^bb27 loc(#loc218)
  ^bb12:  // pred: ^bb10
    cir.br ^bb13 loc(#loc209)
  ^bb13:  // pred: ^bb12
    cir.br ^bb14 loc(#loc354)
  ^bb14:  // pred: ^bb13
    %39 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc221)
    %40 = cir.const #cir.int<5> : !s32i loc(#loc222)
    %41 = cir.call @listen(%39, %40) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc223)
    %42 = cir.const #cir.int<1> : !s32i loc(#loc224)
    %43 = cir.unary(minus, %42) nsw : !s32i, !s32i loc(#loc224)
    %44 = cir.cmp(eq, %41, %43) : !s32i, !cir.bool loc(#loc355)
    cir.brcond %44 ^bb15, ^bb16 loc(#loc356)
  ^bb15:  // pred: ^bb14
    cir.br ^bb27 loc(#loc226)
  ^bb16:  // pred: ^bb14
    cir.br ^bb17 loc(#loc220)
  ^bb17:  // pred: ^bb16
    %45 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc227)
    %46 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc228)
    %47 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc229)
    %48 = cir.call @accept(%45, %46, %47) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc230)
    cir.store %48, %2 : !s32i, !cir.ptr<!s32i> loc(#loc357)
    cir.br ^bb18 loc(#loc358)
  ^bb18:  // pred: ^bb17
    %49 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc235)
    %50 = cir.const #cir.int<1> : !s32i loc(#loc236)
    %51 = cir.unary(minus, %50) nsw : !s32i, !s32i loc(#loc236)
    %52 = cir.cmp(eq, %49, %51) : !s32i, !cir.bool loc(#loc359)
    cir.brcond %52 ^bb19, ^bb20 loc(#loc360)
  ^bb19:  // pred: ^bb18
    cir.br ^bb27 loc(#loc238)
  ^bb20:  // pred: ^bb18
    cir.br ^bb21 loc(#loc234)
  ^bb21:  // pred: ^bb20
    cir.br ^bb22 loc(#loc361)
  ^bb22:  // pred: ^bb21
    %53 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc241)
    %54 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc242)
    %55 = cir.cast(array_to_ptrdecay, %54 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc242)
    %56 = cir.cast(bitcast, %55 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc242)
    %57 = cir.const #cir.int<8> : !u64i loc(#loc362)
    %58 = cir.const #cir.int<0> : !s32i loc(#loc245)
    %59 = cir.call @send(%53, %56, %57, %58) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc246)
    %60 = cir.const #cir.int<1> : !s32i loc(#loc247)
    %61 = cir.unary(minus, %60) nsw : !s32i, !s32i loc(#loc247)
    %62 = cir.cast(integral, %61 : !s32i), !s64i loc(#loc247)
    %63 = cir.cmp(eq, %59, %62) : !s64i, !cir.bool loc(#loc363)
    cir.brcond %63 ^bb23, ^bb24 loc(#loc364)
  ^bb23:  // pred: ^bb22
    %64 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 13>> loc(#loc249)
    %65 = cir.cast(array_to_ptrdecay, %64 : !cir.ptr<!cir.array<!s8i x 13>>), !cir.ptr<!s8i> loc(#loc249)
    cir.call @printLine(%65) : (!cir.ptr<!s8i>) -> () loc(#loc250)
    cir.br ^bb24 loc(#loc240)
  ^bb24:  // 2 preds: ^bb22, ^bb23
    cir.br ^bb25 loc(#loc240)
  ^bb25:  // pred: ^bb24
    cir.br ^bb26 loc(#loc180)
  ^bb26:  // pred: ^bb25
    cir.br ^bb3 loc(#loc177)
  ^bb27:  // 5 preds: ^bb3, ^bb7, ^bb11, ^bb15, ^bb19
    cir.br ^bb28 loc(#loc177)
  ^bb28:  // pred: ^bb27
    cir.br ^bb29 loc(#loc365)
  ^bb29:  // pred: ^bb28
    %66 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc253)
    %67 = cir.const #cir.int<1> : !s32i loc(#loc254)
    %68 = cir.unary(minus, %67) nsw : !s32i, !s32i loc(#loc254)
    %69 = cir.cmp(ne, %66, %68) : !s32i, !cir.bool loc(#loc366)
    cir.brcond %69 ^bb30, ^bb31 loc(#loc367)
  ^bb30:  // pred: ^bb29
    %70 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc256)
    %71 = cir.call @close(%70) : (!s32i) -> !s32i loc(#loc257)
    cir.br ^bb31 loc(#loc252)
  ^bb31:  // 2 preds: ^bb29, ^bb30
    cir.br ^bb32 loc(#loc252)
  ^bb32:  // pred: ^bb31
    cir.br ^bb33 loc(#loc368)
  ^bb33:  // pred: ^bb32
    %72 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc260)
    %73 = cir.const #cir.int<1> : !s32i loc(#loc261)
    %74 = cir.unary(minus, %73) nsw : !s32i, !s32i loc(#loc261)
    %75 = cir.cmp(ne, %72, %74) : !s32i, !cir.bool loc(#loc369)
    cir.brcond %75 ^bb34, ^bb35 loc(#loc370)
  ^bb34:  // pred: ^bb33
    %76 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc263)
    %77 = cir.call @close(%76) : (!s32i) -> !s32i loc(#loc264)
    cir.br ^bb35 loc(#loc259)
  ^bb35:  // 2 preds: ^bb33, ^bb34
    cir.br ^bb36 loc(#loc259)
  ^bb36:  // pred: ^bb35
    cir.return loc(#loc167)
  } loc(#loc332)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE510_Trapdoor/CWE510_Trapdoor__ip_based_logic_18.c":0:0)
#loc1 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:1)
#loc2 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:62)
#loc3 = loc("/usr/include/netinet/in.h":402:1)
#loc4 = loc("/usr/include/netinet/in.h":403:40)
#loc5 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":112:1)
#loc6 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":113:6)
#loc7 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":296:1)
#loc8 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":296:39)
#loc9 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":306:1)
#loc10 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":307:38)
#loc11 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":116:1)
#loc12 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":117:33)
#loc13 = loc("/usr/include/string.h":156:1)
#loc14 = loc("/usr/include/string.h":157:33)
#loc15 = loc("CWE510_Trapdoor__ip_based_logic_18.c":90:24)
#loc16 = loc("/usr/include/arpa/inet.h":53:1)
#loc17 = loc("/usr/include/arpa/inet.h":53:46)
#loc18 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":138:1)
#loc19 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":138:74)
#loc20 = loc("CWE510_Trapdoor__ip_based_logic_18.c":92:40)
#loc21 = loc("CWE510_Trapdoor__ip_based_logic_18.c":100:40)
#loc22 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc23 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc24 = loc("CWE510_Trapdoor__ip_based_logic_18.c":102:31)
#loc25 = loc("/usr/include/unistd.h":358:1)
#loc26 = loc("/usr/include/unistd.h":358:27)
#loc27 = loc("CWE510_Trapdoor__ip_based_logic_18.c":41:1)
#loc28 = loc("CWE510_Trapdoor__ip_based_logic_18.c":122:1)
#loc29 = loc("CWE510_Trapdoor__ip_based_logic_18.c":50:9)
#loc30 = loc("CWE510_Trapdoor__ip_based_logic_18.c":50:28)
#loc31 = loc("CWE510_Trapdoor__ip_based_logic_18.c":50:37)
#loc32 = loc("CWE510_Trapdoor__ip_based_logic_18.c":51:9)
#loc33 = loc("CWE510_Trapdoor__ip_based_logic_18.c":51:52)
#loc34 = loc("CWE510_Trapdoor__ip_based_logic_18.c":52:9)
#loc35 = loc("CWE510_Trapdoor__ip_based_logic_18.c":52:31)
#loc36 = loc("CWE510_Trapdoor__ip_based_logic_18.c":53:9)
#loc37 = loc("CWE510_Trapdoor__ip_based_logic_18.c":53:31)
#loc38 = loc("CWE510_Trapdoor__ip_based_logic_18.c":43:5)
#loc39 = loc("CWE510_Trapdoor__ip_based_logic_18.c":43:10)
#loc40 = loc("CWE510_Trapdoor__ip_based_logic_18.c":51:32)
#loc41 = loc("CWE510_Trapdoor__ip_based_logic_18.c":54:9)
#loc42 = loc("CWE510_Trapdoor__ip_based_logic_18.c":106:17)
#loc43 = loc("CWE510_Trapdoor__ip_based_logic_18.c":106:16)
#loc44 = loc("CWE510_Trapdoor__ip_based_logic_18.c":55:9)
#loc45 = loc("CWE510_Trapdoor__ip_based_logic_18.c":105:9)
#loc46 = loc("CWE510_Trapdoor__ip_based_logic_18.c":63:35)
#loc47 = loc("CWE510_Trapdoor__ip_based_logic_18.c":63:44)
#loc48 = loc("CWE510_Trapdoor__ip_based_logic_18.c":63:57)
#loc49 = loc("CWE510_Trapdoor__ip_based_logic_18.c":63:28)
#loc50 = loc("CWE510_Trapdoor__ip_based_logic_18.c":63:13)
#loc51 = loc("CWE510_Trapdoor__ip_based_logic_18.c":63:68)
#loc52 = loc("CWE510_Trapdoor__ip_based_logic_18.c":64:13)
#loc53 = loc("CWE510_Trapdoor__ip_based_logic_18.c":67:13)
#loc54 = loc("CWE510_Trapdoor__ip_based_logic_18.c":64:17)
#loc55 = loc("CWE510_Trapdoor__ip_based_logic_18.c":64:33)
#loc56 = loc("CWE510_Trapdoor__ip_based_logic_18.c":65:13)
#loc57 = loc("CWE510_Trapdoor__ip_based_logic_18.c":66:17)
#loc58 = loc("CWE510_Trapdoor__ip_based_logic_18.c":68:20)
#loc59 = loc("CWE510_Trapdoor__ip_based_logic_18.c":68:21)
#loc60 = loc("CWE510_Trapdoor__ip_based_logic_18.c":68:30)
#loc61 = loc("CWE510_Trapdoor__ip_based_logic_18.c":68:33)
#loc62 = loc("CWE510_Trapdoor__ip_based_logic_18.c":68:47)
#loc63 = loc("CWE510_Trapdoor__ip_based_logic_18.c":68:13)
#loc64 = loc("CWE510_Trapdoor__ip_based_logic_18.c":68:48)
#loc65 = loc("CWE510_Trapdoor__ip_based_logic_18.c":69:34)
#loc66 = loc("/usr/include/netinet/in.h":249:5)
#loc67 = loc("CWE510_Trapdoor__ip_based_logic_18.c":69:13)
#loc68 = loc("CWE510_Trapdoor__ip_based_logic_18.c":70:39)
#loc69 = loc("/usr/include/netinet/in.h":251:20)
#loc70 = loc("/usr/include/netinet/in.h":33:15)
#loc71 = loc("CWE510_Trapdoor__ip_based_logic_18.c":70:13)
#loc72 = loc("CWE510_Trapdoor__ip_based_logic_18.c":71:38)
#loc73 = loc("CWE510_Trapdoor__ip_based_logic_18.c":71:32)
#loc74 = loc("/usr/include/netinet/in.h":250:15)
#loc75 = loc("CWE510_Trapdoor__ip_based_logic_18.c":71:13)
#loc76 = loc("CWE510_Trapdoor__ip_based_logic_18.c":71:43)
#loc77 = loc("CWE510_Trapdoor__ip_based_logic_18.c":72:13)
#loc78 = loc("CWE510_Trapdoor__ip_based_logic_18.c":75:13)
#loc79 = loc("CWE510_Trapdoor__ip_based_logic_18.c":72:22)
#loc80 = loc("CWE510_Trapdoor__ip_based_logic_18.c":72:54)
#loc81 = loc("CWE510_Trapdoor__ip_based_logic_18.c":72:55)
#loc82 = loc("CWE510_Trapdoor__ip_based_logic_18.c":72:64)
#loc83 = loc("CWE510_Trapdoor__ip_based_logic_18.c":72:78)
#loc84 = loc("CWE510_Trapdoor__ip_based_logic_18.c":72:17)
#loc85 = loc("CWE510_Trapdoor__ip_based_logic_18.c":72:84)
#loc86 = loc("CWE510_Trapdoor__ip_based_logic_18.c":73:13)
#loc87 = loc("CWE510_Trapdoor__ip_based_logic_18.c":74:17)
#loc88 = loc("CWE510_Trapdoor__ip_based_logic_18.c":76:13)
#loc89 = loc("CWE510_Trapdoor__ip_based_logic_18.c":79:13)
#loc90 = loc("CWE510_Trapdoor__ip_based_logic_18.c":76:24)
#loc91 = loc("CWE510_Trapdoor__ip_based_logic_18.c":76:38)
#loc92 = loc("CWE510_Trapdoor__ip_based_logic_18.c":76:17)
#loc93 = loc("CWE510_Trapdoor__ip_based_logic_18.c":76:44)
#loc94 = loc("CWE510_Trapdoor__ip_based_logic_18.c":77:13)
#loc95 = loc("CWE510_Trapdoor__ip_based_logic_18.c":78:17)
#loc96 = loc("CWE510_Trapdoor__ip_based_logic_18.c":80:35)
#loc97 = loc("CWE510_Trapdoor__ip_based_logic_18.c":80:49)
#loc98 = loc("CWE510_Trapdoor__ip_based_logic_18.c":80:55)
#loc99 = loc("CWE510_Trapdoor__ip_based_logic_18.c":80:28)
#loc100 = loc("CWE510_Trapdoor__ip_based_logic_18.c":80:13)
#loc101 = loc("CWE510_Trapdoor__ip_based_logic_18.c":80:59)
#loc102 = loc("CWE510_Trapdoor__ip_based_logic_18.c":81:13)
#loc103 = loc("CWE510_Trapdoor__ip_based_logic_18.c":84:13)
#loc104 = loc("CWE510_Trapdoor__ip_based_logic_18.c":81:17)
#loc105 = loc("CWE510_Trapdoor__ip_based_logic_18.c":81:33)
#loc106 = loc("CWE510_Trapdoor__ip_based_logic_18.c":82:13)
#loc107 = loc("CWE510_Trapdoor__ip_based_logic_18.c":83:17)
#loc108 = loc("CWE510_Trapdoor__ip_based_logic_18.c":85:13)
#loc109 = loc("CWE510_Trapdoor__ip_based_logic_18.c":88:13)
#loc110 = loc("CWE510_Trapdoor__ip_based_logic_18.c":85:29)
#loc111 = loc("CWE510_Trapdoor__ip_based_logic_18.c":85:62)
#loc112 = loc("CWE510_Trapdoor__ip_based_logic_18.c":85:63)
#loc113 = loc("CWE510_Trapdoor__ip_based_logic_18.c":85:78)
#loc114 = loc("CWE510_Trapdoor__ip_based_logic_18.c":85:79)
#loc115 = loc("CWE510_Trapdoor__ip_based_logic_18.c":85:17)
#loc116 = loc("CWE510_Trapdoor__ip_based_logic_18.c":85:101)
#loc117 = loc("CWE510_Trapdoor__ip_based_logic_18.c":85:100)
#loc118 = loc("CWE510_Trapdoor__ip_based_logic_18.c":86:13)
#loc119 = loc("CWE510_Trapdoor__ip_based_logic_18.c":87:17)
#loc120 = loc("CWE510_Trapdoor__ip_based_logic_18.c":90:13)
#loc121 = loc("CWE510_Trapdoor__ip_based_logic_18.c":104:13)
#loc122 = loc("CWE510_Trapdoor__ip_based_logic_18.c":90:17)
#loc123 = loc("CWE510_Trapdoor__ip_based_logic_18.c":90:42)
#loc124 = loc("CWE510_Trapdoor__ip_based_logic_18.c":90:80)
#loc125 = loc("CWE510_Trapdoor__ip_based_logic_18.c":91:13)
#loc126 = loc("CWE510_Trapdoor__ip_based_logic_18.c":97:13)
#loc127 = loc("CWE510_Trapdoor__ip_based_logic_18.c":99:13)
#loc128 = loc("CWE510_Trapdoor__ip_based_logic_18.c":92:17)
#loc129 = loc("CWE510_Trapdoor__ip_based_logic_18.c":96:17)
#loc130 = loc("CWE510_Trapdoor__ip_based_logic_18.c":92:26)
#loc131 = loc("CWE510_Trapdoor__ip_based_logic_18.c":92:55)
#loc132 = loc("CWE510_Trapdoor__ip_based_logic_18.c":92:75)
#loc133 = loc("CWE510_Trapdoor__ip_based_logic_18.c":92:78)
#loc134 = loc("CWE510_Trapdoor__ip_based_logic_18.c":92:21)
#loc135 = loc("CWE510_Trapdoor__ip_based_logic_18.c":92:85)
#loc136 = loc("CWE510_Trapdoor__ip_based_logic_18.c":93:17)
#loc137 = loc("CWE510_Trapdoor__ip_based_logic_18.c":95:21)
#loc138 = loc("CWE510_Trapdoor__ip_based_logic_18.c":100:17)
#loc139 = loc("CWE510_Trapdoor__ip_based_logic_18.c":103:17)
#loc140 = loc("CWE510_Trapdoor__ip_based_logic_18.c":100:26)
#loc141 = loc("CWE510_Trapdoor__ip_based_logic_18.c":100:57)
#loc142 = loc("CWE510_Trapdoor__ip_based_logic_18.c":100:79)
#loc143 = loc("CWE510_Trapdoor__ip_based_logic_18.c":100:82)
#loc144 = loc("CWE510_Trapdoor__ip_based_logic_18.c":100:21)
#loc145 = loc("CWE510_Trapdoor__ip_based_logic_18.c":100:88)
#loc146 = loc("CWE510_Trapdoor__ip_based_logic_18.c":101:17)
#loc147 = loc("CWE510_Trapdoor__ip_based_logic_18.c":102:21)
#loc148 = loc("CWE510_Trapdoor__ip_based_logic_18.c":107:9)
#loc149 = loc("CWE510_Trapdoor__ip_based_logic_18.c":110:9)
#loc150 = loc("CWE510_Trapdoor__ip_based_logic_18.c":107:13)
#loc151 = loc("CWE510_Trapdoor__ip_based_logic_18.c":107:29)
#loc152 = loc("CWE510_Trapdoor__ip_based_logic_18.c":108:9)
#loc153 = loc("CWE510_Trapdoor__ip_based_logic_18.c":109:26)
#loc154 = loc("CWE510_Trapdoor__ip_based_logic_18.c":109:13)
#loc155 = loc("CWE510_Trapdoor__ip_based_logic_18.c":111:9)
#loc156 = loc("CWE510_Trapdoor__ip_based_logic_18.c":114:9)
#loc157 = loc("CWE510_Trapdoor__ip_based_logic_18.c":111:13)
#loc158 = loc("CWE510_Trapdoor__ip_based_logic_18.c":111:29)
#loc159 = loc("CWE510_Trapdoor__ip_based_logic_18.c":112:9)
#loc160 = loc("CWE510_Trapdoor__ip_based_logic_18.c":113:26)
#loc161 = loc("CWE510_Trapdoor__ip_based_logic_18.c":113:13)
#loc162 = loc("CWE510_Trapdoor__ip_based_logic_18.c":196:1)
#loc163 = loc("CWE510_Trapdoor__ip_based_logic_18.c":199:1)
#loc164 = loc("CWE510_Trapdoor__ip_based_logic_18.c":198:5)
#loc165 = loc("CWE510_Trapdoor__ip_based_logic_18.c":198:11)
#loc166 = loc("CWE510_Trapdoor__ip_based_logic_18.c":129:1)
#loc167 = loc("CWE510_Trapdoor__ip_based_logic_18.c":194:1)
#loc168 = loc("CWE510_Trapdoor__ip_based_logic_18.c":138:9)
#loc169 = loc("CWE510_Trapdoor__ip_based_logic_18.c":138:28)
#loc170 = loc("CWE510_Trapdoor__ip_based_logic_18.c":139:9)
#loc171 = loc("CWE510_Trapdoor__ip_based_logic_18.c":139:31)
#loc172 = loc("CWE510_Trapdoor__ip_based_logic_18.c":140:9)
#loc173 = loc("CWE510_Trapdoor__ip_based_logic_18.c":140:31)
#loc174 = loc("CWE510_Trapdoor__ip_based_logic_18.c":131:5)
#loc175 = loc("CWE510_Trapdoor__ip_based_logic_18.c":131:10)
#loc176 = loc("CWE510_Trapdoor__ip_based_logic_18.c":141:9)
#loc177 = loc("CWE510_Trapdoor__ip_based_logic_18.c":178:17)
#loc178 = loc("CWE510_Trapdoor__ip_based_logic_18.c":178:16)
#loc179 = loc("CWE510_Trapdoor__ip_based_logic_18.c":142:9)
#loc180 = loc("CWE510_Trapdoor__ip_based_logic_18.c":177:9)
#loc181 = loc("CWE510_Trapdoor__ip_based_logic_18.c":150:35)
#loc182 = loc("CWE510_Trapdoor__ip_based_logic_18.c":150:44)
#loc183 = loc("CWE510_Trapdoor__ip_based_logic_18.c":150:57)
#loc184 = loc("CWE510_Trapdoor__ip_based_logic_18.c":150:28)
#loc185 = loc("CWE510_Trapdoor__ip_based_logic_18.c":150:13)
#loc186 = loc("CWE510_Trapdoor__ip_based_logic_18.c":150:68)
#loc187 = loc("CWE510_Trapdoor__ip_based_logic_18.c":151:13)
#loc188 = loc("CWE510_Trapdoor__ip_based_logic_18.c":154:13)
#loc189 = loc("CWE510_Trapdoor__ip_based_logic_18.c":151:17)
#loc190 = loc("CWE510_Trapdoor__ip_based_logic_18.c":151:33)
#loc191 = loc("CWE510_Trapdoor__ip_based_logic_18.c":152:13)
#loc192 = loc("CWE510_Trapdoor__ip_based_logic_18.c":153:17)
#loc193 = loc("CWE510_Trapdoor__ip_based_logic_18.c":155:20)
#loc194 = loc("CWE510_Trapdoor__ip_based_logic_18.c":155:21)
#loc195 = loc("CWE510_Trapdoor__ip_based_logic_18.c":155:30)
#loc196 = loc("CWE510_Trapdoor__ip_based_logic_18.c":155:33)
#loc197 = loc("CWE510_Trapdoor__ip_based_logic_18.c":155:47)
#loc198 = loc("CWE510_Trapdoor__ip_based_logic_18.c":155:13)
#loc199 = loc("CWE510_Trapdoor__ip_based_logic_18.c":155:48)
#loc200 = loc("CWE510_Trapdoor__ip_based_logic_18.c":156:34)
#loc201 = loc("CWE510_Trapdoor__ip_based_logic_18.c":156:13)
#loc202 = loc("CWE510_Trapdoor__ip_based_logic_18.c":157:39)
#loc203 = loc("CWE510_Trapdoor__ip_based_logic_18.c":157:13)
#loc204 = loc("CWE510_Trapdoor__ip_based_logic_18.c":158:38)
#loc205 = loc("CWE510_Trapdoor__ip_based_logic_18.c":158:32)
#loc206 = loc("CWE510_Trapdoor__ip_based_logic_18.c":158:13)
#loc207 = loc("CWE510_Trapdoor__ip_based_logic_18.c":158:43)
#loc208 = loc("CWE510_Trapdoor__ip_based_logic_18.c":159:13)
#loc209 = loc("CWE510_Trapdoor__ip_based_logic_18.c":162:13)
#loc210 = loc("CWE510_Trapdoor__ip_based_logic_18.c":159:22)
#loc211 = loc("CWE510_Trapdoor__ip_based_logic_18.c":159:54)
#loc212 = loc("CWE510_Trapdoor__ip_based_logic_18.c":159:55)
#loc213 = loc("CWE510_Trapdoor__ip_based_logic_18.c":159:64)
#loc214 = loc("CWE510_Trapdoor__ip_based_logic_18.c":159:78)
#loc215 = loc("CWE510_Trapdoor__ip_based_logic_18.c":159:17)
#loc216 = loc("CWE510_Trapdoor__ip_based_logic_18.c":159:84)
#loc217 = loc("CWE510_Trapdoor__ip_based_logic_18.c":160:13)
#loc218 = loc("CWE510_Trapdoor__ip_based_logic_18.c":161:17)
#loc219 = loc("CWE510_Trapdoor__ip_based_logic_18.c":163:13)
#loc220 = loc("CWE510_Trapdoor__ip_based_logic_18.c":166:13)
#loc221 = loc("CWE510_Trapdoor__ip_based_logic_18.c":163:24)
#loc222 = loc("CWE510_Trapdoor__ip_based_logic_18.c":163:38)
#loc223 = loc("CWE510_Trapdoor__ip_based_logic_18.c":163:17)
#loc224 = loc("CWE510_Trapdoor__ip_based_logic_18.c":163:44)
#loc225 = loc("CWE510_Trapdoor__ip_based_logic_18.c":164:13)
#loc226 = loc("CWE510_Trapdoor__ip_based_logic_18.c":165:17)
#loc227 = loc("CWE510_Trapdoor__ip_based_logic_18.c":167:35)
#loc228 = loc("CWE510_Trapdoor__ip_based_logic_18.c":167:49)
#loc229 = loc("CWE510_Trapdoor__ip_based_logic_18.c":167:55)
#loc230 = loc("CWE510_Trapdoor__ip_based_logic_18.c":167:28)
#loc231 = loc("CWE510_Trapdoor__ip_based_logic_18.c":167:13)
#loc232 = loc("CWE510_Trapdoor__ip_based_logic_18.c":167:59)
#loc233 = loc("CWE510_Trapdoor__ip_based_logic_18.c":168:13)
#loc234 = loc("CWE510_Trapdoor__ip_based_logic_18.c":171:13)
#loc235 = loc("CWE510_Trapdoor__ip_based_logic_18.c":168:17)
#loc236 = loc("CWE510_Trapdoor__ip_based_logic_18.c":168:33)
#loc237 = loc("CWE510_Trapdoor__ip_based_logic_18.c":169:13)
#loc238 = loc("CWE510_Trapdoor__ip_based_logic_18.c":170:17)
#loc239 = loc("CWE510_Trapdoor__ip_based_logic_18.c":173:13)
#loc240 = loc("CWE510_Trapdoor__ip_based_logic_18.c":176:13)
#loc241 = loc("CWE510_Trapdoor__ip_based_logic_18.c":173:22)
#loc242 = loc("CWE510_Trapdoor__ip_based_logic_18.c":173:36)
#loc243 = loc("CWE510_Trapdoor__ip_based_logic_18.c":173:53)
#loc244 = loc("CWE510_Trapdoor__ip_based_logic_18.c":173:75)
#loc245 = loc("CWE510_Trapdoor__ip_based_logic_18.c":173:78)
#loc246 = loc("CWE510_Trapdoor__ip_based_logic_18.c":173:17)
#loc247 = loc("CWE510_Trapdoor__ip_based_logic_18.c":173:84)
#loc248 = loc("CWE510_Trapdoor__ip_based_logic_18.c":174:13)
#loc249 = loc("CWE510_Trapdoor__ip_based_logic_18.c":175:27)
#loc250 = loc("CWE510_Trapdoor__ip_based_logic_18.c":175:17)
#loc251 = loc("CWE510_Trapdoor__ip_based_logic_18.c":179:9)
#loc252 = loc("CWE510_Trapdoor__ip_based_logic_18.c":182:9)
#loc253 = loc("CWE510_Trapdoor__ip_based_logic_18.c":179:13)
#loc254 = loc("CWE510_Trapdoor__ip_based_logic_18.c":179:29)
#loc255 = loc("CWE510_Trapdoor__ip_based_logic_18.c":180:9)
#loc256 = loc("CWE510_Trapdoor__ip_based_logic_18.c":181:26)
#loc257 = loc("CWE510_Trapdoor__ip_based_logic_18.c":181:13)
#loc258 = loc("CWE510_Trapdoor__ip_based_logic_18.c":183:9)
#loc259 = loc("CWE510_Trapdoor__ip_based_logic_18.c":186:9)
#loc260 = loc("CWE510_Trapdoor__ip_based_logic_18.c":183:13)
#loc261 = loc("CWE510_Trapdoor__ip_based_logic_18.c":183:29)
#loc262 = loc("CWE510_Trapdoor__ip_based_logic_18.c":184:9)
#loc263 = loc("CWE510_Trapdoor__ip_based_logic_18.c":185:26)
#loc264 = loc("CWE510_Trapdoor__ip_based_logic_18.c":185:13)
#loc265 = loc(fused[#loc1, #loc2])
#loc266 = loc(fused[#loc3, #loc4])
#loc267 = loc(fused[#loc5, #loc6])
#loc268 = loc(fused[#loc7, #loc8])
#loc269 = loc(fused[#loc9, #loc10])
#loc270 = loc(fused[#loc11, #loc12])
#loc271 = loc(fused[#loc13, #loc14])
#loc272 = loc(fused[#loc16, #loc17])
#loc273 = loc(fused[#loc18, #loc19])
#loc274 = loc(fused[#loc22, #loc23])
#loc275 = loc(fused[#loc25, #loc26])
#loc276 = loc(fused[#loc27, #loc28])
#loc277 = loc(fused[#loc29, #loc30])
#loc278 = loc(fused[#loc29, #loc31])
#loc279 = loc(fused[#loc32, #loc33])
#loc280 = loc(fused[#loc34, #loc35])
#loc281 = loc(fused[#loc36, #loc37])
#loc282 = loc(fused[#loc38, #loc39])
#loc283 = loc(fused[#loc40, #loc33])
#loc284 = loc(fused[#loc41, #loc42])
#loc285 = loc(fused[#loc44, #loc45])
#loc286 = loc(fused[#loc50, #loc51])
#loc287 = loc(fused[#loc52, #loc53])
#loc288 = loc(fused[#loc54, #loc55])
#loc289 = loc(fused[#loc56, #loc53])
#loc290 = loc(fused[#loc58, #loc59])
#loc291 = loc(fused[#loc61, #loc62])
#loc292 = loc(fused[#loc63, #loc64])
#loc293 = loc(fused[#loc67, #loc65])
#loc294 = loc(fused[#loc71, #loc68])
#loc295 = loc(fused[#loc75, #loc76])
#loc296 = loc(fused[#loc77, #loc78])
#loc297 = loc(fused[#loc80, #loc81])
#loc298 = loc(fused[#loc82, #loc83])
#loc299 = loc(fused[#loc84, #loc85])
#loc300 = loc(fused[#loc86, #loc78])
#loc301 = loc(fused[#loc88, #loc89])
#loc302 = loc(fused[#loc92, #loc93])
#loc303 = loc(fused[#loc94, #loc89])
#loc304 = loc(fused[#loc100, #loc101])
#loc305 = loc(fused[#loc102, #loc103])
#loc306 = loc(fused[#loc104, #loc105])
#loc307 = loc(fused[#loc106, #loc103])
#loc308 = loc(fused[#loc108, #loc109])
#loc309 = loc(fused[#loc111, #loc112])
#loc310 = loc(fused[#loc113, #loc114])
#loc311 = loc(fused[#loc115, #loc116])
#loc312 = loc(fused[#loc118, #loc109])
#loc313 = loc(fused[#loc120, #loc121])
#loc314 = loc(fused[#loc122, #loc124])
#loc315 = loc(fused[#loc125, #loc126, #loc127, #loc121])
#loc316 = loc(fused[#loc128, #loc129])
#loc317 = loc(fused[#loc131, #loc132])
#loc318 = loc(fused[#loc134, #loc135])
#loc319 = loc(fused[#loc136, #loc129])
#loc320 = loc(fused[#loc138, #loc139])
#loc321 = loc(fused[#loc141, #loc142])
#loc322 = loc(fused[#loc144, #loc145])
#loc323 = loc(fused[#loc146, #loc139])
#loc324 = loc(fused[#loc148, #loc149])
#loc325 = loc(fused[#loc150, #loc151])
#loc326 = loc(fused[#loc152, #loc149])
#loc327 = loc(fused[#loc155, #loc156])
#loc328 = loc(fused[#loc157, #loc158])
#loc329 = loc(fused[#loc159, #loc156])
#loc330 = loc(fused[#loc162, #loc163])
#loc331 = loc(fused[#loc164, #loc165])
#loc332 = loc(fused[#loc166, #loc167])
#loc333 = loc(fused[#loc168, #loc169])
#loc334 = loc(fused[#loc170, #loc171])
#loc335 = loc(fused[#loc172, #loc173])
#loc336 = loc(fused[#loc174, #loc175])
#loc337 = loc(fused[#loc176, #loc177])
#loc338 = loc(fused[#loc179, #loc180])
#loc339 = loc(fused[#loc185, #loc186])
#loc340 = loc(fused[#loc187, #loc188])
#loc341 = loc(fused[#loc189, #loc190])
#loc342 = loc(fused[#loc191, #loc188])
#loc343 = loc(fused[#loc193, #loc194])
#loc344 = loc(fused[#loc196, #loc197])
#loc345 = loc(fused[#loc198, #loc199])
#loc346 = loc(fused[#loc201, #loc200])
#loc347 = loc(fused[#loc203, #loc202])
#loc348 = loc(fused[#loc206, #loc207])
#loc349 = loc(fused[#loc208, #loc209])
#loc350 = loc(fused[#loc211, #loc212])
#loc351 = loc(fused[#loc213, #loc214])
#loc352 = loc(fused[#loc215, #loc216])
#loc353 = loc(fused[#loc217, #loc209])
#loc354 = loc(fused[#loc219, #loc220])
#loc355 = loc(fused[#loc223, #loc224])
#loc356 = loc(fused[#loc225, #loc220])
#loc357 = loc(fused[#loc231, #loc232])
#loc358 = loc(fused[#loc233, #loc234])
#loc359 = loc(fused[#loc235, #loc236])
#loc360 = loc(fused[#loc237, #loc234])
#loc361 = loc(fused[#loc239, #loc240])
#loc362 = loc(fused[#loc243, #loc244])
#loc363 = loc(fused[#loc246, #loc247])
#loc364 = loc(fused[#loc248, #loc240])
#loc365 = loc(fused[#loc251, #loc252])
#loc366 = loc(fused[#loc253, #loc254])
#loc367 = loc(fused[#loc255, #loc252])
#loc368 = loc(fused[#loc258, #loc259])
#loc369 = loc(fused[#loc260, #loc261])
#loc370 = loc(fused[#loc262, #loc259])
