!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone})>
#fn_attr2 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc35 = loc("../../../testcasesupport/std_testcase.h":61:7)
#loc107 = loc("CWE590_Free_Memory_Not_on_Heap__delete_class_alloca_02.cpp":113:10)
#loc108 = loc("CWE590_Free_Memory_Not_on_Heap__delete_class_alloca_02.cpp":113:14)
#loc109 = loc("CWE590_Free_Memory_Not_on_Heap__delete_class_alloca_02.cpp":113:20)
#loc110 = loc("CWE590_Free_Memory_Not_on_Heap__delete_class_alloca_02.cpp":113:32)
!ty_TwoIntsClass = !cir.struct<class "TwoIntsClass" {!s32i, !s32i} #cir.record.decl.ast>
#loc163 = loc(fused[#loc107, #loc108])
#loc164 = loc(fused[#loc109, #loc110])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE590_Free_Memory_Not_on_Heap/s02/CWE590_Free_Memory_Not_on_Heap__delete_class_alloca_02.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @printIntLine(!s32i) loc(#loc123)
  cir.func private @_ZdlPv(!cir.ptr<!void>) extra(#fn_attr) loc(#loc124)
  cir.func @_ZN54CWE590_Free_Memory_Not_on_Heap__delete_class_alloca_023badEv() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, ["data"] {alignment = 8 : i64} loc(#loc126)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!ty_TwoIntsClass> loc(#loc9)
    cir.store %1, %0 : !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>> loc(#loc127)
    cir.scope {
      %7 = cir.const #cir.int<1> : !s32i loc(#loc13)
      %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc13)
      cir.if %8 {
        cir.scope {
          %9 = cir.alloca !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, ["dataBuffer", init] {alignment = 8 : i64} loc(#loc131)
          %10 = cir.const #cir.int<8> : !u64i loc(#loc18)
          %11 = cir.alloca !u8i, !cir.ptr<!u8i>, %10 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc18)
          %12 = cir.cast(bitcast, %11 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc18)
          %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!ty_TwoIntsClass> loc(#loc18)
          cir.store %13, %9 : !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>> loc(#loc131)
          %14 = cir.const #cir.int<2> : !s32i loc(#loc19)
          %15 = cir.load %9 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc20)
          %16 = cir.get_member %15[0] {name = "intOne"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc21)
          cir.store %14, %16 : !s32i, !cir.ptr<!s32i> loc(#loc132)
          %17 = cir.const #cir.int<2> : !s32i loc(#loc22)
          %18 = cir.load %9 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc23)
          %19 = cir.get_member %18[1] {name = "intTwo"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc24)
          cir.store %17, %19 : !s32i, !cir.ptr<!s32i> loc(#loc133)
          %20 = cir.load %9 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc25)
          cir.store %20, %0 : !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>> loc(#loc134)
        } loc(#loc130)
      } loc(#loc129)
    } loc(#loc128)
    %2 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc27)
    %3 = cir.get_member %2[0] {name = "intOne"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc21)
    %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc28)
    cir.call @printIntLine(%4) : (!s32i) -> () loc(#loc29)
    %5 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc30)
    %6 = cir.cast(bitcast, %5 : !cir.ptr<!ty_TwoIntsClass>), !cir.ptr<!void> loc(#loc30)
    cir.call @_ZdlPv(%6) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc31)
    cir.return loc(#loc6)
  } loc(#loc125)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc32)
  cir.func private @_Znwm(!u64i) -> !cir.ptr<!void> loc(#loc135)
  cir.func linkonce_odr @_ZN12TwoIntsClassC2Ev(%arg0: !cir.ptr<!ty_TwoIntsClass> loc("../../../testcasesupport/std_testcase.h":61:7)) extra(#fn_attr2) {
    %0 = cir.alloca !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, ["this", init] {alignment = 8 : i64} loc(#loc35)
    cir.store %arg0, %0 : !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>> loc(#loc35)
    %1 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc35)
    cir.return loc(#loc35)
  } loc(#loc35)
  cir.func internal private @_ZN54CWE590_Free_Memory_Not_on_Heap__delete_class_alloca_02L8goodG2B1Ev() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, ["data"] {alignment = 8 : i64} loc(#loc137)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!ty_TwoIntsClass> loc(#loc40)
    cir.store %1, %0 : !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>> loc(#loc138)
    cir.scope {
      %7 = cir.const #cir.int<0> : !s32i loc(#loc44)
      %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc44)
      cir.if %8 {
        %9 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc32)
        %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc32)
        cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc48)
      } else {
        cir.scope {
          %9 = cir.alloca !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, ["dataBuffer", init] {alignment = 8 : i64} loc(#loc142)
          %10 = cir.const #cir.int<8> : !u64i loc(#loc143)
          %11 = cir.call @_Znwm(%10) : (!u64i) -> !cir.ptr<!void> loc(#loc142)
          %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!ty_TwoIntsClass> loc(#loc143)
          cir.call @_ZN12TwoIntsClassC2Ev(%12) : (!cir.ptr<!ty_TwoIntsClass>) -> () extra(#fn_attr) loc(#loc52)
          cir.store %12, %9 : !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>> loc(#loc142)
          %13 = cir.const #cir.int<2> : !s32i loc(#loc54)
          %14 = cir.load %9 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc55)
          %15 = cir.get_member %14[0] {name = "intOne"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc21)
          cir.store %13, %15 : !s32i, !cir.ptr<!s32i> loc(#loc144)
          %16 = cir.const #cir.int<2> : !s32i loc(#loc56)
          %17 = cir.load %9 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc57)
          %18 = cir.get_member %17[1] {name = "intTwo"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc24)
          cir.store %16, %18 : !s32i, !cir.ptr<!s32i> loc(#loc145)
          %19 = cir.load %9 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc58)
          cir.store %19, %0 : !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>> loc(#loc146)
        } loc(#loc141)
      } loc(#loc140)
    } loc(#loc139)
    %2 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc60)
    %3 = cir.get_member %2[0] {name = "intOne"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc21)
    %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc61)
    cir.call @printIntLine(%4) : (!s32i) -> () loc(#loc62)
    %5 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc63)
    %6 = cir.cast(bitcast, %5 : !cir.ptr<!ty_TwoIntsClass>), !cir.ptr<!void> loc(#loc63)
    cir.call @_ZdlPv(%6) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc64)
    cir.return loc(#loc37)
  } loc(#loc136)
  cir.func internal private @_ZN54CWE590_Free_Memory_Not_on_Heap__delete_class_alloca_02L8goodG2B2Ev() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, ["data"] {alignment = 8 : i64} loc(#loc148)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!ty_TwoIntsClass> loc(#loc69)
    cir.store %1, %0 : !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>> loc(#loc149)
    cir.scope {
      %7 = cir.const #cir.int<1> : !s32i loc(#loc73)
      %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc73)
      cir.if %8 {
        cir.scope {
          %9 = cir.alloca !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, ["dataBuffer", init] {alignment = 8 : i64} loc(#loc153)
          %10 = cir.const #cir.int<8> : !u64i loc(#loc154)
          %11 = cir.call @_Znwm(%10) : (!u64i) -> !cir.ptr<!void> loc(#loc153)
          %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!ty_TwoIntsClass> loc(#loc154)
          cir.call @_ZN12TwoIntsClassC2Ev(%12) : (!cir.ptr<!ty_TwoIntsClass>) -> () extra(#fn_attr) loc(#loc78)
          cir.store %12, %9 : !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>> loc(#loc153)
          %13 = cir.const #cir.int<2> : !s32i loc(#loc80)
          %14 = cir.load %9 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc81)
          %15 = cir.get_member %14[0] {name = "intOne"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc21)
          cir.store %13, %15 : !s32i, !cir.ptr<!s32i> loc(#loc155)
          %16 = cir.const #cir.int<2> : !s32i loc(#loc82)
          %17 = cir.load %9 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc83)
          %18 = cir.get_member %17[1] {name = "intTwo"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc24)
          cir.store %16, %18 : !s32i, !cir.ptr<!s32i> loc(#loc156)
          %19 = cir.load %9 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc84)
          cir.store %19, %0 : !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>> loc(#loc157)
        } loc(#loc152)
      } loc(#loc151)
    } loc(#loc150)
    %2 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc86)
    %3 = cir.get_member %2[0] {name = "intOne"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc21)
    %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc87)
    cir.call @printIntLine(%4) : (!s32i) -> () loc(#loc88)
    %5 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc89)
    %6 = cir.cast(bitcast, %5 : !cir.ptr<!ty_TwoIntsClass>), !cir.ptr<!void> loc(#loc89)
    cir.call @_ZdlPv(%6) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc90)
    cir.return loc(#loc66)
  } loc(#loc147)
  cir.func @_ZN54CWE590_Free_Memory_Not_on_Heap__delete_class_alloca_024goodEv() extra(#fn_attr1) {
    cir.call @_ZN54CWE590_Free_Memory_Not_on_Heap__delete_class_alloca_02L8goodG2B1Ev() : () -> () loc(#loc93)
    cir.call @_ZN54CWE590_Free_Memory_Not_on_Heap__delete_class_alloca_02L8goodG2B2Ev() : () -> () loc(#loc94)
    cir.return loc(#loc92)
  } loc(#loc158)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc159)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc160)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc161)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc101)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc102)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc103)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc104)
  cir.func @main(%arg0: !s32i loc(fused[#loc107, #loc108]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc109, #loc110])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc163)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc164)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc106)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc111)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc111)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc112)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc113)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc113)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc114)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc101)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc101)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc115)
    cir.call @_ZN54CWE590_Free_Memory_Not_on_Heap__delete_class_alloca_024goodEv() : () -> () loc(#loc116)
    %8 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc102)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc102)
    cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc117)
    %10 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc103)
    %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc103)
    cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc118)
    cir.call @_ZN54CWE590_Free_Memory_Not_on_Heap__delete_class_alloca_023badEv() : () -> () loc(#loc119)
    %12 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc104)
    %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc104)
    cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc120)
    %14 = cir.const #cir.int<0> : !s32i loc(#loc121)
    cir.store %14, %2 : !s32i, !cir.ptr<!s32i> loc(#loc165)
    %15 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc165)
    cir.return %15 : !s32i loc(#loc165)
  } loc(#loc162)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE590_Free_Memory_Not_on_Heap/s02/CWE590_Free_Memory_Not_on_Heap__delete_class_alloca_02.cpp":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("/usr/lib/gcc/x86_64-redhat-linux/14/../../../../include/c++/14/new":135:1)
#loc4 = loc("/usr/lib/gcc/x86_64-redhat-linux/14/../../../../include/c++/14/new":136:41)
#loc5 = loc("CWE590_Free_Memory_Not_on_Heap__delete_class_alloca_02.cpp":26:1)
#loc6 = loc("CWE590_Free_Memory_Not_on_Heap__delete_class_alloca_02.cpp":43:1)
#loc7 = loc("CWE590_Free_Memory_Not_on_Heap__delete_class_alloca_02.cpp":28:5)
#loc8 = loc("CWE590_Free_Memory_Not_on_Heap__delete_class_alloca_02.cpp":28:20)
#loc9 = loc("CWE590_Free_Memory_Not_on_Heap__delete_class_alloca_02.cpp":29:12)
#loc10 = loc("CWE590_Free_Memory_Not_on_Heap__delete_class_alloca_02.cpp":29:5)
#loc11 = loc("CWE590_Free_Memory_Not_on_Heap__delete_class_alloca_02.cpp":30:5)
#loc12 = loc("CWE590_Free_Memory_Not_on_Heap__delete_class_alloca_02.cpp":39:5)
#loc13 = loc("CWE590_Free_Memory_Not_on_Heap__delete_class_alloca_02.cpp":30:8)
#loc14 = loc("CWE590_Free_Memory_Not_on_Heap__delete_class_alloca_02.cpp":31:5)
#loc15 = loc("CWE590_Free_Memory_Not_on_Heap__delete_class_alloca_02.cpp":32:9)
#loc16 = loc("CWE590_Free_Memory_Not_on_Heap__delete_class_alloca_02.cpp":38:9)
#loc17 = loc("CWE590_Free_Memory_Not_on_Heap__delete_class_alloca_02.cpp":34:13)
#loc18 = loc("CWE590_Free_Memory_Not_on_Heap__delete_class_alloca_02.cpp":34:57)
#loc19 = loc("CWE590_Free_Memory_Not_on_Heap__delete_class_alloca_02.cpp":35:34)
#loc20 = loc("CWE590_Free_Memory_Not_on_Heap__delete_class_alloca_02.cpp":35:13)
#loc21 = loc("../../../testcasesupport/std_testcase.h":64:13)
#loc22 = loc("CWE590_Free_Memory_Not_on_Heap__delete_class_alloca_02.cpp":36:34)
#loc23 = loc("CWE590_Free_Memory_Not_on_Heap__delete_class_alloca_02.cpp":36:13)
#loc24 = loc("../../../testcasesupport/std_testcase.h":65:13)
#loc25 = loc("CWE590_Free_Memory_Not_on_Heap__delete_class_alloca_02.cpp":37:20)
#loc26 = loc("CWE590_Free_Memory_Not_on_Heap__delete_class_alloca_02.cpp":37:13)
#loc27 = loc("CWE590_Free_Memory_Not_on_Heap__delete_class_alloca_02.cpp":40:18)
#loc28 = loc("CWE590_Free_Memory_Not_on_Heap__delete_class_alloca_02.cpp":40:24)
#loc29 = loc("CWE590_Free_Memory_Not_on_Heap__delete_class_alloca_02.cpp":40:5)
#loc30 = loc("CWE590_Free_Memory_Not_on_Heap__delete_class_alloca_02.cpp":42:12)
#loc31 = loc("CWE590_Free_Memory_Not_on_Heap__delete_class_alloca_02.cpp":26:6)
#loc32 = loc("CWE590_Free_Memory_Not_on_Heap__delete_class_alloca_02.cpp":57:19)
#loc33 = loc("/usr/lib/gcc/x86_64-redhat-linux/14/../../../../include/c++/14/new":131:20)
#loc34 = loc("/usr/lib/gcc/x86_64-redhat-linux/14/../../../../include/c++/14/new":132:41)
#loc36 = loc("CWE590_Free_Memory_Not_on_Heap__delete_class_alloca_02.cpp":50:1)
#loc37 = loc("CWE590_Free_Memory_Not_on_Heap__delete_class_alloca_02.cpp":72:1)
#loc38 = loc("CWE590_Free_Memory_Not_on_Heap__delete_class_alloca_02.cpp":52:5)
#loc39 = loc("CWE590_Free_Memory_Not_on_Heap__delete_class_alloca_02.cpp":52:20)
#loc40 = loc("CWE590_Free_Memory_Not_on_Heap__delete_class_alloca_02.cpp":53:12)
#loc41 = loc("CWE590_Free_Memory_Not_on_Heap__delete_class_alloca_02.cpp":53:5)
#loc42 = loc("CWE590_Free_Memory_Not_on_Heap__delete_class_alloca_02.cpp":54:5)
#loc43 = loc("CWE590_Free_Memory_Not_on_Heap__delete_class_alloca_02.cpp":68:5)
#loc44 = loc("CWE590_Free_Memory_Not_on_Heap__delete_class_alloca_02.cpp":54:8)
#loc45 = loc("CWE590_Free_Memory_Not_on_Heap__delete_class_alloca_02.cpp":55:5)
#loc46 = loc("CWE590_Free_Memory_Not_on_Heap__delete_class_alloca_02.cpp":58:5)
#loc47 = loc("CWE590_Free_Memory_Not_on_Heap__delete_class_alloca_02.cpp":60:5)
#loc48 = loc("CWE590_Free_Memory_Not_on_Heap__delete_class_alloca_02.cpp":57:9)
#loc49 = loc("CWE590_Free_Memory_Not_on_Heap__delete_class_alloca_02.cpp":61:9)
#loc50 = loc("CWE590_Free_Memory_Not_on_Heap__delete_class_alloca_02.cpp":67:9)
#loc51 = loc("CWE590_Free_Memory_Not_on_Heap__delete_class_alloca_02.cpp":63:13)
#loc52 = loc("CWE590_Free_Memory_Not_on_Heap__delete_class_alloca_02.cpp":63:45)
#loc53 = loc("CWE590_Free_Memory_Not_on_Heap__delete_class_alloca_02.cpp":63:41)
#loc54 = loc("CWE590_Free_Memory_Not_on_Heap__delete_class_alloca_02.cpp":64:34)
#loc55 = loc("CWE590_Free_Memory_Not_on_Heap__delete_class_alloca_02.cpp":64:13)
#loc56 = loc("CWE590_Free_Memory_Not_on_Heap__delete_class_alloca_02.cpp":65:34)
#loc57 = loc("CWE590_Free_Memory_Not_on_Heap__delete_class_alloca_02.cpp":65:13)
#loc58 = loc("CWE590_Free_Memory_Not_on_Heap__delete_class_alloca_02.cpp":66:20)
#loc59 = loc("CWE590_Free_Memory_Not_on_Heap__delete_class_alloca_02.cpp":66:13)
#loc60 = loc("CWE590_Free_Memory_Not_on_Heap__delete_class_alloca_02.cpp":69:18)
#loc61 = loc("CWE590_Free_Memory_Not_on_Heap__delete_class_alloca_02.cpp":69:24)
#loc62 = loc("CWE590_Free_Memory_Not_on_Heap__delete_class_alloca_02.cpp":69:5)
#loc63 = loc("CWE590_Free_Memory_Not_on_Heap__delete_class_alloca_02.cpp":71:12)
#loc64 = loc("CWE590_Free_Memory_Not_on_Heap__delete_class_alloca_02.cpp":50:13)
#loc65 = loc("CWE590_Free_Memory_Not_on_Heap__delete_class_alloca_02.cpp":75:1)
#loc66 = loc("CWE590_Free_Memory_Not_on_Heap__delete_class_alloca_02.cpp":92:1)
#loc67 = loc("CWE590_Free_Memory_Not_on_Heap__delete_class_alloca_02.cpp":77:5)
#loc68 = loc("CWE590_Free_Memory_Not_on_Heap__delete_class_alloca_02.cpp":77:20)
#loc69 = loc("CWE590_Free_Memory_Not_on_Heap__delete_class_alloca_02.cpp":78:12)
#loc70 = loc("CWE590_Free_Memory_Not_on_Heap__delete_class_alloca_02.cpp":78:5)
#loc71 = loc("CWE590_Free_Memory_Not_on_Heap__delete_class_alloca_02.cpp":79:5)
#loc72 = loc("CWE590_Free_Memory_Not_on_Heap__delete_class_alloca_02.cpp":88:5)
#loc73 = loc("CWE590_Free_Memory_Not_on_Heap__delete_class_alloca_02.cpp":79:8)
#loc74 = loc("CWE590_Free_Memory_Not_on_Heap__delete_class_alloca_02.cpp":80:5)
#loc75 = loc("CWE590_Free_Memory_Not_on_Heap__delete_class_alloca_02.cpp":81:9)
#loc76 = loc("CWE590_Free_Memory_Not_on_Heap__delete_class_alloca_02.cpp":87:9)
#loc77 = loc("CWE590_Free_Memory_Not_on_Heap__delete_class_alloca_02.cpp":83:13)
#loc78 = loc("CWE590_Free_Memory_Not_on_Heap__delete_class_alloca_02.cpp":83:45)
#loc79 = loc("CWE590_Free_Memory_Not_on_Heap__delete_class_alloca_02.cpp":83:41)
#loc80 = loc("CWE590_Free_Memory_Not_on_Heap__delete_class_alloca_02.cpp":84:34)
#loc81 = loc("CWE590_Free_Memory_Not_on_Heap__delete_class_alloca_02.cpp":84:13)
#loc82 = loc("CWE590_Free_Memory_Not_on_Heap__delete_class_alloca_02.cpp":85:34)
#loc83 = loc("CWE590_Free_Memory_Not_on_Heap__delete_class_alloca_02.cpp":85:13)
#loc84 = loc("CWE590_Free_Memory_Not_on_Heap__delete_class_alloca_02.cpp":86:20)
#loc85 = loc("CWE590_Free_Memory_Not_on_Heap__delete_class_alloca_02.cpp":86:13)
#loc86 = loc("CWE590_Free_Memory_Not_on_Heap__delete_class_alloca_02.cpp":89:18)
#loc87 = loc("CWE590_Free_Memory_Not_on_Heap__delete_class_alloca_02.cpp":89:24)
#loc88 = loc("CWE590_Free_Memory_Not_on_Heap__delete_class_alloca_02.cpp":89:5)
#loc89 = loc("CWE590_Free_Memory_Not_on_Heap__delete_class_alloca_02.cpp":91:12)
#loc90 = loc("CWE590_Free_Memory_Not_on_Heap__delete_class_alloca_02.cpp":75:13)
#loc91 = loc("CWE590_Free_Memory_Not_on_Heap__delete_class_alloca_02.cpp":94:1)
#loc92 = loc("CWE590_Free_Memory_Not_on_Heap__delete_class_alloca_02.cpp":98:1)
#loc93 = loc("CWE590_Free_Memory_Not_on_Heap__delete_class_alloca_02.cpp":96:5)
#loc94 = loc("CWE590_Free_Memory_Not_on_Heap__delete_class_alloca_02.cpp":97:5)
#loc95 = loc("/usr/include/stdlib.h":575:1)
#loc96 = loc("/usr/include/stdlib.h":575:41)
#loc97 = loc("/usr/include/time.h":76:1)
#loc98 = loc("/usr/include/time.h":76:38)
#loc99 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc100 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc101 = loc("CWE590_Free_Memory_Not_on_Heap__delete_class_alloca_02.cpp":118:15)
#loc102 = loc("CWE590_Free_Memory_Not_on_Heap__delete_class_alloca_02.cpp":120:15)
#loc103 = loc("CWE590_Free_Memory_Not_on_Heap__delete_class_alloca_02.cpp":123:15)
#loc104 = loc("CWE590_Free_Memory_Not_on_Heap__delete_class_alloca_02.cpp":125:15)
#loc105 = loc("CWE590_Free_Memory_Not_on_Heap__delete_class_alloca_02.cpp":113:1)
#loc106 = loc("CWE590_Free_Memory_Not_on_Heap__delete_class_alloca_02.cpp":128:1)
#loc111 = loc("CWE590_Free_Memory_Not_on_Heap__delete_class_alloca_02.cpp":114:1)
#loc112 = loc("CWE590_Free_Memory_Not_on_Heap__delete_class_alloca_02.cpp":116:27)
#loc113 = loc("CWE590_Free_Memory_Not_on_Heap__delete_class_alloca_02.cpp":116:22)
#loc114 = loc("CWE590_Free_Memory_Not_on_Heap__delete_class_alloca_02.cpp":116:5)
#loc115 = loc("CWE590_Free_Memory_Not_on_Heap__delete_class_alloca_02.cpp":118:5)
#loc116 = loc("CWE590_Free_Memory_Not_on_Heap__delete_class_alloca_02.cpp":119:5)
#loc117 = loc("CWE590_Free_Memory_Not_on_Heap__delete_class_alloca_02.cpp":120:5)
#loc118 = loc("CWE590_Free_Memory_Not_on_Heap__delete_class_alloca_02.cpp":123:5)
#loc119 = loc("CWE590_Free_Memory_Not_on_Heap__delete_class_alloca_02.cpp":124:5)
#loc120 = loc("CWE590_Free_Memory_Not_on_Heap__delete_class_alloca_02.cpp":125:5)
#loc121 = loc("CWE590_Free_Memory_Not_on_Heap__delete_class_alloca_02.cpp":127:12)
#loc122 = loc("CWE590_Free_Memory_Not_on_Heap__delete_class_alloca_02.cpp":127:5)
#loc123 = loc(fused[#loc1, #loc2])
#loc124 = loc(fused[#loc3, #loc4])
#loc125 = loc(fused[#loc5, #loc6])
#loc126 = loc(fused[#loc7, #loc8])
#loc127 = loc(fused[#loc10, #loc9])
#loc128 = loc(fused[#loc11, #loc12])
#loc129 = loc(fused[#loc14, #loc12])
#loc130 = loc(fused[#loc15, #loc16])
#loc131 = loc(fused[#loc17, #loc18])
#loc132 = loc(fused[#loc20, #loc19])
#loc133 = loc(fused[#loc23, #loc22])
#loc134 = loc(fused[#loc26, #loc25])
#loc135 = loc(fused[#loc33, #loc34])
#loc136 = loc(fused[#loc36, #loc37])
#loc137 = loc(fused[#loc38, #loc39])
#loc138 = loc(fused[#loc41, #loc40])
#loc139 = loc(fused[#loc42, #loc43])
#loc140 = loc(fused[#loc45, #loc46, #loc47, #loc43])
#loc141 = loc(fused[#loc49, #loc50])
#loc142 = loc(fused[#loc51, #loc52])
#loc143 = loc(fused[#loc53, #loc52])
#loc144 = loc(fused[#loc55, #loc54])
#loc145 = loc(fused[#loc57, #loc56])
#loc146 = loc(fused[#loc59, #loc58])
#loc147 = loc(fused[#loc65, #loc66])
#loc148 = loc(fused[#loc67, #loc68])
#loc149 = loc(fused[#loc70, #loc69])
#loc150 = loc(fused[#loc71, #loc72])
#loc151 = loc(fused[#loc74, #loc72])
#loc152 = loc(fused[#loc75, #loc76])
#loc153 = loc(fused[#loc77, #loc78])
#loc154 = loc(fused[#loc79, #loc78])
#loc155 = loc(fused[#loc81, #loc80])
#loc156 = loc(fused[#loc83, #loc82])
#loc157 = loc(fused[#loc85, #loc84])
#loc158 = loc(fused[#loc91, #loc92])
#loc159 = loc(fused[#loc95, #loc96])
#loc160 = loc(fused[#loc97, #loc98])
#loc161 = loc(fused[#loc99, #loc100])
#loc162 = loc(fused[#loc105, #loc106])
#loc165 = loc(fused[#loc122, #loc121])
