!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_max_multiply_17.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @printIntLine(!s32i) loc(#loc145)
  cir.func no_proto @CWE190_Integer_Overflow__int_max_multiply_17_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc147)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["j"] {alignment = 4 : i64} loc(#loc148)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc149)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc10)
    cir.store %3, %2 : !s32i, !cir.ptr<!s32i> loc(#loc150)
    cir.scope {
      %4 = cir.const #cir.int<0> : !s32i loc(#loc14)
      cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc152)
      cir.for : cond {
        %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc16)
        %6 = cir.const #cir.int<1> : !s32i loc(#loc17)
        %7 = cir.cmp(lt, %5, %6) : !s32i, !cir.bool loc(#loc153)
        cir.condition(%7) loc(#loc18)
      } body {
        cir.scope {
          %5 = cir.const #cir.int<2147483647> : !s32i loc(#loc20)
          cir.store %5, %2 : !s32i, !cir.ptr<!s32i> loc(#loc155)
        } loc(#loc154)
        cir.yield loc(#loc13)
      } step {
        %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc22)
        %6 = cir.unary(inc, %5) nsw : !s32i, !s32i loc(#loc23)
        cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc156)
        cir.yield loc(#loc151)
      } loc(#loc151)
    } loc(#loc151)
    cir.scope {
      %4 = cir.const #cir.int<0> : !s32i loc(#loc26)
      cir.store %4, %1 : !s32i, !cir.ptr<!s32i> loc(#loc158)
      cir.for : cond {
        %5 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc28)
        %6 = cir.const #cir.int<1> : !s32i loc(#loc29)
        %7 = cir.cmp(lt, %5, %6) : !s32i, !cir.bool loc(#loc159)
        cir.condition(%7) loc(#loc30)
      } body {
        cir.scope {
          cir.scope {
            %5 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc34)
            %6 = cir.const #cir.int<0> : !s32i loc(#loc35)
            %7 = cir.cmp(gt, %5, %6) : !s32i, !cir.bool loc(#loc162)
            cir.if %7 {
              %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc164)
              %9 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc39)
              %10 = cir.const #cir.int<2> : !s32i loc(#loc38)
              %11 = cir.binop(mul, %9, %10) nsw : !s32i loc(#loc39)
              cir.store %11, %8 : !s32i, !cir.ptr<!s32i> loc(#loc164)
              %12 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc40)
              cir.call @printIntLine(%12) : (!s32i) -> () loc(#loc41)
            } loc(#loc163)
          } loc(#loc161)
        } loc(#loc160)
        cir.yield loc(#loc25)
      } step {
        %5 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc42)
        %6 = cir.unary(inc, %5) nsw : !s32i, !s32i loc(#loc43)
        cir.store %6, %1 : !s32i, !cir.ptr<!s32i> loc(#loc165)
        cir.yield loc(#loc157)
      } loc(#loc157)
    } loc(#loc157)
    cir.return loc(#loc4)
  } loc(#loc146)
  cir.func no_proto @CWE190_Integer_Overflow__int_max_multiply_17_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc167)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc46)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc168)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc48)
    cir.return loc(#loc45)
  } loc(#loc166)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc169)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc52)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc171)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["k"] {alignment = 4 : i64} loc(#loc172)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc173)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc60)
    cir.store %3, %2 : !s32i, !cir.ptr<!s32i> loc(#loc174)
    cir.scope {
      %4 = cir.const #cir.int<0> : !s32i loc(#loc64)
      cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc176)
      cir.for : cond {
        %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc66)
        %6 = cir.const #cir.int<1> : !s32i loc(#loc67)
        %7 = cir.cmp(lt, %5, %6) : !s32i, !cir.bool loc(#loc177)
        cir.condition(%7) loc(#loc68)
      } body {
        cir.scope {
          %5 = cir.const #cir.int<2147483647> : !s32i loc(#loc70)
          cir.store %5, %2 : !s32i, !cir.ptr<!s32i> loc(#loc179)
        } loc(#loc178)
        cir.yield loc(#loc63)
      } step {
        %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc72)
        %6 = cir.unary(inc, %5) nsw : !s32i, !s32i loc(#loc73)
        cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc180)
        cir.yield loc(#loc175)
      } loc(#loc175)
    } loc(#loc175)
    cir.scope {
      %4 = cir.const #cir.int<0> : !s32i loc(#loc76)
      cir.store %4, %1 : !s32i, !cir.ptr<!s32i> loc(#loc182)
      cir.for : cond {
        %5 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc78)
        %6 = cir.const #cir.int<1> : !s32i loc(#loc79)
        %7 = cir.cmp(lt, %5, %6) : !s32i, !cir.bool loc(#loc183)
        cir.condition(%7) loc(#loc80)
      } body {
        cir.scope {
          cir.scope {
            %5 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc84)
            %6 = cir.const #cir.int<0> : !s32i loc(#loc85)
            %7 = cir.cmp(gt, %5, %6) : !s32i, !cir.bool loc(#loc186)
            cir.if %7 {
              cir.scope {
                %8 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc89)
                %9 = cir.const #cir.int<2147483647> : !s32i loc(#loc90)
                %10 = cir.const #cir.int<2> : !s32i loc(#loc91)
                %11 = cir.binop(div, %9, %10) : !s32i loc(#loc189)
                %12 = cir.cmp(lt, %8, %11) : !s32i, !cir.bool loc(#loc190)
                cir.if %12 {
                  %13 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc192)
                  %14 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc98)
                  %15 = cir.const #cir.int<2> : !s32i loc(#loc97)
                  %16 = cir.binop(mul, %14, %15) nsw : !s32i loc(#loc98)
                  cir.store %16, %13 : !s32i, !cir.ptr<!s32i> loc(#loc192)
                  %17 = cir.load %13 : !cir.ptr<!s32i>, !s32i loc(#loc99)
                  cir.call @printIntLine(%17) : (!s32i) -> () loc(#loc100)
                } else {
                  %13 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc52)
                  %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc52)
                  cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc101)
                } loc(#loc191)
              } loc(#loc188)
            } loc(#loc187)
          } loc(#loc185)
        } loc(#loc184)
        cir.yield loc(#loc75)
      } step {
        %5 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc102)
        %6 = cir.unary(inc, %5) nsw : !s32i, !s32i loc(#loc103)
        cir.store %6, %1 : !s32i, !cir.ptr<!s32i> loc(#loc193)
        cir.yield loc(#loc181)
      } loc(#loc181)
    } loc(#loc181)
    cir.return loc(#loc54)
  } loc(#loc170)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["h"] {alignment = 4 : i64} loc(#loc195)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["j"] {alignment = 4 : i64} loc(#loc196)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc197)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc111)
    cir.store %3, %2 : !s32i, !cir.ptr<!s32i> loc(#loc198)
    cir.scope {
      %4 = cir.const #cir.int<0> : !s32i loc(#loc115)
      cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc200)
      cir.for : cond {
        %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc117)
        %6 = cir.const #cir.int<1> : !s32i loc(#loc118)
        %7 = cir.cmp(lt, %5, %6) : !s32i, !cir.bool loc(#loc201)
        cir.condition(%7) loc(#loc119)
      } body {
        cir.scope {
          %5 = cir.const #cir.int<2> : !s32i loc(#loc121)
          cir.store %5, %2 : !s32i, !cir.ptr<!s32i> loc(#loc203)
        } loc(#loc202)
        cir.yield loc(#loc114)
      } step {
        %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc123)
        %6 = cir.unary(inc, %5) nsw : !s32i, !s32i loc(#loc124)
        cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc204)
        cir.yield loc(#loc199)
      } loc(#loc199)
    } loc(#loc199)
    cir.scope {
      %4 = cir.const #cir.int<0> : !s32i loc(#loc127)
      cir.store %4, %1 : !s32i, !cir.ptr<!s32i> loc(#loc206)
      cir.for : cond {
        %5 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc129)
        %6 = cir.const #cir.int<1> : !s32i loc(#loc130)
        %7 = cir.cmp(lt, %5, %6) : !s32i, !cir.bool loc(#loc207)
        cir.condition(%7) loc(#loc131)
      } body {
        cir.scope {
          cir.scope {
            %5 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc135)
            %6 = cir.const #cir.int<0> : !s32i loc(#loc136)
            %7 = cir.cmp(gt, %5, %6) : !s32i, !cir.bool loc(#loc210)
            cir.if %7 {
              %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc212)
              %9 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc140)
              %10 = cir.const #cir.int<2> : !s32i loc(#loc139)
              %11 = cir.binop(mul, %9, %10) nsw : !s32i loc(#loc140)
              cir.store %11, %8 : !s32i, !cir.ptr<!s32i> loc(#loc212)
              %12 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc141)
              cir.call @printIntLine(%12) : (!s32i) -> () loc(#loc142)
            } loc(#loc211)
          } loc(#loc209)
        } loc(#loc208)
        cir.yield loc(#loc126)
      } step {
        %5 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc143)
        %6 = cir.unary(inc, %5) nsw : !s32i, !s32i loc(#loc144)
        cir.store %6, %1 : !s32i, !cir.ptr<!s32i> loc(#loc213)
        cir.yield loc(#loc205)
      } loc(#loc205)
    } loc(#loc205)
    cir.return loc(#loc105)
  } loc(#loc194)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_max_multiply_17.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("CWE190_Integer_Overflow__int_max_multiply_17.c":22:1)
#loc4 = loc("CWE190_Integer_Overflow__int_max_multiply_17.c":42:1)
#loc5 = loc("CWE190_Integer_Overflow__int_max_multiply_17.c":24:5)
#loc6 = loc("CWE190_Integer_Overflow__int_max_multiply_17.c":24:9)
#loc7 = loc("CWE190_Integer_Overflow__int_max_multiply_17.c":24:11)
#loc8 = loc("CWE190_Integer_Overflow__int_max_multiply_17.c":25:5)
#loc9 = loc("CWE190_Integer_Overflow__int_max_multiply_17.c":25:9)
#loc10 = loc("CWE190_Integer_Overflow__int_max_multiply_17.c":27:12)
#loc11 = loc("CWE190_Integer_Overflow__int_max_multiply_17.c":27:5)
#loc12 = loc("CWE190_Integer_Overflow__int_max_multiply_17.c":28:5)
#loc13 = loc("CWE190_Integer_Overflow__int_max_multiply_17.c":32:5)
#loc14 = loc("CWE190_Integer_Overflow__int_max_multiply_17.c":28:13)
#loc15 = loc("CWE190_Integer_Overflow__int_max_multiply_17.c":28:9)
#loc16 = loc("CWE190_Integer_Overflow__int_max_multiply_17.c":28:16)
#loc17 = loc("CWE190_Integer_Overflow__int_max_multiply_17.c":28:20)
#loc18 = loc("CWE190_Integer_Overflow__int_max_multiply_17.c":28:18)
#loc19 = loc("CWE190_Integer_Overflow__int_max_multiply_17.c":29:5)
#loc20 = loc("CWE190_Integer_Overflow__int_max_multiply_17.c":31:16)
#loc21 = loc("CWE190_Integer_Overflow__int_max_multiply_17.c":31:9)
#loc22 = loc("CWE190_Integer_Overflow__int_max_multiply_17.c":28:24)
#loc23 = loc("CWE190_Integer_Overflow__int_max_multiply_17.c":28:23)
#loc24 = loc("CWE190_Integer_Overflow__int_max_multiply_17.c":33:5)
#loc25 = loc("CWE190_Integer_Overflow__int_max_multiply_17.c":41:5)
#loc26 = loc("CWE190_Integer_Overflow__int_max_multiply_17.c":33:13)
#loc27 = loc("CWE190_Integer_Overflow__int_max_multiply_17.c":33:9)
#loc28 = loc("CWE190_Integer_Overflow__int_max_multiply_17.c":33:16)
#loc29 = loc("CWE190_Integer_Overflow__int_max_multiply_17.c":33:20)
#loc30 = loc("CWE190_Integer_Overflow__int_max_multiply_17.c":33:18)
#loc31 = loc("CWE190_Integer_Overflow__int_max_multiply_17.c":34:5)
#loc32 = loc("CWE190_Integer_Overflow__int_max_multiply_17.c":35:9)
#loc33 = loc("CWE190_Integer_Overflow__int_max_multiply_17.c":40:9)
#loc34 = loc("CWE190_Integer_Overflow__int_max_multiply_17.c":35:12)
#loc35 = loc("CWE190_Integer_Overflow__int_max_multiply_17.c":35:19)
#loc36 = loc("CWE190_Integer_Overflow__int_max_multiply_17.c":36:9)
#loc37 = loc("CWE190_Integer_Overflow__int_max_multiply_17.c":38:13)
#loc38 = loc("CWE190_Integer_Overflow__int_max_multiply_17.c":38:33)
#loc39 = loc("CWE190_Integer_Overflow__int_max_multiply_17.c":38:26)
#loc40 = loc("CWE190_Integer_Overflow__int_max_multiply_17.c":39:26)
#loc41 = loc("CWE190_Integer_Overflow__int_max_multiply_17.c":39:13)
#loc42 = loc("CWE190_Integer_Overflow__int_max_multiply_17.c":33:24)
#loc43 = loc("CWE190_Integer_Overflow__int_max_multiply_17.c":33:23)
#loc44 = loc("CWE190_Integer_Overflow__int_max_multiply_17.c":101:1)
#loc45 = loc("CWE190_Integer_Overflow__int_max_multiply_17.c":105:1)
#loc46 = loc("CWE190_Integer_Overflow__int_max_multiply_17.c":103:5)
#loc47 = loc("CWE190_Integer_Overflow__int_max_multiply_17.c":103:13)
#loc48 = loc("CWE190_Integer_Overflow__int_max_multiply_17.c":104:5)
#loc49 = loc("CWE190_Integer_Overflow__int_max_multiply_17.c":104:13)
#loc50 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc51 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc52 = loc("CWE190_Integer_Overflow__int_max_multiply_17.c":72:27)
#loc53 = loc("CWE190_Integer_Overflow__int_max_multiply_17.c":49:1)
#loc54 = loc("CWE190_Integer_Overflow__int_max_multiply_17.c":76:1)
#loc55 = loc("CWE190_Integer_Overflow__int_max_multiply_17.c":51:5)
#loc56 = loc("CWE190_Integer_Overflow__int_max_multiply_17.c":51:9)
#loc57 = loc("CWE190_Integer_Overflow__int_max_multiply_17.c":51:11)
#loc58 = loc("CWE190_Integer_Overflow__int_max_multiply_17.c":52:5)
#loc59 = loc("CWE190_Integer_Overflow__int_max_multiply_17.c":52:9)
#loc60 = loc("CWE190_Integer_Overflow__int_max_multiply_17.c":54:12)
#loc61 = loc("CWE190_Integer_Overflow__int_max_multiply_17.c":54:5)
#loc62 = loc("CWE190_Integer_Overflow__int_max_multiply_17.c":55:5)
#loc63 = loc("CWE190_Integer_Overflow__int_max_multiply_17.c":59:5)
#loc64 = loc("CWE190_Integer_Overflow__int_max_multiply_17.c":55:13)
#loc65 = loc("CWE190_Integer_Overflow__int_max_multiply_17.c":55:9)
#loc66 = loc("CWE190_Integer_Overflow__int_max_multiply_17.c":55:16)
#loc67 = loc("CWE190_Integer_Overflow__int_max_multiply_17.c":55:20)
#loc68 = loc("CWE190_Integer_Overflow__int_max_multiply_17.c":55:18)
#loc69 = loc("CWE190_Integer_Overflow__int_max_multiply_17.c":56:5)
#loc70 = loc("CWE190_Integer_Overflow__int_max_multiply_17.c":58:16)
#loc71 = loc("CWE190_Integer_Overflow__int_max_multiply_17.c":58:9)
#loc72 = loc("CWE190_Integer_Overflow__int_max_multiply_17.c":55:24)
#loc73 = loc("CWE190_Integer_Overflow__int_max_multiply_17.c":55:23)
#loc74 = loc("CWE190_Integer_Overflow__int_max_multiply_17.c":60:5)
#loc75 = loc("CWE190_Integer_Overflow__int_max_multiply_17.c":75:5)
#loc76 = loc("CWE190_Integer_Overflow__int_max_multiply_17.c":60:13)
#loc77 = loc("CWE190_Integer_Overflow__int_max_multiply_17.c":60:9)
#loc78 = loc("CWE190_Integer_Overflow__int_max_multiply_17.c":60:16)
#loc79 = loc("CWE190_Integer_Overflow__int_max_multiply_17.c":60:20)
#loc80 = loc("CWE190_Integer_Overflow__int_max_multiply_17.c":60:18)
#loc81 = loc("CWE190_Integer_Overflow__int_max_multiply_17.c":61:5)
#loc82 = loc("CWE190_Integer_Overflow__int_max_multiply_17.c":62:9)
#loc83 = loc("CWE190_Integer_Overflow__int_max_multiply_17.c":74:9)
#loc84 = loc("CWE190_Integer_Overflow__int_max_multiply_17.c":62:12)
#loc85 = loc("CWE190_Integer_Overflow__int_max_multiply_17.c":62:19)
#loc86 = loc("CWE190_Integer_Overflow__int_max_multiply_17.c":63:9)
#loc87 = loc("CWE190_Integer_Overflow__int_max_multiply_17.c":65:13)
#loc88 = loc("CWE190_Integer_Overflow__int_max_multiply_17.c":73:13)
#loc89 = loc("CWE190_Integer_Overflow__int_max_multiply_17.c":65:17)
#loc90 = loc("CWE190_Integer_Overflow__int_max_multiply_17.c":65:25)
#loc91 = loc("CWE190_Integer_Overflow__int_max_multiply_17.c":65:33)
#loc92 = loc("CWE190_Integer_Overflow__int_max_multiply_17.c":65:34)
#loc93 = loc("CWE190_Integer_Overflow__int_max_multiply_17.c":66:13)
#loc94 = loc("CWE190_Integer_Overflow__int_max_multiply_17.c":69:13)
#loc95 = loc("CWE190_Integer_Overflow__int_max_multiply_17.c":71:13)
#loc96 = loc("CWE190_Integer_Overflow__int_max_multiply_17.c":67:17)
#loc97 = loc("CWE190_Integer_Overflow__int_max_multiply_17.c":67:37)
#loc98 = loc("CWE190_Integer_Overflow__int_max_multiply_17.c":67:30)
#loc99 = loc("CWE190_Integer_Overflow__int_max_multiply_17.c":68:30)
#loc100 = loc("CWE190_Integer_Overflow__int_max_multiply_17.c":68:17)
#loc101 = loc("CWE190_Integer_Overflow__int_max_multiply_17.c":72:17)
#loc102 = loc("CWE190_Integer_Overflow__int_max_multiply_17.c":60:24)
#loc103 = loc("CWE190_Integer_Overflow__int_max_multiply_17.c":60:23)
#loc104 = loc("CWE190_Integer_Overflow__int_max_multiply_17.c":79:1)
#loc105 = loc("CWE190_Integer_Overflow__int_max_multiply_17.c":99:1)
#loc106 = loc("CWE190_Integer_Overflow__int_max_multiply_17.c":81:5)
#loc107 = loc("CWE190_Integer_Overflow__int_max_multiply_17.c":81:9)
#loc108 = loc("CWE190_Integer_Overflow__int_max_multiply_17.c":81:11)
#loc109 = loc("CWE190_Integer_Overflow__int_max_multiply_17.c":82:5)
#loc110 = loc("CWE190_Integer_Overflow__int_max_multiply_17.c":82:9)
#loc111 = loc("CWE190_Integer_Overflow__int_max_multiply_17.c":84:12)
#loc112 = loc("CWE190_Integer_Overflow__int_max_multiply_17.c":84:5)
#loc113 = loc("CWE190_Integer_Overflow__int_max_multiply_17.c":85:5)
#loc114 = loc("CWE190_Integer_Overflow__int_max_multiply_17.c":89:5)
#loc115 = loc("CWE190_Integer_Overflow__int_max_multiply_17.c":85:13)
#loc116 = loc("CWE190_Integer_Overflow__int_max_multiply_17.c":85:9)
#loc117 = loc("CWE190_Integer_Overflow__int_max_multiply_17.c":85:16)
#loc118 = loc("CWE190_Integer_Overflow__int_max_multiply_17.c":85:20)
#loc119 = loc("CWE190_Integer_Overflow__int_max_multiply_17.c":85:18)
#loc120 = loc("CWE190_Integer_Overflow__int_max_multiply_17.c":86:5)
#loc121 = loc("CWE190_Integer_Overflow__int_max_multiply_17.c":88:16)
#loc122 = loc("CWE190_Integer_Overflow__int_max_multiply_17.c":88:9)
#loc123 = loc("CWE190_Integer_Overflow__int_max_multiply_17.c":85:24)
#loc124 = loc("CWE190_Integer_Overflow__int_max_multiply_17.c":85:23)
#loc125 = loc("CWE190_Integer_Overflow__int_max_multiply_17.c":90:5)
#loc126 = loc("CWE190_Integer_Overflow__int_max_multiply_17.c":98:5)
#loc127 = loc("CWE190_Integer_Overflow__int_max_multiply_17.c":90:13)
#loc128 = loc("CWE190_Integer_Overflow__int_max_multiply_17.c":90:9)
#loc129 = loc("CWE190_Integer_Overflow__int_max_multiply_17.c":90:16)
#loc130 = loc("CWE190_Integer_Overflow__int_max_multiply_17.c":90:20)
#loc131 = loc("CWE190_Integer_Overflow__int_max_multiply_17.c":90:18)
#loc132 = loc("CWE190_Integer_Overflow__int_max_multiply_17.c":91:5)
#loc133 = loc("CWE190_Integer_Overflow__int_max_multiply_17.c":92:9)
#loc134 = loc("CWE190_Integer_Overflow__int_max_multiply_17.c":97:9)
#loc135 = loc("CWE190_Integer_Overflow__int_max_multiply_17.c":92:12)
#loc136 = loc("CWE190_Integer_Overflow__int_max_multiply_17.c":92:19)
#loc137 = loc("CWE190_Integer_Overflow__int_max_multiply_17.c":93:9)
#loc138 = loc("CWE190_Integer_Overflow__int_max_multiply_17.c":95:13)
#loc139 = loc("CWE190_Integer_Overflow__int_max_multiply_17.c":95:33)
#loc140 = loc("CWE190_Integer_Overflow__int_max_multiply_17.c":95:26)
#loc141 = loc("CWE190_Integer_Overflow__int_max_multiply_17.c":96:26)
#loc142 = loc("CWE190_Integer_Overflow__int_max_multiply_17.c":96:13)
#loc143 = loc("CWE190_Integer_Overflow__int_max_multiply_17.c":90:24)
#loc144 = loc("CWE190_Integer_Overflow__int_max_multiply_17.c":90:23)
#loc145 = loc(fused[#loc1, #loc2])
#loc146 = loc(fused[#loc3, #loc4])
#loc147 = loc(fused[#loc5, #loc6])
#loc148 = loc(fused[#loc5, #loc7])
#loc149 = loc(fused[#loc8, #loc9])
#loc150 = loc(fused[#loc11, #loc10])
#loc151 = loc(fused[#loc12, #loc13])
#loc152 = loc(fused[#loc15, #loc14])
#loc153 = loc(fused[#loc16, #loc17])
#loc154 = loc(fused[#loc19, #loc13])
#loc155 = loc(fused[#loc21, #loc20])
#loc156 = loc(fused[#loc23, #loc22])
#loc157 = loc(fused[#loc24, #loc25])
#loc158 = loc(fused[#loc27, #loc26])
#loc159 = loc(fused[#loc28, #loc29])
#loc160 = loc(fused[#loc31, #loc25])
#loc161 = loc(fused[#loc32, #loc33])
#loc162 = loc(fused[#loc34, #loc35])
#loc163 = loc(fused[#loc36, #loc33])
#loc164 = loc(fused[#loc37, #loc38])
#loc165 = loc(fused[#loc43, #loc42])
#loc166 = loc(fused[#loc44, #loc45])
#loc167 = loc(fused[#loc46, #loc47])
#loc168 = loc(fused[#loc48, #loc49])
#loc169 = loc(fused[#loc50, #loc51])
#loc170 = loc(fused[#loc53, #loc54])
#loc171 = loc(fused[#loc55, #loc56])
#loc172 = loc(fused[#loc55, #loc57])
#loc173 = loc(fused[#loc58, #loc59])
#loc174 = loc(fused[#loc61, #loc60])
#loc175 = loc(fused[#loc62, #loc63])
#loc176 = loc(fused[#loc65, #loc64])
#loc177 = loc(fused[#loc66, #loc67])
#loc178 = loc(fused[#loc69, #loc63])
#loc179 = loc(fused[#loc71, #loc70])
#loc180 = loc(fused[#loc73, #loc72])
#loc181 = loc(fused[#loc74, #loc75])
#loc182 = loc(fused[#loc77, #loc76])
#loc183 = loc(fused[#loc78, #loc79])
#loc184 = loc(fused[#loc81, #loc75])
#loc185 = loc(fused[#loc82, #loc83])
#loc186 = loc(fused[#loc84, #loc85])
#loc187 = loc(fused[#loc86, #loc83])
#loc188 = loc(fused[#loc87, #loc88])
#loc189 = loc(fused[#loc90, #loc91])
#loc190 = loc(fused[#loc89, #loc92])
#loc191 = loc(fused[#loc93, #loc94, #loc95, #loc88])
#loc192 = loc(fused[#loc96, #loc97])
#loc193 = loc(fused[#loc103, #loc102])
#loc194 = loc(fused[#loc104, #loc105])
#loc195 = loc(fused[#loc106, #loc107])
#loc196 = loc(fused[#loc106, #loc108])
#loc197 = loc(fused[#loc109, #loc110])
#loc198 = loc(fused[#loc112, #loc111])
#loc199 = loc(fused[#loc113, #loc114])
#loc200 = loc(fused[#loc116, #loc115])
#loc201 = loc(fused[#loc117, #loc118])
#loc202 = loc(fused[#loc120, #loc114])
#loc203 = loc(fused[#loc122, #loc121])
#loc204 = loc(fused[#loc124, #loc123])
#loc205 = loc(fused[#loc125, #loc126])
#loc206 = loc(fused[#loc128, #loc127])
#loc207 = loc(fused[#loc129, #loc130])
#loc208 = loc(fused[#loc132, #loc126])
#loc209 = loc(fused[#loc133, #loc134])
#loc210 = loc(fused[#loc135, #loc136])
#loc211 = loc(fused[#loc137, #loc134])
#loc212 = loc(fused[#loc138, #loc139])
#loc213 = loc(fused[#loc144, #loc143])
