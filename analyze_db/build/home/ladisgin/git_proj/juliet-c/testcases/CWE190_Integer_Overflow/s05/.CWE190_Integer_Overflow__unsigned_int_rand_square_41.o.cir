!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc7 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_41.c":24:21)
#loc8 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_41.c":24:34)
#loc23 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_41.c":38:26)
#loc39 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_41.c":66:25)
#loc40 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_41.c":66:38)
#loc64 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_41.c":85:26)
#loc70 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_41.c":47:25)
#loc71 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_41.c":47:38)
#loc93 = loc(fused[#loc7, #loc8])
#loc106 = loc(fused[#loc39, #loc40])
#loc117 = loc(fused[#loc70, #loc71])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_rand_square_41.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc90)
  cir.func private @printUnsignedLine(!u32i) loc(#loc91)
  cir.func internal private @badSink(%arg0: !u32i loc(fused[#loc7, #loc8])) extra(#fn_attr1) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc94)
    %1 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data", init] {alignment = 4 : i64} loc(#loc93)
    cir.store %arg0, %1 : !u32i, !cir.ptr<!u32i> loc(#loc11)
    cir.br ^bb1 loc(#loc95)
  ^bb1:  // pred: ^bb0
    %2 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc14)
    %3 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc10)
    %4 = cir.binop(mul, %2, %3) : !u32i loc(#loc96)
    cir.store %4, %0 : !u32i, !cir.ptr<!u32i> loc(#loc94)
    %5 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc15)
    cir.call @printUnsignedLine(%5) : (!u32i) -> () loc(#loc16)
    cir.br ^bb2 loc(#loc13)
  ^bb2:  // pred: ^bb1
    cir.return loc(#loc6)
  } loc(#loc92)
  cir.func no_proto @CWE190_Integer_Overflow__unsigned_int_rand_square_41_bad() extra(#fn_attr1) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc98)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc21)
    %2 = cir.cast(integral, %1 : !s32i), !u32i loc(#loc21)
    cir.store %2, %0 : !u32i, !cir.ptr<!u32i> loc(#loc99)
    %3 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc23)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc23)
    %5 = cir.binop(and, %3, %4) : !s32i loc(#loc23)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc23)
    cir.brcond %6 ^bb1, ^bb2 loc(#loc23)
  ^bb1:  // pred: ^bb0
    %7 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc23)
    %8 = cir.cast(integral, %7 : !s32i), !u32i loc(#loc23)
    %9 = cir.const #cir.int<30> : !s32i loc(#loc23)
    %10 = cir.shift(left, %8 : !u32i, %9 : !s32i) -> !u32i loc(#loc23)
    %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc23)
    %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc23)
    %13 = cir.const #cir.int<15> : !s32i loc(#loc23)
    %14 = cir.shift(left, %12 : !u32i, %13 : !s32i) -> !u32i loc(#loc23)
    %15 = cir.binop(xor, %10, %14) : !u32i loc(#loc23)
    %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc23)
    %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc23)
    %18 = cir.binop(xor, %15, %17) : !u32i loc(#loc23)
    cir.br ^bb3(%18 : !u32i) loc(#loc23)
  ^bb2:  // pred: ^bb0
    %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc23)
    %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc23)
    %21 = cir.const #cir.int<30> : !s32i loc(#loc23)
    %22 = cir.shift(left, %20 : !u32i, %21 : !s32i) -> !u32i loc(#loc23)
    %23 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc23)
    %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc23)
    %25 = cir.const #cir.int<15> : !s32i loc(#loc23)
    %26 = cir.shift(left, %24 : !u32i, %25 : !s32i) -> !u32i loc(#loc23)
    %27 = cir.binop(xor, %22, %26) : !u32i loc(#loc23)
    %28 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc23)
    %29 = cir.cast(integral, %28 : !s32i), !u32i loc(#loc23)
    %30 = cir.binop(xor, %27, %29) : !u32i loc(#loc23)
    %31 = cir.unary(minus, %30) : !u32i, !u32i loc(#loc23)
    %32 = cir.const #cir.int<1> : !s32i loc(#loc23)
    %33 = cir.cast(integral, %32 : !s32i), !u32i loc(#loc23)
    %34 = cir.binop(sub, %31, %33) : !u32i loc(#loc23)
    cir.br ^bb3(%34 : !u32i) loc(#loc23)
  ^bb3(%35: !u32i loc("CWE190_Integer_Overflow__unsigned_int_rand_square_41.c":38:26)):  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc23)
  ^bb4:  // pred: ^bb3
    %36 = cir.cast(integral, %35 : !u32i), !s32i loc(#loc23)
    %37 = cir.cast(integral, %36 : !s32i), !u32i loc(#loc23)
    cir.store %37, %0 : !u32i, !cir.ptr<!u32i> loc(#loc100)
    %38 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc25)
    cir.call @badSink(%38) : (!u32i) -> () loc(#loc26)
    cir.return loc(#loc18)
  } loc(#loc97)
  cir.func no_proto @CWE190_Integer_Overflow__unsigned_int_rand_square_41_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc102)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc29)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc103)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc31)
    cir.return loc(#loc28)
  } loc(#loc101)
  cir.func private @sqrt(!cir.double) -> !cir.double extra(#fn_attr) loc(#loc33)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc104)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc36)
  cir.func internal private @goodB2GSink(%arg0: !u32i loc(fused[#loc39, #loc40])) extra(#fn_attr1) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc107)
    %1 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data", init] {alignment = 4 : i64} loc(#loc106)
    cir.store %arg0, %1 : !u32i, !cir.ptr<!u32i> loc(#loc43)
    cir.br ^bb1 loc(#loc108)
  ^bb1:  // pred: ^bb0
    %2 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc46)
    %3 = cir.cast(integral, %2 : !u32i), !s64i loc(#loc46)
    %4 = cir.cast(integral, %3 : !s64i), !s32i loc(#loc46)
    %5 = cir.abs %4 poison : !s32i loc(#loc47)
    %6 = cir.cast(integral, %5 : !s32i), !s64i loc(#loc47)
    %7 = cir.get_global @sqrt : !cir.ptr<!cir.func<!cir.double (!cir.double)>> loc(#loc48)
    %8 = cir.const #cir.int<2147483647> : !s32i loc(#loc49)
    %9 = cir.cast(integral, %8 : !s32i), !u32i loc(#loc49)
    %10 = cir.const #cir.int<2> : !u32i loc(#loc49)
    %11 = cir.binop(mul, %9, %10) : !u32i loc(#loc49)
    %12 = cir.const #cir.int<1> : !u32i loc(#loc49)
    %13 = cir.binop(add, %11, %12) : !u32i loc(#loc49)
    %14 = cir.cast(int_to_float, %13 : !u32i), !cir.double loc(#loc49)
    %15 = cir.call @sqrt(%14) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc48)
    %16 = cir.cast(float_to_int, %15 : !cir.double), !s64i loc(#loc48)
    %17 = cir.cmp(lt, %6, %16) : !s64i, !cir.bool loc(#loc109)
    cir.brcond %17 ^bb2, ^bb3 loc(#loc110)
  ^bb2:  // pred: ^bb1
    %18 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc54)
    %19 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc42)
    %20 = cir.binop(mul, %18, %19) : !u32i loc(#loc111)
    cir.store %20, %0 : !u32i, !cir.ptr<!u32i> loc(#loc107)
    %21 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc55)
    cir.call @printUnsignedLine(%21) : (!u32i) -> () loc(#loc56)
    cir.br ^bb4 loc(#loc52)
  ^bb3:  // pred: ^bb1
    %22 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc36)
    %23 = cir.cast(array_to_ptrdecay, %22 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc36)
    cir.call @printLine(%23) : (!cir.ptr<!s8i>) -> () loc(#loc57)
    cir.br ^bb4 loc(#loc45)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc45)
  ^bb5:  // pred: ^bb4
    cir.return loc(#loc38)
  } loc(#loc105)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc113)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc62)
    %2 = cir.cast(integral, %1 : !s32i), !u32i loc(#loc62)
    cir.store %2, %0 : !u32i, !cir.ptr<!u32i> loc(#loc114)
    %3 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc64)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc64)
    %5 = cir.binop(and, %3, %4) : !s32i loc(#loc64)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc64)
    cir.brcond %6 ^bb1, ^bb2 loc(#loc64)
  ^bb1:  // pred: ^bb0
    %7 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc64)
    %8 = cir.cast(integral, %7 : !s32i), !u32i loc(#loc64)
    %9 = cir.const #cir.int<30> : !s32i loc(#loc64)
    %10 = cir.shift(left, %8 : !u32i, %9 : !s32i) -> !u32i loc(#loc64)
    %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc64)
    %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc64)
    %13 = cir.const #cir.int<15> : !s32i loc(#loc64)
    %14 = cir.shift(left, %12 : !u32i, %13 : !s32i) -> !u32i loc(#loc64)
    %15 = cir.binop(xor, %10, %14) : !u32i loc(#loc64)
    %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc64)
    %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc64)
    %18 = cir.binop(xor, %15, %17) : !u32i loc(#loc64)
    cir.br ^bb3(%18 : !u32i) loc(#loc64)
  ^bb2:  // pred: ^bb0
    %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc64)
    %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc64)
    %21 = cir.const #cir.int<30> : !s32i loc(#loc64)
    %22 = cir.shift(left, %20 : !u32i, %21 : !s32i) -> !u32i loc(#loc64)
    %23 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc64)
    %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc64)
    %25 = cir.const #cir.int<15> : !s32i loc(#loc64)
    %26 = cir.shift(left, %24 : !u32i, %25 : !s32i) -> !u32i loc(#loc64)
    %27 = cir.binop(xor, %22, %26) : !u32i loc(#loc64)
    %28 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc64)
    %29 = cir.cast(integral, %28 : !s32i), !u32i loc(#loc64)
    %30 = cir.binop(xor, %27, %29) : !u32i loc(#loc64)
    %31 = cir.unary(minus, %30) : !u32i, !u32i loc(#loc64)
    %32 = cir.const #cir.int<1> : !s32i loc(#loc64)
    %33 = cir.cast(integral, %32 : !s32i), !u32i loc(#loc64)
    %34 = cir.binop(sub, %31, %33) : !u32i loc(#loc64)
    cir.br ^bb3(%34 : !u32i) loc(#loc64)
  ^bb3(%35: !u32i loc("CWE190_Integer_Overflow__unsigned_int_rand_square_41.c":85:26)):  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc64)
  ^bb4:  // pred: ^bb3
    %36 = cir.cast(integral, %35 : !u32i), !s32i loc(#loc64)
    %37 = cir.cast(integral, %36 : !s32i), !u32i loc(#loc64)
    cir.store %37, %0 : !u32i, !cir.ptr<!u32i> loc(#loc115)
    %38 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc66)
    cir.call @goodB2GSink(%38) : (!u32i) -> () loc(#loc67)
    cir.return loc(#loc59)
  } loc(#loc112)
  cir.func internal private @goodG2BSink(%arg0: !u32i loc(fused[#loc70, #loc71])) extra(#fn_attr1) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc118)
    %1 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data", init] {alignment = 4 : i64} loc(#loc117)
    cir.store %arg0, %1 : !u32i, !cir.ptr<!u32i> loc(#loc74)
    cir.br ^bb1 loc(#loc119)
  ^bb1:  // pred: ^bb0
    %2 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc77)
    %3 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc73)
    %4 = cir.binop(mul, %2, %3) : !u32i loc(#loc120)
    cir.store %4, %0 : !u32i, !cir.ptr<!u32i> loc(#loc118)
    %5 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc78)
    cir.call @printUnsignedLine(%5) : (!u32i) -> () loc(#loc79)
    cir.br ^bb2 loc(#loc76)
  ^bb2:  // pred: ^bb1
    cir.return loc(#loc69)
  } loc(#loc116)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc122)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc84)
    %2 = cir.cast(integral, %1 : !s32i), !u32i loc(#loc84)
    cir.store %2, %0 : !u32i, !cir.ptr<!u32i> loc(#loc123)
    %3 = cir.const #cir.int<2> : !s32i loc(#loc86)
    %4 = cir.cast(integral, %3 : !s32i), !u32i loc(#loc86)
    cir.store %4, %0 : !u32i, !cir.ptr<!u32i> loc(#loc124)
    %5 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc88)
    cir.call @goodG2BSink(%5) : (!u32i) -> () loc(#loc89)
    cir.return loc(#loc81)
  } loc(#loc121)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_rand_square_41.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":34:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":34:47)
#loc5 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_41.c":24:1)
#loc6 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_41.c":31:1)
#loc9 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_41.c":28:9)
#loc10 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_41.c":28:38)
#loc11 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_41.c":25:1)
#loc12 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_41.c":26:5)
#loc13 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_41.c":30:5)
#loc14 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_41.c":28:31)
#loc15 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_41.c":29:27)
#loc16 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_41.c":29:9)
#loc17 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_41.c":33:1)
#loc18 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_41.c":40:1)
#loc19 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_41.c":35:5)
#loc20 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_41.c":35:18)
#loc21 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_41.c":36:12)
#loc22 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_41.c":36:5)
#loc24 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_41.c":38:5)
#loc25 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_41.c":39:13)
#loc26 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_41.c":39:5)
#loc27 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_41.c":89:1)
#loc28 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_41.c":93:1)
#loc29 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_41.c":91:5)
#loc30 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_41.c":91:13)
#loc31 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_41.c":92:5)
#loc32 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_41.c":92:13)
#loc33 = loc("/usr/include/bits/mathcalls.h":158:1)
#loc34 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc35 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc36 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_41.c":76:19)
#loc37 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_41.c":66:1)
#loc38 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_41.c":78:1)
#loc41 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_41.c":71:9)
#loc42 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_41.c":71:38)
#loc43 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_41.c":67:1)
#loc44 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_41.c":69:5)
#loc45 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_41.c":77:5)
#loc46 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_41.c":69:19)
#loc47 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_41.c":69:9)
#loc48 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_41.c":69:33)
#loc49 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_41.c":69:46)
#loc50 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_41.c":69:54)
#loc51 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_41.c":70:5)
#loc52 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_41.c":73:5)
#loc53 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_41.c":75:5)
#loc54 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_41.c":71:31)
#loc55 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_41.c":72:27)
#loc56 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_41.c":72:9)
#loc57 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_41.c":76:9)
#loc58 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_41.c":80:1)
#loc59 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_41.c":87:1)
#loc60 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_41.c":82:5)
#loc61 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_41.c":82:18)
#loc62 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_41.c":83:12)
#loc63 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_41.c":83:5)
#loc65 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_41.c":85:5)
#loc66 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_41.c":86:17)
#loc67 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_41.c":86:5)
#loc68 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_41.c":47:1)
#loc69 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_41.c":54:1)
#loc72 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_41.c":51:9)
#loc73 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_41.c":51:38)
#loc74 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_41.c":48:1)
#loc75 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_41.c":49:5)
#loc76 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_41.c":53:5)
#loc77 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_41.c":51:31)
#loc78 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_41.c":52:27)
#loc79 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_41.c":52:9)
#loc80 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_41.c":56:1)
#loc81 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_41.c":63:1)
#loc82 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_41.c":58:5)
#loc83 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_41.c":58:18)
#loc84 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_41.c":59:12)
#loc85 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_41.c":59:5)
#loc86 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_41.c":61:12)
#loc87 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_41.c":61:5)
#loc88 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_41.c":62:17)
#loc89 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_41.c":62:5)
#loc90 = loc(fused[#loc1, #loc2])
#loc91 = loc(fused[#loc3, #loc4])
#loc92 = loc(fused[#loc5, #loc6])
#loc94 = loc(fused[#loc9, #loc10])
#loc95 = loc(fused[#loc12, #loc13])
#loc96 = loc(fused[#loc14, #loc10])
#loc97 = loc(fused[#loc17, #loc18])
#loc98 = loc(fused[#loc19, #loc20])
#loc99 = loc(fused[#loc22, #loc21])
#loc100 = loc(fused[#loc24, #loc23])
#loc101 = loc(fused[#loc27, #loc28])
#loc102 = loc(fused[#loc29, #loc30])
#loc103 = loc(fused[#loc31, #loc32])
#loc104 = loc(fused[#loc34, #loc35])
#loc105 = loc(fused[#loc37, #loc38])
#loc107 = loc(fused[#loc41, #loc42])
#loc108 = loc(fused[#loc44, #loc45])
#loc109 = loc(fused[#loc47, #loc50])
#loc110 = loc(fused[#loc51, #loc52, #loc53, #loc45])
#loc111 = loc(fused[#loc54, #loc42])
#loc112 = loc(fused[#loc58, #loc59])
#loc113 = loc(fused[#loc60, #loc61])
#loc114 = loc(fused[#loc63, #loc62])
#loc115 = loc(fused[#loc65, #loc64])
#loc116 = loc(fused[#loc68, #loc69])
#loc118 = loc(fused[#loc72, #loc73])
#loc119 = loc(fused[#loc75, #loc76])
#loc120 = loc(fused[#loc77, #loc73])
#loc121 = loc(fused[#loc80, #loc81])
#loc122 = loc(fused[#loc82, #loc83])
#loc123 = loc(fused[#loc85, #loc84])
#loc124 = loc(fused[#loc87, #loc86])
