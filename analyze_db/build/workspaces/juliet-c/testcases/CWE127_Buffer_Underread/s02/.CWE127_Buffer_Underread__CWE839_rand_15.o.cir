!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#true = #cir.bool<true> : !cir.bool
module @"/workspaces/juliet-c/testcases/CWE127_Buffer_Underread/s02/CWE127_Buffer_Underread__CWE839_rand_15.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc240)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc241)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc5)
  cir.func private @printIntLine(!s32i) loc(#loc242)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"ERROR: Array index is too big.\00" : !cir.array<!s8i x 31>> : !cir.array<!s8i x 31> {alignment = 1 : i64} loc(#loc8)
  cir.func no_proto @CWE127_Buffer_Underread__CWE839_rand_15_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc244)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc13)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc14)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc245)
    cir.scope {
      %3 = cir.const #cir.int<6> : !s32i loc(#loc18)
      cir.switch (%3 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %4 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
          %5 = cir.const #cir.int<1> : !s32i loc(#loc20)
          %6 = cir.binop(and, %4, %5) : !s32i loc(#loc20)
          %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc20)
          %8 = cir.ternary(%7, true {
            %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
            %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc20)
            %12 = cir.const #cir.int<30> : !s32i loc(#loc20)
            %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc20)
            %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
            %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc20)
            %16 = cir.const #cir.int<15> : !s32i loc(#loc20)
            %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc20)
            %18 = cir.binop(xor, %13, %17) : !u32i loc(#loc20)
            %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
            %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc20)
            %21 = cir.binop(xor, %18, %20) : !u32i loc(#loc20)
            cir.yield %21 : !u32i loc(#loc20)
          }, false {
            %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
            %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc20)
            %12 = cir.const #cir.int<30> : !s32i loc(#loc20)
            %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc20)
            %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
            %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc20)
            %16 = cir.const #cir.int<15> : !s32i loc(#loc20)
            %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc20)
            %18 = cir.binop(xor, %13, %17) : !u32i loc(#loc20)
            %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
            %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc20)
            %21 = cir.binop(xor, %18, %20) : !u32i loc(#loc20)
            %22 = cir.unary(minus, %21) : !u32i, !u32i loc(#loc20)
            %23 = cir.const #cir.int<1> : !s32i loc(#loc20)
            %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc20)
            %25 = cir.binop(sub, %22, %24) : !u32i loc(#loc20)
            cir.yield %25 : !u32i loc(#loc20)
          }) : (!cir.bool) -> !u32i loc(#loc20)
          %9 = cir.cast(integral, %8 : !u32i), !s32i loc(#loc20)
          cir.store %9, %0 : !s32i, !cir.ptr<!s32i> loc(#loc247)
          cir.break loc(#loc22)
        } loc(#loc19)
        cir.case(default, []) {
          %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc5)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc5)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc24)
          cir.break loc(#loc25)
        } loc(#loc23)
        cir.yield loc(#loc16)
      } loc(#loc16)
    } loc(#loc246)
    cir.scope {
      %3 = cir.const #cir.int<7> : !s32i loc(#loc28)
      cir.switch (%3 : !s32i) {
        cir.case(equal, [#cir.int<7> : !s32i]) {
          cir.scope {
            %4 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc250)
            %5 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc250)
            cir.store %5, %4 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc250)
            cir.scope {
              %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc36)
              %7 = cir.const #cir.int<10> : !s32i loc(#loc37)
              %8 = cir.cmp(lt, %6, %7) : !s32i, !cir.bool loc(#loc252)
              cir.if %8 {
                %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc41)
                %10 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc42)
                %11 = cir.ptr_stride(%10 : !cir.ptr<!s32i>, %9 : !s32i), !cir.ptr<!s32i> loc(#loc42)
                %12 = cir.load %11 : !cir.ptr<!s32i>, !s32i loc(#loc42)
                cir.call @printIntLine(%12) : (!s32i) -> () loc(#loc43)
              } else {
                %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 31>> loc(#loc8)
                %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 31>>), !cir.ptr<!s8i> loc(#loc8)
                cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc44)
              } loc(#loc253)
            } loc(#loc251)
          } loc(#loc249)
          cir.break loc(#loc45)
        } loc(#loc29)
        cir.case(default, []) {
          %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc47)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc47)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc48)
          cir.break loc(#loc49)
        } loc(#loc46)
        cir.yield loc(#loc26)
      } loc(#loc26)
    } loc(#loc248)
    cir.return loc(#loc10)
  } loc(#loc243)
  cir.func no_proto @CWE127_Buffer_Underread__CWE839_rand_15_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<()>> loc(#loc255)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc52)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<()>> loc(#loc256)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc54)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<()>> loc(#loc257)
    cir.call %2() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc56)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<()>> loc(#loc258)
    cir.call %3() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc58)
    cir.return loc(#loc51)
  } loc(#loc254)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"ERROR: Array index is out-of-bounds\00" : !cir.array<!s8i x 36>> : !cir.array<!s8i x 36> {alignment = 1 : i64} loc(#loc60)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc260)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc65)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc66)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc261)
    cir.scope {
      %3 = cir.const #cir.int<6> : !s32i loc(#loc70)
      cir.switch (%3 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %4 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc72)
          %5 = cir.const #cir.int<1> : !s32i loc(#loc72)
          %6 = cir.binop(and, %4, %5) : !s32i loc(#loc72)
          %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc72)
          %8 = cir.ternary(%7, true {
            %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc72)
            %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc72)
            %12 = cir.const #cir.int<30> : !s32i loc(#loc72)
            %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc72)
            %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc72)
            %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc72)
            %16 = cir.const #cir.int<15> : !s32i loc(#loc72)
            %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc72)
            %18 = cir.binop(xor, %13, %17) : !u32i loc(#loc72)
            %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc72)
            %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc72)
            %21 = cir.binop(xor, %18, %20) : !u32i loc(#loc72)
            cir.yield %21 : !u32i loc(#loc72)
          }, false {
            %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc72)
            %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc72)
            %12 = cir.const #cir.int<30> : !s32i loc(#loc72)
            %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc72)
            %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc72)
            %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc72)
            %16 = cir.const #cir.int<15> : !s32i loc(#loc72)
            %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc72)
            %18 = cir.binop(xor, %13, %17) : !u32i loc(#loc72)
            %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc72)
            %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc72)
            %21 = cir.binop(xor, %18, %20) : !u32i loc(#loc72)
            %22 = cir.unary(minus, %21) : !u32i, !u32i loc(#loc72)
            %23 = cir.const #cir.int<1> : !s32i loc(#loc72)
            %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc72)
            %25 = cir.binop(sub, %22, %24) : !u32i loc(#loc72)
            cir.yield %25 : !u32i loc(#loc72)
          }) : (!cir.bool) -> !u32i loc(#loc72)
          %9 = cir.cast(integral, %8 : !u32i), !s32i loc(#loc72)
          cir.store %9, %0 : !s32i, !cir.ptr<!s32i> loc(#loc263)
          cir.break loc(#loc74)
        } loc(#loc71)
        cir.case(default, []) {
          %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc76)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc76)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc77)
          cir.break loc(#loc78)
        } loc(#loc75)
        cir.yield loc(#loc68)
      } loc(#loc68)
    } loc(#loc262)
    cir.scope {
      %3 = cir.const #cir.int<8> : !s32i loc(#loc81)
      cir.switch (%3 : !s32i) {
        cir.case(equal, [#cir.int<7> : !s32i]) {
          %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc83)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc83)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc84)
          cir.break loc(#loc85)
        } loc(#loc82)
        cir.case(default, []) {
          cir.scope {
            %4 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc266)
            %5 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc266)
            cir.store %5, %4 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc266)
            cir.scope {
              %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc93)
              %7 = cir.const #cir.int<0> : !s32i loc(#loc94)
              %8 = cir.cmp(ge, %6, %7) : !s32i, !cir.bool loc(#loc268)
              %9 = cir.ternary(%8, true {
                %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc96)
                %11 = cir.const #cir.int<10> : !s32i loc(#loc97)
                %12 = cir.cmp(lt, %10, %11) : !s32i, !cir.bool loc(#loc269)
                %13 = cir.ternary(%12, true {
                  %14 = cir.const #true loc(#loc95)
                  cir.yield %14 : !cir.bool loc(#loc95)
                }, false {
                  %14 = cir.const #false loc(#loc95)
                  cir.yield %14 : !cir.bool loc(#loc95)
                }) : (!cir.bool) -> !cir.bool loc(#loc95)
                cir.yield %13 : !cir.bool loc(#loc95)
              }, false {
                %10 = cir.const #false loc(#loc95)
                cir.yield %10 : !cir.bool loc(#loc95)
              }) : (!cir.bool) -> !cir.bool loc(#loc95)
              cir.if %9 {
                %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc102)
                %11 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc103)
                %12 = cir.ptr_stride(%11 : !cir.ptr<!s32i>, %10 : !s32i), !cir.ptr<!s32i> loc(#loc103)
                %13 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc103)
                cir.call @printIntLine(%13) : (!s32i) -> () loc(#loc104)
              } else {
                %10 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc60)
                %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc60)
                cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc105)
              } loc(#loc270)
            } loc(#loc267)
          } loc(#loc265)
          cir.break loc(#loc106)
        } loc(#loc86)
        cir.yield loc(#loc79)
      } loc(#loc79)
    } loc(#loc264)
    cir.return loc(#loc62)
  } loc(#loc259)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc272)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc111)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc112)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc273)
    cir.scope {
      %3 = cir.const #cir.int<6> : !s32i loc(#loc116)
      cir.switch (%3 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %4 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc118)
          %5 = cir.const #cir.int<1> : !s32i loc(#loc118)
          %6 = cir.binop(and, %4, %5) : !s32i loc(#loc118)
          %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc118)
          %8 = cir.ternary(%7, true {
            %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc118)
            %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc118)
            %12 = cir.const #cir.int<30> : !s32i loc(#loc118)
            %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc118)
            %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc118)
            %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc118)
            %16 = cir.const #cir.int<15> : !s32i loc(#loc118)
            %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc118)
            %18 = cir.binop(xor, %13, %17) : !u32i loc(#loc118)
            %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc118)
            %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc118)
            %21 = cir.binop(xor, %18, %20) : !u32i loc(#loc118)
            cir.yield %21 : !u32i loc(#loc118)
          }, false {
            %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc118)
            %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc118)
            %12 = cir.const #cir.int<30> : !s32i loc(#loc118)
            %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc118)
            %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc118)
            %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc118)
            %16 = cir.const #cir.int<15> : !s32i loc(#loc118)
            %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc118)
            %18 = cir.binop(xor, %13, %17) : !u32i loc(#loc118)
            %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc118)
            %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc118)
            %21 = cir.binop(xor, %18, %20) : !u32i loc(#loc118)
            %22 = cir.unary(minus, %21) : !u32i, !u32i loc(#loc118)
            %23 = cir.const #cir.int<1> : !s32i loc(#loc118)
            %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc118)
            %25 = cir.binop(sub, %22, %24) : !u32i loc(#loc118)
            cir.yield %25 : !u32i loc(#loc118)
          }) : (!cir.bool) -> !u32i loc(#loc118)
          %9 = cir.cast(integral, %8 : !u32i), !s32i loc(#loc118)
          cir.store %9, %0 : !s32i, !cir.ptr<!s32i> loc(#loc275)
          cir.break loc(#loc120)
        } loc(#loc117)
        cir.case(default, []) {
          %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc122)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc122)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc123)
          cir.break loc(#loc124)
        } loc(#loc121)
        cir.yield loc(#loc114)
      } loc(#loc114)
    } loc(#loc274)
    cir.scope {
      %3 = cir.const #cir.int<7> : !s32i loc(#loc127)
      cir.switch (%3 : !s32i) {
        cir.case(equal, [#cir.int<7> : !s32i]) {
          cir.scope {
            %4 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc278)
            %5 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc278)
            cir.store %5, %4 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc278)
            cir.scope {
              %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc135)
              %7 = cir.const #cir.int<0> : !s32i loc(#loc136)
              %8 = cir.cmp(ge, %6, %7) : !s32i, !cir.bool loc(#loc280)
              %9 = cir.ternary(%8, true {
                %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc138)
                %11 = cir.const #cir.int<10> : !s32i loc(#loc139)
                %12 = cir.cmp(lt, %10, %11) : !s32i, !cir.bool loc(#loc281)
                %13 = cir.ternary(%12, true {
                  %14 = cir.const #true loc(#loc137)
                  cir.yield %14 : !cir.bool loc(#loc137)
                }, false {
                  %14 = cir.const #false loc(#loc137)
                  cir.yield %14 : !cir.bool loc(#loc137)
                }) : (!cir.bool) -> !cir.bool loc(#loc137)
                cir.yield %13 : !cir.bool loc(#loc137)
              }, false {
                %10 = cir.const #false loc(#loc137)
                cir.yield %10 : !cir.bool loc(#loc137)
              }) : (!cir.bool) -> !cir.bool loc(#loc137)
              cir.if %9 {
                %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc144)
                %11 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc145)
                %12 = cir.ptr_stride(%11 : !cir.ptr<!s32i>, %10 : !s32i), !cir.ptr<!s32i> loc(#loc145)
                %13 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc145)
                cir.call @printIntLine(%13) : (!s32i) -> () loc(#loc146)
              } else {
                %10 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc147)
                %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc147)
                cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc148)
              } loc(#loc282)
            } loc(#loc279)
          } loc(#loc277)
          cir.break loc(#loc149)
        } loc(#loc128)
        cir.case(default, []) {
          %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc151)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc151)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc152)
          cir.break loc(#loc153)
        } loc(#loc150)
        cir.yield loc(#loc125)
      } loc(#loc125)
    } loc(#loc276)
    cir.return loc(#loc108)
  } loc(#loc271)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc284)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc158)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc159)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc285)
    cir.scope {
      %3 = cir.const #cir.int<5> : !s32i loc(#loc163)
      cir.switch (%3 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc165)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc165)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc166)
          cir.break loc(#loc167)
        } loc(#loc164)
        cir.case(default, []) {
          %4 = cir.const #cir.int<7> : !s32i loc(#loc169)
          cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc287)
          cir.break loc(#loc171)
        } loc(#loc168)
        cir.yield loc(#loc161)
      } loc(#loc161)
    } loc(#loc286)
    cir.scope {
      %3 = cir.const #cir.int<7> : !s32i loc(#loc174)
      cir.switch (%3 : !s32i) {
        cir.case(equal, [#cir.int<7> : !s32i]) {
          cir.scope {
            %4 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc290)
            %5 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc290)
            cir.store %5, %4 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc290)
            cir.scope {
              %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc182)
              %7 = cir.const #cir.int<10> : !s32i loc(#loc183)
              %8 = cir.cmp(lt, %6, %7) : !s32i, !cir.bool loc(#loc292)
              cir.if %8 {
                %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc187)
                %10 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc188)
                %11 = cir.ptr_stride(%10 : !cir.ptr<!s32i>, %9 : !s32i), !cir.ptr<!s32i> loc(#loc188)
                %12 = cir.load %11 : !cir.ptr<!s32i>, !s32i loc(#loc188)
                cir.call @printIntLine(%12) : (!s32i) -> () loc(#loc189)
              } else {
                %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 31>> loc(#loc190)
                %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 31>>), !cir.ptr<!s8i> loc(#loc190)
                cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc191)
              } loc(#loc293)
            } loc(#loc291)
          } loc(#loc289)
          cir.break loc(#loc192)
        } loc(#loc175)
        cir.case(default, []) {
          %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc194)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc194)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc195)
          cir.break loc(#loc196)
        } loc(#loc193)
        cir.yield loc(#loc172)
      } loc(#loc172)
    } loc(#loc288)
    cir.return loc(#loc155)
  } loc(#loc283)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc295)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc201)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc202)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc296)
    cir.scope {
      %3 = cir.const #cir.int<6> : !s32i loc(#loc206)
      cir.switch (%3 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %4 = cir.const #cir.int<7> : !s32i loc(#loc208)
          cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc298)
          cir.break loc(#loc210)
        } loc(#loc207)
        cir.case(default, []) {
          %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc212)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc212)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc213)
          cir.break loc(#loc214)
        } loc(#loc211)
        cir.yield loc(#loc204)
      } loc(#loc204)
    } loc(#loc297)
    cir.scope {
      %3 = cir.const #cir.int<7> : !s32i loc(#loc217)
      cir.switch (%3 : !s32i) {
        cir.case(equal, [#cir.int<7> : !s32i]) {
          cir.scope {
            %4 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc301)
            %5 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc301)
            cir.store %5, %4 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc301)
            cir.scope {
              %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc225)
              %7 = cir.const #cir.int<10> : !s32i loc(#loc226)
              %8 = cir.cmp(lt, %6, %7) : !s32i, !cir.bool loc(#loc303)
              cir.if %8 {
                %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc230)
                %10 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc231)
                %11 = cir.ptr_stride(%10 : !cir.ptr<!s32i>, %9 : !s32i), !cir.ptr<!s32i> loc(#loc231)
                %12 = cir.load %11 : !cir.ptr<!s32i>, !s32i loc(#loc231)
                cir.call @printIntLine(%12) : (!s32i) -> () loc(#loc232)
              } else {
                %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 31>> loc(#loc233)
                %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 31>>), !cir.ptr<!s8i> loc(#loc233)
                cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc234)
              } loc(#loc304)
            } loc(#loc302)
          } loc(#loc300)
          cir.break loc(#loc235)
        } loc(#loc218)
        cir.case(default, []) {
          %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc237)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc237)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc238)
          cir.break loc(#loc239)
        } loc(#loc236)
        cir.yield loc(#loc215)
      } loc(#loc215)
    } loc(#loc299)
    cir.return loc(#loc198)
  } loc(#loc294)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE127_Buffer_Underread/s02/CWE127_Buffer_Underread__CWE839_rand_15.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc5 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":35:19)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc8 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":51:23)
#loc9 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":22:1)
#loc10 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":60:1)
#loc11 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":24:5)
#loc12 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":24:9)
#loc13 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":26:13)
#loc14 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":26:12)
#loc15 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":26:5)
#loc16 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":27:5)
#loc17 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":37:5)
#loc18 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":27:12)
#loc19 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":29:5)
#loc20 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":31:16)
#loc21 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":31:9)
#loc22 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":32:9)
#loc23 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":33:5)
#loc24 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":35:9)
#loc25 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":36:9)
#loc26 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":38:5)
#loc27 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":59:5)
#loc28 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":38:12)
#loc29 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":40:5)
#loc30 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":41:5)
#loc31 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":53:5)
#loc32 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":42:9)
#loc33 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":42:30)
#loc34 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":45:9)
#loc35 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":52:9)
#loc36 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":45:13)
#loc37 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":45:20)
#loc38 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":46:9)
#loc39 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":48:9)
#loc40 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":50:9)
#loc41 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":47:33)
#loc42 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":47:26)
#loc43 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":47:13)
#loc44 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":51:13)
#loc45 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":54:5)
#loc46 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":55:5)
#loc47 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":57:19)
#loc48 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":57:9)
#loc49 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":58:9)
#loc50 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":230:1)
#loc51 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":236:1)
#loc52 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":232:5)
#loc53 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":232:14)
#loc54 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":233:5)
#loc55 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":233:14)
#loc56 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":234:5)
#loc57 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":234:14)
#loc58 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":235:5)
#loc59 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":235:14)
#loc60 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":99:23)
#loc61 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":67:1)
#loc62 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":104:1)
#loc63 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":69:5)
#loc64 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":69:9)
#loc65 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":71:13)
#loc66 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":71:12)
#loc67 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":71:5)
#loc68 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":72:5)
#loc69 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":82:5)
#loc70 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":72:12)
#loc71 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":74:5)
#loc72 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":76:16)
#loc73 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":76:9)
#loc74 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":77:9)
#loc75 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":78:5)
#loc76 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":80:19)
#loc77 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":80:9)
#loc78 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":81:9)
#loc79 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":83:5)
#loc80 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":103:5)
#loc81 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":83:12)
#loc82 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":85:5)
#loc83 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":87:19)
#loc84 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":87:9)
#loc85 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":88:9)
#loc86 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":89:5)
#loc87 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":90:5)
#loc88 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":101:5)
#loc89 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":91:9)
#loc90 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":91:30)
#loc91 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":93:9)
#loc92 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":100:9)
#loc93 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":93:13)
#loc94 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":93:21)
#loc95 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":93:23)
#loc96 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":93:26)
#loc97 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":93:34)
#loc98 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":93:36)
#loc99 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":94:9)
#loc100 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":96:9)
#loc101 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":98:9)
#loc102 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":95:33)
#loc103 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":95:26)
#loc104 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":95:13)
#loc105 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":99:13)
#loc106 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":102:5)
#loc107 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":107:1)
#loc108 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":144:1)
#loc109 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":109:5)
#loc110 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":109:9)
#loc111 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":111:13)
#loc112 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":111:12)
#loc113 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":111:5)
#loc114 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":112:5)
#loc115 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":122:5)
#loc116 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":112:12)
#loc117 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":114:5)
#loc118 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":116:16)
#loc119 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":116:9)
#loc120 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":117:9)
#loc121 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":118:5)
#loc122 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":120:19)
#loc123 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":120:9)
#loc124 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":121:9)
#loc125 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":123:5)
#loc126 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":143:5)
#loc127 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":123:12)
#loc128 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":125:5)
#loc129 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":126:5)
#loc130 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":137:5)
#loc131 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":127:9)
#loc132 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":127:30)
#loc133 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":129:9)
#loc134 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":136:9)
#loc135 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":129:13)
#loc136 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":129:21)
#loc137 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":129:23)
#loc138 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":129:26)
#loc139 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":129:34)
#loc140 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":129:36)
#loc141 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":130:9)
#loc142 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":132:9)
#loc143 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":134:9)
#loc144 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":131:33)
#loc145 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":131:26)
#loc146 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":131:13)
#loc147 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":135:23)
#loc148 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":135:13)
#loc149 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":138:5)
#loc150 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":139:5)
#loc151 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":141:19)
#loc152 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":141:9)
#loc153 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":142:9)
#loc154 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":147:1)
#loc155 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":186:1)
#loc156 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":149:5)
#loc157 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":149:9)
#loc158 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":151:13)
#loc159 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":151:12)
#loc160 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":151:5)
#loc161 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":152:5)
#loc162 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":163:5)
#loc163 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":152:12)
#loc164 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":154:5)
#loc165 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":156:19)
#loc166 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":156:9)
#loc167 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":157:9)
#loc168 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":158:5)
#loc169 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":161:16)
#loc170 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":161:9)
#loc171 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":162:9)
#loc172 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":164:5)
#loc173 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":185:5)
#loc174 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":164:12)
#loc175 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":166:5)
#loc176 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":167:5)
#loc177 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":179:5)
#loc178 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":168:9)
#loc179 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":168:30)
#loc180 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":171:9)
#loc181 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":178:9)
#loc182 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":171:13)
#loc183 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":171:20)
#loc184 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":172:9)
#loc185 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":174:9)
#loc186 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":176:9)
#loc187 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":173:33)
#loc188 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":173:26)
#loc189 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":173:13)
#loc190 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":177:23)
#loc191 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":177:13)
#loc192 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":180:5)
#loc193 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":181:5)
#loc194 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":183:19)
#loc195 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":183:9)
#loc196 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":184:9)
#loc197 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":189:1)
#loc198 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":228:1)
#loc199 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":191:5)
#loc200 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":191:9)
#loc201 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":193:13)
#loc202 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":193:12)
#loc203 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":193:5)
#loc204 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":194:5)
#loc205 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":205:5)
#loc206 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":194:12)
#loc207 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":196:5)
#loc208 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":199:16)
#loc209 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":199:9)
#loc210 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":200:9)
#loc211 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":201:5)
#loc212 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":203:19)
#loc213 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":203:9)
#loc214 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":204:9)
#loc215 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":206:5)
#loc216 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":227:5)
#loc217 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":206:12)
#loc218 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":208:5)
#loc219 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":209:5)
#loc220 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":221:5)
#loc221 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":210:9)
#loc222 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":210:30)
#loc223 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":213:9)
#loc224 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":220:9)
#loc225 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":213:13)
#loc226 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":213:20)
#loc227 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":214:9)
#loc228 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":216:9)
#loc229 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":218:9)
#loc230 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":215:33)
#loc231 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":215:26)
#loc232 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":215:13)
#loc233 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":219:23)
#loc234 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":219:13)
#loc235 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":222:5)
#loc236 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":223:5)
#loc237 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":225:19)
#loc238 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":225:9)
#loc239 = loc("CWE127_Buffer_Underread__CWE839_rand_15.c":226:9)
#loc240 = loc(fused[#loc1, #loc2])
#loc241 = loc(fused[#loc3, #loc4])
#loc242 = loc(fused[#loc6, #loc7])
#loc243 = loc(fused[#loc9, #loc10])
#loc244 = loc(fused[#loc11, #loc12])
#loc245 = loc(fused[#loc15, #loc13])
#loc246 = loc(fused[#loc16, #loc17])
#loc247 = loc(fused[#loc21, #loc20])
#loc248 = loc(fused[#loc26, #loc27])
#loc249 = loc(fused[#loc30, #loc31])
#loc250 = loc(fused[#loc32, #loc33])
#loc251 = loc(fused[#loc34, #loc35])
#loc252 = loc(fused[#loc36, #loc37])
#loc253 = loc(fused[#loc38, #loc39, #loc40, #loc35])
#loc254 = loc(fused[#loc50, #loc51])
#loc255 = loc(fused[#loc52, #loc53])
#loc256 = loc(fused[#loc54, #loc55])
#loc257 = loc(fused[#loc56, #loc57])
#loc258 = loc(fused[#loc58, #loc59])
#loc259 = loc(fused[#loc61, #loc62])
#loc260 = loc(fused[#loc63, #loc64])
#loc261 = loc(fused[#loc67, #loc65])
#loc262 = loc(fused[#loc68, #loc69])
#loc263 = loc(fused[#loc73, #loc72])
#loc264 = loc(fused[#loc79, #loc80])
#loc265 = loc(fused[#loc87, #loc88])
#loc266 = loc(fused[#loc89, #loc90])
#loc267 = loc(fused[#loc91, #loc92])
#loc268 = loc(fused[#loc93, #loc94])
#loc269 = loc(fused[#loc96, #loc98])
#loc270 = loc(fused[#loc99, #loc100, #loc101, #loc92])
#loc271 = loc(fused[#loc107, #loc108])
#loc272 = loc(fused[#loc109, #loc110])
#loc273 = loc(fused[#loc113, #loc111])
#loc274 = loc(fused[#loc114, #loc115])
#loc275 = loc(fused[#loc119, #loc118])
#loc276 = loc(fused[#loc125, #loc126])
#loc277 = loc(fused[#loc129, #loc130])
#loc278 = loc(fused[#loc131, #loc132])
#loc279 = loc(fused[#loc133, #loc134])
#loc280 = loc(fused[#loc135, #loc136])
#loc281 = loc(fused[#loc138, #loc140])
#loc282 = loc(fused[#loc141, #loc142, #loc143, #loc134])
#loc283 = loc(fused[#loc154, #loc155])
#loc284 = loc(fused[#loc156, #loc157])
#loc285 = loc(fused[#loc160, #loc158])
#loc286 = loc(fused[#loc161, #loc162])
#loc287 = loc(fused[#loc170, #loc169])
#loc288 = loc(fused[#loc172, #loc173])
#loc289 = loc(fused[#loc176, #loc177])
#loc290 = loc(fused[#loc178, #loc179])
#loc291 = loc(fused[#loc180, #loc181])
#loc292 = loc(fused[#loc182, #loc183])
#loc293 = loc(fused[#loc184, #loc185, #loc186, #loc181])
#loc294 = loc(fused[#loc197, #loc198])
#loc295 = loc(fused[#loc199, #loc200])
#loc296 = loc(fused[#loc203, #loc201])
#loc297 = loc(fused[#loc204, #loc205])
#loc298 = loc(fused[#loc209, #loc208])
#loc299 = loc(fused[#loc215, #loc216])
#loc300 = loc(fused[#loc219, #loc220])
#loc301 = loc(fused[#loc221, #loc222])
#loc302 = loc(fused[#loc223, #loc224])
#loc303 = loc(fused[#loc225, #loc226])
#loc304 = loc(fused[#loc227, #loc228, #loc229, #loc224])
