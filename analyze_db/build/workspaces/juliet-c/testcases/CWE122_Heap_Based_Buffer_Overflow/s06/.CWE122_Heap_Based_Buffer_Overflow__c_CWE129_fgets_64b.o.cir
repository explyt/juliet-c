!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":24:68)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":24:75)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":63:72)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":63:79)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":98:72)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":98:79)
#true = #cir.bool<true> : !cir.bool
#loc237 = loc(fused[#loc14, #loc15])
#loc265 = loc(fused[#loc85, #loc86])
#loc293 = loc(fused[#loc158, #loc159])
module @"/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc231)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc232)
  cir.func private @printIntLine(!s32i) loc(#loc233)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc234)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"ERROR: Array index is negative.\00" : !cir.array<!s8i x 32>> : !cir.array<!s8i x 32> {alignment = 1 : i64} loc(#loc9)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc235)
  cir.func @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b_badSink(%arg0: !cir.ptr<!void> loc(fused[#loc14, #loc15])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dataVoidPtr", init] {alignment = 8 : i64} loc(#loc237)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr", init] {alignment = 8 : i64} loc(#loc238)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc239)
    cir.store %arg0, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc20)
    %3 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc17)
    %4 = cir.cast(bitcast, %3 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc17)
    cir.store %4, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc238)
    %5 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc21)
    %6 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc22)
    cir.store %6, %2 : !s32i, !cir.ptr<!s32i> loc(#loc239)
    cir.scope {
      %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc241)
      %8 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc242)
      %9 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc29)
      %10 = cir.const #cir.int<10> : !s32i loc(#loc30)
      %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc30)
      %12 = cir.const #cir.int<4> : !u64i loc(#loc243)
      %13 = cir.binop(mul, %11, %12) : !u64i loc(#loc244)
      %14 = cir.call @malloc(%13) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc29)
      %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc245)
      cir.store %15, %8 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc242)
      cir.scope {
        %19 = cir.load %8 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc35)
        %20 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc36)
        %21 = cir.cast(bitcast, %20 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc36)
        %22 = cir.cmp(eq, %19, %21) : !cir.ptr<!s32i>, !cir.bool loc(#loc247)
        cir.if %22 {
          %23 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc38)
          %24 = cir.const #cir.int<1> : !s32i loc(#loc39)
          %25 = cir.unary(minus, %24) nsw : !s32i, !s32i loc(#loc40)
          cir.call @exit(%25) : (!s32i) -> () extra(#fn_attr) loc(#loc38)
        } loc(#loc248)
      } loc(#loc246)
      cir.scope {
        %19 = cir.const #cir.int<0> : !s32i loc(#loc43)
        cir.store %19, %7 : !s32i, !cir.ptr<!s32i> loc(#loc250)
        cir.for : cond {
          %20 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc45)
          %21 = cir.const #cir.int<10> : !s32i loc(#loc46)
          %22 = cir.cmp(lt, %20, %21) : !s32i, !cir.bool loc(#loc251)
          cir.condition(%22) loc(#loc47)
        } body {
          cir.scope {
            %20 = cir.const #cir.int<0> : !s32i loc(#loc49)
            %21 = cir.load %8 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc50)
            %22 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc51)
            %23 = cir.ptr_stride(%21 : !cir.ptr<!s32i>, %22 : !s32i), !cir.ptr<!s32i> loc(#loc52)
            cir.store %20, %23 : !s32i, !cir.ptr<!s32i> loc(#loc253)
          } loc(#loc252)
          cir.yield loc(#loc42)
        } step {
          %20 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc53)
          %21 = cir.unary(inc, %20) nsw : !s32i, !s32i loc(#loc54)
          cir.store %21, %7 : !s32i, !cir.ptr<!s32i> loc(#loc254)
          cir.yield loc(#loc249)
        } loc(#loc249)
      } loc(#loc249)
      cir.scope {
        %19 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc57)
        %20 = cir.const #cir.int<0> : !s32i loc(#loc58)
        %21 = cir.cmp(ge, %19, %20) : !s32i, !cir.bool loc(#loc256)
        cir.if %21 {
          %22 = cir.const #cir.int<1> : !s32i loc(#loc62)
          %23 = cir.load %8 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc63)
          %24 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc64)
          %25 = cir.ptr_stride(%23 : !cir.ptr<!s32i>, %24 : !s32i), !cir.ptr<!s32i> loc(#loc65)
          cir.store %22, %25 : !s32i, !cir.ptr<!s32i> loc(#loc258)
          cir.scope {
            %26 = cir.const #cir.int<0> : !s32i loc(#loc68)
            cir.store %26, %7 : !s32i, !cir.ptr<!s32i> loc(#loc260)
            cir.for : cond {
              %27 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc70)
              %28 = cir.const #cir.int<10> : !s32i loc(#loc71)
              %29 = cir.cmp(lt, %27, %28) : !s32i, !cir.bool loc(#loc261)
              cir.condition(%29) loc(#loc72)
            } body {
              cir.scope {
                %27 = cir.load %8 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc74)
                %28 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc75)
                %29 = cir.ptr_stride(%27 : !cir.ptr<!s32i>, %28 : !s32i), !cir.ptr<!s32i> loc(#loc76)
                %30 = cir.load %29 : !cir.ptr<!s32i>, !s32i loc(#loc74)
                cir.call @printIntLine(%30) : (!s32i) -> () loc(#loc77)
              } loc(#loc262)
              cir.yield loc(#loc67)
            } step {
              %27 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc78)
              %28 = cir.unary(inc, %27) nsw : !s32i, !s32i loc(#loc79)
              cir.store %28, %7 : !s32i, !cir.ptr<!s32i> loc(#loc263)
              cir.yield loc(#loc259)
            } loc(#loc259)
          } loc(#loc259)
        } else {
          %22 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc9)
          %23 = cir.cast(array_to_ptrdecay, %22 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc9)
          cir.call @printLine(%23) : (!cir.ptr<!s8i>) -> () loc(#loc80)
        } loc(#loc257)
      } loc(#loc255)
      %16 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc81)
      %17 = cir.load %8 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc82)
      %18 = cir.cast(bitcast, %17 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc82)
      cir.call @free(%18) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc81)
    } loc(#loc240)
    cir.return loc(#loc13)
  } loc(#loc236)
  cir.func @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b_goodG2BSink(%arg0: !cir.ptr<!void> loc(fused[#loc85, #loc86])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dataVoidPtr", init] {alignment = 8 : i64} loc(#loc265)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr", init] {alignment = 8 : i64} loc(#loc266)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc267)
    cir.store %arg0, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc91)
    %3 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc88)
    %4 = cir.cast(bitcast, %3 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc88)
    cir.store %4, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc266)
    %5 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc92)
    %6 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc93)
    cir.store %6, %2 : !s32i, !cir.ptr<!s32i> loc(#loc267)
    cir.scope {
      %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc269)
      %8 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc270)
      %9 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc100)
      %10 = cir.const #cir.int<10> : !s32i loc(#loc101)
      %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc101)
      %12 = cir.const #cir.int<4> : !u64i loc(#loc271)
      %13 = cir.binop(mul, %11, %12) : !u64i loc(#loc272)
      %14 = cir.call @malloc(%13) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc100)
      %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc273)
      cir.store %15, %8 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc270)
      cir.scope {
        %19 = cir.load %8 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc106)
        %20 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc107)
        %21 = cir.cast(bitcast, %20 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc107)
        %22 = cir.cmp(eq, %19, %21) : !cir.ptr<!s32i>, !cir.bool loc(#loc275)
        cir.if %22 {
          %23 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc109)
          %24 = cir.const #cir.int<1> : !s32i loc(#loc110)
          %25 = cir.unary(minus, %24) nsw : !s32i, !s32i loc(#loc111)
          cir.call @exit(%25) : (!s32i) -> () extra(#fn_attr) loc(#loc109)
        } loc(#loc276)
      } loc(#loc274)
      cir.scope {
        %19 = cir.const #cir.int<0> : !s32i loc(#loc114)
        cir.store %19, %7 : !s32i, !cir.ptr<!s32i> loc(#loc278)
        cir.for : cond {
          %20 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc116)
          %21 = cir.const #cir.int<10> : !s32i loc(#loc117)
          %22 = cir.cmp(lt, %20, %21) : !s32i, !cir.bool loc(#loc279)
          cir.condition(%22) loc(#loc118)
        } body {
          cir.scope {
            %20 = cir.const #cir.int<0> : !s32i loc(#loc120)
            %21 = cir.load %8 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc121)
            %22 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc122)
            %23 = cir.ptr_stride(%21 : !cir.ptr<!s32i>, %22 : !s32i), !cir.ptr<!s32i> loc(#loc123)
            cir.store %20, %23 : !s32i, !cir.ptr<!s32i> loc(#loc281)
          } loc(#loc280)
          cir.yield loc(#loc113)
        } step {
          %20 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc124)
          %21 = cir.unary(inc, %20) nsw : !s32i, !s32i loc(#loc125)
          cir.store %21, %7 : !s32i, !cir.ptr<!s32i> loc(#loc282)
          cir.yield loc(#loc277)
        } loc(#loc277)
      } loc(#loc277)
      cir.scope {
        %19 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc128)
        %20 = cir.const #cir.int<0> : !s32i loc(#loc129)
        %21 = cir.cmp(ge, %19, %20) : !s32i, !cir.bool loc(#loc284)
        cir.if %21 {
          %22 = cir.const #cir.int<1> : !s32i loc(#loc133)
          %23 = cir.load %8 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc134)
          %24 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc135)
          %25 = cir.ptr_stride(%23 : !cir.ptr<!s32i>, %24 : !s32i), !cir.ptr<!s32i> loc(#loc136)
          cir.store %22, %25 : !s32i, !cir.ptr<!s32i> loc(#loc286)
          cir.scope {
            %26 = cir.const #cir.int<0> : !s32i loc(#loc139)
            cir.store %26, %7 : !s32i, !cir.ptr<!s32i> loc(#loc288)
            cir.for : cond {
              %27 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc141)
              %28 = cir.const #cir.int<10> : !s32i loc(#loc142)
              %29 = cir.cmp(lt, %27, %28) : !s32i, !cir.bool loc(#loc289)
              cir.condition(%29) loc(#loc143)
            } body {
              cir.scope {
                %27 = cir.load %8 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc145)
                %28 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc146)
                %29 = cir.ptr_stride(%27 : !cir.ptr<!s32i>, %28 : !s32i), !cir.ptr<!s32i> loc(#loc147)
                %30 = cir.load %29 : !cir.ptr<!s32i>, !s32i loc(#loc145)
                cir.call @printIntLine(%30) : (!s32i) -> () loc(#loc148)
              } loc(#loc290)
              cir.yield loc(#loc138)
            } step {
              %27 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc149)
              %28 = cir.unary(inc, %27) nsw : !s32i, !s32i loc(#loc150)
              cir.store %28, %7 : !s32i, !cir.ptr<!s32i> loc(#loc291)
              cir.yield loc(#loc287)
            } loc(#loc287)
          } loc(#loc287)
        } else {
          %22 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc151)
          %23 = cir.cast(array_to_ptrdecay, %22 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc151)
          cir.call @printLine(%23) : (!cir.ptr<!s8i>) -> () loc(#loc152)
        } loc(#loc285)
      } loc(#loc283)
      %16 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc153)
      %17 = cir.load %8 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc154)
      %18 = cir.cast(bitcast, %17 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc154)
      cir.call @free(%18) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc153)
    } loc(#loc268)
    cir.return loc(#loc84)
  } loc(#loc264)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"ERROR: Array index is out-of-bounds\00" : !cir.array<!s8i x 36>> : !cir.array<!s8i x 36> {alignment = 1 : i64} loc(#loc155)
  cir.func @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b_goodB2GSink(%arg0: !cir.ptr<!void> loc(fused[#loc158, #loc159])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dataVoidPtr", init] {alignment = 8 : i64} loc(#loc293)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr", init] {alignment = 8 : i64} loc(#loc294)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc295)
    cir.store %arg0, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc164)
    %3 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc161)
    %4 = cir.cast(bitcast, %3 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc161)
    cir.store %4, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc294)
    %5 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc165)
    %6 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc166)
    cir.store %6, %2 : !s32i, !cir.ptr<!s32i> loc(#loc295)
    cir.scope {
      %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc297)
      %8 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc298)
      %9 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc173)
      %10 = cir.const #cir.int<10> : !s32i loc(#loc174)
      %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc174)
      %12 = cir.const #cir.int<4> : !u64i loc(#loc299)
      %13 = cir.binop(mul, %11, %12) : !u64i loc(#loc300)
      %14 = cir.call @malloc(%13) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc173)
      %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc301)
      cir.store %15, %8 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc298)
      cir.scope {
        %19 = cir.load %8 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc179)
        %20 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc180)
        %21 = cir.cast(bitcast, %20 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc180)
        %22 = cir.cmp(eq, %19, %21) : !cir.ptr<!s32i>, !cir.bool loc(#loc303)
        cir.if %22 {
          %23 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc182)
          %24 = cir.const #cir.int<1> : !s32i loc(#loc183)
          %25 = cir.unary(minus, %24) nsw : !s32i, !s32i loc(#loc184)
          cir.call @exit(%25) : (!s32i) -> () extra(#fn_attr) loc(#loc182)
        } loc(#loc304)
      } loc(#loc302)
      cir.scope {
        %19 = cir.const #cir.int<0> : !s32i loc(#loc187)
        cir.store %19, %7 : !s32i, !cir.ptr<!s32i> loc(#loc306)
        cir.for : cond {
          %20 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc189)
          %21 = cir.const #cir.int<10> : !s32i loc(#loc190)
          %22 = cir.cmp(lt, %20, %21) : !s32i, !cir.bool loc(#loc307)
          cir.condition(%22) loc(#loc191)
        } body {
          cir.scope {
            %20 = cir.const #cir.int<0> : !s32i loc(#loc193)
            %21 = cir.load %8 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc194)
            %22 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc195)
            %23 = cir.ptr_stride(%21 : !cir.ptr<!s32i>, %22 : !s32i), !cir.ptr<!s32i> loc(#loc196)
            cir.store %20, %23 : !s32i, !cir.ptr<!s32i> loc(#loc309)
          } loc(#loc308)
          cir.yield loc(#loc186)
        } step {
          %20 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc197)
          %21 = cir.unary(inc, %20) nsw : !s32i, !s32i loc(#loc198)
          cir.store %21, %7 : !s32i, !cir.ptr<!s32i> loc(#loc310)
          cir.yield loc(#loc305)
        } loc(#loc305)
      } loc(#loc305)
      cir.scope {
        %19 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc201)
        %20 = cir.const #cir.int<0> : !s32i loc(#loc202)
        %21 = cir.cmp(ge, %19, %20) : !s32i, !cir.bool loc(#loc312)
        %22 = cir.ternary(%21, true {
          %23 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc204)
          %24 = cir.const #cir.int<10> : !s32i loc(#loc205)
          %25 = cir.cmp(lt, %23, %24) : !s32i, !cir.bool loc(#loc313)
          %26 = cir.ternary(%25, true {
            %27 = cir.const #true loc(#loc203)
            cir.yield %27 : !cir.bool loc(#loc203)
          }, false {
            %27 = cir.const #false loc(#loc203)
            cir.yield %27 : !cir.bool loc(#loc203)
          }) : (!cir.bool) -> !cir.bool loc(#loc203)
          cir.yield %26 : !cir.bool loc(#loc203)
        }, false {
          %23 = cir.const #false loc(#loc203)
          cir.yield %23 : !cir.bool loc(#loc203)
        }) : (!cir.bool) -> !cir.bool loc(#loc203)
        cir.if %22 {
          %23 = cir.const #cir.int<1> : !s32i loc(#loc210)
          %24 = cir.load %8 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc211)
          %25 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc212)
          %26 = cir.ptr_stride(%24 : !cir.ptr<!s32i>, %25 : !s32i), !cir.ptr<!s32i> loc(#loc213)
          cir.store %23, %26 : !s32i, !cir.ptr<!s32i> loc(#loc315)
          cir.scope {
            %27 = cir.const #cir.int<0> : !s32i loc(#loc216)
            cir.store %27, %7 : !s32i, !cir.ptr<!s32i> loc(#loc317)
            cir.for : cond {
              %28 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc218)
              %29 = cir.const #cir.int<10> : !s32i loc(#loc219)
              %30 = cir.cmp(lt, %28, %29) : !s32i, !cir.bool loc(#loc318)
              cir.condition(%30) loc(#loc220)
            } body {
              cir.scope {
                %28 = cir.load %8 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc222)
                %29 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc223)
                %30 = cir.ptr_stride(%28 : !cir.ptr<!s32i>, %29 : !s32i), !cir.ptr<!s32i> loc(#loc224)
                %31 = cir.load %30 : !cir.ptr<!s32i>, !s32i loc(#loc222)
                cir.call @printIntLine(%31) : (!s32i) -> () loc(#loc225)
              } loc(#loc319)
              cir.yield loc(#loc215)
            } step {
              %28 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc226)
              %29 = cir.unary(inc, %28) nsw : !s32i, !s32i loc(#loc227)
              cir.store %29, %7 : !s32i, !cir.ptr<!s32i> loc(#loc320)
              cir.yield loc(#loc316)
            } loc(#loc316)
          } loc(#loc316)
        } else {
          %23 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc155)
          %24 = cir.cast(array_to_ptrdecay, %23 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc155)
          cir.call @printLine(%24) : (!cir.ptr<!s8i>) -> () loc(#loc228)
        } loc(#loc314)
      } loc(#loc311)
      %16 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc229)
      %17 = cir.load %8 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc230)
      %18 = cir.cast(bitcast, %17 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc230)
      cir.call @free(%18) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc229)
    } loc(#loc296)
    cir.return loc(#loc157)
  } loc(#loc292)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":52:23)
#loc10 = loc("/usr/include/stdlib.h":687:1)
#loc11 = loc("/usr/include/stdlib.h":687:32)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":24:1)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":56:1)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":27:5)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":27:28)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":29:5)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":29:25)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":25:1)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":29:18)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":29:17)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":30:5)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":55:5)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":31:9)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":31:13)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":32:9)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":32:54)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":32:31)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":32:38)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":32:43)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":32:53)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":33:9)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":33:39)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":33:13)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":33:23)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":33:29)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":33:30)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":33:36)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":33:35)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":35:9)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":38:9)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":35:18)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":35:14)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":35:21)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":35:25)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":35:23)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":36:9)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":37:25)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":37:13)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":37:20)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":37:21)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":35:30)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":35:29)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":41:9)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":53:9)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":41:13)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":41:21)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":42:9)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":49:9)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":51:9)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":43:28)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":43:13)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":43:20)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":43:24)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":45:13)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":48:13)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":45:21)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":45:17)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":45:24)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":45:28)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":45:26)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":46:13)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":47:30)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":47:37)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":47:38)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":47:17)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":45:33)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":45:32)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":52:13)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":54:9)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":54:14)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":63:1)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":95:1)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":66:5)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":66:28)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":68:5)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":68:25)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":64:1)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":68:18)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":68:17)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":69:5)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":94:5)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":70:9)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":70:13)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":71:9)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":71:54)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":71:31)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":71:38)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":71:43)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":71:53)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":72:9)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":72:39)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":72:13)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":72:23)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":72:29)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":72:30)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":72:36)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":72:35)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":74:9)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":77:9)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":74:18)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":74:14)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":74:21)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":74:25)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":74:23)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":75:9)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":76:25)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":76:13)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":76:20)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":76:21)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":74:30)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":74:29)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":80:9)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":92:9)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":80:13)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":80:21)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":81:9)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":88:9)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":90:9)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":82:28)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":82:13)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":82:20)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":82:24)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":84:13)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":87:13)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":84:21)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":84:17)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":84:24)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":84:28)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":84:26)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":85:13)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":86:30)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":86:37)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":86:38)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":86:17)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":84:33)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":84:32)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":91:23)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":91:13)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":93:9)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":93:14)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":125:23)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":98:1)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":129:1)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":101:5)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":101:28)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":103:5)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":103:25)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":99:1)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":103:18)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":103:17)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":104:5)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":128:5)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":105:9)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":105:13)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":106:9)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":106:54)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":106:31)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":106:38)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":106:43)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":106:53)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":107:9)
#loc178 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":107:39)
#loc179 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":107:13)
#loc180 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":107:23)
#loc181 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":107:29)
#loc182 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":107:30)
#loc183 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":107:36)
#loc184 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":107:35)
#loc185 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":109:9)
#loc186 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":112:9)
#loc187 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":109:18)
#loc188 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":109:14)
#loc189 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":109:21)
#loc190 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":109:25)
#loc191 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":109:23)
#loc192 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":110:9)
#loc193 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":111:25)
#loc194 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":111:13)
#loc195 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":111:20)
#loc196 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":111:21)
#loc197 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":109:30)
#loc198 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":109:29)
#loc199 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":114:9)
#loc200 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":126:9)
#loc201 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":114:13)
#loc202 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":114:21)
#loc203 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":114:23)
#loc204 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":114:26)
#loc205 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":114:34)
#loc206 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":114:36)
#loc207 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":115:9)
#loc208 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":122:9)
#loc209 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":124:9)
#loc210 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":116:28)
#loc211 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":116:13)
#loc212 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":116:20)
#loc213 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":116:24)
#loc214 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":118:13)
#loc215 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":121:13)
#loc216 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":118:21)
#loc217 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":118:17)
#loc218 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":118:24)
#loc219 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":118:28)
#loc220 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":118:26)
#loc221 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":119:13)
#loc222 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":120:30)
#loc223 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":120:37)
#loc224 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":120:38)
#loc225 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":120:17)
#loc226 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":118:33)
#loc227 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":118:32)
#loc228 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":125:13)
#loc229 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":127:9)
#loc230 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c":127:14)
#loc231 = loc(fused[#loc1, #loc2])
#loc232 = loc(fused[#loc3, #loc4])
#loc233 = loc(fused[#loc5, #loc6])
#loc234 = loc(fused[#loc7, #loc8])
#loc235 = loc(fused[#loc10, #loc11])
#loc236 = loc(fused[#loc12, #loc13])
#loc238 = loc(fused[#loc16, #loc17])
#loc239 = loc(fused[#loc18, #loc19])
#loc240 = loc(fused[#loc23, #loc24])
#loc241 = loc(fused[#loc25, #loc26])
#loc242 = loc(fused[#loc27, #loc28])
#loc243 = loc(fused[#loc31, #loc32])
#loc244 = loc(fused[#loc30, #loc32])
#loc245 = loc(fused[#loc29, #loc28])
#loc246 = loc(fused[#loc33, #loc34])
#loc247 = loc(fused[#loc35, #loc36])
#loc248 = loc(fused[#loc37, #loc34])
#loc249 = loc(fused[#loc41, #loc42])
#loc250 = loc(fused[#loc44, #loc43])
#loc251 = loc(fused[#loc45, #loc46])
#loc252 = loc(fused[#loc48, #loc42])
#loc253 = loc(fused[#loc50, #loc49])
#loc254 = loc(fused[#loc54, #loc53])
#loc255 = loc(fused[#loc55, #loc56])
#loc256 = loc(fused[#loc57, #loc58])
#loc257 = loc(fused[#loc59, #loc60, #loc61, #loc56])
#loc258 = loc(fused[#loc63, #loc62])
#loc259 = loc(fused[#loc66, #loc67])
#loc260 = loc(fused[#loc69, #loc68])
#loc261 = loc(fused[#loc70, #loc71])
#loc262 = loc(fused[#loc73, #loc67])
#loc263 = loc(fused[#loc79, #loc78])
#loc264 = loc(fused[#loc83, #loc84])
#loc266 = loc(fused[#loc87, #loc88])
#loc267 = loc(fused[#loc89, #loc90])
#loc268 = loc(fused[#loc94, #loc95])
#loc269 = loc(fused[#loc96, #loc97])
#loc270 = loc(fused[#loc98, #loc99])
#loc271 = loc(fused[#loc102, #loc103])
#loc272 = loc(fused[#loc101, #loc103])
#loc273 = loc(fused[#loc100, #loc99])
#loc274 = loc(fused[#loc104, #loc105])
#loc275 = loc(fused[#loc106, #loc107])
#loc276 = loc(fused[#loc108, #loc105])
#loc277 = loc(fused[#loc112, #loc113])
#loc278 = loc(fused[#loc115, #loc114])
#loc279 = loc(fused[#loc116, #loc117])
#loc280 = loc(fused[#loc119, #loc113])
#loc281 = loc(fused[#loc121, #loc120])
#loc282 = loc(fused[#loc125, #loc124])
#loc283 = loc(fused[#loc126, #loc127])
#loc284 = loc(fused[#loc128, #loc129])
#loc285 = loc(fused[#loc130, #loc131, #loc132, #loc127])
#loc286 = loc(fused[#loc134, #loc133])
#loc287 = loc(fused[#loc137, #loc138])
#loc288 = loc(fused[#loc140, #loc139])
#loc289 = loc(fused[#loc141, #loc142])
#loc290 = loc(fused[#loc144, #loc138])
#loc291 = loc(fused[#loc150, #loc149])
#loc292 = loc(fused[#loc156, #loc157])
#loc294 = loc(fused[#loc160, #loc161])
#loc295 = loc(fused[#loc162, #loc163])
#loc296 = loc(fused[#loc167, #loc168])
#loc297 = loc(fused[#loc169, #loc170])
#loc298 = loc(fused[#loc171, #loc172])
#loc299 = loc(fused[#loc175, #loc176])
#loc300 = loc(fused[#loc174, #loc176])
#loc301 = loc(fused[#loc173, #loc172])
#loc302 = loc(fused[#loc177, #loc178])
#loc303 = loc(fused[#loc179, #loc180])
#loc304 = loc(fused[#loc181, #loc178])
#loc305 = loc(fused[#loc185, #loc186])
#loc306 = loc(fused[#loc188, #loc187])
#loc307 = loc(fused[#loc189, #loc190])
#loc308 = loc(fused[#loc192, #loc186])
#loc309 = loc(fused[#loc194, #loc193])
#loc310 = loc(fused[#loc198, #loc197])
#loc311 = loc(fused[#loc199, #loc200])
#loc312 = loc(fused[#loc201, #loc202])
#loc313 = loc(fused[#loc204, #loc206])
#loc314 = loc(fused[#loc207, #loc208, #loc209, #loc200])
#loc315 = loc(fused[#loc211, #loc210])
#loc316 = loc(fused[#loc214, #loc215])
#loc317 = loc(fused[#loc217, #loc216])
#loc318 = loc(fused[#loc218, #loc219])
#loc319 = loc(fused[#loc221, #loc215])
#loc320 = loc(fused[#loc227, #loc226])
