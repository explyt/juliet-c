!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.record<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.record<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.record<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#true = #cir.bool<true> : !cir.bool
!ty__IO_FILE = !cir.record<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e", "dlti.endianness" = "little">} {
  cir.func private @__isoc99_fscanf(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i loc(#loc267)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc268)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"%d\00" : !cir.array<!s8i x 3>> : !cir.array<!s8i x 3> {alignment = 1 : i64} loc(#loc5)
  cir.global "private" internal dsolocal @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45_badData = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc269)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc271)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc12)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc13)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc272)
    %3 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc15)
    %4 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc268)
    %5 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc16)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc5)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc5)
    %8 = cir.call @__isoc99_fscanf(%5, %7, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s32i>) -> !s32i loc(#loc15)
    %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc17)
    %10 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45_badData : !cir.ptr<!s32i> loc(#loc269)
    cir.store %9, %10 : !s32i, !cir.ptr<!s32i> loc(#loc273)
    %11 = cir.get_global @badSink : !cir.ptr<!cir.func<()>> loc(#loc274)
    cir.call %11() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc19)
    cir.return loc(#loc9)
  } loc(#loc270)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45_good() extra(#fn_attr) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc276)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc23)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc277)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc25)
    cir.return loc(#loc22)
  } loc(#loc275)
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr1) loc(#loc278)
  cir.func private @exit(!s32i) extra(#fn_attr1) loc(#loc279)
  cir.func private @printIntLine(!s32i) loc(#loc280)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc281)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"ERROR: Array index is negative.\00" : !cir.array<!s8i x 32>> : !cir.array<!s8i x 32> {alignment = 1 : i64} loc(#loc35)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr1) loc(#loc282)
  cir.func no_proto internal private @badSink() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc284)
    %1 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45_badData : !cir.ptr<!s32i> loc(#loc269)
    %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc41)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc284)
    cir.scope {
      %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc286)
      %4 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc287)
      %5 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc48)
      %6 = cir.const #cir.int<10> : !s32i loc(#loc49)
      %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc49)
      %8 = cir.const #cir.int<4> : !u64i loc(#loc288)
      %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc289)
      %10 = cir.call @malloc(%9) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr1) loc(#loc48)
      %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc290)
      cir.store %11, %4 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc287)
      cir.scope {
        %15 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc54)
        %16 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc55)
        %17 = cir.cast(bitcast, %16 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc55)
        %18 = cir.cmp(eq, %15, %17) : !cir.ptr<!s32i>, !cir.bool loc(#loc292)
        cir.if %18 {
          %19 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc57)
          %20 = cir.const #cir.int<1> : !s32i loc(#loc58)
          %21 = cir.unary(minus, %20) nsw : !s32i, !s32i loc(#loc59)
          cir.call @exit(%21) : (!s32i) -> () extra(#fn_attr1) loc(#loc57)
        } loc(#loc293)
      } loc(#loc291)
      cir.scope {
        %15 = cir.const #cir.int<0> : !s32i loc(#loc62)
        cir.store %15, %3 : !s32i, !cir.ptr<!s32i> loc(#loc295)
        cir.for : cond {
          %16 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc64)
          %17 = cir.const #cir.int<10> : !s32i loc(#loc65)
          %18 = cir.cmp(lt, %16, %17) : !s32i, !cir.bool loc(#loc296)
          cir.condition(%18) loc(#loc66)
        } body {
          cir.scope {
            %16 = cir.const #cir.int<0> : !s32i loc(#loc68)
            %17 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc69)
            %18 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc70)
            %19 = cir.ptr_stride(%17 : !cir.ptr<!s32i>, %18 : !s32i), !cir.ptr<!s32i> loc(#loc71)
            cir.store %16, %19 : !s32i, !cir.ptr<!s32i> loc(#loc298)
          } loc(#loc297)
          cir.yield loc(#loc61)
        } step {
          %16 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc72)
          %17 = cir.unary(inc, %16) nsw : !s32i, !s32i loc(#loc73)
          cir.store %17, %3 : !s32i, !cir.ptr<!s32i> loc(#loc299)
          cir.yield loc(#loc294)
        } loc(#loc294)
      } loc(#loc294)
      cir.scope {
        %15 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc76)
        %16 = cir.const #cir.int<0> : !s32i loc(#loc77)
        %17 = cir.cmp(ge, %15, %16) : !s32i, !cir.bool loc(#loc301)
        cir.if %17 {
          %18 = cir.const #cir.int<1> : !s32i loc(#loc81)
          %19 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc82)
          %20 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc83)
          %21 = cir.ptr_stride(%19 : !cir.ptr<!s32i>, %20 : !s32i), !cir.ptr<!s32i> loc(#loc84)
          cir.store %18, %21 : !s32i, !cir.ptr<!s32i> loc(#loc303)
          cir.scope {
            %22 = cir.const #cir.int<0> : !s32i loc(#loc87)
            cir.store %22, %3 : !s32i, !cir.ptr<!s32i> loc(#loc305)
            cir.for : cond {
              %23 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc89)
              %24 = cir.const #cir.int<10> : !s32i loc(#loc90)
              %25 = cir.cmp(lt, %23, %24) : !s32i, !cir.bool loc(#loc306)
              cir.condition(%25) loc(#loc91)
            } body {
              cir.scope {
                %23 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc93)
                %24 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc94)
                %25 = cir.ptr_stride(%23 : !cir.ptr<!s32i>, %24 : !s32i), !cir.ptr<!s32i> loc(#loc95)
                %26 = cir.load %25 : !cir.ptr<!s32i>, !s32i loc(#loc93)
                cir.call @printIntLine(%26) : (!s32i) -> () loc(#loc96)
              } loc(#loc307)
              cir.yield loc(#loc86)
            } step {
              %23 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc97)
              %24 = cir.unary(inc, %23) nsw : !s32i, !s32i loc(#loc98)
              cir.store %24, %3 : !s32i, !cir.ptr<!s32i> loc(#loc308)
              cir.yield loc(#loc304)
            } loc(#loc304)
          } loc(#loc304)
        } else {
          %18 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc35)
          %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc35)
          cir.call @printLine(%19) : (!cir.ptr<!s8i>) -> () loc(#loc99)
        } loc(#loc302)
      } loc(#loc300)
      %12 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc100)
      %13 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc101)
      %14 = cir.cast(bitcast, %13 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc101)
      cir.call @free(%14) : (!cir.ptr<!void>) -> () extra(#fn_attr1) loc(#loc100)
    } loc(#loc285)
    cir.return loc(#loc39)
  } loc(#loc283)
  cir.global "private" internal dsolocal @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45_goodG2BData = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc309)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc311)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc108)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc109)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc312)
    %3 = cir.const #cir.int<7> : !s32i loc(#loc111)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc313)
    %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc113)
    %5 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45_goodG2BData : !cir.ptr<!s32i> loc(#loc309)
    cir.store %4, %5 : !s32i, !cir.ptr<!s32i> loc(#loc314)
    %6 = cir.get_global @goodG2BSink : !cir.ptr<!cir.func<()>> loc(#loc315)
    cir.call %6() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc115)
    cir.return loc(#loc105)
  } loc(#loc310)
  cir.func no_proto internal private @goodG2BSink() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc317)
    %1 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45_goodG2BData : !cir.ptr<!s32i> loc(#loc309)
    %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc120)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc317)
    cir.scope {
      %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc319)
      %4 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc320)
      %5 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc127)
      %6 = cir.const #cir.int<10> : !s32i loc(#loc128)
      %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc128)
      %8 = cir.const #cir.int<4> : !u64i loc(#loc321)
      %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc322)
      %10 = cir.call @malloc(%9) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr1) loc(#loc127)
      %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc323)
      cir.store %11, %4 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc320)
      cir.scope {
        %15 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc133)
        %16 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc134)
        %17 = cir.cast(bitcast, %16 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc134)
        %18 = cir.cmp(eq, %15, %17) : !cir.ptr<!s32i>, !cir.bool loc(#loc325)
        cir.if %18 {
          %19 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc136)
          %20 = cir.const #cir.int<1> : !s32i loc(#loc137)
          %21 = cir.unary(minus, %20) nsw : !s32i, !s32i loc(#loc138)
          cir.call @exit(%21) : (!s32i) -> () extra(#fn_attr1) loc(#loc136)
        } loc(#loc326)
      } loc(#loc324)
      cir.scope {
        %15 = cir.const #cir.int<0> : !s32i loc(#loc141)
        cir.store %15, %3 : !s32i, !cir.ptr<!s32i> loc(#loc328)
        cir.for : cond {
          %16 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc143)
          %17 = cir.const #cir.int<10> : !s32i loc(#loc144)
          %18 = cir.cmp(lt, %16, %17) : !s32i, !cir.bool loc(#loc329)
          cir.condition(%18) loc(#loc145)
        } body {
          cir.scope {
            %16 = cir.const #cir.int<0> : !s32i loc(#loc147)
            %17 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc148)
            %18 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc149)
            %19 = cir.ptr_stride(%17 : !cir.ptr<!s32i>, %18 : !s32i), !cir.ptr<!s32i> loc(#loc150)
            cir.store %16, %19 : !s32i, !cir.ptr<!s32i> loc(#loc331)
          } loc(#loc330)
          cir.yield loc(#loc140)
        } step {
          %16 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc151)
          %17 = cir.unary(inc, %16) nsw : !s32i, !s32i loc(#loc152)
          cir.store %17, %3 : !s32i, !cir.ptr<!s32i> loc(#loc332)
          cir.yield loc(#loc327)
        } loc(#loc327)
      } loc(#loc327)
      cir.scope {
        %15 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc155)
        %16 = cir.const #cir.int<0> : !s32i loc(#loc156)
        %17 = cir.cmp(ge, %15, %16) : !s32i, !cir.bool loc(#loc334)
        cir.if %17 {
          %18 = cir.const #cir.int<1> : !s32i loc(#loc160)
          %19 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc161)
          %20 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc162)
          %21 = cir.ptr_stride(%19 : !cir.ptr<!s32i>, %20 : !s32i), !cir.ptr<!s32i> loc(#loc163)
          cir.store %18, %21 : !s32i, !cir.ptr<!s32i> loc(#loc336)
          cir.scope {
            %22 = cir.const #cir.int<0> : !s32i loc(#loc166)
            cir.store %22, %3 : !s32i, !cir.ptr<!s32i> loc(#loc338)
            cir.for : cond {
              %23 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc168)
              %24 = cir.const #cir.int<10> : !s32i loc(#loc169)
              %25 = cir.cmp(lt, %23, %24) : !s32i, !cir.bool loc(#loc339)
              cir.condition(%25) loc(#loc170)
            } body {
              cir.scope {
                %23 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc172)
                %24 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc173)
                %25 = cir.ptr_stride(%23 : !cir.ptr<!s32i>, %24 : !s32i), !cir.ptr<!s32i> loc(#loc174)
                %26 = cir.load %25 : !cir.ptr<!s32i>, !s32i loc(#loc172)
                cir.call @printIntLine(%26) : (!s32i) -> () loc(#loc175)
              } loc(#loc340)
              cir.yield loc(#loc165)
            } step {
              %23 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc176)
              %24 = cir.unary(inc, %23) nsw : !s32i, !s32i loc(#loc177)
              cir.store %24, %3 : !s32i, !cir.ptr<!s32i> loc(#loc341)
              cir.yield loc(#loc337)
            } loc(#loc337)
          } loc(#loc337)
        } else {
          %18 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc178)
          %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc178)
          cir.call @printLine(%19) : (!cir.ptr<!s8i>) -> () loc(#loc179)
        } loc(#loc335)
      } loc(#loc333)
      %12 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc180)
      %13 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc181)
      %14 = cir.cast(bitcast, %13 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc181)
      cir.call @free(%14) : (!cir.ptr<!void>) -> () extra(#fn_attr1) loc(#loc180)
    } loc(#loc318)
    cir.return loc(#loc118)
  } loc(#loc316)
  cir.global "private" internal dsolocal @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45_goodB2GData = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc342)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc344)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc188)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc189)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc345)
    %3 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc191)
    %4 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc268)
    %5 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc192)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc193)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc193)
    %8 = cir.call @__isoc99_fscanf(%5, %7, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s32i>) -> !s32i loc(#loc191)
    %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc194)
    %10 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45_goodB2GData : !cir.ptr<!s32i> loc(#loc342)
    cir.store %9, %10 : !s32i, !cir.ptr<!s32i> loc(#loc346)
    %11 = cir.get_global @goodB2GSink : !cir.ptr<!cir.func<()>> loc(#loc347)
    cir.call %11() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc196)
    cir.return loc(#loc185)
  } loc(#loc343)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"ERROR: Array index is out-of-bounds\00" : !cir.array<!s8i x 36>> : !cir.array<!s8i x 36> {alignment = 1 : i64} loc(#loc198)
  cir.func no_proto internal private @goodB2GSink() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc349)
    %1 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45_goodB2GData : !cir.ptr<!s32i> loc(#loc342)
    %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc202)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc349)
    cir.scope {
      %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc351)
      %4 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc352)
      %5 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc209)
      %6 = cir.const #cir.int<10> : !s32i loc(#loc210)
      %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc210)
      %8 = cir.const #cir.int<4> : !u64i loc(#loc353)
      %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc354)
      %10 = cir.call @malloc(%9) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr1) loc(#loc209)
      %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc355)
      cir.store %11, %4 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc352)
      cir.scope {
        %15 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc215)
        %16 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc216)
        %17 = cir.cast(bitcast, %16 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc216)
        %18 = cir.cmp(eq, %15, %17) : !cir.ptr<!s32i>, !cir.bool loc(#loc357)
        cir.if %18 {
          %19 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc218)
          %20 = cir.const #cir.int<1> : !s32i loc(#loc219)
          %21 = cir.unary(minus, %20) nsw : !s32i, !s32i loc(#loc220)
          cir.call @exit(%21) : (!s32i) -> () extra(#fn_attr1) loc(#loc218)
        } loc(#loc358)
      } loc(#loc356)
      cir.scope {
        %15 = cir.const #cir.int<0> : !s32i loc(#loc223)
        cir.store %15, %3 : !s32i, !cir.ptr<!s32i> loc(#loc360)
        cir.for : cond {
          %16 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc225)
          %17 = cir.const #cir.int<10> : !s32i loc(#loc226)
          %18 = cir.cmp(lt, %16, %17) : !s32i, !cir.bool loc(#loc361)
          cir.condition(%18) loc(#loc227)
        } body {
          cir.scope {
            %16 = cir.const #cir.int<0> : !s32i loc(#loc229)
            %17 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc230)
            %18 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc231)
            %19 = cir.ptr_stride(%17 : !cir.ptr<!s32i>, %18 : !s32i), !cir.ptr<!s32i> loc(#loc232)
            cir.store %16, %19 : !s32i, !cir.ptr<!s32i> loc(#loc363)
          } loc(#loc362)
          cir.yield loc(#loc222)
        } step {
          %16 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc233)
          %17 = cir.unary(inc, %16) nsw : !s32i, !s32i loc(#loc234)
          cir.store %17, %3 : !s32i, !cir.ptr<!s32i> loc(#loc364)
          cir.yield loc(#loc359)
        } loc(#loc359)
      } loc(#loc359)
      cir.scope {
        %15 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc237)
        %16 = cir.const #cir.int<0> : !s32i loc(#loc238)
        %17 = cir.cmp(ge, %15, %16) : !s32i, !cir.bool loc(#loc366)
        %18 = cir.ternary(%17, true {
          %19 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc240)
          %20 = cir.const #cir.int<10> : !s32i loc(#loc241)
          %21 = cir.cmp(lt, %19, %20) : !s32i, !cir.bool loc(#loc367)
          %22 = cir.ternary(%21, true {
            %23 = cir.const #true loc(#loc239)
            cir.yield %23 : !cir.bool loc(#loc239)
          }, false {
            %23 = cir.const #false loc(#loc239)
            cir.yield %23 : !cir.bool loc(#loc239)
          }) : (!cir.bool) -> !cir.bool loc(#loc239)
          cir.yield %22 : !cir.bool loc(#loc239)
        }, false {
          %19 = cir.const #false loc(#loc239)
          cir.yield %19 : !cir.bool loc(#loc239)
        }) : (!cir.bool) -> !cir.bool loc(#loc239)
        cir.if %18 {
          %19 = cir.const #cir.int<1> : !s32i loc(#loc246)
          %20 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc247)
          %21 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc248)
          %22 = cir.ptr_stride(%20 : !cir.ptr<!s32i>, %21 : !s32i), !cir.ptr<!s32i> loc(#loc249)
          cir.store %19, %22 : !s32i, !cir.ptr<!s32i> loc(#loc369)
          cir.scope {
            %23 = cir.const #cir.int<0> : !s32i loc(#loc252)
            cir.store %23, %3 : !s32i, !cir.ptr<!s32i> loc(#loc371)
            cir.for : cond {
              %24 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc254)
              %25 = cir.const #cir.int<10> : !s32i loc(#loc255)
              %26 = cir.cmp(lt, %24, %25) : !s32i, !cir.bool loc(#loc372)
              cir.condition(%26) loc(#loc256)
            } body {
              cir.scope {
                %24 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc258)
                %25 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc259)
                %26 = cir.ptr_stride(%24 : !cir.ptr<!s32i>, %25 : !s32i), !cir.ptr<!s32i> loc(#loc260)
                %27 = cir.load %26 : !cir.ptr<!s32i>, !s32i loc(#loc258)
                cir.call @printIntLine(%27) : (!s32i) -> () loc(#loc261)
              } loc(#loc373)
              cir.yield loc(#loc251)
            } step {
              %24 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc262)
              %25 = cir.unary(inc, %24) nsw : !s32i, !s32i loc(#loc263)
              cir.store %25, %3 : !s32i, !cir.ptr<!s32i> loc(#loc374)
              cir.yield loc(#loc370)
            } loc(#loc370)
          } loc(#loc370)
        } else {
          %19 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc198)
          %20 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc198)
          cir.call @printLine(%20) : (!cir.ptr<!s8i>) -> () loc(#loc264)
        } loc(#loc368)
      } loc(#loc365)
      %12 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc265)
      %13 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc266)
      %14 = cir.cast(bitcast, %13 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc266)
      cir.call @free(%14) : (!cir.ptr<!void>) -> () extra(#fn_attr1) loc(#loc265)
    } loc(#loc350)
    cir.return loc(#loc200)
  } loc(#loc348)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":0:0)
#loc1 = loc("/usr/include/stdio.h":463:1)
#loc2 = loc("/usr/include/stdio.h":465:33)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":63:19)
#loc6 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":20:1)
#loc7 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":20:12)
#loc8 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":57:1)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":66:1)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":59:5)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":59:9)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":61:13)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":61:12)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":61:5)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":63:5)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":63:12)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":64:69)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":64:5)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":65:5)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":65:13)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":158:1)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":162:1)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":160:5)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":160:13)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":161:5)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":161:13)
#loc27 = loc("/usr/include/stdlib.h":672:1)
#loc28 = loc("/usr/include/stdlib.h":672:45)
#loc29 = loc("/usr/include/stdlib.h":756:1)
#loc30 = loc("/usr/include/stdlib.h":756:70)
#loc31 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc32 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc33 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc34 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":51:23)
#loc36 = loc("/usr/include/stdlib.h":687:1)
#loc37 = loc("/usr/include/stdlib.h":687:32)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":26:1)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":55:1)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":28:5)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":28:16)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":29:5)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":54:5)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":30:9)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":30:13)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":31:9)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":31:54)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":31:31)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":31:38)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":31:43)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":31:53)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":32:9)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":32:39)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":32:13)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":32:23)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":32:29)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":32:30)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":32:36)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":32:35)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":34:9)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":37:9)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":34:18)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":34:14)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":34:21)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":34:25)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":34:23)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":35:9)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":36:25)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":36:13)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":36:20)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":36:21)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":34:30)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":34:29)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":40:9)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":52:9)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":40:13)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":40:21)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":41:9)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":48:9)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":50:9)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":42:28)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":42:13)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":42:20)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":42:24)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":44:13)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":47:13)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":44:21)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":44:17)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":44:24)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":44:28)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":44:26)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":45:13)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":46:30)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":46:37)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":46:38)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":46:17)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":44:33)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":44:32)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":51:13)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":53:9)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":53:14)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":21:1)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":21:12)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":104:1)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":114:1)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":106:5)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":106:9)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":108:13)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":108:12)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":108:5)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":111:12)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":111:5)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":112:73)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":112:5)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":113:5)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":113:17)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":73:1)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":102:1)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":75:5)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":75:16)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":76:5)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":101:5)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":77:9)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":77:13)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":78:9)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":78:54)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":78:31)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":78:38)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":78:43)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":78:53)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":79:9)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":79:39)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":79:13)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":79:23)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":79:29)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":79:30)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":79:36)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":79:35)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":81:9)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":84:9)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":81:18)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":81:14)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":81:21)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":81:25)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":81:23)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":82:9)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":83:25)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":83:13)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":83:20)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":83:21)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":81:30)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":81:29)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":87:9)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":99:9)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":87:13)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":87:21)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":88:9)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":95:9)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":97:9)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":89:28)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":89:13)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":89:20)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":89:24)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":91:13)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":94:13)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":91:21)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":91:17)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":91:24)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":91:28)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":91:26)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":92:13)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":93:30)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":93:37)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":93:38)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":93:17)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":91:33)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":91:32)
#loc178 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":98:23)
#loc179 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":98:13)
#loc180 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":100:9)
#loc181 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":100:14)
#loc182 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":22:1)
#loc183 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":22:12)
#loc184 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":147:1)
#loc185 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":156:1)
#loc186 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":149:5)
#loc187 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":149:9)
#loc188 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":151:13)
#loc189 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":151:12)
#loc190 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":151:5)
#loc191 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":153:5)
#loc192 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":153:12)
#loc193 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":153:19)
#loc194 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":154:73)
#loc195 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":154:5)
#loc196 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":155:5)
#loc197 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":155:17)
#loc198 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":141:23)
#loc199 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":117:1)
#loc200 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":145:1)
#loc201 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":119:5)
#loc202 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":119:16)
#loc203 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":120:5)
#loc204 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":144:5)
#loc205 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":121:9)
#loc206 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":121:13)
#loc207 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":122:9)
#loc208 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":122:54)
#loc209 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":122:31)
#loc210 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":122:38)
#loc211 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":122:43)
#loc212 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":122:53)
#loc213 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":123:9)
#loc214 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":123:39)
#loc215 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":123:13)
#loc216 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":123:23)
#loc217 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":123:29)
#loc218 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":123:30)
#loc219 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":123:36)
#loc220 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":123:35)
#loc221 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":125:9)
#loc222 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":128:9)
#loc223 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":125:18)
#loc224 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":125:14)
#loc225 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":125:21)
#loc226 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":125:25)
#loc227 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":125:23)
#loc228 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":126:9)
#loc229 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":127:25)
#loc230 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":127:13)
#loc231 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":127:20)
#loc232 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":127:21)
#loc233 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":125:30)
#loc234 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":125:29)
#loc235 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":130:9)
#loc236 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":142:9)
#loc237 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":130:13)
#loc238 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":130:21)
#loc239 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":130:23)
#loc240 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":130:26)
#loc241 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":130:34)
#loc242 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":130:36)
#loc243 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":131:9)
#loc244 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":138:9)
#loc245 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":140:9)
#loc246 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":132:28)
#loc247 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":132:13)
#loc248 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":132:20)
#loc249 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":132:24)
#loc250 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":134:13)
#loc251 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":137:13)
#loc252 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":134:21)
#loc253 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":134:17)
#loc254 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":134:24)
#loc255 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":134:28)
#loc256 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":134:26)
#loc257 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":135:13)
#loc258 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":136:30)
#loc259 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":136:37)
#loc260 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":136:38)
#loc261 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":136:17)
#loc262 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":134:33)
#loc263 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":134:32)
#loc264 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":141:13)
#loc265 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":143:9)
#loc266 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c":143:14)
#loc267 = loc(fused[#loc1, #loc2])
#loc268 = loc(fused[#loc3, #loc4])
#loc269 = loc(fused[#loc6, #loc7])
#loc270 = loc(fused[#loc8, #loc9])
#loc271 = loc(fused[#loc10, #loc11])
#loc272 = loc(fused[#loc14, #loc12])
#loc273 = loc(fused[#loc18, #loc17])
#loc274 = loc(fused[#loc19, #loc20])
#loc275 = loc(fused[#loc21, #loc22])
#loc276 = loc(fused[#loc23, #loc24])
#loc277 = loc(fused[#loc25, #loc26])
#loc278 = loc(fused[#loc27, #loc28])
#loc279 = loc(fused[#loc29, #loc30])
#loc280 = loc(fused[#loc31, #loc32])
#loc281 = loc(fused[#loc33, #loc34])
#loc282 = loc(fused[#loc36, #loc37])
#loc283 = loc(fused[#loc38, #loc39])
#loc284 = loc(fused[#loc40, #loc41])
#loc285 = loc(fused[#loc42, #loc43])
#loc286 = loc(fused[#loc44, #loc45])
#loc287 = loc(fused[#loc46, #loc47])
#loc288 = loc(fused[#loc50, #loc51])
#loc289 = loc(fused[#loc49, #loc51])
#loc290 = loc(fused[#loc48, #loc47])
#loc291 = loc(fused[#loc52, #loc53])
#loc292 = loc(fused[#loc54, #loc55])
#loc293 = loc(fused[#loc56, #loc53])
#loc294 = loc(fused[#loc60, #loc61])
#loc295 = loc(fused[#loc63, #loc62])
#loc296 = loc(fused[#loc64, #loc65])
#loc297 = loc(fused[#loc67, #loc61])
#loc298 = loc(fused[#loc69, #loc68])
#loc299 = loc(fused[#loc73, #loc72])
#loc300 = loc(fused[#loc74, #loc75])
#loc301 = loc(fused[#loc76, #loc77])
#loc302 = loc(fused[#loc78, #loc79, #loc80, #loc75])
#loc303 = loc(fused[#loc82, #loc81])
#loc304 = loc(fused[#loc85, #loc86])
#loc305 = loc(fused[#loc88, #loc87])
#loc306 = loc(fused[#loc89, #loc90])
#loc307 = loc(fused[#loc92, #loc86])
#loc308 = loc(fused[#loc98, #loc97])
#loc309 = loc(fused[#loc102, #loc103])
#loc310 = loc(fused[#loc104, #loc105])
#loc311 = loc(fused[#loc106, #loc107])
#loc312 = loc(fused[#loc110, #loc108])
#loc313 = loc(fused[#loc112, #loc111])
#loc314 = loc(fused[#loc114, #loc113])
#loc315 = loc(fused[#loc115, #loc116])
#loc316 = loc(fused[#loc117, #loc118])
#loc317 = loc(fused[#loc119, #loc120])
#loc318 = loc(fused[#loc121, #loc122])
#loc319 = loc(fused[#loc123, #loc124])
#loc320 = loc(fused[#loc125, #loc126])
#loc321 = loc(fused[#loc129, #loc130])
#loc322 = loc(fused[#loc128, #loc130])
#loc323 = loc(fused[#loc127, #loc126])
#loc324 = loc(fused[#loc131, #loc132])
#loc325 = loc(fused[#loc133, #loc134])
#loc326 = loc(fused[#loc135, #loc132])
#loc327 = loc(fused[#loc139, #loc140])
#loc328 = loc(fused[#loc142, #loc141])
#loc329 = loc(fused[#loc143, #loc144])
#loc330 = loc(fused[#loc146, #loc140])
#loc331 = loc(fused[#loc148, #loc147])
#loc332 = loc(fused[#loc152, #loc151])
#loc333 = loc(fused[#loc153, #loc154])
#loc334 = loc(fused[#loc155, #loc156])
#loc335 = loc(fused[#loc157, #loc158, #loc159, #loc154])
#loc336 = loc(fused[#loc161, #loc160])
#loc337 = loc(fused[#loc164, #loc165])
#loc338 = loc(fused[#loc167, #loc166])
#loc339 = loc(fused[#loc168, #loc169])
#loc340 = loc(fused[#loc171, #loc165])
#loc341 = loc(fused[#loc177, #loc176])
#loc342 = loc(fused[#loc182, #loc183])
#loc343 = loc(fused[#loc184, #loc185])
#loc344 = loc(fused[#loc186, #loc187])
#loc345 = loc(fused[#loc190, #loc188])
#loc346 = loc(fused[#loc195, #loc194])
#loc347 = loc(fused[#loc196, #loc197])
#loc348 = loc(fused[#loc199, #loc200])
#loc349 = loc(fused[#loc201, #loc202])
#loc350 = loc(fused[#loc203, #loc204])
#loc351 = loc(fused[#loc205, #loc206])
#loc352 = loc(fused[#loc207, #loc208])
#loc353 = loc(fused[#loc211, #loc212])
#loc354 = loc(fused[#loc210, #loc212])
#loc355 = loc(fused[#loc209, #loc208])
#loc356 = loc(fused[#loc213, #loc214])
#loc357 = loc(fused[#loc215, #loc216])
#loc358 = loc(fused[#loc217, #loc214])
#loc359 = loc(fused[#loc221, #loc222])
#loc360 = loc(fused[#loc224, #loc223])
#loc361 = loc(fused[#loc225, #loc226])
#loc362 = loc(fused[#loc228, #loc222])
#loc363 = loc(fused[#loc230, #loc229])
#loc364 = loc(fused[#loc234, #loc233])
#loc365 = loc(fused[#loc235, #loc236])
#loc366 = loc(fused[#loc237, #loc238])
#loc367 = loc(fused[#loc240, #loc242])
#loc368 = loc(fused[#loc243, #loc244, #loc245, #loc236])
#loc369 = loc(fused[#loc247, #loc246])
#loc370 = loc(fused[#loc250, #loc251])
#loc371 = loc(fused[#loc253, #loc252])
#loc372 = loc(fused[#loc254, #loc255])
#loc373 = loc(fused[#loc257, #loc251])
#loc374 = loc(fused[#loc263, #loc262])
