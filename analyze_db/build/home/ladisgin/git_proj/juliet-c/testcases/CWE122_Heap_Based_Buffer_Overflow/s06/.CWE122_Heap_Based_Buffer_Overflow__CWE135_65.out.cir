!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65a.c":102:10)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65a.c":102:14)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65a.c":102:20)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65a.c":102:32)
#loc189 = loc(fused[#loc65, #loc66])
#loc190 = loc(fused[#loc67, #loc68])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE135_65a.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @CWE122_Heap_Based_Buffer_Overflow__CWE135_65b_badSink(!cir.ptr<!void>) loc(#loc164)
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc165)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc166)
  cir.func private @wmemset(!cir.ptr<!s32i>, !s32i, !u64i) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc167)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__CWE135_65_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc169)
    %1 = cir.alloca !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!cir.ptr<!void>)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc170)
    %2 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__CWE135_65b_badSink : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc14)
    cir.store %2, %1 : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!cir.ptr<!void>)>>> loc(#loc170)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc15)
    cir.store %3, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc171)
    cir.scope {
      %6 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc173)
      %7 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc21)
      %8 = cir.const #cir.int<50> : !s32i loc(#loc22)
      %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc22)
      %10 = cir.const #cir.int<4> : !u64i loc(#loc174)
      %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc175)
      %12 = cir.call @malloc(%11) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc21)
      %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc176)
      cir.store %13, %6 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc173)
      cir.scope {
        %29 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc27)
        %30 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc28)
        %31 = cir.cast(bitcast, %30 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc28)
        %32 = cir.cmp(eq, %29, %31) : !cir.ptr<!s32i>, !cir.bool loc(#loc178)
        cir.if %32 {
          %33 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc30)
          %34 = cir.const #cir.int<1> : !s32i loc(#loc31)
          %35 = cir.unary(minus, %34) : !s32i, !s32i loc(#loc32)
          cir.call @exit(%35) : (!s32i) -> () extra(#fn_attr) loc(#loc30)
        } loc(#loc179)
      } loc(#loc177)
      %14 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc33)
      %15 = cir.const #cir.int<65> : !s32i loc(#loc34)
      %16 = cir.const #cir.int<50> : !s32i loc(#loc35)
      %17 = cir.const #cir.int<1> : !s32i loc(#loc36)
      %18 = cir.binop(sub, %16, %17) nsw : !s32i loc(#loc35)
      %19 = cir.cast(integral, %18 : !s32i), !u64i loc(#loc35)
      %20 = cir.call @wmemset(%14, %15, %19) : (!cir.ptr<!s32i>, !s32i, !u64i) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc37)
      %21 = cir.const #cir.int<0> : !s32i loc(#loc38)
      %22 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc39)
      %23 = cir.const #cir.int<50> : !s32i loc(#loc40)
      %24 = cir.const #cir.int<1> : !s32i loc(#loc41)
      %25 = cir.binop(sub, %23, %24) nsw : !s32i loc(#loc40)
      %26 = cir.ptr_stride(%22 : !cir.ptr<!s32i>, %25 : !s32i), !cir.ptr<!s32i> loc(#loc42)
      cir.store %21, %26 : !s32i, !cir.ptr<!s32i> loc(#loc180)
      %27 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc43)
      %28 = cir.cast(bitcast, %27 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc43)
      cir.store %28, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc181)
    } loc(#loc172)
    %4 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<!void (!cir.ptr<!void>)>>>, !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc45)
    %5 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc46)
    cir.call %4(%5) : (!cir.ptr<!cir.func<!void (!cir.ptr<!void>)>>, !cir.ptr<!void>) -> () loc(#loc45)
    cir.return loc(#loc10)
  } loc(#loc168)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__CWE135_65_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc183)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc49)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc184)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc51)
    cir.return loc(#loc48)
  } loc(#loc182)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc185)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc186)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc187)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc59)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc60)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc61)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc62)
  cir.func @main(%arg0: !s32i loc(fused[#loc65, #loc66]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc67, #loc68])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc189)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc190)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc64)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc69)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc69)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc70)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc71)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc71)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc72)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc59)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc59)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc73)
    %8 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__CWE135_65_good : !cir.ptr<!cir.func<!void ()>> loc(#loc191)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__CWE135_65_good() : () -> () loc(#loc74)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc60)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc60)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc76)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc61)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc61)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc77)
    %13 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__CWE135_65_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc192)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__CWE135_65_bad() : () -> () loc(#loc78)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc62)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc62)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc80)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc81)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc193)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc193)
    cir.return %17 : !s32i loc(#loc193)
  } loc(#loc188)
  cir.func private @CWE122_Heap_Based_Buffer_Overflow__CWE135_65b_goodG2BSink(!cir.ptr<!void>) loc(#loc194)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc196)
    %1 = cir.alloca !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!cir.ptr<!void>)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc197)
    %2 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__CWE135_65b_goodG2BSink : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc90)
    cir.store %2, %1 : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!cir.ptr<!void>)>>> loc(#loc197)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc91)
    cir.store %3, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc198)
    cir.scope {
      %6 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc200)
      %7 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc97)
      %8 = cir.const #cir.int<50> : !s32i loc(#loc98)
      %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc98)
      %10 = cir.const #cir.int<1> : !u64i loc(#loc201)
      %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc202)
      %12 = cir.call @malloc(%11) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc97)
      %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc203)
      cir.store %13, %6 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc200)
      cir.scope {
        %30 = cir.load %6 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc103)
        %31 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc104)
        %32 = cir.cast(bitcast, %31 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc104)
        %33 = cir.cmp(eq, %30, %32) : !cir.ptr<!s8i>, !cir.bool loc(#loc205)
        cir.if %33 {
          %34 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc106)
          %35 = cir.const #cir.int<1> : !s32i loc(#loc107)
          %36 = cir.unary(minus, %35) : !s32i, !s32i loc(#loc108)
          cir.call @exit(%36) : (!s32i) -> () extra(#fn_attr) loc(#loc106)
        } loc(#loc206)
      } loc(#loc204)
      %14 = cir.load %6 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc109)
      %15 = cir.cast(bitcast, %14 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc109)
      %16 = cir.const #cir.int<65> : !s32i loc(#loc110)
      %17 = cir.const #cir.int<50> : !s32i loc(#loc111)
      %18 = cir.const #cir.int<1> : !s32i loc(#loc112)
      %19 = cir.binop(sub, %17, %18) nsw : !s32i loc(#loc111)
      %20 = cir.cast(integral, %19 : !s32i), !u64i loc(#loc111)
      cir.libc.memset %20 bytes from %15 set to %16 : !cir.ptr<!void>, !s32i, !u64i loc(#loc207)
      %21 = cir.const #cir.int<0> : !s32i loc(#loc115)
      %22 = cir.cast(integral, %21 : !s32i), !s8i loc(#loc115)
      %23 = cir.load %6 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc116)
      %24 = cir.const #cir.int<50> : !s32i loc(#loc117)
      %25 = cir.const #cir.int<1> : !s32i loc(#loc118)
      %26 = cir.binop(sub, %24, %25) nsw : !s32i loc(#loc117)
      %27 = cir.ptr_stride(%23 : !cir.ptr<!s8i>, %26 : !s32i), !cir.ptr<!s8i> loc(#loc119)
      cir.store %22, %27 : !s8i, !cir.ptr<!s8i> loc(#loc208)
      %28 = cir.load %6 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc120)
      %29 = cir.cast(bitcast, %28 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc120)
      cir.store %29, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc209)
    } loc(#loc199)
    %4 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<!void (!cir.ptr<!void>)>>>, !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc122)
    %5 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc123)
    cir.call %4(%5) : (!cir.ptr<!cir.func<!void (!cir.ptr<!void>)>>, !cir.ptr<!void>) -> () loc(#loc122)
    cir.return loc(#loc86)
  } loc(#loc195)
  cir.func private @CWE122_Heap_Based_Buffer_Overflow__CWE135_65b_goodB2GSink(!cir.ptr<!void>) loc(#loc210)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc212)
    %1 = cir.alloca !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!cir.ptr<!void>)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc213)
    %2 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__CWE135_65b_goodB2GSink : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc131)
    cir.store %2, %1 : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!cir.ptr<!void>)>>> loc(#loc213)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc132)
    cir.store %3, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc214)
    cir.scope {
      %6 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc216)
      %7 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc138)
      %8 = cir.const #cir.int<50> : !s32i loc(#loc139)
      %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc139)
      %10 = cir.const #cir.int<4> : !u64i loc(#loc217)
      %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc218)
      %12 = cir.call @malloc(%11) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc138)
      %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc219)
      cir.store %13, %6 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc216)
      cir.scope {
        %29 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc144)
        %30 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc145)
        %31 = cir.cast(bitcast, %30 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc145)
        %32 = cir.cmp(eq, %29, %31) : !cir.ptr<!s32i>, !cir.bool loc(#loc221)
        cir.if %32 {
          %33 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc147)
          %34 = cir.const #cir.int<1> : !s32i loc(#loc148)
          %35 = cir.unary(minus, %34) : !s32i, !s32i loc(#loc149)
          cir.call @exit(%35) : (!s32i) -> () extra(#fn_attr) loc(#loc147)
        } loc(#loc222)
      } loc(#loc220)
      %14 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc150)
      %15 = cir.const #cir.int<65> : !s32i loc(#loc151)
      %16 = cir.const #cir.int<50> : !s32i loc(#loc152)
      %17 = cir.const #cir.int<1> : !s32i loc(#loc153)
      %18 = cir.binop(sub, %16, %17) nsw : !s32i loc(#loc152)
      %19 = cir.cast(integral, %18 : !s32i), !u64i loc(#loc152)
      %20 = cir.call @wmemset(%14, %15, %19) : (!cir.ptr<!s32i>, !s32i, !u64i) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc154)
      %21 = cir.const #cir.int<0> : !s32i loc(#loc155)
      %22 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc156)
      %23 = cir.const #cir.int<50> : !s32i loc(#loc157)
      %24 = cir.const #cir.int<1> : !s32i loc(#loc158)
      %25 = cir.binop(sub, %23, %24) nsw : !s32i loc(#loc157)
      %26 = cir.ptr_stride(%22 : !cir.ptr<!s32i>, %25 : !s32i), !cir.ptr<!s32i> loc(#loc159)
      cir.store %21, %26 : !s32i, !cir.ptr<!s32i> loc(#loc223)
      %27 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc160)
      %28 = cir.cast(bitcast, %27 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc160)
      cir.store %28, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc224)
    } loc(#loc215)
    %4 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<!void (!cir.ptr<!void>)>>>, !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc162)
    %5 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc163)
    cir.call %4(%5) : (!cir.ptr<!cir.func<!void (!cir.ptr<!void>)>>, !cir.ptr<!void>) -> () loc(#loc162)
    cir.return loc(#loc127)
  } loc(#loc211)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE135_65a.c":0:0)
#loc1 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65a.c":25:1)
#loc2 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65a.c":25:71)
#loc3 = loc("/usr/include/stdlib.h":672:1)
#loc4 = loc("/usr/include/stdlib.h":672:45)
#loc5 = loc("/usr/include/stdlib.h":756:1)
#loc6 = loc("/usr/include/stdlib.h":756:70)
#loc7 = loc("/usr/include/wchar.h":296:1)
#loc8 = loc("/usr/include/wchar.h":296:65)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65a.c":27:1)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65a.c":43:1)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65a.c":29:5)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65a.c":29:12)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65a.c":31:5)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65a.c":31:32)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65a.c":32:12)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65a.c":32:5)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65a.c":33:5)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65a.c":40:5)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65a.c":34:9)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65a.c":34:71)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65a.c":34:46)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65a.c":34:53)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65a.c":34:56)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65a.c":34:70)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65a.c":35:9)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65a.c":35:46)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65a.c":35:13)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65a.c":35:30)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65a.c":35:36)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65a.c":35:37)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65a.c":35:43)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65a.c":35:42)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65a.c":36:17)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65a.c":36:32)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65a.c":36:38)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65a.c":36:41)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65a.c":36:9)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65a.c":37:31)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65a.c":37:9)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65a.c":37:23)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65a.c":37:26)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65a.c":37:27)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65a.c":39:24)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65a.c":39:9)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65a.c":42:5)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65a.c":42:13)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65a.c":87:1)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65a.c":91:1)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65a.c":89:5)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65a.c":89:13)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65a.c":90:5)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65a.c":90:13)
#loc53 = loc("/usr/include/stdlib.h":575:1)
#loc54 = loc("/usr/include/stdlib.h":575:41)
#loc55 = loc("/usr/include/time.h":76:1)
#loc56 = loc("/usr/include/time.h":76:38)
#loc57 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc58 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65a.c":107:15)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65a.c":109:15)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65a.c":112:15)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65a.c":114:15)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65a.c":102:1)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65a.c":117:1)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65a.c":103:1)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65a.c":105:27)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65a.c":105:22)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65a.c":105:5)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65a.c":107:5)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65a.c":108:5)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65a.c":108:55)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65a.c":109:5)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65a.c":112:5)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65a.c":113:5)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65a.c":113:54)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65a.c":114:5)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65a.c":116:12)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65a.c":116:5)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65a.c":50:1)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65a.c":50:75)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65a.c":52:1)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65a.c":66:1)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65a.c":54:5)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65a.c":54:12)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65a.c":55:5)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65a.c":55:32)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65a.c":56:12)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65a.c":56:5)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65a.c":57:5)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65a.c":64:5)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65a.c":58:9)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65a.c":58:63)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65a.c":58:41)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65a.c":58:48)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65a.c":58:51)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65a.c":58:62)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65a.c":59:9)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65a.c":59:47)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65a.c":59:13)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65a.c":59:31)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65a.c":59:37)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65a.c":59:38)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65a.c":59:44)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65a.c":59:43)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65a.c":60:16)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65a.c":60:32)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65a.c":60:37)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65a.c":60:40)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65a.c":60:9)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65a.c":60:41)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65a.c":61:32)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65a.c":61:9)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65a.c":61:24)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65a.c":61:27)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65a.c":61:28)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65a.c":63:24)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65a.c":63:9)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65a.c":65:5)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65a.c":65:13)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65a.c":69:1)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65a.c":69:75)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65a.c":71:1)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65a.c":85:1)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65a.c":73:5)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65a.c":73:12)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65a.c":74:5)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65a.c":74:32)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65a.c":75:12)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65a.c":75:5)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65a.c":76:5)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65a.c":83:5)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65a.c":77:9)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65a.c":77:71)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65a.c":77:46)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65a.c":77:53)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65a.c":77:56)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65a.c":77:70)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65a.c":78:9)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65a.c":78:46)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65a.c":78:13)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65a.c":78:30)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65a.c":78:36)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65a.c":78:37)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65a.c":78:43)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65a.c":78:42)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65a.c":79:17)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65a.c":79:32)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65a.c":79:38)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65a.c":79:41)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65a.c":79:9)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65a.c":80:31)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65a.c":80:9)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65a.c":80:23)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65a.c":80:26)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65a.c":80:27)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65a.c":82:24)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65a.c":82:9)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65a.c":84:5)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65a.c":84:13)
#loc164 = loc(fused[#loc1, #loc2])
#loc165 = loc(fused[#loc3, #loc4])
#loc166 = loc(fused[#loc5, #loc6])
#loc167 = loc(fused[#loc7, #loc8])
#loc168 = loc(fused[#loc9, #loc10])
#loc169 = loc(fused[#loc11, #loc12])
#loc170 = loc(fused[#loc13, #loc14])
#loc171 = loc(fused[#loc16, #loc15])
#loc172 = loc(fused[#loc17, #loc18])
#loc173 = loc(fused[#loc19, #loc20])
#loc174 = loc(fused[#loc23, #loc24])
#loc175 = loc(fused[#loc22, #loc24])
#loc176 = loc(fused[#loc21, #loc20])
#loc177 = loc(fused[#loc25, #loc26])
#loc178 = loc(fused[#loc27, #loc28])
#loc179 = loc(fused[#loc29, #loc26])
#loc180 = loc(fused[#loc39, #loc38])
#loc181 = loc(fused[#loc44, #loc43])
#loc182 = loc(fused[#loc47, #loc48])
#loc183 = loc(fused[#loc49, #loc50])
#loc184 = loc(fused[#loc51, #loc52])
#loc185 = loc(fused[#loc53, #loc54])
#loc186 = loc(fused[#loc55, #loc56])
#loc187 = loc(fused[#loc57, #loc58])
#loc188 = loc(fused[#loc63, #loc64])
#loc191 = loc(fused[#loc74, #loc75])
#loc192 = loc(fused[#loc78, #loc79])
#loc193 = loc(fused[#loc82, #loc81])
#loc194 = loc(fused[#loc83, #loc84])
#loc195 = loc(fused[#loc85, #loc86])
#loc196 = loc(fused[#loc87, #loc88])
#loc197 = loc(fused[#loc89, #loc90])
#loc198 = loc(fused[#loc92, #loc91])
#loc199 = loc(fused[#loc93, #loc94])
#loc200 = loc(fused[#loc95, #loc96])
#loc201 = loc(fused[#loc99, #loc100])
#loc202 = loc(fused[#loc98, #loc100])
#loc203 = loc(fused[#loc97, #loc96])
#loc204 = loc(fused[#loc101, #loc102])
#loc205 = loc(fused[#loc103, #loc104])
#loc206 = loc(fused[#loc105, #loc102])
#loc207 = loc(fused[#loc113, #loc114])
#loc208 = loc(fused[#loc116, #loc115])
#loc209 = loc(fused[#loc121, #loc120])
#loc210 = loc(fused[#loc124, #loc125])
#loc211 = loc(fused[#loc126, #loc127])
#loc212 = loc(fused[#loc128, #loc129])
#loc213 = loc(fused[#loc130, #loc131])
#loc214 = loc(fused[#loc133, #loc132])
#loc215 = loc(fused[#loc134, #loc135])
#loc216 = loc(fused[#loc136, #loc137])
#loc217 = loc(fused[#loc140, #loc141])
#loc218 = loc(fused[#loc139, #loc141])
#loc219 = loc(fused[#loc138, #loc137])
#loc220 = loc(fused[#loc142, #loc143])
#loc221 = loc(fused[#loc144, #loc145])
#loc222 = loc(fused[#loc146, #loc143])
#loc223 = loc(fused[#loc156, #loc155])
#loc224 = loc(fused[#loc161, #loc160])
