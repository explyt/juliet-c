!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.struct<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.struct<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.struct<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc73 = loc("CWE190_Integer_Overflow__int_fscanf_add_12.c":161:10)
#loc74 = loc("CWE190_Integer_Overflow__int_fscanf_add_12.c":161:14)
#loc75 = loc("CWE190_Integer_Overflow__int_fscanf_add_12.c":161:20)
#loc76 = loc("CWE190_Integer_Overflow__int_fscanf_add_12.c":161:32)
#loc210 = loc(fused[#loc73, #loc74])
#loc211 = loc(fused[#loc75, #loc76])
!ty__IO_FILE = !cir.struct<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!cir.struct<struct "_IO_FILE">>>, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_fscanf_add_12.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func no_proto private @globalReturnsTrueOrFalse(...) -> !s32i loc(#loc183)
  cir.func private @__isoc99_fscanf(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i loc(#loc184)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc185)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"%d\00" : !cir.array<!s8i x 3>> : !cir.array<!s8i x 3> {alignment = 1 : i64} loc(#loc7)
  cir.func private @printIntLine(!s32i) loc(#loc186)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc187)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc12)
  cir.func no_proto @CWE190_Integer_Overflow__int_fscanf_add_12_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc189)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc190)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc191)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc21)
    cir.store %3, %2 : !s32i, !cir.ptr<!s32i> loc(#loc192)
    cir.br ^bb1 loc(#loc193)
  ^bb1:  // pred: ^bb0
    %4 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc194)
    %5 = cir.cast(bitcast, %4 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc194)
    %6 = cir.call %5() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc25)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc25)
    cir.brcond %7 ^bb2, ^bb3 loc(#loc195)
  ^bb2:  // pred: ^bb1
    %8 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc30)
    %9 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc185)
    %10 = cir.load %9 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc31)
    %11 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc7)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc7)
    %13 = cir.call @__isoc99_fscanf(%10, %12, %2) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s32i>) -> !s32i loc(#loc30)
    cir.br ^bb4 loc(#loc28)
  ^bb3:  // pred: ^bb1
    %14 = cir.const #cir.int<2> : !s32i loc(#loc32)
    cir.store %14, %2 : !s32i, !cir.ptr<!s32i> loc(#loc196)
    cir.br ^bb4 loc(#loc24)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc24)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc197)
  ^bb6:  // pred: ^bb5
    %15 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc198)
    %16 = cir.cast(bitcast, %15 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc198)
    %17 = cir.call %16() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc36)
    %18 = cir.cast(int_to_bool, %17 : !s32i), !cir.bool loc(#loc36)
    cir.brcond %18 ^bb7, ^bb10 loc(#loc199)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc200)
  ^bb8:  // pred: ^bb7
    %19 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc43)
    %20 = cir.const #cir.int<1> : !s32i loc(#loc16)
    %21 = cir.binop(add, %19, %20) nsw : !s32i loc(#loc43)
    cir.store %21, %0 : !s32i, !cir.ptr<!s32i> loc(#loc189)
    %22 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc44)
    cir.call @printIntLine(%22) : (!s32i) -> () loc(#loc45)
    cir.br ^bb9 loc(#loc42)
  ^bb9:  // pred: ^bb8
    cir.br ^bb16 loc(#loc39)
  ^bb10:  // pred: ^bb6
    cir.br ^bb11 loc(#loc201)
  ^bb11:  // pred: ^bb10
    %23 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc48)
    %24 = cir.const #cir.int<2147483647> : !s32i loc(#loc49)
    %25 = cir.cmp(lt, %23, %24) : !s32i, !cir.bool loc(#loc202)
    cir.brcond %25 ^bb12, ^bb13 loc(#loc203)
  ^bb12:  // pred: ^bb11
    %26 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc53)
    %27 = cir.const #cir.int<1> : !s32i loc(#loc18)
    %28 = cir.binop(add, %26, %27) nsw : !s32i loc(#loc53)
    cir.store %28, %1 : !s32i, !cir.ptr<!s32i> loc(#loc190)
    %29 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc54)
    cir.call @printIntLine(%29) : (!s32i) -> () loc(#loc55)
    cir.br ^bb14 loc(#loc51)
  ^bb13:  // pred: ^bb11
    %30 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc12)
    %31 = cir.cast(array_to_ptrdecay, %30 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc12)
    cir.call @printLine(%31) : (!cir.ptr<!s8i>) -> () loc(#loc56)
    cir.br ^bb14 loc(#loc47)
  ^bb14:  // 2 preds: ^bb12, ^bb13
    cir.br ^bb15 loc(#loc47)
  ^bb15:  // pred: ^bb14
    cir.br ^bb16 loc(#loc35)
  ^bb16:  // 2 preds: ^bb9, ^bb15
    cir.br ^bb17 loc(#loc35)
  ^bb17:  // pred: ^bb16
    cir.return loc(#loc14)
  } loc(#loc188)
  cir.func no_proto @CWE190_Integer_Overflow__int_fscanf_add_12_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc205)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc59)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc206)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc61)
    cir.return loc(#loc58)
  } loc(#loc204)
  cir.func private @srand(!u32i) extra(#fn_attr1) loc(#loc207)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc208)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc67)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc68)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc69)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc70)
  cir.func @main(%arg0: !s32i loc(fused[#loc73, #loc74]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc75, #loc76])) -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc210)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc211)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc72)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc77)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc77)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc78)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc79)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc79)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr1) loc(#loc80)
    %6 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc67)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc67)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc81)
    %8 = cir.get_global @CWE190_Integer_Overflow__int_fscanf_add_12_good : !cir.ptr<!cir.func<!void ()>> loc(#loc212)
    cir.call @CWE190_Integer_Overflow__int_fscanf_add_12_good() : () -> () loc(#loc82)
    %9 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc68)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc68)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc84)
    %11 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc69)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc69)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc85)
    %13 = cir.get_global @CWE190_Integer_Overflow__int_fscanf_add_12_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc213)
    cir.call @CWE190_Integer_Overflow__int_fscanf_add_12_bad() : () -> () loc(#loc86)
    %14 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc70)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc70)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc88)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc89)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc214)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc214)
    cir.return %17 : !s32i loc(#loc214)
  } loc(#loc209)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc216)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc217)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc218)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc99)
    cir.store %3, %2 : !s32i, !cir.ptr<!s32i> loc(#loc219)
    cir.br ^bb1 loc(#loc220)
  ^bb1:  // pred: ^bb0
    %4 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc221)
    %5 = cir.cast(bitcast, %4 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc221)
    %6 = cir.call %5() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc103)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc103)
    cir.brcond %7 ^bb2, ^bb3 loc(#loc222)
  ^bb2:  // pred: ^bb1
    %8 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc108)
    %9 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc185)
    %10 = cir.load %9 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc109)
    %11 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc110)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc110)
    %13 = cir.call @__isoc99_fscanf(%10, %12, %2) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s32i>) -> !s32i loc(#loc108)
    cir.br ^bb4 loc(#loc106)
  ^bb3:  // pred: ^bb1
    %14 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc111)
    %15 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc185)
    %16 = cir.load %15 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc112)
    %17 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc113)
    %18 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc113)
    %19 = cir.call @__isoc99_fscanf(%16, %18, %2) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s32i>) -> !s32i loc(#loc111)
    cir.br ^bb4 loc(#loc102)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc102)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc223)
  ^bb6:  // pred: ^bb5
    %20 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc224)
    %21 = cir.cast(bitcast, %20 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc224)
    %22 = cir.call %21() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc116)
    %23 = cir.cast(int_to_bool, %22 : !s32i), !cir.bool loc(#loc116)
    cir.brcond %23 ^bb7, ^bb13 loc(#loc225)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc226)
  ^bb8:  // pred: ^bb7
    %24 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc123)
    %25 = cir.const #cir.int<2147483647> : !s32i loc(#loc124)
    %26 = cir.cmp(lt, %24, %25) : !s32i, !cir.bool loc(#loc227)
    cir.brcond %26 ^bb9, ^bb10 loc(#loc228)
  ^bb9:  // pred: ^bb8
    %27 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc128)
    %28 = cir.const #cir.int<1> : !s32i loc(#loc94)
    %29 = cir.binop(add, %27, %28) nsw : !s32i loc(#loc128)
    cir.store %29, %0 : !s32i, !cir.ptr<!s32i> loc(#loc216)
    %30 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc129)
    cir.call @printIntLine(%30) : (!s32i) -> () loc(#loc130)
    cir.br ^bb11 loc(#loc126)
  ^bb10:  // pred: ^bb8
    %31 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc131)
    %32 = cir.cast(array_to_ptrdecay, %31 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc131)
    cir.call @printLine(%32) : (!cir.ptr<!s8i>) -> () loc(#loc132)
    cir.br ^bb11 loc(#loc122)
  ^bb11:  // 2 preds: ^bb9, ^bb10
    cir.br ^bb12 loc(#loc122)
  ^bb12:  // pred: ^bb11
    cir.br ^bb19 loc(#loc119)
  ^bb13:  // pred: ^bb6
    cir.br ^bb14 loc(#loc229)
  ^bb14:  // pred: ^bb13
    %33 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc135)
    %34 = cir.const #cir.int<2147483647> : !s32i loc(#loc136)
    %35 = cir.cmp(lt, %33, %34) : !s32i, !cir.bool loc(#loc230)
    cir.brcond %35 ^bb15, ^bb16 loc(#loc231)
  ^bb15:  // pred: ^bb14
    %36 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc140)
    %37 = cir.const #cir.int<1> : !s32i loc(#loc96)
    %38 = cir.binop(add, %36, %37) nsw : !s32i loc(#loc140)
    cir.store %38, %1 : !s32i, !cir.ptr<!s32i> loc(#loc217)
    %39 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc141)
    cir.call @printIntLine(%39) : (!s32i) -> () loc(#loc142)
    cir.br ^bb17 loc(#loc138)
  ^bb16:  // pred: ^bb14
    %40 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc143)
    %41 = cir.cast(array_to_ptrdecay, %40 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc143)
    cir.call @printLine(%41) : (!cir.ptr<!s8i>) -> () loc(#loc144)
    cir.br ^bb17 loc(#loc134)
  ^bb17:  // 2 preds: ^bb15, ^bb16
    cir.br ^bb18 loc(#loc134)
  ^bb18:  // pred: ^bb17
    cir.br ^bb19 loc(#loc115)
  ^bb19:  // 2 preds: ^bb12, ^bb18
    cir.br ^bb20 loc(#loc115)
  ^bb20:  // pred: ^bb19
    cir.return loc(#loc92)
  } loc(#loc215)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc233)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc234)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc235)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc153)
    cir.store %3, %2 : !s32i, !cir.ptr<!s32i> loc(#loc236)
    cir.br ^bb1 loc(#loc237)
  ^bb1:  // pred: ^bb0
    %4 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc238)
    %5 = cir.cast(bitcast, %4 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc238)
    %6 = cir.call %5() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc157)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc157)
    cir.brcond %7 ^bb2, ^bb3 loc(#loc239)
  ^bb2:  // pred: ^bb1
    %8 = cir.const #cir.int<2> : !s32i loc(#loc162)
    cir.store %8, %2 : !s32i, !cir.ptr<!s32i> loc(#loc240)
    cir.br ^bb4 loc(#loc160)
  ^bb3:  // pred: ^bb1
    %9 = cir.const #cir.int<2> : !s32i loc(#loc164)
    cir.store %9, %2 : !s32i, !cir.ptr<!s32i> loc(#loc241)
    cir.br ^bb4 loc(#loc156)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc156)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc242)
  ^bb6:  // pred: ^bb5
    %10 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc243)
    %11 = cir.cast(bitcast, %10 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc243)
    %12 = cir.call %11() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc168)
    %13 = cir.cast(int_to_bool, %12 : !s32i), !cir.bool loc(#loc168)
    cir.brcond %13 ^bb7, ^bb10 loc(#loc244)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc245)
  ^bb8:  // pred: ^bb7
    %14 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc175)
    %15 = cir.const #cir.int<1> : !s32i loc(#loc148)
    %16 = cir.binop(add, %14, %15) nsw : !s32i loc(#loc175)
    cir.store %16, %0 : !s32i, !cir.ptr<!s32i> loc(#loc233)
    %17 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc176)
    cir.call @printIntLine(%17) : (!s32i) -> () loc(#loc177)
    cir.br ^bb9 loc(#loc174)
  ^bb9:  // pred: ^bb8
    cir.br ^bb13 loc(#loc171)
  ^bb10:  // pred: ^bb6
    cir.br ^bb11 loc(#loc246)
  ^bb11:  // pred: ^bb10
    %18 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc180)
    %19 = cir.const #cir.int<1> : !s32i loc(#loc150)
    %20 = cir.binop(add, %18, %19) nsw : !s32i loc(#loc180)
    cir.store %20, %1 : !s32i, !cir.ptr<!s32i> loc(#loc234)
    %21 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc181)
    cir.call @printIntLine(%21) : (!s32i) -> () loc(#loc182)
    cir.br ^bb12 loc(#loc179)
  ^bb12:  // pred: ^bb11
    cir.br ^bb13 loc(#loc167)
  ^bb13:  // 2 preds: ^bb9, ^bb12
    cir.br ^bb14 loc(#loc167)
  ^bb14:  // pred: ^bb13
    cir.return loc(#loc146)
  } loc(#loc232)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_fscanf_add_12.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":52:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":52:30)
#loc3 = loc("/usr/include/stdio.h":463:1)
#loc4 = loc("/usr/include/stdio.h":465:33)
#loc5 = loc("/usr/include/stdio.h":149:1)
#loc6 = loc("/usr/include/stdio.h":149:14)
#loc7 = loc("CWE190_Integer_Overflow__int_fscanf_add_12.c":30:23)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc9 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc10 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc11 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc12 = loc("CWE190_Integer_Overflow__int_fscanf_add_12.c":55:23)
#loc13 = loc("CWE190_Integer_Overflow__int_fscanf_add_12.c":22:1)
#loc14 = loc("CWE190_Integer_Overflow__int_fscanf_add_12.c":58:1)
#loc15 = loc("CWE190_Integer_Overflow__int_fscanf_add_12.c":41:13)
#loc16 = loc("CWE190_Integer_Overflow__int_fscanf_add_12.c":41:33)
#loc17 = loc("CWE190_Integer_Overflow__int_fscanf_add_12.c":50:13)
#loc18 = loc("CWE190_Integer_Overflow__int_fscanf_add_12.c":50:33)
#loc19 = loc("CWE190_Integer_Overflow__int_fscanf_add_12.c":24:5)
#loc20 = loc("CWE190_Integer_Overflow__int_fscanf_add_12.c":24:9)
#loc21 = loc("CWE190_Integer_Overflow__int_fscanf_add_12.c":26:12)
#loc22 = loc("CWE190_Integer_Overflow__int_fscanf_add_12.c":26:5)
#loc23 = loc("CWE190_Integer_Overflow__int_fscanf_add_12.c":27:5)
#loc24 = loc("CWE190_Integer_Overflow__int_fscanf_add_12.c":36:5)
#loc25 = loc("CWE190_Integer_Overflow__int_fscanf_add_12.c":27:8)
#loc26 = loc("CWE190_Integer_Overflow__int_fscanf_add_12.c":27:33)
#loc27 = loc("CWE190_Integer_Overflow__int_fscanf_add_12.c":28:5)
#loc28 = loc("CWE190_Integer_Overflow__int_fscanf_add_12.c":31:5)
#loc29 = loc("CWE190_Integer_Overflow__int_fscanf_add_12.c":33:5)
#loc30 = loc("CWE190_Integer_Overflow__int_fscanf_add_12.c":30:9)
#loc31 = loc("CWE190_Integer_Overflow__int_fscanf_add_12.c":30:16)
#loc32 = loc("CWE190_Integer_Overflow__int_fscanf_add_12.c":35:16)
#loc33 = loc("CWE190_Integer_Overflow__int_fscanf_add_12.c":35:9)
#loc34 = loc("CWE190_Integer_Overflow__int_fscanf_add_12.c":37:5)
#loc35 = loc("CWE190_Integer_Overflow__int_fscanf_add_12.c":57:5)
#loc36 = loc("CWE190_Integer_Overflow__int_fscanf_add_12.c":37:8)
#loc37 = loc("CWE190_Integer_Overflow__int_fscanf_add_12.c":37:33)
#loc38 = loc("CWE190_Integer_Overflow__int_fscanf_add_12.c":38:5)
#loc39 = loc("CWE190_Integer_Overflow__int_fscanf_add_12.c":44:5)
#loc40 = loc("CWE190_Integer_Overflow__int_fscanf_add_12.c":46:5)
#loc41 = loc("CWE190_Integer_Overflow__int_fscanf_add_12.c":39:9)
#loc42 = loc("CWE190_Integer_Overflow__int_fscanf_add_12.c":43:9)
#loc43 = loc("CWE190_Integer_Overflow__int_fscanf_add_12.c":41:26)
#loc44 = loc("CWE190_Integer_Overflow__int_fscanf_add_12.c":42:26)
#loc45 = loc("CWE190_Integer_Overflow__int_fscanf_add_12.c":42:13)
#loc46 = loc("CWE190_Integer_Overflow__int_fscanf_add_12.c":48:9)
#loc47 = loc("CWE190_Integer_Overflow__int_fscanf_add_12.c":56:9)
#loc48 = loc("CWE190_Integer_Overflow__int_fscanf_add_12.c":48:13)
#loc49 = loc("CWE190_Integer_Overflow__int_fscanf_add_12.c":48:20)
#loc50 = loc("CWE190_Integer_Overflow__int_fscanf_add_12.c":49:9)
#loc51 = loc("CWE190_Integer_Overflow__int_fscanf_add_12.c":52:9)
#loc52 = loc("CWE190_Integer_Overflow__int_fscanf_add_12.c":54:9)
#loc53 = loc("CWE190_Integer_Overflow__int_fscanf_add_12.c":50:26)
#loc54 = loc("CWE190_Integer_Overflow__int_fscanf_add_12.c":51:26)
#loc55 = loc("CWE190_Integer_Overflow__int_fscanf_add_12.c":51:13)
#loc56 = loc("CWE190_Integer_Overflow__int_fscanf_add_12.c":55:13)
#loc57 = loc("CWE190_Integer_Overflow__int_fscanf_add_12.c":146:1)
#loc58 = loc("CWE190_Integer_Overflow__int_fscanf_add_12.c":150:1)
#loc59 = loc("CWE190_Integer_Overflow__int_fscanf_add_12.c":148:5)
#loc60 = loc("CWE190_Integer_Overflow__int_fscanf_add_12.c":148:13)
#loc61 = loc("CWE190_Integer_Overflow__int_fscanf_add_12.c":149:5)
#loc62 = loc("CWE190_Integer_Overflow__int_fscanf_add_12.c":149:13)
#loc63 = loc("/usr/include/stdlib.h":575:1)
#loc64 = loc("/usr/include/stdlib.h":575:41)
#loc65 = loc("/usr/include/time.h":76:1)
#loc66 = loc("/usr/include/time.h":76:38)
#loc67 = loc("CWE190_Integer_Overflow__int_fscanf_add_12.c":166:15)
#loc68 = loc("CWE190_Integer_Overflow__int_fscanf_add_12.c":168:15)
#loc69 = loc("CWE190_Integer_Overflow__int_fscanf_add_12.c":171:15)
#loc70 = loc("CWE190_Integer_Overflow__int_fscanf_add_12.c":173:15)
#loc71 = loc("CWE190_Integer_Overflow__int_fscanf_add_12.c":161:1)
#loc72 = loc("CWE190_Integer_Overflow__int_fscanf_add_12.c":176:1)
#loc77 = loc("CWE190_Integer_Overflow__int_fscanf_add_12.c":162:1)
#loc78 = loc("CWE190_Integer_Overflow__int_fscanf_add_12.c":164:27)
#loc79 = loc("CWE190_Integer_Overflow__int_fscanf_add_12.c":164:22)
#loc80 = loc("CWE190_Integer_Overflow__int_fscanf_add_12.c":164:5)
#loc81 = loc("CWE190_Integer_Overflow__int_fscanf_add_12.c":166:5)
#loc82 = loc("CWE190_Integer_Overflow__int_fscanf_add_12.c":167:5)
#loc83 = loc("CWE190_Integer_Overflow__int_fscanf_add_12.c":167:53)
#loc84 = loc("CWE190_Integer_Overflow__int_fscanf_add_12.c":168:5)
#loc85 = loc("CWE190_Integer_Overflow__int_fscanf_add_12.c":171:5)
#loc86 = loc("CWE190_Integer_Overflow__int_fscanf_add_12.c":172:5)
#loc87 = loc("CWE190_Integer_Overflow__int_fscanf_add_12.c":172:52)
#loc88 = loc("CWE190_Integer_Overflow__int_fscanf_add_12.c":173:5)
#loc89 = loc("CWE190_Integer_Overflow__int_fscanf_add_12.c":175:12)
#loc90 = loc("CWE190_Integer_Overflow__int_fscanf_add_12.c":175:5)
#loc91 = loc("CWE190_Integer_Overflow__int_fscanf_add_12.c":67:1)
#loc92 = loc("CWE190_Integer_Overflow__int_fscanf_add_12.c":108:1)
#loc93 = loc("CWE190_Integer_Overflow__int_fscanf_add_12.c":87:13)
#loc94 = loc("CWE190_Integer_Overflow__int_fscanf_add_12.c":87:33)
#loc95 = loc("CWE190_Integer_Overflow__int_fscanf_add_12.c":100:13)
#loc96 = loc("CWE190_Integer_Overflow__int_fscanf_add_12.c":100:33)
#loc97 = loc("CWE190_Integer_Overflow__int_fscanf_add_12.c":69:5)
#loc98 = loc("CWE190_Integer_Overflow__int_fscanf_add_12.c":69:9)
#loc99 = loc("CWE190_Integer_Overflow__int_fscanf_add_12.c":71:12)
#loc100 = loc("CWE190_Integer_Overflow__int_fscanf_add_12.c":71:5)
#loc101 = loc("CWE190_Integer_Overflow__int_fscanf_add_12.c":72:5)
#loc102 = loc("CWE190_Integer_Overflow__int_fscanf_add_12.c":81:5)
#loc103 = loc("CWE190_Integer_Overflow__int_fscanf_add_12.c":72:8)
#loc104 = loc("CWE190_Integer_Overflow__int_fscanf_add_12.c":72:33)
#loc105 = loc("CWE190_Integer_Overflow__int_fscanf_add_12.c":73:5)
#loc106 = loc("CWE190_Integer_Overflow__int_fscanf_add_12.c":76:5)
#loc107 = loc("CWE190_Integer_Overflow__int_fscanf_add_12.c":78:5)
#loc108 = loc("CWE190_Integer_Overflow__int_fscanf_add_12.c":75:9)
#loc109 = loc("CWE190_Integer_Overflow__int_fscanf_add_12.c":75:16)
#loc110 = loc("CWE190_Integer_Overflow__int_fscanf_add_12.c":75:23)
#loc111 = loc("CWE190_Integer_Overflow__int_fscanf_add_12.c":80:9)
#loc112 = loc("CWE190_Integer_Overflow__int_fscanf_add_12.c":80:16)
#loc113 = loc("CWE190_Integer_Overflow__int_fscanf_add_12.c":80:23)
#loc114 = loc("CWE190_Integer_Overflow__int_fscanf_add_12.c":82:5)
#loc115 = loc("CWE190_Integer_Overflow__int_fscanf_add_12.c":107:5)
#loc116 = loc("CWE190_Integer_Overflow__int_fscanf_add_12.c":82:8)
#loc117 = loc("CWE190_Integer_Overflow__int_fscanf_add_12.c":82:33)
#loc118 = loc("CWE190_Integer_Overflow__int_fscanf_add_12.c":83:5)
#loc119 = loc("CWE190_Integer_Overflow__int_fscanf_add_12.c":94:5)
#loc120 = loc("CWE190_Integer_Overflow__int_fscanf_add_12.c":96:5)
#loc121 = loc("CWE190_Integer_Overflow__int_fscanf_add_12.c":85:9)
#loc122 = loc("CWE190_Integer_Overflow__int_fscanf_add_12.c":93:9)
#loc123 = loc("CWE190_Integer_Overflow__int_fscanf_add_12.c":85:13)
#loc124 = loc("CWE190_Integer_Overflow__int_fscanf_add_12.c":85:20)
#loc125 = loc("CWE190_Integer_Overflow__int_fscanf_add_12.c":86:9)
#loc126 = loc("CWE190_Integer_Overflow__int_fscanf_add_12.c":89:9)
#loc127 = loc("CWE190_Integer_Overflow__int_fscanf_add_12.c":91:9)
#loc128 = loc("CWE190_Integer_Overflow__int_fscanf_add_12.c":87:26)
#loc129 = loc("CWE190_Integer_Overflow__int_fscanf_add_12.c":88:26)
#loc130 = loc("CWE190_Integer_Overflow__int_fscanf_add_12.c":88:13)
#loc131 = loc("CWE190_Integer_Overflow__int_fscanf_add_12.c":92:23)
#loc132 = loc("CWE190_Integer_Overflow__int_fscanf_add_12.c":92:13)
#loc133 = loc("CWE190_Integer_Overflow__int_fscanf_add_12.c":98:9)
#loc134 = loc("CWE190_Integer_Overflow__int_fscanf_add_12.c":106:9)
#loc135 = loc("CWE190_Integer_Overflow__int_fscanf_add_12.c":98:13)
#loc136 = loc("CWE190_Integer_Overflow__int_fscanf_add_12.c":98:20)
#loc137 = loc("CWE190_Integer_Overflow__int_fscanf_add_12.c":99:9)
#loc138 = loc("CWE190_Integer_Overflow__int_fscanf_add_12.c":102:9)
#loc139 = loc("CWE190_Integer_Overflow__int_fscanf_add_12.c":104:9)
#loc140 = loc("CWE190_Integer_Overflow__int_fscanf_add_12.c":100:26)
#loc141 = loc("CWE190_Integer_Overflow__int_fscanf_add_12.c":101:26)
#loc142 = loc("CWE190_Integer_Overflow__int_fscanf_add_12.c":101:13)
#loc143 = loc("CWE190_Integer_Overflow__int_fscanf_add_12.c":105:23)
#loc144 = loc("CWE190_Integer_Overflow__int_fscanf_add_12.c":105:13)
#loc145 = loc("CWE190_Integer_Overflow__int_fscanf_add_12.c":113:1)
#loc146 = loc("CWE190_Integer_Overflow__int_fscanf_add_12.c":144:1)
#loc147 = loc("CWE190_Integer_Overflow__int_fscanf_add_12.c":132:13)
#loc148 = loc("CWE190_Integer_Overflow__int_fscanf_add_12.c":132:33)
#loc149 = loc("CWE190_Integer_Overflow__int_fscanf_add_12.c":140:13)
#loc150 = loc("CWE190_Integer_Overflow__int_fscanf_add_12.c":140:33)
#loc151 = loc("CWE190_Integer_Overflow__int_fscanf_add_12.c":115:5)
#loc152 = loc("CWE190_Integer_Overflow__int_fscanf_add_12.c":115:9)
#loc153 = loc("CWE190_Integer_Overflow__int_fscanf_add_12.c":117:12)
#loc154 = loc("CWE190_Integer_Overflow__int_fscanf_add_12.c":117:5)
#loc155 = loc("CWE190_Integer_Overflow__int_fscanf_add_12.c":118:5)
#loc156 = loc("CWE190_Integer_Overflow__int_fscanf_add_12.c":127:5)
#loc157 = loc("CWE190_Integer_Overflow__int_fscanf_add_12.c":118:8)
#loc158 = loc("CWE190_Integer_Overflow__int_fscanf_add_12.c":118:33)
#loc159 = loc("CWE190_Integer_Overflow__int_fscanf_add_12.c":119:5)
#loc160 = loc("CWE190_Integer_Overflow__int_fscanf_add_12.c":122:5)
#loc161 = loc("CWE190_Integer_Overflow__int_fscanf_add_12.c":124:5)
#loc162 = loc("CWE190_Integer_Overflow__int_fscanf_add_12.c":121:16)
#loc163 = loc("CWE190_Integer_Overflow__int_fscanf_add_12.c":121:9)
#loc164 = loc("CWE190_Integer_Overflow__int_fscanf_add_12.c":126:16)
#loc165 = loc("CWE190_Integer_Overflow__int_fscanf_add_12.c":126:9)
#loc166 = loc("CWE190_Integer_Overflow__int_fscanf_add_12.c":128:5)
#loc167 = loc("CWE190_Integer_Overflow__int_fscanf_add_12.c":143:5)
#loc168 = loc("CWE190_Integer_Overflow__int_fscanf_add_12.c":128:8)
#loc169 = loc("CWE190_Integer_Overflow__int_fscanf_add_12.c":128:33)
#loc170 = loc("CWE190_Integer_Overflow__int_fscanf_add_12.c":129:5)
#loc171 = loc("CWE190_Integer_Overflow__int_fscanf_add_12.c":135:5)
#loc172 = loc("CWE190_Integer_Overflow__int_fscanf_add_12.c":137:5)
#loc173 = loc("CWE190_Integer_Overflow__int_fscanf_add_12.c":130:9)
#loc174 = loc("CWE190_Integer_Overflow__int_fscanf_add_12.c":134:9)
#loc175 = loc("CWE190_Integer_Overflow__int_fscanf_add_12.c":132:26)
#loc176 = loc("CWE190_Integer_Overflow__int_fscanf_add_12.c":133:26)
#loc177 = loc("CWE190_Integer_Overflow__int_fscanf_add_12.c":133:13)
#loc178 = loc("CWE190_Integer_Overflow__int_fscanf_add_12.c":138:9)
#loc179 = loc("CWE190_Integer_Overflow__int_fscanf_add_12.c":142:9)
#loc180 = loc("CWE190_Integer_Overflow__int_fscanf_add_12.c":140:26)
#loc181 = loc("CWE190_Integer_Overflow__int_fscanf_add_12.c":141:26)
#loc182 = loc("CWE190_Integer_Overflow__int_fscanf_add_12.c":141:13)
#loc183 = loc(fused[#loc1, #loc2])
#loc184 = loc(fused[#loc3, #loc4])
#loc185 = loc(fused[#loc5, #loc6])
#loc186 = loc(fused[#loc8, #loc9])
#loc187 = loc(fused[#loc10, #loc11])
#loc188 = loc(fused[#loc13, #loc14])
#loc189 = loc(fused[#loc15, #loc16])
#loc190 = loc(fused[#loc17, #loc18])
#loc191 = loc(fused[#loc19, #loc20])
#loc192 = loc(fused[#loc22, #loc21])
#loc193 = loc(fused[#loc23, #loc24])
#loc194 = loc(fused[#loc25, #loc26])
#loc195 = loc(fused[#loc27, #loc28, #loc29, #loc24])
#loc196 = loc(fused[#loc33, #loc32])
#loc197 = loc(fused[#loc34, #loc35])
#loc198 = loc(fused[#loc36, #loc37])
#loc199 = loc(fused[#loc38, #loc39, #loc40, #loc35])
#loc200 = loc(fused[#loc41, #loc42])
#loc201 = loc(fused[#loc46, #loc47])
#loc202 = loc(fused[#loc48, #loc49])
#loc203 = loc(fused[#loc50, #loc51, #loc52, #loc47])
#loc204 = loc(fused[#loc57, #loc58])
#loc205 = loc(fused[#loc59, #loc60])
#loc206 = loc(fused[#loc61, #loc62])
#loc207 = loc(fused[#loc63, #loc64])
#loc208 = loc(fused[#loc65, #loc66])
#loc209 = loc(fused[#loc71, #loc72])
#loc212 = loc(fused[#loc82, #loc83])
#loc213 = loc(fused[#loc86, #loc87])
#loc214 = loc(fused[#loc90, #loc89])
#loc215 = loc(fused[#loc91, #loc92])
#loc216 = loc(fused[#loc93, #loc94])
#loc217 = loc(fused[#loc95, #loc96])
#loc218 = loc(fused[#loc97, #loc98])
#loc219 = loc(fused[#loc100, #loc99])
#loc220 = loc(fused[#loc101, #loc102])
#loc221 = loc(fused[#loc103, #loc104])
#loc222 = loc(fused[#loc105, #loc106, #loc107, #loc102])
#loc223 = loc(fused[#loc114, #loc115])
#loc224 = loc(fused[#loc116, #loc117])
#loc225 = loc(fused[#loc118, #loc119, #loc120, #loc115])
#loc226 = loc(fused[#loc121, #loc122])
#loc227 = loc(fused[#loc123, #loc124])
#loc228 = loc(fused[#loc125, #loc126, #loc127, #loc122])
#loc229 = loc(fused[#loc133, #loc134])
#loc230 = loc(fused[#loc135, #loc136])
#loc231 = loc(fused[#loc137, #loc138, #loc139, #loc134])
#loc232 = loc(fused[#loc145, #loc146])
#loc233 = loc(fused[#loc147, #loc148])
#loc234 = loc(fused[#loc149, #loc150])
#loc235 = loc(fused[#loc151, #loc152])
#loc236 = loc(fused[#loc154, #loc153])
#loc237 = loc(fused[#loc155, #loc156])
#loc238 = loc(fused[#loc157, #loc158])
#loc239 = loc(fused[#loc159, #loc160, #loc161, #loc156])
#loc240 = loc(fused[#loc163, #loc162])
#loc241 = loc(fused[#loc165, #loc164])
#loc242 = loc(fused[#loc166, #loc167])
#loc243 = loc(fused[#loc168, #loc169])
#loc244 = loc(fused[#loc170, #loc171, #loc172, #loc167])
#loc245 = loc(fused[#loc173, #loc174])
#loc246 = loc(fused[#loc178, #loc179])
