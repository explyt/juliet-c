!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.struct<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.struct<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.struct<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
!ty__IO_FILE = !cir.struct<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__float_fgets_10.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.global "private"  external @globalTrue : !s32i {alignment = 4 : i64} loc(#loc228)
  cir.func private  @fgets(!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc229)
  cir.global "private"  external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc230)
  cir.func private  @atof(!cir.ptr<!s8i>) -> !cir.double extra(#fn_attr) loc(#loc231)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc232)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"fgets() failed.\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc11)
  cir.func private  @printIntLine(!s32i) loc(#loc233)
  cir.func no_proto  @CWE369_Divide_by_Zero__float_fgets_10_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc235)
    %1 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc18)
    cir.store %1, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc236)
    cir.scope {
      %2 = cir.get_global @globalTrue : !cir.ptr<!s32i> loc(#loc228)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc22)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc22)
      cir.if %4 {
        cir.scope {
          %5 = cir.alloca !cir.array<!s8i x 20>, !cir.ptr<!cir.array<!s8i x 20>>, ["inputBuffer"] {alignment = 16 : i64} loc(#loc240)
          cir.scope {
            %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc30)
            %7 = cir.const #cir.int<20> : !s32i loc(#loc31)
            %8 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc230)
            %9 = cir.load %8 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc32)
            %10 = cir.call @fgets(%6, %7, %9) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc33)
            %11 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc34)
            %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc34)
            %13 = cir.cmp(ne, %10, %12) : !cir.ptr<!s8i>, !s32i loc(#loc242)
            %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc35)
            cir.if %14 {
              %15 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc39)
              %16 = cir.call @atof(%15) : (!cir.ptr<!s8i>) -> !cir.double extra(#fn_attr) loc(#loc40)
              %17 = cir.cast(floating, %16 : !cir.double), !cir.float loc(#loc40)
              cir.store %17, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc244)
            } else {
              %15 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc11)
              %16 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc11)
              cir.call @printLine(%16) : (!cir.ptr<!s8i>) -> () loc(#loc43)
            } loc(#loc243)
          } loc(#loc241)
        } loc(#loc239)
      } loc(#loc238)
    } loc(#loc237)
    cir.scope {
      %2 = cir.get_global @globalTrue : !cir.ptr<!s32i> loc(#loc228)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc46)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc46)
      cir.if %4 {
        cir.scope {
          %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc248)
          %6 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc52)
          %7 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc53)
          %8 = cir.cast(floating, %7 : !cir.float), !cir.double loc(#loc53)
          %9 = cir.binop(div, %6, %8) : !cir.double loc(#loc249)
          %10 = cir.cast(float_to_int, %9 : !cir.double), !s32i loc(#loc249)
          cir.store %10, %5 : !s32i, !cir.ptr<!s32i> loc(#loc248)
          %11 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc54)
          cir.call @printIntLine(%11) : (!s32i) -> () loc(#loc55)
        } loc(#loc247)
      } loc(#loc246)
    } loc(#loc245)
    cir.return loc(#loc15)
  } loc(#loc234)
  cir.func no_proto  @CWE369_Divide_by_Zero__float_fgets_10_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc251)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc58)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc252)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc60)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc253)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc62)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc254)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc64)
    cir.return loc(#loc57)
  } loc(#loc250)
  cir.global "private"  external @globalFalse : !s32i {alignment = 4 : i64} loc(#loc255)
  cir.global "private"  constant internal dsolocal @".str1" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc68)
  cir.global "private"  constant internal dsolocal @".str2" = #cir.const_array<"This would result in a divide by zero\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc69)
  cir.func no_proto internal private  @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc257)
    %1 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc74)
    cir.store %1, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc258)
    cir.scope {
      %2 = cir.get_global @globalTrue : !cir.ptr<!s32i> loc(#loc228)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc78)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc78)
      cir.if %4 {
        cir.scope {
          %5 = cir.alloca !cir.array<!s8i x 20>, !cir.ptr<!cir.array<!s8i x 20>>, ["inputBuffer"] {alignment = 16 : i64} loc(#loc262)
          cir.scope {
            %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc86)
            %7 = cir.const #cir.int<20> : !s32i loc(#loc87)
            %8 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc230)
            %9 = cir.load %8 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc88)
            %10 = cir.call @fgets(%6, %7, %9) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc89)
            %11 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc90)
            %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc90)
            %13 = cir.cmp(ne, %10, %12) : !cir.ptr<!s8i>, !s32i loc(#loc264)
            %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc91)
            cir.if %14 {
              %15 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc95)
              %16 = cir.call @atof(%15) : (!cir.ptr<!s8i>) -> !cir.double extra(#fn_attr) loc(#loc96)
              %17 = cir.cast(floating, %16 : !cir.double), !cir.float loc(#loc96)
              cir.store %17, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc266)
            } else {
              %15 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc99)
              %16 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc99)
              cir.call @printLine(%16) : (!cir.ptr<!s8i>) -> () loc(#loc100)
            } loc(#loc265)
          } loc(#loc263)
        } loc(#loc261)
      } loc(#loc260)
    } loc(#loc259)
    cir.scope {
      %2 = cir.get_global @globalFalse : !cir.ptr<!s32i> loc(#loc255)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc103)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc103)
      cir.if %4 {
        %5 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc68)
        %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc68)
        cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc107)
      } else {
        cir.scope {
          %5 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc110)
          %6 = cir.cast(floating, %5 : !cir.float), !cir.double loc(#loc110)
          %7 = cir.fabs %6 : !cir.double loc(#loc110)
          %8 = cir.const #cir.fp<9.9999999999999995E-7> : !cir.double loc(#loc111)
          %9 = cir.cmp(gt, %7, %8) : !cir.double, !s32i loc(#loc270)
          %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc113)
          cir.if %10 {
            %11 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc272)
            %12 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc119)
            %13 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc120)
            %14 = cir.cast(floating, %13 : !cir.float), !cir.double loc(#loc120)
            %15 = cir.binop(div, %12, %14) : !cir.double loc(#loc273)
            %16 = cir.cast(float_to_int, %15 : !cir.double), !s32i loc(#loc273)
            cir.store %16, %11 : !s32i, !cir.ptr<!s32i> loc(#loc272)
            %17 = cir.load %11 : !cir.ptr<!s32i>, !s32i loc(#loc121)
            cir.call @printIntLine(%17) : (!s32i) -> () loc(#loc122)
          } else {
            %11 = cir.get_global @".str2" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc69)
            %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc69)
            cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc123)
          } loc(#loc271)
        } loc(#loc269)
      } loc(#loc268)
    } loc(#loc267)
    cir.return loc(#loc71)
  } loc(#loc256)
  cir.func no_proto internal private  @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc275)
    %1 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc128)
    cir.store %1, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc276)
    cir.scope {
      %2 = cir.get_global @globalTrue : !cir.ptr<!s32i> loc(#loc228)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc132)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc132)
      cir.if %4 {
        cir.scope {
          %5 = cir.alloca !cir.array<!s8i x 20>, !cir.ptr<!cir.array<!s8i x 20>>, ["inputBuffer"] {alignment = 16 : i64} loc(#loc280)
          cir.scope {
            %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc140)
            %7 = cir.const #cir.int<20> : !s32i loc(#loc141)
            %8 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc230)
            %9 = cir.load %8 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc142)
            %10 = cir.call @fgets(%6, %7, %9) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc143)
            %11 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc144)
            %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc144)
            %13 = cir.cmp(ne, %10, %12) : !cir.ptr<!s8i>, !s32i loc(#loc282)
            %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc145)
            cir.if %14 {
              %15 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc149)
              %16 = cir.call @atof(%15) : (!cir.ptr<!s8i>) -> !cir.double extra(#fn_attr) loc(#loc150)
              %17 = cir.cast(floating, %16 : !cir.double), !cir.float loc(#loc150)
              cir.store %17, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc284)
            } else {
              %15 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc153)
              %16 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc153)
              cir.call @printLine(%16) : (!cir.ptr<!s8i>) -> () loc(#loc154)
            } loc(#loc283)
          } loc(#loc281)
        } loc(#loc279)
      } loc(#loc278)
    } loc(#loc277)
    cir.scope {
      %2 = cir.get_global @globalTrue : !cir.ptr<!s32i> loc(#loc228)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc157)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc157)
      cir.if %4 {
        cir.scope {
          %5 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc161)
          %6 = cir.cast(floating, %5 : !cir.float), !cir.double loc(#loc161)
          %7 = cir.fabs %6 : !cir.double loc(#loc161)
          %8 = cir.const #cir.fp<9.9999999999999995E-7> : !cir.double loc(#loc162)
          %9 = cir.cmp(gt, %7, %8) : !cir.double, !s32i loc(#loc288)
          %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc164)
          cir.if %10 {
            %11 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc290)
            %12 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc170)
            %13 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc171)
            %14 = cir.cast(floating, %13 : !cir.float), !cir.double loc(#loc171)
            %15 = cir.binop(div, %12, %14) : !cir.double loc(#loc291)
            %16 = cir.cast(float_to_int, %15 : !cir.double), !s32i loc(#loc291)
            cir.store %16, %11 : !s32i, !cir.ptr<!s32i> loc(#loc290)
            %17 = cir.load %11 : !cir.ptr<!s32i>, !s32i loc(#loc172)
            cir.call @printIntLine(%17) : (!s32i) -> () loc(#loc173)
          } else {
            %11 = cir.get_global @".str2" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc174)
            %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc174)
            cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc175)
          } loc(#loc289)
        } loc(#loc287)
      } loc(#loc286)
    } loc(#loc285)
    cir.return loc(#loc125)
  } loc(#loc274)
  cir.func no_proto internal private  @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc293)
    %1 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc180)
    cir.store %1, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc294)
    cir.scope {
      %2 = cir.get_global @globalFalse : !cir.ptr<!s32i> loc(#loc255)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc184)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc184)
      cir.if %4 {
        %5 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc188)
        %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc188)
        cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc189)
      } else {
        %5 = cir.const #cir.fp<2.000000e+00> : !cir.float loc(#loc190)
        cir.store %5, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc297)
      } loc(#loc296)
    } loc(#loc295)
    cir.scope {
      %2 = cir.get_global @globalTrue : !cir.ptr<!s32i> loc(#loc228)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc194)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc194)
      cir.if %4 {
        cir.scope {
          %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc301)
          %6 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc200)
          %7 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc201)
          %8 = cir.cast(floating, %7 : !cir.float), !cir.double loc(#loc201)
          %9 = cir.binop(div, %6, %8) : !cir.double loc(#loc302)
          %10 = cir.cast(float_to_int, %9 : !cir.double), !s32i loc(#loc302)
          cir.store %10, %5 : !s32i, !cir.ptr<!s32i> loc(#loc301)
          %11 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc202)
          cir.call @printIntLine(%11) : (!s32i) -> () loc(#loc203)
        } loc(#loc300)
      } loc(#loc299)
    } loc(#loc298)
    cir.return loc(#loc177)
  } loc(#loc292)
  cir.func no_proto internal private  @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc304)
    %1 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc208)
    cir.store %1, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc305)
    cir.scope {
      %2 = cir.get_global @globalTrue : !cir.ptr<!s32i> loc(#loc228)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc212)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc212)
      cir.if %4 {
        %5 = cir.const #cir.fp<2.000000e+00> : !cir.float loc(#loc214)
        cir.store %5, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc308)
      } loc(#loc307)
    } loc(#loc306)
    cir.scope {
      %2 = cir.get_global @globalTrue : !cir.ptr<!s32i> loc(#loc228)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc218)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc218)
      cir.if %4 {
        cir.scope {
          %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc312)
          %6 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc224)
          %7 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc225)
          %8 = cir.cast(floating, %7 : !cir.float), !cir.double loc(#loc225)
          %9 = cir.binop(div, %6, %8) : !cir.double loc(#loc313)
          %10 = cir.cast(float_to_int, %9 : !cir.double), !s32i loc(#loc313)
          cir.store %10, %5 : !s32i, !cir.ptr<!s32i> loc(#loc312)
          %11 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc226)
          cir.call @printIntLine(%11) : (!s32i) -> () loc(#loc227)
        } loc(#loc311)
      } loc(#loc310)
    } loc(#loc309)
    cir.return loc(#loc205)
  } loc(#loc303)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__float_fgets_10.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase.h":116:1)
#loc2 = loc("../../../testcasesupport/std_testcase.h":116:12)
#loc3 = loc("/usr/include/stdio.h":654:1)
#loc4 = loc("/usr/include/stdio.h":655:59)
#loc5 = loc("/usr/include/stdio.h":149:1)
#loc6 = loc("/usr/include/stdio.h":149:14)
#loc7 = loc("/usr/include/stdlib.h":102:1)
#loc8 = loc("/usr/include/stdlib.h":103:33)
#loc9 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc10 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc11 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":43:27)
#loc12 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc13 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc14 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":26:1)
#loc15 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":55:1)
#loc16 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":28:5)
#loc17 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":28:11)
#loc18 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":30:12)
#loc19 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":30:5)
#loc20 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":31:5)
#loc21 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":46:5)
#loc22 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":31:8)
#loc23 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":32:5)
#loc24 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":33:9)
#loc25 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":45:9)
#loc26 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":34:13)
#loc27 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":34:45)
#loc28 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":36:13)
#loc29 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":44:13)
#loc30 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":36:23)
#loc31 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":36:36)
#loc32 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":36:53)
#loc33 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":36:17)
#loc34 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":36:63)
#loc35 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":36:60)
#loc36 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":37:13)
#loc37 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":40:13)
#loc38 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":42:13)
#loc39 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":39:36)
#loc40 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":39:31)
#loc41 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":39:17)
#loc42 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":39:47)
#loc43 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":43:17)
#loc44 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":47:5)
#loc45 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":54:5)
#loc46 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":47:8)
#loc47 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":48:5)
#loc48 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":49:9)
#loc49 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":53:9)
#loc50 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":51:13)
#loc51 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":51:44)
#loc52 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":51:32)
#loc53 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":51:40)
#loc54 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":52:26)
#loc55 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":52:13)
#loc56 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":187:1)
#loc57 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":193:1)
#loc58 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":189:5)
#loc59 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":189:14)
#loc60 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":190:5)
#loc61 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":190:14)
#loc62 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":191:5)
#loc63 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":191:14)
#loc64 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":192:5)
#loc65 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":192:14)
#loc66 = loc("../../../testcasesupport/std_testcase.h":117:1)
#loc67 = loc("../../../testcasesupport/std_testcase.h":117:12)
#loc68 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":86:19)
#loc69 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":98:23)
#loc70 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":62:1)
#loc71 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":101:1)
#loc72 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":64:5)
#loc73 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":64:11)
#loc74 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":66:12)
#loc75 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":66:5)
#loc76 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":67:5)
#loc77 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":82:5)
#loc78 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":67:8)
#loc79 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":68:5)
#loc80 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":69:9)
#loc81 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":81:9)
#loc82 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":70:13)
#loc83 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":70:45)
#loc84 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":72:13)
#loc85 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":80:13)
#loc86 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":72:23)
#loc87 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":72:36)
#loc88 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":72:53)
#loc89 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":72:17)
#loc90 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":72:63)
#loc91 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":72:60)
#loc92 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":73:13)
#loc93 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":76:13)
#loc94 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":78:13)
#loc95 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":75:36)
#loc96 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":75:31)
#loc97 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":75:17)
#loc98 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":75:47)
#loc99 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":79:27)
#loc100 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":79:17)
#loc101 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":83:5)
#loc102 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":100:5)
#loc103 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":83:8)
#loc104 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":84:5)
#loc105 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":87:5)
#loc106 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":89:5)
#loc107 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":86:9)
#loc108 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":91:9)
#loc109 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":99:9)
#loc110 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":91:17)
#loc111 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":91:25)
#loc112 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":91:12)
#loc113 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":91:23)
#loc114 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":92:9)
#loc115 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":95:9)
#loc116 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":97:9)
#loc117 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":93:13)
#loc118 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":93:44)
#loc119 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":93:32)
#loc120 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":93:40)
#loc121 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":94:26)
#loc122 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":94:13)
#loc123 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":98:13)
#loc124 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":104:1)
#loc125 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":138:1)
#loc126 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":106:5)
#loc127 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":106:11)
#loc128 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":108:12)
#loc129 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":108:5)
#loc130 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":109:5)
#loc131 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":124:5)
#loc132 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":109:8)
#loc133 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":110:5)
#loc134 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":111:9)
#loc135 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":123:9)
#loc136 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":112:13)
#loc137 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":112:45)
#loc138 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":114:13)
#loc139 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":122:13)
#loc140 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":114:23)
#loc141 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":114:36)
#loc142 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":114:53)
#loc143 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":114:17)
#loc144 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":114:63)
#loc145 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":114:60)
#loc146 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":115:13)
#loc147 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":118:13)
#loc148 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":120:13)
#loc149 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":117:36)
#loc150 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":117:31)
#loc151 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":117:17)
#loc152 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":117:47)
#loc153 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":121:27)
#loc154 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":121:17)
#loc155 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":125:5)
#loc156 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":137:5)
#loc157 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":125:8)
#loc158 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":126:5)
#loc159 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":128:9)
#loc160 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":136:9)
#loc161 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":128:17)
#loc162 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":128:25)
#loc163 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":128:12)
#loc164 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":128:23)
#loc165 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":129:9)
#loc166 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":132:9)
#loc167 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":134:9)
#loc168 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":130:13)
#loc169 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":130:44)
#loc170 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":130:32)
#loc171 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":130:40)
#loc172 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":131:26)
#loc173 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":131:13)
#loc174 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":135:23)
#loc175 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":135:13)
#loc176 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":141:1)
#loc177 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":164:1)
#loc178 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":143:5)
#loc179 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":143:11)
#loc180 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":145:12)
#loc181 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":145:5)
#loc182 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":146:5)
#loc183 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":155:5)
#loc184 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":146:8)
#loc185 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":147:5)
#loc186 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":150:5)
#loc187 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":152:5)
#loc188 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":149:19)
#loc189 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":149:9)
#loc190 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":154:16)
#loc191 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":154:9)
#loc192 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":156:5)
#loc193 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":163:5)
#loc194 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":156:8)
#loc195 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":157:5)
#loc196 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":158:9)
#loc197 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":162:9)
#loc198 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":160:13)
#loc199 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":160:44)
#loc200 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":160:32)
#loc201 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":160:40)
#loc202 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":161:26)
#loc203 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":161:13)
#loc204 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":167:1)
#loc205 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":185:1)
#loc206 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":169:5)
#loc207 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":169:11)
#loc208 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":171:12)
#loc209 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":171:5)
#loc210 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":172:5)
#loc211 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":176:5)
#loc212 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":172:8)
#loc213 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":173:5)
#loc214 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":175:16)
#loc215 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":175:9)
#loc216 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":177:5)
#loc217 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":184:5)
#loc218 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":177:8)
#loc219 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":178:5)
#loc220 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":179:9)
#loc221 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":183:9)
#loc222 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":181:13)
#loc223 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":181:44)
#loc224 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":181:32)
#loc225 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":181:40)
#loc226 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":182:26)
#loc227 = loc("CWE369_Divide_by_Zero__float_fgets_10.c":182:13)
#loc228 = loc(fused[#loc1, #loc2])
#loc229 = loc(fused[#loc3, #loc4])
#loc230 = loc(fused[#loc5, #loc6])
#loc231 = loc(fused[#loc7, #loc8])
#loc232 = loc(fused[#loc9, #loc10])
#loc233 = loc(fused[#loc12, #loc13])
#loc234 = loc(fused[#loc14, #loc15])
#loc235 = loc(fused[#loc16, #loc17])
#loc236 = loc(fused[#loc19, #loc18])
#loc237 = loc(fused[#loc20, #loc21])
#loc238 = loc(fused[#loc23, #loc21])
#loc239 = loc(fused[#loc24, #loc25])
#loc240 = loc(fused[#loc26, #loc27])
#loc241 = loc(fused[#loc28, #loc29])
#loc242 = loc(fused[#loc33, #loc34])
#loc243 = loc(fused[#loc36, #loc37, #loc38, #loc29])
#loc244 = loc(fused[#loc41, #loc42])
#loc245 = loc(fused[#loc44, #loc45])
#loc246 = loc(fused[#loc47, #loc45])
#loc247 = loc(fused[#loc48, #loc49])
#loc248 = loc(fused[#loc50, #loc51])
#loc249 = loc(fused[#loc52, #loc53])
#loc250 = loc(fused[#loc56, #loc57])
#loc251 = loc(fused[#loc58, #loc59])
#loc252 = loc(fused[#loc60, #loc61])
#loc253 = loc(fused[#loc62, #loc63])
#loc254 = loc(fused[#loc64, #loc65])
#loc255 = loc(fused[#loc66, #loc67])
#loc256 = loc(fused[#loc70, #loc71])
#loc257 = loc(fused[#loc72, #loc73])
#loc258 = loc(fused[#loc75, #loc74])
#loc259 = loc(fused[#loc76, #loc77])
#loc260 = loc(fused[#loc79, #loc77])
#loc261 = loc(fused[#loc80, #loc81])
#loc262 = loc(fused[#loc82, #loc83])
#loc263 = loc(fused[#loc84, #loc85])
#loc264 = loc(fused[#loc89, #loc90])
#loc265 = loc(fused[#loc92, #loc93, #loc94, #loc85])
#loc266 = loc(fused[#loc97, #loc98])
#loc267 = loc(fused[#loc101, #loc102])
#loc268 = loc(fused[#loc104, #loc105, #loc106, #loc102])
#loc269 = loc(fused[#loc108, #loc109])
#loc270 = loc(fused[#loc112, #loc111])
#loc271 = loc(fused[#loc114, #loc115, #loc116, #loc109])
#loc272 = loc(fused[#loc117, #loc118])
#loc273 = loc(fused[#loc119, #loc120])
#loc274 = loc(fused[#loc124, #loc125])
#loc275 = loc(fused[#loc126, #loc127])
#loc276 = loc(fused[#loc129, #loc128])
#loc277 = loc(fused[#loc130, #loc131])
#loc278 = loc(fused[#loc133, #loc131])
#loc279 = loc(fused[#loc134, #loc135])
#loc280 = loc(fused[#loc136, #loc137])
#loc281 = loc(fused[#loc138, #loc139])
#loc282 = loc(fused[#loc143, #loc144])
#loc283 = loc(fused[#loc146, #loc147, #loc148, #loc139])
#loc284 = loc(fused[#loc151, #loc152])
#loc285 = loc(fused[#loc155, #loc156])
#loc286 = loc(fused[#loc158, #loc156])
#loc287 = loc(fused[#loc159, #loc160])
#loc288 = loc(fused[#loc163, #loc162])
#loc289 = loc(fused[#loc165, #loc166, #loc167, #loc160])
#loc290 = loc(fused[#loc168, #loc169])
#loc291 = loc(fused[#loc170, #loc171])
#loc292 = loc(fused[#loc176, #loc177])
#loc293 = loc(fused[#loc178, #loc179])
#loc294 = loc(fused[#loc181, #loc180])
#loc295 = loc(fused[#loc182, #loc183])
#loc296 = loc(fused[#loc185, #loc186, #loc187, #loc183])
#loc297 = loc(fused[#loc191, #loc190])
#loc298 = loc(fused[#loc192, #loc193])
#loc299 = loc(fused[#loc195, #loc193])
#loc300 = loc(fused[#loc196, #loc197])
#loc301 = loc(fused[#loc198, #loc199])
#loc302 = loc(fused[#loc200, #loc201])
#loc303 = loc(fused[#loc204, #loc205])
#loc304 = loc(fused[#loc206, #loc207])
#loc305 = loc(fused[#loc209, #loc208])
#loc306 = loc(fused[#loc210, #loc211])
#loc307 = loc(fused[#loc213, #loc211])
#loc308 = loc(fused[#loc215, #loc214])
#loc309 = loc(fused[#loc216, #loc217])
#loc310 = loc(fused[#loc219, #loc217])
#loc311 = loc(fused[#loc220, #loc221])
#loc312 = loc(fused[#loc222, #loc223])
#loc313 = loc(fused[#loc224, #loc225])
