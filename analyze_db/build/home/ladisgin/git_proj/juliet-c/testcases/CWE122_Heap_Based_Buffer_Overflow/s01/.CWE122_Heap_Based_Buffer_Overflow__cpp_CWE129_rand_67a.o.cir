!s32i = !cir.int<s, 32>
!u32i = !cir.int<u, 32>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr2 = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone})>
#loc5 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_67a.cpp":23:16)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_67a.cpp":40:12)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_67a.cpp":75:12)
!ty_CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_673A3A_structType = !cir.struct<struct "CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_67::_structType" {!s32i}>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s01/CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_67a.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i32 = dense<32> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc61)
  cir.func private @_ZN53CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_677badSinkENS_11_structTypeE(!ty_CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_673A3A_structType) loc(#loc62)
  cir.func linkonce_odr @_ZN53CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_6711_structTypeC2ERKS0_(%arg0: !cir.ptr<!ty_CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_673A3A_structType> loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_67a.cpp":23:16), %arg1: !cir.ptr<!ty_CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_673A3A_structType> loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_67a.cpp":23:16)) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!ty_CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_673A3A_structType>, !cir.ptr<!cir.ptr<!ty_CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_673A3A_structType>>, ["this", init] {alignment = 8 : i64} loc(#loc5)
    %1 = cir.alloca !cir.ptr<!ty_CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_673A3A_structType>, !cir.ptr<!cir.ptr<!ty_CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_673A3A_structType>>, ["", init, const] {alignment = 8 : i64} loc(#loc5)
    cir.store %arg0, %0 : !cir.ptr<!ty_CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_673A3A_structType>, !cir.ptr<!cir.ptr<!ty_CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_673A3A_structType>> loc(#loc5)
    cir.store %arg1, %1 : !cir.ptr<!ty_CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_673A3A_structType>, !cir.ptr<!cir.ptr<!ty_CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_673A3A_structType>> loc(#loc5)
    %2 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_673A3A_structType>>, !cir.ptr<!ty_CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_673A3A_structType> loc(#loc5)
    %3 = cir.get_member %2[0] {name = "structFirst"} : !cir.ptr<!ty_CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_673A3A_structType> -> !cir.ptr<!s32i> loc(#loc6)
    %4 = cir.load %1 : !cir.ptr<!cir.ptr<!ty_CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_673A3A_structType>>, !cir.ptr<!ty_CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_673A3A_structType> loc(#loc5)
    %5 = cir.get_member %4[0] {name = "structFirst"} : !cir.ptr<!ty_CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_673A3A_structType> -> !cir.ptr<!s32i> loc(#loc6)
    %6 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc5)
    cir.store %6, %3 : !s32i, !cir.ptr<!s32i> loc(#loc63)
    cir.return loc(#loc5)
  } loc(#loc5)
  cir.func @_ZN53CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_673badEv() extra(#fn_attr2) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc65)
    %1 = cir.alloca !ty_CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_673A3A_structType, !cir.ptr<!ty_CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_673A3A_structType>, ["myStruct"] {alignment = 4 : i64} loc(#loc66)
    %2 = cir.alloca !ty_CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_673A3A_structType, !cir.ptr<!ty_CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_673A3A_structType>, ["agg.tmp0"] {alignment = 4 : i64} loc(#loc14)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc15)
    %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc16)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc67)
    %5 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
    %6 = cir.const #cir.int<1> : !s32i loc(#loc18)
    %7 = cir.binop(and, %5, %6) : !s32i loc(#loc18)
    %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc18)
    cir.brcond %8 ^bb1, ^bb2 loc(#loc18)
  ^bb1:  // pred: ^bb0
    %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
    %10 = cir.cast(integral, %9 : !s32i), !u32i loc(#loc18)
    %11 = cir.const #cir.int<30> : !s32i loc(#loc18)
    %12 = cir.shift(left, %10 : !u32i, %11 : !s32i) -> !u32i loc(#loc18)
    %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
    %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc18)
    %15 = cir.const #cir.int<15> : !s32i loc(#loc18)
    %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc18)
    %17 = cir.binop(xor, %12, %16) : !u32i loc(#loc18)
    %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
    %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc18)
    %20 = cir.binop(xor, %17, %19) : !u32i loc(#loc18)
    cir.br ^bb3(%20 : !u32i) loc(#loc18)
  ^bb2:  // pred: ^bb0
    %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
    %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc18)
    %23 = cir.const #cir.int<30> : !s32i loc(#loc18)
    %24 = cir.shift(left, %22 : !u32i, %23 : !s32i) -> !u32i loc(#loc18)
    %25 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
    %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc18)
    %27 = cir.const #cir.int<15> : !s32i loc(#loc18)
    %28 = cir.shift(left, %26 : !u32i, %27 : !s32i) -> !u32i loc(#loc18)
    %29 = cir.binop(xor, %24, %28) : !u32i loc(#loc18)
    %30 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
    %31 = cir.cast(integral, %30 : !s32i), !u32i loc(#loc18)
    %32 = cir.binop(xor, %29, %31) : !u32i loc(#loc18)
    %33 = cir.unary(minus, %32) : !u32i, !u32i loc(#loc18)
    %34 = cir.const #cir.int<1> : !s32i loc(#loc18)
    %35 = cir.cast(integral, %34 : !s32i), !u32i loc(#loc18)
    %36 = cir.binop(sub, %33, %35) : !u32i loc(#loc18)
    cir.br ^bb3(%36 : !u32i) loc(#loc18)
  ^bb3(%37: !u32i loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_67a.cpp":40:12)):  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc18)
  ^bb4:  // pred: ^bb3
    %38 = cir.cast(integral, %37 : !u32i), !s32i loc(#loc18)
    cir.store %38, %0 : !s32i, !cir.ptr<!s32i> loc(#loc68)
    %39 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc20)
    %40 = cir.get_member %1[0] {name = "structFirst"} : !cir.ptr<!ty_CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_673A3A_structType> -> !cir.ptr<!s32i> loc(#loc6)
    cir.store %39, %40 : !s32i, !cir.ptr<!s32i> loc(#loc69)
    cir.call @_ZN53CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_6711_structTypeC2ERKS0_(%2, %1) : (!cir.ptr<!ty_CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_673A3A_structType>, !cir.ptr<!ty_CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_673A3A_structType>) -> () extra(#fn_attr) loc(#loc14)
    %41 = cir.load %2 : !cir.ptr<!ty_CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_673A3A_structType>, !ty_CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_673A3A_structType loc(#loc22)
    cir.call @_ZN53CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_677badSinkENS_11_structTypeE(%41) : (!ty_CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_673A3A_structType) -> () loc(#loc22)
    cir.return loc(#loc9)
  } loc(#loc64)
  cir.func private @_ZN53CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_6711goodG2BSinkENS_11_structTypeE(!ty_CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_673A3A_structType) loc(#loc70)
  cir.func internal private @_ZN53CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_67L7goodG2BEv() extra(#fn_attr2) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc72)
    %1 = cir.alloca !ty_CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_673A3A_structType, !cir.ptr<!ty_CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_673A3A_structType>, ["myStruct"] {alignment = 4 : i64} loc(#loc73)
    %2 = cir.alloca !ty_CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_673A3A_structType, !cir.ptr<!ty_CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_673A3A_structType>, ["agg.tmp0"] {alignment = 4 : i64} loc(#loc31)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc32)
    %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc33)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc74)
    %5 = cir.const #cir.int<7> : !s32i loc(#loc35)
    cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc75)
    %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc37)
    %7 = cir.get_member %1[0] {name = "structFirst"} : !cir.ptr<!ty_CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_673A3A_structType> -> !cir.ptr<!s32i> loc(#loc6)
    cir.store %6, %7 : !s32i, !cir.ptr<!s32i> loc(#loc76)
    cir.call @_ZN53CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_6711_structTypeC2ERKS0_(%2, %1) : (!cir.ptr<!ty_CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_673A3A_structType>, !cir.ptr<!ty_CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_673A3A_structType>) -> () extra(#fn_attr) loc(#loc31)
    %8 = cir.load %2 : !cir.ptr<!ty_CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_673A3A_structType>, !ty_CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_673A3A_structType loc(#loc39)
    cir.call @_ZN53CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_6711goodG2BSinkENS_11_structTypeE(%8) : (!ty_CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_673A3A_structType) -> () loc(#loc39)
    cir.return loc(#loc26)
  } loc(#loc71)
  cir.func private @_ZN53CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_6711goodB2GSinkENS_11_structTypeE(!ty_CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_673A3A_structType) loc(#loc77)
  cir.func internal private @_ZN53CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_67L7goodB2GEv() extra(#fn_attr2) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc79)
    %1 = cir.alloca !ty_CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_673A3A_structType, !cir.ptr<!ty_CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_673A3A_structType>, ["myStruct"] {alignment = 4 : i64} loc(#loc80)
    %2 = cir.alloca !ty_CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_673A3A_structType, !cir.ptr<!ty_CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_673A3A_structType>, ["agg.tmp0"] {alignment = 4 : i64} loc(#loc48)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc49)
    %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc50)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc81)
    %5 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc52)
    %6 = cir.const #cir.int<1> : !s32i loc(#loc52)
    %7 = cir.binop(and, %5, %6) : !s32i loc(#loc52)
    %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc52)
    cir.brcond %8 ^bb1, ^bb2 loc(#loc52)
  ^bb1:  // pred: ^bb0
    %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc52)
    %10 = cir.cast(integral, %9 : !s32i), !u32i loc(#loc52)
    %11 = cir.const #cir.int<30> : !s32i loc(#loc52)
    %12 = cir.shift(left, %10 : !u32i, %11 : !s32i) -> !u32i loc(#loc52)
    %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc52)
    %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc52)
    %15 = cir.const #cir.int<15> : !s32i loc(#loc52)
    %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc52)
    %17 = cir.binop(xor, %12, %16) : !u32i loc(#loc52)
    %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc52)
    %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc52)
    %20 = cir.binop(xor, %17, %19) : !u32i loc(#loc52)
    cir.br ^bb3(%20 : !u32i) loc(#loc52)
  ^bb2:  // pred: ^bb0
    %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc52)
    %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc52)
    %23 = cir.const #cir.int<30> : !s32i loc(#loc52)
    %24 = cir.shift(left, %22 : !u32i, %23 : !s32i) -> !u32i loc(#loc52)
    %25 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc52)
    %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc52)
    %27 = cir.const #cir.int<15> : !s32i loc(#loc52)
    %28 = cir.shift(left, %26 : !u32i, %27 : !s32i) -> !u32i loc(#loc52)
    %29 = cir.binop(xor, %24, %28) : !u32i loc(#loc52)
    %30 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc52)
    %31 = cir.cast(integral, %30 : !s32i), !u32i loc(#loc52)
    %32 = cir.binop(xor, %29, %31) : !u32i loc(#loc52)
    %33 = cir.unary(minus, %32) : !u32i, !u32i loc(#loc52)
    %34 = cir.const #cir.int<1> : !s32i loc(#loc52)
    %35 = cir.cast(integral, %34 : !s32i), !u32i loc(#loc52)
    %36 = cir.binop(sub, %33, %35) : !u32i loc(#loc52)
    cir.br ^bb3(%36 : !u32i) loc(#loc52)
  ^bb3(%37: !u32i loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_67a.cpp":75:12)):  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc52)
  ^bb4:  // pred: ^bb3
    %38 = cir.cast(integral, %37 : !u32i), !s32i loc(#loc52)
    cir.store %38, %0 : !s32i, !cir.ptr<!s32i> loc(#loc82)
    %39 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc54)
    %40 = cir.get_member %1[0] {name = "structFirst"} : !cir.ptr<!ty_CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_673A3A_structType> -> !cir.ptr<!s32i> loc(#loc6)
    cir.store %39, %40 : !s32i, !cir.ptr<!s32i> loc(#loc83)
    cir.call @_ZN53CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_6711_structTypeC2ERKS0_(%2, %1) : (!cir.ptr<!ty_CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_673A3A_structType>, !cir.ptr<!ty_CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_673A3A_structType>) -> () extra(#fn_attr) loc(#loc48)
    %41 = cir.load %2 : !cir.ptr<!ty_CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_673A3A_structType>, !ty_CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_673A3A_structType loc(#loc56)
    cir.call @_ZN53CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_6711goodB2GSinkENS_11_structTypeE(%41) : (!ty_CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_673A3A_structType) -> () loc(#loc56)
    cir.return loc(#loc43)
  } loc(#loc78)
  cir.func @_ZN53CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_674goodEv() extra(#fn_attr2) {
    cir.call @_ZN53CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_67L7goodG2BEv() : () -> () loc(#loc59)
    cir.call @_ZN53CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_67L7goodB2GEv() : () -> () loc(#loc60)
    cir.return loc(#loc58)
  } loc(#loc84)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s01/CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_67a.cpp":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_67a.cpp":31:1)
#loc4 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_67a.cpp":31:33)
#loc6 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_67a.cpp":25:9)
#loc7 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_67a.cpp":25:5)
#loc8 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_67a.cpp":33:1)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_67a.cpp":43:1)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_67a.cpp":35:5)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_67a.cpp":35:9)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_67a.cpp":36:5)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_67a.cpp":36:16)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_67a.cpp":42:13)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_67a.cpp":38:13)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_67a.cpp":38:12)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_67a.cpp":38:5)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_67a.cpp":40:5)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_67a.cpp":41:28)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_67a.cpp":41:5)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_67a.cpp":42:5)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_67a.cpp":50:1)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_67a.cpp":50:37)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_67a.cpp":52:1)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_67a.cpp":63:1)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_67a.cpp":54:5)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_67a.cpp":54:9)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_67a.cpp":55:5)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_67a.cpp":55:16)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_67a.cpp":62:17)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_67a.cpp":57:13)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_67a.cpp":57:12)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_67a.cpp":57:5)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_67a.cpp":60:12)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_67a.cpp":60:5)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_67a.cpp":61:28)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_67a.cpp":61:5)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_67a.cpp":62:5)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_67a.cpp":66:1)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_67a.cpp":66:37)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_67a.cpp":68:1)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_67a.cpp":78:1)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_67a.cpp":70:5)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_67a.cpp":70:9)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_67a.cpp":71:5)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_67a.cpp":71:16)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_67a.cpp":77:17)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_67a.cpp":73:13)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_67a.cpp":73:12)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_67a.cpp":73:5)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_67a.cpp":75:5)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_67a.cpp":76:28)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_67a.cpp":76:5)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_67a.cpp":77:5)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_67a.cpp":80:1)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_67a.cpp":84:1)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_67a.cpp":82:5)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_67a.cpp":83:5)
#loc61 = loc(fused[#loc1, #loc2])
#loc62 = loc(fused[#loc3, #loc4])
#loc63 = loc(fused[#loc7, #loc6])
#loc64 = loc(fused[#loc8, #loc9])
#loc65 = loc(fused[#loc10, #loc11])
#loc66 = loc(fused[#loc12, #loc13])
#loc67 = loc(fused[#loc17, #loc15])
#loc68 = loc(fused[#loc19, #loc18])
#loc69 = loc(fused[#loc21, #loc20])
#loc70 = loc(fused[#loc23, #loc24])
#loc71 = loc(fused[#loc25, #loc26])
#loc72 = loc(fused[#loc27, #loc28])
#loc73 = loc(fused[#loc29, #loc30])
#loc74 = loc(fused[#loc34, #loc32])
#loc75 = loc(fused[#loc36, #loc35])
#loc76 = loc(fused[#loc38, #loc37])
#loc77 = loc(fused[#loc40, #loc41])
#loc78 = loc(fused[#loc42, #loc43])
#loc79 = loc(fused[#loc44, #loc45])
#loc80 = loc(fused[#loc46, #loc47])
#loc81 = loc(fused[#loc51, #loc49])
#loc82 = loc(fused[#loc53, #loc52])
#loc83 = loc(fused[#loc55, #loc54])
#loc84 = loc(fused[#loc57, #loc58])
