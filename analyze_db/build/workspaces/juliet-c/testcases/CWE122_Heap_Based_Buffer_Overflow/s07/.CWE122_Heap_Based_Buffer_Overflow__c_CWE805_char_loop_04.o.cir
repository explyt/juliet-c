!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i32 = dense<32> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, "dlti.endianness" = "little", "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc226)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc227)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc228)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc229)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc231)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc13)
    cir.store %1, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc232)
    cir.scope {
      %2 = cir.const #cir.int<1> : !s32i loc(#loc17)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc17)
      cir.if %3 {
        %4 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc19)
        %5 = cir.const #cir.int<50> : !s32i loc(#loc20)
        %6 = cir.cast(integral, %5 : !s32i), !u64i loc(#loc20)
        %7 = cir.const #cir.int<1> : !u64i loc(#loc235)
        %8 = cir.binop(mul, %6, %7) : !u64i loc(#loc236)
        %9 = cir.call @malloc(%8) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc19)
        %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc237)
        cir.store %10, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc238)
        cir.scope {
          %16 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc27)
          %17 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc28)
          %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc28)
          %19 = cir.cmp(eq, %16, %18) : !cir.ptr<!s8i>, !cir.bool loc(#loc240)
          cir.if %19 {
            %20 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc30)
            %21 = cir.const #cir.int<1> : !s32i loc(#loc31)
            %22 = cir.unary(minus, %21) nsw : !s32i, !s32i loc(#loc32)
            cir.call @exit(%22) : (!s32i) -> () extra(#fn_attr) loc(#loc30)
          } loc(#loc241)
        } loc(#loc239)
        %11 = cir.const #cir.int<0> : !s32i loc(#loc33)
        %12 = cir.cast(integral, %11 : !s32i), !s8i loc(#loc33)
        %13 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc34)
        %14 = cir.const #cir.int<0> : !s32i loc(#loc35)
        %15 = cir.ptr_stride(%13 : !cir.ptr<!s8i>, %14 : !s32i), !cir.ptr<!s8i> loc(#loc36)
        cir.store %12, %15 : !s8i, !cir.ptr<!s8i> loc(#loc242)
      } loc(#loc234)
    } loc(#loc233)
    cir.scope {
      %2 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc244)
      %3 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc245)
      %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc43)
      %5 = cir.cast(bitcast, %4 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc43)
      %6 = cir.const #cir.int<67> : !s32i loc(#loc44)
      %7 = cir.const #cir.int<100> : !s32i loc(#loc45)
      %8 = cir.const #cir.int<1> : !s32i loc(#loc46)
      %9 = cir.binop(sub, %7, %8) nsw : !s32i loc(#loc45)
      %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc45)
      cir.libc.memset %10 bytes from %5 set to %6 : !cir.ptr<!void>, !s32i, !u64i loc(#loc246)
      %11 = cir.const #cir.int<0> : !s32i loc(#loc49)
      %12 = cir.cast(integral, %11 : !s32i), !s8i loc(#loc49)
      %13 = cir.const #cir.int<100> : !s32i loc(#loc50)
      %14 = cir.const #cir.int<1> : !s32i loc(#loc51)
      %15 = cir.binop(sub, %13, %14) nsw : !s32i loc(#loc50)
      %16 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc52)
      %17 = cir.ptr_stride(%16 : !cir.ptr<!s8i>, %15 : !s32i), !cir.ptr<!s8i> loc(#loc52)
      cir.store %12, %17 : !s8i, !cir.ptr<!s8i> loc(#loc247)
      cir.scope {
        %29 = cir.const #cir.int<0> : !s32i loc(#loc55)
        %30 = cir.cast(integral, %29 : !s32i), !u64i loc(#loc55)
        cir.store %30, %2 : !u64i, !cir.ptr<!u64i> loc(#loc249)
        cir.for : cond {
          %31 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc57)
          %32 = cir.const #cir.int<100> : !s32i loc(#loc58)
          %33 = cir.cast(integral, %32 : !s32i), !u64i loc(#loc58)
          %34 = cir.cmp(lt, %31, %33) : !u64i, !cir.bool loc(#loc250)
          cir.condition(%34) loc(#loc59)
        } body {
          cir.scope {
            %31 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc61)
            %32 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc62)
            %33 = cir.ptr_stride(%32 : !cir.ptr<!s8i>, %31 : !u64i), !cir.ptr<!s8i> loc(#loc62)
            %34 = cir.load %33 : !cir.ptr<!s8i>, !s8i loc(#loc62)
            %35 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc63)
            %36 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc64)
            %37 = cir.ptr_stride(%35 : !cir.ptr<!s8i>, %36 : !u64i), !cir.ptr<!s8i> loc(#loc65)
            cir.store %34, %37 : !s8i, !cir.ptr<!s8i> loc(#loc252)
          } loc(#loc251)
          cir.yield loc(#loc54)
        } step {
          %31 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc67)
          %32 = cir.unary(inc, %31) : !u64i, !u64i loc(#loc68)
          cir.store %32, %2 : !u64i, !cir.ptr<!u64i> loc(#loc253)
          cir.yield loc(#loc248)
        } loc(#loc248)
      } loc(#loc248)
      %18 = cir.const #cir.int<0> : !s32i loc(#loc69)
      %19 = cir.cast(integral, %18 : !s32i), !s8i loc(#loc69)
      %20 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc70)
      %21 = cir.const #cir.int<100> : !s32i loc(#loc71)
      %22 = cir.const #cir.int<1> : !s32i loc(#loc72)
      %23 = cir.binop(sub, %21, %22) nsw : !s32i loc(#loc71)
      %24 = cir.ptr_stride(%20 : !cir.ptr<!s8i>, %23 : !s32i), !cir.ptr<!s8i> loc(#loc73)
      cir.store %19, %24 : !s8i, !cir.ptr<!s8i> loc(#loc254)
      %25 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc74)
      cir.call @printLine(%25) : (!cir.ptr<!s8i>) -> () loc(#loc75)
      %26 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc76)
      %27 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc77)
      %28 = cir.cast(bitcast, %27 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc77)
      cir.call @free(%28) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc76)
    } loc(#loc243)
    cir.return loc(#loc10)
  } loc(#loc230)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<()>> loc(#loc256)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc80)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<()>> loc(#loc257)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc82)
    cir.return loc(#loc79)
  } loc(#loc255)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc84)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc259)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc89)
    cir.store %1, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc260)
    cir.scope {
      %2 = cir.const #cir.int<0> : !s32i loc(#loc93)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc93)
      cir.if %3 {
        %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc84)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc84)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc97)
      } else {
        %4 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc98)
        %5 = cir.const #cir.int<100> : !s32i loc(#loc99)
        %6 = cir.cast(integral, %5 : !s32i), !u64i loc(#loc99)
        %7 = cir.const #cir.int<1> : !u64i loc(#loc263)
        %8 = cir.binop(mul, %6, %7) : !u64i loc(#loc264)
        %9 = cir.call @malloc(%8) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc98)
        %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc265)
        cir.store %10, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc266)
        cir.scope {
          %16 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc106)
          %17 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc107)
          %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc107)
          %19 = cir.cmp(eq, %16, %18) : !cir.ptr<!s8i>, !cir.bool loc(#loc268)
          cir.if %19 {
            %20 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc109)
            %21 = cir.const #cir.int<1> : !s32i loc(#loc110)
            %22 = cir.unary(minus, %21) nsw : !s32i, !s32i loc(#loc111)
            cir.call @exit(%22) : (!s32i) -> () extra(#fn_attr) loc(#loc109)
          } loc(#loc269)
        } loc(#loc267)
        %11 = cir.const #cir.int<0> : !s32i loc(#loc112)
        %12 = cir.cast(integral, %11 : !s32i), !s8i loc(#loc112)
        %13 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc113)
        %14 = cir.const #cir.int<0> : !s32i loc(#loc114)
        %15 = cir.ptr_stride(%13 : !cir.ptr<!s8i>, %14 : !s32i), !cir.ptr<!s8i> loc(#loc115)
        cir.store %12, %15 : !s8i, !cir.ptr<!s8i> loc(#loc270)
      } loc(#loc262)
    } loc(#loc261)
    cir.scope {
      %2 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc272)
      %3 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc273)
      %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc122)
      %5 = cir.cast(bitcast, %4 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc122)
      %6 = cir.const #cir.int<67> : !s32i loc(#loc123)
      %7 = cir.const #cir.int<100> : !s32i loc(#loc124)
      %8 = cir.const #cir.int<1> : !s32i loc(#loc125)
      %9 = cir.binop(sub, %7, %8) nsw : !s32i loc(#loc124)
      %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc124)
      cir.libc.memset %10 bytes from %5 set to %6 : !cir.ptr<!void>, !s32i, !u64i loc(#loc274)
      %11 = cir.const #cir.int<0> : !s32i loc(#loc128)
      %12 = cir.cast(integral, %11 : !s32i), !s8i loc(#loc128)
      %13 = cir.const #cir.int<100> : !s32i loc(#loc129)
      %14 = cir.const #cir.int<1> : !s32i loc(#loc130)
      %15 = cir.binop(sub, %13, %14) nsw : !s32i loc(#loc129)
      %16 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc131)
      %17 = cir.ptr_stride(%16 : !cir.ptr<!s8i>, %15 : !s32i), !cir.ptr<!s8i> loc(#loc131)
      cir.store %12, %17 : !s8i, !cir.ptr<!s8i> loc(#loc275)
      cir.scope {
        %29 = cir.const #cir.int<0> : !s32i loc(#loc134)
        %30 = cir.cast(integral, %29 : !s32i), !u64i loc(#loc134)
        cir.store %30, %2 : !u64i, !cir.ptr<!u64i> loc(#loc277)
        cir.for : cond {
          %31 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc136)
          %32 = cir.const #cir.int<100> : !s32i loc(#loc137)
          %33 = cir.cast(integral, %32 : !s32i), !u64i loc(#loc137)
          %34 = cir.cmp(lt, %31, %33) : !u64i, !cir.bool loc(#loc278)
          cir.condition(%34) loc(#loc138)
        } body {
          cir.scope {
            %31 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc140)
            %32 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc141)
            %33 = cir.ptr_stride(%32 : !cir.ptr<!s8i>, %31 : !u64i), !cir.ptr<!s8i> loc(#loc141)
            %34 = cir.load %33 : !cir.ptr<!s8i>, !s8i loc(#loc141)
            %35 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc142)
            %36 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc143)
            %37 = cir.ptr_stride(%35 : !cir.ptr<!s8i>, %36 : !u64i), !cir.ptr<!s8i> loc(#loc144)
            cir.store %34, %37 : !s8i, !cir.ptr<!s8i> loc(#loc280)
          } loc(#loc279)
          cir.yield loc(#loc133)
        } step {
          %31 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc146)
          %32 = cir.unary(inc, %31) : !u64i, !u64i loc(#loc147)
          cir.store %32, %2 : !u64i, !cir.ptr<!u64i> loc(#loc281)
          cir.yield loc(#loc276)
        } loc(#loc276)
      } loc(#loc276)
      %18 = cir.const #cir.int<0> : !s32i loc(#loc148)
      %19 = cir.cast(integral, %18 : !s32i), !s8i loc(#loc148)
      %20 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc149)
      %21 = cir.const #cir.int<100> : !s32i loc(#loc150)
      %22 = cir.const #cir.int<1> : !s32i loc(#loc151)
      %23 = cir.binop(sub, %21, %22) nsw : !s32i loc(#loc150)
      %24 = cir.ptr_stride(%20 : !cir.ptr<!s8i>, %23 : !s32i), !cir.ptr<!s8i> loc(#loc152)
      cir.store %19, %24 : !s8i, !cir.ptr<!s8i> loc(#loc282)
      %25 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc153)
      cir.call @printLine(%25) : (!cir.ptr<!s8i>) -> () loc(#loc154)
      %26 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc155)
      %27 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc156)
      %28 = cir.cast(bitcast, %27 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc156)
      cir.call @free(%28) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc155)
    } loc(#loc271)
    cir.return loc(#loc86)
  } loc(#loc258)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc284)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc161)
    cir.store %1, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc285)
    cir.scope {
      %2 = cir.const #cir.int<1> : !s32i loc(#loc165)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc165)
      cir.if %3 {
        %4 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc167)
        %5 = cir.const #cir.int<100> : !s32i loc(#loc168)
        %6 = cir.cast(integral, %5 : !s32i), !u64i loc(#loc168)
        %7 = cir.const #cir.int<1> : !u64i loc(#loc288)
        %8 = cir.binop(mul, %6, %7) : !u64i loc(#loc289)
        %9 = cir.call @malloc(%8) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc167)
        %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc290)
        cir.store %10, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc291)
        cir.scope {
          %16 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc175)
          %17 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc176)
          %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc176)
          %19 = cir.cmp(eq, %16, %18) : !cir.ptr<!s8i>, !cir.bool loc(#loc293)
          cir.if %19 {
            %20 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc178)
            %21 = cir.const #cir.int<1> : !s32i loc(#loc179)
            %22 = cir.unary(minus, %21) nsw : !s32i, !s32i loc(#loc180)
            cir.call @exit(%22) : (!s32i) -> () extra(#fn_attr) loc(#loc178)
          } loc(#loc294)
        } loc(#loc292)
        %11 = cir.const #cir.int<0> : !s32i loc(#loc181)
        %12 = cir.cast(integral, %11 : !s32i), !s8i loc(#loc181)
        %13 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc182)
        %14 = cir.const #cir.int<0> : !s32i loc(#loc183)
        %15 = cir.ptr_stride(%13 : !cir.ptr<!s8i>, %14 : !s32i), !cir.ptr<!s8i> loc(#loc184)
        cir.store %12, %15 : !s8i, !cir.ptr<!s8i> loc(#loc295)
      } loc(#loc287)
    } loc(#loc286)
    cir.scope {
      %2 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc297)
      %3 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc298)
      %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc191)
      %5 = cir.cast(bitcast, %4 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc191)
      %6 = cir.const #cir.int<67> : !s32i loc(#loc192)
      %7 = cir.const #cir.int<100> : !s32i loc(#loc193)
      %8 = cir.const #cir.int<1> : !s32i loc(#loc194)
      %9 = cir.binop(sub, %7, %8) nsw : !s32i loc(#loc193)
      %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc193)
      cir.libc.memset %10 bytes from %5 set to %6 : !cir.ptr<!void>, !s32i, !u64i loc(#loc299)
      %11 = cir.const #cir.int<0> : !s32i loc(#loc197)
      %12 = cir.cast(integral, %11 : !s32i), !s8i loc(#loc197)
      %13 = cir.const #cir.int<100> : !s32i loc(#loc198)
      %14 = cir.const #cir.int<1> : !s32i loc(#loc199)
      %15 = cir.binop(sub, %13, %14) nsw : !s32i loc(#loc198)
      %16 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc200)
      %17 = cir.ptr_stride(%16 : !cir.ptr<!s8i>, %15 : !s32i), !cir.ptr<!s8i> loc(#loc200)
      cir.store %12, %17 : !s8i, !cir.ptr<!s8i> loc(#loc300)
      cir.scope {
        %29 = cir.const #cir.int<0> : !s32i loc(#loc203)
        %30 = cir.cast(integral, %29 : !s32i), !u64i loc(#loc203)
        cir.store %30, %2 : !u64i, !cir.ptr<!u64i> loc(#loc302)
        cir.for : cond {
          %31 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc205)
          %32 = cir.const #cir.int<100> : !s32i loc(#loc206)
          %33 = cir.cast(integral, %32 : !s32i), !u64i loc(#loc206)
          %34 = cir.cmp(lt, %31, %33) : !u64i, !cir.bool loc(#loc303)
          cir.condition(%34) loc(#loc207)
        } body {
          cir.scope {
            %31 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc209)
            %32 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc210)
            %33 = cir.ptr_stride(%32 : !cir.ptr<!s8i>, %31 : !u64i), !cir.ptr<!s8i> loc(#loc210)
            %34 = cir.load %33 : !cir.ptr<!s8i>, !s8i loc(#loc210)
            %35 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc211)
            %36 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc212)
            %37 = cir.ptr_stride(%35 : !cir.ptr<!s8i>, %36 : !u64i), !cir.ptr<!s8i> loc(#loc213)
            cir.store %34, %37 : !s8i, !cir.ptr<!s8i> loc(#loc305)
          } loc(#loc304)
          cir.yield loc(#loc202)
        } step {
          %31 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc215)
          %32 = cir.unary(inc, %31) : !u64i, !u64i loc(#loc216)
          cir.store %32, %2 : !u64i, !cir.ptr<!u64i> loc(#loc306)
          cir.yield loc(#loc301)
        } loc(#loc301)
      } loc(#loc301)
      %18 = cir.const #cir.int<0> : !s32i loc(#loc217)
      %19 = cir.cast(integral, %18 : !s32i), !s8i loc(#loc217)
      %20 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc218)
      %21 = cir.const #cir.int<100> : !s32i loc(#loc219)
      %22 = cir.const #cir.int<1> : !s32i loc(#loc220)
      %23 = cir.binop(sub, %21, %22) nsw : !s32i loc(#loc219)
      %24 = cir.ptr_stride(%20 : !cir.ptr<!s8i>, %23 : !s32i), !cir.ptr<!s8i> loc(#loc221)
      cir.store %19, %24 : !s8i, !cir.ptr<!s8i> loc(#loc307)
      %25 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc222)
      cir.call @printLine(%25) : (!cir.ptr<!s8i>) -> () loc(#loc223)
      %26 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc224)
      %27 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc225)
      %28 = cir.cast(bitcast, %27 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc225)
      cir.call @free(%28) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc224)
    } loc(#loc296)
    cir.return loc(#loc158)
  } loc(#loc283)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc7 = loc("/usr/include/stdlib.h":687:1)
#loc8 = loc("/usr/include/stdlib.h":687:32)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":30:1)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":55:1)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":32:5)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":32:12)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":33:12)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":33:5)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":34:5)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":40:5)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":34:8)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":35:5)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":37:24)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":37:31)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":37:34)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":37:45)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":37:46)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":37:9)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":38:9)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":38:37)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":38:13)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":38:21)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":38:27)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":38:28)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":38:34)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":38:33)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":39:19)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":39:9)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":39:14)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":39:15)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":41:5)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":54:5)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":42:9)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":42:16)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":43:9)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":43:24)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":44:16)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":44:24)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":44:29)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":44:33)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":44:9)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":44:34)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":45:25)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":45:16)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":45:20)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":45:9)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":47:9)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":50:9)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":47:18)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":47:14)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":47:21)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":47:25)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":47:23)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":48:9)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":49:30)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":49:23)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":49:13)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":49:18)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":49:19)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":49:31)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":47:31)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":47:30)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":51:23)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":51:9)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":51:14)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":51:18)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":51:19)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":52:19)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":52:9)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":53:9)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":53:14)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":122:1)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":126:1)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":124:5)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":124:14)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":125:5)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":125:14)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":69:19)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":62:1)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":92:1)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":64:5)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":64:12)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":65:12)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":65:5)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":66:5)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":77:5)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":66:8)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":67:5)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":70:5)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":72:5)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":69:9)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":74:24)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":74:31)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":74:35)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":74:46)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":74:47)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":74:9)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":75:9)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":75:37)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":75:13)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":75:21)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":75:27)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":75:28)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":75:34)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":75:33)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":76:19)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":76:9)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":76:14)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":76:15)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":78:5)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":91:5)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":79:9)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":79:16)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":80:9)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":80:24)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":81:16)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":81:24)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":81:29)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":81:33)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":81:9)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":81:34)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":82:25)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":82:16)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":82:20)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":82:9)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":84:9)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":87:9)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":84:18)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":84:14)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":84:21)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":84:25)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":84:23)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":85:9)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":86:30)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":86:23)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":86:13)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":86:18)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":86:19)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":86:31)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":84:31)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":84:30)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":88:23)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":88:9)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":88:14)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":88:18)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":88:19)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":89:19)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":89:9)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":90:9)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":90:14)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":95:1)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":120:1)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":97:5)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":97:12)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":98:12)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":98:5)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":99:5)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":105:5)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":99:8)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":100:5)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":102:24)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":102:31)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":102:35)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":102:46)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":102:47)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":102:9)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":103:9)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":103:37)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":103:13)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":103:21)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":103:27)
#loc178 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":103:28)
#loc179 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":103:34)
#loc180 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":103:33)
#loc181 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":104:19)
#loc182 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":104:9)
#loc183 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":104:14)
#loc184 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":104:15)
#loc185 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":106:5)
#loc186 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":119:5)
#loc187 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":107:9)
#loc188 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":107:16)
#loc189 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":108:9)
#loc190 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":108:24)
#loc191 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":109:16)
#loc192 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":109:24)
#loc193 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":109:29)
#loc194 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":109:33)
#loc195 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":109:9)
#loc196 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":109:34)
#loc197 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":110:25)
#loc198 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":110:16)
#loc199 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":110:20)
#loc200 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":110:9)
#loc201 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":112:9)
#loc202 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":115:9)
#loc203 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":112:18)
#loc204 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":112:14)
#loc205 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":112:21)
#loc206 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":112:25)
#loc207 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":112:23)
#loc208 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":113:9)
#loc209 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":114:30)
#loc210 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":114:23)
#loc211 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":114:13)
#loc212 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":114:18)
#loc213 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":114:19)
#loc214 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":114:31)
#loc215 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":112:31)
#loc216 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":112:30)
#loc217 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":116:23)
#loc218 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":116:9)
#loc219 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":116:14)
#loc220 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":116:18)
#loc221 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":116:19)
#loc222 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":117:19)
#loc223 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":117:9)
#loc224 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":118:9)
#loc225 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c":118:14)
#loc226 = loc(fused[#loc1, #loc2])
#loc227 = loc(fused[#loc3, #loc4])
#loc228 = loc(fused[#loc5, #loc6])
#loc229 = loc(fused[#loc7, #loc8])
#loc230 = loc(fused[#loc9, #loc10])
#loc231 = loc(fused[#loc11, #loc12])
#loc232 = loc(fused[#loc14, #loc13])
#loc233 = loc(fused[#loc15, #loc16])
#loc234 = loc(fused[#loc18, #loc16])
#loc235 = loc(fused[#loc21, #loc22])
#loc236 = loc(fused[#loc20, #loc22])
#loc237 = loc(fused[#loc19, #loc23])
#loc238 = loc(fused[#loc24, #loc23])
#loc239 = loc(fused[#loc25, #loc26])
#loc240 = loc(fused[#loc27, #loc28])
#loc241 = loc(fused[#loc29, #loc26])
#loc242 = loc(fused[#loc34, #loc33])
#loc243 = loc(fused[#loc37, #loc38])
#loc244 = loc(fused[#loc39, #loc40])
#loc245 = loc(fused[#loc41, #loc42])
#loc246 = loc(fused[#loc47, #loc48])
#loc247 = loc(fused[#loc52, #loc49])
#loc248 = loc(fused[#loc53, #loc54])
#loc249 = loc(fused[#loc56, #loc55])
#loc250 = loc(fused[#loc57, #loc58])
#loc251 = loc(fused[#loc60, #loc54])
#loc252 = loc(fused[#loc63, #loc66])
#loc253 = loc(fused[#loc68, #loc67])
#loc254 = loc(fused[#loc70, #loc69])
#loc255 = loc(fused[#loc78, #loc79])
#loc256 = loc(fused[#loc80, #loc81])
#loc257 = loc(fused[#loc82, #loc83])
#loc258 = loc(fused[#loc85, #loc86])
#loc259 = loc(fused[#loc87, #loc88])
#loc260 = loc(fused[#loc90, #loc89])
#loc261 = loc(fused[#loc91, #loc92])
#loc262 = loc(fused[#loc94, #loc95, #loc96, #loc92])
#loc263 = loc(fused[#loc100, #loc101])
#loc264 = loc(fused[#loc99, #loc101])
#loc265 = loc(fused[#loc98, #loc102])
#loc266 = loc(fused[#loc103, #loc102])
#loc267 = loc(fused[#loc104, #loc105])
#loc268 = loc(fused[#loc106, #loc107])
#loc269 = loc(fused[#loc108, #loc105])
#loc270 = loc(fused[#loc113, #loc112])
#loc271 = loc(fused[#loc116, #loc117])
#loc272 = loc(fused[#loc118, #loc119])
#loc273 = loc(fused[#loc120, #loc121])
#loc274 = loc(fused[#loc126, #loc127])
#loc275 = loc(fused[#loc131, #loc128])
#loc276 = loc(fused[#loc132, #loc133])
#loc277 = loc(fused[#loc135, #loc134])
#loc278 = loc(fused[#loc136, #loc137])
#loc279 = loc(fused[#loc139, #loc133])
#loc280 = loc(fused[#loc142, #loc145])
#loc281 = loc(fused[#loc147, #loc146])
#loc282 = loc(fused[#loc149, #loc148])
#loc283 = loc(fused[#loc157, #loc158])
#loc284 = loc(fused[#loc159, #loc160])
#loc285 = loc(fused[#loc162, #loc161])
#loc286 = loc(fused[#loc163, #loc164])
#loc287 = loc(fused[#loc166, #loc164])
#loc288 = loc(fused[#loc169, #loc170])
#loc289 = loc(fused[#loc168, #loc170])
#loc290 = loc(fused[#loc167, #loc171])
#loc291 = loc(fused[#loc172, #loc171])
#loc292 = loc(fused[#loc173, #loc174])
#loc293 = loc(fused[#loc175, #loc176])
#loc294 = loc(fused[#loc177, #loc174])
#loc295 = loc(fused[#loc182, #loc181])
#loc296 = loc(fused[#loc185, #loc186])
#loc297 = loc(fused[#loc187, #loc188])
#loc298 = loc(fused[#loc189, #loc190])
#loc299 = loc(fused[#loc195, #loc196])
#loc300 = loc(fused[#loc200, #loc197])
#loc301 = loc(fused[#loc201, #loc202])
#loc302 = loc(fused[#loc204, #loc203])
#loc303 = loc(fused[#loc205, #loc206])
#loc304 = loc(fused[#loc208, #loc202])
#loc305 = loc(fused[#loc211, #loc214])
#loc306 = loc(fused[#loc216, #loc215])
#loc307 = loc(fused[#loc218, #loc217])
