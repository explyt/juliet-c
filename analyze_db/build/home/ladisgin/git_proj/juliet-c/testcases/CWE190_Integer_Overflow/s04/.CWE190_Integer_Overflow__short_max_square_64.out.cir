!s16i = !cir.int<s, 16>
!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc5 = loc("CWE190_Integer_Overflow__short_max_square_64b.c":24:60)
#loc6 = loc("CWE190_Integer_Overflow__short_max_square_64b.c":24:67)
#loc23 = loc("CWE190_Integer_Overflow__short_max_square_64b.c":42:64)
#loc24 = loc("CWE190_Integer_Overflow__short_max_square_64b.c":42:71)
#loc45 = loc("CWE190_Integer_Overflow__short_max_square_64b.c":56:64)
#loc46 = loc("CWE190_Integer_Overflow__short_max_square_64b.c":56:71)
#loc72 = loc(fused[#loc5, #loc6])
#loc78 = loc(fused[#loc23, #loc24])
#loc85 = loc(fused[#loc45, #loc46])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_max_square_64b.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i32 = dense<32> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @printIntLine(!s32i) loc(#loc70)
  cir.func @CWE190_Integer_Overflow__short_max_square_64b_badSink(%arg0: !cir.ptr<!void> loc(fused[#loc5, #loc6])) extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dataVoidPtr", init] {alignment = 8 : i64} loc(#loc72)
    %1 = cir.alloca !cir.ptr<!s16i>, !cir.ptr<!cir.ptr<!s16i>>, ["dataPtr", init] {alignment = 8 : i64} loc(#loc73)
    %2 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data", init] {alignment = 2 : i64} loc(#loc74)
    cir.store %arg0, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc11)
    %3 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc8)
    %4 = cir.cast(bitcast, %3 : !cir.ptr<!void>), !cir.ptr<!s16i> loc(#loc8)
    cir.store %4, %1 : !cir.ptr<!s16i>, !cir.ptr<!cir.ptr<!s16i>> loc(#loc73)
    %5 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s16i>>, !cir.ptr<!s16i> loc(#loc12)
    %6 = cir.load %5 : !cir.ptr<!s16i>, !s16i loc(#loc13)
    cir.store %6, %2 : !s16i, !cir.ptr<!s16i> loc(#loc74)
    cir.scope {
      %7 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc76)
      %8 = cir.load %2 : !cir.ptr<!s16i>, !s16i loc(#loc18)
      %9 = cir.cast(integral, %8 : !s16i), !s32i loc(#loc18)
      %10 = cir.load %2 : !cir.ptr<!s16i>, !s16i loc(#loc17)
      %11 = cir.cast(integral, %10 : !s16i), !s32i loc(#loc17)
      %12 = cir.binop(mul, %9, %11) nsw : !s32i loc(#loc18)
      %13 = cir.cast(integral, %12 : !s32i), !s16i loc(#loc18)
      cir.store %13, %7 : !s16i, !cir.ptr<!s16i> loc(#loc76)
      %14 = cir.load %7 : !cir.ptr<!s16i>, !s16i loc(#loc19)
      %15 = cir.cast(integral, %14 : !s16i), !s32i loc(#loc19)
      cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc20)
    } loc(#loc75)
    cir.return loc(#loc4)
  } loc(#loc71)
  cir.func @CWE190_Integer_Overflow__short_max_square_64b_goodG2BSink(%arg0: !cir.ptr<!void> loc(fused[#loc23, #loc24])) extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dataVoidPtr", init] {alignment = 8 : i64} loc(#loc78)
    %1 = cir.alloca !cir.ptr<!s16i>, !cir.ptr<!cir.ptr<!s16i>>, ["dataPtr", init] {alignment = 8 : i64} loc(#loc79)
    %2 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data", init] {alignment = 2 : i64} loc(#loc80)
    cir.store %arg0, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc29)
    %3 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc26)
    %4 = cir.cast(bitcast, %3 : !cir.ptr<!void>), !cir.ptr<!s16i> loc(#loc26)
    cir.store %4, %1 : !cir.ptr<!s16i>, !cir.ptr<!cir.ptr<!s16i>> loc(#loc79)
    %5 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s16i>>, !cir.ptr<!s16i> loc(#loc30)
    %6 = cir.load %5 : !cir.ptr<!s16i>, !s16i loc(#loc31)
    cir.store %6, %2 : !s16i, !cir.ptr<!s16i> loc(#loc80)
    cir.scope {
      %7 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc82)
      %8 = cir.load %2 : !cir.ptr<!s16i>, !s16i loc(#loc36)
      %9 = cir.cast(integral, %8 : !s16i), !s32i loc(#loc36)
      %10 = cir.load %2 : !cir.ptr<!s16i>, !s16i loc(#loc35)
      %11 = cir.cast(integral, %10 : !s16i), !s32i loc(#loc35)
      %12 = cir.binop(mul, %9, %11) nsw : !s32i loc(#loc36)
      %13 = cir.cast(integral, %12 : !s32i), !s16i loc(#loc36)
      cir.store %13, %7 : !s16i, !cir.ptr<!s16i> loc(#loc82)
      %14 = cir.load %7 : !cir.ptr<!s16i>, !s16i loc(#loc37)
      %15 = cir.cast(integral, %14 : !s16i), !s32i loc(#loc37)
      cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc38)
    } loc(#loc81)
    cir.return loc(#loc22)
  } loc(#loc77)
  cir.func private @sqrt(!cir.double) -> !cir.double extra(#fn_attr1) loc(#loc39)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc83)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc42)
  cir.func @CWE190_Integer_Overflow__short_max_square_64b_goodB2GSink(%arg0: !cir.ptr<!void> loc(fused[#loc45, #loc46])) extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dataVoidPtr", init] {alignment = 8 : i64} loc(#loc85)
    %1 = cir.alloca !cir.ptr<!s16i>, !cir.ptr<!cir.ptr<!s16i>>, ["dataPtr", init] {alignment = 8 : i64} loc(#loc86)
    %2 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data", init] {alignment = 2 : i64} loc(#loc87)
    cir.store %arg0, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc51)
    %3 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc48)
    %4 = cir.cast(bitcast, %3 : !cir.ptr<!void>), !cir.ptr<!s16i> loc(#loc48)
    cir.store %4, %1 : !cir.ptr<!s16i>, !cir.ptr<!cir.ptr<!s16i>> loc(#loc86)
    %5 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s16i>>, !cir.ptr<!s16i> loc(#loc52)
    %6 = cir.load %5 : !cir.ptr<!s16i>, !s16i loc(#loc53)
    cir.store %6, %2 : !s16i, !cir.ptr<!s16i> loc(#loc87)
    cir.scope {
      %7 = cir.load %2 : !cir.ptr<!s16i>, !s16i loc(#loc56)
      %8 = cir.cast(integral, %7 : !s16i), !s64i loc(#loc56)
      %9 = cir.cast(integral, %8 : !s64i), !s32i loc(#loc56)
      %10 = cir.abs %9 poison : !s32i loc(#loc57)
      %11 = cir.cast(integral, %10 : !s32i), !s64i loc(#loc57)
      %12 = cir.get_global @sqrt : !cir.ptr<!cir.func<!cir.double (!cir.double)>> loc(#loc58)
      %13 = cir.const #cir.int<32767> : !s32i loc(#loc59)
      %14 = cir.cast(int_to_float, %13 : !s32i), !cir.double loc(#loc59)
      %15 = cir.call @sqrt(%14) : (!cir.double) -> !cir.double extra(#fn_attr1) loc(#loc58)
      %16 = cir.cast(float_to_int, %15 : !cir.double), !s64i loc(#loc58)
      %17 = cir.cmp(le, %11, %16) : !s64i, !cir.bool loc(#loc89)
      cir.if %17 {
        %18 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc91)
        %19 = cir.load %2 : !cir.ptr<!s16i>, !s16i loc(#loc66)
        %20 = cir.cast(integral, %19 : !s16i), !s32i loc(#loc66)
        %21 = cir.load %2 : !cir.ptr<!s16i>, !s16i loc(#loc65)
        %22 = cir.cast(integral, %21 : !s16i), !s32i loc(#loc65)
        %23 = cir.binop(mul, %20, %22) nsw : !s32i loc(#loc66)
        %24 = cir.cast(integral, %23 : !s32i), !s16i loc(#loc66)
        cir.store %24, %18 : !s16i, !cir.ptr<!s16i> loc(#loc91)
        %25 = cir.load %18 : !cir.ptr<!s16i>, !s16i loc(#loc67)
        %26 = cir.cast(integral, %25 : !s16i), !s32i loc(#loc67)
        cir.call @printIntLine(%26) : (!s32i) -> () loc(#loc68)
      } else {
        %18 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc42)
        %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc42)
        cir.call @printLine(%19) : (!cir.ptr<!s8i>) -> () loc(#loc69)
      } loc(#loc90)
    } loc(#loc88)
    cir.return loc(#loc44)
  } loc(#loc84)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_max_square_64b.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("CWE190_Integer_Overflow__short_max_square_64b.c":24:1)
#loc4 = loc("CWE190_Integer_Overflow__short_max_square_64b.c":35:1)
#loc7 = loc("CWE190_Integer_Overflow__short_max_square_64b.c":27:5)
#loc8 = loc("CWE190_Integer_Overflow__short_max_square_64b.c":27:32)
#loc9 = loc("CWE190_Integer_Overflow__short_max_square_64b.c":29:5)
#loc10 = loc("CWE190_Integer_Overflow__short_max_square_64b.c":29:27)
#loc11 = loc("CWE190_Integer_Overflow__short_max_square_64b.c":25:1)
#loc12 = loc("CWE190_Integer_Overflow__short_max_square_64b.c":29:20)
#loc13 = loc("CWE190_Integer_Overflow__short_max_square_64b.c":29:19)
#loc14 = loc("CWE190_Integer_Overflow__short_max_square_64b.c":30:5)
#loc15 = loc("CWE190_Integer_Overflow__short_max_square_64b.c":34:5)
#loc16 = loc("CWE190_Integer_Overflow__short_max_square_64b.c":32:9)
#loc17 = loc("CWE190_Integer_Overflow__short_max_square_64b.c":32:31)
#loc18 = loc("CWE190_Integer_Overflow__short_max_square_64b.c":32:24)
#loc19 = loc("CWE190_Integer_Overflow__short_max_square_64b.c":33:22)
#loc20 = loc("CWE190_Integer_Overflow__short_max_square_64b.c":33:9)
#loc21 = loc("CWE190_Integer_Overflow__short_max_square_64b.c":42:1)
#loc22 = loc("CWE190_Integer_Overflow__short_max_square_64b.c":53:1)
#loc25 = loc("CWE190_Integer_Overflow__short_max_square_64b.c":45:5)
#loc26 = loc("CWE190_Integer_Overflow__short_max_square_64b.c":45:32)
#loc27 = loc("CWE190_Integer_Overflow__short_max_square_64b.c":47:5)
#loc28 = loc("CWE190_Integer_Overflow__short_max_square_64b.c":47:27)
#loc29 = loc("CWE190_Integer_Overflow__short_max_square_64b.c":43:1)
#loc30 = loc("CWE190_Integer_Overflow__short_max_square_64b.c":47:20)
#loc31 = loc("CWE190_Integer_Overflow__short_max_square_64b.c":47:19)
#loc32 = loc("CWE190_Integer_Overflow__short_max_square_64b.c":48:5)
#loc33 = loc("CWE190_Integer_Overflow__short_max_square_64b.c":52:5)
#loc34 = loc("CWE190_Integer_Overflow__short_max_square_64b.c":50:9)
#loc35 = loc("CWE190_Integer_Overflow__short_max_square_64b.c":50:31)
#loc36 = loc("CWE190_Integer_Overflow__short_max_square_64b.c":50:24)
#loc37 = loc("CWE190_Integer_Overflow__short_max_square_64b.c":51:22)
#loc38 = loc("CWE190_Integer_Overflow__short_max_square_64b.c":51:9)
#loc39 = loc("/usr/include/bits/mathcalls.h":158:1)
#loc40 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc41 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc42 = loc("CWE190_Integer_Overflow__short_max_square_64b.c":70:19)
#loc43 = loc("CWE190_Integer_Overflow__short_max_square_64b.c":56:1)
#loc44 = loc("CWE190_Integer_Overflow__short_max_square_64b.c":72:1)
#loc47 = loc("CWE190_Integer_Overflow__short_max_square_64b.c":59:5)
#loc48 = loc("CWE190_Integer_Overflow__short_max_square_64b.c":59:32)
#loc49 = loc("CWE190_Integer_Overflow__short_max_square_64b.c":61:5)
#loc50 = loc("CWE190_Integer_Overflow__short_max_square_64b.c":61:27)
#loc51 = loc("CWE190_Integer_Overflow__short_max_square_64b.c":57:1)
#loc52 = loc("CWE190_Integer_Overflow__short_max_square_64b.c":61:20)
#loc53 = loc("CWE190_Integer_Overflow__short_max_square_64b.c":61:19)
#loc54 = loc("CWE190_Integer_Overflow__short_max_square_64b.c":63:5)
#loc55 = loc("CWE190_Integer_Overflow__short_max_square_64b.c":71:5)
#loc56 = loc("CWE190_Integer_Overflow__short_max_square_64b.c":63:19)
#loc57 = loc("CWE190_Integer_Overflow__short_max_square_64b.c":63:9)
#loc58 = loc("CWE190_Integer_Overflow__short_max_square_64b.c":63:34)
#loc59 = loc("CWE190_Integer_Overflow__short_max_square_64b.c":63:47)
#loc60 = loc("CWE190_Integer_Overflow__short_max_square_64b.c":63:55)
#loc61 = loc("CWE190_Integer_Overflow__short_max_square_64b.c":64:5)
#loc62 = loc("CWE190_Integer_Overflow__short_max_square_64b.c":67:5)
#loc63 = loc("CWE190_Integer_Overflow__short_max_square_64b.c":69:5)
#loc64 = loc("CWE190_Integer_Overflow__short_max_square_64b.c":65:9)
#loc65 = loc("CWE190_Integer_Overflow__short_max_square_64b.c":65:31)
#loc66 = loc("CWE190_Integer_Overflow__short_max_square_64b.c":65:24)
#loc67 = loc("CWE190_Integer_Overflow__short_max_square_64b.c":66:22)
#loc68 = loc("CWE190_Integer_Overflow__short_max_square_64b.c":66:9)
#loc69 = loc("CWE190_Integer_Overflow__short_max_square_64b.c":70:9)
#loc70 = loc(fused[#loc1, #loc2])
#loc71 = loc(fused[#loc3, #loc4])
#loc73 = loc(fused[#loc7, #loc8])
#loc74 = loc(fused[#loc9, #loc10])
#loc75 = loc(fused[#loc14, #loc15])
#loc76 = loc(fused[#loc16, #loc17])
#loc77 = loc(fused[#loc21, #loc22])
#loc79 = loc(fused[#loc25, #loc26])
#loc80 = loc(fused[#loc27, #loc28])
#loc81 = loc(fused[#loc32, #loc33])
#loc82 = loc(fused[#loc34, #loc35])
#loc83 = loc(fused[#loc40, #loc41])
#loc84 = loc(fused[#loc43, #loc44])
#loc86 = loc(fused[#loc47, #loc48])
#loc87 = loc(fused[#loc49, #loc50])
#loc88 = loc(fused[#loc54, #loc55])
#loc89 = loc(fused[#loc57, #loc60])
#loc90 = loc(fused[#loc61, #loc62, #loc63, #loc55])
#loc91 = loc(fused[#loc64, #loc65])
