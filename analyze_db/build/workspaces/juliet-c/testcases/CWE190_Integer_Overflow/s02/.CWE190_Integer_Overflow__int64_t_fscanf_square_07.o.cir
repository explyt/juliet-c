!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.record<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.record<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.record<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
!ty__IO_FILE = !cir.record<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int64_t_fscanf_square_07.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.global "private" internal dsolocal @staticFive = #cir.int<5> : !s32i {alignment = 4 : i64} loc(#loc183)
  cir.func private @__isoc99_fscanf(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i loc(#loc184)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc185)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"%ld\00" : !cir.array<!s8i x 4>> : !cir.array<!s8i x 4> {alignment = 1 : i64} loc(#loc186)
  cir.func private @printLongLongLine(!s64i) loc(#loc187)
  cir.func no_proto @CWE190_Integer_Overflow__int64_t_fscanf_square_07_bad() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc189)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc15)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc190)
    cir.scope {
      %2 = cir.get_global @staticFive : !cir.ptr<!s32i> loc(#loc183)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc19)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc20)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !cir.bool loc(#loc192)
      cir.if %5 {
        %6 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc22)
        %7 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc185)
        %8 = cir.load %7 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc23)
        %9 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc186)
        %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc186)
        %11 = cir.call @__isoc99_fscanf(%8, %10, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s64i>) -> !s32i loc(#loc22)
      } loc(#loc193)
    } loc(#loc191)
    cir.scope {
      %2 = cir.get_global @staticFive : !cir.ptr<!s32i> loc(#loc183)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc26)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc27)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !cir.bool loc(#loc195)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc198)
          %7 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc33)
          %8 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc32)
          %9 = cir.binop(mul, %7, %8) nsw : !s64i loc(#loc33)
          cir.store %9, %6 : !s64i, !cir.ptr<!s64i> loc(#loc198)
          %10 = cir.load %6 : !cir.ptr<!s64i>, !s64i loc(#loc34)
          cir.call @printLongLongLine(%10) : (!s64i) -> () loc(#loc35)
        } loc(#loc197)
      } loc(#loc196)
    } loc(#loc194)
    cir.return loc(#loc12)
  } loc(#loc188)
  cir.func no_proto @CWE190_Integer_Overflow__int64_t_fscanf_square_07_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<()>> loc(#loc200)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc38)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<()>> loc(#loc201)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc40)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<()>> loc(#loc202)
    cir.call %2() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc42)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<()>> loc(#loc203)
    cir.call %3() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc44)
    cir.return loc(#loc37)
  } loc(#loc199)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc204)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc48)
  cir.func private @imaxabs(!s64i) -> !s64i extra(#fn_attr1) loc(#loc205)
  cir.func private @sqrtl(!cir.long_double<!cir.f80>) -> !cir.long_double<!cir.f80> extra(#fn_attr1) loc(#loc51)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc52)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc207)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc57)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc208)
    cir.scope {
      %2 = cir.get_global @staticFive : !cir.ptr<!s32i> loc(#loc183)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc61)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc62)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !cir.bool loc(#loc210)
      cir.if %5 {
        %6 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc64)
        %7 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc185)
        %8 = cir.load %7 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc65)
        %9 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc212)
        %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc212)
        %11 = cir.call @__isoc99_fscanf(%8, %10, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s64i>) -> !s32i loc(#loc64)
      } loc(#loc211)
    } loc(#loc209)
    cir.scope {
      %2 = cir.get_global @staticFive : !cir.ptr<!s32i> loc(#loc183)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc70)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc71)
      %5 = cir.cmp(ne, %3, %4) : !s32i, !cir.bool loc(#loc214)
      cir.if %5 {
        %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc48)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc48)
        cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc75)
      } else {
        cir.scope {
          %6 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc78)
          %7 = cir.call @imaxabs(%6) : (!s64i) -> !s64i side_effect(const) extra(#fn_attr1) loc(#loc79)
          %8 = cir.cast(int_to_float, %7 : !s64i), !cir.long_double<!cir.f80> loc(#loc79)
          %9 = cir.get_global @sqrtl : !cir.ptr<!cir.func<(!cir.long_double<!cir.f80>) -> !cir.long_double<!cir.f80>>> loc(#loc80)
          %10 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc81)
          %11 = cir.cast(int_to_float, %10 : !s64i), !cir.long_double<!cir.f80> loc(#loc81)
          %12 = cir.call @sqrtl(%11) : (!cir.long_double<!cir.f80>) -> !cir.long_double<!cir.f80> extra(#fn_attr1) loc(#loc80)
          %13 = cir.cmp(le, %8, %12) : !cir.long_double<!cir.f80>, !cir.bool loc(#loc217)
          cir.if %13 {
            %14 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc219)
            %15 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc88)
            %16 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc87)
            %17 = cir.binop(mul, %15, %16) nsw : !s64i loc(#loc88)
            cir.store %17, %14 : !s64i, !cir.ptr<!s64i> loc(#loc219)
            %18 = cir.load %14 : !cir.ptr<!s64i>, !s64i loc(#loc89)
            cir.call @printLongLongLine(%18) : (!s64i) -> () loc(#loc90)
          } else {
            %14 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc52)
            %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc52)
            cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc91)
          } loc(#loc218)
        } loc(#loc216)
      } loc(#loc215)
    } loc(#loc213)
    cir.return loc(#loc54)
  } loc(#loc206)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc221)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc96)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc222)
    cir.scope {
      %2 = cir.get_global @staticFive : !cir.ptr<!s32i> loc(#loc183)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc100)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc101)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !cir.bool loc(#loc224)
      cir.if %5 {
        %6 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc103)
        %7 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc185)
        %8 = cir.load %7 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc104)
        %9 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc226)
        %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc226)
        %11 = cir.call @__isoc99_fscanf(%8, %10, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s64i>) -> !s32i loc(#loc103)
      } loc(#loc225)
    } loc(#loc223)
    cir.scope {
      %2 = cir.get_global @staticFive : !cir.ptr<!s32i> loc(#loc183)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc109)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc110)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !cir.bool loc(#loc228)
      cir.if %5 {
        cir.scope {
          %6 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc114)
          %7 = cir.call @imaxabs(%6) : (!s64i) -> !s64i side_effect(const) extra(#fn_attr1) loc(#loc115)
          %8 = cir.cast(int_to_float, %7 : !s64i), !cir.long_double<!cir.f80> loc(#loc115)
          %9 = cir.get_global @sqrtl : !cir.ptr<!cir.func<(!cir.long_double<!cir.f80>) -> !cir.long_double<!cir.f80>>> loc(#loc116)
          %10 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc117)
          %11 = cir.cast(int_to_float, %10 : !s64i), !cir.long_double<!cir.f80> loc(#loc117)
          %12 = cir.call @sqrtl(%11) : (!cir.long_double<!cir.f80>) -> !cir.long_double<!cir.f80> extra(#fn_attr1) loc(#loc116)
          %13 = cir.cmp(le, %8, %12) : !cir.long_double<!cir.f80>, !cir.bool loc(#loc231)
          cir.if %13 {
            %14 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc233)
            %15 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc124)
            %16 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc123)
            %17 = cir.binop(mul, %15, %16) nsw : !s64i loc(#loc124)
            cir.store %17, %14 : !s64i, !cir.ptr<!s64i> loc(#loc233)
            %18 = cir.load %14 : !cir.ptr<!s64i>, !s64i loc(#loc125)
            cir.call @printLongLongLine(%18) : (!s64i) -> () loc(#loc126)
          } else {
            %14 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc127)
            %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc127)
            cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc128)
          } loc(#loc232)
        } loc(#loc230)
      } loc(#loc229)
    } loc(#loc227)
    cir.return loc(#loc93)
  } loc(#loc220)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc235)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc133)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc236)
    cir.scope {
      %2 = cir.get_global @staticFive : !cir.ptr<!s32i> loc(#loc183)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc137)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc138)
      %5 = cir.cmp(ne, %3, %4) : !s32i, !cir.bool loc(#loc238)
      cir.if %5 {
        %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc142)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc142)
        cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc143)
      } else {
        %6 = cir.const #cir.int<2> : !s32i loc(#loc144)
        %7 = cir.cast(integral, %6 : !s32i), !s64i loc(#loc144)
        cir.store %7, %0 : !s64i, !cir.ptr<!s64i> loc(#loc240)
      } loc(#loc239)
    } loc(#loc237)
    cir.scope {
      %2 = cir.get_global @staticFive : !cir.ptr<!s32i> loc(#loc183)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc148)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc149)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !cir.bool loc(#loc242)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc245)
          %7 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc155)
          %8 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc154)
          %9 = cir.binop(mul, %7, %8) nsw : !s64i loc(#loc155)
          cir.store %9, %6 : !s64i, !cir.ptr<!s64i> loc(#loc245)
          %10 = cir.load %6 : !cir.ptr<!s64i>, !s64i loc(#loc156)
          cir.call @printLongLongLine(%10) : (!s64i) -> () loc(#loc157)
        } loc(#loc244)
      } loc(#loc243)
    } loc(#loc241)
    cir.return loc(#loc130)
  } loc(#loc234)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc247)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc162)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc248)
    cir.scope {
      %2 = cir.get_global @staticFive : !cir.ptr<!s32i> loc(#loc183)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc166)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc167)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !cir.bool loc(#loc250)
      cir.if %5 {
        %6 = cir.const #cir.int<2> : !s32i loc(#loc169)
        %7 = cir.cast(integral, %6 : !s32i), !s64i loc(#loc169)
        cir.store %7, %0 : !s64i, !cir.ptr<!s64i> loc(#loc252)
      } loc(#loc251)
    } loc(#loc249)
    cir.scope {
      %2 = cir.get_global @staticFive : !cir.ptr<!s32i> loc(#loc183)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc173)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc174)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !cir.bool loc(#loc254)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc257)
          %7 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc180)
          %8 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc179)
          %9 = cir.binop(mul, %7, %8) nsw : !s64i loc(#loc180)
          cir.store %9, %6 : !s64i, !cir.ptr<!s64i> loc(#loc257)
          %10 = cir.load %6 : !cir.ptr<!s64i>, !s64i loc(#loc181)
          cir.call @printLongLongLine(%10) : (!s64i) -> () loc(#loc182)
        } loc(#loc256)
      } loc(#loc255)
    } loc(#loc253)
    cir.return loc(#loc159)
  } loc(#loc246)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int64_t_fscanf_square_07.c":0:0)
#loc1 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_07.c":26:1)
#loc2 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_07.c":26:25)
#loc3 = loc("/usr/include/stdio.h":463:1)
#loc4 = loc("/usr/include/stdio.h":465:33)
#loc5 = loc("/usr/include/stdio.h":149:1)
#loc6 = loc("/usr/include/stdio.h":149:14)
#loc7 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_07.c":37:24)
#loc8 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_07.c":37:28)
#loc9 = loc("../../../testcasesupport/std_testcase_io.h":26:1)
#loc10 = loc("../../../testcasesupport/std_testcase_io.h":26:49)
#loc11 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_07.c":30:1)
#loc12 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_07.c":47:1)
#loc13 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_07.c":32:5)
#loc14 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_07.c":32:13)
#loc15 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_07.c":33:12)
#loc16 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_07.c":33:5)
#loc17 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_07.c":34:5)
#loc18 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_07.c":38:5)
#loc19 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_07.c":34:8)
#loc20 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_07.c":34:20)
#loc21 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_07.c":35:5)
#loc22 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_07.c":37:9)
#loc23 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_07.c":37:17)
#loc24 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_07.c":39:5)
#loc25 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_07.c":46:5)
#loc26 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_07.c":39:8)
#loc27 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_07.c":39:20)
#loc28 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_07.c":40:5)
#loc29 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_07.c":41:9)
#loc30 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_07.c":45:9)
#loc31 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_07.c":43:13)
#loc32 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_07.c":43:37)
#loc33 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_07.c":43:30)
#loc34 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_07.c":44:31)
#loc35 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_07.c":44:13)
#loc36 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_07.c":153:1)
#loc37 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_07.c":159:1)
#loc38 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_07.c":155:5)
#loc39 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_07.c":155:14)
#loc40 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_07.c":156:5)
#loc41 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_07.c":156:14)
#loc42 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_07.c":157:5)
#loc43 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_07.c":157:14)
#loc44 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_07.c":158:5)
#loc45 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_07.c":158:14)
#loc46 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc47 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc48 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_07.c":66:19)
#loc49 = loc("/usr/include/inttypes.h":351:1)
#loc50 = loc("/usr/include/inttypes.h":351:74)
#loc51 = loc("/usr/include/x86_64-linux-gnu/bits/mathcalls.h":143:1)
#loc52 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_07.c":78:23)
#loc53 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_07.c":54:1)
#loc54 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_07.c":81:1)
#loc55 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_07.c":56:5)
#loc56 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_07.c":56:13)
#loc57 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_07.c":57:12)
#loc58 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_07.c":57:5)
#loc59 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_07.c":58:5)
#loc60 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_07.c":62:5)
#loc61 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_07.c":58:8)
#loc62 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_07.c":58:20)
#loc63 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_07.c":59:5)
#loc64 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_07.c":61:9)
#loc65 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_07.c":61:17)
#loc66 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_07.c":61:24)
#loc67 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_07.c":61:28)
#loc68 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_07.c":63:5)
#loc69 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_07.c":80:5)
#loc70 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_07.c":63:8)
#loc71 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_07.c":63:20)
#loc72 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_07.c":64:5)
#loc73 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_07.c":67:5)
#loc74 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_07.c":69:5)
#loc75 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_07.c":66:9)
#loc76 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_07.c":71:9)
#loc77 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_07.c":79:9)
#loc78 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_07.c":71:31)
#loc79 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_07.c":71:13)
#loc80 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_07.c":71:40)
#loc81 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_07.c":71:46)
#loc82 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_07.c":71:55)
#loc83 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_07.c":72:9)
#loc84 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_07.c":75:9)
#loc85 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_07.c":77:9)
#loc86 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_07.c":73:13)
#loc87 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_07.c":73:37)
#loc88 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_07.c":73:30)
#loc89 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_07.c":74:31)
#loc90 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_07.c":74:13)
#loc91 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_07.c":78:13)
#loc92 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_07.c":84:1)
#loc93 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_07.c":106:1)
#loc94 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_07.c":86:5)
#loc95 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_07.c":86:13)
#loc96 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_07.c":87:12)
#loc97 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_07.c":87:5)
#loc98 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_07.c":88:5)
#loc99 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_07.c":92:5)
#loc100 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_07.c":88:8)
#loc101 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_07.c":88:20)
#loc102 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_07.c":89:5)
#loc103 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_07.c":91:9)
#loc104 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_07.c":91:17)
#loc105 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_07.c":91:24)
#loc106 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_07.c":91:28)
#loc107 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_07.c":93:5)
#loc108 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_07.c":105:5)
#loc109 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_07.c":93:8)
#loc110 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_07.c":93:20)
#loc111 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_07.c":94:5)
#loc112 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_07.c":96:9)
#loc113 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_07.c":104:9)
#loc114 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_07.c":96:31)
#loc115 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_07.c":96:13)
#loc116 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_07.c":96:40)
#loc117 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_07.c":96:46)
#loc118 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_07.c":96:55)
#loc119 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_07.c":97:9)
#loc120 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_07.c":100:9)
#loc121 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_07.c":102:9)
#loc122 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_07.c":98:13)
#loc123 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_07.c":98:37)
#loc124 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_07.c":98:30)
#loc125 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_07.c":99:31)
#loc126 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_07.c":99:13)
#loc127 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_07.c":103:23)
#loc128 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_07.c":103:13)
#loc129 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_07.c":109:1)
#loc130 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_07.c":131:1)
#loc131 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_07.c":111:5)
#loc132 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_07.c":111:13)
#loc133 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_07.c":112:12)
#loc134 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_07.c":112:5)
#loc135 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_07.c":113:5)
#loc136 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_07.c":122:5)
#loc137 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_07.c":113:8)
#loc138 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_07.c":113:20)
#loc139 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_07.c":114:5)
#loc140 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_07.c":117:5)
#loc141 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_07.c":119:5)
#loc142 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_07.c":116:19)
#loc143 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_07.c":116:9)
#loc144 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_07.c":121:16)
#loc145 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_07.c":121:9)
#loc146 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_07.c":123:5)
#loc147 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_07.c":130:5)
#loc148 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_07.c":123:8)
#loc149 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_07.c":123:20)
#loc150 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_07.c":124:5)
#loc151 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_07.c":125:9)
#loc152 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_07.c":129:9)
#loc153 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_07.c":127:13)
#loc154 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_07.c":127:37)
#loc155 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_07.c":127:30)
#loc156 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_07.c":128:31)
#loc157 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_07.c":128:13)
#loc158 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_07.c":134:1)
#loc159 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_07.c":151:1)
#loc160 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_07.c":136:5)
#loc161 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_07.c":136:13)
#loc162 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_07.c":137:12)
#loc163 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_07.c":137:5)
#loc164 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_07.c":138:5)
#loc165 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_07.c":142:5)
#loc166 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_07.c":138:8)
#loc167 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_07.c":138:20)
#loc168 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_07.c":139:5)
#loc169 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_07.c":141:16)
#loc170 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_07.c":141:9)
#loc171 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_07.c":143:5)
#loc172 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_07.c":150:5)
#loc173 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_07.c":143:8)
#loc174 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_07.c":143:20)
#loc175 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_07.c":144:5)
#loc176 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_07.c":145:9)
#loc177 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_07.c":149:9)
#loc178 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_07.c":147:13)
#loc179 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_07.c":147:37)
#loc180 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_07.c":147:30)
#loc181 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_07.c":148:31)
#loc182 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_07.c":148:13)
#loc183 = loc(fused[#loc1, #loc2])
#loc184 = loc(fused[#loc3, #loc4])
#loc185 = loc(fused[#loc5, #loc6])
#loc186 = loc(fused[#loc7, #loc8])
#loc187 = loc(fused[#loc9, #loc10])
#loc188 = loc(fused[#loc11, #loc12])
#loc189 = loc(fused[#loc13, #loc14])
#loc190 = loc(fused[#loc16, #loc15])
#loc191 = loc(fused[#loc17, #loc18])
#loc192 = loc(fused[#loc19, #loc20])
#loc193 = loc(fused[#loc21, #loc18])
#loc194 = loc(fused[#loc24, #loc25])
#loc195 = loc(fused[#loc26, #loc27])
#loc196 = loc(fused[#loc28, #loc25])
#loc197 = loc(fused[#loc29, #loc30])
#loc198 = loc(fused[#loc31, #loc32])
#loc199 = loc(fused[#loc36, #loc37])
#loc200 = loc(fused[#loc38, #loc39])
#loc201 = loc(fused[#loc40, #loc41])
#loc202 = loc(fused[#loc42, #loc43])
#loc203 = loc(fused[#loc44, #loc45])
#loc204 = loc(fused[#loc46, #loc47])
#loc205 = loc(fused[#loc49, #loc50])
#loc206 = loc(fused[#loc53, #loc54])
#loc207 = loc(fused[#loc55, #loc56])
#loc208 = loc(fused[#loc58, #loc57])
#loc209 = loc(fused[#loc59, #loc60])
#loc210 = loc(fused[#loc61, #loc62])
#loc211 = loc(fused[#loc63, #loc60])
#loc212 = loc(fused[#loc66, #loc67])
#loc213 = loc(fused[#loc68, #loc69])
#loc214 = loc(fused[#loc70, #loc71])
#loc215 = loc(fused[#loc72, #loc73, #loc74, #loc69])
#loc216 = loc(fused[#loc76, #loc77])
#loc217 = loc(fused[#loc79, #loc82])
#loc218 = loc(fused[#loc83, #loc84, #loc85, #loc77])
#loc219 = loc(fused[#loc86, #loc87])
#loc220 = loc(fused[#loc92, #loc93])
#loc221 = loc(fused[#loc94, #loc95])
#loc222 = loc(fused[#loc97, #loc96])
#loc223 = loc(fused[#loc98, #loc99])
#loc224 = loc(fused[#loc100, #loc101])
#loc225 = loc(fused[#loc102, #loc99])
#loc226 = loc(fused[#loc105, #loc106])
#loc227 = loc(fused[#loc107, #loc108])
#loc228 = loc(fused[#loc109, #loc110])
#loc229 = loc(fused[#loc111, #loc108])
#loc230 = loc(fused[#loc112, #loc113])
#loc231 = loc(fused[#loc115, #loc118])
#loc232 = loc(fused[#loc119, #loc120, #loc121, #loc113])
#loc233 = loc(fused[#loc122, #loc123])
#loc234 = loc(fused[#loc129, #loc130])
#loc235 = loc(fused[#loc131, #loc132])
#loc236 = loc(fused[#loc134, #loc133])
#loc237 = loc(fused[#loc135, #loc136])
#loc238 = loc(fused[#loc137, #loc138])
#loc239 = loc(fused[#loc139, #loc140, #loc141, #loc136])
#loc240 = loc(fused[#loc145, #loc144])
#loc241 = loc(fused[#loc146, #loc147])
#loc242 = loc(fused[#loc148, #loc149])
#loc243 = loc(fused[#loc150, #loc147])
#loc244 = loc(fused[#loc151, #loc152])
#loc245 = loc(fused[#loc153, #loc154])
#loc246 = loc(fused[#loc158, #loc159])
#loc247 = loc(fused[#loc160, #loc161])
#loc248 = loc(fused[#loc163, #loc162])
#loc249 = loc(fused[#loc164, #loc165])
#loc250 = loc(fused[#loc166, #loc167])
#loc251 = loc(fused[#loc168, #loc165])
#loc252 = loc(fused[#loc170, #loc169])
#loc253 = loc(fused[#loc171, #loc172])
#loc254 = loc(fused[#loc173, #loc174])
#loc255 = loc(fused[#loc175, #loc172])
#loc256 = loc(fused[#loc176, #loc177])
#loc257 = loc(fused[#loc178, #loc179])
