!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc24 = loc("CWE190_Integer_Overflow__int_rand_add_17.c":31:16)
#loc61 = loc("CWE190_Integer_Overflow__int_rand_add_17.c":111:10)
#loc62 = loc("CWE190_Integer_Overflow__int_rand_add_17.c":111:14)
#loc63 = loc("CWE190_Integer_Overflow__int_rand_add_17.c":111:20)
#loc64 = loc("CWE190_Integer_Overflow__int_rand_add_17.c":111:32)
#loc99 = loc("CWE190_Integer_Overflow__int_rand_add_17.c":57:16)
#loc189 = loc(fused[#loc61, #loc62])
#loc190 = loc(fused[#loc63, #loc64])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__int_rand_add_17.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc162)
  cir.func private @printIntLine(!s32i) loc(#loc163)
  cir.func no_proto @CWE190_Integer_Overflow__int_rand_add_17_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc165)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc166)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["j"] {alignment = 4 : i64} loc(#loc167)
    %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc168)
    %4 = cir.const #cir.int<0> : !s32i loc(#loc14)
    cir.store %4, %3 : !s32i, !cir.ptr<!s32i> loc(#loc169)
    cir.br ^bb1 loc(#loc170)
  ^bb1:  // pred: ^bb0
    %5 = cir.const #cir.int<0> : !s32i loc(#loc18)
    cir.store %5, %1 : !s32i, !cir.ptr<!s32i> loc(#loc171)
    cir.br ^bb2 loc(#loc170)
  ^bb2:  // 2 preds: ^bb1, ^bb10
    %6 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc20)
    %7 = cir.const #cir.int<1> : !s32i loc(#loc21)
    %8 = cir.cmp(lt, %6, %7) : !s32i, !cir.bool loc(#loc172)
    cir.brcond %8 ^bb3, ^bb11 loc(#loc22)
  ^bb3:  // pred: ^bb2
    cir.br ^bb4 loc(#loc173)
  ^bb4:  // pred: ^bb3
    %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc24)
    %10 = cir.const #cir.int<1> : !s32i loc(#loc24)
    %11 = cir.binop(and, %9, %10) : !s32i loc(#loc24)
    %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc24)
    cir.brcond %12 ^bb5, ^bb6 loc(#loc24)
  ^bb5:  // pred: ^bb4
    %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc24)
    %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc24)
    %15 = cir.const #cir.int<30> : !s32i loc(#loc24)
    %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc24)
    %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc24)
    %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc24)
    %19 = cir.const #cir.int<15> : !s32i loc(#loc24)
    %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc24)
    %21 = cir.binop(xor, %16, %20) : !u32i loc(#loc24)
    %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc24)
    %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc24)
    %24 = cir.binop(xor, %21, %23) : !u32i loc(#loc24)
    cir.br ^bb7(%24 : !u32i) loc(#loc24)
  ^bb6:  // pred: ^bb4
    %25 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc24)
    %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc24)
    %27 = cir.const #cir.int<30> : !s32i loc(#loc24)
    %28 = cir.shift(left, %26 : !u32i, %27 : !s32i) -> !u32i loc(#loc24)
    %29 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc24)
    %30 = cir.cast(integral, %29 : !s32i), !u32i loc(#loc24)
    %31 = cir.const #cir.int<15> : !s32i loc(#loc24)
    %32 = cir.shift(left, %30 : !u32i, %31 : !s32i) -> !u32i loc(#loc24)
    %33 = cir.binop(xor, %28, %32) : !u32i loc(#loc24)
    %34 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc24)
    %35 = cir.cast(integral, %34 : !s32i), !u32i loc(#loc24)
    %36 = cir.binop(xor, %33, %35) : !u32i loc(#loc24)
    %37 = cir.unary(minus, %36) : !u32i, !u32i loc(#loc24)
    %38 = cir.const #cir.int<1> : !s32i loc(#loc24)
    %39 = cir.cast(integral, %38 : !s32i), !u32i loc(#loc24)
    %40 = cir.binop(sub, %37, %39) : !u32i loc(#loc24)
    cir.br ^bb7(%40 : !u32i) loc(#loc24)
  ^bb7(%41: !u32i loc("CWE190_Integer_Overflow__int_rand_add_17.c":31:16)):  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc24)
  ^bb8:  // pred: ^bb7
    %42 = cir.cast(integral, %41 : !u32i), !s32i loc(#loc24)
    cir.store %42, %3 : !s32i, !cir.ptr<!s32i> loc(#loc174)
    cir.br ^bb9 loc(#loc17)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc17)
  ^bb10:  // pred: ^bb9
    %43 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc26)
    %44 = cir.unary(inc, %43) : !s32i, !s32i loc(#loc27)
    cir.store %44, %1 : !s32i, !cir.ptr<!s32i> loc(#loc175)
    cir.br ^bb2 loc(#loc170)
  ^bb11:  // pred: ^bb2
    cir.br ^bb12 loc(#loc17)
  ^bb12:  // pred: ^bb11
    cir.br ^bb13 loc(#loc176)
  ^bb13:  // pred: ^bb12
    %45 = cir.const #cir.int<0> : !s32i loc(#loc30)
    cir.store %45, %2 : !s32i, !cir.ptr<!s32i> loc(#loc177)
    cir.br ^bb14 loc(#loc176)
  ^bb14:  // 2 preds: ^bb13, ^bb20
    %46 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc32)
    %47 = cir.const #cir.int<1> : !s32i loc(#loc33)
    %48 = cir.cmp(lt, %46, %47) : !s32i, !cir.bool loc(#loc178)
    cir.brcond %48 ^bb15, ^bb21 loc(#loc34)
  ^bb15:  // pred: ^bb14
    cir.br ^bb16 loc(#loc179)
  ^bb16:  // pred: ^bb15
    cir.br ^bb17 loc(#loc180)
  ^bb17:  // pred: ^bb16
    %49 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc38)
    %50 = cir.const #cir.int<1> : !s32i loc(#loc8)
    %51 = cir.binop(add, %49, %50) nsw : !s32i loc(#loc38)
    cir.store %51, %0 : !s32i, !cir.ptr<!s32i> loc(#loc165)
    %52 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc39)
    cir.call @printIntLine(%52) : (!s32i) -> () loc(#loc40)
    cir.br ^bb18 loc(#loc37)
  ^bb18:  // pred: ^bb17
    cir.br ^bb19 loc(#loc29)
  ^bb19:  // pred: ^bb18
    cir.br ^bb20 loc(#loc29)
  ^bb20:  // pred: ^bb19
    %53 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc41)
    %54 = cir.unary(inc, %53) : !s32i, !s32i loc(#loc42)
    cir.store %54, %2 : !s32i, !cir.ptr<!s32i> loc(#loc181)
    cir.br ^bb14 loc(#loc176)
  ^bb21:  // pred: ^bb14
    cir.br ^bb22 loc(#loc29)
  ^bb22:  // pred: ^bb21
    cir.return loc(#loc6)
  } loc(#loc164)
  cir.func no_proto @CWE190_Integer_Overflow__int_rand_add_17_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc183)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc45)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc184)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc47)
    cir.return loc(#loc44)
  } loc(#loc182)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc185)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc186)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc187)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc55)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc56)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc57)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc58)
  cir.func @main(%arg0: !s32i loc(fused[#loc61, #loc62]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc63, #loc64])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc189)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc190)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc60)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc65)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc65)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc66)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc67)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc67)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc68)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc55)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc55)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc69)
    %8 = cir.get_global @CWE190_Integer_Overflow__int_rand_add_17_good : !cir.ptr<!cir.func<!void ()>> loc(#loc191)
    cir.call @CWE190_Integer_Overflow__int_rand_add_17_good() : () -> () loc(#loc70)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc56)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc56)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc72)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc57)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc57)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc73)
    %13 = cir.get_global @CWE190_Integer_Overflow__int_rand_add_17_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc192)
    cir.call @CWE190_Integer_Overflow__int_rand_add_17_bad() : () -> () loc(#loc74)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc58)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc58)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc76)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc77)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc193)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc193)
    cir.return %17 : !s32i loc(#loc193)
  } loc(#loc188)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc79)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc195)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc196)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["k"] {alignment = 4 : i64} loc(#loc197)
    %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc198)
    %4 = cir.const #cir.int<0> : !s32i loc(#loc89)
    cir.store %4, %3 : !s32i, !cir.ptr<!s32i> loc(#loc199)
    cir.br ^bb1 loc(#loc200)
  ^bb1:  // pred: ^bb0
    %5 = cir.const #cir.int<0> : !s32i loc(#loc93)
    cir.store %5, %1 : !s32i, !cir.ptr<!s32i> loc(#loc201)
    cir.br ^bb2 loc(#loc200)
  ^bb2:  // 2 preds: ^bb1, ^bb10
    %6 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc95)
    %7 = cir.const #cir.int<1> : !s32i loc(#loc96)
    %8 = cir.cmp(lt, %6, %7) : !s32i, !cir.bool loc(#loc202)
    cir.brcond %8 ^bb3, ^bb11 loc(#loc97)
  ^bb3:  // pred: ^bb2
    cir.br ^bb4 loc(#loc203)
  ^bb4:  // pred: ^bb3
    %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc99)
    %10 = cir.const #cir.int<1> : !s32i loc(#loc99)
    %11 = cir.binop(and, %9, %10) : !s32i loc(#loc99)
    %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc99)
    cir.brcond %12 ^bb5, ^bb6 loc(#loc99)
  ^bb5:  // pred: ^bb4
    %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc99)
    %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc99)
    %15 = cir.const #cir.int<30> : !s32i loc(#loc99)
    %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc99)
    %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc99)
    %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc99)
    %19 = cir.const #cir.int<15> : !s32i loc(#loc99)
    %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc99)
    %21 = cir.binop(xor, %16, %20) : !u32i loc(#loc99)
    %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc99)
    %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc99)
    %24 = cir.binop(xor, %21, %23) : !u32i loc(#loc99)
    cir.br ^bb7(%24 : !u32i) loc(#loc99)
  ^bb6:  // pred: ^bb4
    %25 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc99)
    %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc99)
    %27 = cir.const #cir.int<30> : !s32i loc(#loc99)
    %28 = cir.shift(left, %26 : !u32i, %27 : !s32i) -> !u32i loc(#loc99)
    %29 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc99)
    %30 = cir.cast(integral, %29 : !s32i), !u32i loc(#loc99)
    %31 = cir.const #cir.int<15> : !s32i loc(#loc99)
    %32 = cir.shift(left, %30 : !u32i, %31 : !s32i) -> !u32i loc(#loc99)
    %33 = cir.binop(xor, %28, %32) : !u32i loc(#loc99)
    %34 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc99)
    %35 = cir.cast(integral, %34 : !s32i), !u32i loc(#loc99)
    %36 = cir.binop(xor, %33, %35) : !u32i loc(#loc99)
    %37 = cir.unary(minus, %36) : !u32i, !u32i loc(#loc99)
    %38 = cir.const #cir.int<1> : !s32i loc(#loc99)
    %39 = cir.cast(integral, %38 : !s32i), !u32i loc(#loc99)
    %40 = cir.binop(sub, %37, %39) : !u32i loc(#loc99)
    cir.br ^bb7(%40 : !u32i) loc(#loc99)
  ^bb7(%41: !u32i loc("CWE190_Integer_Overflow__int_rand_add_17.c":57:16)):  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc99)
  ^bb8:  // pred: ^bb7
    %42 = cir.cast(integral, %41 : !u32i), !s32i loc(#loc99)
    cir.store %42, %3 : !s32i, !cir.ptr<!s32i> loc(#loc204)
    cir.br ^bb9 loc(#loc92)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc92)
  ^bb10:  // pred: ^bb9
    %43 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc101)
    %44 = cir.unary(inc, %43) : !s32i, !s32i loc(#loc102)
    cir.store %44, %1 : !s32i, !cir.ptr<!s32i> loc(#loc205)
    cir.br ^bb2 loc(#loc200)
  ^bb11:  // pred: ^bb2
    cir.br ^bb12 loc(#loc92)
  ^bb12:  // pred: ^bb11
    cir.br ^bb13 loc(#loc206)
  ^bb13:  // pred: ^bb12
    %45 = cir.const #cir.int<0> : !s32i loc(#loc105)
    cir.store %45, %2 : !s32i, !cir.ptr<!s32i> loc(#loc207)
    cir.br ^bb14 loc(#loc206)
  ^bb14:  // 2 preds: ^bb13, ^bb23
    %46 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc107)
    %47 = cir.const #cir.int<1> : !s32i loc(#loc108)
    %48 = cir.cmp(lt, %46, %47) : !s32i, !cir.bool loc(#loc208)
    cir.brcond %48 ^bb15, ^bb24 loc(#loc109)
  ^bb15:  // pred: ^bb14
    cir.br ^bb16 loc(#loc209)
  ^bb16:  // pred: ^bb15
    cir.br ^bb17 loc(#loc210)
  ^bb17:  // pred: ^bb16
    %49 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc113)
    %50 = cir.const #cir.int<2147483647> : !s32i loc(#loc114)
    %51 = cir.cmp(lt, %49, %50) : !s32i, !cir.bool loc(#loc211)
    cir.brcond %51 ^bb18, ^bb19 loc(#loc212)
  ^bb18:  // pred: ^bb17
    %52 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc118)
    %53 = cir.const #cir.int<1> : !s32i loc(#loc83)
    %54 = cir.binop(add, %52, %53) nsw : !s32i loc(#loc118)
    cir.store %54, %0 : !s32i, !cir.ptr<!s32i> loc(#loc195)
    %55 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc119)
    cir.call @printIntLine(%55) : (!s32i) -> () loc(#loc120)
    cir.br ^bb20 loc(#loc116)
  ^bb19:  // pred: ^bb17
    %56 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc79)
    %57 = cir.cast(array_to_ptrdecay, %56 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc79)
    cir.call @printLine(%57) : (!cir.ptr<!s8i>) -> () loc(#loc121)
    cir.br ^bb20 loc(#loc112)
  ^bb20:  // 2 preds: ^bb18, ^bb19
    cir.br ^bb21 loc(#loc112)
  ^bb21:  // pred: ^bb20
    cir.br ^bb22 loc(#loc104)
  ^bb22:  // pred: ^bb21
    cir.br ^bb23 loc(#loc104)
  ^bb23:  // pred: ^bb22
    %58 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc122)
    %59 = cir.unary(inc, %58) : !s32i, !s32i loc(#loc123)
    cir.store %59, %2 : !s32i, !cir.ptr<!s32i> loc(#loc213)
    cir.br ^bb14 loc(#loc206)
  ^bb24:  // pred: ^bb14
    cir.br ^bb25 loc(#loc104)
  ^bb25:  // pred: ^bb24
    cir.return loc(#loc81)
  } loc(#loc194)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc215)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["h"] {alignment = 4 : i64} loc(#loc216)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["j"] {alignment = 4 : i64} loc(#loc217)
    %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc218)
    %4 = cir.const #cir.int<0> : !s32i loc(#loc133)
    cir.store %4, %3 : !s32i, !cir.ptr<!s32i> loc(#loc219)
    cir.br ^bb1 loc(#loc220)
  ^bb1:  // pred: ^bb0
    %5 = cir.const #cir.int<0> : !s32i loc(#loc137)
    cir.store %5, %1 : !s32i, !cir.ptr<!s32i> loc(#loc221)
    cir.br ^bb2 loc(#loc220)
  ^bb2:  // 2 preds: ^bb1, ^bb6
    %6 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc139)
    %7 = cir.const #cir.int<1> : !s32i loc(#loc140)
    %8 = cir.cmp(lt, %6, %7) : !s32i, !cir.bool loc(#loc222)
    cir.brcond %8 ^bb3, ^bb7 loc(#loc141)
  ^bb3:  // pred: ^bb2
    cir.br ^bb4 loc(#loc223)
  ^bb4:  // pred: ^bb3
    %9 = cir.const #cir.int<2> : !s32i loc(#loc143)
    cir.store %9, %3 : !s32i, !cir.ptr<!s32i> loc(#loc224)
    cir.br ^bb5 loc(#loc136)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc136)
  ^bb6:  // pred: ^bb5
    %10 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc145)
    %11 = cir.unary(inc, %10) : !s32i, !s32i loc(#loc146)
    cir.store %11, %1 : !s32i, !cir.ptr<!s32i> loc(#loc225)
    cir.br ^bb2 loc(#loc220)
  ^bb7:  // pred: ^bb2
    cir.br ^bb8 loc(#loc136)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc226)
  ^bb9:  // pred: ^bb8
    %12 = cir.const #cir.int<0> : !s32i loc(#loc149)
    cir.store %12, %2 : !s32i, !cir.ptr<!s32i> loc(#loc227)
    cir.br ^bb10 loc(#loc226)
  ^bb10:  // 2 preds: ^bb9, ^bb16
    %13 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc151)
    %14 = cir.const #cir.int<1> : !s32i loc(#loc152)
    %15 = cir.cmp(lt, %13, %14) : !s32i, !cir.bool loc(#loc228)
    cir.brcond %15 ^bb11, ^bb17 loc(#loc153)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc229)
  ^bb12:  // pred: ^bb11
    cir.br ^bb13 loc(#loc230)
  ^bb13:  // pred: ^bb12
    %16 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc157)
    %17 = cir.const #cir.int<1> : !s32i loc(#loc127)
    %18 = cir.binop(add, %16, %17) nsw : !s32i loc(#loc157)
    cir.store %18, %0 : !s32i, !cir.ptr<!s32i> loc(#loc215)
    %19 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc158)
    cir.call @printIntLine(%19) : (!s32i) -> () loc(#loc159)
    cir.br ^bb14 loc(#loc156)
  ^bb14:  // pred: ^bb13
    cir.br ^bb15 loc(#loc148)
  ^bb15:  // pred: ^bb14
    cir.br ^bb16 loc(#loc148)
  ^bb16:  // pred: ^bb15
    %20 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc160)
    %21 = cir.unary(inc, %20) : !s32i, !s32i loc(#loc161)
    cir.store %21, %2 : !s32i, !cir.ptr<!s32i> loc(#loc231)
    cir.br ^bb10 loc(#loc226)
  ^bb17:  // pred: ^bb10
    cir.br ^bb18 loc(#loc148)
  ^bb18:  // pred: ^bb17
    cir.return loc(#loc125)
  } loc(#loc214)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__int_rand_add_17.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc5 = loc("CWE190_Integer_Overflow__int_rand_add_17.c":22:1)
#loc6 = loc("CWE190_Integer_Overflow__int_rand_add_17.c":41:1)
#loc7 = loc("CWE190_Integer_Overflow__int_rand_add_17.c":37:13)
#loc8 = loc("CWE190_Integer_Overflow__int_rand_add_17.c":37:33)
#loc9 = loc("CWE190_Integer_Overflow__int_rand_add_17.c":24:5)
#loc10 = loc("CWE190_Integer_Overflow__int_rand_add_17.c":24:9)
#loc11 = loc("CWE190_Integer_Overflow__int_rand_add_17.c":24:11)
#loc12 = loc("CWE190_Integer_Overflow__int_rand_add_17.c":25:5)
#loc13 = loc("CWE190_Integer_Overflow__int_rand_add_17.c":25:9)
#loc14 = loc("CWE190_Integer_Overflow__int_rand_add_17.c":27:12)
#loc15 = loc("CWE190_Integer_Overflow__int_rand_add_17.c":27:5)
#loc16 = loc("CWE190_Integer_Overflow__int_rand_add_17.c":28:5)
#loc17 = loc("CWE190_Integer_Overflow__int_rand_add_17.c":32:5)
#loc18 = loc("CWE190_Integer_Overflow__int_rand_add_17.c":28:13)
#loc19 = loc("CWE190_Integer_Overflow__int_rand_add_17.c":28:9)
#loc20 = loc("CWE190_Integer_Overflow__int_rand_add_17.c":28:16)
#loc21 = loc("CWE190_Integer_Overflow__int_rand_add_17.c":28:20)
#loc22 = loc("CWE190_Integer_Overflow__int_rand_add_17.c":28:18)
#loc23 = loc("CWE190_Integer_Overflow__int_rand_add_17.c":29:5)
#loc25 = loc("CWE190_Integer_Overflow__int_rand_add_17.c":31:9)
#loc26 = loc("CWE190_Integer_Overflow__int_rand_add_17.c":28:24)
#loc27 = loc("CWE190_Integer_Overflow__int_rand_add_17.c":28:23)
#loc28 = loc("CWE190_Integer_Overflow__int_rand_add_17.c":33:5)
#loc29 = loc("CWE190_Integer_Overflow__int_rand_add_17.c":40:5)
#loc30 = loc("CWE190_Integer_Overflow__int_rand_add_17.c":33:13)
#loc31 = loc("CWE190_Integer_Overflow__int_rand_add_17.c":33:9)
#loc32 = loc("CWE190_Integer_Overflow__int_rand_add_17.c":33:16)
#loc33 = loc("CWE190_Integer_Overflow__int_rand_add_17.c":33:20)
#loc34 = loc("CWE190_Integer_Overflow__int_rand_add_17.c":33:18)
#loc35 = loc("CWE190_Integer_Overflow__int_rand_add_17.c":34:5)
#loc36 = loc("CWE190_Integer_Overflow__int_rand_add_17.c":35:9)
#loc37 = loc("CWE190_Integer_Overflow__int_rand_add_17.c":39:9)
#loc38 = loc("CWE190_Integer_Overflow__int_rand_add_17.c":37:26)
#loc39 = loc("CWE190_Integer_Overflow__int_rand_add_17.c":38:26)
#loc40 = loc("CWE190_Integer_Overflow__int_rand_add_17.c":38:13)
#loc41 = loc("CWE190_Integer_Overflow__int_rand_add_17.c":33:24)
#loc42 = loc("CWE190_Integer_Overflow__int_rand_add_17.c":33:23)
#loc43 = loc("CWE190_Integer_Overflow__int_rand_add_17.c":96:1)
#loc44 = loc("CWE190_Integer_Overflow__int_rand_add_17.c":100:1)
#loc45 = loc("CWE190_Integer_Overflow__int_rand_add_17.c":98:5)
#loc46 = loc("CWE190_Integer_Overflow__int_rand_add_17.c":98:13)
#loc47 = loc("CWE190_Integer_Overflow__int_rand_add_17.c":99:5)
#loc48 = loc("CWE190_Integer_Overflow__int_rand_add_17.c":99:13)
#loc49 = loc("/usr/include/stdlib.h":575:1)
#loc50 = loc("/usr/include/stdlib.h":575:41)
#loc51 = loc("/usr/include/time.h":76:1)
#loc52 = loc("/usr/include/time.h":76:38)
#loc53 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc54 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc55 = loc("CWE190_Integer_Overflow__int_rand_add_17.c":116:15)
#loc56 = loc("CWE190_Integer_Overflow__int_rand_add_17.c":118:15)
#loc57 = loc("CWE190_Integer_Overflow__int_rand_add_17.c":121:15)
#loc58 = loc("CWE190_Integer_Overflow__int_rand_add_17.c":123:15)
#loc59 = loc("CWE190_Integer_Overflow__int_rand_add_17.c":111:1)
#loc60 = loc("CWE190_Integer_Overflow__int_rand_add_17.c":126:1)
#loc65 = loc("CWE190_Integer_Overflow__int_rand_add_17.c":112:1)
#loc66 = loc("CWE190_Integer_Overflow__int_rand_add_17.c":114:27)
#loc67 = loc("CWE190_Integer_Overflow__int_rand_add_17.c":114:22)
#loc68 = loc("CWE190_Integer_Overflow__int_rand_add_17.c":114:5)
#loc69 = loc("CWE190_Integer_Overflow__int_rand_add_17.c":116:5)
#loc70 = loc("CWE190_Integer_Overflow__int_rand_add_17.c":117:5)
#loc71 = loc("CWE190_Integer_Overflow__int_rand_add_17.c":117:51)
#loc72 = loc("CWE190_Integer_Overflow__int_rand_add_17.c":118:5)
#loc73 = loc("CWE190_Integer_Overflow__int_rand_add_17.c":121:5)
#loc74 = loc("CWE190_Integer_Overflow__int_rand_add_17.c":122:5)
#loc75 = loc("CWE190_Integer_Overflow__int_rand_add_17.c":122:50)
#loc76 = loc("CWE190_Integer_Overflow__int_rand_add_17.c":123:5)
#loc77 = loc("CWE190_Integer_Overflow__int_rand_add_17.c":125:12)
#loc78 = loc("CWE190_Integer_Overflow__int_rand_add_17.c":125:5)
#loc79 = loc("CWE190_Integer_Overflow__int_rand_add_17.c":69:23)
#loc80 = loc("CWE190_Integer_Overflow__int_rand_add_17.c":48:1)
#loc81 = loc("CWE190_Integer_Overflow__int_rand_add_17.c":72:1)
#loc82 = loc("CWE190_Integer_Overflow__int_rand_add_17.c":64:13)
#loc83 = loc("CWE190_Integer_Overflow__int_rand_add_17.c":64:33)
#loc84 = loc("CWE190_Integer_Overflow__int_rand_add_17.c":50:5)
#loc85 = loc("CWE190_Integer_Overflow__int_rand_add_17.c":50:9)
#loc86 = loc("CWE190_Integer_Overflow__int_rand_add_17.c":50:11)
#loc87 = loc("CWE190_Integer_Overflow__int_rand_add_17.c":51:5)
#loc88 = loc("CWE190_Integer_Overflow__int_rand_add_17.c":51:9)
#loc89 = loc("CWE190_Integer_Overflow__int_rand_add_17.c":53:12)
#loc90 = loc("CWE190_Integer_Overflow__int_rand_add_17.c":53:5)
#loc91 = loc("CWE190_Integer_Overflow__int_rand_add_17.c":54:5)
#loc92 = loc("CWE190_Integer_Overflow__int_rand_add_17.c":58:5)
#loc93 = loc("CWE190_Integer_Overflow__int_rand_add_17.c":54:13)
#loc94 = loc("CWE190_Integer_Overflow__int_rand_add_17.c":54:9)
#loc95 = loc("CWE190_Integer_Overflow__int_rand_add_17.c":54:16)
#loc96 = loc("CWE190_Integer_Overflow__int_rand_add_17.c":54:20)
#loc97 = loc("CWE190_Integer_Overflow__int_rand_add_17.c":54:18)
#loc98 = loc("CWE190_Integer_Overflow__int_rand_add_17.c":55:5)
#loc100 = loc("CWE190_Integer_Overflow__int_rand_add_17.c":57:9)
#loc101 = loc("CWE190_Integer_Overflow__int_rand_add_17.c":54:24)
#loc102 = loc("CWE190_Integer_Overflow__int_rand_add_17.c":54:23)
#loc103 = loc("CWE190_Integer_Overflow__int_rand_add_17.c":59:5)
#loc104 = loc("CWE190_Integer_Overflow__int_rand_add_17.c":71:5)
#loc105 = loc("CWE190_Integer_Overflow__int_rand_add_17.c":59:13)
#loc106 = loc("CWE190_Integer_Overflow__int_rand_add_17.c":59:9)
#loc107 = loc("CWE190_Integer_Overflow__int_rand_add_17.c":59:16)
#loc108 = loc("CWE190_Integer_Overflow__int_rand_add_17.c":59:20)
#loc109 = loc("CWE190_Integer_Overflow__int_rand_add_17.c":59:18)
#loc110 = loc("CWE190_Integer_Overflow__int_rand_add_17.c":60:5)
#loc111 = loc("CWE190_Integer_Overflow__int_rand_add_17.c":62:9)
#loc112 = loc("CWE190_Integer_Overflow__int_rand_add_17.c":70:9)
#loc113 = loc("CWE190_Integer_Overflow__int_rand_add_17.c":62:13)
#loc114 = loc("CWE190_Integer_Overflow__int_rand_add_17.c":62:20)
#loc115 = loc("CWE190_Integer_Overflow__int_rand_add_17.c":63:9)
#loc116 = loc("CWE190_Integer_Overflow__int_rand_add_17.c":66:9)
#loc117 = loc("CWE190_Integer_Overflow__int_rand_add_17.c":68:9)
#loc118 = loc("CWE190_Integer_Overflow__int_rand_add_17.c":64:26)
#loc119 = loc("CWE190_Integer_Overflow__int_rand_add_17.c":65:26)
#loc120 = loc("CWE190_Integer_Overflow__int_rand_add_17.c":65:13)
#loc121 = loc("CWE190_Integer_Overflow__int_rand_add_17.c":69:13)
#loc122 = loc("CWE190_Integer_Overflow__int_rand_add_17.c":59:24)
#loc123 = loc("CWE190_Integer_Overflow__int_rand_add_17.c":59:23)
#loc124 = loc("CWE190_Integer_Overflow__int_rand_add_17.c":75:1)
#loc125 = loc("CWE190_Integer_Overflow__int_rand_add_17.c":94:1)
#loc126 = loc("CWE190_Integer_Overflow__int_rand_add_17.c":90:13)
#loc127 = loc("CWE190_Integer_Overflow__int_rand_add_17.c":90:33)
#loc128 = loc("CWE190_Integer_Overflow__int_rand_add_17.c":77:5)
#loc129 = loc("CWE190_Integer_Overflow__int_rand_add_17.c":77:9)
#loc130 = loc("CWE190_Integer_Overflow__int_rand_add_17.c":77:11)
#loc131 = loc("CWE190_Integer_Overflow__int_rand_add_17.c":78:5)
#loc132 = loc("CWE190_Integer_Overflow__int_rand_add_17.c":78:9)
#loc133 = loc("CWE190_Integer_Overflow__int_rand_add_17.c":80:12)
#loc134 = loc("CWE190_Integer_Overflow__int_rand_add_17.c":80:5)
#loc135 = loc("CWE190_Integer_Overflow__int_rand_add_17.c":81:5)
#loc136 = loc("CWE190_Integer_Overflow__int_rand_add_17.c":85:5)
#loc137 = loc("CWE190_Integer_Overflow__int_rand_add_17.c":81:13)
#loc138 = loc("CWE190_Integer_Overflow__int_rand_add_17.c":81:9)
#loc139 = loc("CWE190_Integer_Overflow__int_rand_add_17.c":81:16)
#loc140 = loc("CWE190_Integer_Overflow__int_rand_add_17.c":81:20)
#loc141 = loc("CWE190_Integer_Overflow__int_rand_add_17.c":81:18)
#loc142 = loc("CWE190_Integer_Overflow__int_rand_add_17.c":82:5)
#loc143 = loc("CWE190_Integer_Overflow__int_rand_add_17.c":84:16)
#loc144 = loc("CWE190_Integer_Overflow__int_rand_add_17.c":84:9)
#loc145 = loc("CWE190_Integer_Overflow__int_rand_add_17.c":81:24)
#loc146 = loc("CWE190_Integer_Overflow__int_rand_add_17.c":81:23)
#loc147 = loc("CWE190_Integer_Overflow__int_rand_add_17.c":86:5)
#loc148 = loc("CWE190_Integer_Overflow__int_rand_add_17.c":93:5)
#loc149 = loc("CWE190_Integer_Overflow__int_rand_add_17.c":86:13)
#loc150 = loc("CWE190_Integer_Overflow__int_rand_add_17.c":86:9)
#loc151 = loc("CWE190_Integer_Overflow__int_rand_add_17.c":86:16)
#loc152 = loc("CWE190_Integer_Overflow__int_rand_add_17.c":86:20)
#loc153 = loc("CWE190_Integer_Overflow__int_rand_add_17.c":86:18)
#loc154 = loc("CWE190_Integer_Overflow__int_rand_add_17.c":87:5)
#loc155 = loc("CWE190_Integer_Overflow__int_rand_add_17.c":88:9)
#loc156 = loc("CWE190_Integer_Overflow__int_rand_add_17.c":92:9)
#loc157 = loc("CWE190_Integer_Overflow__int_rand_add_17.c":90:26)
#loc158 = loc("CWE190_Integer_Overflow__int_rand_add_17.c":91:26)
#loc159 = loc("CWE190_Integer_Overflow__int_rand_add_17.c":91:13)
#loc160 = loc("CWE190_Integer_Overflow__int_rand_add_17.c":86:24)
#loc161 = loc("CWE190_Integer_Overflow__int_rand_add_17.c":86:23)
#loc162 = loc(fused[#loc1, #loc2])
#loc163 = loc(fused[#loc3, #loc4])
#loc164 = loc(fused[#loc5, #loc6])
#loc165 = loc(fused[#loc7, #loc8])
#loc166 = loc(fused[#loc9, #loc10])
#loc167 = loc(fused[#loc9, #loc11])
#loc168 = loc(fused[#loc12, #loc13])
#loc169 = loc(fused[#loc15, #loc14])
#loc170 = loc(fused[#loc16, #loc17])
#loc171 = loc(fused[#loc19, #loc18])
#loc172 = loc(fused[#loc20, #loc21])
#loc173 = loc(fused[#loc23, #loc17])
#loc174 = loc(fused[#loc25, #loc24])
#loc175 = loc(fused[#loc27, #loc26])
#loc176 = loc(fused[#loc28, #loc29])
#loc177 = loc(fused[#loc31, #loc30])
#loc178 = loc(fused[#loc32, #loc33])
#loc179 = loc(fused[#loc35, #loc29])
#loc180 = loc(fused[#loc36, #loc37])
#loc181 = loc(fused[#loc42, #loc41])
#loc182 = loc(fused[#loc43, #loc44])
#loc183 = loc(fused[#loc45, #loc46])
#loc184 = loc(fused[#loc47, #loc48])
#loc185 = loc(fused[#loc49, #loc50])
#loc186 = loc(fused[#loc51, #loc52])
#loc187 = loc(fused[#loc53, #loc54])
#loc188 = loc(fused[#loc59, #loc60])
#loc191 = loc(fused[#loc70, #loc71])
#loc192 = loc(fused[#loc74, #loc75])
#loc193 = loc(fused[#loc78, #loc77])
#loc194 = loc(fused[#loc80, #loc81])
#loc195 = loc(fused[#loc82, #loc83])
#loc196 = loc(fused[#loc84, #loc85])
#loc197 = loc(fused[#loc84, #loc86])
#loc198 = loc(fused[#loc87, #loc88])
#loc199 = loc(fused[#loc90, #loc89])
#loc200 = loc(fused[#loc91, #loc92])
#loc201 = loc(fused[#loc94, #loc93])
#loc202 = loc(fused[#loc95, #loc96])
#loc203 = loc(fused[#loc98, #loc92])
#loc204 = loc(fused[#loc100, #loc99])
#loc205 = loc(fused[#loc102, #loc101])
#loc206 = loc(fused[#loc103, #loc104])
#loc207 = loc(fused[#loc106, #loc105])
#loc208 = loc(fused[#loc107, #loc108])
#loc209 = loc(fused[#loc110, #loc104])
#loc210 = loc(fused[#loc111, #loc112])
#loc211 = loc(fused[#loc113, #loc114])
#loc212 = loc(fused[#loc115, #loc116, #loc117, #loc112])
#loc213 = loc(fused[#loc123, #loc122])
#loc214 = loc(fused[#loc124, #loc125])
#loc215 = loc(fused[#loc126, #loc127])
#loc216 = loc(fused[#loc128, #loc129])
#loc217 = loc(fused[#loc128, #loc130])
#loc218 = loc(fused[#loc131, #loc132])
#loc219 = loc(fused[#loc134, #loc133])
#loc220 = loc(fused[#loc135, #loc136])
#loc221 = loc(fused[#loc138, #loc137])
#loc222 = loc(fused[#loc139, #loc140])
#loc223 = loc(fused[#loc142, #loc136])
#loc224 = loc(fused[#loc144, #loc143])
#loc225 = loc(fused[#loc146, #loc145])
#loc226 = loc(fused[#loc147, #loc148])
#loc227 = loc(fused[#loc150, #loc149])
#loc228 = loc(fused[#loc151, #loc152])
#loc229 = loc(fused[#loc154, #loc148])
#loc230 = loc(fused[#loc155, #loc156])
#loc231 = loc(fused[#loc161, #loc160])
