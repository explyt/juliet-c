!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#true = #cir.bool<true> : !cir.bool
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @rand() -> !s32i extra(#fn_attr) loc(#loc270)
  cir.global "private"  internal dsolocal @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45_badData = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc271)
  cir.func no_proto  @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc273)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc9)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc10)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc274)
    %3 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc12)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc12)
    %5 = cir.binop(and, %3, %4) : !s32i loc(#loc12)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc12)
    %7 = cir.ternary(%6, true {
      %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc12)
      %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc12)
      %14 = cir.const #cir.int<30> : !s32i loc(#loc12)
      %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc12)
      %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc12)
      %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc12)
      %18 = cir.const #cir.int<15> : !s32i loc(#loc12)
      %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc12)
      %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc12)
      %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc12)
      %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc12)
      %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc12)
      cir.yield %23 : !u32i loc(#loc12)
    }, false {
      %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc12)
      %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc12)
      %14 = cir.const #cir.int<30> : !s32i loc(#loc12)
      %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc12)
      %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc12)
      %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc12)
      %18 = cir.const #cir.int<15> : !s32i loc(#loc12)
      %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc12)
      %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc12)
      %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc12)
      %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc12)
      %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc12)
      %24 = cir.unary(minus, %23) : !u32i, !u32i loc(#loc12)
      %25 = cir.const #cir.int<1> : !s32i loc(#loc12)
      %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc12)
      %27 = cir.binop(sub, %24, %26) : !u32i loc(#loc12)
      cir.yield %27 : !u32i loc(#loc12)
    }) : (!cir.bool) -> !u32i loc(#loc12)
    %8 = cir.cast(integral, %7 : !u32i), !s32i loc(#loc12)
    cir.store %8, %0 : !s32i, !cir.ptr<!s32i> loc(#loc275)
    %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc14)
    %10 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45_badData : !cir.ptr<!s32i> loc(#loc271)
    cir.store %9, %10 : !s32i, !cir.ptr<!s32i> loc(#loc276)
    %11 = cir.get_global @badSink : !cir.ptr<!cir.func<!void ()>> loc(#loc277)
    cir.call %11() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc16)
    cir.return loc(#loc6)
  } loc(#loc272)
  cir.func no_proto  @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc279)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc20)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc280)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc22)
    cir.return loc(#loc19)
  } loc(#loc278)
  cir.func private  @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc281)
  cir.func private  @exit(!s32i) extra(#fn_attr) loc(#loc282)
  cir.func private  @printIntLine(!s32i) loc(#loc283)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc284)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"ERROR: Array index is negative.\00" : !cir.array<!s8i x 32>> : !cir.array<!s8i x 32> {alignment = 1 : i64} loc(#loc32)
  cir.func private  @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc285)
  cir.func no_proto internal private  @badSink() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc287)
    %1 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45_badData : !cir.ptr<!s32i> loc(#loc271)
    %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc38)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc287)
    cir.scope {
      %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc289)
      %4 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc290)
      %5 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc45)
      %6 = cir.const #cir.int<10> : !s32i loc(#loc46)
      %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc46)
      %8 = cir.const #cir.int<4> : !u64i loc(#loc291)
      %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc292)
      %10 = cir.call @malloc(%9) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc45)
      %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc293)
      cir.store %11, %4 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc290)
      cir.scope {
        %15 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc51)
        %16 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc52)
        %17 = cir.cast(bitcast, %16 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc52)
        %18 = cir.cmp(eq, %15, %17) : !cir.ptr<!s32i>, !s32i loc(#loc295)
        %19 = cir.cast(int_to_bool, %18 : !s32i), !cir.bool loc(#loc53)
        cir.if %19 {
          %20 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc55)
          %21 = cir.const #cir.int<1> : !s32i loc(#loc56)
          %22 = cir.unary(minus, %21) : !s32i, !s32i loc(#loc57)
          cir.call @exit(%22) : (!s32i) -> () extra(#fn_attr) loc(#loc55)
        } loc(#loc296)
      } loc(#loc294)
      cir.scope {
        %15 = cir.const #cir.int<0> : !s32i loc(#loc60)
        cir.store %15, %3 : !s32i, !cir.ptr<!s32i> loc(#loc298)
        cir.for : cond {
          %16 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc62)
          %17 = cir.const #cir.int<10> : !s32i loc(#loc63)
          %18 = cir.cmp(lt, %16, %17) : !s32i, !s32i loc(#loc299)
          %19 = cir.cast(int_to_bool, %18 : !s32i), !cir.bool loc(#loc64)
          cir.condition(%19) loc(#loc64)
        } body {
          cir.scope {
            %16 = cir.const #cir.int<0> : !s32i loc(#loc66)
            %17 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc67)
            %18 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc68)
            %19 = cir.ptr_stride(%17 : !cir.ptr<!s32i>, %18 : !s32i), !cir.ptr<!s32i> loc(#loc69)
            cir.store %16, %19 : !s32i, !cir.ptr<!s32i> loc(#loc301)
          } loc(#loc300)
          cir.yield loc(#loc59)
        } step {
          %16 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc70)
          %17 = cir.unary(inc, %16) : !s32i, !s32i loc(#loc71)
          cir.store %17, %3 : !s32i, !cir.ptr<!s32i> loc(#loc302)
          cir.yield loc(#loc297)
        } loc(#loc297)
      } loc(#loc297)
      cir.scope {
        %15 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc74)
        %16 = cir.const #cir.int<0> : !s32i loc(#loc75)
        %17 = cir.cmp(ge, %15, %16) : !s32i, !s32i loc(#loc304)
        %18 = cir.cast(int_to_bool, %17 : !s32i), !cir.bool loc(#loc76)
        cir.if %18 {
          %19 = cir.const #cir.int<1> : !s32i loc(#loc80)
          %20 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc81)
          %21 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc82)
          %22 = cir.ptr_stride(%20 : !cir.ptr<!s32i>, %21 : !s32i), !cir.ptr<!s32i> loc(#loc83)
          cir.store %19, %22 : !s32i, !cir.ptr<!s32i> loc(#loc306)
          cir.scope {
            %23 = cir.const #cir.int<0> : !s32i loc(#loc86)
            cir.store %23, %3 : !s32i, !cir.ptr<!s32i> loc(#loc308)
            cir.for : cond {
              %24 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc88)
              %25 = cir.const #cir.int<10> : !s32i loc(#loc89)
              %26 = cir.cmp(lt, %24, %25) : !s32i, !s32i loc(#loc309)
              %27 = cir.cast(int_to_bool, %26 : !s32i), !cir.bool loc(#loc90)
              cir.condition(%27) loc(#loc90)
            } body {
              cir.scope {
                %24 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc92)
                %25 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc93)
                %26 = cir.ptr_stride(%24 : !cir.ptr<!s32i>, %25 : !s32i), !cir.ptr<!s32i> loc(#loc94)
                %27 = cir.load %26 : !cir.ptr<!s32i>, !s32i loc(#loc92)
                cir.call @printIntLine(%27) : (!s32i) -> () loc(#loc95)
              } loc(#loc310)
              cir.yield loc(#loc85)
            } step {
              %24 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc96)
              %25 = cir.unary(inc, %24) : !s32i, !s32i loc(#loc97)
              cir.store %25, %3 : !s32i, !cir.ptr<!s32i> loc(#loc311)
              cir.yield loc(#loc307)
            } loc(#loc307)
          } loc(#loc307)
        } else {
          %19 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc32)
          %20 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc32)
          cir.call @printLine(%20) : (!cir.ptr<!s8i>) -> () loc(#loc98)
        } loc(#loc305)
      } loc(#loc303)
      %12 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc99)
      %13 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc100)
      %14 = cir.cast(bitcast, %13 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc100)
      cir.call @free(%14) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc99)
    } loc(#loc288)
    cir.return loc(#loc36)
  } loc(#loc286)
  cir.global "private"  internal dsolocal @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45_goodG2BData = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc312)
  cir.func no_proto internal private  @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc314)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc107)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc108)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc315)
    %3 = cir.const #cir.int<7> : !s32i loc(#loc110)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc316)
    %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc112)
    %5 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45_goodG2BData : !cir.ptr<!s32i> loc(#loc312)
    cir.store %4, %5 : !s32i, !cir.ptr<!s32i> loc(#loc317)
    %6 = cir.get_global @goodG2BSink : !cir.ptr<!cir.func<!void ()>> loc(#loc318)
    cir.call %6() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc114)
    cir.return loc(#loc104)
  } loc(#loc313)
  cir.func no_proto internal private  @goodG2BSink() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc320)
    %1 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45_goodG2BData : !cir.ptr<!s32i> loc(#loc312)
    %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc119)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc320)
    cir.scope {
      %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc322)
      %4 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc323)
      %5 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc126)
      %6 = cir.const #cir.int<10> : !s32i loc(#loc127)
      %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc127)
      %8 = cir.const #cir.int<4> : !u64i loc(#loc324)
      %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc325)
      %10 = cir.call @malloc(%9) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc126)
      %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc326)
      cir.store %11, %4 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc323)
      cir.scope {
        %15 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc132)
        %16 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc133)
        %17 = cir.cast(bitcast, %16 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc133)
        %18 = cir.cmp(eq, %15, %17) : !cir.ptr<!s32i>, !s32i loc(#loc328)
        %19 = cir.cast(int_to_bool, %18 : !s32i), !cir.bool loc(#loc134)
        cir.if %19 {
          %20 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc136)
          %21 = cir.const #cir.int<1> : !s32i loc(#loc137)
          %22 = cir.unary(minus, %21) : !s32i, !s32i loc(#loc138)
          cir.call @exit(%22) : (!s32i) -> () extra(#fn_attr) loc(#loc136)
        } loc(#loc329)
      } loc(#loc327)
      cir.scope {
        %15 = cir.const #cir.int<0> : !s32i loc(#loc141)
        cir.store %15, %3 : !s32i, !cir.ptr<!s32i> loc(#loc331)
        cir.for : cond {
          %16 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc143)
          %17 = cir.const #cir.int<10> : !s32i loc(#loc144)
          %18 = cir.cmp(lt, %16, %17) : !s32i, !s32i loc(#loc332)
          %19 = cir.cast(int_to_bool, %18 : !s32i), !cir.bool loc(#loc145)
          cir.condition(%19) loc(#loc145)
        } body {
          cir.scope {
            %16 = cir.const #cir.int<0> : !s32i loc(#loc147)
            %17 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc148)
            %18 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc149)
            %19 = cir.ptr_stride(%17 : !cir.ptr<!s32i>, %18 : !s32i), !cir.ptr<!s32i> loc(#loc150)
            cir.store %16, %19 : !s32i, !cir.ptr<!s32i> loc(#loc334)
          } loc(#loc333)
          cir.yield loc(#loc140)
        } step {
          %16 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc151)
          %17 = cir.unary(inc, %16) : !s32i, !s32i loc(#loc152)
          cir.store %17, %3 : !s32i, !cir.ptr<!s32i> loc(#loc335)
          cir.yield loc(#loc330)
        } loc(#loc330)
      } loc(#loc330)
      cir.scope {
        %15 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc155)
        %16 = cir.const #cir.int<0> : !s32i loc(#loc156)
        %17 = cir.cmp(ge, %15, %16) : !s32i, !s32i loc(#loc337)
        %18 = cir.cast(int_to_bool, %17 : !s32i), !cir.bool loc(#loc157)
        cir.if %18 {
          %19 = cir.const #cir.int<1> : !s32i loc(#loc161)
          %20 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc162)
          %21 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc163)
          %22 = cir.ptr_stride(%20 : !cir.ptr<!s32i>, %21 : !s32i), !cir.ptr<!s32i> loc(#loc164)
          cir.store %19, %22 : !s32i, !cir.ptr<!s32i> loc(#loc339)
          cir.scope {
            %23 = cir.const #cir.int<0> : !s32i loc(#loc167)
            cir.store %23, %3 : !s32i, !cir.ptr<!s32i> loc(#loc341)
            cir.for : cond {
              %24 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc169)
              %25 = cir.const #cir.int<10> : !s32i loc(#loc170)
              %26 = cir.cmp(lt, %24, %25) : !s32i, !s32i loc(#loc342)
              %27 = cir.cast(int_to_bool, %26 : !s32i), !cir.bool loc(#loc171)
              cir.condition(%27) loc(#loc171)
            } body {
              cir.scope {
                %24 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc173)
                %25 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc174)
                %26 = cir.ptr_stride(%24 : !cir.ptr<!s32i>, %25 : !s32i), !cir.ptr<!s32i> loc(#loc175)
                %27 = cir.load %26 : !cir.ptr<!s32i>, !s32i loc(#loc173)
                cir.call @printIntLine(%27) : (!s32i) -> () loc(#loc176)
              } loc(#loc343)
              cir.yield loc(#loc166)
            } step {
              %24 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc177)
              %25 = cir.unary(inc, %24) : !s32i, !s32i loc(#loc178)
              cir.store %25, %3 : !s32i, !cir.ptr<!s32i> loc(#loc344)
              cir.yield loc(#loc340)
            } loc(#loc340)
          } loc(#loc340)
        } else {
          %19 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc179)
          %20 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc179)
          cir.call @printLine(%20) : (!cir.ptr<!s8i>) -> () loc(#loc180)
        } loc(#loc338)
      } loc(#loc336)
      %12 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc181)
      %13 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc182)
      %14 = cir.cast(bitcast, %13 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc182)
      cir.call @free(%14) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc181)
    } loc(#loc321)
    cir.return loc(#loc117)
  } loc(#loc319)
  cir.global "private"  internal dsolocal @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45_goodB2GData = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc345)
  cir.func no_proto internal private  @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc347)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc189)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc190)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc348)
    %3 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc192)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc192)
    %5 = cir.binop(and, %3, %4) : !s32i loc(#loc192)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc192)
    %7 = cir.ternary(%6, true {
      %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc192)
      %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc192)
      %14 = cir.const #cir.int<30> : !s32i loc(#loc192)
      %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc192)
      %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc192)
      %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc192)
      %18 = cir.const #cir.int<15> : !s32i loc(#loc192)
      %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc192)
      %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc192)
      %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc192)
      %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc192)
      %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc192)
      cir.yield %23 : !u32i loc(#loc192)
    }, false {
      %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc192)
      %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc192)
      %14 = cir.const #cir.int<30> : !s32i loc(#loc192)
      %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc192)
      %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc192)
      %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc192)
      %18 = cir.const #cir.int<15> : !s32i loc(#loc192)
      %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc192)
      %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc192)
      %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc192)
      %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc192)
      %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc192)
      %24 = cir.unary(minus, %23) : !u32i, !u32i loc(#loc192)
      %25 = cir.const #cir.int<1> : !s32i loc(#loc192)
      %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc192)
      %27 = cir.binop(sub, %24, %26) : !u32i loc(#loc192)
      cir.yield %27 : !u32i loc(#loc192)
    }) : (!cir.bool) -> !u32i loc(#loc192)
    %8 = cir.cast(integral, %7 : !u32i), !s32i loc(#loc192)
    cir.store %8, %0 : !s32i, !cir.ptr<!s32i> loc(#loc349)
    %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc194)
    %10 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45_goodB2GData : !cir.ptr<!s32i> loc(#loc345)
    cir.store %9, %10 : !s32i, !cir.ptr<!s32i> loc(#loc350)
    %11 = cir.get_global @goodB2GSink : !cir.ptr<!cir.func<!void ()>> loc(#loc351)
    cir.call %11() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc196)
    cir.return loc(#loc186)
  } loc(#loc346)
  cir.global "private"  constant internal dsolocal @".str1" = #cir.const_array<"ERROR: Array index is out-of-bounds\00" : !cir.array<!s8i x 36>> : !cir.array<!s8i x 36> {alignment = 1 : i64} loc(#loc198)
  cir.func no_proto internal private  @goodB2GSink() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc353)
    %1 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45_goodB2GData : !cir.ptr<!s32i> loc(#loc345)
    %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc202)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc353)
    cir.scope {
      %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc355)
      %4 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc356)
      %5 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc209)
      %6 = cir.const #cir.int<10> : !s32i loc(#loc210)
      %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc210)
      %8 = cir.const #cir.int<4> : !u64i loc(#loc357)
      %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc358)
      %10 = cir.call @malloc(%9) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc209)
      %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc359)
      cir.store %11, %4 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc356)
      cir.scope {
        %15 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc215)
        %16 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc216)
        %17 = cir.cast(bitcast, %16 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc216)
        %18 = cir.cmp(eq, %15, %17) : !cir.ptr<!s32i>, !s32i loc(#loc361)
        %19 = cir.cast(int_to_bool, %18 : !s32i), !cir.bool loc(#loc217)
        cir.if %19 {
          %20 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc219)
          %21 = cir.const #cir.int<1> : !s32i loc(#loc220)
          %22 = cir.unary(minus, %21) : !s32i, !s32i loc(#loc221)
          cir.call @exit(%22) : (!s32i) -> () extra(#fn_attr) loc(#loc219)
        } loc(#loc362)
      } loc(#loc360)
      cir.scope {
        %15 = cir.const #cir.int<0> : !s32i loc(#loc224)
        cir.store %15, %3 : !s32i, !cir.ptr<!s32i> loc(#loc364)
        cir.for : cond {
          %16 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc226)
          %17 = cir.const #cir.int<10> : !s32i loc(#loc227)
          %18 = cir.cmp(lt, %16, %17) : !s32i, !s32i loc(#loc365)
          %19 = cir.cast(int_to_bool, %18 : !s32i), !cir.bool loc(#loc228)
          cir.condition(%19) loc(#loc228)
        } body {
          cir.scope {
            %16 = cir.const #cir.int<0> : !s32i loc(#loc230)
            %17 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc231)
            %18 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc232)
            %19 = cir.ptr_stride(%17 : !cir.ptr<!s32i>, %18 : !s32i), !cir.ptr<!s32i> loc(#loc233)
            cir.store %16, %19 : !s32i, !cir.ptr<!s32i> loc(#loc367)
          } loc(#loc366)
          cir.yield loc(#loc223)
        } step {
          %16 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc234)
          %17 = cir.unary(inc, %16) : !s32i, !s32i loc(#loc235)
          cir.store %17, %3 : !s32i, !cir.ptr<!s32i> loc(#loc368)
          cir.yield loc(#loc363)
        } loc(#loc363)
      } loc(#loc363)
      cir.scope {
        %15 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc238)
        %16 = cir.const #cir.int<0> : !s32i loc(#loc239)
        %17 = cir.cmp(ge, %15, %16) : !s32i, !s32i loc(#loc370)
        %18 = cir.cast(int_to_bool, %17 : !s32i), !cir.bool loc(#loc240)
        %19 = cir.ternary(%18, true {
          %20 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc242)
          %21 = cir.const #cir.int<10> : !s32i loc(#loc243)
          %22 = cir.cmp(lt, %20, %21) : !s32i, !s32i loc(#loc371)
          %23 = cir.cast(int_to_bool, %22 : !s32i), !cir.bool loc(#loc245)
          %24 = cir.ternary(%23, true {
            %25 = cir.const #true loc(#loc241)
            cir.yield %25 : !cir.bool loc(#loc241)
          }, false {
            %25 = cir.const #false loc(#loc241)
            cir.yield %25 : !cir.bool loc(#loc241)
          }) : (!cir.bool) -> !cir.bool loc(#loc241)
          cir.yield %24 : !cir.bool loc(#loc241)
        }, false {
          %20 = cir.const #false loc(#loc241)
          cir.yield %20 : !cir.bool loc(#loc241)
        }) : (!cir.bool) -> !cir.bool loc(#loc241)
        cir.if %19 {
          %20 = cir.const #cir.int<1> : !s32i loc(#loc249)
          %21 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc250)
          %22 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc251)
          %23 = cir.ptr_stride(%21 : !cir.ptr<!s32i>, %22 : !s32i), !cir.ptr<!s32i> loc(#loc252)
          cir.store %20, %23 : !s32i, !cir.ptr<!s32i> loc(#loc373)
          cir.scope {
            %24 = cir.const #cir.int<0> : !s32i loc(#loc255)
            cir.store %24, %3 : !s32i, !cir.ptr<!s32i> loc(#loc375)
            cir.for : cond {
              %25 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc257)
              %26 = cir.const #cir.int<10> : !s32i loc(#loc258)
              %27 = cir.cmp(lt, %25, %26) : !s32i, !s32i loc(#loc376)
              %28 = cir.cast(int_to_bool, %27 : !s32i), !cir.bool loc(#loc259)
              cir.condition(%28) loc(#loc259)
            } body {
              cir.scope {
                %25 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc261)
                %26 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc262)
                %27 = cir.ptr_stride(%25 : !cir.ptr<!s32i>, %26 : !s32i), !cir.ptr<!s32i> loc(#loc263)
                %28 = cir.load %27 : !cir.ptr<!s32i>, !s32i loc(#loc261)
                cir.call @printIntLine(%28) : (!s32i) -> () loc(#loc264)
              } loc(#loc377)
              cir.yield loc(#loc254)
            } step {
              %25 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc265)
              %26 = cir.unary(inc, %25) : !s32i, !s32i loc(#loc266)
              cir.store %26, %3 : !s32i, !cir.ptr<!s32i> loc(#loc378)
              cir.yield loc(#loc374)
            } loc(#loc374)
          } loc(#loc374)
        } else {
          %20 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc198)
          %21 = cir.cast(array_to_ptrdecay, %20 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc198)
          cir.call @printLine(%21) : (!cir.ptr<!s8i>) -> () loc(#loc267)
        } loc(#loc372)
      } loc(#loc369)
      %12 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc268)
      %13 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc269)
      %14 = cir.cast(bitcast, %13 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc269)
      cir.call @free(%14) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc268)
    } loc(#loc354)
    cir.return loc(#loc200)
  } loc(#loc352)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":20:1)
#loc4 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":20:12)
#loc5 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":57:1)
#loc6 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":66:1)
#loc7 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":59:5)
#loc8 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":59:9)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":61:13)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":61:12)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":61:5)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":63:12)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":63:5)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":64:67)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":64:5)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":65:5)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":65:13)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":158:1)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":162:1)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":160:5)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":160:13)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":161:5)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":161:13)
#loc24 = loc("/usr/include/stdlib.h":672:1)
#loc25 = loc("/usr/include/stdlib.h":672:45)
#loc26 = loc("/usr/include/stdlib.h":756:1)
#loc27 = loc("/usr/include/stdlib.h":756:70)
#loc28 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc29 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc30 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc31 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":51:23)
#loc33 = loc("/usr/include/stdlib.h":687:1)
#loc34 = loc("/usr/include/stdlib.h":687:32)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":26:1)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":55:1)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":28:5)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":28:16)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":29:5)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":54:5)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":30:9)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":30:13)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":31:9)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":31:54)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":31:31)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":31:38)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":31:43)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":31:53)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":32:9)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":32:39)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":32:13)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":32:23)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":32:20)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":32:29)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":32:30)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":32:36)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":32:35)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":34:9)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":37:9)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":34:18)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":34:14)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":34:21)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":34:25)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":34:23)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":35:9)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":36:25)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":36:13)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":36:20)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":36:21)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":34:30)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":34:29)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":40:9)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":52:9)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":40:13)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":40:21)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":40:18)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":41:9)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":48:9)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":50:9)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":42:28)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":42:13)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":42:20)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":42:24)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":44:13)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":47:13)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":44:21)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":44:17)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":44:24)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":44:28)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":44:26)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":45:13)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":46:30)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":46:37)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":46:38)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":46:17)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":44:33)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":44:32)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":51:13)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":53:9)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":53:14)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":21:1)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":21:12)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":104:1)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":114:1)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":106:5)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":106:9)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":108:13)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":108:12)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":108:5)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":111:12)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":111:5)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":112:71)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":112:5)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":113:5)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":113:17)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":73:1)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":102:1)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":75:5)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":75:16)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":76:5)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":101:5)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":77:9)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":77:13)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":78:9)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":78:54)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":78:31)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":78:38)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":78:43)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":78:53)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":79:9)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":79:39)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":79:13)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":79:23)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":79:20)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":79:29)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":79:30)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":79:36)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":79:35)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":81:9)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":84:9)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":81:18)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":81:14)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":81:21)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":81:25)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":81:23)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":82:9)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":83:25)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":83:13)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":83:20)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":83:21)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":81:30)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":81:29)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":87:9)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":99:9)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":87:13)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":87:21)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":87:18)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":88:9)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":95:9)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":97:9)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":89:28)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":89:13)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":89:20)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":89:24)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":91:13)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":94:13)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":91:21)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":91:17)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":91:24)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":91:28)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":91:26)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":92:13)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":93:30)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":93:37)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":93:38)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":93:17)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":91:33)
#loc178 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":91:32)
#loc179 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":98:23)
#loc180 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":98:13)
#loc181 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":100:9)
#loc182 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":100:14)
#loc183 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":22:1)
#loc184 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":22:12)
#loc185 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":147:1)
#loc186 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":156:1)
#loc187 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":149:5)
#loc188 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":149:9)
#loc189 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":151:13)
#loc190 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":151:12)
#loc191 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":151:5)
#loc192 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":153:12)
#loc193 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":153:5)
#loc194 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":154:71)
#loc195 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":154:5)
#loc196 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":155:5)
#loc197 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":155:17)
#loc198 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":141:23)
#loc199 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":117:1)
#loc200 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":145:1)
#loc201 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":119:5)
#loc202 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":119:16)
#loc203 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":120:5)
#loc204 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":144:5)
#loc205 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":121:9)
#loc206 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":121:13)
#loc207 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":122:9)
#loc208 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":122:54)
#loc209 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":122:31)
#loc210 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":122:38)
#loc211 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":122:43)
#loc212 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":122:53)
#loc213 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":123:9)
#loc214 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":123:39)
#loc215 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":123:13)
#loc216 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":123:23)
#loc217 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":123:20)
#loc218 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":123:29)
#loc219 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":123:30)
#loc220 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":123:36)
#loc221 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":123:35)
#loc222 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":125:9)
#loc223 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":128:9)
#loc224 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":125:18)
#loc225 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":125:14)
#loc226 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":125:21)
#loc227 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":125:25)
#loc228 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":125:23)
#loc229 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":126:9)
#loc230 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":127:25)
#loc231 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":127:13)
#loc232 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":127:20)
#loc233 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":127:21)
#loc234 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":125:30)
#loc235 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":125:29)
#loc236 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":130:9)
#loc237 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":142:9)
#loc238 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":130:13)
#loc239 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":130:21)
#loc240 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":130:18)
#loc241 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":130:23)
#loc242 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":130:26)
#loc243 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":130:34)
#loc244 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":130:36)
#loc245 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":130:31)
#loc246 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":131:9)
#loc247 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":138:9)
#loc248 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":140:9)
#loc249 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":132:28)
#loc250 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":132:13)
#loc251 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":132:20)
#loc252 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":132:24)
#loc253 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":134:13)
#loc254 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":137:13)
#loc255 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":134:21)
#loc256 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":134:17)
#loc257 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":134:24)
#loc258 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":134:28)
#loc259 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":134:26)
#loc260 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":135:13)
#loc261 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":136:30)
#loc262 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":136:37)
#loc263 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":136:38)
#loc264 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":136:17)
#loc265 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":134:33)
#loc266 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":134:32)
#loc267 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":141:13)
#loc268 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":143:9)
#loc269 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c":143:14)
#loc270 = loc(fused[#loc1, #loc2])
#loc271 = loc(fused[#loc3, #loc4])
#loc272 = loc(fused[#loc5, #loc6])
#loc273 = loc(fused[#loc7, #loc8])
#loc274 = loc(fused[#loc11, #loc9])
#loc275 = loc(fused[#loc13, #loc12])
#loc276 = loc(fused[#loc15, #loc14])
#loc277 = loc(fused[#loc16, #loc17])
#loc278 = loc(fused[#loc18, #loc19])
#loc279 = loc(fused[#loc20, #loc21])
#loc280 = loc(fused[#loc22, #loc23])
#loc281 = loc(fused[#loc24, #loc25])
#loc282 = loc(fused[#loc26, #loc27])
#loc283 = loc(fused[#loc28, #loc29])
#loc284 = loc(fused[#loc30, #loc31])
#loc285 = loc(fused[#loc33, #loc34])
#loc286 = loc(fused[#loc35, #loc36])
#loc287 = loc(fused[#loc37, #loc38])
#loc288 = loc(fused[#loc39, #loc40])
#loc289 = loc(fused[#loc41, #loc42])
#loc290 = loc(fused[#loc43, #loc44])
#loc291 = loc(fused[#loc47, #loc48])
#loc292 = loc(fused[#loc46, #loc48])
#loc293 = loc(fused[#loc45, #loc44])
#loc294 = loc(fused[#loc49, #loc50])
#loc295 = loc(fused[#loc51, #loc52])
#loc296 = loc(fused[#loc54, #loc50])
#loc297 = loc(fused[#loc58, #loc59])
#loc298 = loc(fused[#loc61, #loc60])
#loc299 = loc(fused[#loc62, #loc63])
#loc300 = loc(fused[#loc65, #loc59])
#loc301 = loc(fused[#loc67, #loc66])
#loc302 = loc(fused[#loc71, #loc70])
#loc303 = loc(fused[#loc72, #loc73])
#loc304 = loc(fused[#loc74, #loc75])
#loc305 = loc(fused[#loc77, #loc78, #loc79, #loc73])
#loc306 = loc(fused[#loc81, #loc80])
#loc307 = loc(fused[#loc84, #loc85])
#loc308 = loc(fused[#loc87, #loc86])
#loc309 = loc(fused[#loc88, #loc89])
#loc310 = loc(fused[#loc91, #loc85])
#loc311 = loc(fused[#loc97, #loc96])
#loc312 = loc(fused[#loc101, #loc102])
#loc313 = loc(fused[#loc103, #loc104])
#loc314 = loc(fused[#loc105, #loc106])
#loc315 = loc(fused[#loc109, #loc107])
#loc316 = loc(fused[#loc111, #loc110])
#loc317 = loc(fused[#loc113, #loc112])
#loc318 = loc(fused[#loc114, #loc115])
#loc319 = loc(fused[#loc116, #loc117])
#loc320 = loc(fused[#loc118, #loc119])
#loc321 = loc(fused[#loc120, #loc121])
#loc322 = loc(fused[#loc122, #loc123])
#loc323 = loc(fused[#loc124, #loc125])
#loc324 = loc(fused[#loc128, #loc129])
#loc325 = loc(fused[#loc127, #loc129])
#loc326 = loc(fused[#loc126, #loc125])
#loc327 = loc(fused[#loc130, #loc131])
#loc328 = loc(fused[#loc132, #loc133])
#loc329 = loc(fused[#loc135, #loc131])
#loc330 = loc(fused[#loc139, #loc140])
#loc331 = loc(fused[#loc142, #loc141])
#loc332 = loc(fused[#loc143, #loc144])
#loc333 = loc(fused[#loc146, #loc140])
#loc334 = loc(fused[#loc148, #loc147])
#loc335 = loc(fused[#loc152, #loc151])
#loc336 = loc(fused[#loc153, #loc154])
#loc337 = loc(fused[#loc155, #loc156])
#loc338 = loc(fused[#loc158, #loc159, #loc160, #loc154])
#loc339 = loc(fused[#loc162, #loc161])
#loc340 = loc(fused[#loc165, #loc166])
#loc341 = loc(fused[#loc168, #loc167])
#loc342 = loc(fused[#loc169, #loc170])
#loc343 = loc(fused[#loc172, #loc166])
#loc344 = loc(fused[#loc178, #loc177])
#loc345 = loc(fused[#loc183, #loc184])
#loc346 = loc(fused[#loc185, #loc186])
#loc347 = loc(fused[#loc187, #loc188])
#loc348 = loc(fused[#loc191, #loc189])
#loc349 = loc(fused[#loc193, #loc192])
#loc350 = loc(fused[#loc195, #loc194])
#loc351 = loc(fused[#loc196, #loc197])
#loc352 = loc(fused[#loc199, #loc200])
#loc353 = loc(fused[#loc201, #loc202])
#loc354 = loc(fused[#loc203, #loc204])
#loc355 = loc(fused[#loc205, #loc206])
#loc356 = loc(fused[#loc207, #loc208])
#loc357 = loc(fused[#loc211, #loc212])
#loc358 = loc(fused[#loc210, #loc212])
#loc359 = loc(fused[#loc209, #loc208])
#loc360 = loc(fused[#loc213, #loc214])
#loc361 = loc(fused[#loc215, #loc216])
#loc362 = loc(fused[#loc218, #loc214])
#loc363 = loc(fused[#loc222, #loc223])
#loc364 = loc(fused[#loc225, #loc224])
#loc365 = loc(fused[#loc226, #loc227])
#loc366 = loc(fused[#loc229, #loc223])
#loc367 = loc(fused[#loc231, #loc230])
#loc368 = loc(fused[#loc235, #loc234])
#loc369 = loc(fused[#loc236, #loc237])
#loc370 = loc(fused[#loc238, #loc239])
#loc371 = loc(fused[#loc242, #loc244])
#loc372 = loc(fused[#loc246, #loc247, #loc248, #loc237])
#loc373 = loc(fused[#loc250, #loc249])
#loc374 = loc(fused[#loc253, #loc254])
#loc375 = loc(fused[#loc256, #loc255])
#loc376 = loc(fused[#loc257, #loc258])
#loc377 = loc(fused[#loc260, #loc254])
#loc378 = loc(fused[#loc266, #loc265])
