!s32i = !cir.int<s, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
!ty__twoIntsStruct = !cir.struct<struct "_twoIntsStruct" {!s32i, !s32i} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_68b.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.global "private"  external @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_68_badData : !cir.ptr<!ty__twoIntsStruct> {alignment = 8 : i64} loc(#loc117)
  cir.func private  @printStructLine(!cir.ptr<!ty__twoIntsStruct>) loc(#loc118)
  cir.func private  @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc119)
  cir.func no_proto  @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_68b_badSink() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["data", init] {alignment = 8 : i64} loc(#loc121)
    %1 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_68_badData : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc117)
    %2 = cir.load %1 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc10)
    cir.store %2, %0 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc121)
    cir.scope {
      %3 = cir.alloca !cir.array<!ty__twoIntsStruct x 100>, !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>, ["source"] {alignment = 16 : i64} loc(#loc123)
      cir.scope {
        %4 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc125)
        cir.scope {
          %5 = cir.const #cir.int<0> : !s32i loc(#loc21)
          %6 = cir.cast(integral, %5 : !s32i), !u64i loc(#loc21)
          cir.store %6, %4 : !u64i, !cir.ptr<!u64i> loc(#loc127)
          cir.for : cond {
            %7 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc23)
            %8 = cir.const #cir.int<100> : !s32i loc(#loc24)
            %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc24)
            %10 = cir.cmp(lt, %7, %9) : !u64i, !s32i loc(#loc128)
            %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc25)
            cir.condition(%11) loc(#loc25)
          } body {
            cir.scope {
              %7 = cir.const #cir.int<0> : !s32i loc(#loc27)
              %8 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc28)
              %9 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc29)
              %10 = cir.ptr_stride(%9 : !cir.ptr<!ty__twoIntsStruct>, %8 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc29)
              %11 = cir.get_member %10[0] {name = "intOne"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc30)
              cir.store %7, %11 : !s32i, !cir.ptr<!s32i> loc(#loc130)
              %12 = cir.const #cir.int<0> : !s32i loc(#loc31)
              %13 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc32)
              %14 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc33)
              %15 = cir.ptr_stride(%14 : !cir.ptr<!ty__twoIntsStruct>, %13 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc33)
              %16 = cir.get_member %15[1] {name = "intTwo"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc34)
              cir.store %12, %16 : !s32i, !cir.ptr<!s32i> loc(#loc131)
            } loc(#loc129)
            cir.yield loc(#loc20)
          } step {
            %7 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc35)
            %8 = cir.unary(inc, %7) : !u64i, !u64i loc(#loc36)
            cir.store %8, %4 : !u64i, !cir.ptr<!u64i> loc(#loc132)
            cir.yield loc(#loc126)
          } loc(#loc126)
        } loc(#loc126)
      } loc(#loc124)
      cir.scope {
        %4 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc134)
        cir.scope {
          %11 = cir.const #cir.int<0> : !s32i loc(#loc43)
          %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc43)
          cir.store %12, %4 : !u64i, !cir.ptr<!u64i> loc(#loc136)
          cir.for : cond {
            %13 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc45)
            %14 = cir.const #cir.int<100> : !s32i loc(#loc46)
            %15 = cir.cast(integral, %14 : !s32i), !u64i loc(#loc46)
            %16 = cir.cmp(lt, %13, %15) : !u64i, !s32i loc(#loc137)
            %17 = cir.cast(int_to_bool, %16 : !s32i), !cir.bool loc(#loc47)
            cir.condition(%17) loc(#loc47)
          } body {
            cir.scope {
              %13 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc49)
              %14 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc50)
              %15 = cir.ptr_stride(%13 : !cir.ptr<!ty__twoIntsStruct>, %14 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc51)
              %16 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc52)
              %17 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc53)
              %18 = cir.ptr_stride(%17 : !cir.ptr<!ty__twoIntsStruct>, %16 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc53)
              cir.copy %18 to %15 : !cir.ptr<!ty__twoIntsStruct> loc(#loc51)
            } loc(#loc138)
            cir.yield loc(#loc42)
          } step {
            %13 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc54)
            %14 = cir.unary(inc, %13) : !u64i, !u64i loc(#loc55)
            cir.store %14, %4 : !u64i, !cir.ptr<!u64i> loc(#loc139)
            cir.yield loc(#loc135)
          } loc(#loc135)
        } loc(#loc135)
        %5 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc56)
        %6 = cir.const #cir.int<0> : !s32i loc(#loc57)
        %7 = cir.ptr_stride(%5 : !cir.ptr<!ty__twoIntsStruct>, %6 : !s32i), !cir.ptr<!ty__twoIntsStruct> loc(#loc58)
        cir.call @printStructLine(%7) : (!cir.ptr<!ty__twoIntsStruct>) -> () loc(#loc59)
        %8 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc60)
        %9 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc61)
        %10 = cir.cast(bitcast, %9 : !cir.ptr<!ty__twoIntsStruct>), !cir.ptr<!void> loc(#loc61)
        cir.call @free(%10) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc60)
      } loc(#loc133)
    } loc(#loc122)
    cir.return loc(#loc8)
  } loc(#loc120)
  cir.global "private"  external @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_68_goodG2BData : !cir.ptr<!ty__twoIntsStruct> {alignment = 8 : i64} loc(#loc140)
  cir.func no_proto  @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_68b_goodG2BSink() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["data", init] {alignment = 8 : i64} loc(#loc142)
    %1 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_68_goodG2BData : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc140)
    %2 = cir.load %1 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc67)
    cir.store %2, %0 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc142)
    cir.scope {
      %3 = cir.alloca !cir.array<!ty__twoIntsStruct x 100>, !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>, ["source"] {alignment = 16 : i64} loc(#loc144)
      cir.scope {
        %4 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc146)
        cir.scope {
          %5 = cir.const #cir.int<0> : !s32i loc(#loc78)
          %6 = cir.cast(integral, %5 : !s32i), !u64i loc(#loc78)
          cir.store %6, %4 : !u64i, !cir.ptr<!u64i> loc(#loc148)
          cir.for : cond {
            %7 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc80)
            %8 = cir.const #cir.int<100> : !s32i loc(#loc81)
            %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc81)
            %10 = cir.cmp(lt, %7, %9) : !u64i, !s32i loc(#loc149)
            %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc82)
            cir.condition(%11) loc(#loc82)
          } body {
            cir.scope {
              %7 = cir.const #cir.int<0> : !s32i loc(#loc84)
              %8 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc85)
              %9 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc86)
              %10 = cir.ptr_stride(%9 : !cir.ptr<!ty__twoIntsStruct>, %8 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc86)
              %11 = cir.get_member %10[0] {name = "intOne"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc30)
              cir.store %7, %11 : !s32i, !cir.ptr<!s32i> loc(#loc151)
              %12 = cir.const #cir.int<0> : !s32i loc(#loc87)
              %13 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc88)
              %14 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc89)
              %15 = cir.ptr_stride(%14 : !cir.ptr<!ty__twoIntsStruct>, %13 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc89)
              %16 = cir.get_member %15[1] {name = "intTwo"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc34)
              cir.store %12, %16 : !s32i, !cir.ptr<!s32i> loc(#loc152)
            } loc(#loc150)
            cir.yield loc(#loc77)
          } step {
            %7 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc90)
            %8 = cir.unary(inc, %7) : !u64i, !u64i loc(#loc91)
            cir.store %8, %4 : !u64i, !cir.ptr<!u64i> loc(#loc153)
            cir.yield loc(#loc147)
          } loc(#loc147)
        } loc(#loc147)
      } loc(#loc145)
      cir.scope {
        %4 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc155)
        cir.scope {
          %11 = cir.const #cir.int<0> : !s32i loc(#loc98)
          %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc98)
          cir.store %12, %4 : !u64i, !cir.ptr<!u64i> loc(#loc157)
          cir.for : cond {
            %13 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc100)
            %14 = cir.const #cir.int<100> : !s32i loc(#loc101)
            %15 = cir.cast(integral, %14 : !s32i), !u64i loc(#loc101)
            %16 = cir.cmp(lt, %13, %15) : !u64i, !s32i loc(#loc158)
            %17 = cir.cast(int_to_bool, %16 : !s32i), !cir.bool loc(#loc102)
            cir.condition(%17) loc(#loc102)
          } body {
            cir.scope {
              %13 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc104)
              %14 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc105)
              %15 = cir.ptr_stride(%13 : !cir.ptr<!ty__twoIntsStruct>, %14 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc106)
              %16 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc107)
              %17 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc108)
              %18 = cir.ptr_stride(%17 : !cir.ptr<!ty__twoIntsStruct>, %16 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc108)
              cir.copy %18 to %15 : !cir.ptr<!ty__twoIntsStruct> loc(#loc106)
            } loc(#loc159)
            cir.yield loc(#loc97)
          } step {
            %13 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc109)
            %14 = cir.unary(inc, %13) : !u64i, !u64i loc(#loc110)
            cir.store %14, %4 : !u64i, !cir.ptr<!u64i> loc(#loc160)
            cir.yield loc(#loc156)
          } loc(#loc156)
        } loc(#loc156)
        %5 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc111)
        %6 = cir.const #cir.int<0> : !s32i loc(#loc112)
        %7 = cir.ptr_stride(%5 : !cir.ptr<!ty__twoIntsStruct>, %6 : !s32i), !cir.ptr<!ty__twoIntsStruct> loc(#loc113)
        cir.call @printStructLine(%7) : (!cir.ptr<!ty__twoIntsStruct>) -> () loc(#loc114)
        %8 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc115)
        %9 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc116)
        %10 = cir.cast(bitcast, %9 : !cir.ptr<!ty__twoIntsStruct>), !cir.ptr<!void> loc(#loc116)
        cir.call @free(%10) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc115)
      } loc(#loc154)
    } loc(#loc143)
    cir.return loc(#loc65)
  } loc(#loc141)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_68b.c":0:0)
#loc1 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_68b.c":19:1)
#loc2 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_68b.c":19:24)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":40:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":40:63)
#loc5 = loc("/usr/include/stdlib.h":687:1)
#loc6 = loc("/usr/include/stdlib.h":687:32)
#loc7 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_68b.c":26:1)
#loc8 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_68b.c":51:1)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_68b.c":28:5)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_68b.c":28:28)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_68b.c":29:5)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_68b.c":50:5)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_68b.c":30:9)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_68b.c":30:33)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_68b.c":31:9)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_68b.c":39:9)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_68b.c":32:13)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_68b.c":32:20)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_68b.c":34:13)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_68b.c":38:13)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_68b.c":34:22)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_68b.c":34:18)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_68b.c":34:25)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_68b.c":34:29)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_68b.c":34:27)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_68b.c":35:13)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_68b.c":36:36)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_68b.c":36:24)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_68b.c":36:17)
#loc30 = loc("../../../testcasesupport/std_testcase.h":98:9)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_68b.c":37:36)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_68b.c":37:24)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_68b.c":37:17)
#loc34 = loc("../../../testcasesupport/std_testcase.h":99:9)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_68b.c":34:35)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_68b.c":34:34)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_68b.c":40:9)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_68b.c":49:9)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_68b.c":41:13)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_68b.c":41:20)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_68b.c":43:13)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_68b.c":46:13)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_68b.c":43:22)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_68b.c":43:18)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_68b.c":43:25)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_68b.c":43:29)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_68b.c":43:27)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_68b.c":44:13)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_68b.c":45:17)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_68b.c":45:22)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_68b.c":45:23)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_68b.c":45:34)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_68b.c":45:27)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_68b.c":43:35)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_68b.c":43:34)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_68b.c":47:30)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_68b.c":47:35)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_68b.c":47:36)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_68b.c":47:13)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_68b.c":48:13)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_68b.c":48:18)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_68b.c":20:1)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_68b.c":20:24)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_68b.c":58:1)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_68b.c":83:1)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_68b.c":60:5)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_68b.c":60:28)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_68b.c":61:5)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_68b.c":82:5)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_68b.c":62:9)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_68b.c":62:33)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_68b.c":63:9)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_68b.c":71:9)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_68b.c":64:13)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_68b.c":64:20)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_68b.c":66:13)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_68b.c":70:13)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_68b.c":66:22)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_68b.c":66:18)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_68b.c":66:25)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_68b.c":66:29)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_68b.c":66:27)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_68b.c":67:13)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_68b.c":68:36)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_68b.c":68:24)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_68b.c":68:17)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_68b.c":69:36)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_68b.c":69:24)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_68b.c":69:17)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_68b.c":66:35)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_68b.c":66:34)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_68b.c":72:9)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_68b.c":81:9)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_68b.c":73:13)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_68b.c":73:20)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_68b.c":75:13)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_68b.c":78:13)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_68b.c":75:22)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_68b.c":75:18)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_68b.c":75:25)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_68b.c":75:29)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_68b.c":75:27)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_68b.c":76:13)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_68b.c":77:17)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_68b.c":77:22)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_68b.c":77:23)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_68b.c":77:34)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_68b.c":77:27)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_68b.c":75:35)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_68b.c":75:34)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_68b.c":79:30)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_68b.c":79:35)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_68b.c":79:36)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_68b.c":79:13)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_68b.c":80:13)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_68b.c":80:18)
#loc117 = loc(fused[#loc1, #loc2])
#loc118 = loc(fused[#loc3, #loc4])
#loc119 = loc(fused[#loc5, #loc6])
#loc120 = loc(fused[#loc7, #loc8])
#loc121 = loc(fused[#loc9, #loc10])
#loc122 = loc(fused[#loc11, #loc12])
#loc123 = loc(fused[#loc13, #loc14])
#loc124 = loc(fused[#loc15, #loc16])
#loc125 = loc(fused[#loc17, #loc18])
#loc126 = loc(fused[#loc19, #loc20])
#loc127 = loc(fused[#loc22, #loc21])
#loc128 = loc(fused[#loc23, #loc24])
#loc129 = loc(fused[#loc26, #loc20])
#loc130 = loc(fused[#loc29, #loc27])
#loc131 = loc(fused[#loc33, #loc31])
#loc132 = loc(fused[#loc36, #loc35])
#loc133 = loc(fused[#loc37, #loc38])
#loc134 = loc(fused[#loc39, #loc40])
#loc135 = loc(fused[#loc41, #loc42])
#loc136 = loc(fused[#loc44, #loc43])
#loc137 = loc(fused[#loc45, #loc46])
#loc138 = loc(fused[#loc48, #loc42])
#loc139 = loc(fused[#loc55, #loc54])
#loc140 = loc(fused[#loc62, #loc63])
#loc141 = loc(fused[#loc64, #loc65])
#loc142 = loc(fused[#loc66, #loc67])
#loc143 = loc(fused[#loc68, #loc69])
#loc144 = loc(fused[#loc70, #loc71])
#loc145 = loc(fused[#loc72, #loc73])
#loc146 = loc(fused[#loc74, #loc75])
#loc147 = loc(fused[#loc76, #loc77])
#loc148 = loc(fused[#loc79, #loc78])
#loc149 = loc(fused[#loc80, #loc81])
#loc150 = loc(fused[#loc83, #loc77])
#loc151 = loc(fused[#loc86, #loc84])
#loc152 = loc(fused[#loc89, #loc87])
#loc153 = loc(fused[#loc91, #loc90])
#loc154 = loc(fused[#loc92, #loc93])
#loc155 = loc(fused[#loc94, #loc95])
#loc156 = loc(fused[#loc96, #loc97])
#loc157 = loc(fused[#loc99, #loc98])
#loc158 = loc(fused[#loc100, #loc101])
#loc159 = loc(fused[#loc103, #loc97])
#loc160 = loc(fused[#loc110, #loc109])
