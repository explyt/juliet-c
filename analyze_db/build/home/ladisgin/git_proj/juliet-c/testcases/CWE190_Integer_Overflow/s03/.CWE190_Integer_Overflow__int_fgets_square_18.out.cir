!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.struct<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.struct<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.struct<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc62 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":128:10)
#loc63 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":128:14)
#loc64 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":128:20)
#loc65 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":128:32)
#true = #cir.bool<true> : !cir.bool
#loc172 = loc(fused[#loc62, #loc63])
#loc173 = loc(fused[#loc64, #loc65])
!ty__IO_FILE = !cir.struct<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!cir.struct<struct "_IO_FILE">>>, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_fgets_square_18.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i32 = dense<32> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @fgets(!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc150)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc151)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc152)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc153)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"fgets() failed.\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc9)
  cir.func private @printIntLine(!s32i) loc(#loc154)
  cir.func no_proto @CWE190_Integer_Overflow__int_fgets_square_18_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc156)
    %1 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc157)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc158)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc20)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc159)
    cir.goto "source" loc(#loc160)
  ^bb1:  // no predecessors
    cir.label "source" loc(#loc24)
    %4 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc157)
    cir.store %4, %1 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc157)
    cir.scope {
      %9 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc27)
      %10 = cir.const #cir.int<3> : !s32i loc(#loc28)
      %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc28)
      %12 = cir.const #cir.int<4> : !u64i loc(#loc28)
      %13 = cir.binop(mul, %11, %12) : !u64i loc(#loc28)
      %14 = cir.const #cir.int<2> : !s32i loc(#loc28)
      %15 = cir.cast(integral, %14 : !s32i), !u64i loc(#loc28)
      %16 = cir.binop(add, %13, %15) : !u64i loc(#loc28)
      %17 = cir.cast(integral, %16 : !u64i), !s32i loc(#loc28)
      %18 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc151)
      %19 = cir.load %18 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc29)
      %20 = cir.call @fgets(%9, %17, %19) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc30)
      %21 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc31)
      %22 = cir.cast(bitcast, %21 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc31)
      %23 = cir.cmp(ne, %20, %22) : !cir.ptr<!s8i>, !cir.bool loc(#loc162)
      cir.if %23 {
        %24 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc35)
        %25 = cir.call @atoi(%24) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc36)
        cir.store %25, %0 : !s32i, !cir.ptr<!s32i> loc(#loc164)
      } else {
        %24 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc9)
        %25 = cir.cast(array_to_ptrdecay, %24 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc9)
        cir.call @printLine(%25) : (!cir.ptr<!s8i>) -> () loc(#loc39)
      } loc(#loc163)
    } loc(#loc161)
    cir.goto "sink" loc(#loc165)
  ^bb2:  // no predecessors
    cir.label "sink" loc(#loc42)
    %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc43)
    %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc19)
    %7 = cir.binop(mul, %5, %6) nsw : !s32i loc(#loc43)
    cir.store %7, %2 : !s32i, !cir.ptr<!s32i> loc(#loc158)
    %8 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc44)
    cir.call @printIntLine(%8) : (!s32i) -> () loc(#loc45)
    cir.return loc(#loc13)
  } loc(#loc155)
  cir.func no_proto @CWE190_Integer_Overflow__int_fgets_square_18_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc167)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc48)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc168)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc50)
    cir.return loc(#loc47)
  } loc(#loc166)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc169)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc170)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc56)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc57)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc58)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc59)
  cir.func @main(%arg0: !s32i loc(fused[#loc62, #loc63]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc64, #loc65])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc172)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc173)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc61)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc66)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc66)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc67)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc68)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc68)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc69)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc56)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc56)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc70)
    %8 = cir.get_global @CWE190_Integer_Overflow__int_fgets_square_18_good : !cir.ptr<!cir.func<!void ()>> loc(#loc174)
    cir.call @CWE190_Integer_Overflow__int_fgets_square_18_good() : () -> () loc(#loc71)
    %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc57)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc57)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc73)
    %11 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc58)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc58)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc74)
    %13 = cir.get_global @CWE190_Integer_Overflow__int_fgets_square_18_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc175)
    cir.call @CWE190_Integer_Overflow__int_fgets_square_18_bad() : () -> () loc(#loc75)
    %14 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc59)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc59)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc77)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc78)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc176)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc176)
    cir.return %17 : !s32i loc(#loc176)
  } loc(#loc171)
  cir.func private @sqrt(!cir.double) -> !cir.double extra(#fn_attr) loc(#loc80)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc81)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc178)
    %1 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc179)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc88)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc180)
    cir.goto "source" loc(#loc181)
  ^bb1:  // no predecessors
    cir.label "source" loc(#loc92)
    %3 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc179)
    cir.store %3, %1 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc179)
    cir.scope {
      %4 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc95)
      %5 = cir.const #cir.int<3> : !s32i loc(#loc96)
      %6 = cir.cast(integral, %5 : !s32i), !u64i loc(#loc96)
      %7 = cir.const #cir.int<4> : !u64i loc(#loc96)
      %8 = cir.binop(mul, %6, %7) : !u64i loc(#loc96)
      %9 = cir.const #cir.int<2> : !s32i loc(#loc96)
      %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc96)
      %11 = cir.binop(add, %8, %10) : !u64i loc(#loc96)
      %12 = cir.cast(integral, %11 : !u64i), !s32i loc(#loc96)
      %13 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc151)
      %14 = cir.load %13 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc97)
      %15 = cir.call @fgets(%4, %12, %14) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc98)
      %16 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc99)
      %17 = cir.cast(bitcast, %16 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc99)
      %18 = cir.cmp(ne, %15, %17) : !cir.ptr<!s8i>, !cir.bool loc(#loc183)
      cir.if %18 {
        %19 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc103)
        %20 = cir.call @atoi(%19) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc104)
        cir.store %20, %0 : !s32i, !cir.ptr<!s32i> loc(#loc185)
      } else {
        %19 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc107)
        %20 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc107)
        cir.call @printLine(%20) : (!cir.ptr<!s8i>) -> () loc(#loc108)
      } loc(#loc184)
    } loc(#loc182)
    cir.goto "sink" loc(#loc186)
  ^bb2:  // no predecessors
    cir.label "sink" loc(#loc111)
    cir.scope {
      %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc114)
      %5 = cir.const #cir.int<2147483647> : !s32i loc(#loc115)
      %6 = cir.unary(minus, %5) : !s32i, !s32i loc(#loc115)
      %7 = cir.const #cir.int<1> : !s32i loc(#loc115)
      %8 = cir.binop(sub, %6, %7) nsw : !s32i loc(#loc115)
      %9 = cir.cmp(gt, %4, %8) : !s32i, !cir.bool loc(#loc188)
      %10 = cir.ternary(%9, true {
        %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc117)
        %12 = cir.abs %11 poison : !s32i loc(#loc118)
        %13 = cir.cast(integral, %12 : !s32i), !s64i loc(#loc118)
        %14 = cir.get_global @sqrt : !cir.ptr<!cir.func<!cir.double (!cir.double)>> loc(#loc119)
        %15 = cir.const #cir.int<2147483647> : !s32i loc(#loc120)
        %16 = cir.cast(int_to_float, %15 : !s32i), !cir.double loc(#loc120)
        %17 = cir.call @sqrt(%16) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc119)
        %18 = cir.cast(float_to_int, %17 : !cir.double), !s64i loc(#loc119)
        %19 = cir.cmp(lt, %13, %18) : !s64i, !cir.bool loc(#loc189)
        %20 = cir.ternary(%19, true {
          %21 = cir.const #true loc(#loc116)
          cir.yield %21 : !cir.bool loc(#loc116)
        }, false {
          %21 = cir.const #false loc(#loc116)
          cir.yield %21 : !cir.bool loc(#loc116)
        }) : (!cir.bool) -> !cir.bool loc(#loc116)
        cir.yield %20 : !cir.bool loc(#loc116)
      }, false {
        %11 = cir.const #false loc(#loc116)
        cir.yield %11 : !cir.bool loc(#loc116)
      }) : (!cir.bool) -> !cir.bool loc(#loc116)
      cir.if %10 {
        %11 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc191)
        %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc127)
        %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc126)
        %14 = cir.binop(mul, %12, %13) nsw : !s32i loc(#loc127)
        cir.store %14, %11 : !s32i, !cir.ptr<!s32i> loc(#loc191)
        %15 = cir.load %11 : !cir.ptr<!s32i>, !s32i loc(#loc128)
        cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc129)
      } else {
        %11 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc81)
        %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc81)
        cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc130)
      } loc(#loc190)
    } loc(#loc187)
    cir.return loc(#loc83)
  } loc(#loc177)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc193)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc194)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc137)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc195)
    cir.goto "source" loc(#loc196)
  ^bb1:  // no predecessors
    cir.label "source" loc(#loc141)
    %3 = cir.const #cir.int<2> : !s32i loc(#loc142)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc197)
    cir.goto "sink" loc(#loc198)
  ^bb2:  // no predecessors
    cir.label "sink" loc(#loc146)
    %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc147)
    %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc136)
    %6 = cir.binop(mul, %4, %5) nsw : !s32i loc(#loc147)
    cir.store %6, %1 : !s32i, !cir.ptr<!s32i> loc(#loc194)
    %7 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc148)
    cir.call @printIntLine(%7) : (!s32i) -> () loc(#loc149)
    cir.return loc(#loc132)
  } loc(#loc192)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_fgets_square_18.c":0:0)
#loc1 = loc("/usr/include/stdio.h":654:1)
#loc2 = loc("/usr/include/stdio.h":655:59)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("/usr/include/stdlib.h":105:1)
#loc6 = loc("/usr/include/stdlib.h":106:33)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":43:23)
#loc10 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc11 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc12 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":26:1)
#loc13 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":53:1)
#loc14 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":28:5)
#loc15 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":28:9)
#loc16 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":34:9)
#loc17 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":34:45)
#loc18 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":50:9)
#loc19 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":50:29)
#loc20 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":30:12)
#loc21 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":30:5)
#loc22 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":31:5)
#loc23 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":31:10)
#loc24 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":32:1)
#loc25 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":36:9)
#loc26 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":44:9)
#loc27 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":36:19)
#loc28 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":36:32)
#loc29 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":36:49)
#loc30 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":36:13)
#loc31 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":36:59)
#loc32 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":37:9)
#loc33 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":40:9)
#loc34 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":42:9)
#loc35 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":39:25)
#loc36 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":39:20)
#loc37 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":39:13)
#loc38 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":39:36)
#loc39 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":43:13)
#loc40 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":46:5)
#loc41 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":46:10)
#loc42 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":47:1)
#loc43 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":50:22)
#loc44 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":51:22)
#loc45 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":51:9)
#loc46 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":113:1)
#loc47 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":117:1)
#loc48 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":115:5)
#loc49 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":115:13)
#loc50 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":116:5)
#loc51 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":116:13)
#loc52 = loc("/usr/include/stdlib.h":575:1)
#loc53 = loc("/usr/include/stdlib.h":575:41)
#loc54 = loc("/usr/include/time.h":76:1)
#loc55 = loc("/usr/include/time.h":76:38)
#loc56 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":133:15)
#loc57 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":135:15)
#loc58 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":138:15)
#loc59 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":140:15)
#loc60 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":128:1)
#loc61 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":143:1)
#loc66 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":129:1)
#loc67 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":131:27)
#loc68 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":131:22)
#loc69 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":131:5)
#loc70 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":133:5)
#loc71 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":134:5)
#loc72 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":134:55)
#loc73 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":135:5)
#loc74 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":138:5)
#loc75 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":139:5)
#loc76 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":139:54)
#loc77 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":140:5)
#loc78 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":142:12)
#loc79 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":142:5)
#loc80 = loc("/usr/include/bits/mathcalls.h":158:1)
#loc81 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":90:19)
#loc82 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":60:1)
#loc83 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":92:1)
#loc84 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":62:5)
#loc85 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":62:9)
#loc86 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":68:9)
#loc87 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":68:45)
#loc88 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":64:12)
#loc89 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":64:5)
#loc90 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":65:5)
#loc91 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":65:10)
#loc92 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":66:1)
#loc93 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":70:9)
#loc94 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":78:9)
#loc95 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":70:19)
#loc96 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":70:32)
#loc97 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":70:49)
#loc98 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":70:13)
#loc99 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":70:59)
#loc100 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":71:9)
#loc101 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":74:9)
#loc102 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":76:9)
#loc103 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":73:25)
#loc104 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":73:20)
#loc105 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":73:13)
#loc106 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":73:36)
#loc107 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":77:23)
#loc108 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":77:13)
#loc109 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":80:5)
#loc110 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":80:10)
#loc111 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":81:1)
#loc112 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":83:5)
#loc113 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":91:5)
#loc114 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":83:9)
#loc115 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":83:16)
#loc116 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":83:24)
#loc117 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":83:31)
#loc118 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":83:27)
#loc119 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":83:45)
#loc120 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":83:58)
#loc121 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":83:65)
#loc122 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":84:5)
#loc123 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":87:5)
#loc124 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":89:5)
#loc125 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":85:9)
#loc126 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":85:29)
#loc127 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":85:22)
#loc128 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":86:22)
#loc129 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":86:9)
#loc130 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":90:9)
#loc131 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":95:1)
#loc132 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":111:1)
#loc133 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":97:5)
#loc134 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":97:9)
#loc135 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":108:9)
#loc136 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":108:29)
#loc137 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":99:12)
#loc138 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":99:5)
#loc139 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":100:5)
#loc140 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":100:10)
#loc141 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":101:1)
#loc142 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":103:12)
#loc143 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":103:5)
#loc144 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":104:5)
#loc145 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":104:10)
#loc146 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":105:1)
#loc147 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":108:22)
#loc148 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":109:22)
#loc149 = loc("CWE190_Integer_Overflow__int_fgets_square_18.c":109:9)
#loc150 = loc(fused[#loc1, #loc2])
#loc151 = loc(fused[#loc3, #loc4])
#loc152 = loc(fused[#loc5, #loc6])
#loc153 = loc(fused[#loc7, #loc8])
#loc154 = loc(fused[#loc10, #loc11])
#loc155 = loc(fused[#loc12, #loc13])
#loc156 = loc(fused[#loc14, #loc15])
#loc157 = loc(fused[#loc16, #loc17])
#loc158 = loc(fused[#loc18, #loc19])
#loc159 = loc(fused[#loc21, #loc20])
#loc160 = loc(fused[#loc22, #loc23])
#loc161 = loc(fused[#loc25, #loc26])
#loc162 = loc(fused[#loc30, #loc31])
#loc163 = loc(fused[#loc32, #loc33, #loc34, #loc26])
#loc164 = loc(fused[#loc37, #loc38])
#loc165 = loc(fused[#loc40, #loc41])
#loc166 = loc(fused[#loc46, #loc47])
#loc167 = loc(fused[#loc48, #loc49])
#loc168 = loc(fused[#loc50, #loc51])
#loc169 = loc(fused[#loc52, #loc53])
#loc170 = loc(fused[#loc54, #loc55])
#loc171 = loc(fused[#loc60, #loc61])
#loc174 = loc(fused[#loc71, #loc72])
#loc175 = loc(fused[#loc75, #loc76])
#loc176 = loc(fused[#loc79, #loc78])
#loc177 = loc(fused[#loc82, #loc83])
#loc178 = loc(fused[#loc84, #loc85])
#loc179 = loc(fused[#loc86, #loc87])
#loc180 = loc(fused[#loc89, #loc88])
#loc181 = loc(fused[#loc90, #loc91])
#loc182 = loc(fused[#loc93, #loc94])
#loc183 = loc(fused[#loc98, #loc99])
#loc184 = loc(fused[#loc100, #loc101, #loc102, #loc94])
#loc185 = loc(fused[#loc105, #loc106])
#loc186 = loc(fused[#loc109, #loc110])
#loc187 = loc(fused[#loc112, #loc113])
#loc188 = loc(fused[#loc114, #loc115])
#loc189 = loc(fused[#loc118, #loc121])
#loc190 = loc(fused[#loc122, #loc123, #loc124, #loc113])
#loc191 = loc(fused[#loc125, #loc126])
#loc192 = loc(fused[#loc131, #loc132])
#loc193 = loc(fused[#loc133, #loc134])
#loc194 = loc(fused[#loc135, #loc136])
#loc195 = loc(fused[#loc138, #loc137])
#loc196 = loc(fused[#loc139, #loc140])
#loc197 = loc(fused[#loc143, #loc142])
#loc198 = loc(fused[#loc144, #loc145])
