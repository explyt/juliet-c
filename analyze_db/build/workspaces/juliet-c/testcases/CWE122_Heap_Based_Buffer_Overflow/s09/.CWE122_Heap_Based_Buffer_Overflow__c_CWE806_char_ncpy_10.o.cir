!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_10.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little", "dlti.mangling_mode" = "e">} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc177)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc178)
  cir.global "private" external @globalTrue : !s32i {alignment = 4 : i64} loc(#loc179)
  cir.func private @strncpy(!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc180)
  cir.func private @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc181)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc182)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc183)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_10_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc185)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc186)
    %2 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc21)
    %3 = cir.const #cir.int<100> : !s32i loc(#loc22)
    %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc22)
    %5 = cir.const #cir.int<1> : !u64i loc(#loc187)
    %6 = cir.binop(mul, %4, %5) : !u64i loc(#loc188)
    %7 = cir.call @malloc(%6) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc21)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc189)
    cir.store %8, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc190)
    cir.br ^bb1 loc(#loc191)
  ^bb1:  // pred: ^bb0
    %9 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc29)
    %10 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc30)
    %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc30)
    %12 = cir.cmp(eq, %9, %11) : !cir.ptr<!s8i>, !cir.bool loc(#loc192)
    cir.brcond %12 ^bb2, ^bb3 loc(#loc193)
  ^bb2:  // pred: ^bb1
    %13 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc32)
    %14 = cir.const #cir.int<1> : !s32i loc(#loc33)
    %15 = cir.unary(minus, %14) nsw : !s32i, !s32i loc(#loc34)
    cir.call @exit(%15) : (!s32i) -> () extra(#fn_attr) loc(#loc32)
    cir.br ^bb3 loc(#loc28)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc28)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc194)
  ^bb5:  // pred: ^bb4
    %16 = cir.get_global @globalTrue : !cir.ptr<!s32i> loc(#loc179)
    %17 = cir.load %16 : !cir.ptr<!s32i>, !s32i loc(#loc37)
    %18 = cir.cast(int_to_bool, %17 : !s32i), !cir.bool loc(#loc37)
    cir.brcond %18 ^bb6, ^bb7 loc(#loc195)
  ^bb6:  // pred: ^bb5
    %19 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc39)
    %20 = cir.cast(bitcast, %19 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc39)
    %21 = cir.const #cir.int<65> : !s32i loc(#loc40)
    %22 = cir.const #cir.int<100> : !s32i loc(#loc41)
    %23 = cir.const #cir.int<1> : !s32i loc(#loc42)
    %24 = cir.binop(sub, %22, %23) nsw : !s32i loc(#loc41)
    %25 = cir.cast(integral, %24 : !s32i), !u64i loc(#loc41)
    cir.libc.memset %25 bytes from %20 set to %21 : !cir.ptr<!void>, !s32i, !u64i loc(#loc196)
    %26 = cir.const #cir.int<0> : !s32i loc(#loc45)
    %27 = cir.cast(integral, %26 : !s32i), !s8i loc(#loc45)
    %28 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc46)
    %29 = cir.const #cir.int<100> : !s32i loc(#loc47)
    %30 = cir.const #cir.int<1> : !s32i loc(#loc48)
    %31 = cir.binop(sub, %29, %30) nsw : !s32i loc(#loc47)
    %32 = cir.ptr_stride(%28 : !cir.ptr<!s8i>, %31 : !s32i), !cir.ptr<!s8i> loc(#loc49)
    cir.store %27, %32 : !s8i, !cir.ptr<!s8i> loc(#loc197)
    cir.br ^bb7 loc(#loc36)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc36)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc198)
  ^bb9:  // pred: ^bb8
    %33 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc185)
    cir.store %33, %0 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc185)
    %34 = cir.get_global @strncpy : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i) -> !cir.ptr<!s8i>>> loc(#loc52)
    %35 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc53)
    %36 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc54)
    %37 = cir.get_global @strlen : !cir.ptr<!cir.func<(!cir.ptr<!s8i>) -> !u64i>> loc(#loc55)
    %38 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc56)
    %39 = cir.call @strlen(%38) : (!cir.ptr<!s8i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc55)
    %40 = cir.call @strncpy(%35, %36, %39) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc52)
    %41 = cir.const #cir.int<0> : !s32i loc(#loc57)
    %42 = cir.cast(integral, %41 : !s32i), !s8i loc(#loc57)
    %43 = cir.const #cir.int<50> : !s32i loc(#loc58)
    %44 = cir.const #cir.int<1> : !s32i loc(#loc59)
    %45 = cir.binop(sub, %43, %44) nsw : !s32i loc(#loc58)
    %46 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc60)
    %47 = cir.ptr_stride(%46 : !cir.ptr<!s8i>, %45 : !s32i), !cir.ptr<!s8i> loc(#loc60)
    cir.store %42, %47 : !s8i, !cir.ptr<!s8i> loc(#loc199)
    %48 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc61)
    cir.call @printLine(%48) : (!cir.ptr<!s8i>) -> () loc(#loc62)
    %49 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc63)
    %50 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc64)
    %51 = cir.cast(bitcast, %50 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc64)
    cir.call @free(%51) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc63)
    cir.br ^bb10 loc(#loc51)
  ^bb10:  // pred: ^bb9
    cir.return loc(#loc16)
  } loc(#loc184)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_10_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<()>> loc(#loc201)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc67)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<()>> loc(#loc202)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc69)
    cir.return loc(#loc66)
  } loc(#loc200)
  cir.global "private" external @globalFalse : !s32i {alignment = 4 : i64} loc(#loc203)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc73)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc205)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc206)
    %2 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc80)
    %3 = cir.const #cir.int<100> : !s32i loc(#loc81)
    %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc81)
    %5 = cir.const #cir.int<1> : !u64i loc(#loc207)
    %6 = cir.binop(mul, %4, %5) : !u64i loc(#loc208)
    %7 = cir.call @malloc(%6) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc80)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc209)
    cir.store %8, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc210)
    cir.br ^bb1 loc(#loc211)
  ^bb1:  // pred: ^bb0
    %9 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc88)
    %10 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc89)
    %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc89)
    %12 = cir.cmp(eq, %9, %11) : !cir.ptr<!s8i>, !cir.bool loc(#loc212)
    cir.brcond %12 ^bb2, ^bb3 loc(#loc213)
  ^bb2:  // pred: ^bb1
    %13 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc91)
    %14 = cir.const #cir.int<1> : !s32i loc(#loc92)
    %15 = cir.unary(minus, %14) nsw : !s32i, !s32i loc(#loc93)
    cir.call @exit(%15) : (!s32i) -> () extra(#fn_attr) loc(#loc91)
    cir.br ^bb3 loc(#loc87)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc87)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc214)
  ^bb5:  // pred: ^bb4
    %16 = cir.get_global @globalFalse : !cir.ptr<!s32i> loc(#loc203)
    %17 = cir.load %16 : !cir.ptr<!s32i>, !s32i loc(#loc96)
    %18 = cir.cast(int_to_bool, %17 : !s32i), !cir.bool loc(#loc96)
    cir.brcond %18 ^bb6, ^bb7 loc(#loc215)
  ^bb6:  // pred: ^bb5
    %19 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc73)
    %20 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc73)
    cir.call @printLine(%20) : (!cir.ptr<!s8i>) -> () loc(#loc100)
    cir.br ^bb8 loc(#loc98)
  ^bb7:  // pred: ^bb5
    %21 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc101)
    %22 = cir.cast(bitcast, %21 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc101)
    %23 = cir.const #cir.int<65> : !s32i loc(#loc102)
    %24 = cir.const #cir.int<50> : !s32i loc(#loc103)
    %25 = cir.const #cir.int<1> : !s32i loc(#loc104)
    %26 = cir.binop(sub, %24, %25) nsw : !s32i loc(#loc103)
    %27 = cir.cast(integral, %26 : !s32i), !u64i loc(#loc103)
    cir.libc.memset %27 bytes from %22 set to %23 : !cir.ptr<!void>, !s32i, !u64i loc(#loc216)
    %28 = cir.const #cir.int<0> : !s32i loc(#loc107)
    %29 = cir.cast(integral, %28 : !s32i), !s8i loc(#loc107)
    %30 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc108)
    %31 = cir.const #cir.int<50> : !s32i loc(#loc109)
    %32 = cir.const #cir.int<1> : !s32i loc(#loc110)
    %33 = cir.binop(sub, %31, %32) nsw : !s32i loc(#loc109)
    %34 = cir.ptr_stride(%30 : !cir.ptr<!s8i>, %33 : !s32i), !cir.ptr<!s8i> loc(#loc111)
    cir.store %29, %34 : !s8i, !cir.ptr<!s8i> loc(#loc217)
    cir.br ^bb8 loc(#loc95)
  ^bb8:  // 2 preds: ^bb6, ^bb7
    cir.br ^bb9 loc(#loc95)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc218)
  ^bb10:  // pred: ^bb9
    %35 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc205)
    cir.store %35, %0 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc205)
    %36 = cir.get_global @strncpy : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i) -> !cir.ptr<!s8i>>> loc(#loc114)
    %37 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc115)
    %38 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc116)
    %39 = cir.get_global @strlen : !cir.ptr<!cir.func<(!cir.ptr<!s8i>) -> !u64i>> loc(#loc117)
    %40 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc118)
    %41 = cir.call @strlen(%40) : (!cir.ptr<!s8i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc117)
    %42 = cir.call @strncpy(%37, %38, %41) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc114)
    %43 = cir.const #cir.int<0> : !s32i loc(#loc119)
    %44 = cir.cast(integral, %43 : !s32i), !s8i loc(#loc119)
    %45 = cir.const #cir.int<50> : !s32i loc(#loc120)
    %46 = cir.const #cir.int<1> : !s32i loc(#loc121)
    %47 = cir.binop(sub, %45, %46) nsw : !s32i loc(#loc120)
    %48 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc122)
    %49 = cir.ptr_stride(%48 : !cir.ptr<!s8i>, %47 : !s32i), !cir.ptr<!s8i> loc(#loc122)
    cir.store %44, %49 : !s8i, !cir.ptr<!s8i> loc(#loc219)
    %50 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc123)
    cir.call @printLine(%50) : (!cir.ptr<!s8i>) -> () loc(#loc124)
    %51 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc125)
    %52 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc126)
    %53 = cir.cast(bitcast, %52 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc126)
    cir.call @free(%53) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc125)
    cir.br ^bb11 loc(#loc113)
  ^bb11:  // pred: ^bb10
    cir.return loc(#loc75)
  } loc(#loc204)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc221)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc222)
    %2 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc133)
    %3 = cir.const #cir.int<100> : !s32i loc(#loc134)
    %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc134)
    %5 = cir.const #cir.int<1> : !u64i loc(#loc223)
    %6 = cir.binop(mul, %4, %5) : !u64i loc(#loc224)
    %7 = cir.call @malloc(%6) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc133)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc225)
    cir.store %8, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc226)
    cir.br ^bb1 loc(#loc227)
  ^bb1:  // pred: ^bb0
    %9 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc141)
    %10 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc142)
    %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc142)
    %12 = cir.cmp(eq, %9, %11) : !cir.ptr<!s8i>, !cir.bool loc(#loc228)
    cir.brcond %12 ^bb2, ^bb3 loc(#loc229)
  ^bb2:  // pred: ^bb1
    %13 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc144)
    %14 = cir.const #cir.int<1> : !s32i loc(#loc145)
    %15 = cir.unary(minus, %14) nsw : !s32i, !s32i loc(#loc146)
    cir.call @exit(%15) : (!s32i) -> () extra(#fn_attr) loc(#loc144)
    cir.br ^bb3 loc(#loc140)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc140)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc230)
  ^bb5:  // pred: ^bb4
    %16 = cir.get_global @globalTrue : !cir.ptr<!s32i> loc(#loc179)
    %17 = cir.load %16 : !cir.ptr<!s32i>, !s32i loc(#loc149)
    %18 = cir.cast(int_to_bool, %17 : !s32i), !cir.bool loc(#loc149)
    cir.brcond %18 ^bb6, ^bb7 loc(#loc231)
  ^bb6:  // pred: ^bb5
    %19 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc151)
    %20 = cir.cast(bitcast, %19 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc151)
    %21 = cir.const #cir.int<65> : !s32i loc(#loc152)
    %22 = cir.const #cir.int<50> : !s32i loc(#loc153)
    %23 = cir.const #cir.int<1> : !s32i loc(#loc154)
    %24 = cir.binop(sub, %22, %23) nsw : !s32i loc(#loc153)
    %25 = cir.cast(integral, %24 : !s32i), !u64i loc(#loc153)
    cir.libc.memset %25 bytes from %20 set to %21 : !cir.ptr<!void>, !s32i, !u64i loc(#loc232)
    %26 = cir.const #cir.int<0> : !s32i loc(#loc157)
    %27 = cir.cast(integral, %26 : !s32i), !s8i loc(#loc157)
    %28 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc158)
    %29 = cir.const #cir.int<50> : !s32i loc(#loc159)
    %30 = cir.const #cir.int<1> : !s32i loc(#loc160)
    %31 = cir.binop(sub, %29, %30) nsw : !s32i loc(#loc159)
    %32 = cir.ptr_stride(%28 : !cir.ptr<!s8i>, %31 : !s32i), !cir.ptr<!s8i> loc(#loc161)
    cir.store %27, %32 : !s8i, !cir.ptr<!s8i> loc(#loc233)
    cir.br ^bb7 loc(#loc148)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc148)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc234)
  ^bb9:  // pred: ^bb8
    %33 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc221)
    cir.store %33, %0 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc221)
    %34 = cir.get_global @strncpy : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i) -> !cir.ptr<!s8i>>> loc(#loc164)
    %35 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc165)
    %36 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc166)
    %37 = cir.get_global @strlen : !cir.ptr<!cir.func<(!cir.ptr<!s8i>) -> !u64i>> loc(#loc167)
    %38 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc168)
    %39 = cir.call @strlen(%38) : (!cir.ptr<!s8i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc167)
    %40 = cir.call @strncpy(%35, %36, %39) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc164)
    %41 = cir.const #cir.int<0> : !s32i loc(#loc169)
    %42 = cir.cast(integral, %41 : !s32i), !s8i loc(#loc169)
    %43 = cir.const #cir.int<50> : !s32i loc(#loc170)
    %44 = cir.const #cir.int<1> : !s32i loc(#loc171)
    %45 = cir.binop(sub, %43, %44) nsw : !s32i loc(#loc170)
    %46 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc172)
    %47 = cir.ptr_stride(%46 : !cir.ptr<!s8i>, %45 : !s32i), !cir.ptr<!s8i> loc(#loc172)
    cir.store %42, %47 : !s8i, !cir.ptr<!s8i> loc(#loc235)
    %48 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc173)
    cir.call @printLine(%48) : (!cir.ptr<!s8i>) -> () loc(#loc174)
    %49 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc175)
    %50 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc176)
    %51 = cir.cast(bitcast, %50 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc176)
    cir.call @free(%51) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc175)
    cir.br ^bb10 loc(#loc163)
  ^bb10:  // pred: ^bb9
    cir.return loc(#loc128)
  } loc(#loc220)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_10.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("../../../testcasesupport/std_testcase.h":116:1)
#loc6 = loc("../../../testcasesupport/std_testcase.h":116:12)
#loc7 = loc("/usr/include/string.h":144:1)
#loc8 = loc("/usr/include/string.h":146:14)
#loc9 = loc("/usr/include/string.h":407:1)
#loc10 = loc("/usr/include/string.h":408:33)
#loc11 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc12 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc13 = loc("/usr/include/stdlib.h":687:1)
#loc14 = loc("/usr/include/stdlib.h":687:32)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_10.c":23:1)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_10.c":42:1)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_10.c":35:9)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_10.c":35:25)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_10.c":25:5)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_10.c":25:12)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_10.c":26:20)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_10.c":26:27)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_10.c":26:31)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_10.c":26:42)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_10.c":26:43)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_10.c":26:5)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_10.c":27:5)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_10.c":27:33)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_10.c":27:9)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_10.c":27:17)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_10.c":27:23)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_10.c":27:24)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_10.c":27:30)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_10.c":27:29)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_10.c":28:5)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_10.c":33:5)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_10.c":28:8)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_10.c":29:5)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_10.c":31:16)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_10.c":31:22)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_10.c":31:27)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_10.c":31:31)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_10.c":31:9)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_10.c":31:32)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_10.c":32:23)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_10.c":32:9)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_10.c":32:14)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_10.c":32:18)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_10.c":32:19)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_10.c":34:5)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_10.c":41:5)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_10.c":37:9)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_10.c":37:17)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_10.c":37:23)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_10.c":37:29)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_10.c":37:36)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_10.c":38:22)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_10.c":38:14)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_10.c":38:17)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_10.c":38:9)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_10.c":39:19)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_10.c":39:9)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_10.c":40:9)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_10.c":40:14)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_10.c":97:1)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_10.c":101:1)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_10.c":99:5)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_10.c":99:14)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_10.c":100:5)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_10.c":100:14)
#loc71 = loc("../../../testcasesupport/std_testcase.h":117:1)
#loc72 = loc("../../../testcasesupport/std_testcase.h":117:12)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_10.c":57:19)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_10.c":49:1)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_10.c":73:1)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_10.c":66:9)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_10.c":66:25)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_10.c":51:5)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_10.c":51:12)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_10.c":52:20)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_10.c":52:27)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_10.c":52:31)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_10.c":52:42)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_10.c":52:43)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_10.c":52:5)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_10.c":53:5)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_10.c":53:33)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_10.c":53:9)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_10.c":53:17)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_10.c":53:23)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_10.c":53:24)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_10.c":53:30)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_10.c":53:29)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_10.c":54:5)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_10.c":64:5)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_10.c":54:8)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_10.c":55:5)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_10.c":58:5)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_10.c":60:5)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_10.c":57:9)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_10.c":62:16)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_10.c":62:22)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_10.c":62:27)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_10.c":62:30)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_10.c":62:9)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_10.c":62:31)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_10.c":63:22)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_10.c":63:9)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_10.c":63:14)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_10.c":63:17)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_10.c":63:18)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_10.c":65:5)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_10.c":72:5)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_10.c":68:9)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_10.c":68:17)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_10.c":68:23)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_10.c":68:29)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_10.c":68:36)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_10.c":69:22)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_10.c":69:14)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_10.c":69:17)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_10.c":69:9)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_10.c":70:19)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_10.c":70:9)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_10.c":71:9)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_10.c":71:14)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_10.c":76:1)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_10.c":95:1)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_10.c":88:9)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_10.c":88:25)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_10.c":78:5)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_10.c":78:12)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_10.c":79:20)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_10.c":79:27)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_10.c":79:31)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_10.c":79:42)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_10.c":79:43)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_10.c":79:5)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_10.c":80:5)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_10.c":80:33)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_10.c":80:9)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_10.c":80:17)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_10.c":80:23)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_10.c":80:24)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_10.c":80:30)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_10.c":80:29)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_10.c":81:5)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_10.c":86:5)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_10.c":81:8)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_10.c":82:5)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_10.c":84:16)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_10.c":84:22)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_10.c":84:27)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_10.c":84:30)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_10.c":84:9)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_10.c":84:31)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_10.c":85:22)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_10.c":85:9)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_10.c":85:14)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_10.c":85:17)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_10.c":85:18)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_10.c":87:5)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_10.c":94:5)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_10.c":90:9)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_10.c":90:17)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_10.c":90:23)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_10.c":90:29)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_10.c":90:36)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_10.c":91:22)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_10.c":91:14)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_10.c":91:17)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_10.c":91:9)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_10.c":92:19)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_10.c":92:9)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_10.c":93:9)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_10.c":93:14)
#loc177 = loc(fused[#loc1, #loc2])
#loc178 = loc(fused[#loc3, #loc4])
#loc179 = loc(fused[#loc5, #loc6])
#loc180 = loc(fused[#loc7, #loc8])
#loc181 = loc(fused[#loc9, #loc10])
#loc182 = loc(fused[#loc11, #loc12])
#loc183 = loc(fused[#loc13, #loc14])
#loc184 = loc(fused[#loc15, #loc16])
#loc185 = loc(fused[#loc17, #loc18])
#loc186 = loc(fused[#loc19, #loc20])
#loc187 = loc(fused[#loc23, #loc24])
#loc188 = loc(fused[#loc22, #loc24])
#loc189 = loc(fused[#loc21, #loc25])
#loc190 = loc(fused[#loc26, #loc25])
#loc191 = loc(fused[#loc27, #loc28])
#loc192 = loc(fused[#loc29, #loc30])
#loc193 = loc(fused[#loc31, #loc28])
#loc194 = loc(fused[#loc35, #loc36])
#loc195 = loc(fused[#loc38, #loc36])
#loc196 = loc(fused[#loc43, #loc44])
#loc197 = loc(fused[#loc46, #loc45])
#loc198 = loc(fused[#loc50, #loc51])
#loc199 = loc(fused[#loc60, #loc57])
#loc200 = loc(fused[#loc65, #loc66])
#loc201 = loc(fused[#loc67, #loc68])
#loc202 = loc(fused[#loc69, #loc70])
#loc203 = loc(fused[#loc71, #loc72])
#loc204 = loc(fused[#loc74, #loc75])
#loc205 = loc(fused[#loc76, #loc77])
#loc206 = loc(fused[#loc78, #loc79])
#loc207 = loc(fused[#loc82, #loc83])
#loc208 = loc(fused[#loc81, #loc83])
#loc209 = loc(fused[#loc80, #loc84])
#loc210 = loc(fused[#loc85, #loc84])
#loc211 = loc(fused[#loc86, #loc87])
#loc212 = loc(fused[#loc88, #loc89])
#loc213 = loc(fused[#loc90, #loc87])
#loc214 = loc(fused[#loc94, #loc95])
#loc215 = loc(fused[#loc97, #loc98, #loc99, #loc95])
#loc216 = loc(fused[#loc105, #loc106])
#loc217 = loc(fused[#loc108, #loc107])
#loc218 = loc(fused[#loc112, #loc113])
#loc219 = loc(fused[#loc122, #loc119])
#loc220 = loc(fused[#loc127, #loc128])
#loc221 = loc(fused[#loc129, #loc130])
#loc222 = loc(fused[#loc131, #loc132])
#loc223 = loc(fused[#loc135, #loc136])
#loc224 = loc(fused[#loc134, #loc136])
#loc225 = loc(fused[#loc133, #loc137])
#loc226 = loc(fused[#loc138, #loc137])
#loc227 = loc(fused[#loc139, #loc140])
#loc228 = loc(fused[#loc141, #loc142])
#loc229 = loc(fused[#loc143, #loc140])
#loc230 = loc(fused[#loc147, #loc148])
#loc231 = loc(fused[#loc150, #loc148])
#loc232 = loc(fused[#loc155, #loc156])
#loc233 = loc(fused[#loc158, #loc157])
#loc234 = loc(fused[#loc162, #loc163])
#loc235 = loc(fused[#loc172, #loc169])
