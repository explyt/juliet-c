!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":167:10)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":167:14)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":167:20)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":167:32)
#loc243 = loc(fused[#loc60, #loc61])
#loc244 = loc(fused[#loc62, #loc63])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func no_proto private @globalReturnsTrue(...) -> !s32i loc(#loc218)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<[#cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<0> : !s32i]> : !cir.array<!s32i x 43> {alignment = 4 : i64} loc(#loc3)
  cir.func private @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc219)
  cir.func private @wcscpy(!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc220)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc221)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE135_11_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc223)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc14)
    cir.store %1, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc224)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc226)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc226)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc18)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc18)
      cir.if %5 {
        %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s32i x 43>> loc(#loc3)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s32i x 43>>), !cir.ptr<!s32i> loc(#loc3)
        %8 = cir.cast(bitcast, %7 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc3)
        cir.store %8, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc228)
      } loc(#loc227)
    } loc(#loc225)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc230)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc230)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc24)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc24)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc233)
          %7 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc234)
          %8 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc33)
          %9 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc34)
          %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc34)
          %11 = cir.call @strlen(%10) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc33)
          cir.store %11, %6 : !u64i, !cir.ptr<!u64i> loc(#loc233)
          %12 = cir.load %6 : !cir.ptr<!u64i>, !u64i loc(#loc32)
          %13 = cir.const #cir.int<1> : !s32i loc(#loc32)
          %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc32)
          %15 = cir.binop(add, %12, %14) : !u64i loc(#loc32)
          %16 = cir.const #cir.int<4> : !u64i loc(#loc32)
          %17 = cir.binop(mul, %15, %16) : !u64i loc(#loc32)
          %18 = cir.alloca !u8i, !cir.ptr<!u8i>, %17 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc32)
          %19 = cir.cast(bitcast, %18 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc32)
          cir.store %19, %7 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc234)
          %20 = cir.load %7 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc35)
          %21 = cir.cast(bitcast, %20 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc35)
          %22 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc36)
          %23 = cir.cast(bitcast, %22 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc36)
          %24 = cir.call @wcscpy(%21, %23) : (!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc37)
          %25 = cir.load %7 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc38)
          %26 = cir.cast(bitcast, %25 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc38)
          cir.call @printLine(%26) : (!cir.ptr<!s8i>) -> () loc(#loc39)
        } loc(#loc232)
      } loc(#loc231)
    } loc(#loc229)
    cir.return loc(#loc11)
  } loc(#loc222)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE135_11_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc236)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc42)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc237)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc44)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc238)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc46)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc239)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc48)
    cir.return loc(#loc41)
  } loc(#loc235)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc240)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc241)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc54)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc55)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc56)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc57)
  cir.func @main(%arg0: !s32i loc(fused[#loc60, #loc61]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc62, #loc63])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc243)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc244)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc59)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc64)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc64)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc65)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc66)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc66)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc67)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc54)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc54)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc68)
    %8 = cir.get_global @CWE121_Stack_Based_Buffer_Overflow__CWE135_11_good : !cir.ptr<!cir.func<!void ()>> loc(#loc245)
    cir.call @CWE121_Stack_Based_Buffer_Overflow__CWE135_11_good() : () -> () loc(#loc69)
    %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc55)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc55)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc71)
    %11 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc56)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc56)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc72)
    %13 = cir.get_global @CWE121_Stack_Based_Buffer_Overflow__CWE135_11_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc246)
    cir.call @CWE121_Stack_Based_Buffer_Overflow__CWE135_11_bad() : () -> () loc(#loc73)
    %14 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc57)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc57)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc75)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc76)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc247)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc247)
    cir.return %17 : !s32i loc(#loc247)
  } loc(#loc242)
  cir.func no_proto private @globalReturnsFalse(...) -> !s32i loc(#loc248)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc80)
  cir.func private @wcslen(!cir.ptr<!s32i>) -> !u64i extra(#fn_attr) loc(#loc249)
  cir.func private @printWLine(!cir.ptr<!s32i>) loc(#loc250)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc252)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc89)
    cir.store %1, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc253)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc255)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc255)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc93)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc93)
      cir.if %5 {
        %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s32i x 43>> loc(#loc96)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s32i x 43>>), !cir.ptr<!s32i> loc(#loc96)
        %8 = cir.cast(bitcast, %7 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc96)
        cir.store %8, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc257)
      } loc(#loc256)
    } loc(#loc254)
    cir.scope {
      %2 = cir.get_global @globalReturnsFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc259)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc259)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc100)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc100)
      cir.if %5 {
        %6 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc80)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc80)
        cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc105)
      } else {
        cir.scope {
          %6 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc262)
          %7 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc263)
          %8 = cir.get_global @wcslen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s32i>)>> loc(#loc112)
          %9 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc113)
          %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc113)
          %11 = cir.call @wcslen(%10) : (!cir.ptr<!s32i>) -> !u64i extra(#fn_attr) loc(#loc112)
          cir.store %11, %6 : !u64i, !cir.ptr<!u64i> loc(#loc262)
          %12 = cir.load %6 : !cir.ptr<!u64i>, !u64i loc(#loc111)
          %13 = cir.const #cir.int<1> : !s32i loc(#loc111)
          %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc111)
          %15 = cir.binop(add, %12, %14) : !u64i loc(#loc111)
          %16 = cir.const #cir.int<4> : !u64i loc(#loc111)
          %17 = cir.binop(mul, %15, %16) : !u64i loc(#loc111)
          %18 = cir.alloca !u8i, !cir.ptr<!u8i>, %17 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc111)
          %19 = cir.cast(bitcast, %18 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc111)
          cir.store %19, %7 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc263)
          %20 = cir.load %7 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc114)
          %21 = cir.cast(bitcast, %20 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc114)
          %22 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc115)
          %23 = cir.cast(bitcast, %22 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc115)
          %24 = cir.call @wcscpy(%21, %23) : (!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc116)
          %25 = cir.load %7 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc117)
          %26 = cir.cast(bitcast, %25 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc117)
          cir.call @printWLine(%26) : (!cir.ptr<!s32i>) -> () loc(#loc118)
        } loc(#loc261)
      } loc(#loc260)
    } loc(#loc258)
    cir.return loc(#loc86)
  } loc(#loc251)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc265)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc123)
    cir.store %1, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc266)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc268)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc268)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc127)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc127)
      cir.if %5 {
        %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s32i x 43>> loc(#loc130)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s32i x 43>>), !cir.ptr<!s32i> loc(#loc130)
        %8 = cir.cast(bitcast, %7 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc130)
        cir.store %8, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc270)
      } loc(#loc269)
    } loc(#loc267)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc272)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc272)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc134)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc134)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc275)
          %7 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc276)
          %8 = cir.get_global @wcslen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s32i>)>> loc(#loc143)
          %9 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc144)
          %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc144)
          %11 = cir.call @wcslen(%10) : (!cir.ptr<!s32i>) -> !u64i extra(#fn_attr) loc(#loc143)
          cir.store %11, %6 : !u64i, !cir.ptr<!u64i> loc(#loc275)
          %12 = cir.load %6 : !cir.ptr<!u64i>, !u64i loc(#loc142)
          %13 = cir.const #cir.int<1> : !s32i loc(#loc142)
          %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc142)
          %15 = cir.binop(add, %12, %14) : !u64i loc(#loc142)
          %16 = cir.const #cir.int<4> : !u64i loc(#loc142)
          %17 = cir.binop(mul, %15, %16) : !u64i loc(#loc142)
          %18 = cir.alloca !u8i, !cir.ptr<!u8i>, %17 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc142)
          %19 = cir.cast(bitcast, %18 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc142)
          cir.store %19, %7 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc276)
          %20 = cir.load %7 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc145)
          %21 = cir.cast(bitcast, %20 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc145)
          %22 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc146)
          %23 = cir.cast(bitcast, %22 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc146)
          %24 = cir.call @wcscpy(%21, %23) : (!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc147)
          %25 = cir.load %7 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc148)
          %26 = cir.cast(bitcast, %25 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc148)
          cir.call @printWLine(%26) : (!cir.ptr<!s32i>) -> () loc(#loc149)
        } loc(#loc274)
      } loc(#loc273)
    } loc(#loc271)
    cir.return loc(#loc120)
  } loc(#loc264)
  cir.global "private" constant cir_private dsolocal @".str.6" = #cir.const_array<"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\00" : !cir.array<!s8i x 43>> : !cir.array<!s8i x 43> {alignment = 1 : i64} loc(#loc150)
  cir.func private @strcpy(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc277)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc279)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc157)
    cir.store %1, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc280)
    cir.scope {
      %2 = cir.get_global @globalReturnsFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc282)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc282)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc161)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc161)
      cir.if %5 {
        %6 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc166)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc166)
        cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc167)
      } else {
        %6 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 43>> loc(#loc150)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 43>>), !cir.ptr<!s8i> loc(#loc150)
        %8 = cir.cast(bitcast, %7 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc150)
        cir.store %8, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc284)
      } loc(#loc283)
    } loc(#loc281)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc286)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc286)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc171)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc171)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc289)
          %7 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc290)
          %8 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc180)
          %9 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc181)
          %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc181)
          %11 = cir.call @strlen(%10) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc180)
          cir.store %11, %6 : !u64i, !cir.ptr<!u64i> loc(#loc289)
          %12 = cir.load %6 : !cir.ptr<!u64i>, !u64i loc(#loc179)
          %13 = cir.const #cir.int<1> : !s32i loc(#loc179)
          %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc179)
          %15 = cir.binop(add, %12, %14) : !u64i loc(#loc179)
          %16 = cir.const #cir.int<1> : !s32i loc(#loc179)
          %17 = cir.cast(integral, %16 : !s32i), !u64i loc(#loc179)
          %18 = cir.binop(mul, %15, %17) : !u64i loc(#loc179)
          %19 = cir.alloca !u8i, !cir.ptr<!u8i>, %18 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc179)
          %20 = cir.cast(bitcast, %19 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc179)
          cir.store %20, %7 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc290)
          %21 = cir.get_global @strcpy : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc182)
          %22 = cir.load %7 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc183)
          %23 = cir.cast(bitcast, %22 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc183)
          %24 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc184)
          %25 = cir.cast(bitcast, %24 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc184)
          %26 = cir.call @strcpy(%23, %25) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc182)
          %27 = cir.load %7 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc185)
          %28 = cir.cast(bitcast, %27 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc185)
          cir.call @printLine(%28) : (!cir.ptr<!s8i>) -> () loc(#loc186)
        } loc(#loc288)
      } loc(#loc287)
    } loc(#loc285)
    cir.return loc(#loc154)
  } loc(#loc278)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc292)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc191)
    cir.store %1, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc293)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc295)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc295)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc195)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc195)
      cir.if %5 {
        %6 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 43>> loc(#loc198)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 43>>), !cir.ptr<!s8i> loc(#loc198)
        %8 = cir.cast(bitcast, %7 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc198)
        cir.store %8, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc297)
      } loc(#loc296)
    } loc(#loc294)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc299)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc299)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc202)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc202)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc302)
          %7 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc303)
          %8 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc211)
          %9 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc212)
          %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc212)
          %11 = cir.call @strlen(%10) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc211)
          cir.store %11, %6 : !u64i, !cir.ptr<!u64i> loc(#loc302)
          %12 = cir.load %6 : !cir.ptr<!u64i>, !u64i loc(#loc210)
          %13 = cir.const #cir.int<1> : !s32i loc(#loc210)
          %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc210)
          %15 = cir.binop(add, %12, %14) : !u64i loc(#loc210)
          %16 = cir.const #cir.int<1> : !s32i loc(#loc210)
          %17 = cir.cast(integral, %16 : !s32i), !u64i loc(#loc210)
          %18 = cir.binop(mul, %15, %17) : !u64i loc(#loc210)
          %19 = cir.alloca !u8i, !cir.ptr<!u8i>, %18 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc210)
          %20 = cir.cast(bitcast, %19 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc210)
          cir.store %20, %7 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc303)
          %21 = cir.get_global @strcpy : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc213)
          %22 = cir.load %7 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc214)
          %23 = cir.cast(bitcast, %22 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc214)
          %24 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc215)
          %25 = cir.cast(bitcast, %24 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc215)
          %26 = cir.call @strcpy(%23, %25) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc213)
          %27 = cir.load %7 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc216)
          %28 = cir.cast(bitcast, %27 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc216)
          cir.call @printLine(%28) : (!cir.ptr<!s8i>) -> () loc(#loc217)
        } loc(#loc301)
      } loc(#loc300)
    } loc(#loc298)
    cir.return loc(#loc188)
  } loc(#loc291)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":48:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":48:23)
#loc3 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":34:24)
#loc4 = loc("/usr/include/string.h":407:1)
#loc5 = loc("/usr/include/string.h":408:33)
#loc6 = loc("/usr/include/wchar.h":98:1)
#loc7 = loc("/usr/include/wchar.h":100:14)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc9 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc10 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":27:1)
#loc11 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":46:1)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":29:5)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":29:12)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":30:12)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":30:5)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":31:5)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":35:5)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":31:8)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":31:26)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":32:5)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":34:9)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":36:5)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":45:5)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":36:8)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":36:26)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":37:5)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":38:9)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":44:9)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":40:13)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":40:49)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":41:13)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":41:35)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":40:30)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":40:45)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":42:26)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":42:32)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":42:19)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":43:31)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":43:13)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":150:1)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":156:1)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":152:5)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":152:14)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":153:5)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":153:14)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":154:5)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":154:14)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":155:5)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":155:14)
#loc50 = loc("/usr/include/stdlib.h":575:1)
#loc51 = loc("/usr/include/stdlib.h":575:41)
#loc52 = loc("/usr/include/time.h":76:1)
#loc53 = loc("/usr/include/time.h":76:38)
#loc54 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":172:15)
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":174:15)
#loc56 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":177:15)
#loc57 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":179:15)
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":167:1)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":182:1)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":168:1)
#loc65 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":170:27)
#loc66 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":170:22)
#loc67 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":170:5)
#loc68 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":172:5)
#loc69 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":173:5)
#loc70 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":173:56)
#loc71 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":174:5)
#loc72 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":177:5)
#loc73 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":178:5)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":178:55)
#loc75 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":179:5)
#loc76 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":181:12)
#loc77 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":181:5)
#loc78 = loc("../../../testcasesupport/std_testcase_io.h":50:1)
#loc79 = loc("../../../testcasesupport/std_testcase_io.h":50:24)
#loc80 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":65:19)
#loc81 = loc("/usr/include/wchar.h":247:1)
#loc82 = loc("/usr/include/wchar.h":247:51)
#loc83 = loc("../../../testcasesupport/std_testcase_io.h":16:1)
#loc84 = loc("../../../testcasesupport/std_testcase_io.h":16:37)
#loc85 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":53:1)
#loc86 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":77:1)
#loc87 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":55:5)
#loc88 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":55:12)
#loc89 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":56:12)
#loc90 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":56:5)
#loc91 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":57:5)
#loc92 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":61:5)
#loc93 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":57:8)
#loc94 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":57:26)
#loc95 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":58:5)
#loc96 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":60:24)
#loc97 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":60:9)
#loc98 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":62:5)
#loc99 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":76:5)
#loc100 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":62:8)
#loc101 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":62:27)
#loc102 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":63:5)
#loc103 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":66:5)
#loc104 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":68:5)
#loc105 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":65:9)
#loc106 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":69:9)
#loc107 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":75:9)
#loc108 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":71:13)
#loc109 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":71:52)
#loc110 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":72:13)
#loc111 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":72:35)
#loc112 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":71:30)
#loc113 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":71:48)
#loc114 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":73:26)
#loc115 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":73:32)
#loc116 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":73:19)
#loc117 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":74:35)
#loc118 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":74:13)
#loc119 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":80:1)
#loc120 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":99:1)
#loc121 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":82:5)
#loc122 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":82:12)
#loc123 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":83:12)
#loc124 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":83:5)
#loc125 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":84:5)
#loc126 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":88:5)
#loc127 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":84:8)
#loc128 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":84:26)
#loc129 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":85:5)
#loc130 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":87:24)
#loc131 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":87:9)
#loc132 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":89:5)
#loc133 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":98:5)
#loc134 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":89:8)
#loc135 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":89:26)
#loc136 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":90:5)
#loc137 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":91:9)
#loc138 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":97:9)
#loc139 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":93:13)
#loc140 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":93:52)
#loc141 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":94:13)
#loc142 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":94:35)
#loc143 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":93:30)
#loc144 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":93:48)
#loc145 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":95:26)
#loc146 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":95:32)
#loc147 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":95:19)
#loc148 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":96:35)
#loc149 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":96:13)
#loc150 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":114:24)
#loc151 = loc("/usr/include/string.h":141:1)
#loc152 = loc("/usr/include/string.h":142:14)
#loc153 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":102:1)
#loc154 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":126:1)
#loc155 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":104:5)
#loc156 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":104:12)
#loc157 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":105:12)
#loc158 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":105:5)
#loc159 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":106:5)
#loc160 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":115:5)
#loc161 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":106:8)
#loc162 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":106:27)
#loc163 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":107:5)
#loc164 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":110:5)
#loc165 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":112:5)
#loc166 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":109:19)
#loc167 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":109:9)
#loc168 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":114:9)
#loc169 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":116:5)
#loc170 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":125:5)
#loc171 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":116:8)
#loc172 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":116:26)
#loc173 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":117:5)
#loc174 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":118:9)
#loc175 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":124:9)
#loc176 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":120:13)
#loc177 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":120:49)
#loc178 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":121:13)
#loc179 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":121:35)
#loc180 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":120:30)
#loc181 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":120:45)
#loc182 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":122:19)
#loc183 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":122:26)
#loc184 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":122:32)
#loc185 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":123:31)
#loc186 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":123:13)
#loc187 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":129:1)
#loc188 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":148:1)
#loc189 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":131:5)
#loc190 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":131:12)
#loc191 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":132:12)
#loc192 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":132:5)
#loc193 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":133:5)
#loc194 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":137:5)
#loc195 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":133:8)
#loc196 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":133:26)
#loc197 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":134:5)
#loc198 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":136:24)
#loc199 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":136:9)
#loc200 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":138:5)
#loc201 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":147:5)
#loc202 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":138:8)
#loc203 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":138:26)
#loc204 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":139:5)
#loc205 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":140:9)
#loc206 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":146:9)
#loc207 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":142:13)
#loc208 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":142:49)
#loc209 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":143:13)
#loc210 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":143:35)
#loc211 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":142:30)
#loc212 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":142:45)
#loc213 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":144:19)
#loc214 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":144:26)
#loc215 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":144:32)
#loc216 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":145:31)
#loc217 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":145:13)
#loc218 = loc(fused[#loc1, #loc2])
#loc219 = loc(fused[#loc4, #loc5])
#loc220 = loc(fused[#loc6, #loc7])
#loc221 = loc(fused[#loc8, #loc9])
#loc222 = loc(fused[#loc10, #loc11])
#loc223 = loc(fused[#loc12, #loc13])
#loc224 = loc(fused[#loc15, #loc14])
#loc225 = loc(fused[#loc16, #loc17])
#loc226 = loc(fused[#loc18, #loc19])
#loc227 = loc(fused[#loc20, #loc17])
#loc228 = loc(fused[#loc21, #loc3])
#loc229 = loc(fused[#loc22, #loc23])
#loc230 = loc(fused[#loc24, #loc25])
#loc231 = loc(fused[#loc26, #loc23])
#loc232 = loc(fused[#loc27, #loc28])
#loc233 = loc(fused[#loc29, #loc30])
#loc234 = loc(fused[#loc31, #loc32])
#loc235 = loc(fused[#loc40, #loc41])
#loc236 = loc(fused[#loc42, #loc43])
#loc237 = loc(fused[#loc44, #loc45])
#loc238 = loc(fused[#loc46, #loc47])
#loc239 = loc(fused[#loc48, #loc49])
#loc240 = loc(fused[#loc50, #loc51])
#loc241 = loc(fused[#loc52, #loc53])
#loc242 = loc(fused[#loc58, #loc59])
#loc245 = loc(fused[#loc69, #loc70])
#loc246 = loc(fused[#loc73, #loc74])
#loc247 = loc(fused[#loc77, #loc76])
#loc248 = loc(fused[#loc78, #loc79])
#loc249 = loc(fused[#loc81, #loc82])
#loc250 = loc(fused[#loc83, #loc84])
#loc251 = loc(fused[#loc85, #loc86])
#loc252 = loc(fused[#loc87, #loc88])
#loc253 = loc(fused[#loc90, #loc89])
#loc254 = loc(fused[#loc91, #loc92])
#loc255 = loc(fused[#loc93, #loc94])
#loc256 = loc(fused[#loc95, #loc92])
#loc257 = loc(fused[#loc97, #loc96])
#loc258 = loc(fused[#loc98, #loc99])
#loc259 = loc(fused[#loc100, #loc101])
#loc260 = loc(fused[#loc102, #loc103, #loc104, #loc99])
#loc261 = loc(fused[#loc106, #loc107])
#loc262 = loc(fused[#loc108, #loc109])
#loc263 = loc(fused[#loc110, #loc111])
#loc264 = loc(fused[#loc119, #loc120])
#loc265 = loc(fused[#loc121, #loc122])
#loc266 = loc(fused[#loc124, #loc123])
#loc267 = loc(fused[#loc125, #loc126])
#loc268 = loc(fused[#loc127, #loc128])
#loc269 = loc(fused[#loc129, #loc126])
#loc270 = loc(fused[#loc131, #loc130])
#loc271 = loc(fused[#loc132, #loc133])
#loc272 = loc(fused[#loc134, #loc135])
#loc273 = loc(fused[#loc136, #loc133])
#loc274 = loc(fused[#loc137, #loc138])
#loc275 = loc(fused[#loc139, #loc140])
#loc276 = loc(fused[#loc141, #loc142])
#loc277 = loc(fused[#loc151, #loc152])
#loc278 = loc(fused[#loc153, #loc154])
#loc279 = loc(fused[#loc155, #loc156])
#loc280 = loc(fused[#loc158, #loc157])
#loc281 = loc(fused[#loc159, #loc160])
#loc282 = loc(fused[#loc161, #loc162])
#loc283 = loc(fused[#loc163, #loc164, #loc165, #loc160])
#loc284 = loc(fused[#loc168, #loc150])
#loc285 = loc(fused[#loc169, #loc170])
#loc286 = loc(fused[#loc171, #loc172])
#loc287 = loc(fused[#loc173, #loc170])
#loc288 = loc(fused[#loc174, #loc175])
#loc289 = loc(fused[#loc176, #loc177])
#loc290 = loc(fused[#loc178, #loc179])
#loc291 = loc(fused[#loc187, #loc188])
#loc292 = loc(fused[#loc189, #loc190])
#loc293 = loc(fused[#loc192, #loc191])
#loc294 = loc(fused[#loc193, #loc194])
#loc295 = loc(fused[#loc195, #loc196])
#loc296 = loc(fused[#loc197, #loc194])
#loc297 = loc(fused[#loc199, #loc198])
#loc298 = loc(fused[#loc200, #loc201])
#loc299 = loc(fused[#loc202, #loc203])
#loc300 = loc(fused[#loc204, #loc201])
#loc301 = loc(fused[#loc205, #loc206])
#loc302 = loc(fused[#loc207, #loc208])
#loc303 = loc(fused[#loc209, #loc210])
