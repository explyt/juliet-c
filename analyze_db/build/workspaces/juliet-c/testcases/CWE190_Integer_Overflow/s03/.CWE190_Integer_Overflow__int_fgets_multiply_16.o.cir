!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.record<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.record<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.record<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
!ty__IO_FILE = !cir.record<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_fgets_multiply_16.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, "dlti.endianness" = "little", "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @fgets(!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc148)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc149)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc150)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc151)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"fgets() failed.\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc9)
  cir.func private @printIntLine(!s32i) loc(#loc152)
  cir.func no_proto @CWE190_Integer_Overflow__int_fgets_multiply_16_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc154)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc16)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc155)
    cir.scope {
      cir.while {
        %2 = cir.const #cir.int<1> : !s32i loc(#loc20)
        %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc20)
        cir.condition(%3) loc(#loc20)
      } do {
        cir.scope {
          cir.scope {
            %2 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc159)
            %3 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc159)
            cir.store %3, %2 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc159)
            cir.scope {
              %4 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc28)
              %5 = cir.const #cir.int<3> : !s32i loc(#loc29)
              %6 = cir.cast(integral, %5 : !s32i), !u64i loc(#loc29)
              %7 = cir.const #cir.int<4> : !u64i loc(#loc29)
              %8 = cir.binop(mul, %6, %7) : !u64i loc(#loc29)
              %9 = cir.const #cir.int<2> : !s32i loc(#loc29)
              %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc29)
              %11 = cir.binop(add, %8, %10) : !u64i loc(#loc29)
              %12 = cir.cast(integral, %11 : !u64i), !s32i loc(#loc29)
              %13 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc149)
              %14 = cir.load %13 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc30)
              %15 = cir.call @fgets(%4, %12, %14) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc31)
              %16 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc32)
              %17 = cir.cast(bitcast, %16 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc32)
              %18 = cir.cmp(ne, %15, %17) : !cir.ptr<!s8i>, !cir.bool loc(#loc161)
              cir.if %18 {
                %19 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc36)
                %20 = cir.call @atoi(%19) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc37)
                cir.store %20, %0 : !s32i, !cir.ptr<!s32i> loc(#loc163)
              } else {
                %19 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc9)
                %20 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc9)
                cir.call @printLine(%20) : (!cir.ptr<!s8i>) -> () loc(#loc40)
              } loc(#loc162)
            } loc(#loc160)
          } loc(#loc158)
          cir.break loc(#loc41)
        } loc(#loc157)
        cir.yield loc(#loc19)
      } loc(#loc156)
    } loc(#loc156)
    cir.scope {
      cir.while {
        %2 = cir.const #cir.int<1> : !s32i loc(#loc44)
        %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc44)
        cir.condition(%3) loc(#loc44)
      } do {
        cir.scope {
          cir.scope {
            %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc48)
            %3 = cir.const #cir.int<0> : !s32i loc(#loc49)
            %4 = cir.cmp(gt, %2, %3) : !s32i, !cir.bool loc(#loc167)
            cir.if %4 {
              %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc169)
              %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc53)
              %7 = cir.const #cir.int<2> : !s32i loc(#loc52)
              %8 = cir.binop(mul, %6, %7) nsw : !s32i loc(#loc53)
              cir.store %8, %5 : !s32i, !cir.ptr<!s32i> loc(#loc169)
              %9 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc54)
              cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc55)
            } loc(#loc168)
          } loc(#loc166)
          cir.break loc(#loc56)
        } loc(#loc165)
        cir.yield loc(#loc43)
      } loc(#loc164)
    } loc(#loc164)
    cir.return loc(#loc13)
  } loc(#loc153)
  cir.func no_proto @CWE190_Integer_Overflow__int_fgets_multiply_16_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc171)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc59)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc172)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc61)
    cir.return loc(#loc58)
  } loc(#loc170)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc63)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc174)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc68)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc175)
    cir.scope {
      cir.while {
        %2 = cir.const #cir.int<1> : !s32i loc(#loc72)
        %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc72)
        cir.condition(%3) loc(#loc72)
      } do {
        cir.scope {
          cir.scope {
            %2 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc179)
            %3 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc179)
            cir.store %3, %2 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc179)
            cir.scope {
              %4 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc80)
              %5 = cir.const #cir.int<3> : !s32i loc(#loc81)
              %6 = cir.cast(integral, %5 : !s32i), !u64i loc(#loc81)
              %7 = cir.const #cir.int<4> : !u64i loc(#loc81)
              %8 = cir.binop(mul, %6, %7) : !u64i loc(#loc81)
              %9 = cir.const #cir.int<2> : !s32i loc(#loc81)
              %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc81)
              %11 = cir.binop(add, %8, %10) : !u64i loc(#loc81)
              %12 = cir.cast(integral, %11 : !u64i), !s32i loc(#loc81)
              %13 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc149)
              %14 = cir.load %13 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc82)
              %15 = cir.call @fgets(%4, %12, %14) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc83)
              %16 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc84)
              %17 = cir.cast(bitcast, %16 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc84)
              %18 = cir.cmp(ne, %15, %17) : !cir.ptr<!s8i>, !cir.bool loc(#loc181)
              cir.if %18 {
                %19 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc88)
                %20 = cir.call @atoi(%19) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc89)
                cir.store %20, %0 : !s32i, !cir.ptr<!s32i> loc(#loc183)
              } else {
                %19 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc92)
                %20 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc92)
                cir.call @printLine(%20) : (!cir.ptr<!s8i>) -> () loc(#loc93)
              } loc(#loc182)
            } loc(#loc180)
          } loc(#loc178)
          cir.break loc(#loc94)
        } loc(#loc177)
        cir.yield loc(#loc71)
      } loc(#loc176)
    } loc(#loc176)
    cir.scope {
      cir.while {
        %2 = cir.const #cir.int<1> : !s32i loc(#loc97)
        %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc97)
        cir.condition(%3) loc(#loc97)
      } do {
        cir.scope {
          cir.scope {
            %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc101)
            %3 = cir.const #cir.int<0> : !s32i loc(#loc102)
            %4 = cir.cmp(gt, %2, %3) : !s32i, !cir.bool loc(#loc187)
            cir.if %4 {
              cir.scope {
                %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc106)
                %6 = cir.const #cir.int<2147483647> : !s32i loc(#loc107)
                %7 = cir.const #cir.int<2> : !s32i loc(#loc108)
                %8 = cir.binop(div, %6, %7) : !s32i loc(#loc190)
                %9 = cir.cmp(lt, %5, %8) : !s32i, !cir.bool loc(#loc191)
                cir.if %9 {
                  %10 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc193)
                  %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc115)
                  %12 = cir.const #cir.int<2> : !s32i loc(#loc114)
                  %13 = cir.binop(mul, %11, %12) nsw : !s32i loc(#loc115)
                  cir.store %13, %10 : !s32i, !cir.ptr<!s32i> loc(#loc193)
                  %14 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc116)
                  cir.call @printIntLine(%14) : (!s32i) -> () loc(#loc117)
                } else {
                  %10 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc63)
                  %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc63)
                  cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc118)
                } loc(#loc192)
              } loc(#loc189)
            } loc(#loc188)
          } loc(#loc186)
          cir.break loc(#loc119)
        } loc(#loc185)
        cir.yield loc(#loc96)
      } loc(#loc184)
    } loc(#loc184)
    cir.return loc(#loc65)
  } loc(#loc173)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc195)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc124)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc196)
    cir.scope {
      cir.while {
        %2 = cir.const #cir.int<1> : !s32i loc(#loc128)
        %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc128)
        cir.condition(%3) loc(#loc128)
      } do {
        cir.scope {
          %2 = cir.const #cir.int<2> : !s32i loc(#loc130)
          cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc199)
          cir.break loc(#loc132)
        } loc(#loc198)
        cir.yield loc(#loc127)
      } loc(#loc197)
    } loc(#loc197)
    cir.scope {
      cir.while {
        %2 = cir.const #cir.int<1> : !s32i loc(#loc135)
        %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc135)
        cir.condition(%3) loc(#loc135)
      } do {
        cir.scope {
          cir.scope {
            %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc139)
            %3 = cir.const #cir.int<0> : !s32i loc(#loc140)
            %4 = cir.cmp(gt, %2, %3) : !s32i, !cir.bool loc(#loc203)
            cir.if %4 {
              %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc205)
              %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc144)
              %7 = cir.const #cir.int<2> : !s32i loc(#loc143)
              %8 = cir.binop(mul, %6, %7) nsw : !s32i loc(#loc144)
              cir.store %8, %5 : !s32i, !cir.ptr<!s32i> loc(#loc205)
              %9 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc145)
              cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc146)
            } loc(#loc204)
          } loc(#loc202)
          cir.break loc(#loc147)
        } loc(#loc201)
        cir.yield loc(#loc134)
      } loc(#loc200)
    } loc(#loc200)
    cir.return loc(#loc121)
  } loc(#loc194)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_fgets_multiply_16.c":0:0)
#loc1 = loc("/usr/include/stdio.h":654:1)
#loc2 = loc("/usr/include/stdio.h":655:59)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("/usr/include/stdlib.h":105:1)
#loc6 = loc("/usr/include/stdlib.h":106:33)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":41:27)
#loc10 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc11 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc12 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":24:1)
#loc13 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":56:1)
#loc14 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":26:5)
#loc15 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":26:9)
#loc16 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":28:12)
#loc17 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":28:5)
#loc18 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":29:5)
#loc19 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":45:5)
#loc20 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":29:11)
#loc21 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":30:5)
#loc22 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":31:9)
#loc23 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":43:9)
#loc24 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":32:13)
#loc25 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":32:49)
#loc26 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":34:13)
#loc27 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":42:13)
#loc28 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":34:23)
#loc29 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":34:36)
#loc30 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":34:53)
#loc31 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":34:17)
#loc32 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":34:63)
#loc33 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":35:13)
#loc34 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":38:13)
#loc35 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":40:13)
#loc36 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":37:29)
#loc37 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":37:24)
#loc38 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":37:17)
#loc39 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":37:40)
#loc40 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":41:17)
#loc41 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":44:9)
#loc42 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":46:5)
#loc43 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":55:5)
#loc44 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":46:11)
#loc45 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":47:5)
#loc46 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":48:9)
#loc47 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":53:9)
#loc48 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":48:12)
#loc49 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":48:19)
#loc50 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":49:9)
#loc51 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":51:13)
#loc52 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":51:33)
#loc53 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":51:26)
#loc54 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":52:26)
#loc55 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":52:13)
#loc56 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":54:9)
#loc57 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":128:1)
#loc58 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":132:1)
#loc59 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":130:5)
#loc60 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":130:13)
#loc61 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":131:5)
#loc62 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":131:13)
#loc63 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":97:27)
#loc64 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":63:1)
#loc65 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":102:1)
#loc66 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":65:5)
#loc67 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":65:9)
#loc68 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":67:12)
#loc69 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":67:5)
#loc70 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":68:5)
#loc71 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":84:5)
#loc72 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":68:11)
#loc73 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":69:5)
#loc74 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":70:9)
#loc75 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":82:9)
#loc76 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":71:13)
#loc77 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":71:49)
#loc78 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":73:13)
#loc79 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":81:13)
#loc80 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":73:23)
#loc81 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":73:36)
#loc82 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":73:53)
#loc83 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":73:17)
#loc84 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":73:63)
#loc85 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":74:13)
#loc86 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":77:13)
#loc87 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":79:13)
#loc88 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":76:29)
#loc89 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":76:24)
#loc90 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":76:17)
#loc91 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":76:40)
#loc92 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":80:27)
#loc93 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":80:17)
#loc94 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":83:9)
#loc95 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":85:5)
#loc96 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":101:5)
#loc97 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":85:11)
#loc98 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":86:5)
#loc99 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":87:9)
#loc100 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":99:9)
#loc101 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":87:12)
#loc102 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":87:19)
#loc103 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":88:9)
#loc104 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":90:13)
#loc105 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":98:13)
#loc106 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":90:17)
#loc107 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":90:25)
#loc108 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":90:33)
#loc109 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":90:34)
#loc110 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":91:13)
#loc111 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":94:13)
#loc112 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":96:13)
#loc113 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":92:17)
#loc114 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":92:37)
#loc115 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":92:30)
#loc116 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":93:30)
#loc117 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":93:17)
#loc118 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":97:17)
#loc119 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":100:9)
#loc120 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":105:1)
#loc121 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":126:1)
#loc122 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":107:5)
#loc123 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":107:9)
#loc124 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":109:12)
#loc125 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":109:5)
#loc126 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":110:5)
#loc127 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":115:5)
#loc128 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":110:11)
#loc129 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":111:5)
#loc130 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":113:16)
#loc131 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":113:9)
#loc132 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":114:9)
#loc133 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":116:5)
#loc134 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":125:5)
#loc135 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":116:11)
#loc136 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":117:5)
#loc137 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":118:9)
#loc138 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":123:9)
#loc139 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":118:12)
#loc140 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":118:19)
#loc141 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":119:9)
#loc142 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":121:13)
#loc143 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":121:33)
#loc144 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":121:26)
#loc145 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":122:26)
#loc146 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":122:13)
#loc147 = loc("CWE190_Integer_Overflow__int_fgets_multiply_16.c":124:9)
#loc148 = loc(fused[#loc1, #loc2])
#loc149 = loc(fused[#loc3, #loc4])
#loc150 = loc(fused[#loc5, #loc6])
#loc151 = loc(fused[#loc7, #loc8])
#loc152 = loc(fused[#loc10, #loc11])
#loc153 = loc(fused[#loc12, #loc13])
#loc154 = loc(fused[#loc14, #loc15])
#loc155 = loc(fused[#loc17, #loc16])
#loc156 = loc(fused[#loc18, #loc19])
#loc157 = loc(fused[#loc21, #loc19])
#loc158 = loc(fused[#loc22, #loc23])
#loc159 = loc(fused[#loc24, #loc25])
#loc160 = loc(fused[#loc26, #loc27])
#loc161 = loc(fused[#loc31, #loc32])
#loc162 = loc(fused[#loc33, #loc34, #loc35, #loc27])
#loc163 = loc(fused[#loc38, #loc39])
#loc164 = loc(fused[#loc42, #loc43])
#loc165 = loc(fused[#loc45, #loc43])
#loc166 = loc(fused[#loc46, #loc47])
#loc167 = loc(fused[#loc48, #loc49])
#loc168 = loc(fused[#loc50, #loc47])
#loc169 = loc(fused[#loc51, #loc52])
#loc170 = loc(fused[#loc57, #loc58])
#loc171 = loc(fused[#loc59, #loc60])
#loc172 = loc(fused[#loc61, #loc62])
#loc173 = loc(fused[#loc64, #loc65])
#loc174 = loc(fused[#loc66, #loc67])
#loc175 = loc(fused[#loc69, #loc68])
#loc176 = loc(fused[#loc70, #loc71])
#loc177 = loc(fused[#loc73, #loc71])
#loc178 = loc(fused[#loc74, #loc75])
#loc179 = loc(fused[#loc76, #loc77])
#loc180 = loc(fused[#loc78, #loc79])
#loc181 = loc(fused[#loc83, #loc84])
#loc182 = loc(fused[#loc85, #loc86, #loc87, #loc79])
#loc183 = loc(fused[#loc90, #loc91])
#loc184 = loc(fused[#loc95, #loc96])
#loc185 = loc(fused[#loc98, #loc96])
#loc186 = loc(fused[#loc99, #loc100])
#loc187 = loc(fused[#loc101, #loc102])
#loc188 = loc(fused[#loc103, #loc100])
#loc189 = loc(fused[#loc104, #loc105])
#loc190 = loc(fused[#loc107, #loc108])
#loc191 = loc(fused[#loc106, #loc109])
#loc192 = loc(fused[#loc110, #loc111, #loc112, #loc105])
#loc193 = loc(fused[#loc113, #loc114])
#loc194 = loc(fused[#loc120, #loc121])
#loc195 = loc(fused[#loc122, #loc123])
#loc196 = loc(fused[#loc125, #loc124])
#loc197 = loc(fused[#loc126, #loc127])
#loc198 = loc(fused[#loc129, #loc127])
#loc199 = loc(fused[#loc131, #loc130])
#loc200 = loc(fused[#loc133, #loc134])
#loc201 = loc(fused[#loc136, #loc134])
#loc202 = loc(fused[#loc137, #loc138])
#loc203 = loc(fused[#loc139, #loc140])
#loc204 = loc(fused[#loc141, #loc138])
#loc205 = loc(fused[#loc142, #loc143])
