!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#true = #cir.bool<true> : !cir.bool
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61b_badSource(!s32i) -> !s32i loc(#loc250)
  cir.func private  @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc251)
  cir.func private  @exit(!s32i) extra(#fn_attr) loc(#loc252)
  cir.func private  @printIntLine(!s32i) loc(#loc253)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc254)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"ERROR: Array index is negative.\00" : !cir.array<!s8i x 32>> : !cir.array<!s8i x 32> {alignment = 1 : i64} loc(#loc11)
  cir.func private  @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc255)
  cir.func no_proto  @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc257)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc18)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc19)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc258)
    %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc21)
    %4 = cir.call @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61b_badSource(%3) : (!s32i) -> !s32i loc(#loc22)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc259)
    cir.scope {
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc261)
      %6 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc262)
      %7 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc31)
      %8 = cir.const #cir.int<10> : !s32i loc(#loc32)
      %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc32)
      %10 = cir.const #cir.int<4> : !u64i loc(#loc263)
      %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc264)
      %12 = cir.call @malloc(%11) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc31)
      %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc265)
      cir.store %13, %6 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc262)
      cir.scope {
        %17 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc37)
        %18 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc38)
        %19 = cir.cast(bitcast, %18 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc38)
        %20 = cir.cmp(eq, %17, %19) : !cir.ptr<!s32i>, !s32i loc(#loc267)
        %21 = cir.cast(int_to_bool, %20 : !s32i), !cir.bool loc(#loc39)
        cir.if %21 {
          %22 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc41)
          %23 = cir.const #cir.int<1> : !s32i loc(#loc42)
          %24 = cir.unary(minus, %23) : !s32i, !s32i loc(#loc43)
          cir.call @exit(%24) : (!s32i) -> () extra(#fn_attr) loc(#loc41)
        } loc(#loc268)
      } loc(#loc266)
      cir.scope {
        %17 = cir.const #cir.int<0> : !s32i loc(#loc46)
        cir.store %17, %5 : !s32i, !cir.ptr<!s32i> loc(#loc270)
        cir.for : cond {
          %18 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc48)
          %19 = cir.const #cir.int<10> : !s32i loc(#loc49)
          %20 = cir.cmp(lt, %18, %19) : !s32i, !s32i loc(#loc271)
          %21 = cir.cast(int_to_bool, %20 : !s32i), !cir.bool loc(#loc50)
          cir.condition(%21) loc(#loc50)
        } body {
          cir.scope {
            %18 = cir.const #cir.int<0> : !s32i loc(#loc52)
            %19 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc53)
            %20 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc54)
            %21 = cir.ptr_stride(%19 : !cir.ptr<!s32i>, %20 : !s32i), !cir.ptr<!s32i> loc(#loc55)
            cir.store %18, %21 : !s32i, !cir.ptr<!s32i> loc(#loc273)
          } loc(#loc272)
          cir.yield loc(#loc45)
        } step {
          %18 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc56)
          %19 = cir.unary(inc, %18) : !s32i, !s32i loc(#loc57)
          cir.store %19, %5 : !s32i, !cir.ptr<!s32i> loc(#loc274)
          cir.yield loc(#loc269)
        } loc(#loc269)
      } loc(#loc269)
      cir.scope {
        %17 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc60)
        %18 = cir.const #cir.int<0> : !s32i loc(#loc61)
        %19 = cir.cmp(ge, %17, %18) : !s32i, !s32i loc(#loc276)
        %20 = cir.cast(int_to_bool, %19 : !s32i), !cir.bool loc(#loc62)
        cir.if %20 {
          %21 = cir.const #cir.int<1> : !s32i loc(#loc66)
          %22 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc67)
          %23 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc68)
          %24 = cir.ptr_stride(%22 : !cir.ptr<!s32i>, %23 : !s32i), !cir.ptr<!s32i> loc(#loc69)
          cir.store %21, %24 : !s32i, !cir.ptr<!s32i> loc(#loc278)
          cir.scope {
            %25 = cir.const #cir.int<0> : !s32i loc(#loc72)
            cir.store %25, %5 : !s32i, !cir.ptr<!s32i> loc(#loc280)
            cir.for : cond {
              %26 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc74)
              %27 = cir.const #cir.int<10> : !s32i loc(#loc75)
              %28 = cir.cmp(lt, %26, %27) : !s32i, !s32i loc(#loc281)
              %29 = cir.cast(int_to_bool, %28 : !s32i), !cir.bool loc(#loc76)
              cir.condition(%29) loc(#loc76)
            } body {
              cir.scope {
                %26 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc78)
                %27 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc79)
                %28 = cir.ptr_stride(%26 : !cir.ptr<!s32i>, %27 : !s32i), !cir.ptr<!s32i> loc(#loc80)
                %29 = cir.load %28 : !cir.ptr<!s32i>, !s32i loc(#loc78)
                cir.call @printIntLine(%29) : (!s32i) -> () loc(#loc81)
              } loc(#loc282)
              cir.yield loc(#loc71)
            } step {
              %26 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc82)
              %27 = cir.unary(inc, %26) : !s32i, !s32i loc(#loc83)
              cir.store %27, %5 : !s32i, !cir.ptr<!s32i> loc(#loc283)
              cir.yield loc(#loc279)
            } loc(#loc279)
          } loc(#loc279)
        } else {
          %21 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc11)
          %22 = cir.cast(array_to_ptrdecay, %21 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc11)
          cir.call @printLine(%22) : (!cir.ptr<!s8i>) -> () loc(#loc84)
        } loc(#loc277)
      } loc(#loc275)
      %14 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc85)
      %15 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc86)
      %16 = cir.cast(bitcast, %15 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc86)
      cir.call @free(%16) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc85)
    } loc(#loc260)
    cir.return loc(#loc15)
  } loc(#loc256)
  cir.func no_proto  @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc285)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc89)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc286)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc91)
    cir.return loc(#loc88)
  } loc(#loc284)
  cir.func private  @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61b_goodG2BSource(!s32i) -> !s32i loc(#loc287)
  cir.func no_proto internal private  @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc289)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc99)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc100)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc290)
    %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc102)
    %4 = cir.call @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61b_goodG2BSource(%3) : (!s32i) -> !s32i loc(#loc103)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc291)
    cir.scope {
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc293)
      %6 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc294)
      %7 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc112)
      %8 = cir.const #cir.int<10> : !s32i loc(#loc113)
      %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc113)
      %10 = cir.const #cir.int<4> : !u64i loc(#loc295)
      %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc296)
      %12 = cir.call @malloc(%11) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc112)
      %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc297)
      cir.store %13, %6 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc294)
      cir.scope {
        %17 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc118)
        %18 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc119)
        %19 = cir.cast(bitcast, %18 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc119)
        %20 = cir.cmp(eq, %17, %19) : !cir.ptr<!s32i>, !s32i loc(#loc299)
        %21 = cir.cast(int_to_bool, %20 : !s32i), !cir.bool loc(#loc120)
        cir.if %21 {
          %22 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc122)
          %23 = cir.const #cir.int<1> : !s32i loc(#loc123)
          %24 = cir.unary(minus, %23) : !s32i, !s32i loc(#loc124)
          cir.call @exit(%24) : (!s32i) -> () extra(#fn_attr) loc(#loc122)
        } loc(#loc300)
      } loc(#loc298)
      cir.scope {
        %17 = cir.const #cir.int<0> : !s32i loc(#loc127)
        cir.store %17, %5 : !s32i, !cir.ptr<!s32i> loc(#loc302)
        cir.for : cond {
          %18 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc129)
          %19 = cir.const #cir.int<10> : !s32i loc(#loc130)
          %20 = cir.cmp(lt, %18, %19) : !s32i, !s32i loc(#loc303)
          %21 = cir.cast(int_to_bool, %20 : !s32i), !cir.bool loc(#loc131)
          cir.condition(%21) loc(#loc131)
        } body {
          cir.scope {
            %18 = cir.const #cir.int<0> : !s32i loc(#loc133)
            %19 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc134)
            %20 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc135)
            %21 = cir.ptr_stride(%19 : !cir.ptr<!s32i>, %20 : !s32i), !cir.ptr<!s32i> loc(#loc136)
            cir.store %18, %21 : !s32i, !cir.ptr<!s32i> loc(#loc305)
          } loc(#loc304)
          cir.yield loc(#loc126)
        } step {
          %18 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc137)
          %19 = cir.unary(inc, %18) : !s32i, !s32i loc(#loc138)
          cir.store %19, %5 : !s32i, !cir.ptr<!s32i> loc(#loc306)
          cir.yield loc(#loc301)
        } loc(#loc301)
      } loc(#loc301)
      cir.scope {
        %17 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc141)
        %18 = cir.const #cir.int<0> : !s32i loc(#loc142)
        %19 = cir.cmp(ge, %17, %18) : !s32i, !s32i loc(#loc308)
        %20 = cir.cast(int_to_bool, %19 : !s32i), !cir.bool loc(#loc143)
        cir.if %20 {
          %21 = cir.const #cir.int<1> : !s32i loc(#loc147)
          %22 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc148)
          %23 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc149)
          %24 = cir.ptr_stride(%22 : !cir.ptr<!s32i>, %23 : !s32i), !cir.ptr<!s32i> loc(#loc150)
          cir.store %21, %24 : !s32i, !cir.ptr<!s32i> loc(#loc310)
          cir.scope {
            %25 = cir.const #cir.int<0> : !s32i loc(#loc153)
            cir.store %25, %5 : !s32i, !cir.ptr<!s32i> loc(#loc312)
            cir.for : cond {
              %26 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc155)
              %27 = cir.const #cir.int<10> : !s32i loc(#loc156)
              %28 = cir.cmp(lt, %26, %27) : !s32i, !s32i loc(#loc313)
              %29 = cir.cast(int_to_bool, %28 : !s32i), !cir.bool loc(#loc157)
              cir.condition(%29) loc(#loc157)
            } body {
              cir.scope {
                %26 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc159)
                %27 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc160)
                %28 = cir.ptr_stride(%26 : !cir.ptr<!s32i>, %27 : !s32i), !cir.ptr<!s32i> loc(#loc161)
                %29 = cir.load %28 : !cir.ptr<!s32i>, !s32i loc(#loc159)
                cir.call @printIntLine(%29) : (!s32i) -> () loc(#loc162)
              } loc(#loc314)
              cir.yield loc(#loc152)
            } step {
              %26 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc163)
              %27 = cir.unary(inc, %26) : !s32i, !s32i loc(#loc164)
              cir.store %27, %5 : !s32i, !cir.ptr<!s32i> loc(#loc315)
              cir.yield loc(#loc311)
            } loc(#loc311)
          } loc(#loc311)
        } else {
          %21 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc165)
          %22 = cir.cast(array_to_ptrdecay, %21 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc165)
          cir.call @printLine(%22) : (!cir.ptr<!s8i>) -> () loc(#loc166)
        } loc(#loc309)
      } loc(#loc307)
      %14 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc167)
      %15 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc168)
      %16 = cir.cast(bitcast, %15 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc168)
      cir.call @free(%16) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc167)
    } loc(#loc292)
    cir.return loc(#loc96)
  } loc(#loc288)
  cir.func private  @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61b_goodB2GSource(!s32i) -> !s32i loc(#loc316)
  cir.global "private"  constant internal dsolocal @".str1" = #cir.const_array<"ERROR: Array index is out-of-bounds\00" : !cir.array<!s8i x 36>> : !cir.array<!s8i x 36> {alignment = 1 : i64} loc(#loc171)
  cir.func no_proto internal private  @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc318)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc176)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc177)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc319)
    %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc179)
    %4 = cir.call @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61b_goodB2GSource(%3) : (!s32i) -> !s32i loc(#loc180)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc320)
    cir.scope {
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc322)
      %6 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc323)
      %7 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc189)
      %8 = cir.const #cir.int<10> : !s32i loc(#loc190)
      %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc190)
      %10 = cir.const #cir.int<4> : !u64i loc(#loc324)
      %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc325)
      %12 = cir.call @malloc(%11) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc189)
      %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc326)
      cir.store %13, %6 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc323)
      cir.scope {
        %17 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc195)
        %18 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc196)
        %19 = cir.cast(bitcast, %18 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc196)
        %20 = cir.cmp(eq, %17, %19) : !cir.ptr<!s32i>, !s32i loc(#loc328)
        %21 = cir.cast(int_to_bool, %20 : !s32i), !cir.bool loc(#loc197)
        cir.if %21 {
          %22 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc199)
          %23 = cir.const #cir.int<1> : !s32i loc(#loc200)
          %24 = cir.unary(minus, %23) : !s32i, !s32i loc(#loc201)
          cir.call @exit(%24) : (!s32i) -> () extra(#fn_attr) loc(#loc199)
        } loc(#loc329)
      } loc(#loc327)
      cir.scope {
        %17 = cir.const #cir.int<0> : !s32i loc(#loc204)
        cir.store %17, %5 : !s32i, !cir.ptr<!s32i> loc(#loc331)
        cir.for : cond {
          %18 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc206)
          %19 = cir.const #cir.int<10> : !s32i loc(#loc207)
          %20 = cir.cmp(lt, %18, %19) : !s32i, !s32i loc(#loc332)
          %21 = cir.cast(int_to_bool, %20 : !s32i), !cir.bool loc(#loc208)
          cir.condition(%21) loc(#loc208)
        } body {
          cir.scope {
            %18 = cir.const #cir.int<0> : !s32i loc(#loc210)
            %19 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc211)
            %20 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc212)
            %21 = cir.ptr_stride(%19 : !cir.ptr<!s32i>, %20 : !s32i), !cir.ptr<!s32i> loc(#loc213)
            cir.store %18, %21 : !s32i, !cir.ptr<!s32i> loc(#loc334)
          } loc(#loc333)
          cir.yield loc(#loc203)
        } step {
          %18 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc214)
          %19 = cir.unary(inc, %18) : !s32i, !s32i loc(#loc215)
          cir.store %19, %5 : !s32i, !cir.ptr<!s32i> loc(#loc335)
          cir.yield loc(#loc330)
        } loc(#loc330)
      } loc(#loc330)
      cir.scope {
        %17 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc218)
        %18 = cir.const #cir.int<0> : !s32i loc(#loc219)
        %19 = cir.cmp(ge, %17, %18) : !s32i, !s32i loc(#loc337)
        %20 = cir.cast(int_to_bool, %19 : !s32i), !cir.bool loc(#loc220)
        %21 = cir.ternary(%20, true {
          %22 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc222)
          %23 = cir.const #cir.int<10> : !s32i loc(#loc223)
          %24 = cir.cmp(lt, %22, %23) : !s32i, !s32i loc(#loc338)
          %25 = cir.cast(int_to_bool, %24 : !s32i), !cir.bool loc(#loc225)
          %26 = cir.ternary(%25, true {
            %27 = cir.const #true loc(#loc221)
            cir.yield %27 : !cir.bool loc(#loc221)
          }, false {
            %27 = cir.const #false loc(#loc221)
            cir.yield %27 : !cir.bool loc(#loc221)
          }) : (!cir.bool) -> !cir.bool loc(#loc221)
          cir.yield %26 : !cir.bool loc(#loc221)
        }, false {
          %22 = cir.const #false loc(#loc221)
          cir.yield %22 : !cir.bool loc(#loc221)
        }) : (!cir.bool) -> !cir.bool loc(#loc221)
        cir.if %21 {
          %22 = cir.const #cir.int<1> : !s32i loc(#loc229)
          %23 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc230)
          %24 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc231)
          %25 = cir.ptr_stride(%23 : !cir.ptr<!s32i>, %24 : !s32i), !cir.ptr<!s32i> loc(#loc232)
          cir.store %22, %25 : !s32i, !cir.ptr<!s32i> loc(#loc340)
          cir.scope {
            %26 = cir.const #cir.int<0> : !s32i loc(#loc235)
            cir.store %26, %5 : !s32i, !cir.ptr<!s32i> loc(#loc342)
            cir.for : cond {
              %27 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc237)
              %28 = cir.const #cir.int<10> : !s32i loc(#loc238)
              %29 = cir.cmp(lt, %27, %28) : !s32i, !s32i loc(#loc343)
              %30 = cir.cast(int_to_bool, %29 : !s32i), !cir.bool loc(#loc239)
              cir.condition(%30) loc(#loc239)
            } body {
              cir.scope {
                %27 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc241)
                %28 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc242)
                %29 = cir.ptr_stride(%27 : !cir.ptr<!s32i>, %28 : !s32i), !cir.ptr<!s32i> loc(#loc243)
                %30 = cir.load %29 : !cir.ptr<!s32i>, !s32i loc(#loc241)
                cir.call @printIntLine(%30) : (!s32i) -> () loc(#loc244)
              } loc(#loc344)
              cir.yield loc(#loc234)
            } step {
              %27 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc245)
              %28 = cir.unary(inc, %27) : !s32i, !s32i loc(#loc246)
              cir.store %28, %5 : !s32i, !cir.ptr<!s32i> loc(#loc345)
              cir.yield loc(#loc341)
            } loc(#loc341)
          } loc(#loc341)
        } else {
          %22 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc171)
          %23 = cir.cast(array_to_ptrdecay, %22 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc171)
          cir.call @printLine(%23) : (!cir.ptr<!s8i>) -> () loc(#loc247)
        } loc(#loc339)
      } loc(#loc336)
      %14 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc248)
      %15 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc249)
      %16 = cir.cast(bitcast, %15 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc249)
      cir.call @free(%16) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc248)
    } loc(#loc321)
    cir.return loc(#loc173)
  } loc(#loc317)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":0:0)
#loc1 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":23:1)
#loc2 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":23:77)
#loc3 = loc("/usr/include/stdlib.h":672:1)
#loc4 = loc("/usr/include/stdlib.h":672:45)
#loc5 = loc("/usr/include/stdlib.h":756:1)
#loc6 = loc("/usr/include/stdlib.h":756:70)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc9 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc10 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":53:23)
#loc12 = loc("/usr/include/stdlib.h":687:1)
#loc13 = loc("/usr/include/stdlib.h":687:32)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":25:1)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":57:1)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":27:5)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":27:9)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":29:13)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":29:12)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":29:5)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":30:76)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":30:12)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":30:5)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":30:80)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":31:5)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":56:5)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":32:9)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":32:13)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":33:9)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":33:54)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":33:31)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":33:38)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":33:43)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":33:53)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":34:9)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":34:39)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":34:13)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":34:23)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":34:20)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":34:29)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":34:30)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":34:36)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":34:35)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":36:9)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":39:9)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":36:18)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":36:14)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":36:21)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":36:25)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":36:23)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":37:9)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":38:25)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":38:13)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":38:20)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":38:21)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":36:30)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":36:29)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":42:9)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":54:9)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":42:13)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":42:21)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":42:18)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":43:9)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":50:9)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":52:9)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":44:28)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":44:13)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":44:20)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":44:24)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":46:13)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":49:13)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":46:21)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":46:17)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":46:24)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":46:28)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":46:26)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":47:13)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":48:30)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":48:37)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":48:38)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":48:17)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":46:33)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":46:32)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":53:13)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":55:9)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":55:14)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":136:1)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":140:1)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":138:5)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":138:13)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":139:5)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":139:13)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":64:1)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":64:81)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":66:1)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":98:1)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":68:5)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":68:9)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":70:13)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":70:12)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":70:5)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":71:80)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":71:12)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":71:5)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":71:84)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":72:5)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":97:5)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":73:9)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":73:13)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":74:9)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":74:54)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":74:31)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":74:38)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":74:43)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":74:53)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":75:9)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":75:39)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":75:13)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":75:23)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":75:20)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":75:29)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":75:30)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":75:36)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":75:35)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":77:9)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":80:9)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":77:18)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":77:14)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":77:21)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":77:25)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":77:23)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":78:9)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":79:25)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":79:13)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":79:20)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":79:21)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":77:30)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":77:29)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":83:9)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":95:9)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":83:13)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":83:21)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":83:18)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":84:9)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":91:9)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":93:9)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":85:28)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":85:13)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":85:20)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":85:24)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":87:13)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":90:13)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":87:21)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":87:17)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":87:24)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":87:28)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":87:26)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":88:13)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":89:30)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":89:37)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":89:38)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":89:17)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":87:33)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":87:32)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":94:23)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":94:13)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":96:9)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":96:14)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":101:1)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":101:81)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":130:23)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":103:1)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":134:1)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":105:5)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":105:9)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":107:13)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":107:12)
#loc178 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":107:5)
#loc179 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":108:80)
#loc180 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":108:12)
#loc181 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":108:5)
#loc182 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":108:84)
#loc183 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":109:5)
#loc184 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":133:5)
#loc185 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":110:9)
#loc186 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":110:13)
#loc187 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":111:9)
#loc188 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":111:54)
#loc189 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":111:31)
#loc190 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":111:38)
#loc191 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":111:43)
#loc192 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":111:53)
#loc193 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":112:9)
#loc194 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":112:39)
#loc195 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":112:13)
#loc196 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":112:23)
#loc197 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":112:20)
#loc198 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":112:29)
#loc199 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":112:30)
#loc200 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":112:36)
#loc201 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":112:35)
#loc202 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":114:9)
#loc203 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":117:9)
#loc204 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":114:18)
#loc205 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":114:14)
#loc206 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":114:21)
#loc207 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":114:25)
#loc208 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":114:23)
#loc209 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":115:9)
#loc210 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":116:25)
#loc211 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":116:13)
#loc212 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":116:20)
#loc213 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":116:21)
#loc214 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":114:30)
#loc215 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":114:29)
#loc216 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":119:9)
#loc217 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":131:9)
#loc218 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":119:13)
#loc219 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":119:21)
#loc220 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":119:18)
#loc221 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":119:23)
#loc222 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":119:26)
#loc223 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":119:34)
#loc224 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":119:36)
#loc225 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":119:31)
#loc226 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":120:9)
#loc227 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":127:9)
#loc228 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":129:9)
#loc229 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":121:28)
#loc230 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":121:13)
#loc231 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":121:20)
#loc232 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":121:24)
#loc233 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":123:13)
#loc234 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":126:13)
#loc235 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":123:21)
#loc236 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":123:17)
#loc237 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":123:24)
#loc238 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":123:28)
#loc239 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":123:26)
#loc240 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":124:13)
#loc241 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":125:30)
#loc242 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":125:37)
#loc243 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":125:38)
#loc244 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":125:17)
#loc245 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":123:33)
#loc246 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":123:32)
#loc247 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":130:13)
#loc248 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":132:9)
#loc249 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c":132:14)
#loc250 = loc(fused[#loc1, #loc2])
#loc251 = loc(fused[#loc3, #loc4])
#loc252 = loc(fused[#loc5, #loc6])
#loc253 = loc(fused[#loc7, #loc8])
#loc254 = loc(fused[#loc9, #loc10])
#loc255 = loc(fused[#loc12, #loc13])
#loc256 = loc(fused[#loc14, #loc15])
#loc257 = loc(fused[#loc16, #loc17])
#loc258 = loc(fused[#loc20, #loc18])
#loc259 = loc(fused[#loc23, #loc24])
#loc260 = loc(fused[#loc25, #loc26])
#loc261 = loc(fused[#loc27, #loc28])
#loc262 = loc(fused[#loc29, #loc30])
#loc263 = loc(fused[#loc33, #loc34])
#loc264 = loc(fused[#loc32, #loc34])
#loc265 = loc(fused[#loc31, #loc30])
#loc266 = loc(fused[#loc35, #loc36])
#loc267 = loc(fused[#loc37, #loc38])
#loc268 = loc(fused[#loc40, #loc36])
#loc269 = loc(fused[#loc44, #loc45])
#loc270 = loc(fused[#loc47, #loc46])
#loc271 = loc(fused[#loc48, #loc49])
#loc272 = loc(fused[#loc51, #loc45])
#loc273 = loc(fused[#loc53, #loc52])
#loc274 = loc(fused[#loc57, #loc56])
#loc275 = loc(fused[#loc58, #loc59])
#loc276 = loc(fused[#loc60, #loc61])
#loc277 = loc(fused[#loc63, #loc64, #loc65, #loc59])
#loc278 = loc(fused[#loc67, #loc66])
#loc279 = loc(fused[#loc70, #loc71])
#loc280 = loc(fused[#loc73, #loc72])
#loc281 = loc(fused[#loc74, #loc75])
#loc282 = loc(fused[#loc77, #loc71])
#loc283 = loc(fused[#loc83, #loc82])
#loc284 = loc(fused[#loc87, #loc88])
#loc285 = loc(fused[#loc89, #loc90])
#loc286 = loc(fused[#loc91, #loc92])
#loc287 = loc(fused[#loc93, #loc94])
#loc288 = loc(fused[#loc95, #loc96])
#loc289 = loc(fused[#loc97, #loc98])
#loc290 = loc(fused[#loc101, #loc99])
#loc291 = loc(fused[#loc104, #loc105])
#loc292 = loc(fused[#loc106, #loc107])
#loc293 = loc(fused[#loc108, #loc109])
#loc294 = loc(fused[#loc110, #loc111])
#loc295 = loc(fused[#loc114, #loc115])
#loc296 = loc(fused[#loc113, #loc115])
#loc297 = loc(fused[#loc112, #loc111])
#loc298 = loc(fused[#loc116, #loc117])
#loc299 = loc(fused[#loc118, #loc119])
#loc300 = loc(fused[#loc121, #loc117])
#loc301 = loc(fused[#loc125, #loc126])
#loc302 = loc(fused[#loc128, #loc127])
#loc303 = loc(fused[#loc129, #loc130])
#loc304 = loc(fused[#loc132, #loc126])
#loc305 = loc(fused[#loc134, #loc133])
#loc306 = loc(fused[#loc138, #loc137])
#loc307 = loc(fused[#loc139, #loc140])
#loc308 = loc(fused[#loc141, #loc142])
#loc309 = loc(fused[#loc144, #loc145, #loc146, #loc140])
#loc310 = loc(fused[#loc148, #loc147])
#loc311 = loc(fused[#loc151, #loc152])
#loc312 = loc(fused[#loc154, #loc153])
#loc313 = loc(fused[#loc155, #loc156])
#loc314 = loc(fused[#loc158, #loc152])
#loc315 = loc(fused[#loc164, #loc163])
#loc316 = loc(fused[#loc169, #loc170])
#loc317 = loc(fused[#loc172, #loc173])
#loc318 = loc(fused[#loc174, #loc175])
#loc319 = loc(fused[#loc178, #loc176])
#loc320 = loc(fused[#loc181, #loc182])
#loc321 = loc(fused[#loc183, #loc184])
#loc322 = loc(fused[#loc185, #loc186])
#loc323 = loc(fused[#loc187, #loc188])
#loc324 = loc(fused[#loc191, #loc192])
#loc325 = loc(fused[#loc190, #loc192])
#loc326 = loc(fused[#loc189, #loc188])
#loc327 = loc(fused[#loc193, #loc194])
#loc328 = loc(fused[#loc195, #loc196])
#loc329 = loc(fused[#loc198, #loc194])
#loc330 = loc(fused[#loc202, #loc203])
#loc331 = loc(fused[#loc205, #loc204])
#loc332 = loc(fused[#loc206, #loc207])
#loc333 = loc(fused[#loc209, #loc203])
#loc334 = loc(fused[#loc211, #loc210])
#loc335 = loc(fused[#loc215, #loc214])
#loc336 = loc(fused[#loc216, #loc217])
#loc337 = loc(fused[#loc218, #loc219])
#loc338 = loc(fused[#loc222, #loc224])
#loc339 = loc(fused[#loc226, #loc227, #loc228, #loc217])
#loc340 = loc(fused[#loc230, #loc229])
#loc341 = loc(fused[#loc233, #loc234])
#loc342 = loc(fused[#loc236, #loc235])
#loc343 = loc(fused[#loc237, #loc238])
#loc344 = loc(fused[#loc240, #loc234])
#loc345 = loc(fused[#loc246, #loc245])
