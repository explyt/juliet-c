!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE617_Reachable_Assertion/CWE617_Reachable_Assertion__rand_45.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr = dense<64> : vector<4xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e">} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc50)
  cir.global "private" internal dsolocal @CWE617_Reachable_Assertion__rand_45_badData = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc51)
  cir.func no_proto @CWE617_Reachable_Assertion__rand_45_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc53)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc9)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc10)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc54)
    %3 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc12)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc12)
    %5 = cir.binop(and, %3, %4) : !s32i loc(#loc12)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc12)
    %7 = cir.ternary(%6, true {
      %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc12)
      %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc12)
      %14 = cir.const #cir.int<30> : !s32i loc(#loc12)
      %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc12)
      %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc12)
      %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc12)
      %18 = cir.const #cir.int<15> : !s32i loc(#loc12)
      %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc12)
      %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc12)
      %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc12)
      %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc12)
      %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc12)
      cir.yield %23 : !u32i loc(#loc12)
    }, false {
      %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc12)
      %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc12)
      %14 = cir.const #cir.int<30> : !s32i loc(#loc12)
      %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc12)
      %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc12)
      %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc12)
      %18 = cir.const #cir.int<15> : !s32i loc(#loc12)
      %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc12)
      %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc12)
      %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc12)
      %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc12)
      %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc12)
      %24 = cir.unary(minus, %23) : !u32i, !u32i loc(#loc12)
      %25 = cir.const #cir.int<1> : !s32i loc(#loc12)
      %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc12)
      %27 = cir.binop(sub, %24, %26) : !u32i loc(#loc12)
      cir.yield %27 : !u32i loc(#loc12)
    }) : (!cir.bool) -> !u32i loc(#loc12)
    %8 = cir.cast(integral, %7 : !u32i), !s32i loc(#loc12)
    cir.store %8, %0 : !s32i, !cir.ptr<!s32i> loc(#loc55)
    %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc14)
    %10 = cir.get_global @CWE617_Reachable_Assertion__rand_45_badData : !cir.ptr<!s32i> loc(#loc51)
    cir.store %9, %10 : !s32i, !cir.ptr<!s32i> loc(#loc56)
    %11 = cir.get_global @badSink : !cir.ptr<!cir.func<()>> loc(#loc57)
    cir.call %11() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc16)
    cir.return loc(#loc6)
  } loc(#loc52)
  cir.func no_proto @CWE617_Reachable_Assertion__rand_45_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc59)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc20)
    cir.return loc(#loc19)
  } loc(#loc58)
  cir.func private @__assert_fail(!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) extra(#fn_attr) loc(#loc60)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data > ASSERT_VALUE\00" : !cir.array<!s8i x 20>> : !cir.array<!s8i x 20> {alignment = 1 : i64} loc(#loc24)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"CWE617_Reachable_Assertion__rand_45.c\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc24)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"void badSink()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc24)
  cir.func no_proto internal private @badSink() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc62)
    %1 = cir.get_global @CWE617_Reachable_Assertion__rand_45_badData : !cir.ptr<!s32i> loc(#loc51)
    %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc28)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc62)
    %3 = cir.const #cir.int<4> : !u64i loc(#loc24)
    cir.scope {
      cir.scope {
        %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc24)
        %5 = cir.const #cir.int<5> : !s32i loc(#loc24)
        %6 = cir.cmp(gt, %4, %5) : !s32i, !cir.bool loc(#loc24)
        cir.if %6 {
        } else {
          %7 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 20>> loc(#loc24)
          %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc24)
          %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc24)
          %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc24)
          %11 = cir.const #cir.int<32> : !s32i loc(#loc24)
          %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc24)
          %13 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc24)
          %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc24)
          cir.call @__assert_fail(%8, %10, %12, %14) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) -> () extra(#fn_attr) loc(#loc24)
        } loc(#loc24)
      } loc(#loc24)
    } loc(#loc24)
    cir.return loc(#loc26)
  } loc(#loc61)
  cir.global "private" internal dsolocal @CWE617_Reachable_Assertion__rand_45_goodG2BData = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc63)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc65)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc35)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc36)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc66)
    %3 = cir.const #cir.int<5> : !s32i loc(#loc38)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc39)
    %5 = cir.binop(add, %3, %4) nsw : !s32i loc(#loc38)
    cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc67)
    %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc41)
    %7 = cir.get_global @CWE617_Reachable_Assertion__rand_45_goodG2BData : !cir.ptr<!s32i> loc(#loc63)
    cir.store %6, %7 : !s32i, !cir.ptr<!s32i> loc(#loc68)
    %8 = cir.get_global @goodG2BSink : !cir.ptr<!cir.func<()>> loc(#loc69)
    cir.call %8() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc43)
    cir.return loc(#loc32)
  } loc(#loc64)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"void goodG2BSink()\00" : !cir.array<!s8i x 19>> : !cir.array<!s8i x 19> {alignment = 1 : i64} loc(#loc45)
  cir.func no_proto internal private @goodG2BSink() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc71)
    %1 = cir.get_global @CWE617_Reachable_Assertion__rand_45_goodG2BData : !cir.ptr<!s32i> loc(#loc63)
    %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc49)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc71)
    %3 = cir.const #cir.int<4> : !u64i loc(#loc45)
    cir.scope {
      cir.scope {
        %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc45)
        %5 = cir.const #cir.int<5> : !s32i loc(#loc45)
        %6 = cir.cmp(gt, %4, %5) : !s32i, !cir.bool loc(#loc45)
        cir.if %6 {
        } else {
          %7 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 20>> loc(#loc45)
          %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc45)
          %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc45)
          %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc45)
          %11 = cir.const #cir.int<55> : !s32i loc(#loc45)
          %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc45)
          %13 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 19>> loc(#loc45)
          %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 19>>), !cir.ptr<!s8i> loc(#loc45)
          cir.call @__assert_fail(%8, %10, %12, %14) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) -> () extra(#fn_attr) loc(#loc45)
        } loc(#loc45)
      } loc(#loc45)
    } loc(#loc45)
    cir.return loc(#loc47)
  } loc(#loc70)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE617_Reachable_Assertion/CWE617_Reachable_Assertion__rand_45.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("CWE617_Reachable_Assertion__rand_45.c":23:1)
#loc4 = loc("CWE617_Reachable_Assertion__rand_45.c":23:12)
#loc5 = loc("CWE617_Reachable_Assertion__rand_45.c":35:1)
#loc6 = loc("CWE617_Reachable_Assertion__rand_45.c":44:1)
#loc7 = loc("CWE617_Reachable_Assertion__rand_45.c":37:5)
#loc8 = loc("CWE617_Reachable_Assertion__rand_45.c":37:9)
#loc9 = loc("CWE617_Reachable_Assertion__rand_45.c":39:13)
#loc10 = loc("CWE617_Reachable_Assertion__rand_45.c":39:12)
#loc11 = loc("CWE617_Reachable_Assertion__rand_45.c":39:5)
#loc12 = loc("CWE617_Reachable_Assertion__rand_45.c":41:12)
#loc13 = loc("CWE617_Reachable_Assertion__rand_45.c":41:5)
#loc14 = loc("CWE617_Reachable_Assertion__rand_45.c":42:51)
#loc15 = loc("CWE617_Reachable_Assertion__rand_45.c":42:5)
#loc16 = loc("CWE617_Reachable_Assertion__rand_45.c":43:5)
#loc17 = loc("CWE617_Reachable_Assertion__rand_45.c":43:13)
#loc18 = loc("CWE617_Reachable_Assertion__rand_45.c":69:1)
#loc19 = loc("CWE617_Reachable_Assertion__rand_45.c":72:1)
#loc20 = loc("CWE617_Reachable_Assertion__rand_45.c":71:5)
#loc21 = loc("CWE617_Reachable_Assertion__rand_45.c":71:13)
#loc22 = loc("/usr/include/assert.h":69:1)
#loc23 = loc("/usr/include/assert.h":71:43)
#loc24 = loc("CWE617_Reachable_Assertion__rand_45.c":32:5)
#loc25 = loc("CWE617_Reachable_Assertion__rand_45.c":28:1)
#loc26 = loc("CWE617_Reachable_Assertion__rand_45.c":33:1)
#loc27 = loc("CWE617_Reachable_Assertion__rand_45.c":30:5)
#loc28 = loc("CWE617_Reachable_Assertion__rand_45.c":30:16)
#loc29 = loc("CWE617_Reachable_Assertion__rand_45.c":24:1)
#loc30 = loc("CWE617_Reachable_Assertion__rand_45.c":24:12)
#loc31 = loc("CWE617_Reachable_Assertion__rand_45.c":58:1)
#loc32 = loc("CWE617_Reachable_Assertion__rand_45.c":67:1)
#loc33 = loc("CWE617_Reachable_Assertion__rand_45.c":60:5)
#loc34 = loc("CWE617_Reachable_Assertion__rand_45.c":60:9)
#loc35 = loc("CWE617_Reachable_Assertion__rand_45.c":62:13)
#loc36 = loc("CWE617_Reachable_Assertion__rand_45.c":62:12)
#loc37 = loc("CWE617_Reachable_Assertion__rand_45.c":62:5)
#loc38 = loc("CWE617_Reachable_Assertion__rand_45.c":64:12)
#loc39 = loc("CWE617_Reachable_Assertion__rand_45.c":64:25)
#loc40 = loc("CWE617_Reachable_Assertion__rand_45.c":64:5)
#loc41 = loc("CWE617_Reachable_Assertion__rand_45.c":65:55)
#loc42 = loc("CWE617_Reachable_Assertion__rand_45.c":65:5)
#loc43 = loc("CWE617_Reachable_Assertion__rand_45.c":66:5)
#loc44 = loc("CWE617_Reachable_Assertion__rand_45.c":66:17)
#loc45 = loc("CWE617_Reachable_Assertion__rand_45.c":55:5)
#loc46 = loc("CWE617_Reachable_Assertion__rand_45.c":51:1)
#loc47 = loc("CWE617_Reachable_Assertion__rand_45.c":56:1)
#loc48 = loc("CWE617_Reachable_Assertion__rand_45.c":53:5)
#loc49 = loc("CWE617_Reachable_Assertion__rand_45.c":53:16)
#loc50 = loc(fused[#loc1, #loc2])
#loc51 = loc(fused[#loc3, #loc4])
#loc52 = loc(fused[#loc5, #loc6])
#loc53 = loc(fused[#loc7, #loc8])
#loc54 = loc(fused[#loc11, #loc9])
#loc55 = loc(fused[#loc13, #loc12])
#loc56 = loc(fused[#loc15, #loc14])
#loc57 = loc(fused[#loc16, #loc17])
#loc58 = loc(fused[#loc18, #loc19])
#loc59 = loc(fused[#loc20, #loc21])
#loc60 = loc(fused[#loc22, #loc23])
#loc61 = loc(fused[#loc25, #loc26])
#loc62 = loc(fused[#loc27, #loc28])
#loc63 = loc(fused[#loc29, #loc30])
#loc64 = loc(fused[#loc31, #loc32])
#loc65 = loc(fused[#loc33, #loc34])
#loc66 = loc(fused[#loc37, #loc35])
#loc67 = loc(fused[#loc40, #loc39])
#loc68 = loc(fused[#loc42, #loc41])
#loc69 = loc(fused[#loc43, #loc44])
#loc70 = loc(fused[#loc46, #loc47])
#loc71 = loc(fused[#loc48, #loc49])
