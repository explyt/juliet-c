!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.record<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.record<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.record<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
!ty__IO_FILE = !cir.record<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/workspaces/juliet-c/testcases/CWE253_Incorrect_Check_of_Function_Return_Value/CWE253_Incorrect_Check_of_Function_Return_Value__char_putc_11.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64>} {
  cir.func no_proto private @globalReturnsTrue(...) -> !s32i loc(#loc69)
  cir.func private @putc(!s32i, !cir.ptr<!ty__IO_FILE>) -> !s32i loc(#loc70)
  cir.global "private" external @stdout : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc71)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc72)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"putc failed!\00" : !cir.array<!s8i x 13>> : !cir.array<!s8i x 13> {alignment = 1 : i64} loc(#loc9)
  cir.func no_proto @CWE253_Incorrect_Check_of_Function_Return_Value__char_putc_11_bad() extra(#fn_attr) {
    cir.scope {
      %0 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc75)
      %1 = cir.cast(bitcast, %0 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc75)
      %2 = cir.call %1() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc14)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc14)
      cir.if %3 {
        cir.scope {
          %4 = cir.const #cir.int<65> : !s32i loc(#loc19)
          %5 = cir.get_global @stdout : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc71)
          %6 = cir.load %5 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc20)
          %7 = cir.call @putc(%4, %6) : (!s32i, !cir.ptr<!ty__IO_FILE>) -> !s32i loc(#loc21)
          %8 = cir.const #cir.int<0> : !s32i loc(#loc22)
          %9 = cir.cmp(eq, %7, %8) : !s32i, !cir.bool loc(#loc78)
          cir.if %9 {
            %10 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 13>> loc(#loc9)
            %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 13>>), !cir.ptr<!s8i> loc(#loc9)
            cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc24)
          } loc(#loc79)
        } loc(#loc77)
      } loc(#loc76)
    } loc(#loc74)
    cir.return loc(#loc11)
  } loc(#loc73)
  cir.func no_proto @CWE253_Incorrect_Check_of_Function_Return_Value__char_putc_11_good() extra(#fn_attr) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<()>> loc(#loc81)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc27)
    %1 = cir.get_global @good2 : !cir.ptr<!cir.func<()>> loc(#loc82)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc29)
    cir.return loc(#loc26)
  } loc(#loc80)
  cir.func no_proto private @globalReturnsFalse(...) -> !s32i loc(#loc83)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc33)
  cir.func no_proto internal private @good1() extra(#fn_attr) {
    cir.scope {
      %0 = cir.get_global @globalReturnsFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc86)
      %1 = cir.cast(bitcast, %0 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc86)
      %2 = cir.call %1() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc38)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc38)
      cir.if %3 {
        %4 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc33)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc33)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc43)
      } else {
        cir.scope {
          %4 = cir.const #cir.int<65> : !s32i loc(#loc46)
          %5 = cir.get_global @stdout : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc71)
          %6 = cir.load %5 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc47)
          %7 = cir.call @putc(%4, %6) : (!s32i, !cir.ptr<!ty__IO_FILE>) -> !s32i loc(#loc48)
          %8 = cir.const #cir.int<1> : !s32i loc(#loc49)
          %9 = cir.unary(minus, %8) nsw : !s32i, !s32i loc(#loc49)
          %10 = cir.cmp(eq, %7, %9) : !s32i, !cir.bool loc(#loc89)
          cir.if %10 {
            %11 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 13>> loc(#loc51)
            %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 13>>), !cir.ptr<!s8i> loc(#loc51)
            cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc52)
          } loc(#loc90)
        } loc(#loc88)
      } loc(#loc87)
    } loc(#loc85)
    cir.return loc(#loc35)
  } loc(#loc84)
  cir.func no_proto internal private @good2() extra(#fn_attr) {
    cir.scope {
      %0 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc93)
      %1 = cir.cast(bitcast, %0 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc93)
      %2 = cir.call %1() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc57)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc57)
      cir.if %3 {
        cir.scope {
          %4 = cir.const #cir.int<65> : !s32i loc(#loc62)
          %5 = cir.get_global @stdout : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc71)
          %6 = cir.load %5 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc63)
          %7 = cir.call @putc(%4, %6) : (!s32i, !cir.ptr<!ty__IO_FILE>) -> !s32i loc(#loc64)
          %8 = cir.const #cir.int<1> : !s32i loc(#loc65)
          %9 = cir.unary(minus, %8) nsw : !s32i, !s32i loc(#loc65)
          %10 = cir.cmp(eq, %7, %9) : !s32i, !cir.bool loc(#loc96)
          cir.if %10 {
            %11 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 13>> loc(#loc67)
            %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 13>>), !cir.ptr<!s8i> loc(#loc67)
            cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc68)
          } loc(#loc97)
        } loc(#loc95)
      } loc(#loc94)
    } loc(#loc92)
    cir.return loc(#loc54)
  } loc(#loc91)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE253_Incorrect_Check_of_Function_Return_Value/CWE253_Incorrect_Check_of_Function_Return_Value__char_putc_11.c":0:0)
#loc1 = loc("../../testcasesupport/std_testcase_io.h":48:1)
#loc2 = loc("../../testcasesupport/std_testcase_io.h":48:23)
#loc3 = loc("/usr/include/stdio.h":612:1)
#loc4 = loc("/usr/include/stdio.h":612:43)
#loc5 = loc("/usr/include/stdio.h":150:1)
#loc6 = loc("/usr/include/stdio.h":150:14)
#loc7 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putc_11.c":32:23)
#loc10 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putc_11.c":24:1)
#loc11 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putc_11.c":35:1)
#loc12 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putc_11.c":26:5)
#loc13 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putc_11.c":34:5)
#loc14 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putc_11.c":26:8)
#loc15 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putc_11.c":26:26)
#loc16 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putc_11.c":27:5)
#loc17 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putc_11.c":30:9)
#loc18 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putc_11.c":33:9)
#loc19 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putc_11.c":30:23)
#loc20 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putc_11.c":30:28)
#loc21 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putc_11.c":30:13)
#loc22 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putc_11.c":30:39)
#loc23 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putc_11.c":31:9)
#loc24 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putc_11.c":32:13)
#loc25 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putc_11.c":72:1)
#loc26 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putc_11.c":76:1)
#loc27 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putc_11.c":74:5)
#loc28 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putc_11.c":74:11)
#loc29 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putc_11.c":75:5)
#loc30 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putc_11.c":75:11)
#loc31 = loc("../../testcasesupport/std_testcase_io.h":50:1)
#loc32 = loc("../../testcasesupport/std_testcase_io.h":50:24)
#loc33 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putc_11.c":47:19)
#loc34 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putc_11.c":42:1)
#loc35 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putc_11.c":57:1)
#loc36 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putc_11.c":44:5)
#loc37 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putc_11.c":56:5)
#loc38 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putc_11.c":44:8)
#loc39 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putc_11.c":44:27)
#loc40 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putc_11.c":45:5)
#loc41 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putc_11.c":48:5)
#loc42 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putc_11.c":50:5)
#loc43 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putc_11.c":47:9)
#loc44 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putc_11.c":52:9)
#loc45 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putc_11.c":55:9)
#loc46 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putc_11.c":52:23)
#loc47 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putc_11.c":52:28)
#loc48 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putc_11.c":52:13)
#loc49 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putc_11.c":52:39)
#loc50 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putc_11.c":53:9)
#loc51 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putc_11.c":54:23)
#loc52 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putc_11.c":54:13)
#loc53 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putc_11.c":60:1)
#loc54 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putc_11.c":70:1)
#loc55 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putc_11.c":62:5)
#loc56 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putc_11.c":69:5)
#loc57 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putc_11.c":62:8)
#loc58 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putc_11.c":62:26)
#loc59 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putc_11.c":63:5)
#loc60 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putc_11.c":65:9)
#loc61 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putc_11.c":68:9)
#loc62 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putc_11.c":65:23)
#loc63 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putc_11.c":65:28)
#loc64 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putc_11.c":65:13)
#loc65 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putc_11.c":65:39)
#loc66 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putc_11.c":66:9)
#loc67 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putc_11.c":67:23)
#loc68 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putc_11.c":67:13)
#loc69 = loc(fused[#loc1, #loc2])
#loc70 = loc(fused[#loc3, #loc4])
#loc71 = loc(fused[#loc5, #loc6])
#loc72 = loc(fused[#loc7, #loc8])
#loc73 = loc(fused[#loc10, #loc11])
#loc74 = loc(fused[#loc12, #loc13])
#loc75 = loc(fused[#loc14, #loc15])
#loc76 = loc(fused[#loc16, #loc13])
#loc77 = loc(fused[#loc17, #loc18])
#loc78 = loc(fused[#loc21, #loc22])
#loc79 = loc(fused[#loc23, #loc18])
#loc80 = loc(fused[#loc25, #loc26])
#loc81 = loc(fused[#loc27, #loc28])
#loc82 = loc(fused[#loc29, #loc30])
#loc83 = loc(fused[#loc31, #loc32])
#loc84 = loc(fused[#loc34, #loc35])
#loc85 = loc(fused[#loc36, #loc37])
#loc86 = loc(fused[#loc38, #loc39])
#loc87 = loc(fused[#loc40, #loc41, #loc42, #loc37])
#loc88 = loc(fused[#loc44, #loc45])
#loc89 = loc(fused[#loc48, #loc49])
#loc90 = loc(fused[#loc50, #loc45])
#loc91 = loc(fused[#loc53, #loc54])
#loc92 = loc(fused[#loc55, #loc56])
#loc93 = loc(fused[#loc57, #loc58])
#loc94 = loc(fused[#loc59, #loc56])
#loc95 = loc(fused[#loc60, #loc61])
#loc96 = loc(fused[#loc64, #loc65])
#loc97 = loc(fused[#loc66, #loc61])
