!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__float_zero_08.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @printIntLine(!s32i) loc(#loc177)
  cir.func no_proto @CWE369_Divide_by_Zero__float_zero_08_bad() extra(#fn_attr) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc179)
    %1 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc7)
    cir.store %1, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc180)
    cir.scope {
      %2 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<() -> !s32i>> loc(#loc182)
      %3 = cir.call %2() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc11)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc11)
      cir.if %4 {
        %5 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc14)
        cir.store %5, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc184)
      } loc(#loc183)
    } loc(#loc181)
    cir.scope {
      %2 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<() -> !s32i>> loc(#loc186)
      %3 = cir.call %2() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc18)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc18)
      cir.if %4 {
        cir.scope {
          %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc189)
          %6 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc25)
          %7 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc26)
          %8 = cir.cast(floating, %7 : !cir.float), !cir.double loc(#loc26)
          %9 = cir.binop(div, %6, %8) : !cir.double loc(#loc190)
          %10 = cir.cast(float_to_int, %9 : !cir.double), !s32i loc(#loc190)
          cir.store %10, %5 : !s32i, !cir.ptr<!s32i> loc(#loc189)
          %11 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc27)
          cir.call @printIntLine(%11) : (!s32i) -> () loc(#loc28)
        } loc(#loc188)
      } loc(#loc187)
    } loc(#loc185)
    cir.return loc(#loc4)
  } loc(#loc178)
  cir.func no_proto @CWE369_Divide_by_Zero__float_zero_08_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<()>> loc(#loc192)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc31)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<()>> loc(#loc193)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc33)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<()>> loc(#loc194)
    cir.call %2() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc35)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<()>> loc(#loc195)
    cir.call %3() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc37)
    cir.return loc(#loc30)
  } loc(#loc191)
  cir.func no_proto internal private @staticReturnsTrue() -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc40)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc41)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc197)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc197)
    cir.return %2 : !s32i loc(#loc197)
  } loc(#loc196)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc198)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc45)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"This would result in a divide by zero\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc46)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc200)
    %1 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc51)
    cir.store %1, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc201)
    cir.scope {
      %2 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<() -> !s32i>> loc(#loc203)
      %3 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc55)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc55)
      cir.if %4 {
        %5 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc58)
        cir.store %5, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc205)
      } loc(#loc204)
    } loc(#loc202)
    cir.scope {
      %2 = cir.get_global @staticReturnsFalse : !cir.ptr<!cir.func<() -> !s32i>> loc(#loc207)
      %3 = cir.call %2() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc62)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc62)
      cir.if %4 {
        %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc45)
        %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc45)
        cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc67)
      } else {
        cir.scope {
          %5 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc70)
          %6 = cir.cast(floating, %5 : !cir.float), !cir.double loc(#loc70)
          %7 = cir.fabs %6 : !cir.double loc(#loc70)
          %8 = cir.const #cir.fp<9.9999999999999995E-7> : !cir.double loc(#loc71)
          %9 = cir.cmp(gt, %7, %8) : !cir.double, !cir.bool loc(#loc210)
          cir.if %9 {
            %10 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc212)
            %11 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc78)
            %12 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc79)
            %13 = cir.cast(floating, %12 : !cir.float), !cir.double loc(#loc79)
            %14 = cir.binop(div, %11, %13) : !cir.double loc(#loc213)
            %15 = cir.cast(float_to_int, %14 : !cir.double), !s32i loc(#loc213)
            cir.store %15, %10 : !s32i, !cir.ptr<!s32i> loc(#loc212)
            %16 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc80)
            cir.call @printIntLine(%16) : (!s32i) -> () loc(#loc81)
          } else {
            %10 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc46)
            %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc46)
            cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc82)
          } loc(#loc211)
        } loc(#loc209)
      } loc(#loc208)
    } loc(#loc206)
    cir.return loc(#loc48)
  } loc(#loc199)
  cir.func no_proto internal private @staticReturnsFalse() -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc84)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc85)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc215)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc215)
    cir.return %2 : !s32i loc(#loc215)
  } loc(#loc214)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc217)
    %1 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc91)
    cir.store %1, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc218)
    cir.scope {
      %2 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<() -> !s32i>> loc(#loc220)
      %3 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc95)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc95)
      cir.if %4 {
        %5 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc98)
        cir.store %5, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc222)
      } loc(#loc221)
    } loc(#loc219)
    cir.scope {
      %2 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<() -> !s32i>> loc(#loc224)
      %3 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc102)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc102)
      cir.if %4 {
        cir.scope {
          %5 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc107)
          %6 = cir.cast(floating, %5 : !cir.float), !cir.double loc(#loc107)
          %7 = cir.fabs %6 : !cir.double loc(#loc107)
          %8 = cir.const #cir.fp<9.9999999999999995E-7> : !cir.double loc(#loc108)
          %9 = cir.cmp(gt, %7, %8) : !cir.double, !cir.bool loc(#loc227)
          cir.if %9 {
            %10 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc229)
            %11 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc115)
            %12 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc116)
            %13 = cir.cast(floating, %12 : !cir.float), !cir.double loc(#loc116)
            %14 = cir.binop(div, %11, %13) : !cir.double loc(#loc230)
            %15 = cir.cast(float_to_int, %14 : !cir.double), !s32i loc(#loc230)
            cir.store %15, %10 : !s32i, !cir.ptr<!s32i> loc(#loc229)
            %16 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc117)
            cir.call @printIntLine(%16) : (!s32i) -> () loc(#loc118)
          } else {
            %10 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc119)
            %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc119)
            cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc120)
          } loc(#loc228)
        } loc(#loc226)
      } loc(#loc225)
    } loc(#loc223)
    cir.return loc(#loc88)
  } loc(#loc216)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc232)
    %1 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc125)
    cir.store %1, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc233)
    cir.scope {
      %2 = cir.get_global @staticReturnsFalse : !cir.ptr<!cir.func<() -> !s32i>> loc(#loc235)
      %3 = cir.call @staticReturnsFalse() : () -> !s32i loc(#loc129)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc129)
      cir.if %4 {
        %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc134)
        %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc134)
        cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc135)
      } else {
        %5 = cir.const #cir.fp<2.000000e+00> : !cir.float loc(#loc136)
        cir.store %5, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc237)
      } loc(#loc236)
    } loc(#loc234)
    cir.scope {
      %2 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<() -> !s32i>> loc(#loc239)
      %3 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc140)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc140)
      cir.if %4 {
        cir.scope {
          %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc242)
          %6 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc147)
          %7 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc148)
          %8 = cir.cast(floating, %7 : !cir.float), !cir.double loc(#loc148)
          %9 = cir.binop(div, %6, %8) : !cir.double loc(#loc243)
          %10 = cir.cast(float_to_int, %9 : !cir.double), !s32i loc(#loc243)
          cir.store %10, %5 : !s32i, !cir.ptr<!s32i> loc(#loc242)
          %11 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc149)
          cir.call @printIntLine(%11) : (!s32i) -> () loc(#loc150)
        } loc(#loc241)
      } loc(#loc240)
    } loc(#loc238)
    cir.return loc(#loc122)
  } loc(#loc231)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc245)
    %1 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc155)
    cir.store %1, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc246)
    cir.scope {
      %2 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<() -> !s32i>> loc(#loc248)
      %3 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc159)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc159)
      cir.if %4 {
        %5 = cir.const #cir.fp<2.000000e+00> : !cir.float loc(#loc162)
        cir.store %5, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc250)
      } loc(#loc249)
    } loc(#loc247)
    cir.scope {
      %2 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<() -> !s32i>> loc(#loc252)
      %3 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc166)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc166)
      cir.if %4 {
        cir.scope {
          %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc255)
          %6 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc173)
          %7 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc174)
          %8 = cir.cast(floating, %7 : !cir.float), !cir.double loc(#loc174)
          %9 = cir.binop(div, %6, %8) : !cir.double loc(#loc256)
          %10 = cir.cast(float_to_int, %9 : !cir.double), !s32i loc(#loc256)
          cir.store %10, %5 : !s32i, !cir.ptr<!s32i> loc(#loc255)
          %11 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc175)
          cir.call @printIntLine(%11) : (!s32i) -> () loc(#loc176)
        } loc(#loc254)
      } loc(#loc253)
    } loc(#loc251)
    cir.return loc(#loc152)
  } loc(#loc244)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__float_zero_08.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("CWE369_Divide_by_Zero__float_zero_08.c":37:1)
#loc4 = loc("CWE369_Divide_by_Zero__float_zero_08.c":55:1)
#loc5 = loc("CWE369_Divide_by_Zero__float_zero_08.c":39:5)
#loc6 = loc("CWE369_Divide_by_Zero__float_zero_08.c":39:11)
#loc7 = loc("CWE369_Divide_by_Zero__float_zero_08.c":41:12)
#loc8 = loc("CWE369_Divide_by_Zero__float_zero_08.c":41:5)
#loc9 = loc("CWE369_Divide_by_Zero__float_zero_08.c":42:5)
#loc10 = loc("CWE369_Divide_by_Zero__float_zero_08.c":46:5)
#loc11 = loc("CWE369_Divide_by_Zero__float_zero_08.c":42:8)
#loc12 = loc("CWE369_Divide_by_Zero__float_zero_08.c":42:26)
#loc13 = loc("CWE369_Divide_by_Zero__float_zero_08.c":43:5)
#loc14 = loc("CWE369_Divide_by_Zero__float_zero_08.c":45:16)
#loc15 = loc("CWE369_Divide_by_Zero__float_zero_08.c":45:9)
#loc16 = loc("CWE369_Divide_by_Zero__float_zero_08.c":47:5)
#loc17 = loc("CWE369_Divide_by_Zero__float_zero_08.c":54:5)
#loc18 = loc("CWE369_Divide_by_Zero__float_zero_08.c":47:8)
#loc19 = loc("CWE369_Divide_by_Zero__float_zero_08.c":47:26)
#loc20 = loc("CWE369_Divide_by_Zero__float_zero_08.c":48:5)
#loc21 = loc("CWE369_Divide_by_Zero__float_zero_08.c":49:9)
#loc22 = loc("CWE369_Divide_by_Zero__float_zero_08.c":53:9)
#loc23 = loc("CWE369_Divide_by_Zero__float_zero_08.c":51:13)
#loc24 = loc("CWE369_Divide_by_Zero__float_zero_08.c":51:44)
#loc25 = loc("CWE369_Divide_by_Zero__float_zero_08.c":51:32)
#loc26 = loc("CWE369_Divide_by_Zero__float_zero_08.c":51:40)
#loc27 = loc("CWE369_Divide_by_Zero__float_zero_08.c":52:26)
#loc28 = loc("CWE369_Divide_by_Zero__float_zero_08.c":52:13)
#loc29 = loc("CWE369_Divide_by_Zero__float_zero_08.c":165:1)
#loc30 = loc("CWE369_Divide_by_Zero__float_zero_08.c":171:1)
#loc31 = loc("CWE369_Divide_by_Zero__float_zero_08.c":167:5)
#loc32 = loc("CWE369_Divide_by_Zero__float_zero_08.c":167:14)
#loc33 = loc("CWE369_Divide_by_Zero__float_zero_08.c":168:5)
#loc34 = loc("CWE369_Divide_by_Zero__float_zero_08.c":168:14)
#loc35 = loc("CWE369_Divide_by_Zero__float_zero_08.c":169:5)
#loc36 = loc("CWE369_Divide_by_Zero__float_zero_08.c":169:14)
#loc37 = loc("CWE369_Divide_by_Zero__float_zero_08.c":170:5)
#loc38 = loc("CWE369_Divide_by_Zero__float_zero_08.c":170:14)
#loc39 = loc("CWE369_Divide_by_Zero__float_zero_08.c":25:1)
#loc40 = loc("CWE369_Divide_by_Zero__float_zero_08.c":28:1)
#loc41 = loc("CWE369_Divide_by_Zero__float_zero_08.c":27:12)
#loc42 = loc("CWE369_Divide_by_Zero__float_zero_08.c":27:5)
#loc43 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc44 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc45 = loc("CWE369_Divide_by_Zero__float_zero_08.c":75:19)
#loc46 = loc("CWE369_Divide_by_Zero__float_zero_08.c":87:23)
#loc47 = loc("CWE369_Divide_by_Zero__float_zero_08.c":62:1)
#loc48 = loc("CWE369_Divide_by_Zero__float_zero_08.c":90:1)
#loc49 = loc("CWE369_Divide_by_Zero__float_zero_08.c":64:5)
#loc50 = loc("CWE369_Divide_by_Zero__float_zero_08.c":64:11)
#loc51 = loc("CWE369_Divide_by_Zero__float_zero_08.c":66:12)
#loc52 = loc("CWE369_Divide_by_Zero__float_zero_08.c":66:5)
#loc53 = loc("CWE369_Divide_by_Zero__float_zero_08.c":67:5)
#loc54 = loc("CWE369_Divide_by_Zero__float_zero_08.c":71:5)
#loc55 = loc("CWE369_Divide_by_Zero__float_zero_08.c":67:8)
#loc56 = loc("CWE369_Divide_by_Zero__float_zero_08.c":67:26)
#loc57 = loc("CWE369_Divide_by_Zero__float_zero_08.c":68:5)
#loc58 = loc("CWE369_Divide_by_Zero__float_zero_08.c":70:16)
#loc59 = loc("CWE369_Divide_by_Zero__float_zero_08.c":70:9)
#loc60 = loc("CWE369_Divide_by_Zero__float_zero_08.c":72:5)
#loc61 = loc("CWE369_Divide_by_Zero__float_zero_08.c":89:5)
#loc62 = loc("CWE369_Divide_by_Zero__float_zero_08.c":72:8)
#loc63 = loc("CWE369_Divide_by_Zero__float_zero_08.c":72:27)
#loc64 = loc("CWE369_Divide_by_Zero__float_zero_08.c":73:5)
#loc65 = loc("CWE369_Divide_by_Zero__float_zero_08.c":76:5)
#loc66 = loc("CWE369_Divide_by_Zero__float_zero_08.c":78:5)
#loc67 = loc("CWE369_Divide_by_Zero__float_zero_08.c":75:9)
#loc68 = loc("CWE369_Divide_by_Zero__float_zero_08.c":80:9)
#loc69 = loc("CWE369_Divide_by_Zero__float_zero_08.c":88:9)
#loc70 = loc("CWE369_Divide_by_Zero__float_zero_08.c":80:17)
#loc71 = loc("CWE369_Divide_by_Zero__float_zero_08.c":80:25)
#loc72 = loc("CWE369_Divide_by_Zero__float_zero_08.c":80:12)
#loc73 = loc("CWE369_Divide_by_Zero__float_zero_08.c":81:9)
#loc74 = loc("CWE369_Divide_by_Zero__float_zero_08.c":84:9)
#loc75 = loc("CWE369_Divide_by_Zero__float_zero_08.c":86:9)
#loc76 = loc("CWE369_Divide_by_Zero__float_zero_08.c":82:13)
#loc77 = loc("CWE369_Divide_by_Zero__float_zero_08.c":82:44)
#loc78 = loc("CWE369_Divide_by_Zero__float_zero_08.c":82:32)
#loc79 = loc("CWE369_Divide_by_Zero__float_zero_08.c":82:40)
#loc80 = loc("CWE369_Divide_by_Zero__float_zero_08.c":83:26)
#loc81 = loc("CWE369_Divide_by_Zero__float_zero_08.c":83:13)
#loc82 = loc("CWE369_Divide_by_Zero__float_zero_08.c":87:13)
#loc83 = loc("CWE369_Divide_by_Zero__float_zero_08.c":30:1)
#loc84 = loc("CWE369_Divide_by_Zero__float_zero_08.c":33:1)
#loc85 = loc("CWE369_Divide_by_Zero__float_zero_08.c":32:12)
#loc86 = loc("CWE369_Divide_by_Zero__float_zero_08.c":32:5)
#loc87 = loc("CWE369_Divide_by_Zero__float_zero_08.c":93:1)
#loc88 = loc("CWE369_Divide_by_Zero__float_zero_08.c":116:1)
#loc89 = loc("CWE369_Divide_by_Zero__float_zero_08.c":95:5)
#loc90 = loc("CWE369_Divide_by_Zero__float_zero_08.c":95:11)
#loc91 = loc("CWE369_Divide_by_Zero__float_zero_08.c":97:12)
#loc92 = loc("CWE369_Divide_by_Zero__float_zero_08.c":97:5)
#loc93 = loc("CWE369_Divide_by_Zero__float_zero_08.c":98:5)
#loc94 = loc("CWE369_Divide_by_Zero__float_zero_08.c":102:5)
#loc95 = loc("CWE369_Divide_by_Zero__float_zero_08.c":98:8)
#loc96 = loc("CWE369_Divide_by_Zero__float_zero_08.c":98:26)
#loc97 = loc("CWE369_Divide_by_Zero__float_zero_08.c":99:5)
#loc98 = loc("CWE369_Divide_by_Zero__float_zero_08.c":101:16)
#loc99 = loc("CWE369_Divide_by_Zero__float_zero_08.c":101:9)
#loc100 = loc("CWE369_Divide_by_Zero__float_zero_08.c":103:5)
#loc101 = loc("CWE369_Divide_by_Zero__float_zero_08.c":115:5)
#loc102 = loc("CWE369_Divide_by_Zero__float_zero_08.c":103:8)
#loc103 = loc("CWE369_Divide_by_Zero__float_zero_08.c":103:26)
#loc104 = loc("CWE369_Divide_by_Zero__float_zero_08.c":104:5)
#loc105 = loc("CWE369_Divide_by_Zero__float_zero_08.c":106:9)
#loc106 = loc("CWE369_Divide_by_Zero__float_zero_08.c":114:9)
#loc107 = loc("CWE369_Divide_by_Zero__float_zero_08.c":106:17)
#loc108 = loc("CWE369_Divide_by_Zero__float_zero_08.c":106:25)
#loc109 = loc("CWE369_Divide_by_Zero__float_zero_08.c":106:12)
#loc110 = loc("CWE369_Divide_by_Zero__float_zero_08.c":107:9)
#loc111 = loc("CWE369_Divide_by_Zero__float_zero_08.c":110:9)
#loc112 = loc("CWE369_Divide_by_Zero__float_zero_08.c":112:9)
#loc113 = loc("CWE369_Divide_by_Zero__float_zero_08.c":108:13)
#loc114 = loc("CWE369_Divide_by_Zero__float_zero_08.c":108:44)
#loc115 = loc("CWE369_Divide_by_Zero__float_zero_08.c":108:32)
#loc116 = loc("CWE369_Divide_by_Zero__float_zero_08.c":108:40)
#loc117 = loc("CWE369_Divide_by_Zero__float_zero_08.c":109:26)
#loc118 = loc("CWE369_Divide_by_Zero__float_zero_08.c":109:13)
#loc119 = loc("CWE369_Divide_by_Zero__float_zero_08.c":113:23)
#loc120 = loc("CWE369_Divide_by_Zero__float_zero_08.c":113:13)
#loc121 = loc("CWE369_Divide_by_Zero__float_zero_08.c":119:1)
#loc122 = loc("CWE369_Divide_by_Zero__float_zero_08.c":142:1)
#loc123 = loc("CWE369_Divide_by_Zero__float_zero_08.c":121:5)
#loc124 = loc("CWE369_Divide_by_Zero__float_zero_08.c":121:11)
#loc125 = loc("CWE369_Divide_by_Zero__float_zero_08.c":123:12)
#loc126 = loc("CWE369_Divide_by_Zero__float_zero_08.c":123:5)
#loc127 = loc("CWE369_Divide_by_Zero__float_zero_08.c":124:5)
#loc128 = loc("CWE369_Divide_by_Zero__float_zero_08.c":133:5)
#loc129 = loc("CWE369_Divide_by_Zero__float_zero_08.c":124:8)
#loc130 = loc("CWE369_Divide_by_Zero__float_zero_08.c":124:27)
#loc131 = loc("CWE369_Divide_by_Zero__float_zero_08.c":125:5)
#loc132 = loc("CWE369_Divide_by_Zero__float_zero_08.c":128:5)
#loc133 = loc("CWE369_Divide_by_Zero__float_zero_08.c":130:5)
#loc134 = loc("CWE369_Divide_by_Zero__float_zero_08.c":127:19)
#loc135 = loc("CWE369_Divide_by_Zero__float_zero_08.c":127:9)
#loc136 = loc("CWE369_Divide_by_Zero__float_zero_08.c":132:16)
#loc137 = loc("CWE369_Divide_by_Zero__float_zero_08.c":132:9)
#loc138 = loc("CWE369_Divide_by_Zero__float_zero_08.c":134:5)
#loc139 = loc("CWE369_Divide_by_Zero__float_zero_08.c":141:5)
#loc140 = loc("CWE369_Divide_by_Zero__float_zero_08.c":134:8)
#loc141 = loc("CWE369_Divide_by_Zero__float_zero_08.c":134:26)
#loc142 = loc("CWE369_Divide_by_Zero__float_zero_08.c":135:5)
#loc143 = loc("CWE369_Divide_by_Zero__float_zero_08.c":136:9)
#loc144 = loc("CWE369_Divide_by_Zero__float_zero_08.c":140:9)
#loc145 = loc("CWE369_Divide_by_Zero__float_zero_08.c":138:13)
#loc146 = loc("CWE369_Divide_by_Zero__float_zero_08.c":138:44)
#loc147 = loc("CWE369_Divide_by_Zero__float_zero_08.c":138:32)
#loc148 = loc("CWE369_Divide_by_Zero__float_zero_08.c":138:40)
#loc149 = loc("CWE369_Divide_by_Zero__float_zero_08.c":139:26)
#loc150 = loc("CWE369_Divide_by_Zero__float_zero_08.c":139:13)
#loc151 = loc("CWE369_Divide_by_Zero__float_zero_08.c":145:1)
#loc152 = loc("CWE369_Divide_by_Zero__float_zero_08.c":163:1)
#loc153 = loc("CWE369_Divide_by_Zero__float_zero_08.c":147:5)
#loc154 = loc("CWE369_Divide_by_Zero__float_zero_08.c":147:11)
#loc155 = loc("CWE369_Divide_by_Zero__float_zero_08.c":149:12)
#loc156 = loc("CWE369_Divide_by_Zero__float_zero_08.c":149:5)
#loc157 = loc("CWE369_Divide_by_Zero__float_zero_08.c":150:5)
#loc158 = loc("CWE369_Divide_by_Zero__float_zero_08.c":154:5)
#loc159 = loc("CWE369_Divide_by_Zero__float_zero_08.c":150:8)
#loc160 = loc("CWE369_Divide_by_Zero__float_zero_08.c":150:26)
#loc161 = loc("CWE369_Divide_by_Zero__float_zero_08.c":151:5)
#loc162 = loc("CWE369_Divide_by_Zero__float_zero_08.c":153:16)
#loc163 = loc("CWE369_Divide_by_Zero__float_zero_08.c":153:9)
#loc164 = loc("CWE369_Divide_by_Zero__float_zero_08.c":155:5)
#loc165 = loc("CWE369_Divide_by_Zero__float_zero_08.c":162:5)
#loc166 = loc("CWE369_Divide_by_Zero__float_zero_08.c":155:8)
#loc167 = loc("CWE369_Divide_by_Zero__float_zero_08.c":155:26)
#loc168 = loc("CWE369_Divide_by_Zero__float_zero_08.c":156:5)
#loc169 = loc("CWE369_Divide_by_Zero__float_zero_08.c":157:9)
#loc170 = loc("CWE369_Divide_by_Zero__float_zero_08.c":161:9)
#loc171 = loc("CWE369_Divide_by_Zero__float_zero_08.c":159:13)
#loc172 = loc("CWE369_Divide_by_Zero__float_zero_08.c":159:44)
#loc173 = loc("CWE369_Divide_by_Zero__float_zero_08.c":159:32)
#loc174 = loc("CWE369_Divide_by_Zero__float_zero_08.c":159:40)
#loc175 = loc("CWE369_Divide_by_Zero__float_zero_08.c":160:26)
#loc176 = loc("CWE369_Divide_by_Zero__float_zero_08.c":160:13)
#loc177 = loc(fused[#loc1, #loc2])
#loc178 = loc(fused[#loc3, #loc4])
#loc179 = loc(fused[#loc5, #loc6])
#loc180 = loc(fused[#loc8, #loc7])
#loc181 = loc(fused[#loc9, #loc10])
#loc182 = loc(fused[#loc11, #loc12])
#loc183 = loc(fused[#loc13, #loc10])
#loc184 = loc(fused[#loc15, #loc14])
#loc185 = loc(fused[#loc16, #loc17])
#loc186 = loc(fused[#loc18, #loc19])
#loc187 = loc(fused[#loc20, #loc17])
#loc188 = loc(fused[#loc21, #loc22])
#loc189 = loc(fused[#loc23, #loc24])
#loc190 = loc(fused[#loc25, #loc26])
#loc191 = loc(fused[#loc29, #loc30])
#loc192 = loc(fused[#loc31, #loc32])
#loc193 = loc(fused[#loc33, #loc34])
#loc194 = loc(fused[#loc35, #loc36])
#loc195 = loc(fused[#loc37, #loc38])
#loc196 = loc(fused[#loc39, #loc40])
#loc197 = loc(fused[#loc42, #loc41])
#loc198 = loc(fused[#loc43, #loc44])
#loc199 = loc(fused[#loc47, #loc48])
#loc200 = loc(fused[#loc49, #loc50])
#loc201 = loc(fused[#loc52, #loc51])
#loc202 = loc(fused[#loc53, #loc54])
#loc203 = loc(fused[#loc55, #loc56])
#loc204 = loc(fused[#loc57, #loc54])
#loc205 = loc(fused[#loc59, #loc58])
#loc206 = loc(fused[#loc60, #loc61])
#loc207 = loc(fused[#loc62, #loc63])
#loc208 = loc(fused[#loc64, #loc65, #loc66, #loc61])
#loc209 = loc(fused[#loc68, #loc69])
#loc210 = loc(fused[#loc72, #loc71])
#loc211 = loc(fused[#loc73, #loc74, #loc75, #loc69])
#loc212 = loc(fused[#loc76, #loc77])
#loc213 = loc(fused[#loc78, #loc79])
#loc214 = loc(fused[#loc83, #loc84])
#loc215 = loc(fused[#loc86, #loc85])
#loc216 = loc(fused[#loc87, #loc88])
#loc217 = loc(fused[#loc89, #loc90])
#loc218 = loc(fused[#loc92, #loc91])
#loc219 = loc(fused[#loc93, #loc94])
#loc220 = loc(fused[#loc95, #loc96])
#loc221 = loc(fused[#loc97, #loc94])
#loc222 = loc(fused[#loc99, #loc98])
#loc223 = loc(fused[#loc100, #loc101])
#loc224 = loc(fused[#loc102, #loc103])
#loc225 = loc(fused[#loc104, #loc101])
#loc226 = loc(fused[#loc105, #loc106])
#loc227 = loc(fused[#loc109, #loc108])
#loc228 = loc(fused[#loc110, #loc111, #loc112, #loc106])
#loc229 = loc(fused[#loc113, #loc114])
#loc230 = loc(fused[#loc115, #loc116])
#loc231 = loc(fused[#loc121, #loc122])
#loc232 = loc(fused[#loc123, #loc124])
#loc233 = loc(fused[#loc126, #loc125])
#loc234 = loc(fused[#loc127, #loc128])
#loc235 = loc(fused[#loc129, #loc130])
#loc236 = loc(fused[#loc131, #loc132, #loc133, #loc128])
#loc237 = loc(fused[#loc137, #loc136])
#loc238 = loc(fused[#loc138, #loc139])
#loc239 = loc(fused[#loc140, #loc141])
#loc240 = loc(fused[#loc142, #loc139])
#loc241 = loc(fused[#loc143, #loc144])
#loc242 = loc(fused[#loc145, #loc146])
#loc243 = loc(fused[#loc147, #loc148])
#loc244 = loc(fused[#loc151, #loc152])
#loc245 = loc(fused[#loc153, #loc154])
#loc246 = loc(fused[#loc156, #loc155])
#loc247 = loc(fused[#loc157, #loc158])
#loc248 = loc(fused[#loc159, #loc160])
#loc249 = loc(fused[#loc161, #loc158])
#loc250 = loc(fused[#loc163, #loc162])
#loc251 = loc(fused[#loc164, #loc165])
#loc252 = loc(fused[#loc166, #loc167])
#loc253 = loc(fused[#loc168, #loc165])
#loc254 = loc(fused[#loc169, #loc170])
#loc255 = loc(fused[#loc171, #loc172])
#loc256 = loc(fused[#loc173, #loc174])
