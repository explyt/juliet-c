!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_31.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i32 = dense<32> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e", "dlti.endianness" = "little">} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc79)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc80)
  cir.func private @printLongLongLine(!s64i) loc(#loc81)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc82)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_31_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["data"] {alignment = 8 : i64} loc(#loc84)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc13)
    cir.store %1, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc85)
    %2 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc15)
    %3 = cir.const #cir.int<8> : !u64i loc(#loc86)
    %4 = cir.call @malloc(%3) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc15)
    %5 = cir.cast(bitcast, %4 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc87)
    cir.store %5, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc88)
    cir.scope {
      %8 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc22)
      %9 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc23)
      %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc23)
      %11 = cir.cmp(eq, %8, %10) : !cir.ptr<!s64i>, !cir.bool loc(#loc90)
      cir.if %11 {
        %12 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc25)
        %13 = cir.const #cir.int<1> : !s32i loc(#loc26)
        %14 = cir.unary(minus, %13) nsw : !s32i, !s32i loc(#loc27)
        cir.call @exit(%14) : (!s32i) -> () extra(#fn_attr) loc(#loc25)
      } loc(#loc91)
    } loc(#loc89)
    %6 = cir.const #cir.int<2147483643> : !s64i loc(#loc28)
    %7 = cir.load deref %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc29)
    cir.store %6, %7 : !s64i, !cir.ptr<!s64i> loc(#loc92)
    cir.scope {
      %8 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["dataCopy", init] {alignment = 8 : i64} loc(#loc94)
      %9 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["data", init] {alignment = 8 : i64} loc(#loc95)
      %10 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc34)
      cir.store %10, %8 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc94)
      %11 = cir.load %8 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc36)
      cir.store %11, %9 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc95)
      %12 = cir.load deref %9 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc37)
      %13 = cir.load %12 : !cir.ptr<!s64i>, !s64i loc(#loc38)
      cir.call @printLongLongLine(%13) : (!s64i) -> () loc(#loc39)
      %14 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc40)
      %15 = cir.load %9 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc41)
      %16 = cir.cast(bitcast, %15 : !cir.ptr<!s64i>), !cir.ptr<!void> loc(#loc41)
      cir.call @free(%16) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc40)
    } loc(#loc93)
    cir.return loc(#loc10)
  } loc(#loc83)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_31_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc97)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc44)
    cir.return loc(#loc43)
  } loc(#loc96)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["data"] {alignment = 8 : i64} loc(#loc99)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc50)
    cir.store %1, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc100)
    %2 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc52)
    %3 = cir.const #cir.int<8> : !u64i loc(#loc101)
    %4 = cir.call @malloc(%3) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc52)
    %5 = cir.cast(bitcast, %4 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc102)
    cir.store %5, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc103)
    cir.scope {
      %8 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc59)
      %9 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc60)
      %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc60)
      %11 = cir.cmp(eq, %8, %10) : !cir.ptr<!s64i>, !cir.bool loc(#loc105)
      cir.if %11 {
        %12 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc62)
        %13 = cir.const #cir.int<1> : !s32i loc(#loc63)
        %14 = cir.unary(minus, %13) nsw : !s32i, !s32i loc(#loc64)
        cir.call @exit(%14) : (!s32i) -> () extra(#fn_attr) loc(#loc62)
      } loc(#loc106)
    } loc(#loc104)
    %6 = cir.const #cir.int<2147483643> : !s64i loc(#loc65)
    %7 = cir.load deref %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc66)
    cir.store %6, %7 : !s64i, !cir.ptr<!s64i> loc(#loc107)
    cir.scope {
      %8 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["dataCopy", init] {alignment = 8 : i64} loc(#loc109)
      %9 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["data", init] {alignment = 8 : i64} loc(#loc110)
      %10 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc71)
      cir.store %10, %8 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc109)
      %11 = cir.load %8 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc73)
      cir.store %11, %9 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc110)
      %12 = cir.load deref %9 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc74)
      %13 = cir.load %12 : !cir.ptr<!s64i>, !s64i loc(#loc75)
      cir.call @printLongLongLine(%13) : (!s64i) -> () loc(#loc76)
      %14 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc77)
      %15 = cir.load %9 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc78)
      %16 = cir.cast(bitcast, %15 : !cir.ptr<!s64i>), !cir.ptr<!void> loc(#loc78)
      cir.call @free(%16) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc77)
    } loc(#loc108)
    cir.return loc(#loc47)
  } loc(#loc98)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_31.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":26:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":26:49)
#loc7 = loc("/usr/include/stdlib.h":687:1)
#loc8 = loc("/usr/include/stdlib.h":687:32)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_31.c":21:1)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_31.c":38:1)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_31.c":23:5)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_31.c":23:15)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_31.c":25:12)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_31.c":25:5)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_31.c":28:23)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_31.c":28:30)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_31.c":28:41)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_31.c":28:42)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_31.c":28:5)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_31.c":29:5)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_31.c":29:33)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_31.c":29:9)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_31.c":29:17)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_31.c":29:23)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_31.c":29:24)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_31.c":29:30)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_31.c":29:29)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_31.c":30:13)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_31.c":30:6)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_31.c":30:5)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_31.c":31:5)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_31.c":37:5)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_31.c":32:9)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_31.c":32:30)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_31.c":33:9)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_31.c":33:26)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_31.c":35:28)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_31.c":35:27)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_31.c":35:9)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_31.c":36:9)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_31.c":36:14)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_31.c":63:1)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_31.c":66:1)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_31.c":65:5)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_31.c":65:13)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_31.c":45:1)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_31.c":61:1)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_31.c":47:5)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_31.c":47:15)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_31.c":49:12)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_31.c":49:5)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_31.c":51:23)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_31.c":51:30)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_31.c":51:42)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_31.c":51:43)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_31.c":51:5)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_31.c":52:5)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_31.c":52:33)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_31.c":52:9)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_31.c":52:17)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_31.c":52:23)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_31.c":52:24)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_31.c":52:30)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_31.c":52:29)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_31.c":53:13)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_31.c":53:6)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_31.c":53:5)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_31.c":54:5)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_31.c":60:5)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_31.c":55:9)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_31.c":55:30)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_31.c":56:9)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_31.c":56:26)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_31.c":58:28)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_31.c":58:27)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_31.c":58:9)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_31.c":59:9)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_31.c":59:14)
#loc79 = loc(fused[#loc1, #loc2])
#loc80 = loc(fused[#loc3, #loc4])
#loc81 = loc(fused[#loc5, #loc6])
#loc82 = loc(fused[#loc7, #loc8])
#loc83 = loc(fused[#loc9, #loc10])
#loc84 = loc(fused[#loc11, #loc12])
#loc85 = loc(fused[#loc14, #loc13])
#loc86 = loc(fused[#loc16, #loc17])
#loc87 = loc(fused[#loc15, #loc18])
#loc88 = loc(fused[#loc19, #loc18])
#loc89 = loc(fused[#loc20, #loc21])
#loc90 = loc(fused[#loc22, #loc23])
#loc91 = loc(fused[#loc24, #loc21])
#loc92 = loc(fused[#loc30, #loc28])
#loc93 = loc(fused[#loc31, #loc32])
#loc94 = loc(fused[#loc33, #loc34])
#loc95 = loc(fused[#loc35, #loc36])
#loc96 = loc(fused[#loc42, #loc43])
#loc97 = loc(fused[#loc44, #loc45])
#loc98 = loc(fused[#loc46, #loc47])
#loc99 = loc(fused[#loc48, #loc49])
#loc100 = loc(fused[#loc51, #loc50])
#loc101 = loc(fused[#loc53, #loc54])
#loc102 = loc(fused[#loc52, #loc55])
#loc103 = loc(fused[#loc56, #loc55])
#loc104 = loc(fused[#loc57, #loc58])
#loc105 = loc(fused[#loc59, #loc60])
#loc106 = loc(fused[#loc61, #loc58])
#loc107 = loc(fused[#loc67, #loc65])
#loc108 = loc(fused[#loc68, #loc69])
#loc109 = loc(fused[#loc70, #loc71])
#loc110 = loc(fused[#loc72, #loc73])
