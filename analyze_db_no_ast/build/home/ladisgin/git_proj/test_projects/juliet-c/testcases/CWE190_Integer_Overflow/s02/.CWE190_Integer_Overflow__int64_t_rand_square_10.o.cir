!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int64_t_rand_square_10.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.global "private"  external @globalTrue : !s32i {alignment = 4 : i64} loc(#loc169)
  cir.func private  @rand() -> !s32i extra(#fn_attr) loc(#loc170)
  cir.func private  @printLongLongLine(!s64i) loc(#loc171)
  cir.func no_proto  @CWE190_Integer_Overflow__int64_t_rand_square_10_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc173)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc11)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc174)
    cir.scope {
      %2 = cir.get_global @globalTrue : !cir.ptr<!s32i> loc(#loc169)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc15)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc15)
      cir.if %4 {
        %5 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
        %6 = cir.const #cir.int<1> : !s32i loc(#loc17)
        %7 = cir.binop(and, %5, %6) : !s32i loc(#loc17)
        %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc17)
        %9 = cir.ternary(%8, true {
          %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
          %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc17)
          %13 = cir.const #cir.int<60> : !s32i loc(#loc17)
          %14 = cir.shift(left, %12 : !u64i, %13 : !s32i) -> !u64i loc(#loc17)
          %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
          %16 = cir.cast(integral, %15 : !s32i), !u64i loc(#loc17)
          %17 = cir.const #cir.int<45> : !s32i loc(#loc17)
          %18 = cir.shift(left, %16 : !u64i, %17 : !s32i) -> !u64i loc(#loc17)
          %19 = cir.binop(xor, %14, %18) : !u64i loc(#loc17)
          %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
          %21 = cir.cast(integral, %20 : !s32i), !u64i loc(#loc17)
          %22 = cir.const #cir.int<30> : !s32i loc(#loc17)
          %23 = cir.shift(left, %21 : !u64i, %22 : !s32i) -> !u64i loc(#loc17)
          %24 = cir.binop(xor, %19, %23) : !u64i loc(#loc17)
          %25 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
          %26 = cir.cast(integral, %25 : !s32i), !u64i loc(#loc17)
          %27 = cir.const #cir.int<15> : !s32i loc(#loc17)
          %28 = cir.shift(left, %26 : !u64i, %27 : !s32i) -> !u64i loc(#loc17)
          %29 = cir.binop(xor, %24, %28) : !u64i loc(#loc17)
          %30 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
          %31 = cir.cast(integral, %30 : !s32i), !u64i loc(#loc17)
          %32 = cir.binop(xor, %29, %31) : !u64i loc(#loc17)
          cir.yield %32 : !u64i loc(#loc17)
        }, false {
          %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
          %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc17)
          %13 = cir.const #cir.int<60> : !s32i loc(#loc17)
          %14 = cir.shift(left, %12 : !u64i, %13 : !s32i) -> !u64i loc(#loc17)
          %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
          %16 = cir.cast(integral, %15 : !s32i), !u64i loc(#loc17)
          %17 = cir.const #cir.int<45> : !s32i loc(#loc17)
          %18 = cir.shift(left, %16 : !u64i, %17 : !s32i) -> !u64i loc(#loc17)
          %19 = cir.binop(xor, %14, %18) : !u64i loc(#loc17)
          %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
          %21 = cir.cast(integral, %20 : !s32i), !u64i loc(#loc17)
          %22 = cir.const #cir.int<30> : !s32i loc(#loc17)
          %23 = cir.shift(left, %21 : !u64i, %22 : !s32i) -> !u64i loc(#loc17)
          %24 = cir.binop(xor, %19, %23) : !u64i loc(#loc17)
          %25 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
          %26 = cir.cast(integral, %25 : !s32i), !u64i loc(#loc17)
          %27 = cir.const #cir.int<15> : !s32i loc(#loc17)
          %28 = cir.shift(left, %26 : !u64i, %27 : !s32i) -> !u64i loc(#loc17)
          %29 = cir.binop(xor, %24, %28) : !u64i loc(#loc17)
          %30 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
          %31 = cir.cast(integral, %30 : !s32i), !u64i loc(#loc17)
          %32 = cir.binop(xor, %29, %31) : !u64i loc(#loc17)
          %33 = cir.unary(minus, %32) : !u64i, !u64i loc(#loc17)
          %34 = cir.const #cir.int<1> : !s32i loc(#loc17)
          %35 = cir.cast(integral, %34 : !s32i), !u64i loc(#loc17)
          %36 = cir.binop(sub, %33, %35) : !u64i loc(#loc17)
          cir.yield %36 : !u64i loc(#loc17)
        }) : (!cir.bool) -> !u64i loc(#loc17)
        %10 = cir.cast(integral, %9 : !u64i), !s64i loc(#loc17)
        cir.store %10, %0 : !s64i, !cir.ptr<!s64i> loc(#loc177)
      } loc(#loc176)
    } loc(#loc175)
    cir.scope {
      %2 = cir.get_global @globalTrue : !cir.ptr<!s32i> loc(#loc169)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc21)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc21)
      cir.if %4 {
        cir.scope {
          %5 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc181)
          %6 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc27)
          %7 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc26)
          %8 = cir.binop(mul, %6, %7) nsw : !s64i loc(#loc27)
          cir.store %8, %5 : !s64i, !cir.ptr<!s64i> loc(#loc181)
          %9 = cir.load %5 : !cir.ptr<!s64i>, !s64i loc(#loc28)
          cir.call @printLongLongLine(%9) : (!s64i) -> () loc(#loc29)
        } loc(#loc180)
      } loc(#loc179)
    } loc(#loc178)
    cir.return loc(#loc8)
  } loc(#loc172)
  cir.func no_proto  @CWE190_Integer_Overflow__int64_t_rand_square_10_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc183)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc32)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc184)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc34)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc185)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc36)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc186)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc38)
    cir.return loc(#loc31)
  } loc(#loc182)
  cir.global "private"  external @globalFalse : !s32i {alignment = 4 : i64} loc(#loc187)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc188)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc44)
  cir.func private  @imaxabs(!s64i) -> !s64i extra(#fn_attr) loc(#loc189)
  cir.func private  @sqrtl(!cir.long_double<!cir.f80>) -> !cir.long_double<!cir.f80> extra(#fn_attr) loc(#loc47)
  cir.global "private"  constant internal dsolocal @".str1" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc48)
  cir.func no_proto internal private  @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc191)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc53)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc192)
    cir.scope {
      %2 = cir.get_global @globalTrue : !cir.ptr<!s32i> loc(#loc169)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc57)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc57)
      cir.if %4 {
        %5 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc59)
        %6 = cir.const #cir.int<1> : !s32i loc(#loc59)
        %7 = cir.binop(and, %5, %6) : !s32i loc(#loc59)
        %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc59)
        %9 = cir.ternary(%8, true {
          %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc59)
          %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc59)
          %13 = cir.const #cir.int<60> : !s32i loc(#loc59)
          %14 = cir.shift(left, %12 : !u64i, %13 : !s32i) -> !u64i loc(#loc59)
          %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc59)
          %16 = cir.cast(integral, %15 : !s32i), !u64i loc(#loc59)
          %17 = cir.const #cir.int<45> : !s32i loc(#loc59)
          %18 = cir.shift(left, %16 : !u64i, %17 : !s32i) -> !u64i loc(#loc59)
          %19 = cir.binop(xor, %14, %18) : !u64i loc(#loc59)
          %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc59)
          %21 = cir.cast(integral, %20 : !s32i), !u64i loc(#loc59)
          %22 = cir.const #cir.int<30> : !s32i loc(#loc59)
          %23 = cir.shift(left, %21 : !u64i, %22 : !s32i) -> !u64i loc(#loc59)
          %24 = cir.binop(xor, %19, %23) : !u64i loc(#loc59)
          %25 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc59)
          %26 = cir.cast(integral, %25 : !s32i), !u64i loc(#loc59)
          %27 = cir.const #cir.int<15> : !s32i loc(#loc59)
          %28 = cir.shift(left, %26 : !u64i, %27 : !s32i) -> !u64i loc(#loc59)
          %29 = cir.binop(xor, %24, %28) : !u64i loc(#loc59)
          %30 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc59)
          %31 = cir.cast(integral, %30 : !s32i), !u64i loc(#loc59)
          %32 = cir.binop(xor, %29, %31) : !u64i loc(#loc59)
          cir.yield %32 : !u64i loc(#loc59)
        }, false {
          %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc59)
          %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc59)
          %13 = cir.const #cir.int<60> : !s32i loc(#loc59)
          %14 = cir.shift(left, %12 : !u64i, %13 : !s32i) -> !u64i loc(#loc59)
          %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc59)
          %16 = cir.cast(integral, %15 : !s32i), !u64i loc(#loc59)
          %17 = cir.const #cir.int<45> : !s32i loc(#loc59)
          %18 = cir.shift(left, %16 : !u64i, %17 : !s32i) -> !u64i loc(#loc59)
          %19 = cir.binop(xor, %14, %18) : !u64i loc(#loc59)
          %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc59)
          %21 = cir.cast(integral, %20 : !s32i), !u64i loc(#loc59)
          %22 = cir.const #cir.int<30> : !s32i loc(#loc59)
          %23 = cir.shift(left, %21 : !u64i, %22 : !s32i) -> !u64i loc(#loc59)
          %24 = cir.binop(xor, %19, %23) : !u64i loc(#loc59)
          %25 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc59)
          %26 = cir.cast(integral, %25 : !s32i), !u64i loc(#loc59)
          %27 = cir.const #cir.int<15> : !s32i loc(#loc59)
          %28 = cir.shift(left, %26 : !u64i, %27 : !s32i) -> !u64i loc(#loc59)
          %29 = cir.binop(xor, %24, %28) : !u64i loc(#loc59)
          %30 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc59)
          %31 = cir.cast(integral, %30 : !s32i), !u64i loc(#loc59)
          %32 = cir.binop(xor, %29, %31) : !u64i loc(#loc59)
          %33 = cir.unary(minus, %32) : !u64i, !u64i loc(#loc59)
          %34 = cir.const #cir.int<1> : !s32i loc(#loc59)
          %35 = cir.cast(integral, %34 : !s32i), !u64i loc(#loc59)
          %36 = cir.binop(sub, %33, %35) : !u64i loc(#loc59)
          cir.yield %36 : !u64i loc(#loc59)
        }) : (!cir.bool) -> !u64i loc(#loc59)
        %10 = cir.cast(integral, %9 : !u64i), !s64i loc(#loc59)
        cir.store %10, %0 : !s64i, !cir.ptr<!s64i> loc(#loc195)
      } loc(#loc194)
    } loc(#loc193)
    cir.scope {
      %2 = cir.get_global @globalFalse : !cir.ptr<!s32i> loc(#loc187)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc63)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc63)
      cir.if %4 {
        %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc44)
        %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc44)
        cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc67)
      } else {
        cir.scope {
          %5 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc70)
          %6 = cir.call @imaxabs(%5) : (!s64i) -> !s64i extra(#fn_attr) loc(#loc71)
          %7 = cir.cast(int_to_float, %6 : !s64i), !cir.long_double<!cir.f80> loc(#loc71)
          %8 = cir.get_global @sqrtl : !cir.ptr<!cir.func<!cir.long_double<!cir.f80> (!cir.long_double<!cir.f80>)>> loc(#loc72)
          %9 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc73)
          %10 = cir.cast(int_to_float, %9 : !s64i), !cir.long_double<!cir.f80> loc(#loc73)
          %11 = cir.call @sqrtl(%10) : (!cir.long_double<!cir.f80>) -> !cir.long_double<!cir.f80> extra(#fn_attr) loc(#loc72)
          %12 = cir.cmp(le, %7, %11) : !cir.long_double<!cir.f80>, !s32i loc(#loc199)
          %13 = cir.cast(int_to_bool, %12 : !s32i), !cir.bool loc(#loc75)
          cir.if %13 {
            %14 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc201)
            %15 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc81)
            %16 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc80)
            %17 = cir.binop(mul, %15, %16) nsw : !s64i loc(#loc81)
            cir.store %17, %14 : !s64i, !cir.ptr<!s64i> loc(#loc201)
            %18 = cir.load %14 : !cir.ptr<!s64i>, !s64i loc(#loc82)
            cir.call @printLongLongLine(%18) : (!s64i) -> () loc(#loc83)
          } else {
            %14 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc48)
            %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc48)
            cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc84)
          } loc(#loc200)
        } loc(#loc198)
      } loc(#loc197)
    } loc(#loc196)
    cir.return loc(#loc50)
  } loc(#loc190)
  cir.func no_proto internal private  @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc203)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc89)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc204)
    cir.scope {
      %2 = cir.get_global @globalTrue : !cir.ptr<!s32i> loc(#loc169)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc93)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc93)
      cir.if %4 {
        %5 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc95)
        %6 = cir.const #cir.int<1> : !s32i loc(#loc95)
        %7 = cir.binop(and, %5, %6) : !s32i loc(#loc95)
        %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc95)
        %9 = cir.ternary(%8, true {
          %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc95)
          %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc95)
          %13 = cir.const #cir.int<60> : !s32i loc(#loc95)
          %14 = cir.shift(left, %12 : !u64i, %13 : !s32i) -> !u64i loc(#loc95)
          %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc95)
          %16 = cir.cast(integral, %15 : !s32i), !u64i loc(#loc95)
          %17 = cir.const #cir.int<45> : !s32i loc(#loc95)
          %18 = cir.shift(left, %16 : !u64i, %17 : !s32i) -> !u64i loc(#loc95)
          %19 = cir.binop(xor, %14, %18) : !u64i loc(#loc95)
          %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc95)
          %21 = cir.cast(integral, %20 : !s32i), !u64i loc(#loc95)
          %22 = cir.const #cir.int<30> : !s32i loc(#loc95)
          %23 = cir.shift(left, %21 : !u64i, %22 : !s32i) -> !u64i loc(#loc95)
          %24 = cir.binop(xor, %19, %23) : !u64i loc(#loc95)
          %25 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc95)
          %26 = cir.cast(integral, %25 : !s32i), !u64i loc(#loc95)
          %27 = cir.const #cir.int<15> : !s32i loc(#loc95)
          %28 = cir.shift(left, %26 : !u64i, %27 : !s32i) -> !u64i loc(#loc95)
          %29 = cir.binop(xor, %24, %28) : !u64i loc(#loc95)
          %30 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc95)
          %31 = cir.cast(integral, %30 : !s32i), !u64i loc(#loc95)
          %32 = cir.binop(xor, %29, %31) : !u64i loc(#loc95)
          cir.yield %32 : !u64i loc(#loc95)
        }, false {
          %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc95)
          %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc95)
          %13 = cir.const #cir.int<60> : !s32i loc(#loc95)
          %14 = cir.shift(left, %12 : !u64i, %13 : !s32i) -> !u64i loc(#loc95)
          %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc95)
          %16 = cir.cast(integral, %15 : !s32i), !u64i loc(#loc95)
          %17 = cir.const #cir.int<45> : !s32i loc(#loc95)
          %18 = cir.shift(left, %16 : !u64i, %17 : !s32i) -> !u64i loc(#loc95)
          %19 = cir.binop(xor, %14, %18) : !u64i loc(#loc95)
          %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc95)
          %21 = cir.cast(integral, %20 : !s32i), !u64i loc(#loc95)
          %22 = cir.const #cir.int<30> : !s32i loc(#loc95)
          %23 = cir.shift(left, %21 : !u64i, %22 : !s32i) -> !u64i loc(#loc95)
          %24 = cir.binop(xor, %19, %23) : !u64i loc(#loc95)
          %25 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc95)
          %26 = cir.cast(integral, %25 : !s32i), !u64i loc(#loc95)
          %27 = cir.const #cir.int<15> : !s32i loc(#loc95)
          %28 = cir.shift(left, %26 : !u64i, %27 : !s32i) -> !u64i loc(#loc95)
          %29 = cir.binop(xor, %24, %28) : !u64i loc(#loc95)
          %30 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc95)
          %31 = cir.cast(integral, %30 : !s32i), !u64i loc(#loc95)
          %32 = cir.binop(xor, %29, %31) : !u64i loc(#loc95)
          %33 = cir.unary(minus, %32) : !u64i, !u64i loc(#loc95)
          %34 = cir.const #cir.int<1> : !s32i loc(#loc95)
          %35 = cir.cast(integral, %34 : !s32i), !u64i loc(#loc95)
          %36 = cir.binop(sub, %33, %35) : !u64i loc(#loc95)
          cir.yield %36 : !u64i loc(#loc95)
        }) : (!cir.bool) -> !u64i loc(#loc95)
        %10 = cir.cast(integral, %9 : !u64i), !s64i loc(#loc95)
        cir.store %10, %0 : !s64i, !cir.ptr<!s64i> loc(#loc207)
      } loc(#loc206)
    } loc(#loc205)
    cir.scope {
      %2 = cir.get_global @globalTrue : !cir.ptr<!s32i> loc(#loc169)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc99)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc99)
      cir.if %4 {
        cir.scope {
          %5 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc103)
          %6 = cir.call @imaxabs(%5) : (!s64i) -> !s64i extra(#fn_attr) loc(#loc104)
          %7 = cir.cast(int_to_float, %6 : !s64i), !cir.long_double<!cir.f80> loc(#loc104)
          %8 = cir.get_global @sqrtl : !cir.ptr<!cir.func<!cir.long_double<!cir.f80> (!cir.long_double<!cir.f80>)>> loc(#loc105)
          %9 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc106)
          %10 = cir.cast(int_to_float, %9 : !s64i), !cir.long_double<!cir.f80> loc(#loc106)
          %11 = cir.call @sqrtl(%10) : (!cir.long_double<!cir.f80>) -> !cir.long_double<!cir.f80> extra(#fn_attr) loc(#loc105)
          %12 = cir.cmp(le, %7, %11) : !cir.long_double<!cir.f80>, !s32i loc(#loc211)
          %13 = cir.cast(int_to_bool, %12 : !s32i), !cir.bool loc(#loc108)
          cir.if %13 {
            %14 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc213)
            %15 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc114)
            %16 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc113)
            %17 = cir.binop(mul, %15, %16) nsw : !s64i loc(#loc114)
            cir.store %17, %14 : !s64i, !cir.ptr<!s64i> loc(#loc213)
            %18 = cir.load %14 : !cir.ptr<!s64i>, !s64i loc(#loc115)
            cir.call @printLongLongLine(%18) : (!s64i) -> () loc(#loc116)
          } else {
            %14 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc117)
            %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc117)
            cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc118)
          } loc(#loc212)
        } loc(#loc210)
      } loc(#loc209)
    } loc(#loc208)
    cir.return loc(#loc86)
  } loc(#loc202)
  cir.func no_proto internal private  @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc215)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc123)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc216)
    cir.scope {
      %2 = cir.get_global @globalFalse : !cir.ptr<!s32i> loc(#loc187)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc127)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc127)
      cir.if %4 {
        %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc131)
        %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc131)
        cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc132)
      } else {
        %5 = cir.const #cir.int<2> : !s32i loc(#loc133)
        %6 = cir.cast(integral, %5 : !s32i), !s64i loc(#loc133)
        cir.store %6, %0 : !s64i, !cir.ptr<!s64i> loc(#loc219)
      } loc(#loc218)
    } loc(#loc217)
    cir.scope {
      %2 = cir.get_global @globalTrue : !cir.ptr<!s32i> loc(#loc169)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc137)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc137)
      cir.if %4 {
        cir.scope {
          %5 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc223)
          %6 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc143)
          %7 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc142)
          %8 = cir.binop(mul, %6, %7) nsw : !s64i loc(#loc143)
          cir.store %8, %5 : !s64i, !cir.ptr<!s64i> loc(#loc223)
          %9 = cir.load %5 : !cir.ptr<!s64i>, !s64i loc(#loc144)
          cir.call @printLongLongLine(%9) : (!s64i) -> () loc(#loc145)
        } loc(#loc222)
      } loc(#loc221)
    } loc(#loc220)
    cir.return loc(#loc120)
  } loc(#loc214)
  cir.func no_proto internal private  @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc225)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc150)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc226)
    cir.scope {
      %2 = cir.get_global @globalTrue : !cir.ptr<!s32i> loc(#loc169)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc154)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc154)
      cir.if %4 {
        %5 = cir.const #cir.int<2> : !s32i loc(#loc156)
        %6 = cir.cast(integral, %5 : !s32i), !s64i loc(#loc156)
        cir.store %6, %0 : !s64i, !cir.ptr<!s64i> loc(#loc229)
      } loc(#loc228)
    } loc(#loc227)
    cir.scope {
      %2 = cir.get_global @globalTrue : !cir.ptr<!s32i> loc(#loc169)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc160)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc160)
      cir.if %4 {
        cir.scope {
          %5 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc233)
          %6 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc166)
          %7 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc165)
          %8 = cir.binop(mul, %6, %7) nsw : !s64i loc(#loc166)
          cir.store %8, %5 : !s64i, !cir.ptr<!s64i> loc(#loc233)
          %9 = cir.load %5 : !cir.ptr<!s64i>, !s64i loc(#loc167)
          cir.call @printLongLongLine(%9) : (!s64i) -> () loc(#loc168)
        } loc(#loc232)
      } loc(#loc231)
    } loc(#loc230)
    cir.return loc(#loc147)
  } loc(#loc224)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int64_t_rand_square_10.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase.h":116:1)
#loc2 = loc("../../../testcasesupport/std_testcase.h":116:12)
#loc3 = loc("/usr/include/stdlib.h":573:1)
#loc4 = loc("/usr/include/stdlib.h":573:24)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":26:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":26:49)
#loc7 = loc("CWE190_Integer_Overflow__int64_t_rand_square_10.c":25:1)
#loc8 = loc("CWE190_Integer_Overflow__int64_t_rand_square_10.c":42:1)
#loc9 = loc("CWE190_Integer_Overflow__int64_t_rand_square_10.c":27:5)
#loc10 = loc("CWE190_Integer_Overflow__int64_t_rand_square_10.c":27:13)
#loc11 = loc("CWE190_Integer_Overflow__int64_t_rand_square_10.c":28:12)
#loc12 = loc("CWE190_Integer_Overflow__int64_t_rand_square_10.c":28:5)
#loc13 = loc("CWE190_Integer_Overflow__int64_t_rand_square_10.c":29:5)
#loc14 = loc("CWE190_Integer_Overflow__int64_t_rand_square_10.c":33:5)
#loc15 = loc("CWE190_Integer_Overflow__int64_t_rand_square_10.c":29:8)
#loc16 = loc("CWE190_Integer_Overflow__int64_t_rand_square_10.c":30:5)
#loc17 = loc("CWE190_Integer_Overflow__int64_t_rand_square_10.c":32:25)
#loc18 = loc("CWE190_Integer_Overflow__int64_t_rand_square_10.c":32:9)
#loc19 = loc("CWE190_Integer_Overflow__int64_t_rand_square_10.c":34:5)
#loc20 = loc("CWE190_Integer_Overflow__int64_t_rand_square_10.c":41:5)
#loc21 = loc("CWE190_Integer_Overflow__int64_t_rand_square_10.c":34:8)
#loc22 = loc("CWE190_Integer_Overflow__int64_t_rand_square_10.c":35:5)
#loc23 = loc("CWE190_Integer_Overflow__int64_t_rand_square_10.c":36:9)
#loc24 = loc("CWE190_Integer_Overflow__int64_t_rand_square_10.c":40:9)
#loc25 = loc("CWE190_Integer_Overflow__int64_t_rand_square_10.c":38:13)
#loc26 = loc("CWE190_Integer_Overflow__int64_t_rand_square_10.c":38:37)
#loc27 = loc("CWE190_Integer_Overflow__int64_t_rand_square_10.c":38:30)
#loc28 = loc("CWE190_Integer_Overflow__int64_t_rand_square_10.c":39:31)
#loc29 = loc("CWE190_Integer_Overflow__int64_t_rand_square_10.c":39:13)
#loc30 = loc("CWE190_Integer_Overflow__int64_t_rand_square_10.c":148:1)
#loc31 = loc("CWE190_Integer_Overflow__int64_t_rand_square_10.c":154:1)
#loc32 = loc("CWE190_Integer_Overflow__int64_t_rand_square_10.c":150:5)
#loc33 = loc("CWE190_Integer_Overflow__int64_t_rand_square_10.c":150:14)
#loc34 = loc("CWE190_Integer_Overflow__int64_t_rand_square_10.c":151:5)
#loc35 = loc("CWE190_Integer_Overflow__int64_t_rand_square_10.c":151:14)
#loc36 = loc("CWE190_Integer_Overflow__int64_t_rand_square_10.c":152:5)
#loc37 = loc("CWE190_Integer_Overflow__int64_t_rand_square_10.c":152:14)
#loc38 = loc("CWE190_Integer_Overflow__int64_t_rand_square_10.c":153:5)
#loc39 = loc("CWE190_Integer_Overflow__int64_t_rand_square_10.c":153:14)
#loc40 = loc("../../../testcasesupport/std_testcase.h":117:1)
#loc41 = loc("../../../testcasesupport/std_testcase.h":117:12)
#loc42 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc43 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc44 = loc("CWE190_Integer_Overflow__int64_t_rand_square_10.c":61:19)
#loc45 = loc("/usr/include/inttypes.h":351:1)
#loc46 = loc("/usr/include/inttypes.h":351:74)
#loc47 = loc("/usr/include/bits/mathcalls.h":143:1)
#loc48 = loc("CWE190_Integer_Overflow__int64_t_rand_square_10.c":73:23)
#loc49 = loc("CWE190_Integer_Overflow__int64_t_rand_square_10.c":49:1)
#loc50 = loc("CWE190_Integer_Overflow__int64_t_rand_square_10.c":76:1)
#loc51 = loc("CWE190_Integer_Overflow__int64_t_rand_square_10.c":51:5)
#loc52 = loc("CWE190_Integer_Overflow__int64_t_rand_square_10.c":51:13)
#loc53 = loc("CWE190_Integer_Overflow__int64_t_rand_square_10.c":52:12)
#loc54 = loc("CWE190_Integer_Overflow__int64_t_rand_square_10.c":52:5)
#loc55 = loc("CWE190_Integer_Overflow__int64_t_rand_square_10.c":53:5)
#loc56 = loc("CWE190_Integer_Overflow__int64_t_rand_square_10.c":57:5)
#loc57 = loc("CWE190_Integer_Overflow__int64_t_rand_square_10.c":53:8)
#loc58 = loc("CWE190_Integer_Overflow__int64_t_rand_square_10.c":54:5)
#loc59 = loc("CWE190_Integer_Overflow__int64_t_rand_square_10.c":56:25)
#loc60 = loc("CWE190_Integer_Overflow__int64_t_rand_square_10.c":56:9)
#loc61 = loc("CWE190_Integer_Overflow__int64_t_rand_square_10.c":58:5)
#loc62 = loc("CWE190_Integer_Overflow__int64_t_rand_square_10.c":75:5)
#loc63 = loc("CWE190_Integer_Overflow__int64_t_rand_square_10.c":58:8)
#loc64 = loc("CWE190_Integer_Overflow__int64_t_rand_square_10.c":59:5)
#loc65 = loc("CWE190_Integer_Overflow__int64_t_rand_square_10.c":62:5)
#loc66 = loc("CWE190_Integer_Overflow__int64_t_rand_square_10.c":64:5)
#loc67 = loc("CWE190_Integer_Overflow__int64_t_rand_square_10.c":61:9)
#loc68 = loc("CWE190_Integer_Overflow__int64_t_rand_square_10.c":66:9)
#loc69 = loc("CWE190_Integer_Overflow__int64_t_rand_square_10.c":74:9)
#loc70 = loc("CWE190_Integer_Overflow__int64_t_rand_square_10.c":66:31)
#loc71 = loc("CWE190_Integer_Overflow__int64_t_rand_square_10.c":66:13)
#loc72 = loc("CWE190_Integer_Overflow__int64_t_rand_square_10.c":66:40)
#loc73 = loc("CWE190_Integer_Overflow__int64_t_rand_square_10.c":66:46)
#loc74 = loc("CWE190_Integer_Overflow__int64_t_rand_square_10.c":66:55)
#loc75 = loc("CWE190_Integer_Overflow__int64_t_rand_square_10.c":66:37)
#loc76 = loc("CWE190_Integer_Overflow__int64_t_rand_square_10.c":67:9)
#loc77 = loc("CWE190_Integer_Overflow__int64_t_rand_square_10.c":70:9)
#loc78 = loc("CWE190_Integer_Overflow__int64_t_rand_square_10.c":72:9)
#loc79 = loc("CWE190_Integer_Overflow__int64_t_rand_square_10.c":68:13)
#loc80 = loc("CWE190_Integer_Overflow__int64_t_rand_square_10.c":68:37)
#loc81 = loc("CWE190_Integer_Overflow__int64_t_rand_square_10.c":68:30)
#loc82 = loc("CWE190_Integer_Overflow__int64_t_rand_square_10.c":69:31)
#loc83 = loc("CWE190_Integer_Overflow__int64_t_rand_square_10.c":69:13)
#loc84 = loc("CWE190_Integer_Overflow__int64_t_rand_square_10.c":73:13)
#loc85 = loc("CWE190_Integer_Overflow__int64_t_rand_square_10.c":79:1)
#loc86 = loc("CWE190_Integer_Overflow__int64_t_rand_square_10.c":101:1)
#loc87 = loc("CWE190_Integer_Overflow__int64_t_rand_square_10.c":81:5)
#loc88 = loc("CWE190_Integer_Overflow__int64_t_rand_square_10.c":81:13)
#loc89 = loc("CWE190_Integer_Overflow__int64_t_rand_square_10.c":82:12)
#loc90 = loc("CWE190_Integer_Overflow__int64_t_rand_square_10.c":82:5)
#loc91 = loc("CWE190_Integer_Overflow__int64_t_rand_square_10.c":83:5)
#loc92 = loc("CWE190_Integer_Overflow__int64_t_rand_square_10.c":87:5)
#loc93 = loc("CWE190_Integer_Overflow__int64_t_rand_square_10.c":83:8)
#loc94 = loc("CWE190_Integer_Overflow__int64_t_rand_square_10.c":84:5)
#loc95 = loc("CWE190_Integer_Overflow__int64_t_rand_square_10.c":86:25)
#loc96 = loc("CWE190_Integer_Overflow__int64_t_rand_square_10.c":86:9)
#loc97 = loc("CWE190_Integer_Overflow__int64_t_rand_square_10.c":88:5)
#loc98 = loc("CWE190_Integer_Overflow__int64_t_rand_square_10.c":100:5)
#loc99 = loc("CWE190_Integer_Overflow__int64_t_rand_square_10.c":88:8)
#loc100 = loc("CWE190_Integer_Overflow__int64_t_rand_square_10.c":89:5)
#loc101 = loc("CWE190_Integer_Overflow__int64_t_rand_square_10.c":91:9)
#loc102 = loc("CWE190_Integer_Overflow__int64_t_rand_square_10.c":99:9)
#loc103 = loc("CWE190_Integer_Overflow__int64_t_rand_square_10.c":91:31)
#loc104 = loc("CWE190_Integer_Overflow__int64_t_rand_square_10.c":91:13)
#loc105 = loc("CWE190_Integer_Overflow__int64_t_rand_square_10.c":91:40)
#loc106 = loc("CWE190_Integer_Overflow__int64_t_rand_square_10.c":91:46)
#loc107 = loc("CWE190_Integer_Overflow__int64_t_rand_square_10.c":91:55)
#loc108 = loc("CWE190_Integer_Overflow__int64_t_rand_square_10.c":91:37)
#loc109 = loc("CWE190_Integer_Overflow__int64_t_rand_square_10.c":92:9)
#loc110 = loc("CWE190_Integer_Overflow__int64_t_rand_square_10.c":95:9)
#loc111 = loc("CWE190_Integer_Overflow__int64_t_rand_square_10.c":97:9)
#loc112 = loc("CWE190_Integer_Overflow__int64_t_rand_square_10.c":93:13)
#loc113 = loc("CWE190_Integer_Overflow__int64_t_rand_square_10.c":93:37)
#loc114 = loc("CWE190_Integer_Overflow__int64_t_rand_square_10.c":93:30)
#loc115 = loc("CWE190_Integer_Overflow__int64_t_rand_square_10.c":94:31)
#loc116 = loc("CWE190_Integer_Overflow__int64_t_rand_square_10.c":94:13)
#loc117 = loc("CWE190_Integer_Overflow__int64_t_rand_square_10.c":98:23)
#loc118 = loc("CWE190_Integer_Overflow__int64_t_rand_square_10.c":98:13)
#loc119 = loc("CWE190_Integer_Overflow__int64_t_rand_square_10.c":104:1)
#loc120 = loc("CWE190_Integer_Overflow__int64_t_rand_square_10.c":126:1)
#loc121 = loc("CWE190_Integer_Overflow__int64_t_rand_square_10.c":106:5)
#loc122 = loc("CWE190_Integer_Overflow__int64_t_rand_square_10.c":106:13)
#loc123 = loc("CWE190_Integer_Overflow__int64_t_rand_square_10.c":107:12)
#loc124 = loc("CWE190_Integer_Overflow__int64_t_rand_square_10.c":107:5)
#loc125 = loc("CWE190_Integer_Overflow__int64_t_rand_square_10.c":108:5)
#loc126 = loc("CWE190_Integer_Overflow__int64_t_rand_square_10.c":117:5)
#loc127 = loc("CWE190_Integer_Overflow__int64_t_rand_square_10.c":108:8)
#loc128 = loc("CWE190_Integer_Overflow__int64_t_rand_square_10.c":109:5)
#loc129 = loc("CWE190_Integer_Overflow__int64_t_rand_square_10.c":112:5)
#loc130 = loc("CWE190_Integer_Overflow__int64_t_rand_square_10.c":114:5)
#loc131 = loc("CWE190_Integer_Overflow__int64_t_rand_square_10.c":111:19)
#loc132 = loc("CWE190_Integer_Overflow__int64_t_rand_square_10.c":111:9)
#loc133 = loc("CWE190_Integer_Overflow__int64_t_rand_square_10.c":116:16)
#loc134 = loc("CWE190_Integer_Overflow__int64_t_rand_square_10.c":116:9)
#loc135 = loc("CWE190_Integer_Overflow__int64_t_rand_square_10.c":118:5)
#loc136 = loc("CWE190_Integer_Overflow__int64_t_rand_square_10.c":125:5)
#loc137 = loc("CWE190_Integer_Overflow__int64_t_rand_square_10.c":118:8)
#loc138 = loc("CWE190_Integer_Overflow__int64_t_rand_square_10.c":119:5)
#loc139 = loc("CWE190_Integer_Overflow__int64_t_rand_square_10.c":120:9)
#loc140 = loc("CWE190_Integer_Overflow__int64_t_rand_square_10.c":124:9)
#loc141 = loc("CWE190_Integer_Overflow__int64_t_rand_square_10.c":122:13)
#loc142 = loc("CWE190_Integer_Overflow__int64_t_rand_square_10.c":122:37)
#loc143 = loc("CWE190_Integer_Overflow__int64_t_rand_square_10.c":122:30)
#loc144 = loc("CWE190_Integer_Overflow__int64_t_rand_square_10.c":123:31)
#loc145 = loc("CWE190_Integer_Overflow__int64_t_rand_square_10.c":123:13)
#loc146 = loc("CWE190_Integer_Overflow__int64_t_rand_square_10.c":129:1)
#loc147 = loc("CWE190_Integer_Overflow__int64_t_rand_square_10.c":146:1)
#loc148 = loc("CWE190_Integer_Overflow__int64_t_rand_square_10.c":131:5)
#loc149 = loc("CWE190_Integer_Overflow__int64_t_rand_square_10.c":131:13)
#loc150 = loc("CWE190_Integer_Overflow__int64_t_rand_square_10.c":132:12)
#loc151 = loc("CWE190_Integer_Overflow__int64_t_rand_square_10.c":132:5)
#loc152 = loc("CWE190_Integer_Overflow__int64_t_rand_square_10.c":133:5)
#loc153 = loc("CWE190_Integer_Overflow__int64_t_rand_square_10.c":137:5)
#loc154 = loc("CWE190_Integer_Overflow__int64_t_rand_square_10.c":133:8)
#loc155 = loc("CWE190_Integer_Overflow__int64_t_rand_square_10.c":134:5)
#loc156 = loc("CWE190_Integer_Overflow__int64_t_rand_square_10.c":136:16)
#loc157 = loc("CWE190_Integer_Overflow__int64_t_rand_square_10.c":136:9)
#loc158 = loc("CWE190_Integer_Overflow__int64_t_rand_square_10.c":138:5)
#loc159 = loc("CWE190_Integer_Overflow__int64_t_rand_square_10.c":145:5)
#loc160 = loc("CWE190_Integer_Overflow__int64_t_rand_square_10.c":138:8)
#loc161 = loc("CWE190_Integer_Overflow__int64_t_rand_square_10.c":139:5)
#loc162 = loc("CWE190_Integer_Overflow__int64_t_rand_square_10.c":140:9)
#loc163 = loc("CWE190_Integer_Overflow__int64_t_rand_square_10.c":144:9)
#loc164 = loc("CWE190_Integer_Overflow__int64_t_rand_square_10.c":142:13)
#loc165 = loc("CWE190_Integer_Overflow__int64_t_rand_square_10.c":142:37)
#loc166 = loc("CWE190_Integer_Overflow__int64_t_rand_square_10.c":142:30)
#loc167 = loc("CWE190_Integer_Overflow__int64_t_rand_square_10.c":143:31)
#loc168 = loc("CWE190_Integer_Overflow__int64_t_rand_square_10.c":143:13)
#loc169 = loc(fused[#loc1, #loc2])
#loc170 = loc(fused[#loc3, #loc4])
#loc171 = loc(fused[#loc5, #loc6])
#loc172 = loc(fused[#loc7, #loc8])
#loc173 = loc(fused[#loc9, #loc10])
#loc174 = loc(fused[#loc12, #loc11])
#loc175 = loc(fused[#loc13, #loc14])
#loc176 = loc(fused[#loc16, #loc14])
#loc177 = loc(fused[#loc18, #loc17])
#loc178 = loc(fused[#loc19, #loc20])
#loc179 = loc(fused[#loc22, #loc20])
#loc180 = loc(fused[#loc23, #loc24])
#loc181 = loc(fused[#loc25, #loc26])
#loc182 = loc(fused[#loc30, #loc31])
#loc183 = loc(fused[#loc32, #loc33])
#loc184 = loc(fused[#loc34, #loc35])
#loc185 = loc(fused[#loc36, #loc37])
#loc186 = loc(fused[#loc38, #loc39])
#loc187 = loc(fused[#loc40, #loc41])
#loc188 = loc(fused[#loc42, #loc43])
#loc189 = loc(fused[#loc45, #loc46])
#loc190 = loc(fused[#loc49, #loc50])
#loc191 = loc(fused[#loc51, #loc52])
#loc192 = loc(fused[#loc54, #loc53])
#loc193 = loc(fused[#loc55, #loc56])
#loc194 = loc(fused[#loc58, #loc56])
#loc195 = loc(fused[#loc60, #loc59])
#loc196 = loc(fused[#loc61, #loc62])
#loc197 = loc(fused[#loc64, #loc65, #loc66, #loc62])
#loc198 = loc(fused[#loc68, #loc69])
#loc199 = loc(fused[#loc71, #loc74])
#loc200 = loc(fused[#loc76, #loc77, #loc78, #loc69])
#loc201 = loc(fused[#loc79, #loc80])
#loc202 = loc(fused[#loc85, #loc86])
#loc203 = loc(fused[#loc87, #loc88])
#loc204 = loc(fused[#loc90, #loc89])
#loc205 = loc(fused[#loc91, #loc92])
#loc206 = loc(fused[#loc94, #loc92])
#loc207 = loc(fused[#loc96, #loc95])
#loc208 = loc(fused[#loc97, #loc98])
#loc209 = loc(fused[#loc100, #loc98])
#loc210 = loc(fused[#loc101, #loc102])
#loc211 = loc(fused[#loc104, #loc107])
#loc212 = loc(fused[#loc109, #loc110, #loc111, #loc102])
#loc213 = loc(fused[#loc112, #loc113])
#loc214 = loc(fused[#loc119, #loc120])
#loc215 = loc(fused[#loc121, #loc122])
#loc216 = loc(fused[#loc124, #loc123])
#loc217 = loc(fused[#loc125, #loc126])
#loc218 = loc(fused[#loc128, #loc129, #loc130, #loc126])
#loc219 = loc(fused[#loc134, #loc133])
#loc220 = loc(fused[#loc135, #loc136])
#loc221 = loc(fused[#loc138, #loc136])
#loc222 = loc(fused[#loc139, #loc140])
#loc223 = loc(fused[#loc141, #loc142])
#loc224 = loc(fused[#loc146, #loc147])
#loc225 = loc(fused[#loc148, #loc149])
#loc226 = loc(fused[#loc151, #loc150])
#loc227 = loc(fused[#loc152, #loc153])
#loc228 = loc(fused[#loc155, #loc153])
#loc229 = loc(fused[#loc157, #loc156])
#loc230 = loc(fused[#loc158, #loc159])
#loc231 = loc(fused[#loc161, #loc159])
#loc232 = loc(fused[#loc162, #loc163])
#loc233 = loc(fused[#loc164, #loc165])
