!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc35 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":116:10)
#loc36 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":116:14)
#loc37 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":116:20)
#loc38 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":116:32)
#loc151 = loc(fused[#loc35, #loc36])
#loc152 = loc(fused[#loc37, #loc38])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int64_t_rand_multiply_45.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc136)
  cir.global "private" internal dsolocal @CWE190_Integer_Overflow__int64_t_rand_multiply_45_badData = #cir.int<0> : !s64i {alignment = 8 : i64} loc(#loc137)
  cir.func no_proto @CWE190_Integer_Overflow__int64_t_rand_multiply_45_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc139)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc9)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc140)
    %2 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc11)
    %4 = cir.binop(and, %2, %3) : !s32i loc(#loc11)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc11)
    %6 = cir.ternary(%5, true {
      %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
      %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc11)
      %13 = cir.const #cir.int<60> : !s32i loc(#loc11)
      %14 = cir.shift(left, %12 : !u64i, %13 : !s32i) -> !u64i loc(#loc11)
      %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
      %16 = cir.cast(integral, %15 : !s32i), !u64i loc(#loc11)
      %17 = cir.const #cir.int<45> : !s32i loc(#loc11)
      %18 = cir.shift(left, %16 : !u64i, %17 : !s32i) -> !u64i loc(#loc11)
      %19 = cir.binop(xor, %14, %18) : !u64i loc(#loc11)
      %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
      %21 = cir.cast(integral, %20 : !s32i), !u64i loc(#loc11)
      %22 = cir.const #cir.int<30> : !s32i loc(#loc11)
      %23 = cir.shift(left, %21 : !u64i, %22 : !s32i) -> !u64i loc(#loc11)
      %24 = cir.binop(xor, %19, %23) : !u64i loc(#loc11)
      %25 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
      %26 = cir.cast(integral, %25 : !s32i), !u64i loc(#loc11)
      %27 = cir.const #cir.int<15> : !s32i loc(#loc11)
      %28 = cir.shift(left, %26 : !u64i, %27 : !s32i) -> !u64i loc(#loc11)
      %29 = cir.binop(xor, %24, %28) : !u64i loc(#loc11)
      %30 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
      %31 = cir.cast(integral, %30 : !s32i), !u64i loc(#loc11)
      %32 = cir.binop(xor, %29, %31) : !u64i loc(#loc11)
      cir.yield %32 : !u64i loc(#loc11)
    }, false {
      %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
      %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc11)
      %13 = cir.const #cir.int<60> : !s32i loc(#loc11)
      %14 = cir.shift(left, %12 : !u64i, %13 : !s32i) -> !u64i loc(#loc11)
      %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
      %16 = cir.cast(integral, %15 : !s32i), !u64i loc(#loc11)
      %17 = cir.const #cir.int<45> : !s32i loc(#loc11)
      %18 = cir.shift(left, %16 : !u64i, %17 : !s32i) -> !u64i loc(#loc11)
      %19 = cir.binop(xor, %14, %18) : !u64i loc(#loc11)
      %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
      %21 = cir.cast(integral, %20 : !s32i), !u64i loc(#loc11)
      %22 = cir.const #cir.int<30> : !s32i loc(#loc11)
      %23 = cir.shift(left, %21 : !u64i, %22 : !s32i) -> !u64i loc(#loc11)
      %24 = cir.binop(xor, %19, %23) : !u64i loc(#loc11)
      %25 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
      %26 = cir.cast(integral, %25 : !s32i), !u64i loc(#loc11)
      %27 = cir.const #cir.int<15> : !s32i loc(#loc11)
      %28 = cir.shift(left, %26 : !u64i, %27 : !s32i) -> !u64i loc(#loc11)
      %29 = cir.binop(xor, %24, %28) : !u64i loc(#loc11)
      %30 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
      %31 = cir.cast(integral, %30 : !s32i), !u64i loc(#loc11)
      %32 = cir.binop(xor, %29, %31) : !u64i loc(#loc11)
      %33 = cir.unary(minus, %32) : !u64i, !u64i loc(#loc11)
      %34 = cir.const #cir.int<1> : !s32i loc(#loc11)
      %35 = cir.cast(integral, %34 : !s32i), !u64i loc(#loc11)
      %36 = cir.binop(sub, %33, %35) : !u64i loc(#loc11)
      cir.yield %36 : !u64i loc(#loc11)
    }) : (!cir.bool) -> !u64i loc(#loc11)
    %7 = cir.cast(integral, %6 : !u64i), !s64i loc(#loc11)
    cir.store %7, %0 : !s64i, !cir.ptr<!s64i> loc(#loc141)
    %8 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc13)
    %9 = cir.get_global @CWE190_Integer_Overflow__int64_t_rand_multiply_45_badData : !cir.ptr<!s64i> loc(#loc137)
    cir.store %8, %9 : !s64i, !cir.ptr<!s64i> loc(#loc142)
    %10 = cir.get_global @badSink : !cir.ptr<!cir.func<!void ()>> loc(#loc143)
    cir.call %10() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc15)
    cir.return loc(#loc6)
  } loc(#loc138)
  cir.func no_proto @CWE190_Integer_Overflow__int64_t_rand_multiply_45_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc145)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc19)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc146)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc21)
    cir.return loc(#loc18)
  } loc(#loc144)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc147)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc148)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc149)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc29)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc30)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc31)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc32)
  cir.func @main(%arg0: !s32i loc(fused[#loc35, #loc36]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc37, #loc38])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc151)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc152)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc34)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc39)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc39)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc40)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc41)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc41)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc42)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc29)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc29)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc43)
    %8 = cir.get_global @CWE190_Integer_Overflow__int64_t_rand_multiply_45_good : !cir.ptr<!cir.func<!void ()>> loc(#loc153)
    cir.call @CWE190_Integer_Overflow__int64_t_rand_multiply_45_good() : () -> () loc(#loc44)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc30)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc30)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc46)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc31)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc31)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc47)
    %13 = cir.get_global @CWE190_Integer_Overflow__int64_t_rand_multiply_45_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc154)
    cir.call @CWE190_Integer_Overflow__int64_t_rand_multiply_45_bad() : () -> () loc(#loc48)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc32)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc32)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc50)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc51)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc155)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc155)
    cir.return %17 : !s32i loc(#loc155)
  } loc(#loc150)
  cir.func private @printLongLongLine(!s64i) loc(#loc156)
  cir.func no_proto internal private @badSink() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data", init] {alignment = 8 : i64} loc(#loc158)
    %1 = cir.get_global @CWE190_Integer_Overflow__int64_t_rand_multiply_45_badData : !cir.ptr<!s64i> loc(#loc137)
    %2 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc58)
    cir.store %2, %0 : !s64i, !cir.ptr<!s64i> loc(#loc158)
    cir.scope {
      %3 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc61)
      %4 = cir.const #cir.int<0> : !s32i loc(#loc62)
      %5 = cir.cast(integral, %4 : !s32i), !s64i loc(#loc62)
      %6 = cir.cmp(gt, %3, %5) : !s64i, !cir.bool loc(#loc160)
      cir.if %6 {
        %7 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc162)
        %8 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc66)
        %9 = cir.const #cir.int<2> : !s32i loc(#loc65)
        %10 = cir.cast(integral, %9 : !s32i), !s64i loc(#loc65)
        %11 = cir.binop(mul, %8, %10) nsw : !s64i loc(#loc66)
        cir.store %11, %7 : !s64i, !cir.ptr<!s64i> loc(#loc162)
        %12 = cir.load %7 : !cir.ptr<!s64i>, !s64i loc(#loc67)
        cir.call @printLongLongLine(%12) : (!s64i) -> () loc(#loc68)
      } loc(#loc161)
    } loc(#loc159)
    cir.return loc(#loc56)
  } loc(#loc157)
  cir.global "private" internal dsolocal @CWE190_Integer_Overflow__int64_t_rand_multiply_45_goodG2BData = #cir.int<0> : !s64i {alignment = 8 : i64} loc(#loc163)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc165)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc75)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc166)
    %2 = cir.const #cir.int<2> : !s32i loc(#loc77)
    %3 = cir.cast(integral, %2 : !s32i), !s64i loc(#loc77)
    cir.store %3, %0 : !s64i, !cir.ptr<!s64i> loc(#loc167)
    %4 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc79)
    %5 = cir.get_global @CWE190_Integer_Overflow__int64_t_rand_multiply_45_goodG2BData : !cir.ptr<!s64i> loc(#loc163)
    cir.store %4, %5 : !s64i, !cir.ptr<!s64i> loc(#loc168)
    %6 = cir.get_global @goodG2BSink : !cir.ptr<!cir.func<!void ()>> loc(#loc169)
    cir.call %6() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc81)
    cir.return loc(#loc72)
  } loc(#loc164)
  cir.func no_proto internal private @goodG2BSink() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data", init] {alignment = 8 : i64} loc(#loc171)
    %1 = cir.get_global @CWE190_Integer_Overflow__int64_t_rand_multiply_45_goodG2BData : !cir.ptr<!s64i> loc(#loc163)
    %2 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc86)
    cir.store %2, %0 : !s64i, !cir.ptr<!s64i> loc(#loc171)
    cir.scope {
      %3 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc89)
      %4 = cir.const #cir.int<0> : !s32i loc(#loc90)
      %5 = cir.cast(integral, %4 : !s32i), !s64i loc(#loc90)
      %6 = cir.cmp(gt, %3, %5) : !s64i, !cir.bool loc(#loc173)
      cir.if %6 {
        %7 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc175)
        %8 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc94)
        %9 = cir.const #cir.int<2> : !s32i loc(#loc93)
        %10 = cir.cast(integral, %9 : !s32i), !s64i loc(#loc93)
        %11 = cir.binop(mul, %8, %10) nsw : !s64i loc(#loc94)
        cir.store %11, %7 : !s64i, !cir.ptr<!s64i> loc(#loc175)
        %12 = cir.load %7 : !cir.ptr<!s64i>, !s64i loc(#loc95)
        cir.call @printLongLongLine(%12) : (!s64i) -> () loc(#loc96)
      } loc(#loc174)
    } loc(#loc172)
    cir.return loc(#loc84)
  } loc(#loc170)
  cir.global "private" internal dsolocal @CWE190_Integer_Overflow__int64_t_rand_multiply_45_goodB2GData = #cir.int<0> : !s64i {alignment = 8 : i64} loc(#loc176)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc178)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc103)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc179)
    %2 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc105)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc105)
    %4 = cir.binop(and, %2, %3) : !s32i loc(#loc105)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc105)
    %6 = cir.ternary(%5, true {
      %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc105)
      %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc105)
      %13 = cir.const #cir.int<60> : !s32i loc(#loc105)
      %14 = cir.shift(left, %12 : !u64i, %13 : !s32i) -> !u64i loc(#loc105)
      %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc105)
      %16 = cir.cast(integral, %15 : !s32i), !u64i loc(#loc105)
      %17 = cir.const #cir.int<45> : !s32i loc(#loc105)
      %18 = cir.shift(left, %16 : !u64i, %17 : !s32i) -> !u64i loc(#loc105)
      %19 = cir.binop(xor, %14, %18) : !u64i loc(#loc105)
      %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc105)
      %21 = cir.cast(integral, %20 : !s32i), !u64i loc(#loc105)
      %22 = cir.const #cir.int<30> : !s32i loc(#loc105)
      %23 = cir.shift(left, %21 : !u64i, %22 : !s32i) -> !u64i loc(#loc105)
      %24 = cir.binop(xor, %19, %23) : !u64i loc(#loc105)
      %25 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc105)
      %26 = cir.cast(integral, %25 : !s32i), !u64i loc(#loc105)
      %27 = cir.const #cir.int<15> : !s32i loc(#loc105)
      %28 = cir.shift(left, %26 : !u64i, %27 : !s32i) -> !u64i loc(#loc105)
      %29 = cir.binop(xor, %24, %28) : !u64i loc(#loc105)
      %30 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc105)
      %31 = cir.cast(integral, %30 : !s32i), !u64i loc(#loc105)
      %32 = cir.binop(xor, %29, %31) : !u64i loc(#loc105)
      cir.yield %32 : !u64i loc(#loc105)
    }, false {
      %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc105)
      %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc105)
      %13 = cir.const #cir.int<60> : !s32i loc(#loc105)
      %14 = cir.shift(left, %12 : !u64i, %13 : !s32i) -> !u64i loc(#loc105)
      %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc105)
      %16 = cir.cast(integral, %15 : !s32i), !u64i loc(#loc105)
      %17 = cir.const #cir.int<45> : !s32i loc(#loc105)
      %18 = cir.shift(left, %16 : !u64i, %17 : !s32i) -> !u64i loc(#loc105)
      %19 = cir.binop(xor, %14, %18) : !u64i loc(#loc105)
      %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc105)
      %21 = cir.cast(integral, %20 : !s32i), !u64i loc(#loc105)
      %22 = cir.const #cir.int<30> : !s32i loc(#loc105)
      %23 = cir.shift(left, %21 : !u64i, %22 : !s32i) -> !u64i loc(#loc105)
      %24 = cir.binop(xor, %19, %23) : !u64i loc(#loc105)
      %25 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc105)
      %26 = cir.cast(integral, %25 : !s32i), !u64i loc(#loc105)
      %27 = cir.const #cir.int<15> : !s32i loc(#loc105)
      %28 = cir.shift(left, %26 : !u64i, %27 : !s32i) -> !u64i loc(#loc105)
      %29 = cir.binop(xor, %24, %28) : !u64i loc(#loc105)
      %30 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc105)
      %31 = cir.cast(integral, %30 : !s32i), !u64i loc(#loc105)
      %32 = cir.binop(xor, %29, %31) : !u64i loc(#loc105)
      %33 = cir.unary(minus, %32) : !u64i, !u64i loc(#loc105)
      %34 = cir.const #cir.int<1> : !s32i loc(#loc105)
      %35 = cir.cast(integral, %34 : !s32i), !u64i loc(#loc105)
      %36 = cir.binop(sub, %33, %35) : !u64i loc(#loc105)
      cir.yield %36 : !u64i loc(#loc105)
    }) : (!cir.bool) -> !u64i loc(#loc105)
    %7 = cir.cast(integral, %6 : !u64i), !s64i loc(#loc105)
    cir.store %7, %0 : !s64i, !cir.ptr<!s64i> loc(#loc180)
    %8 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc107)
    %9 = cir.get_global @CWE190_Integer_Overflow__int64_t_rand_multiply_45_goodB2GData : !cir.ptr<!s64i> loc(#loc176)
    cir.store %8, %9 : !s64i, !cir.ptr<!s64i> loc(#loc181)
    %10 = cir.get_global @goodB2GSink : !cir.ptr<!cir.func<!void ()>> loc(#loc182)
    cir.call %10() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc109)
    cir.return loc(#loc100)
  } loc(#loc177)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc111)
  cir.func no_proto internal private @goodB2GSink() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data", init] {alignment = 8 : i64} loc(#loc184)
    %1 = cir.get_global @CWE190_Integer_Overflow__int64_t_rand_multiply_45_goodB2GData : !cir.ptr<!s64i> loc(#loc176)
    %2 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc115)
    cir.store %2, %0 : !s64i, !cir.ptr<!s64i> loc(#loc184)
    cir.scope {
      %3 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc118)
      %4 = cir.const #cir.int<0> : !s32i loc(#loc119)
      %5 = cir.cast(integral, %4 : !s32i), !s64i loc(#loc119)
      %6 = cir.cmp(gt, %3, %5) : !s64i, !cir.bool loc(#loc186)
      cir.if %6 {
        cir.scope {
          %7 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc123)
          %8 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc124)
          %9 = cir.const #cir.int<2> : !s32i loc(#loc125)
          %10 = cir.cast(integral, %9 : !s32i), !s64i loc(#loc125)
          %11 = cir.binop(div, %8, %10) : !s64i loc(#loc189)
          %12 = cir.cmp(lt, %7, %11) : !s64i, !cir.bool loc(#loc190)
          cir.if %12 {
            %13 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc192)
            %14 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc132)
            %15 = cir.const #cir.int<2> : !s32i loc(#loc131)
            %16 = cir.cast(integral, %15 : !s32i), !s64i loc(#loc131)
            %17 = cir.binop(mul, %14, %16) nsw : !s64i loc(#loc132)
            cir.store %17, %13 : !s64i, !cir.ptr<!s64i> loc(#loc192)
            %18 = cir.load %13 : !cir.ptr<!s64i>, !s64i loc(#loc133)
            cir.call @printLongLongLine(%18) : (!s64i) -> () loc(#loc134)
          } else {
            %13 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc111)
            %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc111)
            cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc135)
          } loc(#loc191)
        } loc(#loc188)
      } loc(#loc187)
    } loc(#loc185)
    cir.return loc(#loc113)
  } loc(#loc183)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":20:1)
#loc4 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":20:16)
#loc5 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":37:1)
#loc6 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":45:1)
#loc7 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":39:5)
#loc8 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":39:13)
#loc9 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":40:12)
#loc10 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":40:5)
#loc11 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":42:21)
#loc12 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":42:5)
#loc13 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":43:65)
#loc14 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":43:5)
#loc15 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":44:5)
#loc16 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":44:13)
#loc17 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":102:1)
#loc18 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":106:1)
#loc19 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":104:5)
#loc20 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":104:13)
#loc21 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":105:5)
#loc22 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":105:13)
#loc23 = loc("/usr/include/stdlib.h":575:1)
#loc24 = loc("/usr/include/stdlib.h":575:41)
#loc25 = loc("/usr/include/time.h":76:1)
#loc26 = loc("/usr/include/time.h":76:38)
#loc27 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc28 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc29 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":121:15)
#loc30 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":123:15)
#loc31 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":126:15)
#loc32 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":128:15)
#loc33 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":116:1)
#loc34 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":131:1)
#loc39 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":117:1)
#loc40 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":119:27)
#loc41 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":119:22)
#loc42 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":119:5)
#loc43 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":121:5)
#loc44 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":122:5)
#loc45 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":122:60)
#loc46 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":123:5)
#loc47 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":126:5)
#loc48 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":127:5)
#loc49 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":127:59)
#loc50 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":128:5)
#loc51 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":130:12)
#loc52 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":130:5)
#loc53 = loc("../../../testcasesupport/std_testcase_io.h":26:1)
#loc54 = loc("../../../testcasesupport/std_testcase_io.h":26:49)
#loc55 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":26:1)
#loc56 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":35:1)
#loc57 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":28:5)
#loc58 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":28:20)
#loc59 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":29:5)
#loc60 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":34:5)
#loc61 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":29:8)
#loc62 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":29:15)
#loc63 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":30:5)
#loc64 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":32:9)
#loc65 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":32:33)
#loc66 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":32:26)
#loc67 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":33:27)
#loc68 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":33:9)
#loc69 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":21:1)
#loc70 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":21:16)
#loc71 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":63:1)
#loc72 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":71:1)
#loc73 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":65:5)
#loc74 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":65:13)
#loc75 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":66:12)
#loc76 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":66:5)
#loc77 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":68:12)
#loc78 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":68:5)
#loc79 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":69:69)
#loc80 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":69:5)
#loc81 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":70:5)
#loc82 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":70:17)
#loc83 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":52:1)
#loc84 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":61:1)
#loc85 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":54:5)
#loc86 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":54:20)
#loc87 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":55:5)
#loc88 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":60:5)
#loc89 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":55:8)
#loc90 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":55:15)
#loc91 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":56:5)
#loc92 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":58:9)
#loc93 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":58:33)
#loc94 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":58:26)
#loc95 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":59:27)
#loc96 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":59:9)
#loc97 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":22:1)
#loc98 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":22:16)
#loc99 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":92:1)
#loc100 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":100:1)
#loc101 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":94:5)
#loc102 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":94:13)
#loc103 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":95:12)
#loc104 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":95:5)
#loc105 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":97:21)
#loc106 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":97:5)
#loc107 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":98:69)
#loc108 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":98:5)
#loc109 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":99:5)
#loc110 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":99:17)
#loc111 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":87:23)
#loc112 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":74:1)
#loc113 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":90:1)
#loc114 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":76:5)
#loc115 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":76:20)
#loc116 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":77:5)
#loc117 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":89:5)
#loc118 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":77:8)
#loc119 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":77:15)
#loc120 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":78:5)
#loc121 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":80:9)
#loc122 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":88:9)
#loc123 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":80:13)
#loc124 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":80:21)
#loc125 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":80:31)
#loc126 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":80:32)
#loc127 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":81:9)
#loc128 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":84:9)
#loc129 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":86:9)
#loc130 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":82:13)
#loc131 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":82:37)
#loc132 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":82:30)
#loc133 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":83:31)
#loc134 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":83:13)
#loc135 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":87:13)
#loc136 = loc(fused[#loc1, #loc2])
#loc137 = loc(fused[#loc3, #loc4])
#loc138 = loc(fused[#loc5, #loc6])
#loc139 = loc(fused[#loc7, #loc8])
#loc140 = loc(fused[#loc10, #loc9])
#loc141 = loc(fused[#loc12, #loc11])
#loc142 = loc(fused[#loc14, #loc13])
#loc143 = loc(fused[#loc15, #loc16])
#loc144 = loc(fused[#loc17, #loc18])
#loc145 = loc(fused[#loc19, #loc20])
#loc146 = loc(fused[#loc21, #loc22])
#loc147 = loc(fused[#loc23, #loc24])
#loc148 = loc(fused[#loc25, #loc26])
#loc149 = loc(fused[#loc27, #loc28])
#loc150 = loc(fused[#loc33, #loc34])
#loc153 = loc(fused[#loc44, #loc45])
#loc154 = loc(fused[#loc48, #loc49])
#loc155 = loc(fused[#loc52, #loc51])
#loc156 = loc(fused[#loc53, #loc54])
#loc157 = loc(fused[#loc55, #loc56])
#loc158 = loc(fused[#loc57, #loc58])
#loc159 = loc(fused[#loc59, #loc60])
#loc160 = loc(fused[#loc61, #loc62])
#loc161 = loc(fused[#loc63, #loc60])
#loc162 = loc(fused[#loc64, #loc65])
#loc163 = loc(fused[#loc69, #loc70])
#loc164 = loc(fused[#loc71, #loc72])
#loc165 = loc(fused[#loc73, #loc74])
#loc166 = loc(fused[#loc76, #loc75])
#loc167 = loc(fused[#loc78, #loc77])
#loc168 = loc(fused[#loc80, #loc79])
#loc169 = loc(fused[#loc81, #loc82])
#loc170 = loc(fused[#loc83, #loc84])
#loc171 = loc(fused[#loc85, #loc86])
#loc172 = loc(fused[#loc87, #loc88])
#loc173 = loc(fused[#loc89, #loc90])
#loc174 = loc(fused[#loc91, #loc88])
#loc175 = loc(fused[#loc92, #loc93])
#loc176 = loc(fused[#loc97, #loc98])
#loc177 = loc(fused[#loc99, #loc100])
#loc178 = loc(fused[#loc101, #loc102])
#loc179 = loc(fused[#loc104, #loc103])
#loc180 = loc(fused[#loc106, #loc105])
#loc181 = loc(fused[#loc108, #loc107])
#loc182 = loc(fused[#loc109, #loc110])
#loc183 = loc(fused[#loc112, #loc113])
#loc184 = loc(fused[#loc114, #loc115])
#loc185 = loc(fused[#loc116, #loc117])
#loc186 = loc(fused[#loc118, #loc119])
#loc187 = loc(fused[#loc120, #loc117])
#loc188 = loc(fused[#loc121, #loc122])
#loc189 = loc(fused[#loc124, #loc125])
#loc190 = loc(fused[#loc123, #loc126])
#loc191 = loc(fused[#loc127, #loc128, #loc129, #loc122])
#loc192 = loc(fused[#loc130, #loc131])
