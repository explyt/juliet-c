!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc13 = loc("CWE191_Integer_Underflow__char_rand_sub_22a.c":32:18)
#loc41 = loc("CWE191_Integer_Underflow__char_rand_sub_22a.c":54:18)
#loc55 = loc("CWE191_Integer_Underflow__char_rand_sub_22a.c":67:18)
module @"/workspaces/juliet-c/testcases/CWE191_Integer_Underflow/s01/CWE191_Integer_Underflow__char_rand_sub_22a.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, "dlti.endianness" = "little", "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64>} {
  cir.global external dsolocal @CWE191_Integer_Underflow__char_rand_sub_22_badGlobal = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc76)
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc77)
  cir.func private @CWE191_Integer_Underflow__char_rand_sub_22_badSink(!s8i) loc(#loc78)
  cir.func no_proto @CWE191_Integer_Underflow__char_rand_sub_22_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc80)
    %1 = cir.const #cir.int<32> : !s32i loc(#loc11)
    %2 = cir.cast(integral, %1 : !s32i), !s8i loc(#loc11)
    cir.store %2, %0 : !s8i, !cir.ptr<!s8i> loc(#loc81)
    %3 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc13)
    %5 = cir.binop(and, %3, %4) : !s32i loc(#loc13)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc13)
    cir.brcond %6 ^bb1, ^bb2 loc(#loc13)
  ^bb1:  // pred: ^bb0
    %7 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
    %8 = cir.cast(integral, %7 : !s32i), !u32i loc(#loc13)
    %9 = cir.const #cir.int<30> : !s32i loc(#loc13)
    %10 = cir.shift(left, %8 : !u32i, %9 : !s32i) -> !u32i loc(#loc13)
    %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
    %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc13)
    %13 = cir.const #cir.int<15> : !s32i loc(#loc13)
    %14 = cir.shift(left, %12 : !u32i, %13 : !s32i) -> !u32i loc(#loc13)
    %15 = cir.binop(xor, %10, %14) : !u32i loc(#loc13)
    %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
    %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc13)
    %18 = cir.binop(xor, %15, %17) : !u32i loc(#loc13)
    cir.br ^bb3(%18 : !u32i) loc(#loc13)
  ^bb2:  // pred: ^bb0
    %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
    %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc13)
    %21 = cir.const #cir.int<30> : !s32i loc(#loc13)
    %22 = cir.shift(left, %20 : !u32i, %21 : !s32i) -> !u32i loc(#loc13)
    %23 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
    %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc13)
    %25 = cir.const #cir.int<15> : !s32i loc(#loc13)
    %26 = cir.shift(left, %24 : !u32i, %25 : !s32i) -> !u32i loc(#loc13)
    %27 = cir.binop(xor, %22, %26) : !u32i loc(#loc13)
    %28 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
    %29 = cir.cast(integral, %28 : !s32i), !u32i loc(#loc13)
    %30 = cir.binop(xor, %27, %29) : !u32i loc(#loc13)
    %31 = cir.unary(minus, %30) : !u32i, !u32i loc(#loc13)
    %32 = cir.const #cir.int<1> : !s32i loc(#loc13)
    %33 = cir.cast(integral, %32 : !s32i), !u32i loc(#loc13)
    %34 = cir.binop(sub, %31, %33) : !u32i loc(#loc13)
    cir.br ^bb3(%34 : !u32i) loc(#loc13)
  ^bb3(%35: !u32i loc("CWE191_Integer_Underflow__char_rand_sub_22a.c":32:18)):  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc13)
  ^bb4:  // pred: ^bb3
    %36 = cir.cast(integral, %35 : !u32i), !s32i loc(#loc13)
    %37 = cir.cast(integral, %36 : !s32i), !s8i loc(#loc13)
    cir.store %37, %0 : !s8i, !cir.ptr<!s8i> loc(#loc82)
    %38 = cir.const #cir.int<1> : !s32i loc(#loc15)
    %39 = cir.get_global @CWE191_Integer_Underflow__char_rand_sub_22_badGlobal : !cir.ptr<!s32i> loc(#loc76)
    cir.store %38, %39 : !s32i, !cir.ptr<!s32i> loc(#loc83)
    %40 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc17)
    cir.call @CWE191_Integer_Underflow__char_rand_sub_22_badSink(%40) : (!s8i) -> () loc(#loc18)
    cir.return loc(#loc8)
  } loc(#loc79)
  cir.global external dsolocal @CWE191_Integer_Underflow__char_rand_sub_22_goodB2G1Global = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc84)
  cir.global external dsolocal @CWE191_Integer_Underflow__char_rand_sub_22_goodB2G2Global = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc85)
  cir.global external dsolocal @CWE191_Integer_Underflow__char_rand_sub_22_goodG2BGlobal = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc86)
  cir.func no_proto @CWE191_Integer_Underflow__char_rand_sub_22_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<()>> loc(#loc88)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc27)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<()>> loc(#loc89)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc29)
    %2 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc90)
    cir.call %2() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc31)
    cir.return loc(#loc26)
  } loc(#loc87)
  cir.func private @CWE191_Integer_Underflow__char_rand_sub_22_goodB2G1Sink(!s8i) loc(#loc91)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc93)
    %1 = cir.const #cir.int<32> : !s32i loc(#loc39)
    %2 = cir.cast(integral, %1 : !s32i), !s8i loc(#loc39)
    cir.store %2, %0 : !s8i, !cir.ptr<!s8i> loc(#loc94)
    %3 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc41)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc41)
    %5 = cir.binop(and, %3, %4) : !s32i loc(#loc41)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc41)
    cir.brcond %6 ^bb1, ^bb2 loc(#loc41)
  ^bb1:  // pred: ^bb0
    %7 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc41)
    %8 = cir.cast(integral, %7 : !s32i), !u32i loc(#loc41)
    %9 = cir.const #cir.int<30> : !s32i loc(#loc41)
    %10 = cir.shift(left, %8 : !u32i, %9 : !s32i) -> !u32i loc(#loc41)
    %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc41)
    %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc41)
    %13 = cir.const #cir.int<15> : !s32i loc(#loc41)
    %14 = cir.shift(left, %12 : !u32i, %13 : !s32i) -> !u32i loc(#loc41)
    %15 = cir.binop(xor, %10, %14) : !u32i loc(#loc41)
    %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc41)
    %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc41)
    %18 = cir.binop(xor, %15, %17) : !u32i loc(#loc41)
    cir.br ^bb3(%18 : !u32i) loc(#loc41)
  ^bb2:  // pred: ^bb0
    %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc41)
    %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc41)
    %21 = cir.const #cir.int<30> : !s32i loc(#loc41)
    %22 = cir.shift(left, %20 : !u32i, %21 : !s32i) -> !u32i loc(#loc41)
    %23 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc41)
    %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc41)
    %25 = cir.const #cir.int<15> : !s32i loc(#loc41)
    %26 = cir.shift(left, %24 : !u32i, %25 : !s32i) -> !u32i loc(#loc41)
    %27 = cir.binop(xor, %22, %26) : !u32i loc(#loc41)
    %28 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc41)
    %29 = cir.cast(integral, %28 : !s32i), !u32i loc(#loc41)
    %30 = cir.binop(xor, %27, %29) : !u32i loc(#loc41)
    %31 = cir.unary(minus, %30) : !u32i, !u32i loc(#loc41)
    %32 = cir.const #cir.int<1> : !s32i loc(#loc41)
    %33 = cir.cast(integral, %32 : !s32i), !u32i loc(#loc41)
    %34 = cir.binop(sub, %31, %33) : !u32i loc(#loc41)
    cir.br ^bb3(%34 : !u32i) loc(#loc41)
  ^bb3(%35: !u32i loc("CWE191_Integer_Underflow__char_rand_sub_22a.c":54:18)):  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc41)
  ^bb4:  // pred: ^bb3
    %36 = cir.cast(integral, %35 : !u32i), !s32i loc(#loc41)
    %37 = cir.cast(integral, %36 : !s32i), !s8i loc(#loc41)
    cir.store %37, %0 : !s8i, !cir.ptr<!s8i> loc(#loc95)
    %38 = cir.const #cir.int<0> : !s32i loc(#loc43)
    %39 = cir.get_global @CWE191_Integer_Underflow__char_rand_sub_22_goodB2G1Global : !cir.ptr<!s32i> loc(#loc84)
    cir.store %38, %39 : !s32i, !cir.ptr<!s32i> loc(#loc96)
    %40 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc45)
    cir.call @CWE191_Integer_Underflow__char_rand_sub_22_goodB2G1Sink(%40) : (!s8i) -> () loc(#loc46)
    cir.return loc(#loc36)
  } loc(#loc92)
  cir.func private @CWE191_Integer_Underflow__char_rand_sub_22_goodB2G2Sink(!s8i) loc(#loc97)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc99)
    %1 = cir.const #cir.int<32> : !s32i loc(#loc53)
    %2 = cir.cast(integral, %1 : !s32i), !s8i loc(#loc53)
    cir.store %2, %0 : !s8i, !cir.ptr<!s8i> loc(#loc100)
    %3 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc55)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc55)
    %5 = cir.binop(and, %3, %4) : !s32i loc(#loc55)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc55)
    cir.brcond %6 ^bb1, ^bb2 loc(#loc55)
  ^bb1:  // pred: ^bb0
    %7 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc55)
    %8 = cir.cast(integral, %7 : !s32i), !u32i loc(#loc55)
    %9 = cir.const #cir.int<30> : !s32i loc(#loc55)
    %10 = cir.shift(left, %8 : !u32i, %9 : !s32i) -> !u32i loc(#loc55)
    %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc55)
    %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc55)
    %13 = cir.const #cir.int<15> : !s32i loc(#loc55)
    %14 = cir.shift(left, %12 : !u32i, %13 : !s32i) -> !u32i loc(#loc55)
    %15 = cir.binop(xor, %10, %14) : !u32i loc(#loc55)
    %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc55)
    %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc55)
    %18 = cir.binop(xor, %15, %17) : !u32i loc(#loc55)
    cir.br ^bb3(%18 : !u32i) loc(#loc55)
  ^bb2:  // pred: ^bb0
    %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc55)
    %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc55)
    %21 = cir.const #cir.int<30> : !s32i loc(#loc55)
    %22 = cir.shift(left, %20 : !u32i, %21 : !s32i) -> !u32i loc(#loc55)
    %23 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc55)
    %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc55)
    %25 = cir.const #cir.int<15> : !s32i loc(#loc55)
    %26 = cir.shift(left, %24 : !u32i, %25 : !s32i) -> !u32i loc(#loc55)
    %27 = cir.binop(xor, %22, %26) : !u32i loc(#loc55)
    %28 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc55)
    %29 = cir.cast(integral, %28 : !s32i), !u32i loc(#loc55)
    %30 = cir.binop(xor, %27, %29) : !u32i loc(#loc55)
    %31 = cir.unary(minus, %30) : !u32i, !u32i loc(#loc55)
    %32 = cir.const #cir.int<1> : !s32i loc(#loc55)
    %33 = cir.cast(integral, %32 : !s32i), !u32i loc(#loc55)
    %34 = cir.binop(sub, %31, %33) : !u32i loc(#loc55)
    cir.br ^bb3(%34 : !u32i) loc(#loc55)
  ^bb3(%35: !u32i loc("CWE191_Integer_Underflow__char_rand_sub_22a.c":67:18)):  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc55)
  ^bb4:  // pred: ^bb3
    %36 = cir.cast(integral, %35 : !u32i), !s32i loc(#loc55)
    %37 = cir.cast(integral, %36 : !s32i), !s8i loc(#loc55)
    cir.store %37, %0 : !s8i, !cir.ptr<!s8i> loc(#loc101)
    %38 = cir.const #cir.int<1> : !s32i loc(#loc57)
    %39 = cir.get_global @CWE191_Integer_Underflow__char_rand_sub_22_goodB2G2Global : !cir.ptr<!s32i> loc(#loc85)
    cir.store %38, %39 : !s32i, !cir.ptr<!s32i> loc(#loc102)
    %40 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc59)
    cir.call @CWE191_Integer_Underflow__char_rand_sub_22_goodB2G2Sink(%40) : (!s8i) -> () loc(#loc60)
    cir.return loc(#loc50)
  } loc(#loc98)
  cir.func private @CWE191_Integer_Underflow__char_rand_sub_22_goodG2BSink(!s8i) loc(#loc103)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc105)
    %1 = cir.const #cir.int<32> : !s32i loc(#loc67)
    %2 = cir.cast(integral, %1 : !s32i), !s8i loc(#loc67)
    cir.store %2, %0 : !s8i, !cir.ptr<!s8i> loc(#loc106)
    %3 = cir.const #cir.int<2> : !s32i loc(#loc69)
    %4 = cir.unary(minus, %3) nsw : !s32i, !s32i loc(#loc70)
    %5 = cir.cast(integral, %4 : !s32i), !s8i loc(#loc70)
    cir.store %5, %0 : !s8i, !cir.ptr<!s8i> loc(#loc107)
    %6 = cir.const #cir.int<1> : !s32i loc(#loc72)
    %7 = cir.get_global @CWE191_Integer_Underflow__char_rand_sub_22_goodG2BGlobal : !cir.ptr<!s32i> loc(#loc86)
    cir.store %6, %7 : !s32i, !cir.ptr<!s32i> loc(#loc108)
    %8 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc74)
    cir.call @CWE191_Integer_Underflow__char_rand_sub_22_goodG2BSink(%8) : (!s8i) -> () loc(#loc75)
    cir.return loc(#loc64)
  } loc(#loc104)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE191_Integer_Underflow/s01/CWE191_Integer_Underflow__char_rand_sub_22a.c":0:0)
#loc1 = loc("CWE191_Integer_Underflow__char_rand_sub_22a.c":23:1)
#loc2 = loc("CWE191_Integer_Underflow__char_rand_sub_22a.c":23:60)
#loc3 = loc("/usr/include/stdlib.h":573:1)
#loc4 = loc("/usr/include/stdlib.h":573:24)
#loc5 = loc("CWE191_Integer_Underflow__char_rand_sub_22a.c":25:1)
#loc6 = loc("CWE191_Integer_Underflow__char_rand_sub_22a.c":25:66)
#loc7 = loc("CWE191_Integer_Underflow__char_rand_sub_22a.c":27:1)
#loc8 = loc("CWE191_Integer_Underflow__char_rand_sub_22a.c":35:1)
#loc9 = loc("CWE191_Integer_Underflow__char_rand_sub_22a.c":29:5)
#loc10 = loc("CWE191_Integer_Underflow__char_rand_sub_22a.c":29:10)
#loc11 = loc("CWE191_Integer_Underflow__char_rand_sub_22a.c":30:12)
#loc12 = loc("CWE191_Integer_Underflow__char_rand_sub_22a.c":30:5)
#loc14 = loc("CWE191_Integer_Underflow__char_rand_sub_22a.c":32:5)
#loc15 = loc("CWE191_Integer_Underflow__char_rand_sub_22a.c":33:60)
#loc16 = loc("CWE191_Integer_Underflow__char_rand_sub_22a.c":33:5)
#loc17 = loc("CWE191_Integer_Underflow__char_rand_sub_22a.c":34:56)
#loc18 = loc("CWE191_Integer_Underflow__char_rand_sub_22a.c":34:5)
#loc19 = loc("CWE191_Integer_Underflow__char_rand_sub_22a.c":42:1)
#loc20 = loc("CWE191_Integer_Underflow__char_rand_sub_22a.c":42:65)
#loc21 = loc("CWE191_Integer_Underflow__char_rand_sub_22a.c":43:1)
#loc22 = loc("CWE191_Integer_Underflow__char_rand_sub_22a.c":43:65)
#loc23 = loc("CWE191_Integer_Underflow__char_rand_sub_22a.c":44:1)
#loc24 = loc("CWE191_Integer_Underflow__char_rand_sub_22a.c":44:64)
#loc25 = loc("CWE191_Integer_Underflow__char_rand_sub_22a.c":85:1)
#loc26 = loc("CWE191_Integer_Underflow__char_rand_sub_22a.c":90:1)
#loc27 = loc("CWE191_Integer_Underflow__char_rand_sub_22a.c":87:5)
#loc28 = loc("CWE191_Integer_Underflow__char_rand_sub_22a.c":87:14)
#loc29 = loc("CWE191_Integer_Underflow__char_rand_sub_22a.c":88:5)
#loc30 = loc("CWE191_Integer_Underflow__char_rand_sub_22a.c":88:14)
#loc31 = loc("CWE191_Integer_Underflow__char_rand_sub_22a.c":89:5)
#loc32 = loc("CWE191_Integer_Underflow__char_rand_sub_22a.c":89:13)
#loc33 = loc("CWE191_Integer_Underflow__char_rand_sub_22a.c":47:1)
#loc34 = loc("CWE191_Integer_Underflow__char_rand_sub_22a.c":47:71)
#loc35 = loc("CWE191_Integer_Underflow__char_rand_sub_22a.c":49:1)
#loc36 = loc("CWE191_Integer_Underflow__char_rand_sub_22a.c":57:1)
#loc37 = loc("CWE191_Integer_Underflow__char_rand_sub_22a.c":51:5)
#loc38 = loc("CWE191_Integer_Underflow__char_rand_sub_22a.c":51:10)
#loc39 = loc("CWE191_Integer_Underflow__char_rand_sub_22a.c":52:12)
#loc40 = loc("CWE191_Integer_Underflow__char_rand_sub_22a.c":52:5)
#loc42 = loc("CWE191_Integer_Underflow__char_rand_sub_22a.c":54:5)
#loc43 = loc("CWE191_Integer_Underflow__char_rand_sub_22a.c":55:65)
#loc44 = loc("CWE191_Integer_Underflow__char_rand_sub_22a.c":55:5)
#loc45 = loc("CWE191_Integer_Underflow__char_rand_sub_22a.c":56:61)
#loc46 = loc("CWE191_Integer_Underflow__char_rand_sub_22a.c":56:5)
#loc47 = loc("CWE191_Integer_Underflow__char_rand_sub_22a.c":60:1)
#loc48 = loc("CWE191_Integer_Underflow__char_rand_sub_22a.c":60:71)
#loc49 = loc("CWE191_Integer_Underflow__char_rand_sub_22a.c":62:1)
#loc50 = loc("CWE191_Integer_Underflow__char_rand_sub_22a.c":70:1)
#loc51 = loc("CWE191_Integer_Underflow__char_rand_sub_22a.c":64:5)
#loc52 = loc("CWE191_Integer_Underflow__char_rand_sub_22a.c":64:10)
#loc53 = loc("CWE191_Integer_Underflow__char_rand_sub_22a.c":65:12)
#loc54 = loc("CWE191_Integer_Underflow__char_rand_sub_22a.c":65:5)
#loc56 = loc("CWE191_Integer_Underflow__char_rand_sub_22a.c":67:5)
#loc57 = loc("CWE191_Integer_Underflow__char_rand_sub_22a.c":68:65)
#loc58 = loc("CWE191_Integer_Underflow__char_rand_sub_22a.c":68:5)
#loc59 = loc("CWE191_Integer_Underflow__char_rand_sub_22a.c":69:61)
#loc60 = loc("CWE191_Integer_Underflow__char_rand_sub_22a.c":69:5)
#loc61 = loc("CWE191_Integer_Underflow__char_rand_sub_22a.c":73:1)
#loc62 = loc("CWE191_Integer_Underflow__char_rand_sub_22a.c":73:70)
#loc63 = loc("CWE191_Integer_Underflow__char_rand_sub_22a.c":75:1)
#loc64 = loc("CWE191_Integer_Underflow__char_rand_sub_22a.c":83:1)
#loc65 = loc("CWE191_Integer_Underflow__char_rand_sub_22a.c":77:5)
#loc66 = loc("CWE191_Integer_Underflow__char_rand_sub_22a.c":77:10)
#loc67 = loc("CWE191_Integer_Underflow__char_rand_sub_22a.c":78:12)
#loc68 = loc("CWE191_Integer_Underflow__char_rand_sub_22a.c":78:5)
#loc69 = loc("CWE191_Integer_Underflow__char_rand_sub_22a.c":80:13)
#loc70 = loc("CWE191_Integer_Underflow__char_rand_sub_22a.c":80:12)
#loc71 = loc("CWE191_Integer_Underflow__char_rand_sub_22a.c":80:5)
#loc72 = loc("CWE191_Integer_Underflow__char_rand_sub_22a.c":81:64)
#loc73 = loc("CWE191_Integer_Underflow__char_rand_sub_22a.c":81:5)
#loc74 = loc("CWE191_Integer_Underflow__char_rand_sub_22a.c":82:60)
#loc75 = loc("CWE191_Integer_Underflow__char_rand_sub_22a.c":82:5)
#loc76 = loc(fused[#loc1, #loc2])
#loc77 = loc(fused[#loc3, #loc4])
#loc78 = loc(fused[#loc5, #loc6])
#loc79 = loc(fused[#loc7, #loc8])
#loc80 = loc(fused[#loc9, #loc10])
#loc81 = loc(fused[#loc12, #loc11])
#loc82 = loc(fused[#loc14, #loc13])
#loc83 = loc(fused[#loc16, #loc15])
#loc84 = loc(fused[#loc19, #loc20])
#loc85 = loc(fused[#loc21, #loc22])
#loc86 = loc(fused[#loc23, #loc24])
#loc87 = loc(fused[#loc25, #loc26])
#loc88 = loc(fused[#loc27, #loc28])
#loc89 = loc(fused[#loc29, #loc30])
#loc90 = loc(fused[#loc31, #loc32])
#loc91 = loc(fused[#loc33, #loc34])
#loc92 = loc(fused[#loc35, #loc36])
#loc93 = loc(fused[#loc37, #loc38])
#loc94 = loc(fused[#loc40, #loc39])
#loc95 = loc(fused[#loc42, #loc41])
#loc96 = loc(fused[#loc44, #loc43])
#loc97 = loc(fused[#loc47, #loc48])
#loc98 = loc(fused[#loc49, #loc50])
#loc99 = loc(fused[#loc51, #loc52])
#loc100 = loc(fused[#loc54, #loc53])
#loc101 = loc(fused[#loc56, #loc55])
#loc102 = loc(fused[#loc58, #loc57])
#loc103 = loc(fused[#loc61, #loc62])
#loc104 = loc(fused[#loc63, #loc64])
#loc105 = loc(fused[#loc65, #loc66])
#loc106 = loc(fused[#loc68, #loc67])
#loc107 = loc(fused[#loc71, #loc69])
#loc108 = loc(fused[#loc73, #loc72])
