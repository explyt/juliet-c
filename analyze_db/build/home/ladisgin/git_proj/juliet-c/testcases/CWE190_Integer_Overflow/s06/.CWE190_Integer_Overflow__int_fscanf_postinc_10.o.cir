!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.struct<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.struct<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.struct<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
!ty__IO_FILE = !cir.struct<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!cir.struct<struct "_IO_FILE">>>, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s06/CWE190_Integer_Overflow__int_fscanf_postinc_10.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i32 = dense<32> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.global "private" external @globalTrue : !s32i {alignment = 4 : i64} loc(#loc168)
  cir.func private @__isoc99_fscanf(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i loc(#loc169)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc170)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"%d\00" : !cir.array<!s8i x 3>> : !cir.array<!s8i x 3> {alignment = 1 : i64} loc(#loc7)
  cir.func private @printIntLine(!s32i) loc(#loc171)
  cir.func no_proto @CWE190_Integer_Overflow__int_fscanf_postinc_10_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc173)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc174)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc16)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc175)
    cir.br ^bb1 loc(#loc176)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @globalTrue : !cir.ptr<!s32i> loc(#loc168)
    %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc20)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc20)
    cir.brcond %5 ^bb2, ^bb3 loc(#loc177)
  ^bb2:  // pred: ^bb1
    %6 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc22)
    %7 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc170)
    %8 = cir.load %7 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc23)
    %9 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc7)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc7)
    %11 = cir.call @__isoc99_fscanf(%8, %10, %1) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s32i>) -> !s32i loc(#loc22)
    cir.br ^bb3 loc(#loc19)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc19)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc178)
  ^bb5:  // pred: ^bb4
    %12 = cir.get_global @globalTrue : !cir.ptr<!s32i> loc(#loc168)
    %13 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc26)
    %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc26)
    cir.brcond %14 ^bb6, ^bb9 loc(#loc179)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc180)
  ^bb7:  // pred: ^bb6
    %15 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc30)
    %16 = cir.unary(inc, %15) : !s32i, !s32i loc(#loc31)
    cir.store %16, %1 : !s32i, !cir.ptr<!s32i> loc(#loc181)
    %17 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc13)
    cir.store %17, %0 : !s32i, !cir.ptr<!s32i> loc(#loc173)
    %18 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc32)
    cir.call @printIntLine(%18) : (!s32i) -> () loc(#loc33)
    cir.br ^bb8 loc(#loc29)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc25)
  ^bb9:  // 2 preds: ^bb5, ^bb8
    cir.br ^bb10 loc(#loc25)
  ^bb10:  // pred: ^bb9
    cir.return loc(#loc11)
  } loc(#loc172)
  cir.func no_proto @CWE190_Integer_Overflow__int_fscanf_postinc_10_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc183)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc36)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc184)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc38)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc185)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc40)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc186)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc42)
    cir.return loc(#loc35)
  } loc(#loc182)
  cir.global "private" external @globalFalse : !s32i {alignment = 4 : i64} loc(#loc187)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc188)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc48)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc49)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc190)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc191)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc56)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc192)
    cir.br ^bb1 loc(#loc193)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @globalTrue : !cir.ptr<!s32i> loc(#loc168)
    %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc60)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc60)
    cir.brcond %5 ^bb2, ^bb3 loc(#loc194)
  ^bb2:  // pred: ^bb1
    %6 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc62)
    %7 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc170)
    %8 = cir.load %7 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc63)
    %9 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc64)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc64)
    %11 = cir.call @__isoc99_fscanf(%8, %10, %1) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s32i>) -> !s32i loc(#loc62)
    cir.br ^bb3 loc(#loc59)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc59)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc195)
  ^bb5:  // pred: ^bb4
    %12 = cir.get_global @globalFalse : !cir.ptr<!s32i> loc(#loc187)
    %13 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc67)
    %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc67)
    cir.brcond %14 ^bb6, ^bb7 loc(#loc196)
  ^bb6:  // pred: ^bb5
    %15 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc48)
    %16 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc48)
    cir.call @printLine(%16) : (!cir.ptr<!s8i>) -> () loc(#loc71)
    cir.br ^bb13 loc(#loc69)
  ^bb7:  // pred: ^bb5
    cir.br ^bb8 loc(#loc197)
  ^bb8:  // pred: ^bb7
    %17 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc74)
    %18 = cir.const #cir.int<2147483647> : !s32i loc(#loc75)
    %19 = cir.cmp(lt, %17, %18) : !s32i, !cir.bool loc(#loc198)
    cir.brcond %19 ^bb9, ^bb10 loc(#loc199)
  ^bb9:  // pred: ^bb8
    %20 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc79)
    %21 = cir.unary(inc, %20) : !s32i, !s32i loc(#loc80)
    cir.store %21, %1 : !s32i, !cir.ptr<!s32i> loc(#loc200)
    %22 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc53)
    cir.store %22, %0 : !s32i, !cir.ptr<!s32i> loc(#loc190)
    %23 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc81)
    cir.call @printIntLine(%23) : (!s32i) -> () loc(#loc82)
    cir.br ^bb11 loc(#loc77)
  ^bb10:  // pred: ^bb8
    %24 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc49)
    %25 = cir.cast(array_to_ptrdecay, %24 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc49)
    cir.call @printLine(%25) : (!cir.ptr<!s8i>) -> () loc(#loc83)
    cir.br ^bb11 loc(#loc73)
  ^bb11:  // 2 preds: ^bb9, ^bb10
    cir.br ^bb12 loc(#loc73)
  ^bb12:  // pred: ^bb11
    cir.br ^bb13 loc(#loc66)
  ^bb13:  // 2 preds: ^bb6, ^bb12
    cir.br ^bb14 loc(#loc66)
  ^bb14:  // pred: ^bb13
    cir.return loc(#loc51)
  } loc(#loc189)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc202)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc203)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc90)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc204)
    cir.br ^bb1 loc(#loc205)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @globalTrue : !cir.ptr<!s32i> loc(#loc168)
    %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc94)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc94)
    cir.brcond %5 ^bb2, ^bb3 loc(#loc206)
  ^bb2:  // pred: ^bb1
    %6 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc96)
    %7 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc170)
    %8 = cir.load %7 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc97)
    %9 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc98)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc98)
    %11 = cir.call @__isoc99_fscanf(%8, %10, %1) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s32i>) -> !s32i loc(#loc96)
    cir.br ^bb3 loc(#loc93)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc93)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc207)
  ^bb5:  // pred: ^bb4
    %12 = cir.get_global @globalTrue : !cir.ptr<!s32i> loc(#loc168)
    %13 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc101)
    %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc101)
    cir.brcond %14 ^bb6, ^bb12 loc(#loc208)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc209)
  ^bb7:  // pred: ^bb6
    %15 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc105)
    %16 = cir.const #cir.int<2147483647> : !s32i loc(#loc106)
    %17 = cir.cmp(lt, %15, %16) : !s32i, !cir.bool loc(#loc210)
    cir.brcond %17 ^bb8, ^bb9 loc(#loc211)
  ^bb8:  // pred: ^bb7
    %18 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc110)
    %19 = cir.unary(inc, %18) : !s32i, !s32i loc(#loc111)
    cir.store %19, %1 : !s32i, !cir.ptr<!s32i> loc(#loc212)
    %20 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc87)
    cir.store %20, %0 : !s32i, !cir.ptr<!s32i> loc(#loc202)
    %21 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc112)
    cir.call @printIntLine(%21) : (!s32i) -> () loc(#loc113)
    cir.br ^bb10 loc(#loc108)
  ^bb9:  // pred: ^bb7
    %22 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc114)
    %23 = cir.cast(array_to_ptrdecay, %22 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc114)
    cir.call @printLine(%23) : (!cir.ptr<!s8i>) -> () loc(#loc115)
    cir.br ^bb10 loc(#loc104)
  ^bb10:  // 2 preds: ^bb8, ^bb9
    cir.br ^bb11 loc(#loc104)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc100)
  ^bb12:  // 2 preds: ^bb5, ^bb11
    cir.br ^bb13 loc(#loc100)
  ^bb13:  // pred: ^bb12
    cir.return loc(#loc85)
  } loc(#loc201)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc214)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc215)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc122)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc216)
    cir.br ^bb1 loc(#loc217)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @globalFalse : !cir.ptr<!s32i> loc(#loc187)
    %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc126)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc126)
    cir.brcond %5 ^bb2, ^bb3 loc(#loc218)
  ^bb2:  // pred: ^bb1
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc130)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc130)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc131)
    cir.br ^bb4 loc(#loc128)
  ^bb3:  // pred: ^bb1
    %8 = cir.const #cir.int<2> : !s32i loc(#loc132)
    cir.store %8, %1 : !s32i, !cir.ptr<!s32i> loc(#loc219)
    cir.br ^bb4 loc(#loc125)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc125)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc220)
  ^bb6:  // pred: ^bb5
    %9 = cir.get_global @globalTrue : !cir.ptr<!s32i> loc(#loc168)
    %10 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc136)
    %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc136)
    cir.brcond %11 ^bb7, ^bb10 loc(#loc221)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc222)
  ^bb8:  // pred: ^bb7
    %12 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc140)
    %13 = cir.unary(inc, %12) : !s32i, !s32i loc(#loc141)
    cir.store %13, %1 : !s32i, !cir.ptr<!s32i> loc(#loc223)
    %14 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc119)
    cir.store %14, %0 : !s32i, !cir.ptr<!s32i> loc(#loc214)
    %15 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc142)
    cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc143)
    cir.br ^bb9 loc(#loc139)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc135)
  ^bb10:  // 2 preds: ^bb6, ^bb9
    cir.br ^bb11 loc(#loc135)
  ^bb11:  // pred: ^bb10
    cir.return loc(#loc117)
  } loc(#loc213)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc225)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc226)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc150)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc227)
    cir.br ^bb1 loc(#loc228)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @globalTrue : !cir.ptr<!s32i> loc(#loc168)
    %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc154)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc154)
    cir.brcond %5 ^bb2, ^bb3 loc(#loc229)
  ^bb2:  // pred: ^bb1
    %6 = cir.const #cir.int<2> : !s32i loc(#loc156)
    cir.store %6, %1 : !s32i, !cir.ptr<!s32i> loc(#loc230)
    cir.br ^bb3 loc(#loc153)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc153)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc231)
  ^bb5:  // pred: ^bb4
    %7 = cir.get_global @globalTrue : !cir.ptr<!s32i> loc(#loc168)
    %8 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc160)
    %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc160)
    cir.brcond %9 ^bb6, ^bb9 loc(#loc232)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc233)
  ^bb7:  // pred: ^bb6
    %10 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc164)
    %11 = cir.unary(inc, %10) : !s32i, !s32i loc(#loc165)
    cir.store %11, %1 : !s32i, !cir.ptr<!s32i> loc(#loc234)
    %12 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc147)
    cir.store %12, %0 : !s32i, !cir.ptr<!s32i> loc(#loc225)
    %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc166)
    cir.call @printIntLine(%13) : (!s32i) -> () loc(#loc167)
    cir.br ^bb8 loc(#loc163)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc159)
  ^bb9:  // 2 preds: ^bb5, ^bb8
    cir.br ^bb10 loc(#loc159)
  ^bb10:  // pred: ^bb9
    cir.return loc(#loc145)
  } loc(#loc224)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s06/CWE190_Integer_Overflow__int_fscanf_postinc_10.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase.h":116:1)
#loc2 = loc("../../../testcasesupport/std_testcase.h":116:12)
#loc3 = loc("/usr/include/stdio.h":463:1)
#loc4 = loc("/usr/include/stdio.h":465:33)
#loc5 = loc("/usr/include/stdio.h":149:1)
#loc6 = loc("/usr/include/stdio.h":149:14)
#loc7 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_10.c":30:23)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc9 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc10 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_10.c":22:1)
#loc11 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_10.c":41:1)
#loc12 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_10.c":37:13)
#loc13 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_10.c":37:26)
#loc14 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_10.c":24:5)
#loc15 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_10.c":24:9)
#loc16 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_10.c":26:12)
#loc17 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_10.c":26:5)
#loc18 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_10.c":27:5)
#loc19 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_10.c":31:5)
#loc20 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_10.c":27:8)
#loc21 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_10.c":28:5)
#loc22 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_10.c":30:9)
#loc23 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_10.c":30:16)
#loc24 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_10.c":32:5)
#loc25 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_10.c":40:5)
#loc26 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_10.c":32:8)
#loc27 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_10.c":33:5)
#loc28 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_10.c":34:9)
#loc29 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_10.c":39:9)
#loc30 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_10.c":36:17)
#loc31 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_10.c":36:13)
#loc32 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_10.c":38:26)
#loc33 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_10.c":38:13)
#loc34 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_10.c":155:1)
#loc35 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_10.c":161:1)
#loc36 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_10.c":157:5)
#loc37 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_10.c":157:14)
#loc38 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_10.c":158:5)
#loc39 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_10.c":158:14)
#loc40 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_10.c":159:5)
#loc41 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_10.c":159:14)
#loc42 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_10.c":160:5)
#loc43 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_10.c":160:14)
#loc44 = loc("../../../testcasesupport/std_testcase.h":117:1)
#loc45 = loc("../../../testcasesupport/std_testcase.h":117:12)
#loc46 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc47 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc48 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_10.c":61:19)
#loc49 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_10.c":74:23)
#loc50 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_10.c":48:1)
#loc51 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_10.c":77:1)
#loc52 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_10.c":69:13)
#loc53 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_10.c":69:26)
#loc54 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_10.c":50:5)
#loc55 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_10.c":50:9)
#loc56 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_10.c":52:12)
#loc57 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_10.c":52:5)
#loc58 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_10.c":53:5)
#loc59 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_10.c":57:5)
#loc60 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_10.c":53:8)
#loc61 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_10.c":54:5)
#loc62 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_10.c":56:9)
#loc63 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_10.c":56:16)
#loc64 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_10.c":56:23)
#loc65 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_10.c":58:5)
#loc66 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_10.c":76:5)
#loc67 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_10.c":58:8)
#loc68 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_10.c":59:5)
#loc69 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_10.c":62:5)
#loc70 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_10.c":64:5)
#loc71 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_10.c":61:9)
#loc72 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_10.c":66:9)
#loc73 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_10.c":75:9)
#loc74 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_10.c":66:13)
#loc75 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_10.c":66:20)
#loc76 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_10.c":67:9)
#loc77 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_10.c":71:9)
#loc78 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_10.c":73:9)
#loc79 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_10.c":68:17)
#loc80 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_10.c":68:13)
#loc81 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_10.c":70:26)
#loc82 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_10.c":70:13)
#loc83 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_10.c":74:13)
#loc84 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_10.c":80:1)
#loc85 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_10.c":104:1)
#loc86 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_10.c":96:13)
#loc87 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_10.c":96:26)
#loc88 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_10.c":82:5)
#loc89 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_10.c":82:9)
#loc90 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_10.c":84:12)
#loc91 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_10.c":84:5)
#loc92 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_10.c":85:5)
#loc93 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_10.c":89:5)
#loc94 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_10.c":85:8)
#loc95 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_10.c":86:5)
#loc96 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_10.c":88:9)
#loc97 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_10.c":88:16)
#loc98 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_10.c":88:23)
#loc99 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_10.c":90:5)
#loc100 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_10.c":103:5)
#loc101 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_10.c":90:8)
#loc102 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_10.c":91:5)
#loc103 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_10.c":93:9)
#loc104 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_10.c":102:9)
#loc105 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_10.c":93:13)
#loc106 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_10.c":93:20)
#loc107 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_10.c":94:9)
#loc108 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_10.c":98:9)
#loc109 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_10.c":100:9)
#loc110 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_10.c":95:17)
#loc111 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_10.c":95:13)
#loc112 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_10.c":97:26)
#loc113 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_10.c":97:13)
#loc114 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_10.c":101:23)
#loc115 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_10.c":101:13)
#loc116 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_10.c":107:1)
#loc117 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_10.c":131:1)
#loc118 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_10.c":127:13)
#loc119 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_10.c":127:26)
#loc120 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_10.c":109:5)
#loc121 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_10.c":109:9)
#loc122 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_10.c":111:12)
#loc123 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_10.c":111:5)
#loc124 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_10.c":112:5)
#loc125 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_10.c":121:5)
#loc126 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_10.c":112:8)
#loc127 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_10.c":113:5)
#loc128 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_10.c":116:5)
#loc129 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_10.c":118:5)
#loc130 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_10.c":115:19)
#loc131 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_10.c":115:9)
#loc132 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_10.c":120:16)
#loc133 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_10.c":120:9)
#loc134 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_10.c":122:5)
#loc135 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_10.c":130:5)
#loc136 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_10.c":122:8)
#loc137 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_10.c":123:5)
#loc138 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_10.c":124:9)
#loc139 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_10.c":129:9)
#loc140 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_10.c":126:17)
#loc141 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_10.c":126:13)
#loc142 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_10.c":128:26)
#loc143 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_10.c":128:13)
#loc144 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_10.c":134:1)
#loc145 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_10.c":153:1)
#loc146 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_10.c":149:13)
#loc147 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_10.c":149:26)
#loc148 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_10.c":136:5)
#loc149 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_10.c":136:9)
#loc150 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_10.c":138:12)
#loc151 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_10.c":138:5)
#loc152 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_10.c":139:5)
#loc153 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_10.c":143:5)
#loc154 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_10.c":139:8)
#loc155 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_10.c":140:5)
#loc156 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_10.c":142:16)
#loc157 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_10.c":142:9)
#loc158 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_10.c":144:5)
#loc159 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_10.c":152:5)
#loc160 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_10.c":144:8)
#loc161 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_10.c":145:5)
#loc162 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_10.c":146:9)
#loc163 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_10.c":151:9)
#loc164 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_10.c":148:17)
#loc165 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_10.c":148:13)
#loc166 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_10.c":150:26)
#loc167 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_10.c":150:13)
#loc168 = loc(fused[#loc1, #loc2])
#loc169 = loc(fused[#loc3, #loc4])
#loc170 = loc(fused[#loc5, #loc6])
#loc171 = loc(fused[#loc8, #loc9])
#loc172 = loc(fused[#loc10, #loc11])
#loc173 = loc(fused[#loc12, #loc13])
#loc174 = loc(fused[#loc14, #loc15])
#loc175 = loc(fused[#loc17, #loc16])
#loc176 = loc(fused[#loc18, #loc19])
#loc177 = loc(fused[#loc21, #loc19])
#loc178 = loc(fused[#loc24, #loc25])
#loc179 = loc(fused[#loc27, #loc25])
#loc180 = loc(fused[#loc28, #loc29])
#loc181 = loc(fused[#loc31, #loc30])
#loc182 = loc(fused[#loc34, #loc35])
#loc183 = loc(fused[#loc36, #loc37])
#loc184 = loc(fused[#loc38, #loc39])
#loc185 = loc(fused[#loc40, #loc41])
#loc186 = loc(fused[#loc42, #loc43])
#loc187 = loc(fused[#loc44, #loc45])
#loc188 = loc(fused[#loc46, #loc47])
#loc189 = loc(fused[#loc50, #loc51])
#loc190 = loc(fused[#loc52, #loc53])
#loc191 = loc(fused[#loc54, #loc55])
#loc192 = loc(fused[#loc57, #loc56])
#loc193 = loc(fused[#loc58, #loc59])
#loc194 = loc(fused[#loc61, #loc59])
#loc195 = loc(fused[#loc65, #loc66])
#loc196 = loc(fused[#loc68, #loc69, #loc70, #loc66])
#loc197 = loc(fused[#loc72, #loc73])
#loc198 = loc(fused[#loc74, #loc75])
#loc199 = loc(fused[#loc76, #loc77, #loc78, #loc73])
#loc200 = loc(fused[#loc80, #loc79])
#loc201 = loc(fused[#loc84, #loc85])
#loc202 = loc(fused[#loc86, #loc87])
#loc203 = loc(fused[#loc88, #loc89])
#loc204 = loc(fused[#loc91, #loc90])
#loc205 = loc(fused[#loc92, #loc93])
#loc206 = loc(fused[#loc95, #loc93])
#loc207 = loc(fused[#loc99, #loc100])
#loc208 = loc(fused[#loc102, #loc100])
#loc209 = loc(fused[#loc103, #loc104])
#loc210 = loc(fused[#loc105, #loc106])
#loc211 = loc(fused[#loc107, #loc108, #loc109, #loc104])
#loc212 = loc(fused[#loc111, #loc110])
#loc213 = loc(fused[#loc116, #loc117])
#loc214 = loc(fused[#loc118, #loc119])
#loc215 = loc(fused[#loc120, #loc121])
#loc216 = loc(fused[#loc123, #loc122])
#loc217 = loc(fused[#loc124, #loc125])
#loc218 = loc(fused[#loc127, #loc128, #loc129, #loc125])
#loc219 = loc(fused[#loc133, #loc132])
#loc220 = loc(fused[#loc134, #loc135])
#loc221 = loc(fused[#loc137, #loc135])
#loc222 = loc(fused[#loc138, #loc139])
#loc223 = loc(fused[#loc141, #loc140])
#loc224 = loc(fused[#loc144, #loc145])
#loc225 = loc(fused[#loc146, #loc147])
#loc226 = loc(fused[#loc148, #loc149])
#loc227 = loc(fused[#loc151, #loc150])
#loc228 = loc(fused[#loc152, #loc153])
#loc229 = loc(fused[#loc155, #loc153])
#loc230 = loc(fused[#loc157, #loc156])
#loc231 = loc(fused[#loc158, #loc159])
#loc232 = loc(fused[#loc161, #loc159])
#loc233 = loc(fused[#loc162, #loc163])
#loc234 = loc(fused[#loc165, #loc164])
