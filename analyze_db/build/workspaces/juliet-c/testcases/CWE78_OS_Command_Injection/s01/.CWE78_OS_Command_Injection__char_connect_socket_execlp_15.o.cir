!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#true = #cir.bool<true> : !cir.bool
!ty_in_addr = !cir.record<struct "in_addr" {!u32i} #cir.record.decl.ast>
!ty_sockaddr = !cir.record<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.record<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/workspaces/juliet-c/testcases/CWE78_OS_Command_Injection/s01/CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr = dense<64> : vector<4xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e">} {
  cir.global "private" constant cir_private @__const.goodG2B2.dataBuffer = #cir.const_array<"ls " : !cir.array<!s8i x 3>, trailing_zeros> : !cir.array<!s8i x 100> loc(#loc230)
  cir.global "private" constant cir_private @__const.goodG2B1.dataBuffer = #cir.const_array<"ls " : !cir.array<!s8i x 3>, trailing_zeros> : !cir.array<!s8i x 100> loc(#loc231)
  cir.global "private" constant cir_private @__const.CWE78_OS_Command_Injection__char_connect_socket_execlp_15_bad.dataBuffer = #cir.const_array<"ls " : !cir.array<!s8i x 3>, trailing_zeros> : !cir.array<!s8i x 100> loc(#loc232)
  cir.func private @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc233)
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc234)
  cir.func private @inet_addr(!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc235)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"127.0.0.1\00" : !cir.array<!s8i x 10>> : !cir.array<!s8i x 10> {alignment = 1 : i64} loc(#loc13)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc236)
  cir.func private @connect(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc237)
  cir.func private @recv(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc238)
  cir.func private @strchr(!cir.ptr<!s8i>, !s32i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc239)
  cir.func private @close(!s32i) -> !s32i loc(#loc240)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc241)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc26)
  cir.func private @execlp(!cir.ptr<!s8i>, !cir.ptr<!s8i>, ...) -> !s32i extra(#fn_attr) loc(#loc242)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"sh\00" : !cir.array<!s8i x 3>> : !cir.array<!s8i x 3> {alignment = 1 : i64} loc(#loc29)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"-c\00" : !cir.array<!s8i x 3>> : !cir.array<!s8i x 3> {alignment = 1 : i64} loc(#loc30)
  cir.func no_proto @CWE78_OS_Command_Injection__char_connect_socket_execlp_15_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc244)
    %1 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["dataBuffer"] {alignment = 16 : i64} loc(#loc232)
    %2 = cir.get_global @__const.CWE78_OS_Command_Injection__char_connect_socket_execlp_15_bad.dataBuffer : !cir.ptr<!cir.array<!s8i x 100>> loc(#loc232)
    cir.copy %2 to %1 : !cir.ptr<!cir.array<!s8i x 100>> loc(#loc232)
    %3 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc35)
    cir.store %3, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc245)
    cir.scope {
      %13 = cir.const #cir.int<6> : !s32i loc(#loc39)
      cir.switch (%13 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          cir.scope {
            %14 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc248)
            %15 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc249)
            %16 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["replace"] {alignment = 8 : i64} loc(#loc250)
            %17 = cir.alloca !s32i, !cir.ptr<!s32i>, ["connectSocket", init] {alignment = 4 : i64} loc(#loc251)
            %18 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc252)
            %19 = cir.const #cir.int<1> : !s32i loc(#loc50)
            %20 = cir.unary(minus, %19) nsw : !s32i, !s32i loc(#loc50)
            cir.store %20, %17 : !s32i, !cir.ptr<!s32i> loc(#loc251)
            %21 = cir.get_global @strlen : !cir.ptr<!cir.func<(!cir.ptr<!s8i>) -> !u64i>> loc(#loc53)
            %22 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc54)
            %23 = cir.call @strlen(%22) : (!cir.ptr<!s8i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc53)
            cir.store %23, %18 : !u64i, !cir.ptr<!u64i> loc(#loc252)
            cir.scope {
              cir.do {
                cir.scope {
                  %24 = cir.const #cir.int<2> : !s32i loc(#loc59)
                  %25 = cir.const #cir.int<1> : !s32i loc(#loc60)
                  %26 = cir.const #cir.int<6> : !s32i loc(#loc61)
                  %27 = cir.call @socket(%24, %25, %26) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc62)
                  cir.store %27, %17 : !s32i, !cir.ptr<!s32i> loc(#loc255)
                  cir.scope {
                    %78 = cir.load %17 : !cir.ptr<!s32i>, !s32i loc(#loc67)
                    %79 = cir.const #cir.int<1> : !s32i loc(#loc68)
                    %80 = cir.unary(minus, %79) nsw : !s32i, !s32i loc(#loc68)
                    %81 = cir.cmp(eq, %78, %80) : !s32i, !cir.bool loc(#loc257)
                    cir.if %81 {
                      cir.break loc(#loc70)
                    } loc(#loc258)
                  } loc(#loc256)
                  %28 = cir.cast(bitcast, %15 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc259)
                  %29 = cir.const #cir.int<0> : !s32i loc(#loc73)
                  %30 = cir.const #cir.int<16> : !u64i loc(#loc260)
                  cir.libc.memset %30 bytes from %28 set to %29 : !cir.ptr<!void>, !s32i, !u64i loc(#loc261)
                  %31 = cir.const #cir.int<2> : !s32i loc(#loc78)
                  %32 = cir.cast(integral, %31 : !s32i), !u16i loc(#loc78)
                  %33 = cir.get_member %15[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc79)
                  cir.store %32, %33 : !u16i, !cir.ptr<!u16i> loc(#loc262)
                  %34 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 10>> loc(#loc13)
                  %35 = cir.cast(array_to_ptrdecay, %34 : !cir.ptr<!cir.array<!s8i x 10>>), !cir.ptr<!s8i> loc(#loc13)
                  %36 = cir.call @inet_addr(%35) : (!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc81)
                  %37 = cir.get_member %15[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc82)
                  %38 = cir.get_member %37[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc83)
                  cir.store %36, %38 : !u32i, !cir.ptr<!u32i> loc(#loc263)
                  %39 = cir.const #cir.int<27015> : !s32i loc(#loc86)
                  %40 = cir.cast(integral, %39 : !s32i), !u16i loc(#loc86)
                  %41 = cir.call @htons(%40) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc87)
                  %42 = cir.get_member %15[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc88)
                  cir.store %41, %42 : !u16i, !cir.ptr<!u16i> loc(#loc264)
                  cir.scope {
                    %78 = cir.load %17 : !cir.ptr<!s32i>, !s32i loc(#loc93)
                    %79 = cir.cast(bitcast, %15 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc266)
                    %80 = cir.const #cir.int<16> : !u64i loc(#loc267)
                    %81 = cir.cast(integral, %80 : !u64i), !u32i loc(#loc267)
                    %82 = cir.call @connect(%78, %79, %81) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc98)
                    %83 = cir.const #cir.int<1> : !s32i loc(#loc99)
                    %84 = cir.unary(minus, %83) nsw : !s32i, !s32i loc(#loc99)
                    %85 = cir.cmp(eq, %82, %84) : !s32i, !cir.bool loc(#loc268)
                    cir.if %85 {
                      cir.break loc(#loc101)
                    } loc(#loc269)
                  } loc(#loc265)
                  %43 = cir.load %17 : !cir.ptr<!s32i>, !s32i loc(#loc102)
                  %44 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc103)
                  %45 = cir.load %18 : !cir.ptr<!u64i>, !u64i loc(#loc104)
                  %46 = cir.ptr_stride(%44 : !cir.ptr<!s8i>, %45 : !u64i), !cir.ptr<!s8i> loc(#loc105)
                  %47 = cir.cast(bitcast, %46 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc270)
                  %48 = cir.const #cir.int<1> : !u64i loc(#loc271)
                  %49 = cir.const #cir.int<100> : !s32i loc(#loc110)
                  %50 = cir.cast(integral, %49 : !s32i), !u64i loc(#loc110)
                  %51 = cir.load %18 : !cir.ptr<!u64i>, !u64i loc(#loc111)
                  %52 = cir.binop(sub, %50, %51) : !u64i loc(#loc272)
                  %53 = cir.const #cir.int<1> : !s32i loc(#loc112)
                  %54 = cir.cast(integral, %53 : !s32i), !u64i loc(#loc112)
                  %55 = cir.binop(sub, %52, %54) : !u64i loc(#loc273)
                  %56 = cir.binop(mul, %48, %55) : !u64i loc(#loc274)
                  %57 = cir.const #cir.int<0> : !s32i loc(#loc114)
                  %58 = cir.call @recv(%43, %47, %56, %57) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc115)
                  %59 = cir.cast(integral, %58 : !s64i), !s32i loc(#loc115)
                  cir.store %59, %14 : !s32i, !cir.ptr<!s32i> loc(#loc275)
                  cir.scope {
                    %78 = cir.load %14 : !cir.ptr<!s32i>, !s32i loc(#loc120)
                    %79 = cir.const #cir.int<1> : !s32i loc(#loc121)
                    %80 = cir.unary(minus, %79) nsw : !s32i, !s32i loc(#loc121)
                    %81 = cir.cmp(eq, %78, %80) : !s32i, !cir.bool loc(#loc277)
                    %82 = cir.ternary(%81, true {
                      %83 = cir.const #true loc(#loc122)
                      cir.yield %83 : !cir.bool loc(#loc122)
                    }, false {
                      %83 = cir.load %14 : !cir.ptr<!s32i>, !s32i loc(#loc123)
                      %84 = cir.const #cir.int<0> : !s32i loc(#loc124)
                      %85 = cir.cmp(eq, %83, %84) : !s32i, !cir.bool loc(#loc278)
                      %86 = cir.ternary(%85, true {
                        %87 = cir.const #true loc(#loc122)
                        cir.yield %87 : !cir.bool loc(#loc122)
                      }, false {
                        %87 = cir.const #false loc(#loc122)
                        cir.yield %87 : !cir.bool loc(#loc122)
                      }) : (!cir.bool) -> !cir.bool loc(#loc122)
                      cir.yield %86 : !cir.bool loc(#loc122)
                    }) : (!cir.bool) -> !cir.bool loc(#loc122)
                    cir.if %82 {
                      cir.break loc(#loc126)
                    } loc(#loc279)
                  } loc(#loc276)
                  %60 = cir.const #cir.int<0> : !s32i loc(#loc127)
                  %61 = cir.cast(integral, %60 : !s32i), !s8i loc(#loc127)
                  %62 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc128)
                  %63 = cir.load %18 : !cir.ptr<!u64i>, !u64i loc(#loc129)
                  %64 = cir.load %14 : !cir.ptr<!s32i>, !s32i loc(#loc130)
                  %65 = cir.cast(integral, %64 : !s32i), !u64i loc(#loc130)
                  %66 = cir.const #cir.int<1> : !u64i loc(#loc280)
                  %67 = cir.binop(div, %65, %66) : !u64i loc(#loc281)
                  %68 = cir.binop(add, %63, %67) : !u64i loc(#loc282)
                  %69 = cir.ptr_stride(%62 : !cir.ptr<!s8i>, %68 : !u64i), !cir.ptr<!s8i> loc(#loc133)
                  cir.store %61, %69 : !s8i, !cir.ptr<!s8i> loc(#loc283)
                  %70 = cir.get_global @strchr : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !s32i) -> !cir.ptr<!s8i>>> loc(#loc134)
                  %71 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc135)
                  %72 = cir.const #cir.int<13> : !s32i loc(#loc136)
                  %73 = cir.call @strchr(%71, %72) : (!cir.ptr<!s8i>, !s32i) -> !cir.ptr<!s8i> side_effect(pure) extra(#fn_attr) loc(#loc134)
                  cir.store %73, %16 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc284)
                  cir.scope {
                    %78 = cir.load %16 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc141)
                    %79 = cir.cast(ptr_to_bool, %78 : !cir.ptr<!s8i>), !cir.bool loc(#loc141)
                    cir.if %79 {
                      %80 = cir.const #cir.int<0> : !s32i loc(#loc143)
                      %81 = cir.cast(integral, %80 : !s32i), !s8i loc(#loc143)
                      %82 = cir.load deref %16 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc144)
                      cir.store %81, %82 : !s8i, !cir.ptr<!s8i> loc(#loc287)
                    } loc(#loc286)
                  } loc(#loc285)
                  %74 = cir.get_global @strchr : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !s32i) -> !cir.ptr<!s8i>>> loc(#loc146)
                  %75 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc147)
                  %76 = cir.const #cir.int<10> : !s32i loc(#loc148)
                  %77 = cir.call @strchr(%75, %76) : (!cir.ptr<!s8i>, !s32i) -> !cir.ptr<!s8i> side_effect(pure) extra(#fn_attr) loc(#loc146)
                  cir.store %77, %16 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc288)
                  cir.scope {
                    %78 = cir.load %16 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc153)
                    %79 = cir.cast(ptr_to_bool, %78 : !cir.ptr<!s8i>), !cir.bool loc(#loc153)
                    cir.if %79 {
                      %80 = cir.const #cir.int<0> : !s32i loc(#loc155)
                      %81 = cir.cast(integral, %80 : !s32i), !s8i loc(#loc155)
                      %82 = cir.load deref %16 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc156)
                      cir.store %81, %82 : !s8i, !cir.ptr<!s8i> loc(#loc291)
                    } loc(#loc290)
                  } loc(#loc289)
                } loc(#loc254)
                cir.yield loc(#loc56)
              } while {
                %24 = cir.const #cir.int<0> : !s32i loc(#loc158)
                %25 = cir.cast(int_to_bool, %24 : !s32i), !cir.bool loc(#loc158)
                cir.condition(%25) loc(#loc158)
              } loc(#loc253)
            } loc(#loc253)
            cir.scope {
              %24 = cir.load %17 : !cir.ptr<!s32i>, !s32i loc(#loc161)
              %25 = cir.const #cir.int<1> : !s32i loc(#loc162)
              %26 = cir.unary(minus, %25) nsw : !s32i, !s32i loc(#loc162)
              %27 = cir.cmp(ne, %24, %26) : !s32i, !cir.bool loc(#loc293)
              cir.if %27 {
                %28 = cir.load %17 : !cir.ptr<!s32i>, !s32i loc(#loc164)
                %29 = cir.call @close(%28) : (!s32i) -> !s32i loc(#loc165)
              } loc(#loc294)
            } loc(#loc292)
          } loc(#loc247)
          cir.break loc(#loc166)
        } loc(#loc40)
        cir.case(default, []) {
          %14 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc26)
          %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc26)
          cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc168)
          cir.break loc(#loc169)
        } loc(#loc167)
        cir.yield loc(#loc37)
      } loc(#loc37)
    } loc(#loc246)
    %4 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc29)
    %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc29)
    %6 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc170)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc170)
    %8 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc30)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc30)
    %10 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc171)
    %11 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc172)
    %12 = cir.call @execlp(%5, %7, %9, %10, %11) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!void>) -> !s32i extra(#fn_attr) loc(#loc173)
    cir.return loc(#loc32)
  } loc(#loc243)
  cir.func no_proto @CWE78_OS_Command_Injection__char_connect_socket_execlp_15_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<()>> loc(#loc296)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc176)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<()>> loc(#loc297)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc178)
    cir.return loc(#loc175)
  } loc(#loc295)
  cir.func private @strcat(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc298)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"*.*\00" : !cir.array<!s8i x 4>> : !cir.array<!s8i x 4> {alignment = 1 : i64} loc(#loc182)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc300)
    %1 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["dataBuffer"] {alignment = 16 : i64} loc(#loc231)
    %2 = cir.get_global @__const.goodG2B1.dataBuffer : !cir.ptr<!cir.array<!s8i x 100>> loc(#loc231)
    cir.copy %2 to %1 : !cir.ptr<!cir.array<!s8i x 100>> loc(#loc231)
    %3 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc187)
    cir.store %3, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc301)
    cir.scope {
      %13 = cir.const #cir.int<5> : !s32i loc(#loc191)
      cir.switch (%13 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %14 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc193)
          %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc193)
          cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc194)
          cir.break loc(#loc195)
        } loc(#loc192)
        cir.case(default, []) {
          %14 = cir.get_global @strcat : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i>>> loc(#loc197)
          %15 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc198)
          %16 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc182)
          %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc182)
          %18 = cir.call @strcat(%15, %17) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc197)
          cir.break loc(#loc199)
        } loc(#loc196)
        cir.yield loc(#loc189)
      } loc(#loc189)
    } loc(#loc302)
    %4 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc200)
    %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc200)
    %6 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc201)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc201)
    %8 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc202)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc202)
    %10 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc203)
    %11 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc204)
    %12 = cir.call @execlp(%5, %7, %9, %10, %11) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!void>) -> !s32i extra(#fn_attr) loc(#loc205)
    cir.return loc(#loc184)
  } loc(#loc299)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc304)
    %1 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["dataBuffer"] {alignment = 16 : i64} loc(#loc230)
    %2 = cir.get_global @__const.goodG2B2.dataBuffer : !cir.ptr<!cir.array<!s8i x 100>> loc(#loc230)
    cir.copy %2 to %1 : !cir.ptr<!cir.array<!s8i x 100>> loc(#loc230)
    %3 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc210)
    cir.store %3, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc305)
    cir.scope {
      %13 = cir.const #cir.int<6> : !s32i loc(#loc214)
      cir.switch (%13 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %14 = cir.get_global @strcat : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i>>> loc(#loc216)
          %15 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc217)
          %16 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc218)
          %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc218)
          %18 = cir.call @strcat(%15, %17) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc216)
          cir.break loc(#loc219)
        } loc(#loc215)
        cir.case(default, []) {
          %14 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc221)
          %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc221)
          cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc222)
          cir.break loc(#loc223)
        } loc(#loc220)
        cir.yield loc(#loc212)
      } loc(#loc212)
    } loc(#loc306)
    %4 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc224)
    %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc224)
    %6 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc225)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc225)
    %8 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc226)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc226)
    %10 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc227)
    %11 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc228)
    %12 = cir.call @execlp(%5, %7, %9, %10, %11) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!void>) -> !s32i extra(#fn_attr) loc(#loc229)
    cir.return loc(#loc207)
  } loc(#loc303)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE78_OS_Command_Injection/s01/CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":0:0)
#loc1 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":183:5)
#loc2 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":183:28)
#loc3 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":160:5)
#loc4 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":160:28)
#loc5 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":68:5)
#loc6 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":68:28)
#loc7 = loc("/usr/include/string.h":407:1)
#loc8 = loc("/usr/include/string.h":408:33)
#loc9 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:1)
#loc10 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:62)
#loc11 = loc("/usr/include/arpa/inet.h":34:1)
#loc12 = loc("/usr/include/arpa/inet.h":34:47)
#loc13 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":100:49)
#loc14 = loc("/usr/include/netinet/in.h":402:1)
#loc15 = loc("/usr/include/netinet/in.h":403:40)
#loc16 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":126:1)
#loc17 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":126:75)
#loc18 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":145:1)
#loc19 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":145:68)
#loc20 = loc("/usr/include/string.h":246:1)
#loc21 = loc("/usr/include/string.h":247:33)
#loc22 = loc("/usr/include/unistd.h":358:1)
#loc23 = loc("/usr/include/unistd.h":358:27)
#loc24 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc25 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc26 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":143:19)
#loc27 = loc("/usr/include/unistd.h":605:1)
#loc28 = loc("/usr/include/unistd.h":606:14)
#loc29 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":149:12)
#loc30 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":149:38)
#loc31 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":65:1)
#loc32 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":150:1)
#loc33 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":67:5)
#loc34 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":67:12)
#loc35 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":69:12)
#loc36 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":69:5)
#loc37 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":70:5)
#loc38 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":145:5)
#loc39 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":70:12)
#loc40 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":72:5)
#loc41 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":73:5)
#loc42 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":139:5)
#loc43 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":78:9)
#loc44 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":78:13)
#loc45 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":79:9)
#loc46 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":79:28)
#loc47 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":80:9)
#loc48 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":80:15)
#loc49 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":81:9)
#loc50 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":81:32)
#loc51 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":82:9)
#loc52 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":82:37)
#loc53 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":82:26)
#loc54 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":82:33)
#loc55 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":83:9)
#loc56 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":128:17)
#loc57 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":84:9)
#loc58 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":127:9)
#loc59 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":93:36)
#loc60 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":93:45)
#loc61 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":93:58)
#loc62 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":93:29)
#loc63 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":93:13)
#loc64 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":93:69)
#loc65 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":94:13)
#loc66 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":97:13)
#loc67 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":94:17)
#loc68 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":94:34)
#loc69 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":95:13)
#loc70 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":96:17)
#loc71 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":98:20)
#loc72 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":98:21)
#loc73 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":98:30)
#loc74 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":98:33)
#loc75 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":98:47)
#loc76 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":98:13)
#loc77 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":98:48)
#loc78 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":99:34)
#loc79 = loc("/usr/include/netinet/in.h":249:5)
#loc80 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":99:13)
#loc81 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":100:39)
#loc82 = loc("/usr/include/netinet/in.h":251:20)
#loc83 = loc("/usr/include/netinet/in.h":33:15)
#loc84 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":100:13)
#loc85 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":100:59)
#loc86 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":101:38)
#loc87 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":101:32)
#loc88 = loc("/usr/include/netinet/in.h":250:15)
#loc89 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":101:13)
#loc90 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":101:46)
#loc91 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":102:13)
#loc92 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":105:13)
#loc93 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":102:25)
#loc94 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":102:58)
#loc95 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":102:59)
#loc96 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":102:68)
#loc97 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":102:82)
#loc98 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":102:17)
#loc99 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":102:88)
#loc100 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":103:13)
#loc101 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":104:17)
#loc102 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":109:31)
#loc103 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":109:55)
#loc104 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":109:62)
#loc105 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":109:60)
#loc106 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":109:46)
#loc107 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":109:69)
#loc108 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":109:72)
#loc109 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":109:83)
#loc110 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":109:88)
#loc111 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":109:94)
#loc112 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":109:104)
#loc113 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":109:105)
#loc114 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":109:108)
#loc115 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":109:26)
#loc116 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":109:13)
#loc117 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":109:109)
#loc118 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":110:13)
#loc119 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":113:13)
#loc120 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":110:17)
#loc121 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":110:31)
#loc122 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":110:44)
#loc123 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":110:47)
#loc124 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":110:61)
#loc125 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":111:13)
#loc126 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":112:17)
#loc127 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":115:57)
#loc128 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":115:13)
#loc129 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":115:18)
#loc130 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":115:28)
#loc131 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":115:41)
#loc132 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":115:52)
#loc133 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":115:53)
#loc134 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":117:23)
#loc135 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":117:30)
#loc136 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":117:36)
#loc137 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":117:13)
#loc138 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":117:40)
#loc139 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":118:13)
#loc140 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":121:13)
#loc141 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":118:17)
#loc142 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":119:13)
#loc143 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":120:28)
#loc144 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":120:18)
#loc145 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":120:17)
#loc146 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":122:23)
#loc147 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":122:30)
#loc148 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":122:36)
#loc149 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":122:13)
#loc150 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":122:40)
#loc151 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":123:13)
#loc152 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":126:13)
#loc153 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":123:17)
#loc154 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":124:13)
#loc155 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":125:28)
#loc156 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":125:18)
#loc157 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":125:17)
#loc158 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":128:16)
#loc159 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":129:9)
#loc160 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":132:9)
#loc161 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":129:13)
#loc162 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":129:30)
#loc163 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":130:9)
#loc164 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":131:26)
#loc165 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":131:13)
#loc166 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":140:5)
#loc167 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":141:5)
#loc168 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":143:9)
#loc169 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":144:9)
#loc170 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":149:25)
#loc171 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":149:52)
#loc172 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":149:66)
#loc173 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":149:5)
#loc174 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":202:1)
#loc175 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":206:1)
#loc176 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":204:5)
#loc177 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":204:14)
#loc178 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":205:5)
#loc179 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":205:14)
#loc180 = loc("/usr/include/string.h":149:1)
#loc181 = loc("/usr/include/string.h":150:14)
#loc182 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":170:22)
#loc183 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":157:1)
#loc184 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":177:1)
#loc185 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":159:5)
#loc186 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":159:12)
#loc187 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":161:12)
#loc188 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":161:5)
#loc189 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":162:5)
#loc190 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":172:5)
#loc191 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":162:12)
#loc192 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":164:5)
#loc193 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":166:19)
#loc194 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":166:9)
#loc195 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":167:9)
#loc196 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":168:5)
#loc197 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":170:9)
#loc198 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":170:16)
#loc199 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":171:9)
#loc200 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":176:12)
#loc201 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":176:25)
#loc202 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":176:38)
#loc203 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":176:52)
#loc204 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":176:66)
#loc205 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":176:5)
#loc206 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":180:1)
#loc207 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":200:1)
#loc208 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":182:5)
#loc209 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":182:12)
#loc210 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":184:12)
#loc211 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":184:5)
#loc212 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":185:5)
#loc213 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":195:5)
#loc214 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":185:12)
#loc215 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":187:5)
#loc216 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":189:9)
#loc217 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":189:16)
#loc218 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":189:22)
#loc219 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":190:9)
#loc220 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":191:5)
#loc221 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":193:19)
#loc222 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":193:9)
#loc223 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":194:9)
#loc224 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":199:12)
#loc225 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":199:25)
#loc226 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":199:38)
#loc227 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":199:52)
#loc228 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":199:66)
#loc229 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_15.c":199:5)
#loc230 = loc(fused[#loc1, #loc2])
#loc231 = loc(fused[#loc3, #loc4])
#loc232 = loc(fused[#loc5, #loc6])
#loc233 = loc(fused[#loc7, #loc8])
#loc234 = loc(fused[#loc9, #loc10])
#loc235 = loc(fused[#loc11, #loc12])
#loc236 = loc(fused[#loc14, #loc15])
#loc237 = loc(fused[#loc16, #loc17])
#loc238 = loc(fused[#loc18, #loc19])
#loc239 = loc(fused[#loc20, #loc21])
#loc240 = loc(fused[#loc22, #loc23])
#loc241 = loc(fused[#loc24, #loc25])
#loc242 = loc(fused[#loc27, #loc28])
#loc243 = loc(fused[#loc31, #loc32])
#loc244 = loc(fused[#loc33, #loc34])
#loc245 = loc(fused[#loc36, #loc35])
#loc246 = loc(fused[#loc37, #loc38])
#loc247 = loc(fused[#loc41, #loc42])
#loc248 = loc(fused[#loc43, #loc44])
#loc249 = loc(fused[#loc45, #loc46])
#loc250 = loc(fused[#loc47, #loc48])
#loc251 = loc(fused[#loc49, #loc50])
#loc252 = loc(fused[#loc51, #loc52])
#loc253 = loc(fused[#loc55, #loc56])
#loc254 = loc(fused[#loc57, #loc58])
#loc255 = loc(fused[#loc63, #loc64])
#loc256 = loc(fused[#loc65, #loc66])
#loc257 = loc(fused[#loc67, #loc68])
#loc258 = loc(fused[#loc69, #loc66])
#loc259 = loc(fused[#loc71, #loc72])
#loc260 = loc(fused[#loc74, #loc75])
#loc261 = loc(fused[#loc76, #loc77])
#loc262 = loc(fused[#loc80, #loc78])
#loc263 = loc(fused[#loc84, #loc85])
#loc264 = loc(fused[#loc89, #loc90])
#loc265 = loc(fused[#loc91, #loc92])
#loc266 = loc(fused[#loc94, #loc95])
#loc267 = loc(fused[#loc96, #loc97])
#loc268 = loc(fused[#loc98, #loc99])
#loc269 = loc(fused[#loc100, #loc92])
#loc270 = loc(fused[#loc106, #loc107])
#loc271 = loc(fused[#loc108, #loc109])
#loc272 = loc(fused[#loc110, #loc111])
#loc273 = loc(fused[#loc110, #loc112])
#loc274 = loc(fused[#loc108, #loc113])
#loc275 = loc(fused[#loc116, #loc117])
#loc276 = loc(fused[#loc118, #loc119])
#loc277 = loc(fused[#loc120, #loc121])
#loc278 = loc(fused[#loc123, #loc124])
#loc279 = loc(fused[#loc125, #loc119])
#loc280 = loc(fused[#loc131, #loc132])
#loc281 = loc(fused[#loc130, #loc132])
#loc282 = loc(fused[#loc129, #loc132])
#loc283 = loc(fused[#loc128, #loc127])
#loc284 = loc(fused[#loc137, #loc138])
#loc285 = loc(fused[#loc139, #loc140])
#loc286 = loc(fused[#loc142, #loc140])
#loc287 = loc(fused[#loc145, #loc143])
#loc288 = loc(fused[#loc149, #loc150])
#loc289 = loc(fused[#loc151, #loc152])
#loc290 = loc(fused[#loc154, #loc152])
#loc291 = loc(fused[#loc157, #loc155])
#loc292 = loc(fused[#loc159, #loc160])
#loc293 = loc(fused[#loc161, #loc162])
#loc294 = loc(fused[#loc163, #loc160])
#loc295 = loc(fused[#loc174, #loc175])
#loc296 = loc(fused[#loc176, #loc177])
#loc297 = loc(fused[#loc178, #loc179])
#loc298 = loc(fused[#loc180, #loc181])
#loc299 = loc(fused[#loc183, #loc184])
#loc300 = loc(fused[#loc185, #loc186])
#loc301 = loc(fused[#loc188, #loc187])
#loc302 = loc(fused[#loc189, #loc190])
#loc303 = loc(fused[#loc206, #loc207])
#loc304 = loc(fused[#loc208, #loc209])
#loc305 = loc(fused[#loc211, #loc210])
#loc306 = loc(fused[#loc212, #loc213])
