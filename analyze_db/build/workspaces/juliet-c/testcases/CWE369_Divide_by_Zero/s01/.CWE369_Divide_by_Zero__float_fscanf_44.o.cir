!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.record<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.record<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.record<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc5 = loc("CWE369_Divide_by_Zero__float_fscanf_44.c":24:21)
#loc6 = loc("CWE369_Divide_by_Zero__float_fscanf_44.c":24:27)
#loc41 = loc("CWE369_Divide_by_Zero__float_fscanf_44.c":51:25)
#loc42 = loc("CWE369_Divide_by_Zero__float_fscanf_44.c":51:31)
#loc69 = loc("CWE369_Divide_by_Zero__float_fscanf_44.c":72:25)
#loc70 = loc("CWE369_Divide_by_Zero__float_fscanf_44.c":72:31)
#loc102 = loc(fused[#loc5, #loc6])
#loc116 = loc(fused[#loc41, #loc42])
#loc127 = loc(fused[#loc69, #loc70])
!ty__IO_FILE = !cir.record<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/workspaces/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__float_fscanf_44.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, "dlti.mangling_mode" = "e", "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @printIntLine(!s32i) loc(#loc100)
  cir.func internal private @badSink(%arg0: !cir.float loc(fused[#loc5, #loc6])) extra(#fn_attr) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data", init] {alignment = 4 : i64} loc(#loc102)
    cir.store %arg0, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc7)
    cir.scope {
      %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc104)
      %2 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc12)
      %3 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc13)
      %4 = cir.cast(floating, %3 : !cir.float), !cir.double loc(#loc13)
      %5 = cir.binop(div, %2, %4) : !cir.double loc(#loc105)
      %6 = cir.cast(float_to_int, %5 : !cir.double), !s32i loc(#loc105)
      cir.store %6, %1 : !s32i, !cir.ptr<!s32i> loc(#loc104)
      %7 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc14)
      cir.call @printIntLine(%7) : (!s32i) -> () loc(#loc15)
    } loc(#loc103)
    cir.return loc(#loc4)
  } loc(#loc101)
  cir.func private @__isoc99_fscanf(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i loc(#loc106)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc107)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"%f\00" : !cir.array<!s8i x 3>> : !cir.array<!s8i x 3> {alignment = 1 : i64} loc(#loc20)
  cir.func no_proto @CWE369_Divide_by_Zero__float_fscanf_44_bad() extra(#fn_attr) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc109)
    %1 = cir.alloca !cir.ptr<!cir.func<(!cir.float)>>, !cir.ptr<!cir.ptr<!cir.func<(!cir.float)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc110)
    %2 = cir.get_global @badSink : !cir.ptr<!cir.func<(!cir.float)>> loc(#loc26)
    cir.store %2, %1 : !cir.ptr<!cir.func<(!cir.float)>>, !cir.ptr<!cir.ptr<!cir.func<(!cir.float)>>> loc(#loc110)
    %3 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc27)
    cir.store %3, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc111)
    %4 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc29)
    %5 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc107)
    %6 = cir.load %5 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc30)
    %7 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc20)
    %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc20)
    %9 = cir.call @__isoc99_fscanf(%6, %8, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!cir.float>) -> !s32i loc(#loc29)
    %10 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<(!cir.float)>>>, !cir.ptr<!cir.func<(!cir.float)>> loc(#loc31)
    %11 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc32)
    cir.call %10(%11) : (!cir.ptr<!cir.func<(!cir.float)>>, !cir.float) -> () loc(#loc31)
    cir.return loc(#loc22)
  } loc(#loc108)
  cir.func no_proto @CWE369_Divide_by_Zero__float_fscanf_44_good() extra(#fn_attr) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc113)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc35)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc114)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc37)
    cir.return loc(#loc34)
  } loc(#loc112)
  cir.func internal private @goodG2BSink(%arg0: !cir.float loc(fused[#loc41, #loc42])) extra(#fn_attr) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data", init] {alignment = 4 : i64} loc(#loc116)
    cir.store %arg0, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc43)
    cir.scope {
      %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc118)
      %2 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc48)
      %3 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc49)
      %4 = cir.cast(floating, %3 : !cir.float), !cir.double loc(#loc49)
      %5 = cir.binop(div, %2, %4) : !cir.double loc(#loc119)
      %6 = cir.cast(float_to_int, %5 : !cir.double), !s32i loc(#loc119)
      cir.store %6, %1 : !s32i, !cir.ptr<!s32i> loc(#loc118)
      %7 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc50)
      cir.call @printIntLine(%7) : (!s32i) -> () loc(#loc51)
    } loc(#loc117)
    cir.return loc(#loc40)
  } loc(#loc115)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc121)
    %1 = cir.alloca !cir.ptr<!cir.func<(!cir.float)>>, !cir.ptr<!cir.ptr<!cir.func<(!cir.float)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc122)
    %2 = cir.get_global @goodG2BSink : !cir.ptr<!cir.func<(!cir.float)>> loc(#loc57)
    cir.store %2, %1 : !cir.ptr<!cir.func<(!cir.float)>>, !cir.ptr<!cir.ptr<!cir.func<(!cir.float)>>> loc(#loc122)
    %3 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc58)
    cir.store %3, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc123)
    %4 = cir.const #cir.fp<2.000000e+00> : !cir.float loc(#loc60)
    cir.store %4, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc124)
    %5 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<(!cir.float)>>>, !cir.ptr<!cir.func<(!cir.float)>> loc(#loc62)
    %6 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc63)
    cir.call %5(%6) : (!cir.ptr<!cir.func<(!cir.float)>>, !cir.float) -> () loc(#loc62)
    cir.return loc(#loc53)
  } loc(#loc120)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc125)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"This would result in a divide by zero\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc66)
  cir.func internal private @goodB2GSink(%arg0: !cir.float loc(fused[#loc69, #loc70])) extra(#fn_attr) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data", init] {alignment = 4 : i64} loc(#loc127)
    cir.store %arg0, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc71)
    cir.scope {
      %1 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc74)
      %2 = cir.cast(floating, %1 : !cir.float), !cir.double loc(#loc74)
      %3 = cir.fabs %2 : !cir.double loc(#loc74)
      %4 = cir.const #cir.fp<9.9999999999999995E-7> : !cir.double loc(#loc75)
      %5 = cir.cmp(gt, %3, %4) : !cir.double, !cir.bool loc(#loc129)
      cir.if %5 {
        %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc131)
        %7 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc82)
        %8 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc83)
        %9 = cir.cast(floating, %8 : !cir.float), !cir.double loc(#loc83)
        %10 = cir.binop(div, %7, %9) : !cir.double loc(#loc132)
        %11 = cir.cast(float_to_int, %10 : !cir.double), !s32i loc(#loc132)
        cir.store %11, %6 : !s32i, !cir.ptr<!s32i> loc(#loc131)
        %12 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc84)
        cir.call @printIntLine(%12) : (!s32i) -> () loc(#loc85)
      } else {
        %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc66)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc66)
        cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc86)
      } loc(#loc130)
    } loc(#loc128)
    cir.return loc(#loc68)
  } loc(#loc126)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc134)
    %1 = cir.alloca !cir.ptr<!cir.func<(!cir.float)>>, !cir.ptr<!cir.ptr<!cir.func<(!cir.float)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc135)
    %2 = cir.get_global @goodB2GSink : !cir.ptr<!cir.func<(!cir.float)>> loc(#loc92)
    cir.store %2, %1 : !cir.ptr<!cir.func<(!cir.float)>>, !cir.ptr<!cir.ptr<!cir.func<(!cir.float)>>> loc(#loc135)
    %3 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc93)
    cir.store %3, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc136)
    %4 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc95)
    %5 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc107)
    %6 = cir.load %5 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc96)
    %7 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc97)
    %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc97)
    %9 = cir.call @__isoc99_fscanf(%6, %8, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!cir.float>) -> !s32i loc(#loc95)
    %10 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<(!cir.float)>>>, !cir.ptr<!cir.func<(!cir.float)>> loc(#loc98)
    %11 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc99)
    cir.call %10(%11) : (!cir.ptr<!cir.func<(!cir.float)>>, !cir.float) -> () loc(#loc98)
    cir.return loc(#loc88)
  } loc(#loc133)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__float_fscanf_44.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("CWE369_Divide_by_Zero__float_fscanf_44.c":24:1)
#loc4 = loc("CWE369_Divide_by_Zero__float_fscanf_44.c":31:1)
#loc7 = loc("CWE369_Divide_by_Zero__float_fscanf_44.c":25:1)
#loc8 = loc("CWE369_Divide_by_Zero__float_fscanf_44.c":26:5)
#loc9 = loc("CWE369_Divide_by_Zero__float_fscanf_44.c":30:5)
#loc10 = loc("CWE369_Divide_by_Zero__float_fscanf_44.c":28:9)
#loc11 = loc("CWE369_Divide_by_Zero__float_fscanf_44.c":28:40)
#loc12 = loc("CWE369_Divide_by_Zero__float_fscanf_44.c":28:28)
#loc13 = loc("CWE369_Divide_by_Zero__float_fscanf_44.c":28:36)
#loc14 = loc("CWE369_Divide_by_Zero__float_fscanf_44.c":29:22)
#loc15 = loc("CWE369_Divide_by_Zero__float_fscanf_44.c":29:9)
#loc16 = loc("/usr/include/stdio.h":463:1)
#loc17 = loc("/usr/include/stdio.h":465:33)
#loc18 = loc("/usr/include/stdio.h":149:1)
#loc19 = loc("/usr/include/stdio.h":149:14)
#loc20 = loc("CWE369_Divide_by_Zero__float_fscanf_44.c":41:20)
#loc21 = loc("CWE369_Divide_by_Zero__float_fscanf_44.c":33:1)
#loc22 = loc("CWE369_Divide_by_Zero__float_fscanf_44.c":44:1)
#loc23 = loc("CWE369_Divide_by_Zero__float_fscanf_44.c":35:5)
#loc24 = loc("CWE369_Divide_by_Zero__float_fscanf_44.c":35:11)
#loc25 = loc("CWE369_Divide_by_Zero__float_fscanf_44.c":37:5)
#loc26 = loc("CWE369_Divide_by_Zero__float_fscanf_44.c":37:31)
#loc27 = loc("CWE369_Divide_by_Zero__float_fscanf_44.c":39:12)
#loc28 = loc("CWE369_Divide_by_Zero__float_fscanf_44.c":39:5)
#loc29 = loc("CWE369_Divide_by_Zero__float_fscanf_44.c":41:5)
#loc30 = loc("CWE369_Divide_by_Zero__float_fscanf_44.c":41:13)
#loc31 = loc("CWE369_Divide_by_Zero__float_fscanf_44.c":43:5)
#loc32 = loc("CWE369_Divide_by_Zero__float_fscanf_44.c":43:13)
#loc33 = loc("CWE369_Divide_by_Zero__float_fscanf_44.c":97:1)
#loc34 = loc("CWE369_Divide_by_Zero__float_fscanf_44.c":101:1)
#loc35 = loc("CWE369_Divide_by_Zero__float_fscanf_44.c":99:5)
#loc36 = loc("CWE369_Divide_by_Zero__float_fscanf_44.c":99:13)
#loc37 = loc("CWE369_Divide_by_Zero__float_fscanf_44.c":100:5)
#loc38 = loc("CWE369_Divide_by_Zero__float_fscanf_44.c":100:13)
#loc39 = loc("CWE369_Divide_by_Zero__float_fscanf_44.c":51:1)
#loc40 = loc("CWE369_Divide_by_Zero__float_fscanf_44.c":58:1)
#loc43 = loc("CWE369_Divide_by_Zero__float_fscanf_44.c":52:1)
#loc44 = loc("CWE369_Divide_by_Zero__float_fscanf_44.c":53:5)
#loc45 = loc("CWE369_Divide_by_Zero__float_fscanf_44.c":57:5)
#loc46 = loc("CWE369_Divide_by_Zero__float_fscanf_44.c":55:9)
#loc47 = loc("CWE369_Divide_by_Zero__float_fscanf_44.c":55:40)
#loc48 = loc("CWE369_Divide_by_Zero__float_fscanf_44.c":55:28)
#loc49 = loc("CWE369_Divide_by_Zero__float_fscanf_44.c":55:36)
#loc50 = loc("CWE369_Divide_by_Zero__float_fscanf_44.c":56:22)
#loc51 = loc("CWE369_Divide_by_Zero__float_fscanf_44.c":56:9)
#loc52 = loc("CWE369_Divide_by_Zero__float_fscanf_44.c":60:1)
#loc53 = loc("CWE369_Divide_by_Zero__float_fscanf_44.c":69:1)
#loc54 = loc("CWE369_Divide_by_Zero__float_fscanf_44.c":62:5)
#loc55 = loc("CWE369_Divide_by_Zero__float_fscanf_44.c":62:11)
#loc56 = loc("CWE369_Divide_by_Zero__float_fscanf_44.c":63:5)
#loc57 = loc("CWE369_Divide_by_Zero__float_fscanf_44.c":63:31)
#loc58 = loc("CWE369_Divide_by_Zero__float_fscanf_44.c":65:12)
#loc59 = loc("CWE369_Divide_by_Zero__float_fscanf_44.c":65:5)
#loc60 = loc("CWE369_Divide_by_Zero__float_fscanf_44.c":67:12)
#loc61 = loc("CWE369_Divide_by_Zero__float_fscanf_44.c":67:5)
#loc62 = loc("CWE369_Divide_by_Zero__float_fscanf_44.c":68:5)
#loc63 = loc("CWE369_Divide_by_Zero__float_fscanf_44.c":68:13)
#loc64 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc65 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc66 = loc("CWE369_Divide_by_Zero__float_fscanf_44.c":82:19)
#loc67 = loc("CWE369_Divide_by_Zero__float_fscanf_44.c":72:1)
#loc68 = loc("CWE369_Divide_by_Zero__float_fscanf_44.c":84:1)
#loc71 = loc("CWE369_Divide_by_Zero__float_fscanf_44.c":73:1)
#loc72 = loc("CWE369_Divide_by_Zero__float_fscanf_44.c":75:5)
#loc73 = loc("CWE369_Divide_by_Zero__float_fscanf_44.c":83:5)
#loc74 = loc("CWE369_Divide_by_Zero__float_fscanf_44.c":75:13)
#loc75 = loc("CWE369_Divide_by_Zero__float_fscanf_44.c":75:21)
#loc76 = loc("CWE369_Divide_by_Zero__float_fscanf_44.c":75:8)
#loc77 = loc("CWE369_Divide_by_Zero__float_fscanf_44.c":76:5)
#loc78 = loc("CWE369_Divide_by_Zero__float_fscanf_44.c":79:5)
#loc79 = loc("CWE369_Divide_by_Zero__float_fscanf_44.c":81:5)
#loc80 = loc("CWE369_Divide_by_Zero__float_fscanf_44.c":77:9)
#loc81 = loc("CWE369_Divide_by_Zero__float_fscanf_44.c":77:40)
#loc82 = loc("CWE369_Divide_by_Zero__float_fscanf_44.c":77:28)
#loc83 = loc("CWE369_Divide_by_Zero__float_fscanf_44.c":77:36)
#loc84 = loc("CWE369_Divide_by_Zero__float_fscanf_44.c":78:22)
#loc85 = loc("CWE369_Divide_by_Zero__float_fscanf_44.c":78:9)
#loc86 = loc("CWE369_Divide_by_Zero__float_fscanf_44.c":82:9)
#loc87 = loc("CWE369_Divide_by_Zero__float_fscanf_44.c":86:1)
#loc88 = loc("CWE369_Divide_by_Zero__float_fscanf_44.c":95:1)
#loc89 = loc("CWE369_Divide_by_Zero__float_fscanf_44.c":88:5)
#loc90 = loc("CWE369_Divide_by_Zero__float_fscanf_44.c":88:11)
#loc91 = loc("CWE369_Divide_by_Zero__float_fscanf_44.c":89:5)
#loc92 = loc("CWE369_Divide_by_Zero__float_fscanf_44.c":89:31)
#loc93 = loc("CWE369_Divide_by_Zero__float_fscanf_44.c":91:12)
#loc94 = loc("CWE369_Divide_by_Zero__float_fscanf_44.c":91:5)
#loc95 = loc("CWE369_Divide_by_Zero__float_fscanf_44.c":93:5)
#loc96 = loc("CWE369_Divide_by_Zero__float_fscanf_44.c":93:13)
#loc97 = loc("CWE369_Divide_by_Zero__float_fscanf_44.c":93:20)
#loc98 = loc("CWE369_Divide_by_Zero__float_fscanf_44.c":94:5)
#loc99 = loc("CWE369_Divide_by_Zero__float_fscanf_44.c":94:13)
#loc100 = loc(fused[#loc1, #loc2])
#loc101 = loc(fused[#loc3, #loc4])
#loc103 = loc(fused[#loc8, #loc9])
#loc104 = loc(fused[#loc10, #loc11])
#loc105 = loc(fused[#loc12, #loc13])
#loc106 = loc(fused[#loc16, #loc17])
#loc107 = loc(fused[#loc18, #loc19])
#loc108 = loc(fused[#loc21, #loc22])
#loc109 = loc(fused[#loc23, #loc24])
#loc110 = loc(fused[#loc25, #loc26])
#loc111 = loc(fused[#loc28, #loc27])
#loc112 = loc(fused[#loc33, #loc34])
#loc113 = loc(fused[#loc35, #loc36])
#loc114 = loc(fused[#loc37, #loc38])
#loc115 = loc(fused[#loc39, #loc40])
#loc117 = loc(fused[#loc44, #loc45])
#loc118 = loc(fused[#loc46, #loc47])
#loc119 = loc(fused[#loc48, #loc49])
#loc120 = loc(fused[#loc52, #loc53])
#loc121 = loc(fused[#loc54, #loc55])
#loc122 = loc(fused[#loc56, #loc57])
#loc123 = loc(fused[#loc59, #loc58])
#loc124 = loc(fused[#loc61, #loc60])
#loc125 = loc(fused[#loc64, #loc65])
#loc126 = loc(fused[#loc67, #loc68])
#loc128 = loc(fused[#loc72, #loc73])
#loc129 = loc(fused[#loc76, #loc75])
#loc130 = loc(fused[#loc77, #loc78, #loc79, #loc73])
#loc131 = loc(fused[#loc80, #loc81])
#loc132 = loc(fused[#loc82, #loc83])
#loc133 = loc(fused[#loc87, #loc88])
#loc134 = loc(fused[#loc89, #loc90])
#loc135 = loc(fused[#loc91, #loc92])
#loc136 = loc(fused[#loc94, #loc93])
