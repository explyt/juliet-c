!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc17 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_31.c":29:26)
#loc44 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_31.c":100:10)
#loc45 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_31.c":100:14)
#loc46 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_31.c":100:20)
#loc47 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_31.c":100:32)
#loc97 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_31.c":69:26)
#loc134 = loc(fused[#loc44, #loc45])
#loc135 = loc(fused[#loc46, #loc47])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_rand_square_31.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc115)
  cir.func private @printUnsignedLine(!u32i) loc(#loc116)
  cir.func no_proto @CWE190_Integer_Overflow__unsigned_int_rand_square_31_bad() extra(#fn_attr1) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["dataCopy", init] {alignment = 4 : i64} loc(#loc118)
    %1 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data", init] {alignment = 4 : i64} loc(#loc119)
    %2 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc120)
    %3 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc121)
    %4 = cir.const #cir.int<0> : !s32i loc(#loc15)
    %5 = cir.cast(integral, %4 : !s32i), !u32i loc(#loc15)
    cir.store %5, %3 : !u32i, !cir.ptr<!u32i> loc(#loc122)
    %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %7 = cir.const #cir.int<1> : !s32i loc(#loc17)
    %8 = cir.binop(and, %6, %7) : !s32i loc(#loc17)
    %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc17)
    cir.brcond %9 ^bb1, ^bb2 loc(#loc17)
  ^bb1:  // pred: ^bb0
    %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc17)
    %12 = cir.const #cir.int<30> : !s32i loc(#loc17)
    %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc17)
    %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc17)
    %16 = cir.const #cir.int<15> : !s32i loc(#loc17)
    %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc17)
    %18 = cir.binop(xor, %13, %17) : !u32i loc(#loc17)
    %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc17)
    %21 = cir.binop(xor, %18, %20) : !u32i loc(#loc17)
    cir.br ^bb3(%21 : !u32i) loc(#loc17)
  ^bb2:  // pred: ^bb0
    %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc17)
    %24 = cir.const #cir.int<30> : !s32i loc(#loc17)
    %25 = cir.shift(left, %23 : !u32i, %24 : !s32i) -> !u32i loc(#loc17)
    %26 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %27 = cir.cast(integral, %26 : !s32i), !u32i loc(#loc17)
    %28 = cir.const #cir.int<15> : !s32i loc(#loc17)
    %29 = cir.shift(left, %27 : !u32i, %28 : !s32i) -> !u32i loc(#loc17)
    %30 = cir.binop(xor, %25, %29) : !u32i loc(#loc17)
    %31 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %32 = cir.cast(integral, %31 : !s32i), !u32i loc(#loc17)
    %33 = cir.binop(xor, %30, %32) : !u32i loc(#loc17)
    %34 = cir.unary(minus, %33) : !u32i, !u32i loc(#loc17)
    %35 = cir.const #cir.int<1> : !s32i loc(#loc17)
    %36 = cir.cast(integral, %35 : !s32i), !u32i loc(#loc17)
    %37 = cir.binop(sub, %34, %36) : !u32i loc(#loc17)
    cir.br ^bb3(%37 : !u32i) loc(#loc17)
  ^bb3(%38: !u32i loc("CWE190_Integer_Overflow__unsigned_int_rand_square_31.c":29:26)):  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc17)
  ^bb4:  // pred: ^bb3
    %39 = cir.cast(integral, %38 : !u32i), !s32i loc(#loc17)
    %40 = cir.cast(integral, %39 : !s32i), !u32i loc(#loc17)
    cir.store %40, %3 : !u32i, !cir.ptr<!u32i> loc(#loc123)
    cir.br ^bb5 loc(#loc124)
  ^bb5:  // pred: ^bb4
    %41 = cir.load %3 : !cir.ptr<!u32i>, !u32i loc(#loc8)
    cir.store %41, %0 : !u32i, !cir.ptr<!u32i> loc(#loc118)
    %42 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc10)
    cir.store %42, %1 : !u32i, !cir.ptr<!u32i> loc(#loc119)
    cir.br ^bb6 loc(#loc125)
  ^bb6:  // pred: ^bb5
    %43 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc23)
    %44 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc12)
    %45 = cir.binop(mul, %43, %44) : !u32i loc(#loc126)
    cir.store %45, %2 : !u32i, !cir.ptr<!u32i> loc(#loc120)
    %46 = cir.load %2 : !cir.ptr<!u32i>, !u32i loc(#loc24)
    cir.call @printUnsignedLine(%46) : (!u32i) -> () loc(#loc25)
    cir.br ^bb7 loc(#loc22)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc20)
  ^bb8:  // pred: ^bb7
    cir.return loc(#loc6)
  } loc(#loc117)
  cir.func no_proto @CWE190_Integer_Overflow__unsigned_int_rand_square_31_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc128)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc28)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc129)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc30)
    cir.return loc(#loc27)
  } loc(#loc127)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc130)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc131)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc132)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc38)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc39)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc40)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc41)
  cir.func @main(%arg0: !s32i loc(fused[#loc44, #loc45]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc46, #loc47])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc134)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc135)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc43)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc48)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc48)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc49)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc50)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc50)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc51)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc38)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc38)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc52)
    %8 = cir.get_global @CWE190_Integer_Overflow__unsigned_int_rand_square_31_good : !cir.ptr<!cir.func<!void ()>> loc(#loc136)
    cir.call @CWE190_Integer_Overflow__unsigned_int_rand_square_31_good() : () -> () loc(#loc53)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc39)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc39)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc55)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc40)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc40)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc56)
    %13 = cir.get_global @CWE190_Integer_Overflow__unsigned_int_rand_square_31_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc137)
    cir.call @CWE190_Integer_Overflow__unsigned_int_rand_square_31_bad() : () -> () loc(#loc57)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc41)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc41)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc59)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc60)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc138)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc138)
    cir.return %17 : !s32i loc(#loc138)
  } loc(#loc133)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["dataCopy", init] {alignment = 4 : i64} loc(#loc140)
    %1 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data", init] {alignment = 4 : i64} loc(#loc141)
    %2 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc142)
    %3 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc143)
    %4 = cir.const #cir.int<0> : !s32i loc(#loc72)
    %5 = cir.cast(integral, %4 : !s32i), !u32i loc(#loc72)
    cir.store %5, %3 : !u32i, !cir.ptr<!u32i> loc(#loc144)
    %6 = cir.const #cir.int<2> : !s32i loc(#loc74)
    %7 = cir.cast(integral, %6 : !s32i), !u32i loc(#loc74)
    cir.store %7, %3 : !u32i, !cir.ptr<!u32i> loc(#loc145)
    cir.br ^bb1 loc(#loc146)
  ^bb1:  // pred: ^bb0
    %8 = cir.load %3 : !cir.ptr<!u32i>, !u32i loc(#loc65)
    cir.store %8, %0 : !u32i, !cir.ptr<!u32i> loc(#loc140)
    %9 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc67)
    cir.store %9, %1 : !u32i, !cir.ptr<!u32i> loc(#loc141)
    cir.br ^bb2 loc(#loc147)
  ^bb2:  // pred: ^bb1
    %10 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc80)
    %11 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc69)
    %12 = cir.binop(mul, %10, %11) : !u32i loc(#loc148)
    cir.store %12, %2 : !u32i, !cir.ptr<!u32i> loc(#loc142)
    %13 = cir.load %2 : !cir.ptr<!u32i>, !u32i loc(#loc81)
    cir.call @printUnsignedLine(%13) : (!u32i) -> () loc(#loc82)
    cir.br ^bb3 loc(#loc79)
  ^bb3:  // pred: ^bb2
    cir.br ^bb4 loc(#loc77)
  ^bb4:  // pred: ^bb3
    cir.return loc(#loc63)
  } loc(#loc139)
  cir.func private @sqrt(!cir.double) -> !cir.double extra(#fn_attr) loc(#loc83)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc84)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["dataCopy", init] {alignment = 4 : i64} loc(#loc150)
    %1 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data", init] {alignment = 4 : i64} loc(#loc151)
    %2 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc152)
    %3 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc153)
    %4 = cir.const #cir.int<0> : !s32i loc(#loc95)
    %5 = cir.cast(integral, %4 : !s32i), !u32i loc(#loc95)
    cir.store %5, %3 : !u32i, !cir.ptr<!u32i> loc(#loc154)
    %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc97)
    %7 = cir.const #cir.int<1> : !s32i loc(#loc97)
    %8 = cir.binop(and, %6, %7) : !s32i loc(#loc97)
    %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc97)
    cir.brcond %9 ^bb1, ^bb2 loc(#loc97)
  ^bb1:  // pred: ^bb0
    %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc97)
    %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc97)
    %12 = cir.const #cir.int<30> : !s32i loc(#loc97)
    %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc97)
    %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc97)
    %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc97)
    %16 = cir.const #cir.int<15> : !s32i loc(#loc97)
    %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc97)
    %18 = cir.binop(xor, %13, %17) : !u32i loc(#loc97)
    %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc97)
    %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc97)
    %21 = cir.binop(xor, %18, %20) : !u32i loc(#loc97)
    cir.br ^bb3(%21 : !u32i) loc(#loc97)
  ^bb2:  // pred: ^bb0
    %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc97)
    %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc97)
    %24 = cir.const #cir.int<30> : !s32i loc(#loc97)
    %25 = cir.shift(left, %23 : !u32i, %24 : !s32i) -> !u32i loc(#loc97)
    %26 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc97)
    %27 = cir.cast(integral, %26 : !s32i), !u32i loc(#loc97)
    %28 = cir.const #cir.int<15> : !s32i loc(#loc97)
    %29 = cir.shift(left, %27 : !u32i, %28 : !s32i) -> !u32i loc(#loc97)
    %30 = cir.binop(xor, %25, %29) : !u32i loc(#loc97)
    %31 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc97)
    %32 = cir.cast(integral, %31 : !s32i), !u32i loc(#loc97)
    %33 = cir.binop(xor, %30, %32) : !u32i loc(#loc97)
    %34 = cir.unary(minus, %33) : !u32i, !u32i loc(#loc97)
    %35 = cir.const #cir.int<1> : !s32i loc(#loc97)
    %36 = cir.cast(integral, %35 : !s32i), !u32i loc(#loc97)
    %37 = cir.binop(sub, %34, %36) : !u32i loc(#loc97)
    cir.br ^bb3(%37 : !u32i) loc(#loc97)
  ^bb3(%38: !u32i loc("CWE190_Integer_Overflow__unsigned_int_rand_square_31.c":69:26)):  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc97)
  ^bb4:  // pred: ^bb3
    %39 = cir.cast(integral, %38 : !u32i), !s32i loc(#loc97)
    %40 = cir.cast(integral, %39 : !s32i), !u32i loc(#loc97)
    cir.store %40, %3 : !u32i, !cir.ptr<!u32i> loc(#loc155)
    cir.br ^bb5 loc(#loc156)
  ^bb5:  // pred: ^bb4
    %41 = cir.load %3 : !cir.ptr<!u32i>, !u32i loc(#loc88)
    cir.store %41, %0 : !u32i, !cir.ptr<!u32i> loc(#loc150)
    %42 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc90)
    cir.store %42, %1 : !u32i, !cir.ptr<!u32i> loc(#loc151)
    cir.br ^bb6 loc(#loc157)
  ^bb6:  // pred: ^bb5
    %43 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc103)
    %44 = cir.cast(integral, %43 : !u32i), !s64i loc(#loc103)
    %45 = cir.cast(integral, %44 : !s64i), !s32i loc(#loc103)
    %46 = cir.abs %45 poison : !s32i loc(#loc104)
    %47 = cir.cast(integral, %46 : !s32i), !s64i loc(#loc104)
    %48 = cir.get_global @sqrt : !cir.ptr<!cir.func<!cir.double (!cir.double)>> loc(#loc105)
    %49 = cir.const #cir.int<2147483647> : !s32i loc(#loc106)
    %50 = cir.cast(integral, %49 : !s32i), !u32i loc(#loc106)
    %51 = cir.const #cir.int<2> : !u32i loc(#loc106)
    %52 = cir.binop(mul, %50, %51) : !u32i loc(#loc106)
    %53 = cir.const #cir.int<1> : !u32i loc(#loc106)
    %54 = cir.binop(add, %52, %53) : !u32i loc(#loc106)
    %55 = cir.cast(int_to_float, %54 : !u32i), !cir.double loc(#loc106)
    %56 = cir.call @sqrt(%55) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc105)
    %57 = cir.cast(float_to_int, %56 : !cir.double), !s64i loc(#loc105)
    %58 = cir.cmp(lt, %47, %57) : !s64i, !cir.bool loc(#loc158)
    cir.brcond %58 ^bb7, ^bb8 loc(#loc159)
  ^bb7:  // pred: ^bb6
    %59 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc111)
    %60 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc92)
    %61 = cir.binop(mul, %59, %60) : !u32i loc(#loc160)
    cir.store %61, %2 : !u32i, !cir.ptr<!u32i> loc(#loc152)
    %62 = cir.load %2 : !cir.ptr<!u32i>, !u32i loc(#loc112)
    cir.call @printUnsignedLine(%62) : (!u32i) -> () loc(#loc113)
    cir.br ^bb9 loc(#loc109)
  ^bb8:  // pred: ^bb6
    %63 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc84)
    %64 = cir.cast(array_to_ptrdecay, %63 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc84)
    cir.call @printLine(%64) : (!cir.ptr<!s8i>) -> () loc(#loc114)
    cir.br ^bb9 loc(#loc102)
  ^bb9:  // 2 preds: ^bb7, ^bb8
    cir.br ^bb10 loc(#loc102)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc100)
  ^bb11:  // pred: ^bb10
    cir.return loc(#loc86)
  } loc(#loc149)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_rand_square_31.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":34:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":34:47)
#loc5 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_31.c":24:1)
#loc6 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_31.c":39:1)
#loc7 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_31.c":31:9)
#loc8 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_31.c":31:33)
#loc9 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_31.c":32:9)
#loc10 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_31.c":32:29)
#loc11 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_31.c":35:13)
#loc12 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_31.c":35:42)
#loc13 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_31.c":26:5)
#loc14 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_31.c":26:18)
#loc15 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_31.c":27:12)
#loc16 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_31.c":27:5)
#loc18 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_31.c":29:5)
#loc19 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_31.c":30:5)
#loc20 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_31.c":38:5)
#loc21 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_31.c":33:9)
#loc22 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_31.c":37:9)
#loc23 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_31.c":35:35)
#loc24 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_31.c":36:31)
#loc25 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_31.c":36:13)
#loc26 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_31.c":86:1)
#loc27 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_31.c":90:1)
#loc28 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_31.c":88:5)
#loc29 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_31.c":88:13)
#loc30 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_31.c":89:5)
#loc31 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_31.c":89:13)
#loc32 = loc("/usr/include/stdlib.h":575:1)
#loc33 = loc("/usr/include/stdlib.h":575:41)
#loc34 = loc("/usr/include/time.h":76:1)
#loc35 = loc("/usr/include/time.h":76:38)
#loc36 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc37 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc38 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_31.c":105:15)
#loc39 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_31.c":107:15)
#loc40 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_31.c":110:15)
#loc41 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_31.c":112:15)
#loc42 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_31.c":100:1)
#loc43 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_31.c":115:1)
#loc48 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_31.c":101:1)
#loc49 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_31.c":103:27)
#loc50 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_31.c":103:22)
#loc51 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_31.c":103:5)
#loc52 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_31.c":105:5)
#loc53 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_31.c":106:5)
#loc54 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_31.c":106:63)
#loc55 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_31.c":107:5)
#loc56 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_31.c":110:5)
#loc57 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_31.c":111:5)
#loc58 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_31.c":111:62)
#loc59 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_31.c":112:5)
#loc60 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_31.c":114:12)
#loc61 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_31.c":114:5)
#loc62 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_31.c":46:1)
#loc63 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_31.c":61:1)
#loc64 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_31.c":53:9)
#loc65 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_31.c":53:33)
#loc66 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_31.c":54:9)
#loc67 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_31.c":54:29)
#loc68 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_31.c":57:13)
#loc69 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_31.c":57:42)
#loc70 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_31.c":48:5)
#loc71 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_31.c":48:18)
#loc72 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_31.c":49:12)
#loc73 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_31.c":49:5)
#loc74 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_31.c":51:12)
#loc75 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_31.c":51:5)
#loc76 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_31.c":52:5)
#loc77 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_31.c":60:5)
#loc78 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_31.c":55:9)
#loc79 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_31.c":59:9)
#loc80 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_31.c":57:35)
#loc81 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_31.c":58:31)
#loc82 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_31.c":58:13)
#loc83 = loc("/usr/include/bits/mathcalls.h":158:1)
#loc84 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_31.c":81:23)
#loc85 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_31.c":64:1)
#loc86 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_31.c":84:1)
#loc87 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_31.c":71:9)
#loc88 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_31.c":71:33)
#loc89 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_31.c":72:9)
#loc90 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_31.c":72:29)
#loc91 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_31.c":76:13)
#loc92 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_31.c":76:42)
#loc93 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_31.c":66:5)
#loc94 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_31.c":66:18)
#loc95 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_31.c":67:12)
#loc96 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_31.c":67:5)
#loc98 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_31.c":69:5)
#loc99 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_31.c":70:5)
#loc100 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_31.c":83:5)
#loc101 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_31.c":74:9)
#loc102 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_31.c":82:9)
#loc103 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_31.c":74:23)
#loc104 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_31.c":74:13)
#loc105 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_31.c":74:37)
#loc106 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_31.c":74:50)
#loc107 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_31.c":74:58)
#loc108 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_31.c":75:9)
#loc109 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_31.c":78:9)
#loc110 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_31.c":80:9)
#loc111 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_31.c":76:35)
#loc112 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_31.c":77:31)
#loc113 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_31.c":77:13)
#loc114 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_31.c":81:13)
#loc115 = loc(fused[#loc1, #loc2])
#loc116 = loc(fused[#loc3, #loc4])
#loc117 = loc(fused[#loc5, #loc6])
#loc118 = loc(fused[#loc7, #loc8])
#loc119 = loc(fused[#loc9, #loc10])
#loc120 = loc(fused[#loc11, #loc12])
#loc121 = loc(fused[#loc13, #loc14])
#loc122 = loc(fused[#loc16, #loc15])
#loc123 = loc(fused[#loc18, #loc17])
#loc124 = loc(fused[#loc19, #loc20])
#loc125 = loc(fused[#loc21, #loc22])
#loc126 = loc(fused[#loc23, #loc12])
#loc127 = loc(fused[#loc26, #loc27])
#loc128 = loc(fused[#loc28, #loc29])
#loc129 = loc(fused[#loc30, #loc31])
#loc130 = loc(fused[#loc32, #loc33])
#loc131 = loc(fused[#loc34, #loc35])
#loc132 = loc(fused[#loc36, #loc37])
#loc133 = loc(fused[#loc42, #loc43])
#loc136 = loc(fused[#loc53, #loc54])
#loc137 = loc(fused[#loc57, #loc58])
#loc138 = loc(fused[#loc61, #loc60])
#loc139 = loc(fused[#loc62, #loc63])
#loc140 = loc(fused[#loc64, #loc65])
#loc141 = loc(fused[#loc66, #loc67])
#loc142 = loc(fused[#loc68, #loc69])
#loc143 = loc(fused[#loc70, #loc71])
#loc144 = loc(fused[#loc73, #loc72])
#loc145 = loc(fused[#loc75, #loc74])
#loc146 = loc(fused[#loc76, #loc77])
#loc147 = loc(fused[#loc78, #loc79])
#loc148 = loc(fused[#loc80, #loc69])
#loc149 = loc(fused[#loc85, #loc86])
#loc150 = loc(fused[#loc87, #loc88])
#loc151 = loc(fused[#loc89, #loc90])
#loc152 = loc(fused[#loc91, #loc92])
#loc153 = loc(fused[#loc93, #loc94])
#loc154 = loc(fused[#loc96, #loc95])
#loc155 = loc(fused[#loc98, #loc97])
#loc156 = loc(fused[#loc99, #loc100])
#loc157 = loc(fused[#loc101, #loc102])
#loc158 = loc(fused[#loc104, #loc107])
#loc159 = loc(fused[#loc108, #loc109, #loc110, #loc102])
#loc160 = loc(fused[#loc111, #loc92])
