!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE617_Reachable_Assertion/CWE617_Reachable_Assertion__fixed_07.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i1 = dense<8> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e">} {
  cir.global "private" internal dsolocal @staticFive = #cir.int<5> : !s32i {alignment = 4 : i64} loc(#loc65)
  cir.func private @__assert_fail(!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) extra(#fn_attr) loc(#loc66)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data > ASSERT_VALUE\00" : !cir.array<!s8i x 20>> : !cir.array<!s8i x 20> {alignment = 1 : i64} loc(#loc5)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"CWE617_Reachable_Assertion__fixed_07.c\00" : !cir.array<!s8i x 39>> : !cir.array<!s8i x 39> {alignment = 1 : i64} loc(#loc5)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"void CWE617_Reachable_Assertion__fixed_07_bad()\00" : !cir.array<!s8i x 48>> : !cir.array<!s8i x 48> {alignment = 1 : i64} loc(#loc5)
  cir.func no_proto @CWE617_Reachable_Assertion__fixed_07_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc68)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc10)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc11)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc69)
    cir.br ^bb1 loc(#loc70)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @staticFive : !cir.ptr<!s32i> loc(#loc65)
    %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc15)
    %5 = cir.const #cir.int<5> : !s32i loc(#loc16)
    %6 = cir.cmp(eq, %4, %5) : !s32i, !cir.bool loc(#loc71)
    cir.brcond %6 ^bb2, ^bb3 loc(#loc72)
  ^bb2:  // pred: ^bb1
    %7 = cir.const #cir.int<5> : !s32i loc(#loc18)
    %8 = cir.const #cir.int<1> : !s32i loc(#loc19)
    %9 = cir.binop(sub, %7, %8) nsw : !s32i loc(#loc18)
    cir.store %9, %0 : !s32i, !cir.ptr<!s32i> loc(#loc73)
    cir.br ^bb3 loc(#loc14)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc14)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc5)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc5)
  ^bb6:  // pred: ^bb5
    %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc5)
    %11 = cir.const #cir.int<5> : !s32i loc(#loc5)
    %12 = cir.cmp(gt, %10, %11) : !s32i, !cir.bool loc(#loc5)
    cir.brcond %12 ^bb7, ^bb8 loc(#loc5)
  ^bb7:  // pred: ^bb6
    cir.br ^bb9 loc(#loc5)
  ^bb8:  // pred: ^bb6
    %13 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 20>> loc(#loc5)
    %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc5)
    %15 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 39>> loc(#loc5)
    %16 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 39>>), !cir.ptr<!s8i> loc(#loc5)
    %17 = cir.const #cir.int<42> : !s32i loc(#loc5)
    %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc5)
    %19 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 48>> loc(#loc5)
    %20 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 48>>), !cir.ptr<!s8i> loc(#loc5)
    cir.call @__assert_fail(%14, %16, %18, %20) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) -> () extra(#fn_attr) loc(#loc5)
    cir.br ^bb9 loc(#loc5)
  ^bb9:  // 2 preds: ^bb7, ^bb8
    cir.br ^bb10 loc(#loc5)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc5)
  ^bb11:  // pred: ^bb10
    cir.return loc(#loc7)
  } loc(#loc67)
  cir.func no_proto @CWE617_Reachable_Assertion__fixed_07_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<()>> loc(#loc75)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc23)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<()>> loc(#loc76)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc25)
    cir.return loc(#loc22)
  } loc(#loc74)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc77)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc29)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"void goodG2B1()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc30)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc79)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc35)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc36)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc80)
    cir.br ^bb1 loc(#loc81)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @staticFive : !cir.ptr<!s32i> loc(#loc65)
    %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc40)
    %5 = cir.const #cir.int<5> : !s32i loc(#loc41)
    %6 = cir.cmp(ne, %4, %5) : !s32i, !cir.bool loc(#loc82)
    cir.brcond %6 ^bb2, ^bb3 loc(#loc83)
  ^bb2:  // pred: ^bb1
    %7 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc29)
    %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc29)
    cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc45)
    cir.br ^bb4 loc(#loc43)
  ^bb3:  // pred: ^bb1
    %9 = cir.const #cir.int<5> : !s32i loc(#loc46)
    %10 = cir.const #cir.int<1> : !s32i loc(#loc47)
    %11 = cir.binop(add, %9, %10) nsw : !s32i loc(#loc46)
    cir.store %11, %0 : !s32i, !cir.ptr<!s32i> loc(#loc84)
    cir.br ^bb4 loc(#loc39)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc39)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc30)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc30)
  ^bb7:  // pred: ^bb6
    %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc30)
    %13 = cir.const #cir.int<5> : !s32i loc(#loc30)
    %14 = cir.cmp(gt, %12, %13) : !s32i, !cir.bool loc(#loc30)
    cir.brcond %14 ^bb8, ^bb9 loc(#loc30)
  ^bb8:  // pred: ^bb7
    cir.br ^bb10 loc(#loc30)
  ^bb9:  // pred: ^bb7
    %15 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 20>> loc(#loc30)
    %16 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc30)
    %17 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 39>> loc(#loc30)
    %18 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s8i x 39>>), !cir.ptr<!s8i> loc(#loc30)
    %19 = cir.const #cir.int<66> : !s32i loc(#loc30)
    %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc30)
    %21 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc30)
    %22 = cir.cast(array_to_ptrdecay, %21 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc30)
    cir.call @__assert_fail(%16, %18, %20, %22) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) -> () extra(#fn_attr) loc(#loc30)
    cir.br ^bb10 loc(#loc30)
  ^bb10:  // 2 preds: ^bb8, ^bb9
    cir.br ^bb11 loc(#loc30)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc30)
  ^bb12:  // pred: ^bb11
    cir.return loc(#loc32)
  } loc(#loc78)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"void goodG2B2()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc49)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc86)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc54)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc55)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc87)
    cir.br ^bb1 loc(#loc88)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @staticFive : !cir.ptr<!s32i> loc(#loc65)
    %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc59)
    %5 = cir.const #cir.int<5> : !s32i loc(#loc60)
    %6 = cir.cmp(eq, %4, %5) : !s32i, !cir.bool loc(#loc89)
    cir.brcond %6 ^bb2, ^bb3 loc(#loc90)
  ^bb2:  // pred: ^bb1
    %7 = cir.const #cir.int<5> : !s32i loc(#loc62)
    %8 = cir.const #cir.int<1> : !s32i loc(#loc63)
    %9 = cir.binop(add, %7, %8) nsw : !s32i loc(#loc62)
    cir.store %9, %0 : !s32i, !cir.ptr<!s32i> loc(#loc91)
    cir.br ^bb3 loc(#loc58)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc58)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc49)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc49)
  ^bb6:  // pred: ^bb5
    %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc49)
    %11 = cir.const #cir.int<5> : !s32i loc(#loc49)
    %12 = cir.cmp(gt, %10, %11) : !s32i, !cir.bool loc(#loc49)
    cir.brcond %12 ^bb7, ^bb8 loc(#loc49)
  ^bb7:  // pred: ^bb6
    cir.br ^bb9 loc(#loc49)
  ^bb8:  // pred: ^bb6
    %13 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 20>> loc(#loc49)
    %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc49)
    %15 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 39>> loc(#loc49)
    %16 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 39>>), !cir.ptr<!s8i> loc(#loc49)
    %17 = cir.const #cir.int<81> : !s32i loc(#loc49)
    %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc49)
    %19 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc49)
    %20 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc49)
    cir.call @__assert_fail(%14, %16, %18, %20) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) -> () extra(#fn_attr) loc(#loc49)
    cir.br ^bb9 loc(#loc49)
  ^bb9:  // 2 preds: ^bb7, ^bb8
    cir.br ^bb10 loc(#loc49)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc49)
  ^bb11:  // pred: ^bb10
    cir.return loc(#loc51)
  } loc(#loc85)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE617_Reachable_Assertion/CWE617_Reachable_Assertion__fixed_07.c":0:0)
#loc1 = loc("CWE617_Reachable_Assertion__fixed_07.c":27:1)
#loc2 = loc("CWE617_Reachable_Assertion__fixed_07.c":27:25)
#loc3 = loc("/usr/include/assert.h":69:1)
#loc4 = loc("/usr/include/assert.h":71:43)
#loc5 = loc("CWE617_Reachable_Assertion__fixed_07.c":42:5)
#loc6 = loc("CWE617_Reachable_Assertion__fixed_07.c":31:1)
#loc7 = loc("CWE617_Reachable_Assertion__fixed_07.c":43:1)
#loc8 = loc("CWE617_Reachable_Assertion__fixed_07.c":33:5)
#loc9 = loc("CWE617_Reachable_Assertion__fixed_07.c":33:9)
#loc10 = loc("CWE617_Reachable_Assertion__fixed_07.c":35:13)
#loc11 = loc("CWE617_Reachable_Assertion__fixed_07.c":35:12)
#loc12 = loc("CWE617_Reachable_Assertion__fixed_07.c":35:5)
#loc13 = loc("CWE617_Reachable_Assertion__fixed_07.c":36:5)
#loc14 = loc("CWE617_Reachable_Assertion__fixed_07.c":40:5)
#loc15 = loc("CWE617_Reachable_Assertion__fixed_07.c":36:8)
#loc16 = loc("CWE617_Reachable_Assertion__fixed_07.c":36:20)
#loc17 = loc("CWE617_Reachable_Assertion__fixed_07.c":37:5)
#loc18 = loc("CWE617_Reachable_Assertion__fixed_07.c":39:16)
#loc19 = loc("CWE617_Reachable_Assertion__fixed_07.c":39:29)
#loc20 = loc("CWE617_Reachable_Assertion__fixed_07.c":39:9)
#loc21 = loc("CWE617_Reachable_Assertion__fixed_07.c":84:1)
#loc22 = loc("CWE617_Reachable_Assertion__fixed_07.c":88:1)
#loc23 = loc("CWE617_Reachable_Assertion__fixed_07.c":86:5)
#loc24 = loc("CWE617_Reachable_Assertion__fixed_07.c":86:14)
#loc25 = loc("CWE617_Reachable_Assertion__fixed_07.c":87:5)
#loc26 = loc("CWE617_Reachable_Assertion__fixed_07.c":87:14)
#loc27 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc28 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc29 = loc("CWE617_Reachable_Assertion__fixed_07.c":58:19)
#loc30 = loc("CWE617_Reachable_Assertion__fixed_07.c":66:5)
#loc31 = loc("CWE617_Reachable_Assertion__fixed_07.c":50:1)
#loc32 = loc("CWE617_Reachable_Assertion__fixed_07.c":67:1)
#loc33 = loc("CWE617_Reachable_Assertion__fixed_07.c":52:5)
#loc34 = loc("CWE617_Reachable_Assertion__fixed_07.c":52:9)
#loc35 = loc("CWE617_Reachable_Assertion__fixed_07.c":54:13)
#loc36 = loc("CWE617_Reachable_Assertion__fixed_07.c":54:12)
#loc37 = loc("CWE617_Reachable_Assertion__fixed_07.c":54:5)
#loc38 = loc("CWE617_Reachable_Assertion__fixed_07.c":55:5)
#loc39 = loc("CWE617_Reachable_Assertion__fixed_07.c":64:5)
#loc40 = loc("CWE617_Reachable_Assertion__fixed_07.c":55:8)
#loc41 = loc("CWE617_Reachable_Assertion__fixed_07.c":55:20)
#loc42 = loc("CWE617_Reachable_Assertion__fixed_07.c":56:5)
#loc43 = loc("CWE617_Reachable_Assertion__fixed_07.c":59:5)
#loc44 = loc("CWE617_Reachable_Assertion__fixed_07.c":61:5)
#loc45 = loc("CWE617_Reachable_Assertion__fixed_07.c":58:9)
#loc46 = loc("CWE617_Reachable_Assertion__fixed_07.c":63:16)
#loc47 = loc("CWE617_Reachable_Assertion__fixed_07.c":63:29)
#loc48 = loc("CWE617_Reachable_Assertion__fixed_07.c":63:9)
#loc49 = loc("CWE617_Reachable_Assertion__fixed_07.c":81:5)
#loc50 = loc("CWE617_Reachable_Assertion__fixed_07.c":70:1)
#loc51 = loc("CWE617_Reachable_Assertion__fixed_07.c":82:1)
#loc52 = loc("CWE617_Reachable_Assertion__fixed_07.c":72:5)
#loc53 = loc("CWE617_Reachable_Assertion__fixed_07.c":72:9)
#loc54 = loc("CWE617_Reachable_Assertion__fixed_07.c":74:13)
#loc55 = loc("CWE617_Reachable_Assertion__fixed_07.c":74:12)
#loc56 = loc("CWE617_Reachable_Assertion__fixed_07.c":74:5)
#loc57 = loc("CWE617_Reachable_Assertion__fixed_07.c":75:5)
#loc58 = loc("CWE617_Reachable_Assertion__fixed_07.c":79:5)
#loc59 = loc("CWE617_Reachable_Assertion__fixed_07.c":75:8)
#loc60 = loc("CWE617_Reachable_Assertion__fixed_07.c":75:20)
#loc61 = loc("CWE617_Reachable_Assertion__fixed_07.c":76:5)
#loc62 = loc("CWE617_Reachable_Assertion__fixed_07.c":78:16)
#loc63 = loc("CWE617_Reachable_Assertion__fixed_07.c":78:29)
#loc64 = loc("CWE617_Reachable_Assertion__fixed_07.c":78:9)
#loc65 = loc(fused[#loc1, #loc2])
#loc66 = loc(fused[#loc3, #loc4])
#loc67 = loc(fused[#loc6, #loc7])
#loc68 = loc(fused[#loc8, #loc9])
#loc69 = loc(fused[#loc12, #loc10])
#loc70 = loc(fused[#loc13, #loc14])
#loc71 = loc(fused[#loc15, #loc16])
#loc72 = loc(fused[#loc17, #loc14])
#loc73 = loc(fused[#loc20, #loc19])
#loc74 = loc(fused[#loc21, #loc22])
#loc75 = loc(fused[#loc23, #loc24])
#loc76 = loc(fused[#loc25, #loc26])
#loc77 = loc(fused[#loc27, #loc28])
#loc78 = loc(fused[#loc31, #loc32])
#loc79 = loc(fused[#loc33, #loc34])
#loc80 = loc(fused[#loc37, #loc35])
#loc81 = loc(fused[#loc38, #loc39])
#loc82 = loc(fused[#loc40, #loc41])
#loc83 = loc(fused[#loc42, #loc43, #loc44, #loc39])
#loc84 = loc(fused[#loc48, #loc47])
#loc85 = loc(fused[#loc50, #loc51])
#loc86 = loc(fused[#loc52, #loc53])
#loc87 = loc(fused[#loc56, #loc54])
#loc88 = loc(fused[#loc57, #loc58])
#loc89 = loc(fused[#loc59, #loc60])
#loc90 = loc(fused[#loc61, #loc58])
#loc91 = loc(fused[#loc64, #loc63])
