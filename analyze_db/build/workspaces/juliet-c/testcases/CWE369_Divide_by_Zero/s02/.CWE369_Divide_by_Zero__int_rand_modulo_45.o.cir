!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE369_Divide_by_Zero/s02/CWE369_Divide_by_Zero__int_rand_modulo_45.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e", "dlti.endianness" = "little">} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc88)
  cir.global "private" internal dsolocal @CWE369_Divide_by_Zero__int_rand_modulo_45_badData = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc89)
  cir.func no_proto @CWE369_Divide_by_Zero__int_rand_modulo_45_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc91)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc9)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc10)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc92)
    %3 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc12)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc12)
    %5 = cir.binop(and, %3, %4) : !s32i loc(#loc12)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc12)
    %7 = cir.ternary(%6, true {
      %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc12)
      %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc12)
      %14 = cir.const #cir.int<30> : !s32i loc(#loc12)
      %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc12)
      %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc12)
      %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc12)
      %18 = cir.const #cir.int<15> : !s32i loc(#loc12)
      %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc12)
      %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc12)
      %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc12)
      %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc12)
      %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc12)
      cir.yield %23 : !u32i loc(#loc12)
    }, false {
      %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc12)
      %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc12)
      %14 = cir.const #cir.int<30> : !s32i loc(#loc12)
      %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc12)
      %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc12)
      %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc12)
      %18 = cir.const #cir.int<15> : !s32i loc(#loc12)
      %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc12)
      %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc12)
      %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc12)
      %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc12)
      %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc12)
      %24 = cir.unary(minus, %23) : !u32i, !u32i loc(#loc12)
      %25 = cir.const #cir.int<1> : !s32i loc(#loc12)
      %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc12)
      %27 = cir.binop(sub, %24, %26) : !u32i loc(#loc12)
      cir.yield %27 : !u32i loc(#loc12)
    }) : (!cir.bool) -> !u32i loc(#loc12)
    %8 = cir.cast(integral, %7 : !u32i), !s32i loc(#loc12)
    cir.store %8, %0 : !s32i, !cir.ptr<!s32i> loc(#loc93)
    %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc14)
    %10 = cir.get_global @CWE369_Divide_by_Zero__int_rand_modulo_45_badData : !cir.ptr<!s32i> loc(#loc89)
    cir.store %9, %10 : !s32i, !cir.ptr<!s32i> loc(#loc94)
    %11 = cir.get_global @badSink : !cir.ptr<!cir.func<()>> loc(#loc95)
    cir.call %11() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc16)
    cir.return loc(#loc6)
  } loc(#loc90)
  cir.func no_proto @CWE369_Divide_by_Zero__int_rand_modulo_45_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc97)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc20)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc98)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc22)
    cir.return loc(#loc19)
  } loc(#loc96)
  cir.func private @printIntLine(!s32i) loc(#loc99)
  cir.func no_proto internal private @badSink() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc101)
    %1 = cir.get_global @CWE369_Divide_by_Zero__int_rand_modulo_45_badData : !cir.ptr<!s32i> loc(#loc89)
    %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc29)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc101)
    %3 = cir.const #cir.int<100> : !s32i loc(#loc30)
    %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc31)
    %5 = cir.binop(rem, %3, %4) : !s32i loc(#loc102)
    cir.call @printIntLine(%5) : (!s32i) -> () loc(#loc32)
    cir.return loc(#loc27)
  } loc(#loc100)
  cir.global "private" internal dsolocal @CWE369_Divide_by_Zero__int_rand_modulo_45_goodG2BData = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc103)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc105)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc39)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc40)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc106)
    %3 = cir.const #cir.int<7> : !s32i loc(#loc42)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc107)
    %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc44)
    %5 = cir.get_global @CWE369_Divide_by_Zero__int_rand_modulo_45_goodG2BData : !cir.ptr<!s32i> loc(#loc103)
    cir.store %4, %5 : !s32i, !cir.ptr<!s32i> loc(#loc108)
    %6 = cir.get_global @goodG2BSink : !cir.ptr<!cir.func<()>> loc(#loc109)
    cir.call %6() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc46)
    cir.return loc(#loc36)
  } loc(#loc104)
  cir.func no_proto internal private @goodG2BSink() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc111)
    %1 = cir.get_global @CWE369_Divide_by_Zero__int_rand_modulo_45_goodG2BData : !cir.ptr<!s32i> loc(#loc103)
    %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc51)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc111)
    %3 = cir.const #cir.int<100> : !s32i loc(#loc52)
    %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc53)
    %5 = cir.binop(rem, %3, %4) : !s32i loc(#loc112)
    cir.call @printIntLine(%5) : (!s32i) -> () loc(#loc54)
    cir.return loc(#loc49)
  } loc(#loc110)
  cir.global "private" internal dsolocal @CWE369_Divide_by_Zero__int_rand_modulo_45_goodB2GData = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc113)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc115)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc61)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc62)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc116)
    %3 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc64)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc64)
    %5 = cir.binop(and, %3, %4) : !s32i loc(#loc64)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc64)
    %7 = cir.ternary(%6, true {
      %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc64)
      %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc64)
      %14 = cir.const #cir.int<30> : !s32i loc(#loc64)
      %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc64)
      %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc64)
      %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc64)
      %18 = cir.const #cir.int<15> : !s32i loc(#loc64)
      %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc64)
      %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc64)
      %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc64)
      %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc64)
      %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc64)
      cir.yield %23 : !u32i loc(#loc64)
    }, false {
      %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc64)
      %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc64)
      %14 = cir.const #cir.int<30> : !s32i loc(#loc64)
      %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc64)
      %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc64)
      %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc64)
      %18 = cir.const #cir.int<15> : !s32i loc(#loc64)
      %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc64)
      %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc64)
      %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc64)
      %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc64)
      %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc64)
      %24 = cir.unary(minus, %23) : !u32i, !u32i loc(#loc64)
      %25 = cir.const #cir.int<1> : !s32i loc(#loc64)
      %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc64)
      %27 = cir.binop(sub, %24, %26) : !u32i loc(#loc64)
      cir.yield %27 : !u32i loc(#loc64)
    }) : (!cir.bool) -> !u32i loc(#loc64)
    %8 = cir.cast(integral, %7 : !u32i), !s32i loc(#loc64)
    cir.store %8, %0 : !s32i, !cir.ptr<!s32i> loc(#loc117)
    %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc66)
    %10 = cir.get_global @CWE369_Divide_by_Zero__int_rand_modulo_45_goodB2GData : !cir.ptr<!s32i> loc(#loc113)
    cir.store %9, %10 : !s32i, !cir.ptr<!s32i> loc(#loc118)
    %11 = cir.get_global @goodB2GSink : !cir.ptr<!cir.func<()>> loc(#loc119)
    cir.call %11() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc68)
    cir.return loc(#loc58)
  } loc(#loc114)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc120)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"This would result in a divide by zero\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc72)
  cir.func no_proto internal private @goodB2GSink() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc122)
    %1 = cir.get_global @CWE369_Divide_by_Zero__int_rand_modulo_45_goodB2GData : !cir.ptr<!s32i> loc(#loc113)
    %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc76)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc122)
    cir.scope {
      %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc79)
      %4 = cir.const #cir.int<0> : !s32i loc(#loc80)
      %5 = cir.cmp(ne, %3, %4) : !s32i, !cir.bool loc(#loc124)
      cir.if %5 {
        %6 = cir.const #cir.int<100> : !s32i loc(#loc84)
        %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc85)
        %8 = cir.binop(rem, %6, %7) : !s32i loc(#loc126)
        cir.call @printIntLine(%8) : (!s32i) -> () loc(#loc86)
      } else {
        %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc72)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc72)
        cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc87)
      } loc(#loc125)
    } loc(#loc123)
    cir.return loc(#loc74)
  } loc(#loc121)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE369_Divide_by_Zero/s02/CWE369_Divide_by_Zero__int_rand_modulo_45.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("CWE369_Divide_by_Zero__int_rand_modulo_45.c":20:1)
#loc4 = loc("CWE369_Divide_by_Zero__int_rand_modulo_45.c":20:12)
#loc5 = loc("CWE369_Divide_by_Zero__int_rand_modulo_45.c":33:1)
#loc6 = loc("CWE369_Divide_by_Zero__int_rand_modulo_45.c":42:1)
#loc7 = loc("CWE369_Divide_by_Zero__int_rand_modulo_45.c":35:5)
#loc8 = loc("CWE369_Divide_by_Zero__int_rand_modulo_45.c":35:9)
#loc9 = loc("CWE369_Divide_by_Zero__int_rand_modulo_45.c":37:13)
#loc10 = loc("CWE369_Divide_by_Zero__int_rand_modulo_45.c":37:12)
#loc11 = loc("CWE369_Divide_by_Zero__int_rand_modulo_45.c":37:5)
#loc12 = loc("CWE369_Divide_by_Zero__int_rand_modulo_45.c":39:12)
#loc13 = loc("CWE369_Divide_by_Zero__int_rand_modulo_45.c":39:5)
#loc14 = loc("CWE369_Divide_by_Zero__int_rand_modulo_45.c":40:57)
#loc15 = loc("CWE369_Divide_by_Zero__int_rand_modulo_45.c":40:5)
#loc16 = loc("CWE369_Divide_by_Zero__int_rand_modulo_45.c":41:5)
#loc17 = loc("CWE369_Divide_by_Zero__int_rand_modulo_45.c":41:13)
#loc18 = loc("CWE369_Divide_by_Zero__int_rand_modulo_45.c":93:1)
#loc19 = loc("CWE369_Divide_by_Zero__int_rand_modulo_45.c":97:1)
#loc20 = loc("CWE369_Divide_by_Zero__int_rand_modulo_45.c":95:5)
#loc21 = loc("CWE369_Divide_by_Zero__int_rand_modulo_45.c":95:13)
#loc22 = loc("CWE369_Divide_by_Zero__int_rand_modulo_45.c":96:5)
#loc23 = loc("CWE369_Divide_by_Zero__int_rand_modulo_45.c":96:13)
#loc24 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc25 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc26 = loc("CWE369_Divide_by_Zero__int_rand_modulo_45.c":26:1)
#loc27 = loc("CWE369_Divide_by_Zero__int_rand_modulo_45.c":31:1)
#loc28 = loc("CWE369_Divide_by_Zero__int_rand_modulo_45.c":28:5)
#loc29 = loc("CWE369_Divide_by_Zero__int_rand_modulo_45.c":28:16)
#loc30 = loc("CWE369_Divide_by_Zero__int_rand_modulo_45.c":30:18)
#loc31 = loc("CWE369_Divide_by_Zero__int_rand_modulo_45.c":30:24)
#loc32 = loc("CWE369_Divide_by_Zero__int_rand_modulo_45.c":30:5)
#loc33 = loc("CWE369_Divide_by_Zero__int_rand_modulo_45.c":21:1)
#loc34 = loc("CWE369_Divide_by_Zero__int_rand_modulo_45.c":21:12)
#loc35 = loc("CWE369_Divide_by_Zero__int_rand_modulo_45.c":56:1)
#loc36 = loc("CWE369_Divide_by_Zero__int_rand_modulo_45.c":65:1)
#loc37 = loc("CWE369_Divide_by_Zero__int_rand_modulo_45.c":58:5)
#loc38 = loc("CWE369_Divide_by_Zero__int_rand_modulo_45.c":58:9)
#loc39 = loc("CWE369_Divide_by_Zero__int_rand_modulo_45.c":60:13)
#loc40 = loc("CWE369_Divide_by_Zero__int_rand_modulo_45.c":60:12)
#loc41 = loc("CWE369_Divide_by_Zero__int_rand_modulo_45.c":60:5)
#loc42 = loc("CWE369_Divide_by_Zero__int_rand_modulo_45.c":62:12)
#loc43 = loc("CWE369_Divide_by_Zero__int_rand_modulo_45.c":62:5)
#loc44 = loc("CWE369_Divide_by_Zero__int_rand_modulo_45.c":63:61)
#loc45 = loc("CWE369_Divide_by_Zero__int_rand_modulo_45.c":63:5)
#loc46 = loc("CWE369_Divide_by_Zero__int_rand_modulo_45.c":64:5)
#loc47 = loc("CWE369_Divide_by_Zero__int_rand_modulo_45.c":64:17)
#loc48 = loc("CWE369_Divide_by_Zero__int_rand_modulo_45.c":49:1)
#loc49 = loc("CWE369_Divide_by_Zero__int_rand_modulo_45.c":54:1)
#loc50 = loc("CWE369_Divide_by_Zero__int_rand_modulo_45.c":51:5)
#loc51 = loc("CWE369_Divide_by_Zero__int_rand_modulo_45.c":51:16)
#loc52 = loc("CWE369_Divide_by_Zero__int_rand_modulo_45.c":53:18)
#loc53 = loc("CWE369_Divide_by_Zero__int_rand_modulo_45.c":53:24)
#loc54 = loc("CWE369_Divide_by_Zero__int_rand_modulo_45.c":53:5)
#loc55 = loc("CWE369_Divide_by_Zero__int_rand_modulo_45.c":22:1)
#loc56 = loc("CWE369_Divide_by_Zero__int_rand_modulo_45.c":22:12)
#loc57 = loc("CWE369_Divide_by_Zero__int_rand_modulo_45.c":82:1)
#loc58 = loc("CWE369_Divide_by_Zero__int_rand_modulo_45.c":91:1)
#loc59 = loc("CWE369_Divide_by_Zero__int_rand_modulo_45.c":84:5)
#loc60 = loc("CWE369_Divide_by_Zero__int_rand_modulo_45.c":84:9)
#loc61 = loc("CWE369_Divide_by_Zero__int_rand_modulo_45.c":86:13)
#loc62 = loc("CWE369_Divide_by_Zero__int_rand_modulo_45.c":86:12)
#loc63 = loc("CWE369_Divide_by_Zero__int_rand_modulo_45.c":86:5)
#loc64 = loc("CWE369_Divide_by_Zero__int_rand_modulo_45.c":88:12)
#loc65 = loc("CWE369_Divide_by_Zero__int_rand_modulo_45.c":88:5)
#loc66 = loc("CWE369_Divide_by_Zero__int_rand_modulo_45.c":89:61)
#loc67 = loc("CWE369_Divide_by_Zero__int_rand_modulo_45.c":89:5)
#loc68 = loc("CWE369_Divide_by_Zero__int_rand_modulo_45.c":90:5)
#loc69 = loc("CWE369_Divide_by_Zero__int_rand_modulo_45.c":90:17)
#loc70 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc71 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc72 = loc("CWE369_Divide_by_Zero__int_rand_modulo_45.c":78:19)
#loc73 = loc("CWE369_Divide_by_Zero__int_rand_modulo_45.c":68:1)
#loc74 = loc("CWE369_Divide_by_Zero__int_rand_modulo_45.c":80:1)
#loc75 = loc("CWE369_Divide_by_Zero__int_rand_modulo_45.c":70:5)
#loc76 = loc("CWE369_Divide_by_Zero__int_rand_modulo_45.c":70:16)
#loc77 = loc("CWE369_Divide_by_Zero__int_rand_modulo_45.c":72:5)
#loc78 = loc("CWE369_Divide_by_Zero__int_rand_modulo_45.c":79:5)
#loc79 = loc("CWE369_Divide_by_Zero__int_rand_modulo_45.c":72:9)
#loc80 = loc("CWE369_Divide_by_Zero__int_rand_modulo_45.c":72:17)
#loc81 = loc("CWE369_Divide_by_Zero__int_rand_modulo_45.c":73:5)
#loc82 = loc("CWE369_Divide_by_Zero__int_rand_modulo_45.c":75:5)
#loc83 = loc("CWE369_Divide_by_Zero__int_rand_modulo_45.c":77:5)
#loc84 = loc("CWE369_Divide_by_Zero__int_rand_modulo_45.c":74:22)
#loc85 = loc("CWE369_Divide_by_Zero__int_rand_modulo_45.c":74:28)
#loc86 = loc("CWE369_Divide_by_Zero__int_rand_modulo_45.c":74:9)
#loc87 = loc("CWE369_Divide_by_Zero__int_rand_modulo_45.c":78:9)
#loc88 = loc(fused[#loc1, #loc2])
#loc89 = loc(fused[#loc3, #loc4])
#loc90 = loc(fused[#loc5, #loc6])
#loc91 = loc(fused[#loc7, #loc8])
#loc92 = loc(fused[#loc11, #loc9])
#loc93 = loc(fused[#loc13, #loc12])
#loc94 = loc(fused[#loc15, #loc14])
#loc95 = loc(fused[#loc16, #loc17])
#loc96 = loc(fused[#loc18, #loc19])
#loc97 = loc(fused[#loc20, #loc21])
#loc98 = loc(fused[#loc22, #loc23])
#loc99 = loc(fused[#loc24, #loc25])
#loc100 = loc(fused[#loc26, #loc27])
#loc101 = loc(fused[#loc28, #loc29])
#loc102 = loc(fused[#loc30, #loc31])
#loc103 = loc(fused[#loc33, #loc34])
#loc104 = loc(fused[#loc35, #loc36])
#loc105 = loc(fused[#loc37, #loc38])
#loc106 = loc(fused[#loc41, #loc39])
#loc107 = loc(fused[#loc43, #loc42])
#loc108 = loc(fused[#loc45, #loc44])
#loc109 = loc(fused[#loc46, #loc47])
#loc110 = loc(fused[#loc48, #loc49])
#loc111 = loc(fused[#loc50, #loc51])
#loc112 = loc(fused[#loc52, #loc53])
#loc113 = loc(fused[#loc55, #loc56])
#loc114 = loc(fused[#loc57, #loc58])
#loc115 = loc(fused[#loc59, #loc60])
#loc116 = loc(fused[#loc63, #loc61])
#loc117 = loc(fused[#loc65, #loc64])
#loc118 = loc(fused[#loc67, #loc66])
#loc119 = loc(fused[#loc68, #loc69])
#loc120 = loc(fused[#loc70, #loc71])
#loc121 = loc(fused[#loc73, #loc74])
#loc122 = loc(fused[#loc75, #loc76])
#loc123 = loc(fused[#loc77, #loc78])
#loc124 = loc(fused[#loc79, #loc80])
#loc125 = loc(fused[#loc81, #loc82, #loc83, #loc78])
#loc126 = loc(fused[#loc84, #loc85])
