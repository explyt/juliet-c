!s32i = !cir.int<s, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s04/CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_32.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @printIntLine(!s32i) loc(#loc117)
  cir.func no_proto  @CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_32_bad() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc119)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>>, ["dataPtr1", init] {alignment = 8 : i64} loc(#loc120)
    %2 = cir.alloca !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>>, ["dataPtr2", init] {alignment = 8 : i64} loc(#loc121)
    %3 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc122)
    cir.store %0, %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>> loc(#loc120)
    cir.store %0, %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>> loc(#loc121)
    %4 = cir.const #cir.int<50> : !s32i loc(#loc12)
    %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc12)
    %6 = cir.const #cir.int<4> : !u64i loc(#loc12)
    %7 = cir.binop(mul, %5, %6) : !u64i loc(#loc12)
    %8 = cir.alloca !u8i, !cir.ptr<!u8i>, %7 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc12)
    %9 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc123)
    %10 = cir.cast(bitcast, %8 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc12)
    %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc12)
    cir.store %11, %3 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc122)
    %12 = cir.const #cir.int<100> : !s32i loc(#loc14)
    %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc14)
    %14 = cir.const #cir.int<4> : !u64i loc(#loc14)
    %15 = cir.binop(mul, %13, %14) : !u64i loc(#loc14)
    %16 = cir.alloca !u8i, !cir.ptr<!u8i>, %15 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc14)
    %17 = cir.cast(bitcast, %16 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc14)
    %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc14)
    cir.store %18, %9 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc123)
    cir.scope {
      %19 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data", init] {alignment = 8 : i64} loc(#loc125)
      %20 = cir.load deref %1 : !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc18)
      %21 = cir.load %20 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc19)
      cir.store %21, %19 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc125)
      %22 = cir.load %3 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc20)
      cir.store %22, %19 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc126)
      %23 = cir.load %19 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc22)
      %24 = cir.load deref %1 : !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc23)
      cir.store %23, %24 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc127)
    } loc(#loc124)
    cir.scope {
      %19 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data", init] {alignment = 8 : i64} loc(#loc129)
      %20 = cir.load deref %2 : !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc28)
      %21 = cir.load %20 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc29)
      cir.store %21, %19 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc129)
      cir.scope {
        %22 = cir.alloca !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc131)
        %23 = cir.const #cir.zero : !cir.array<!s32i x 100> loc(#loc131)
        cir.store %23, %22 : !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>> loc(#loc131)
        cir.scope {
          %24 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc133)
          cir.scope {
            %29 = cir.const #cir.int<0> : !s32i loc(#loc40)
            %30 = cir.cast(integral, %29 : !s32i), !u64i loc(#loc40)
            cir.store %30, %24 : !u64i, !cir.ptr<!u64i> loc(#loc135)
            cir.for : cond {
              %31 = cir.load %24 : !cir.ptr<!u64i>, !u64i loc(#loc42)
              %32 = cir.const #cir.int<100> : !s32i loc(#loc43)
              %33 = cir.cast(integral, %32 : !s32i), !u64i loc(#loc43)
              %34 = cir.cmp(lt, %31, %33) : !u64i, !s32i loc(#loc136)
              %35 = cir.cast(int_to_bool, %34 : !s32i), !cir.bool loc(#loc44)
              cir.condition(%35) loc(#loc44)
            } body {
              cir.scope {
                %31 = cir.load %24 : !cir.ptr<!u64i>, !u64i loc(#loc46)
                %32 = cir.cast(array_to_ptrdecay, %22 : !cir.ptr<!cir.array<!s32i x 100>>), !cir.ptr<!s32i> loc(#loc47)
                %33 = cir.ptr_stride(%32 : !cir.ptr<!s32i>, %31 : !u64i), !cir.ptr<!s32i> loc(#loc47)
                %34 = cir.load %33 : !cir.ptr<!s32i>, !s32i loc(#loc47)
                %35 = cir.load %19 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc48)
                %36 = cir.load %24 : !cir.ptr<!u64i>, !u64i loc(#loc49)
                %37 = cir.ptr_stride(%35 : !cir.ptr<!s32i>, %36 : !u64i), !cir.ptr<!s32i> loc(#loc50)
                cir.store %34, %37 : !s32i, !cir.ptr<!s32i> loc(#loc138)
              } loc(#loc137)
              cir.yield loc(#loc39)
            } step {
              %31 = cir.load %24 : !cir.ptr<!u64i>, !u64i loc(#loc52)
              %32 = cir.unary(inc, %31) : !u64i, !u64i loc(#loc53)
              cir.store %32, %24 : !u64i, !cir.ptr<!u64i> loc(#loc139)
              cir.yield loc(#loc134)
            } loc(#loc134)
          } loc(#loc134)
          %25 = cir.load %19 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc54)
          %26 = cir.const #cir.int<0> : !s32i loc(#loc55)
          %27 = cir.ptr_stride(%25 : !cir.ptr<!s32i>, %26 : !s32i), !cir.ptr<!s32i> loc(#loc56)
          %28 = cir.load %27 : !cir.ptr<!s32i>, !s32i loc(#loc54)
          cir.call @printIntLine(%28) : (!s32i) -> () loc(#loc57)
        } loc(#loc132)
      } loc(#loc130)
    } loc(#loc128)
    cir.return loc(#loc4)
  } loc(#loc118)
  cir.func no_proto  @CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_32_good() extra(#fn_attr) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc141)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc60)
    cir.return loc(#loc59)
  } loc(#loc140)
  cir.func no_proto internal private  @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc143)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>>, ["dataPtr1", init] {alignment = 8 : i64} loc(#loc144)
    %2 = cir.alloca !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>>, ["dataPtr2", init] {alignment = 8 : i64} loc(#loc145)
    %3 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc146)
    cir.store %0, %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>> loc(#loc144)
    cir.store %0, %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>> loc(#loc145)
    %4 = cir.const #cir.int<50> : !s32i loc(#loc71)
    %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc71)
    %6 = cir.const #cir.int<4> : !u64i loc(#loc71)
    %7 = cir.binop(mul, %5, %6) : !u64i loc(#loc71)
    %8 = cir.alloca !u8i, !cir.ptr<!u8i>, %7 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc71)
    %9 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc147)
    %10 = cir.cast(bitcast, %8 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc71)
    %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc71)
    cir.store %11, %3 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc146)
    %12 = cir.const #cir.int<100> : !s32i loc(#loc73)
    %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc73)
    %14 = cir.const #cir.int<4> : !u64i loc(#loc73)
    %15 = cir.binop(mul, %13, %14) : !u64i loc(#loc73)
    %16 = cir.alloca !u8i, !cir.ptr<!u8i>, %15 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc73)
    %17 = cir.cast(bitcast, %16 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc73)
    %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc73)
    cir.store %18, %9 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc147)
    cir.scope {
      %19 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data", init] {alignment = 8 : i64} loc(#loc149)
      %20 = cir.load deref %1 : !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc77)
      %21 = cir.load %20 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc78)
      cir.store %21, %19 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc149)
      %22 = cir.load %9 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc79)
      cir.store %22, %19 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc150)
      %23 = cir.load %19 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc81)
      %24 = cir.load deref %1 : !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc82)
      cir.store %23, %24 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc151)
    } loc(#loc148)
    cir.scope {
      %19 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data", init] {alignment = 8 : i64} loc(#loc153)
      %20 = cir.load deref %2 : !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc87)
      %21 = cir.load %20 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc88)
      cir.store %21, %19 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc153)
      cir.scope {
        %22 = cir.alloca !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc155)
        %23 = cir.const #cir.zero : !cir.array<!s32i x 100> loc(#loc155)
        cir.store %23, %22 : !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>> loc(#loc155)
        cir.scope {
          %24 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc157)
          cir.scope {
            %29 = cir.const #cir.int<0> : !s32i loc(#loc99)
            %30 = cir.cast(integral, %29 : !s32i), !u64i loc(#loc99)
            cir.store %30, %24 : !u64i, !cir.ptr<!u64i> loc(#loc159)
            cir.for : cond {
              %31 = cir.load %24 : !cir.ptr<!u64i>, !u64i loc(#loc101)
              %32 = cir.const #cir.int<100> : !s32i loc(#loc102)
              %33 = cir.cast(integral, %32 : !s32i), !u64i loc(#loc102)
              %34 = cir.cmp(lt, %31, %33) : !u64i, !s32i loc(#loc160)
              %35 = cir.cast(int_to_bool, %34 : !s32i), !cir.bool loc(#loc103)
              cir.condition(%35) loc(#loc103)
            } body {
              cir.scope {
                %31 = cir.load %24 : !cir.ptr<!u64i>, !u64i loc(#loc105)
                %32 = cir.cast(array_to_ptrdecay, %22 : !cir.ptr<!cir.array<!s32i x 100>>), !cir.ptr<!s32i> loc(#loc106)
                %33 = cir.ptr_stride(%32 : !cir.ptr<!s32i>, %31 : !u64i), !cir.ptr<!s32i> loc(#loc106)
                %34 = cir.load %33 : !cir.ptr<!s32i>, !s32i loc(#loc106)
                %35 = cir.load %19 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc107)
                %36 = cir.load %24 : !cir.ptr<!u64i>, !u64i loc(#loc108)
                %37 = cir.ptr_stride(%35 : !cir.ptr<!s32i>, %36 : !u64i), !cir.ptr<!s32i> loc(#loc109)
                cir.store %34, %37 : !s32i, !cir.ptr<!s32i> loc(#loc162)
              } loc(#loc161)
              cir.yield loc(#loc98)
            } step {
              %31 = cir.load %24 : !cir.ptr<!u64i>, !u64i loc(#loc111)
              %32 = cir.unary(inc, %31) : !u64i, !u64i loc(#loc112)
              cir.store %32, %24 : !u64i, !cir.ptr<!u64i> loc(#loc163)
              cir.yield loc(#loc158)
            } loc(#loc158)
          } loc(#loc158)
          %25 = cir.load %19 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc113)
          %26 = cir.const #cir.int<0> : !s32i loc(#loc114)
          %27 = cir.ptr_stride(%25 : !cir.ptr<!s32i>, %26 : !s32i), !cir.ptr<!s32i> loc(#loc115)
          %28 = cir.load %27 : !cir.ptr<!s32i>, !s32i loc(#loc113)
          cir.call @printIntLine(%28) : (!s32i) -> () loc(#loc116)
        } loc(#loc156)
      } loc(#loc154)
    } loc(#loc152)
    cir.return loc(#loc63)
  } loc(#loc142)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s04/CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_32.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_32.c":21:1)
#loc4 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_32.c":50:1)
#loc5 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_32.c":23:5)
#loc6 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_32.c":23:11)
#loc7 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_32.c":24:5)
#loc8 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_32.c":24:24)
#loc9 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_32.c":25:5)
#loc10 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_32.c":25:24)
#loc11 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_32.c":26:5)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_32.c":26:34)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_32.c":27:5)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_32.c":27:35)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_32.c":28:5)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_32.c":34:5)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_32.c":29:9)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_32.c":29:23)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_32.c":29:22)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_32.c":32:16)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_32.c":32:9)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_32.c":33:21)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_32.c":33:10)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_32.c":33:9)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_32.c":35:5)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_32.c":49:5)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_32.c":36:9)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_32.c":36:23)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_32.c":36:22)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_32.c":37:9)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_32.c":48:9)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_32.c":38:13)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_32.c":38:33)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_32.c":39:13)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_32.c":47:13)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_32.c":40:17)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_32.c":40:24)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_32.c":42:17)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_32.c":45:17)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_32.c":42:26)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_32.c":42:22)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_32.c":42:29)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_32.c":42:33)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_32.c":42:31)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_32.c":43:17)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_32.c":44:38)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_32.c":44:31)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_32.c":44:21)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_32.c":44:26)
#loc50 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_32.c":44:27)
#loc51 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_32.c":44:39)
#loc52 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_32.c":42:39)
#loc53 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_32.c":42:38)
#loc54 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_32.c":46:30)
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_32.c":46:35)
#loc56 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_32.c":46:36)
#loc57 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_32.c":46:17)
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_32.c":87:1)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_32.c":90:1)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_32.c":89:5)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_32.c":89:13)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_32.c":57:1)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_32.c":85:1)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_32.c":59:5)
#loc65 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_32.c":59:11)
#loc66 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_32.c":60:5)
#loc67 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_32.c":60:24)
#loc68 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_32.c":61:5)
#loc69 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_32.c":61:24)
#loc70 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_32.c":62:5)
#loc71 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_32.c":62:34)
#loc72 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_32.c":63:5)
#loc73 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_32.c":63:35)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_32.c":64:5)
#loc75 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_32.c":69:5)
#loc76 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_32.c":65:9)
#loc77 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_32.c":65:23)
#loc78 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_32.c":65:22)
#loc79 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_32.c":67:16)
#loc80 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_32.c":67:9)
#loc81 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_32.c":68:21)
#loc82 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_32.c":68:10)
#loc83 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_32.c":68:9)
#loc84 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_32.c":70:5)
#loc85 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_32.c":84:5)
#loc86 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_32.c":71:9)
#loc87 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_32.c":71:23)
#loc88 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_32.c":71:22)
#loc89 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_32.c":72:9)
#loc90 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_32.c":83:9)
#loc91 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_32.c":73:13)
#loc92 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_32.c":73:33)
#loc93 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_32.c":74:13)
#loc94 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_32.c":82:13)
#loc95 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_32.c":75:17)
#loc96 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_32.c":75:24)
#loc97 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_32.c":77:17)
#loc98 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_32.c":80:17)
#loc99 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_32.c":77:26)
#loc100 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_32.c":77:22)
#loc101 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_32.c":77:29)
#loc102 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_32.c":77:33)
#loc103 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_32.c":77:31)
#loc104 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_32.c":78:17)
#loc105 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_32.c":79:38)
#loc106 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_32.c":79:31)
#loc107 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_32.c":79:21)
#loc108 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_32.c":79:26)
#loc109 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_32.c":79:27)
#loc110 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_32.c":79:39)
#loc111 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_32.c":77:39)
#loc112 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_32.c":77:38)
#loc113 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_32.c":81:30)
#loc114 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_32.c":81:35)
#loc115 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_32.c":81:36)
#loc116 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_32.c":81:17)
#loc117 = loc(fused[#loc1, #loc2])
#loc118 = loc(fused[#loc3, #loc4])
#loc119 = loc(fused[#loc5, #loc6])
#loc120 = loc(fused[#loc7, #loc8])
#loc121 = loc(fused[#loc9, #loc10])
#loc122 = loc(fused[#loc11, #loc12])
#loc123 = loc(fused[#loc13, #loc14])
#loc124 = loc(fused[#loc15, #loc16])
#loc125 = loc(fused[#loc17, #loc18])
#loc126 = loc(fused[#loc21, #loc20])
#loc127 = loc(fused[#loc24, #loc22])
#loc128 = loc(fused[#loc25, #loc26])
#loc129 = loc(fused[#loc27, #loc28])
#loc130 = loc(fused[#loc30, #loc31])
#loc131 = loc(fused[#loc32, #loc33])
#loc132 = loc(fused[#loc34, #loc35])
#loc133 = loc(fused[#loc36, #loc37])
#loc134 = loc(fused[#loc38, #loc39])
#loc135 = loc(fused[#loc41, #loc40])
#loc136 = loc(fused[#loc42, #loc43])
#loc137 = loc(fused[#loc45, #loc39])
#loc138 = loc(fused[#loc48, #loc51])
#loc139 = loc(fused[#loc53, #loc52])
#loc140 = loc(fused[#loc58, #loc59])
#loc141 = loc(fused[#loc60, #loc61])
#loc142 = loc(fused[#loc62, #loc63])
#loc143 = loc(fused[#loc64, #loc65])
#loc144 = loc(fused[#loc66, #loc67])
#loc145 = loc(fused[#loc68, #loc69])
#loc146 = loc(fused[#loc70, #loc71])
#loc147 = loc(fused[#loc72, #loc73])
#loc148 = loc(fused[#loc74, #loc75])
#loc149 = loc(fused[#loc76, #loc77])
#loc150 = loc(fused[#loc80, #loc79])
#loc151 = loc(fused[#loc83, #loc81])
#loc152 = loc(fused[#loc84, #loc85])
#loc153 = loc(fused[#loc86, #loc87])
#loc154 = loc(fused[#loc89, #loc90])
#loc155 = loc(fused[#loc91, #loc92])
#loc156 = loc(fused[#loc93, #loc94])
#loc157 = loc(fused[#loc95, #loc96])
#loc158 = loc(fused[#loc97, #loc98])
#loc159 = loc(fused[#loc100, #loc99])
#loc160 = loc(fused[#loc101, #loc102])
#loc161 = loc(fused[#loc104, #loc98])
#loc162 = loc(fused[#loc107, #loc110])
#loc163 = loc(fused[#loc112, #loc111])
