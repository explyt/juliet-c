!s32i = !cir.int<s, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s04/CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_16.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @printIntLine(!s32i) loc(#loc65)
  cir.func no_proto  @CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_16_bad() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc67)
    %1 = cir.alloca !cir.array<!s32i x 50>, !cir.ptr<!cir.array<!s32i x 50>>, ["dataBadBuffer"] {alignment = 16 : i64} loc(#loc68)
    %2 = cir.alloca !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>>, ["dataGoodBuffer"] {alignment = 16 : i64} loc(#loc69)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc13)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc13)
        cir.condition(%4) loc(#loc13)
      } do {
        %3 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s32i x 50>>), !cir.ptr<!s32i> loc(#loc14)
        cir.store %3, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc71)
        cir.break loc(#loc16)
      } loc(#loc70)
    } loc(#loc70)
    cir.scope {
      %3 = cir.alloca !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc73)
      %4 = cir.const #cir.zero : !cir.array<!s32i x 100> loc(#loc73)
      cir.store %4, %3 : !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>> loc(#loc73)
      %5 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc21)
      %6 = cir.cast(bitcast, %5 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc21)
      %7 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s32i x 100>>), !cir.ptr<!s32i> loc(#loc22)
      %8 = cir.cast(bitcast, %7 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc22)
      %9 = cir.const #cir.int<100> : !s32i loc(#loc23)
      %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc23)
      %11 = cir.const #cir.int<4> : !u64i loc(#loc74)
      %12 = cir.binop(mul, %10, %11) : !u64i loc(#loc75)
      cir.libc.memcpy %12 bytes from %8 to %6 : !u64i, !cir.ptr<!void> -> !cir.ptr<!void> loc(#loc76)
      %13 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc28)
      %14 = cir.const #cir.int<0> : !s32i loc(#loc29)
      %15 = cir.ptr_stride(%13 : !cir.ptr<!s32i>, %14 : !s32i), !cir.ptr<!s32i> loc(#loc30)
      %16 = cir.load %15 : !cir.ptr<!s32i>, !s32i loc(#loc28)
      cir.call @printIntLine(%16) : (!s32i) -> () loc(#loc31)
    } loc(#loc72)
    cir.return loc(#loc4)
  } loc(#loc66)
  cir.func no_proto  @CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_16_good() extra(#fn_attr) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc78)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc34)
    cir.return loc(#loc33)
  } loc(#loc77)
  cir.func no_proto internal private  @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc80)
    %1 = cir.alloca !cir.array<!s32i x 50>, !cir.ptr<!cir.array<!s32i x 50>>, ["dataBadBuffer"] {alignment = 16 : i64} loc(#loc81)
    %2 = cir.alloca !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>>, ["dataGoodBuffer"] {alignment = 16 : i64} loc(#loc82)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc46)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc46)
        cir.condition(%4) loc(#loc46)
      } do {
        %3 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s32i x 100>>), !cir.ptr<!s32i> loc(#loc47)
        cir.store %3, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc84)
        cir.break loc(#loc49)
      } loc(#loc83)
    } loc(#loc83)
    cir.scope {
      %3 = cir.alloca !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc86)
      %4 = cir.const #cir.zero : !cir.array<!s32i x 100> loc(#loc86)
      cir.store %4, %3 : !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>> loc(#loc86)
      %5 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc54)
      %6 = cir.cast(bitcast, %5 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc54)
      %7 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s32i x 100>>), !cir.ptr<!s32i> loc(#loc55)
      %8 = cir.cast(bitcast, %7 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc55)
      %9 = cir.const #cir.int<100> : !s32i loc(#loc56)
      %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc56)
      %11 = cir.const #cir.int<4> : !u64i loc(#loc87)
      %12 = cir.binop(mul, %10, %11) : !u64i loc(#loc88)
      cir.libc.memcpy %12 bytes from %8 to %6 : !u64i, !cir.ptr<!void> -> !cir.ptr<!void> loc(#loc89)
      %13 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc61)
      %14 = cir.const #cir.int<0> : !s32i loc(#loc62)
      %15 = cir.ptr_stride(%13 : !cir.ptr<!s32i>, %14 : !s32i), !cir.ptr<!s32i> loc(#loc63)
      %16 = cir.load %15 : !cir.ptr<!s32i>, !s32i loc(#loc61)
      cir.call @printIntLine(%16) : (!s32i) -> () loc(#loc64)
    } loc(#loc85)
    cir.return loc(#loc37)
  } loc(#loc79)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s04/CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_16.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_16.c":21:1)
#loc4 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_16.c":39:1)
#loc5 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_16.c":23:5)
#loc6 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_16.c":23:11)
#loc7 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_16.c":24:5)
#loc8 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_16.c":24:25)
#loc9 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_16.c":25:5)
#loc10 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_16.c":25:27)
#loc11 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_16.c":26:5)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_16.c":32:5)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_16.c":26:11)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_16.c":30:16)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_16.c":30:9)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_16.c":31:9)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_16.c":33:5)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_16.c":38:5)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_16.c":34:9)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_16.c":34:29)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_16.c":36:16)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_16.c":36:22)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_16.c":36:30)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_16.c":36:34)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_16.c":36:44)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_16.c":36:9)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_16.c":36:45)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_16.c":37:22)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_16.c":37:27)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_16.c":37:28)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_16.c":37:9)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_16.c":65:1)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_16.c":68:1)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_16.c":67:5)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_16.c":67:13)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_16.c":46:1)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_16.c":63:1)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_16.c":48:5)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_16.c":48:11)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_16.c":49:5)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_16.c":49:25)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_16.c":50:5)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_16.c":50:27)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_16.c":51:5)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_16.c":56:5)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_16.c":51:11)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_16.c":54:16)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_16.c":54:9)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_16.c":55:9)
#loc50 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_16.c":57:5)
#loc51 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_16.c":62:5)
#loc52 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_16.c":58:9)
#loc53 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_16.c":58:29)
#loc54 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_16.c":60:16)
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_16.c":60:22)
#loc56 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_16.c":60:30)
#loc57 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_16.c":60:34)
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_16.c":60:44)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_16.c":60:9)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_16.c":60:45)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_16.c":61:22)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_16.c":61:27)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_16.c":61:28)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_16.c":61:9)
#loc65 = loc(fused[#loc1, #loc2])
#loc66 = loc(fused[#loc3, #loc4])
#loc67 = loc(fused[#loc5, #loc6])
#loc68 = loc(fused[#loc7, #loc8])
#loc69 = loc(fused[#loc9, #loc10])
#loc70 = loc(fused[#loc11, #loc12])
#loc71 = loc(fused[#loc15, #loc14])
#loc72 = loc(fused[#loc17, #loc18])
#loc73 = loc(fused[#loc19, #loc20])
#loc74 = loc(fused[#loc24, #loc25])
#loc75 = loc(fused[#loc23, #loc25])
#loc76 = loc(fused[#loc26, #loc27])
#loc77 = loc(fused[#loc32, #loc33])
#loc78 = loc(fused[#loc34, #loc35])
#loc79 = loc(fused[#loc36, #loc37])
#loc80 = loc(fused[#loc38, #loc39])
#loc81 = loc(fused[#loc40, #loc41])
#loc82 = loc(fused[#loc42, #loc43])
#loc83 = loc(fused[#loc44, #loc45])
#loc84 = loc(fused[#loc48, #loc47])
#loc85 = loc(fused[#loc50, #loc51])
#loc86 = loc(fused[#loc52, #loc53])
#loc87 = loc(fused[#loc57, #loc58])
#loc88 = loc(fused[#loc56, #loc58])
#loc89 = loc(fused[#loc59, #loc60])
