!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc7 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":29:25)
#loc8 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":29:32)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":58:29)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":58:36)
#loc134 = loc(fused[#loc7, #loc8])
#loc158 = loc(fused[#loc75, #loc76])
module @"/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e", "dlti.endianness" = "little">} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc131)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc132)
  cir.func internal private @badSource(%arg0: !cir.ptr<!s8i> loc(fused[#loc7, #loc8])) -> !cir.ptr<!s8i> extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc134)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["__retval"] {alignment = 8 : i64} loc(#loc6)
    cir.store %arg0, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc9)
    %2 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc10)
    %3 = cir.const #cir.int<50> : !s32i loc(#loc11)
    %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc11)
    %5 = cir.const #cir.int<1> : !u64i loc(#loc135)
    %6 = cir.binop(mul, %4, %5) : !u64i loc(#loc136)
    %7 = cir.call @malloc(%6) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc10)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc137)
    cir.store %8, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc138)
    cir.scope {
      %16 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc18)
      %17 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc19)
      %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc19)
      %19 = cir.cmp(eq, %16, %18) : !cir.ptr<!s8i>, !cir.bool loc(#loc140)
      cir.if %19 {
        %20 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc21)
        %21 = cir.const #cir.int<1> : !s32i loc(#loc22)
        %22 = cir.unary(minus, %21) nsw : !s32i, !s32i loc(#loc23)
        cir.call @exit(%22) : (!s32i) -> () extra(#fn_attr) loc(#loc21)
      } loc(#loc141)
    } loc(#loc139)
    %9 = cir.const #cir.int<0> : !s32i loc(#loc24)
    %10 = cir.cast(integral, %9 : !s32i), !s8i loc(#loc24)
    %11 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc25)
    %12 = cir.const #cir.int<0> : !s32i loc(#loc26)
    %13 = cir.ptr_stride(%11 : !cir.ptr<!s8i>, %12 : !s32i), !cir.ptr<!s8i> loc(#loc27)
    cir.store %10, %13 : !s8i, !cir.ptr<!s8i> loc(#loc142)
    %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc28)
    cir.store %14, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc143)
    %15 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc143)
    cir.return %15 : !cir.ptr<!s8i> loc(#loc143)
  } loc(#loc133)
  cir.func private @snprintf(!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, ...) -> !s32i extra(#fn_attr) loc(#loc144)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"%s\00" : !cir.array<!s8i x 3>> : !cir.array<!s8i x 3> {alignment = 1 : i64} loc(#loc32)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc145)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc146)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc148)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc41)
    cir.store %1, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc149)
    %2 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc43)
    %3 = cir.call @badSource(%2) : (!cir.ptr<!s8i>) -> !cir.ptr<!s8i> loc(#loc44)
    cir.store %3, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc150)
    cir.scope {
      %4 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc152)
      %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc51)
      %6 = cir.cast(bitcast, %5 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc51)
      %7 = cir.const #cir.int<67> : !s32i loc(#loc52)
      %8 = cir.const #cir.int<100> : !s32i loc(#loc53)
      %9 = cir.const #cir.int<1> : !s32i loc(#loc54)
      %10 = cir.binop(sub, %8, %9) nsw : !s32i loc(#loc53)
      %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc53)
      cir.libc.memset %11 bytes from %6 set to %7 : !cir.ptr<!void>, !s32i, !u64i loc(#loc153)
      %12 = cir.const #cir.int<0> : !s32i loc(#loc57)
      %13 = cir.cast(integral, %12 : !s32i), !s8i loc(#loc57)
      %14 = cir.const #cir.int<100> : !s32i loc(#loc58)
      %15 = cir.const #cir.int<1> : !s32i loc(#loc59)
      %16 = cir.binop(sub, %14, %15) nsw : !s32i loc(#loc58)
      %17 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc60)
      %18 = cir.ptr_stride(%17 : !cir.ptr<!s8i>, %16 : !s32i), !cir.ptr<!s8i> loc(#loc60)
      cir.store %13, %18 : !s8i, !cir.ptr<!s8i> loc(#loc154)
      %19 = cir.get_global @snprintf : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc61)
      %20 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc62)
      %21 = cir.const #cir.int<100> : !s32i loc(#loc63)
      %22 = cir.cast(integral, %21 : !s32i), !u64i loc(#loc63)
      %23 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc32)
      %24 = cir.cast(array_to_ptrdecay, %23 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc32)
      %25 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc64)
      %26 = cir.call @snprintf(%20, %22, %24, %25) : (!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc61)
      %27 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc65)
      cir.call @printLine(%27) : (!cir.ptr<!s8i>) -> () loc(#loc66)
      %28 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc67)
      %29 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc68)
      %30 = cir.cast(bitcast, %29 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc68)
      cir.call @free(%30) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc67)
    } loc(#loc151)
    cir.return loc(#loc38)
  } loc(#loc147)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc156)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc71)
    cir.return loc(#loc70)
  } loc(#loc155)
  cir.func internal private @goodG2BSource(%arg0: !cir.ptr<!s8i> loc(fused[#loc75, #loc76])) -> !cir.ptr<!s8i> extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc158)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["__retval"] {alignment = 8 : i64} loc(#loc74)
    cir.store %arg0, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc77)
    %2 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc78)
    %3 = cir.const #cir.int<100> : !s32i loc(#loc79)
    %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc79)
    %5 = cir.const #cir.int<1> : !u64i loc(#loc159)
    %6 = cir.binop(mul, %4, %5) : !u64i loc(#loc160)
    %7 = cir.call @malloc(%6) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc78)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc161)
    cir.store %8, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc162)
    cir.scope {
      %16 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc86)
      %17 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc87)
      %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc87)
      %19 = cir.cmp(eq, %16, %18) : !cir.ptr<!s8i>, !cir.bool loc(#loc164)
      cir.if %19 {
        %20 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc89)
        %21 = cir.const #cir.int<1> : !s32i loc(#loc90)
        %22 = cir.unary(minus, %21) nsw : !s32i, !s32i loc(#loc91)
        cir.call @exit(%22) : (!s32i) -> () extra(#fn_attr) loc(#loc89)
      } loc(#loc165)
    } loc(#loc163)
    %9 = cir.const #cir.int<0> : !s32i loc(#loc92)
    %10 = cir.cast(integral, %9 : !s32i), !s8i loc(#loc92)
    %11 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc93)
    %12 = cir.const #cir.int<0> : !s32i loc(#loc94)
    %13 = cir.ptr_stride(%11 : !cir.ptr<!s8i>, %12 : !s32i), !cir.ptr<!s8i> loc(#loc95)
    cir.store %10, %13 : !s8i, !cir.ptr<!s8i> loc(#loc166)
    %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc96)
    cir.store %14, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc167)
    %15 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc167)
    cir.return %15 : !cir.ptr<!s8i> loc(#loc167)
  } loc(#loc157)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc169)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc102)
    cir.store %1, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc170)
    %2 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc104)
    %3 = cir.call @goodG2BSource(%2) : (!cir.ptr<!s8i>) -> !cir.ptr<!s8i> loc(#loc105)
    cir.store %3, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc171)
    cir.scope {
      %4 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc173)
      %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc112)
      %6 = cir.cast(bitcast, %5 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc112)
      %7 = cir.const #cir.int<67> : !s32i loc(#loc113)
      %8 = cir.const #cir.int<100> : !s32i loc(#loc114)
      %9 = cir.const #cir.int<1> : !s32i loc(#loc115)
      %10 = cir.binop(sub, %8, %9) nsw : !s32i loc(#loc114)
      %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc114)
      cir.libc.memset %11 bytes from %6 set to %7 : !cir.ptr<!void>, !s32i, !u64i loc(#loc174)
      %12 = cir.const #cir.int<0> : !s32i loc(#loc118)
      %13 = cir.cast(integral, %12 : !s32i), !s8i loc(#loc118)
      %14 = cir.const #cir.int<100> : !s32i loc(#loc119)
      %15 = cir.const #cir.int<1> : !s32i loc(#loc120)
      %16 = cir.binop(sub, %14, %15) nsw : !s32i loc(#loc119)
      %17 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc121)
      %18 = cir.ptr_stride(%17 : !cir.ptr<!s8i>, %16 : !s32i), !cir.ptr<!s8i> loc(#loc121)
      cir.store %13, %18 : !s8i, !cir.ptr<!s8i> loc(#loc175)
      %19 = cir.get_global @snprintf : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc122)
      %20 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc123)
      %21 = cir.const #cir.int<100> : !s32i loc(#loc124)
      %22 = cir.cast(integral, %21 : !s32i), !u64i loc(#loc124)
      %23 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc125)
      %24 = cir.cast(array_to_ptrdecay, %23 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc125)
      %25 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc126)
      %26 = cir.call @snprintf(%20, %22, %24, %25) : (!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc122)
      %27 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc127)
      cir.call @printLine(%27) : (!cir.ptr<!s8i>) -> () loc(#loc128)
      %28 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc129)
      %29 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc130)
      %30 = cir.cast(bitcast, %29 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc130)
      cir.call @free(%30) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc129)
    } loc(#loc172)
    cir.return loc(#loc99)
  } loc(#loc168)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":29:1)
#loc6 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":36:1)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":30:1)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":32:20)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":32:27)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":32:30)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":32:41)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":32:42)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":32:5)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":33:5)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":33:33)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":33:9)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":33:17)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":33:23)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":33:24)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":33:30)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":33:29)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":34:15)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":34:5)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":34:10)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":34:11)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":35:12)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":35:5)
#loc30 = loc("/usr/include/stdio.h":385:1)
#loc31 = loc("/usr/include/stdio.h":387:62)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":48:29)
#loc33 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc34 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc35 = loc("/usr/include/stdlib.h":687:1)
#loc36 = loc("/usr/include/stdlib.h":687:32)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":38:1)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":52:1)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":40:5)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":40:12)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":41:12)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":41:5)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":42:22)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":42:12)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":42:5)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":42:26)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":43:5)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":51:5)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":44:9)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":44:24)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":45:16)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":45:24)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":45:29)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":45:33)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":45:9)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":45:34)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":46:25)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":46:16)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":46:20)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":46:9)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":48:9)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":48:18)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":48:24)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":48:35)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":49:19)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":49:9)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":50:9)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":50:14)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":84:1)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":87:1)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":86:5)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":86:13)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":58:1)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":65:1)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":59:1)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":61:20)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":61:27)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":61:31)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":61:42)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":61:43)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":61:5)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":62:5)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":62:33)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":62:9)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":62:17)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":62:23)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":62:24)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":62:30)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":62:29)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":63:15)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":63:5)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":63:10)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":63:11)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":64:12)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":64:5)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":68:1)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":82:1)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":70:5)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":70:12)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":71:12)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":71:5)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":72:26)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":72:12)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":72:5)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":72:30)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":73:5)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":81:5)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":74:9)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":74:24)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":75:16)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":75:24)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":75:29)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":75:33)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":75:9)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":75:34)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":76:25)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":76:16)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":76:20)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":76:9)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":78:9)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":78:18)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":78:24)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":78:29)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":78:35)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":79:19)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":79:9)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":80:9)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":80:14)
#loc131 = loc(fused[#loc1, #loc2])
#loc132 = loc(fused[#loc3, #loc4])
#loc133 = loc(fused[#loc5, #loc6])
#loc135 = loc(fused[#loc12, #loc13])
#loc136 = loc(fused[#loc11, #loc13])
#loc137 = loc(fused[#loc10, #loc14])
#loc138 = loc(fused[#loc15, #loc14])
#loc139 = loc(fused[#loc16, #loc17])
#loc140 = loc(fused[#loc18, #loc19])
#loc141 = loc(fused[#loc20, #loc17])
#loc142 = loc(fused[#loc25, #loc24])
#loc143 = loc(fused[#loc29, #loc28])
#loc144 = loc(fused[#loc30, #loc31])
#loc145 = loc(fused[#loc33, #loc34])
#loc146 = loc(fused[#loc35, #loc36])
#loc147 = loc(fused[#loc37, #loc38])
#loc148 = loc(fused[#loc39, #loc40])
#loc149 = loc(fused[#loc42, #loc41])
#loc150 = loc(fused[#loc45, #loc46])
#loc151 = loc(fused[#loc47, #loc48])
#loc152 = loc(fused[#loc49, #loc50])
#loc153 = loc(fused[#loc55, #loc56])
#loc154 = loc(fused[#loc60, #loc57])
#loc155 = loc(fused[#loc69, #loc70])
#loc156 = loc(fused[#loc71, #loc72])
#loc157 = loc(fused[#loc73, #loc74])
#loc159 = loc(fused[#loc80, #loc81])
#loc160 = loc(fused[#loc79, #loc81])
#loc161 = loc(fused[#loc78, #loc82])
#loc162 = loc(fused[#loc83, #loc82])
#loc163 = loc(fused[#loc84, #loc85])
#loc164 = loc(fused[#loc86, #loc87])
#loc165 = loc(fused[#loc88, #loc85])
#loc166 = loc(fused[#loc93, #loc92])
#loc167 = loc(fused[#loc97, #loc96])
#loc168 = loc(fused[#loc98, #loc99])
#loc169 = loc(fused[#loc100, #loc101])
#loc170 = loc(fused[#loc103, #loc102])
#loc171 = loc(fused[#loc106, #loc107])
#loc172 = loc(fused[#loc108, #loc109])
#loc173 = loc(fused[#loc110, #loc111])
#loc174 = loc(fused[#loc116, #loc117])
#loc175 = loc(fused[#loc121, #loc118])
