!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc147)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc148)
  cir.func private @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc149)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc150)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc151)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc153)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc154)
    %2 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc155)
    %3 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc156)
    %4 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["dataPtr1", init] {alignment = 8 : i64} loc(#loc157)
    %5 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["dataPtr2", init] {alignment = 8 : i64} loc(#loc158)
    cir.store %3, %4 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc157)
    cir.store %3, %5 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc158)
    %6 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc25)
    %7 = cir.const #cir.int<100> : !s32i loc(#loc26)
    %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc26)
    %9 = cir.const #cir.int<1> : !u64i loc(#loc159)
    %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc160)
    %11 = cir.call @malloc(%10) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc25)
    %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc161)
    cir.store %12, %3 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc162)
    cir.br ^bb1 loc(#loc163)
  ^bb1:  // pred: ^bb0
    %13 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc33)
    %14 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc34)
    %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc34)
    %16 = cir.cmp(eq, %13, %15) : !cir.ptr<!s8i>, !cir.bool loc(#loc164)
    cir.brcond %16 ^bb2, ^bb3 loc(#loc165)
  ^bb2:  // pred: ^bb1
    %17 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc36)
    %18 = cir.const #cir.int<1> : !s32i loc(#loc37)
    %19 = cir.unary(minus, %18) : !s32i, !s32i loc(#loc38)
    cir.call @exit(%19) : (!s32i) -> () extra(#fn_attr) loc(#loc36)
    cir.br ^bb3 loc(#loc32)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc32)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc166)
  ^bb5:  // pred: ^bb4
    %20 = cir.load deref %4 : !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc14)
    %21 = cir.load %20 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc41)
    cir.store %21, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc153)
    %22 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc42)
    %23 = cir.cast(bitcast, %22 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc42)
    %24 = cir.const #cir.int<65> : !s32i loc(#loc43)
    %25 = cir.const #cir.int<100> : !s32i loc(#loc44)
    %26 = cir.const #cir.int<1> : !s32i loc(#loc45)
    %27 = cir.binop(sub, %25, %26) nsw : !s32i loc(#loc44)
    %28 = cir.cast(integral, %27 : !s32i), !u64i loc(#loc44)
    cir.libc.memset %28 bytes from %23 set to %24 : !cir.ptr<!void>, !s32i, !u64i loc(#loc167)
    %29 = cir.const #cir.int<0> : !s32i loc(#loc48)
    %30 = cir.cast(integral, %29 : !s32i), !s8i loc(#loc48)
    %31 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc49)
    %32 = cir.const #cir.int<100> : !s32i loc(#loc50)
    %33 = cir.const #cir.int<1> : !s32i loc(#loc51)
    %34 = cir.binop(sub, %32, %33) nsw : !s32i loc(#loc50)
    %35 = cir.ptr_stride(%31 : !cir.ptr<!s8i>, %34 : !s32i), !cir.ptr<!s8i> loc(#loc52)
    cir.store %30, %35 : !s8i, !cir.ptr<!s8i> loc(#loc168)
    %36 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc53)
    %37 = cir.load deref %4 : !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc54)
    cir.store %36, %37 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc169)
    cir.br ^bb6 loc(#loc40)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc170)
  ^bb7:  // pred: ^bb6
    %38 = cir.load deref %5 : !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc16)
    %39 = cir.load %38 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc58)
    cir.store %39, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc154)
    cir.br ^bb8 loc(#loc171)
  ^bb8:  // pred: ^bb7
    %40 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc155)
    cir.store %40, %2 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc155)
    %41 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc61)
    %42 = cir.cast(bitcast, %41 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc61)
    %43 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc62)
    %44 = cir.cast(bitcast, %43 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc62)
    %45 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc63)
    %46 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc64)
    %47 = cir.call @strlen(%46) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc63)
    %48 = cir.const #cir.int<1> : !u64i loc(#loc172)
    %49 = cir.binop(mul, %47, %48) : !u64i loc(#loc173)
    cir.libc.memmove %49 bytes from %44 to %42 : !cir.ptr<!void>, !u64i loc(#loc174)
    %50 = cir.const #cir.int<0> : !s32i loc(#loc69)
    %51 = cir.cast(integral, %50 : !s32i), !s8i loc(#loc69)
    %52 = cir.const #cir.int<50> : !s32i loc(#loc70)
    %53 = cir.const #cir.int<1> : !s32i loc(#loc71)
    %54 = cir.binop(sub, %52, %53) nsw : !s32i loc(#loc70)
    %55 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc72)
    %56 = cir.ptr_stride(%55 : !cir.ptr<!s8i>, %54 : !s32i), !cir.ptr<!s8i> loc(#loc72)
    cir.store %51, %56 : !s8i, !cir.ptr<!s8i> loc(#loc175)
    %57 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc73)
    cir.call @printLine(%57) : (!cir.ptr<!s8i>) -> () loc(#loc74)
    %58 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc75)
    %59 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc76)
    %60 = cir.cast(bitcast, %59 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc76)
    cir.call @free(%60) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc75)
    cir.br ^bb9 loc(#loc60)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc57)
  ^bb10:  // pred: ^bb9
    cir.return loc(#loc12)
  } loc(#loc152)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc177)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc79)
    cir.return loc(#loc78)
  } loc(#loc176)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc179)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc180)
    %2 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc181)
    %3 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc182)
    %4 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["dataPtr1", init] {alignment = 8 : i64} loc(#loc183)
    %5 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["dataPtr2", init] {alignment = 8 : i64} loc(#loc184)
    cir.store %3, %4 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc183)
    cir.store %3, %5 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc184)
    %6 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc95)
    %7 = cir.const #cir.int<100> : !s32i loc(#loc96)
    %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc96)
    %9 = cir.const #cir.int<1> : !u64i loc(#loc185)
    %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc186)
    %11 = cir.call @malloc(%10) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc95)
    %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc187)
    cir.store %12, %3 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc188)
    cir.br ^bb1 loc(#loc189)
  ^bb1:  // pred: ^bb0
    %13 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc103)
    %14 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc104)
    %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc104)
    %16 = cir.cmp(eq, %13, %15) : !cir.ptr<!s8i>, !cir.bool loc(#loc190)
    cir.brcond %16 ^bb2, ^bb3 loc(#loc191)
  ^bb2:  // pred: ^bb1
    %17 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc106)
    %18 = cir.const #cir.int<1> : !s32i loc(#loc107)
    %19 = cir.unary(minus, %18) : !s32i, !s32i loc(#loc108)
    cir.call @exit(%19) : (!s32i) -> () extra(#fn_attr) loc(#loc106)
    cir.br ^bb3 loc(#loc102)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc102)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc192)
  ^bb5:  // pred: ^bb4
    %20 = cir.load deref %4 : !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc84)
    %21 = cir.load %20 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc111)
    cir.store %21, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc179)
    %22 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc112)
    %23 = cir.cast(bitcast, %22 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc112)
    %24 = cir.const #cir.int<65> : !s32i loc(#loc113)
    %25 = cir.const #cir.int<50> : !s32i loc(#loc114)
    %26 = cir.const #cir.int<1> : !s32i loc(#loc115)
    %27 = cir.binop(sub, %25, %26) nsw : !s32i loc(#loc114)
    %28 = cir.cast(integral, %27 : !s32i), !u64i loc(#loc114)
    cir.libc.memset %28 bytes from %23 set to %24 : !cir.ptr<!void>, !s32i, !u64i loc(#loc193)
    %29 = cir.const #cir.int<0> : !s32i loc(#loc118)
    %30 = cir.cast(integral, %29 : !s32i), !s8i loc(#loc118)
    %31 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc119)
    %32 = cir.const #cir.int<50> : !s32i loc(#loc120)
    %33 = cir.const #cir.int<1> : !s32i loc(#loc121)
    %34 = cir.binop(sub, %32, %33) nsw : !s32i loc(#loc120)
    %35 = cir.ptr_stride(%31 : !cir.ptr<!s8i>, %34 : !s32i), !cir.ptr<!s8i> loc(#loc122)
    cir.store %30, %35 : !s8i, !cir.ptr<!s8i> loc(#loc194)
    %36 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc123)
    %37 = cir.load deref %4 : !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc124)
    cir.store %36, %37 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc195)
    cir.br ^bb6 loc(#loc110)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc196)
  ^bb7:  // pred: ^bb6
    %38 = cir.load deref %5 : !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc86)
    %39 = cir.load %38 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc128)
    cir.store %39, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc180)
    cir.br ^bb8 loc(#loc197)
  ^bb8:  // pred: ^bb7
    %40 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc181)
    cir.store %40, %2 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc181)
    %41 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc131)
    %42 = cir.cast(bitcast, %41 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc131)
    %43 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc132)
    %44 = cir.cast(bitcast, %43 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc132)
    %45 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc133)
    %46 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc134)
    %47 = cir.call @strlen(%46) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc133)
    %48 = cir.const #cir.int<1> : !u64i loc(#loc198)
    %49 = cir.binop(mul, %47, %48) : !u64i loc(#loc199)
    cir.libc.memmove %49 bytes from %44 to %42 : !cir.ptr<!void>, !u64i loc(#loc200)
    %50 = cir.const #cir.int<0> : !s32i loc(#loc139)
    %51 = cir.cast(integral, %50 : !s32i), !s8i loc(#loc139)
    %52 = cir.const #cir.int<50> : !s32i loc(#loc140)
    %53 = cir.const #cir.int<1> : !s32i loc(#loc141)
    %54 = cir.binop(sub, %52, %53) nsw : !s32i loc(#loc140)
    %55 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc142)
    %56 = cir.ptr_stride(%55 : !cir.ptr<!s8i>, %54 : !s32i), !cir.ptr<!s8i> loc(#loc142)
    cir.store %51, %56 : !s8i, !cir.ptr<!s8i> loc(#loc201)
    %57 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc143)
    cir.call @printLine(%57) : (!cir.ptr<!s8i>) -> () loc(#loc144)
    %58 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc145)
    %59 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc146)
    %60 = cir.cast(bitcast, %59 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc146)
    cir.call @free(%60) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc145)
    cir.br ^bb9 loc(#loc130)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc127)
  ^bb10:  // pred: ^bb9
    cir.return loc(#loc82)
  } loc(#loc178)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("/usr/include/string.h":407:1)
#loc6 = loc("/usr/include/string.h":408:33)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("/usr/include/stdlib.h":687:1)
#loc10 = loc("/usr/include/stdlib.h":687:32)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":23:1)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":48:1)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":31:9)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":31:24)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":38:9)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":38:24)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":40:13)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":40:29)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":25:5)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":25:12)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":26:5)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":26:25)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":27:5)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":27:25)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":28:20)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":28:27)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":28:31)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":28:42)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":28:43)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":28:5)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":29:5)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":29:33)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":29:9)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":29:17)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":29:23)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":29:24)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":29:30)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":29:29)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":30:5)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":36:5)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":31:23)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":33:16)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":33:22)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":33:27)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":33:31)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":33:9)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":33:32)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":34:23)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":34:9)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":34:14)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":34:18)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":34:19)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":35:21)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":35:10)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":35:9)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":37:5)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":47:5)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":38:23)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":39:9)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":46:9)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":42:21)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":42:27)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":42:33)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":42:40)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":42:46)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":42:57)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":42:13)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":42:58)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":43:26)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":43:18)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":43:21)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":43:13)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":44:23)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":44:13)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":45:13)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":45:18)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":82:1)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":85:1)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":84:5)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":84:13)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":55:1)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":80:1)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":63:9)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":63:24)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":70:9)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":70:24)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":72:13)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":72:29)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":57:5)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":57:12)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":58:5)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":58:25)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":59:5)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":59:25)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":60:20)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":60:27)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":60:31)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":60:42)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":60:43)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":60:5)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":61:5)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":61:33)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":61:9)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":61:17)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":61:23)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":61:24)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":61:30)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":61:29)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":62:5)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":68:5)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":63:23)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":65:16)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":65:22)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":65:27)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":65:30)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":65:9)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":65:31)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":66:22)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":66:9)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":66:14)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":66:17)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":66:18)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":67:21)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":67:10)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":67:9)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":69:5)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":79:5)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":70:23)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":71:9)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":78:9)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":74:21)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":74:27)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":74:33)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":74:40)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":74:46)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":74:57)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":74:13)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":74:58)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":75:26)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":75:18)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":75:21)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":75:13)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":76:23)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":76:13)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":77:13)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":77:18)
#loc147 = loc(fused[#loc1, #loc2])
#loc148 = loc(fused[#loc3, #loc4])
#loc149 = loc(fused[#loc5, #loc6])
#loc150 = loc(fused[#loc7, #loc8])
#loc151 = loc(fused[#loc9, #loc10])
#loc152 = loc(fused[#loc11, #loc12])
#loc153 = loc(fused[#loc13, #loc14])
#loc154 = loc(fused[#loc15, #loc16])
#loc155 = loc(fused[#loc17, #loc18])
#loc156 = loc(fused[#loc19, #loc20])
#loc157 = loc(fused[#loc21, #loc22])
#loc158 = loc(fused[#loc23, #loc24])
#loc159 = loc(fused[#loc27, #loc28])
#loc160 = loc(fused[#loc26, #loc28])
#loc161 = loc(fused[#loc25, #loc29])
#loc162 = loc(fused[#loc30, #loc29])
#loc163 = loc(fused[#loc31, #loc32])
#loc164 = loc(fused[#loc33, #loc34])
#loc165 = loc(fused[#loc35, #loc32])
#loc166 = loc(fused[#loc39, #loc40])
#loc167 = loc(fused[#loc46, #loc47])
#loc168 = loc(fused[#loc49, #loc48])
#loc169 = loc(fused[#loc55, #loc53])
#loc170 = loc(fused[#loc56, #loc57])
#loc171 = loc(fused[#loc59, #loc60])
#loc172 = loc(fused[#loc65, #loc66])
#loc173 = loc(fused[#loc63, #loc66])
#loc174 = loc(fused[#loc67, #loc68])
#loc175 = loc(fused[#loc72, #loc69])
#loc176 = loc(fused[#loc77, #loc78])
#loc177 = loc(fused[#loc79, #loc80])
#loc178 = loc(fused[#loc81, #loc82])
#loc179 = loc(fused[#loc83, #loc84])
#loc180 = loc(fused[#loc85, #loc86])
#loc181 = loc(fused[#loc87, #loc88])
#loc182 = loc(fused[#loc89, #loc90])
#loc183 = loc(fused[#loc91, #loc92])
#loc184 = loc(fused[#loc93, #loc94])
#loc185 = loc(fused[#loc97, #loc98])
#loc186 = loc(fused[#loc96, #loc98])
#loc187 = loc(fused[#loc95, #loc99])
#loc188 = loc(fused[#loc100, #loc99])
#loc189 = loc(fused[#loc101, #loc102])
#loc190 = loc(fused[#loc103, #loc104])
#loc191 = loc(fused[#loc105, #loc102])
#loc192 = loc(fused[#loc109, #loc110])
#loc193 = loc(fused[#loc116, #loc117])
#loc194 = loc(fused[#loc119, #loc118])
#loc195 = loc(fused[#loc125, #loc123])
#loc196 = loc(fused[#loc126, #loc127])
#loc197 = loc(fused[#loc129, #loc130])
#loc198 = loc(fused[#loc135, #loc136])
#loc199 = loc(fused[#loc133, #loc136])
#loc200 = loc(fused[#loc137, #loc138])
#loc201 = loc(fused[#loc142, #loc139])
