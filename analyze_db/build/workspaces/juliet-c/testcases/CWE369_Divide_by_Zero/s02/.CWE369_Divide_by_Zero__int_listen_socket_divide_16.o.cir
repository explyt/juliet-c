!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc121 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":95:48)
#loc263 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":186:48)
#true = #cir.bool<true> : !cir.bool
!ty_in_addr = !cir.record<struct "in_addr" {!u32i} #cir.record.decl.ast>
!ty_sockaddr = !cir.record<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.record<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/workspaces/juliet-c/testcases/CWE369_Divide_by_Zero/s02/CWE369_Divide_by_Zero__int_listen_socket_divide_16.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i32 = dense<32> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc328)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc329)
  cir.func private @bind(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc330)
  cir.func private @listen(!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc331)
  cir.func private @accept(!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc332)
  cir.func private @recv(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc333)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc334)
  cir.func private @close(!s32i) -> !s32i loc(#loc335)
  cir.func private @printIntLine(!s32i) loc(#loc336)
  cir.func no_proto @CWE369_Divide_by_Zero__int_listen_socket_divide_16_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc338)
    %1 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc339)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc340)
    %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc341)
    %4 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc342)
    %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc343)
    %6 = cir.const #cir.int<1> : !s32i loc(#loc33)
    %7 = cir.unary(minus, %6) nsw : !s32i, !s32i loc(#loc34)
    cir.store %7, %5 : !s32i, !cir.ptr<!s32i> loc(#loc344)
    cir.br ^bb1 loc(#loc345)
  ^bb1:  // pred: ^bb0
    cir.br ^bb2 loc(#loc345)
  ^bb2:  // 2 preds: ^bb1, ^bb50
    %8 = cir.const #cir.int<1> : !s32i loc(#loc38)
    %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc38)
    cir.brcond %9 ^bb3, ^bb51 loc(#loc38)
  ^bb3:  // pred: ^bb2
    cir.br ^bb4 loc(#loc346)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc347)
  ^bb5:  // pred: ^bb4
    %10 = cir.const #cir.int<1> : !s32i loc(#loc26)
    %11 = cir.unary(minus, %10) nsw : !s32i, !s32i loc(#loc26)
    cir.store %11, %2 : !s32i, !cir.ptr<!s32i> loc(#loc340)
    %12 = cir.const #cir.int<1> : !s32i loc(#loc28)
    %13 = cir.unary(minus, %12) nsw : !s32i, !s32i loc(#loc28)
    cir.store %13, %3 : !s32i, !cir.ptr<!s32i> loc(#loc341)
    cir.br ^bb6 loc(#loc348)
  ^bb6:  // pred: ^bb5
    cir.br ^bb8 loc(#loc348)
  ^bb7:  // pred: ^bb38
    %14 = cir.const #cir.int<0> : !s32i loc(#loc44)
    %15 = cir.cast(int_to_bool, %14 : !s32i), !cir.bool loc(#loc44)
    cir.brcond %15 ^bb8, ^bb39 loc(#loc44)
  ^bb8:  // 2 preds: ^bb6, ^bb7
    cir.br ^bb9 loc(#loc349)
  ^bb9:  // pred: ^bb8
    %16 = cir.const #cir.int<2> : !s32i loc(#loc47)
    %17 = cir.const #cir.int<1> : !s32i loc(#loc48)
    %18 = cir.const #cir.int<6> : !s32i loc(#loc49)
    %19 = cir.call @socket(%16, %17, %18) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc50)
    cir.store %19, %2 : !s32i, !cir.ptr<!s32i> loc(#loc350)
    cir.br ^bb10 loc(#loc351)
  ^bb10:  // pred: ^bb9
    %20 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc55)
    %21 = cir.const #cir.int<1> : !s32i loc(#loc56)
    %22 = cir.unary(minus, %21) nsw : !s32i, !s32i loc(#loc56)
    %23 = cir.cmp(eq, %20, %22) : !s32i, !cir.bool loc(#loc352)
    cir.brcond %23 ^bb11, ^bb12 loc(#loc353)
  ^bb11:  // pred: ^bb10
    cir.br ^bb39 loc(#loc58)
  ^bb12:  // pred: ^bb10
    cir.br ^bb13 loc(#loc54)
  ^bb13:  // pred: ^bb12
    %24 = cir.cast(bitcast, %1 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc354)
    %25 = cir.const #cir.int<0> : !s32i loc(#loc61)
    %26 = cir.const #cir.int<16> : !u64i loc(#loc355)
    cir.libc.memset %26 bytes from %24 set to %25 : !cir.ptr<!void>, !s32i, !u64i loc(#loc356)
    %27 = cir.const #cir.int<2> : !s32i loc(#loc66)
    %28 = cir.cast(integral, %27 : !s32i), !u16i loc(#loc66)
    %29 = cir.get_member %1[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc67)
    cir.store %28, %29 : !u16i, !cir.ptr<!u16i> loc(#loc357)
    %30 = cir.const #cir.int<0> : !s32i loc(#loc69)
    %31 = cir.cast(integral, %30 : !s32i), !u32i loc(#loc69)
    %32 = cir.get_member %1[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc70)
    %33 = cir.get_member %32[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc71)
    cir.store %31, %33 : !u32i, !cir.ptr<!u32i> loc(#loc358)
    %34 = cir.const #cir.int<27015> : !s32i loc(#loc73)
    %35 = cir.cast(integral, %34 : !s32i), !u16i loc(#loc73)
    %36 = cir.call @htons(%35) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc74)
    %37 = cir.get_member %1[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc75)
    cir.store %36, %37 : !u16i, !cir.ptr<!u16i> loc(#loc359)
    cir.br ^bb14 loc(#loc360)
  ^bb14:  // pred: ^bb13
    %38 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc80)
    %39 = cir.cast(bitcast, %1 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc361)
    %40 = cir.const #cir.int<16> : !u64i loc(#loc362)
    %41 = cir.cast(integral, %40 : !u64i), !u32i loc(#loc362)
    %42 = cir.call @bind(%38, %39, %41) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc85)
    %43 = cir.const #cir.int<1> : !s32i loc(#loc86)
    %44 = cir.unary(minus, %43) nsw : !s32i, !s32i loc(#loc86)
    %45 = cir.cmp(eq, %42, %44) : !s32i, !cir.bool loc(#loc363)
    cir.brcond %45 ^bb15, ^bb16 loc(#loc364)
  ^bb15:  // pred: ^bb14
    cir.br ^bb39 loc(#loc88)
  ^bb16:  // pred: ^bb14
    cir.br ^bb17 loc(#loc79)
  ^bb17:  // pred: ^bb16
    cir.br ^bb18 loc(#loc365)
  ^bb18:  // pred: ^bb17
    %46 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc91)
    %47 = cir.const #cir.int<5> : !s32i loc(#loc92)
    %48 = cir.call @listen(%46, %47) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc93)
    %49 = cir.const #cir.int<1> : !s32i loc(#loc94)
    %50 = cir.unary(minus, %49) nsw : !s32i, !s32i loc(#loc94)
    %51 = cir.cmp(eq, %48, %50) : !s32i, !cir.bool loc(#loc366)
    cir.brcond %51 ^bb19, ^bb20 loc(#loc367)
  ^bb19:  // pred: ^bb18
    cir.br ^bb39 loc(#loc96)
  ^bb20:  // pred: ^bb18
    cir.br ^bb21 loc(#loc90)
  ^bb21:  // pred: ^bb20
    %52 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc97)
    %53 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc98)
    %54 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc99)
    %55 = cir.call @accept(%52, %53, %54) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc100)
    cir.store %55, %3 : !s32i, !cir.ptr<!s32i> loc(#loc368)
    cir.br ^bb22 loc(#loc369)
  ^bb22:  // pred: ^bb21
    %56 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc105)
    %57 = cir.const #cir.int<1> : !s32i loc(#loc106)
    %58 = cir.unary(minus, %57) nsw : !s32i, !s32i loc(#loc106)
    %59 = cir.cmp(eq, %56, %58) : !s32i, !cir.bool loc(#loc370)
    cir.brcond %59 ^bb23, ^bb24 loc(#loc371)
  ^bb23:  // pred: ^bb22
    cir.br ^bb39 loc(#loc108)
  ^bb24:  // pred: ^bb22
    cir.br ^bb25 loc(#loc104)
  ^bb25:  // pred: ^bb24
    %60 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc109)
    %61 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc110)
    %62 = cir.cast(bitcast, %61 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc110)
    %63 = cir.const #cir.int<3> : !s32i loc(#loc111)
    %64 = cir.cast(integral, %63 : !s32i), !u64i loc(#loc111)
    %65 = cir.const #cir.int<4> : !u64i loc(#loc111)
    %66 = cir.binop(mul, %64, %65) : !u64i loc(#loc111)
    %67 = cir.const #cir.int<2> : !s32i loc(#loc111)
    %68 = cir.cast(integral, %67 : !s32i), !u64i loc(#loc111)
    %69 = cir.binop(add, %66, %68) : !u64i loc(#loc111)
    %70 = cir.const #cir.int<1> : !s32i loc(#loc112)
    %71 = cir.cast(integral, %70 : !s32i), !u64i loc(#loc112)
    %72 = cir.binop(sub, %69, %71) : !u64i loc(#loc372)
    %73 = cir.const #cir.int<0> : !s32i loc(#loc113)
    %74 = cir.call @recv(%60, %62, %72, %73) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc114)
    %75 = cir.cast(integral, %74 : !s64i), !s32i loc(#loc114)
    cir.store %75, %0 : !s32i, !cir.ptr<!s32i> loc(#loc373)
    cir.br ^bb26 loc(#loc374)
  ^bb26:  // pred: ^bb25
    %76 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc119)
    %77 = cir.const #cir.int<1> : !s32i loc(#loc120)
    %78 = cir.unary(minus, %77) nsw : !s32i, !s32i loc(#loc120)
    %79 = cir.cmp(eq, %76, %78) : !s32i, !cir.bool loc(#loc375)
    cir.brcond %79 ^bb27, ^bb28 loc(#loc121)
  ^bb27:  // pred: ^bb26
    %80 = cir.const #true loc(#loc121)
    cir.br ^bb33(%80 : !cir.bool) loc(#loc121)
  ^bb28:  // pred: ^bb26
    %81 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc122)
    %82 = cir.const #cir.int<0> : !s32i loc(#loc123)
    %83 = cir.cmp(eq, %81, %82) : !s32i, !cir.bool loc(#loc376)
    cir.brcond %83 ^bb29, ^bb30 loc(#loc121)
  ^bb29:  // pred: ^bb28
    %84 = cir.const #true loc(#loc121)
    cir.br ^bb31(%84 : !cir.bool) loc(#loc121)
  ^bb30:  // pred: ^bb28
    %85 = cir.const #false loc(#loc121)
    cir.br ^bb31(%85 : !cir.bool) loc(#loc121)
  ^bb31(%86: !cir.bool loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":95:48)):  // 2 preds: ^bb29, ^bb30
    cir.br ^bb32 loc(#loc121)
  ^bb32:  // pred: ^bb31
    cir.br ^bb33(%86 : !cir.bool) loc(#loc121)
  ^bb33(%87: !cir.bool loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":95:48)):  // 2 preds: ^bb27, ^bb32
    cir.br ^bb34 loc(#loc121)
  ^bb34:  // pred: ^bb33
    cir.brcond %87 ^bb35, ^bb36 loc(#loc377)
  ^bb35:  // pred: ^bb34
    cir.br ^bb39 loc(#loc125)
  ^bb36:  // pred: ^bb34
    cir.br ^bb37 loc(#loc118)
  ^bb37:  // pred: ^bb36
    %88 = cir.const #cir.int<0> : !s32i loc(#loc126)
    %89 = cir.cast(integral, %88 : !s32i), !s8i loc(#loc126)
    %90 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc127)
    %91 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc128)
    %92 = cir.ptr_stride(%91 : !cir.ptr<!s8i>, %90 : !s32i), !cir.ptr<!s8i> loc(#loc128)
    cir.store %89, %92 : !s8i, !cir.ptr<!s8i> loc(#loc378)
    %93 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc129)
    %94 = cir.call @atoi(%93) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc130)
    cir.store %94, %5 : !s32i, !cir.ptr<!s32i> loc(#loc379)
    cir.br ^bb38 loc(#loc46)
  ^bb38:  // pred: ^bb37
    cir.br ^bb7 loc(#loc43)
  ^bb39:  // 6 preds: ^bb7, ^bb11, ^bb15, ^bb19, ^bb23, ^bb35
    cir.br ^bb40 loc(#loc43)
  ^bb40:  // pred: ^bb39
    cir.br ^bb41 loc(#loc380)
  ^bb41:  // pred: ^bb40
    %95 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc135)
    %96 = cir.const #cir.int<1> : !s32i loc(#loc136)
    %97 = cir.unary(minus, %96) nsw : !s32i, !s32i loc(#loc136)
    %98 = cir.cmp(ne, %95, %97) : !s32i, !cir.bool loc(#loc381)
    cir.brcond %98 ^bb42, ^bb43 loc(#loc382)
  ^bb42:  // pred: ^bb41
    %99 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc138)
    %100 = cir.call @close(%99) : (!s32i) -> !s32i loc(#loc139)
    cir.br ^bb43 loc(#loc134)
  ^bb43:  // 2 preds: ^bb41, ^bb42
    cir.br ^bb44 loc(#loc134)
  ^bb44:  // pred: ^bb43
    cir.br ^bb45 loc(#loc383)
  ^bb45:  // pred: ^bb44
    %101 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc142)
    %102 = cir.const #cir.int<1> : !s32i loc(#loc143)
    %103 = cir.unary(minus, %102) nsw : !s32i, !s32i loc(#loc143)
    %104 = cir.cmp(ne, %101, %103) : !s32i, !cir.bool loc(#loc384)
    cir.brcond %104 ^bb46, ^bb47 loc(#loc385)
  ^bb46:  // pred: ^bb45
    %105 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc145)
    %106 = cir.call @close(%105) : (!s32i) -> !s32i loc(#loc146)
    cir.br ^bb47 loc(#loc141)
  ^bb47:  // 2 preds: ^bb45, ^bb46
    cir.br ^bb48 loc(#loc141)
  ^bb48:  // pred: ^bb47
    cir.br ^bb49 loc(#loc41)
  ^bb49:  // pred: ^bb48
    cir.br ^bb51 loc(#loc147)
  ^bb50:  // no predecessors
    cir.br ^bb2 loc(#loc37)
  ^bb51:  // 2 preds: ^bb2, ^bb49
    cir.br ^bb52 loc(#loc37)
  ^bb52:  // pred: ^bb51
    cir.br ^bb53 loc(#loc386)
  ^bb53:  // pred: ^bb52
    cir.br ^bb54 loc(#loc386)
  ^bb54:  // 2 preds: ^bb53, ^bb57
    %107 = cir.const #cir.int<1> : !s32i loc(#loc150)
    %108 = cir.cast(int_to_bool, %107 : !s32i), !cir.bool loc(#loc150)
    cir.brcond %108 ^bb55, ^bb58 loc(#loc150)
  ^bb55:  // pred: ^bb54
    cir.br ^bb56 loc(#loc387)
  ^bb56:  // pred: ^bb55
    %109 = cir.const #cir.int<100> : !s32i loc(#loc152)
    %110 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc153)
    %111 = cir.binop(div, %109, %110) : !s32i loc(#loc388)
    cir.call @printIntLine(%111) : (!s32i) -> () loc(#loc154)
    cir.br ^bb58 loc(#loc155)
  ^bb57:  // no predecessors
    cir.br ^bb54 loc(#loc149)
  ^bb58:  // 2 preds: ^bb54, ^bb56
    cir.br ^bb59 loc(#loc149)
  ^bb59:  // pred: ^bb58
    cir.return loc(#loc20)
  } loc(#loc337)
  cir.func no_proto @CWE369_Divide_by_Zero__int_listen_socket_divide_16_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc390)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc158)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc391)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc160)
    cir.return loc(#loc157)
  } loc(#loc389)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc392)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"This would result in a divide by zero\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc164)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc394)
    %1 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc395)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc396)
    %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc397)
    %4 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc398)
    %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc399)
    %6 = cir.const #cir.int<1> : !s32i loc(#loc179)
    %7 = cir.unary(minus, %6) nsw : !s32i, !s32i loc(#loc180)
    cir.store %7, %5 : !s32i, !cir.ptr<!s32i> loc(#loc400)
    cir.br ^bb1 loc(#loc401)
  ^bb1:  // pred: ^bb0
    cir.br ^bb2 loc(#loc401)
  ^bb2:  // 2 preds: ^bb1, ^bb50
    %8 = cir.const #cir.int<1> : !s32i loc(#loc184)
    %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc184)
    cir.brcond %9 ^bb3, ^bb51 loc(#loc184)
  ^bb3:  // pred: ^bb2
    cir.br ^bb4 loc(#loc402)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc403)
  ^bb5:  // pred: ^bb4
    %10 = cir.const #cir.int<1> : !s32i loc(#loc172)
    %11 = cir.unary(minus, %10) nsw : !s32i, !s32i loc(#loc172)
    cir.store %11, %2 : !s32i, !cir.ptr<!s32i> loc(#loc396)
    %12 = cir.const #cir.int<1> : !s32i loc(#loc174)
    %13 = cir.unary(minus, %12) nsw : !s32i, !s32i loc(#loc174)
    cir.store %13, %3 : !s32i, !cir.ptr<!s32i> loc(#loc397)
    cir.br ^bb6 loc(#loc404)
  ^bb6:  // pred: ^bb5
    cir.br ^bb8 loc(#loc404)
  ^bb7:  // pred: ^bb38
    %14 = cir.const #cir.int<0> : !s32i loc(#loc190)
    %15 = cir.cast(int_to_bool, %14 : !s32i), !cir.bool loc(#loc190)
    cir.brcond %15 ^bb8, ^bb39 loc(#loc190)
  ^bb8:  // 2 preds: ^bb6, ^bb7
    cir.br ^bb9 loc(#loc405)
  ^bb9:  // pred: ^bb8
    %16 = cir.const #cir.int<2> : !s32i loc(#loc193)
    %17 = cir.const #cir.int<1> : !s32i loc(#loc194)
    %18 = cir.const #cir.int<6> : !s32i loc(#loc195)
    %19 = cir.call @socket(%16, %17, %18) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc196)
    cir.store %19, %2 : !s32i, !cir.ptr<!s32i> loc(#loc406)
    cir.br ^bb10 loc(#loc407)
  ^bb10:  // pred: ^bb9
    %20 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc201)
    %21 = cir.const #cir.int<1> : !s32i loc(#loc202)
    %22 = cir.unary(minus, %21) nsw : !s32i, !s32i loc(#loc202)
    %23 = cir.cmp(eq, %20, %22) : !s32i, !cir.bool loc(#loc408)
    cir.brcond %23 ^bb11, ^bb12 loc(#loc409)
  ^bb11:  // pred: ^bb10
    cir.br ^bb39 loc(#loc204)
  ^bb12:  // pred: ^bb10
    cir.br ^bb13 loc(#loc200)
  ^bb13:  // pred: ^bb12
    %24 = cir.cast(bitcast, %1 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc410)
    %25 = cir.const #cir.int<0> : !s32i loc(#loc207)
    %26 = cir.const #cir.int<16> : !u64i loc(#loc411)
    cir.libc.memset %26 bytes from %24 set to %25 : !cir.ptr<!void>, !s32i, !u64i loc(#loc412)
    %27 = cir.const #cir.int<2> : !s32i loc(#loc212)
    %28 = cir.cast(integral, %27 : !s32i), !u16i loc(#loc212)
    %29 = cir.get_member %1[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc67)
    cir.store %28, %29 : !u16i, !cir.ptr<!u16i> loc(#loc413)
    %30 = cir.const #cir.int<0> : !s32i loc(#loc214)
    %31 = cir.cast(integral, %30 : !s32i), !u32i loc(#loc214)
    %32 = cir.get_member %1[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc70)
    %33 = cir.get_member %32[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc71)
    cir.store %31, %33 : !u32i, !cir.ptr<!u32i> loc(#loc414)
    %34 = cir.const #cir.int<27015> : !s32i loc(#loc216)
    %35 = cir.cast(integral, %34 : !s32i), !u16i loc(#loc216)
    %36 = cir.call @htons(%35) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc217)
    %37 = cir.get_member %1[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc75)
    cir.store %36, %37 : !u16i, !cir.ptr<!u16i> loc(#loc415)
    cir.br ^bb14 loc(#loc416)
  ^bb14:  // pred: ^bb13
    %38 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc222)
    %39 = cir.cast(bitcast, %1 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc417)
    %40 = cir.const #cir.int<16> : !u64i loc(#loc418)
    %41 = cir.cast(integral, %40 : !u64i), !u32i loc(#loc418)
    %42 = cir.call @bind(%38, %39, %41) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc227)
    %43 = cir.const #cir.int<1> : !s32i loc(#loc228)
    %44 = cir.unary(minus, %43) nsw : !s32i, !s32i loc(#loc228)
    %45 = cir.cmp(eq, %42, %44) : !s32i, !cir.bool loc(#loc419)
    cir.brcond %45 ^bb15, ^bb16 loc(#loc420)
  ^bb15:  // pred: ^bb14
    cir.br ^bb39 loc(#loc230)
  ^bb16:  // pred: ^bb14
    cir.br ^bb17 loc(#loc221)
  ^bb17:  // pred: ^bb16
    cir.br ^bb18 loc(#loc421)
  ^bb18:  // pred: ^bb17
    %46 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc233)
    %47 = cir.const #cir.int<5> : !s32i loc(#loc234)
    %48 = cir.call @listen(%46, %47) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc235)
    %49 = cir.const #cir.int<1> : !s32i loc(#loc236)
    %50 = cir.unary(minus, %49) nsw : !s32i, !s32i loc(#loc236)
    %51 = cir.cmp(eq, %48, %50) : !s32i, !cir.bool loc(#loc422)
    cir.brcond %51 ^bb19, ^bb20 loc(#loc423)
  ^bb19:  // pred: ^bb18
    cir.br ^bb39 loc(#loc238)
  ^bb20:  // pred: ^bb18
    cir.br ^bb21 loc(#loc232)
  ^bb21:  // pred: ^bb20
    %52 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc239)
    %53 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc240)
    %54 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc241)
    %55 = cir.call @accept(%52, %53, %54) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc242)
    cir.store %55, %3 : !s32i, !cir.ptr<!s32i> loc(#loc424)
    cir.br ^bb22 loc(#loc425)
  ^bb22:  // pred: ^bb21
    %56 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc247)
    %57 = cir.const #cir.int<1> : !s32i loc(#loc248)
    %58 = cir.unary(minus, %57) nsw : !s32i, !s32i loc(#loc248)
    %59 = cir.cmp(eq, %56, %58) : !s32i, !cir.bool loc(#loc426)
    cir.brcond %59 ^bb23, ^bb24 loc(#loc427)
  ^bb23:  // pred: ^bb22
    cir.br ^bb39 loc(#loc250)
  ^bb24:  // pred: ^bb22
    cir.br ^bb25 loc(#loc246)
  ^bb25:  // pred: ^bb24
    %60 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc251)
    %61 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc252)
    %62 = cir.cast(bitcast, %61 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc252)
    %63 = cir.const #cir.int<3> : !s32i loc(#loc253)
    %64 = cir.cast(integral, %63 : !s32i), !u64i loc(#loc253)
    %65 = cir.const #cir.int<4> : !u64i loc(#loc253)
    %66 = cir.binop(mul, %64, %65) : !u64i loc(#loc253)
    %67 = cir.const #cir.int<2> : !s32i loc(#loc253)
    %68 = cir.cast(integral, %67 : !s32i), !u64i loc(#loc253)
    %69 = cir.binop(add, %66, %68) : !u64i loc(#loc253)
    %70 = cir.const #cir.int<1> : !s32i loc(#loc254)
    %71 = cir.cast(integral, %70 : !s32i), !u64i loc(#loc254)
    %72 = cir.binop(sub, %69, %71) : !u64i loc(#loc428)
    %73 = cir.const #cir.int<0> : !s32i loc(#loc255)
    %74 = cir.call @recv(%60, %62, %72, %73) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc256)
    %75 = cir.cast(integral, %74 : !s64i), !s32i loc(#loc256)
    cir.store %75, %0 : !s32i, !cir.ptr<!s32i> loc(#loc429)
    cir.br ^bb26 loc(#loc430)
  ^bb26:  // pred: ^bb25
    %76 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc261)
    %77 = cir.const #cir.int<1> : !s32i loc(#loc262)
    %78 = cir.unary(minus, %77) nsw : !s32i, !s32i loc(#loc262)
    %79 = cir.cmp(eq, %76, %78) : !s32i, !cir.bool loc(#loc431)
    cir.brcond %79 ^bb27, ^bb28 loc(#loc263)
  ^bb27:  // pred: ^bb26
    %80 = cir.const #true loc(#loc263)
    cir.br ^bb33(%80 : !cir.bool) loc(#loc263)
  ^bb28:  // pred: ^bb26
    %81 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc264)
    %82 = cir.const #cir.int<0> : !s32i loc(#loc265)
    %83 = cir.cmp(eq, %81, %82) : !s32i, !cir.bool loc(#loc432)
    cir.brcond %83 ^bb29, ^bb30 loc(#loc263)
  ^bb29:  // pred: ^bb28
    %84 = cir.const #true loc(#loc263)
    cir.br ^bb31(%84 : !cir.bool) loc(#loc263)
  ^bb30:  // pred: ^bb28
    %85 = cir.const #false loc(#loc263)
    cir.br ^bb31(%85 : !cir.bool) loc(#loc263)
  ^bb31(%86: !cir.bool loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":186:48)):  // 2 preds: ^bb29, ^bb30
    cir.br ^bb32 loc(#loc263)
  ^bb32:  // pred: ^bb31
    cir.br ^bb33(%86 : !cir.bool) loc(#loc263)
  ^bb33(%87: !cir.bool loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":186:48)):  // 2 preds: ^bb27, ^bb32
    cir.br ^bb34 loc(#loc263)
  ^bb34:  // pred: ^bb33
    cir.brcond %87 ^bb35, ^bb36 loc(#loc433)
  ^bb35:  // pred: ^bb34
    cir.br ^bb39 loc(#loc267)
  ^bb36:  // pred: ^bb34
    cir.br ^bb37 loc(#loc260)
  ^bb37:  // pred: ^bb36
    %88 = cir.const #cir.int<0> : !s32i loc(#loc268)
    %89 = cir.cast(integral, %88 : !s32i), !s8i loc(#loc268)
    %90 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc269)
    %91 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc270)
    %92 = cir.ptr_stride(%91 : !cir.ptr<!s8i>, %90 : !s32i), !cir.ptr<!s8i> loc(#loc270)
    cir.store %89, %92 : !s8i, !cir.ptr<!s8i> loc(#loc434)
    %93 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc271)
    %94 = cir.call @atoi(%93) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc272)
    cir.store %94, %5 : !s32i, !cir.ptr<!s32i> loc(#loc435)
    cir.br ^bb38 loc(#loc192)
  ^bb38:  // pred: ^bb37
    cir.br ^bb7 loc(#loc189)
  ^bb39:  // 6 preds: ^bb7, ^bb11, ^bb15, ^bb19, ^bb23, ^bb35
    cir.br ^bb40 loc(#loc189)
  ^bb40:  // pred: ^bb39
    cir.br ^bb41 loc(#loc436)
  ^bb41:  // pred: ^bb40
    %95 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc277)
    %96 = cir.const #cir.int<1> : !s32i loc(#loc278)
    %97 = cir.unary(minus, %96) nsw : !s32i, !s32i loc(#loc278)
    %98 = cir.cmp(ne, %95, %97) : !s32i, !cir.bool loc(#loc437)
    cir.brcond %98 ^bb42, ^bb43 loc(#loc438)
  ^bb42:  // pred: ^bb41
    %99 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc280)
    %100 = cir.call @close(%99) : (!s32i) -> !s32i loc(#loc281)
    cir.br ^bb43 loc(#loc276)
  ^bb43:  // 2 preds: ^bb41, ^bb42
    cir.br ^bb44 loc(#loc276)
  ^bb44:  // pred: ^bb43
    cir.br ^bb45 loc(#loc439)
  ^bb45:  // pred: ^bb44
    %101 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc284)
    %102 = cir.const #cir.int<1> : !s32i loc(#loc285)
    %103 = cir.unary(minus, %102) nsw : !s32i, !s32i loc(#loc285)
    %104 = cir.cmp(ne, %101, %103) : !s32i, !cir.bool loc(#loc440)
    cir.brcond %104 ^bb46, ^bb47 loc(#loc441)
  ^bb46:  // pred: ^bb45
    %105 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc287)
    %106 = cir.call @close(%105) : (!s32i) -> !s32i loc(#loc288)
    cir.br ^bb47 loc(#loc283)
  ^bb47:  // 2 preds: ^bb45, ^bb46
    cir.br ^bb48 loc(#loc283)
  ^bb48:  // pred: ^bb47
    cir.br ^bb49 loc(#loc187)
  ^bb49:  // pred: ^bb48
    cir.br ^bb51 loc(#loc289)
  ^bb50:  // no predecessors
    cir.br ^bb2 loc(#loc183)
  ^bb51:  // 2 preds: ^bb2, ^bb49
    cir.br ^bb52 loc(#loc183)
  ^bb52:  // pred: ^bb51
    cir.br ^bb53 loc(#loc442)
  ^bb53:  // pred: ^bb52
    cir.br ^bb54 loc(#loc442)
  ^bb54:  // 2 preds: ^bb53, ^bb62
    %107 = cir.const #cir.int<1> : !s32i loc(#loc292)
    %108 = cir.cast(int_to_bool, %107 : !s32i), !cir.bool loc(#loc292)
    cir.brcond %108 ^bb55, ^bb63 loc(#loc292)
  ^bb55:  // pred: ^bb54
    cir.br ^bb56 loc(#loc443)
  ^bb56:  // pred: ^bb55
    cir.br ^bb57 loc(#loc444)
  ^bb57:  // pred: ^bb56
    %109 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc296)
    %110 = cir.const #cir.int<0> : !s32i loc(#loc297)
    %111 = cir.cmp(ne, %109, %110) : !s32i, !cir.bool loc(#loc445)
    cir.brcond %111 ^bb58, ^bb59 loc(#loc446)
  ^bb58:  // pred: ^bb57
    %112 = cir.const #cir.int<100> : !s32i loc(#loc301)
    %113 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc302)
    %114 = cir.binop(div, %112, %113) : !s32i loc(#loc447)
    cir.call @printIntLine(%114) : (!s32i) -> () loc(#loc303)
    cir.br ^bb60 loc(#loc299)
  ^bb59:  // pred: ^bb57
    %115 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc164)
    %116 = cir.cast(array_to_ptrdecay, %115 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc164)
    cir.call @printLine(%116) : (!cir.ptr<!s8i>) -> () loc(#loc304)
    cir.br ^bb60 loc(#loc295)
  ^bb60:  // 2 preds: ^bb58, ^bb59
    cir.br ^bb61 loc(#loc295)
  ^bb61:  // pred: ^bb60
    cir.br ^bb63 loc(#loc305)
  ^bb62:  // no predecessors
    cir.br ^bb54 loc(#loc291)
  ^bb63:  // 2 preds: ^bb54, ^bb61
    cir.br ^bb64 loc(#loc291)
  ^bb64:  // pred: ^bb63
    cir.return loc(#loc166)
  } loc(#loc393)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc449)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc310)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc311)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc450)
    cir.br ^bb1 loc(#loc451)
  ^bb1:  // pred: ^bb0
    cir.br ^bb2 loc(#loc451)
  ^bb2:  // 2 preds: ^bb1, ^bb5
    %3 = cir.const #cir.int<1> : !s32i loc(#loc315)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc315)
    cir.brcond %4 ^bb3, ^bb6 loc(#loc315)
  ^bb3:  // pred: ^bb2
    cir.br ^bb4 loc(#loc452)
  ^bb4:  // pred: ^bb3
    %5 = cir.const #cir.int<7> : !s32i loc(#loc317)
    cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc453)
    cir.br ^bb6 loc(#loc319)
  ^bb5:  // no predecessors
    cir.br ^bb2 loc(#loc314)
  ^bb6:  // 2 preds: ^bb2, ^bb4
    cir.br ^bb7 loc(#loc314)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc454)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc454)
  ^bb9:  // 2 preds: ^bb8, ^bb12
    %6 = cir.const #cir.int<1> : !s32i loc(#loc322)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc322)
    cir.brcond %7 ^bb10, ^bb13 loc(#loc322)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc455)
  ^bb11:  // pred: ^bb10
    %8 = cir.const #cir.int<100> : !s32i loc(#loc324)
    %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc325)
    %10 = cir.binop(div, %8, %9) : !s32i loc(#loc456)
    cir.call @printIntLine(%10) : (!s32i) -> () loc(#loc326)
    cir.br ^bb13 loc(#loc327)
  ^bb12:  // no predecessors
    cir.br ^bb9 loc(#loc321)
  ^bb13:  // 2 preds: ^bb9, ^bb11
    cir.br ^bb14 loc(#loc321)
  ^bb14:  // pred: ^bb13
    cir.return loc(#loc307)
  } loc(#loc448)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE369_Divide_by_Zero/s02/CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":0:0)
#loc1 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:1)
#loc2 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:62)
#loc3 = loc("/usr/include/netinet/in.h":402:1)
#loc4 = loc("/usr/include/netinet/in.h":403:40)
#loc5 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":112:1)
#loc6 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":113:6)
#loc7 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":296:1)
#loc8 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":296:39)
#loc9 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":306:1)
#loc10 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":307:38)
#loc11 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":145:1)
#loc12 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":145:68)
#loc13 = loc("/usr/include/stdlib.h":105:1)
#loc14 = loc("/usr/include/stdlib.h":106:33)
#loc15 = loc("/usr/include/unistd.h":358:1)
#loc16 = loc("/usr/include/unistd.h":358:27)
#loc17 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc18 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc19 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":44:1)
#loc20 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":128:1)
#loc21 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":56:13)
#loc22 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":56:17)
#loc23 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":57:13)
#loc24 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":57:32)
#loc25 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":58:13)
#loc26 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":58:35)
#loc27 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":59:13)
#loc28 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":59:35)
#loc29 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":60:13)
#loc30 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":60:45)
#loc31 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":46:5)
#loc32 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":46:9)
#loc33 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":48:13)
#loc34 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":48:12)
#loc35 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":48:5)
#loc36 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":49:5)
#loc37 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":121:5)
#loc38 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":49:11)
#loc39 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":50:5)
#loc40 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":51:9)
#loc41 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":119:9)
#loc42 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":61:13)
#loc43 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":104:21)
#loc44 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":104:20)
#loc45 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":62:13)
#loc46 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":103:13)
#loc47 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":71:39)
#loc48 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":71:48)
#loc49 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":71:61)
#loc50 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":71:32)
#loc51 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":71:17)
#loc52 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":71:72)
#loc53 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":72:17)
#loc54 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":75:17)
#loc55 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":72:21)
#loc56 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":72:37)
#loc57 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":73:17)
#loc58 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":74:21)
#loc59 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":76:24)
#loc60 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":76:25)
#loc61 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":76:34)
#loc62 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":76:37)
#loc63 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":76:51)
#loc64 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":76:17)
#loc65 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":76:52)
#loc66 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":77:38)
#loc67 = loc("/usr/include/netinet/in.h":249:5)
#loc68 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":77:17)
#loc69 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":78:43)
#loc70 = loc("/usr/include/netinet/in.h":251:20)
#loc71 = loc("/usr/include/netinet/in.h":33:15)
#loc72 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":78:17)
#loc73 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":79:42)
#loc74 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":79:36)
#loc75 = loc("/usr/include/netinet/in.h":250:15)
#loc76 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":79:17)
#loc77 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":79:50)
#loc78 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":80:17)
#loc79 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":83:17)
#loc80 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":80:26)
#loc81 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":80:58)
#loc82 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":80:59)
#loc83 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":80:68)
#loc84 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":80:82)
#loc85 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":80:21)
#loc86 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":80:88)
#loc87 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":81:17)
#loc88 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":82:21)
#loc89 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":84:17)
#loc90 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":87:17)
#loc91 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":84:28)
#loc92 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":84:42)
#loc93 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":84:21)
#loc94 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":84:61)
#loc95 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":85:17)
#loc96 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":86:21)
#loc97 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":88:39)
#loc98 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":88:53)
#loc99 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":88:59)
#loc100 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":88:32)
#loc101 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":88:17)
#loc102 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":88:63)
#loc103 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":89:17)
#loc104 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":92:17)
#loc105 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":89:21)
#loc106 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":89:37)
#loc107 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":90:17)
#loc108 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":91:21)
#loc109 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":94:35)
#loc110 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":94:49)
#loc111 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":94:62)
#loc112 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":94:80)
#loc113 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":94:83)
#loc114 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":94:30)
#loc115 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":94:17)
#loc116 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":94:84)
#loc117 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":95:17)
#loc118 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":98:17)
#loc119 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":95:21)
#loc120 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":95:35)
#loc122 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":95:51)
#loc123 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":95:65)
#loc124 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":96:17)
#loc125 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":97:21)
#loc126 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":100:43)
#loc127 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":100:29)
#loc128 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":100:17)
#loc129 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":102:29)
#loc130 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":102:24)
#loc131 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":102:17)
#loc132 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":102:40)
#loc133 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":105:13)
#loc134 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":108:13)
#loc135 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":105:17)
#loc136 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":105:33)
#loc137 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":106:13)
#loc138 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":107:30)
#loc139 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":107:17)
#loc140 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":109:13)
#loc141 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":112:13)
#loc142 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":109:17)
#loc143 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":109:33)
#loc144 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":110:13)
#loc145 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":111:30)
#loc146 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":111:17)
#loc147 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":120:9)
#loc148 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":122:5)
#loc149 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":127:5)
#loc150 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":122:11)
#loc151 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":123:5)
#loc152 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":125:22)
#loc153 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":125:28)
#loc154 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":125:9)
#loc155 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":126:9)
#loc156 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":248:1)
#loc157 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":252:1)
#loc158 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":250:5)
#loc159 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":250:13)
#loc160 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":251:5)
#loc161 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":251:13)
#loc162 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc163 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc164 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":222:23)
#loc165 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":135:1)
#loc166 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":226:1)
#loc167 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":147:13)
#loc168 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":147:17)
#loc169 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":148:13)
#loc170 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":148:32)
#loc171 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":149:13)
#loc172 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":149:35)
#loc173 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":150:13)
#loc174 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":150:35)
#loc175 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":151:13)
#loc176 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":151:45)
#loc177 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":137:5)
#loc178 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":137:9)
#loc179 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":139:13)
#loc180 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":139:12)
#loc181 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":139:5)
#loc182 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":140:5)
#loc183 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":212:5)
#loc184 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":140:11)
#loc185 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":141:5)
#loc186 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":142:9)
#loc187 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":210:9)
#loc188 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":152:13)
#loc189 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":195:21)
#loc190 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":195:20)
#loc191 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":153:13)
#loc192 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":194:13)
#loc193 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":162:39)
#loc194 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":162:48)
#loc195 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":162:61)
#loc196 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":162:32)
#loc197 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":162:17)
#loc198 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":162:72)
#loc199 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":163:17)
#loc200 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":166:17)
#loc201 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":163:21)
#loc202 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":163:37)
#loc203 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":164:17)
#loc204 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":165:21)
#loc205 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":167:24)
#loc206 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":167:25)
#loc207 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":167:34)
#loc208 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":167:37)
#loc209 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":167:51)
#loc210 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":167:17)
#loc211 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":167:52)
#loc212 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":168:38)
#loc213 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":168:17)
#loc214 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":169:43)
#loc215 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":169:17)
#loc216 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":170:42)
#loc217 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":170:36)
#loc218 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":170:17)
#loc219 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":170:50)
#loc220 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":171:17)
#loc221 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":174:17)
#loc222 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":171:26)
#loc223 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":171:58)
#loc224 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":171:59)
#loc225 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":171:68)
#loc226 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":171:82)
#loc227 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":171:21)
#loc228 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":171:88)
#loc229 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":172:17)
#loc230 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":173:21)
#loc231 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":175:17)
#loc232 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":178:17)
#loc233 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":175:28)
#loc234 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":175:42)
#loc235 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":175:21)
#loc236 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":175:61)
#loc237 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":176:17)
#loc238 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":177:21)
#loc239 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":179:39)
#loc240 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":179:53)
#loc241 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":179:59)
#loc242 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":179:32)
#loc243 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":179:17)
#loc244 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":179:63)
#loc245 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":180:17)
#loc246 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":183:17)
#loc247 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":180:21)
#loc248 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":180:37)
#loc249 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":181:17)
#loc250 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":182:21)
#loc251 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":185:35)
#loc252 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":185:49)
#loc253 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":185:62)
#loc254 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":185:80)
#loc255 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":185:83)
#loc256 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":185:30)
#loc257 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":185:17)
#loc258 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":185:84)
#loc259 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":186:17)
#loc260 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":189:17)
#loc261 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":186:21)
#loc262 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":186:35)
#loc264 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":186:51)
#loc265 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":186:65)
#loc266 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":187:17)
#loc267 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":188:21)
#loc268 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":191:43)
#loc269 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":191:29)
#loc270 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":191:17)
#loc271 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":193:29)
#loc272 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":193:24)
#loc273 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":193:17)
#loc274 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":193:40)
#loc275 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":196:13)
#loc276 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":199:13)
#loc277 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":196:17)
#loc278 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":196:33)
#loc279 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":197:13)
#loc280 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":198:30)
#loc281 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":198:17)
#loc282 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":200:13)
#loc283 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":203:13)
#loc284 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":200:17)
#loc285 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":200:33)
#loc286 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":201:13)
#loc287 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":202:30)
#loc288 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":202:17)
#loc289 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":211:9)
#loc290 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":213:5)
#loc291 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":225:5)
#loc292 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":213:11)
#loc293 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":214:5)
#loc294 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":216:9)
#loc295 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":223:9)
#loc296 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":216:13)
#loc297 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":216:21)
#loc298 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":217:9)
#loc299 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":219:9)
#loc300 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":221:9)
#loc301 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":218:26)
#loc302 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":218:32)
#loc303 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":218:13)
#loc304 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":222:13)
#loc305 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":224:9)
#loc306 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":229:1)
#loc307 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":246:1)
#loc308 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":231:5)
#loc309 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":231:9)
#loc310 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":233:13)
#loc311 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":233:12)
#loc312 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":233:5)
#loc313 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":234:5)
#loc314 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":239:5)
#loc315 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":234:11)
#loc316 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":235:5)
#loc317 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":237:16)
#loc318 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":237:9)
#loc319 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":238:9)
#loc320 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":240:5)
#loc321 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":245:5)
#loc322 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":240:11)
#loc323 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":241:5)
#loc324 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":243:22)
#loc325 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":243:28)
#loc326 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":243:9)
#loc327 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_16.c":244:9)
#loc328 = loc(fused[#loc1, #loc2])
#loc329 = loc(fused[#loc3, #loc4])
#loc330 = loc(fused[#loc5, #loc6])
#loc331 = loc(fused[#loc7, #loc8])
#loc332 = loc(fused[#loc9, #loc10])
#loc333 = loc(fused[#loc11, #loc12])
#loc334 = loc(fused[#loc13, #loc14])
#loc335 = loc(fused[#loc15, #loc16])
#loc336 = loc(fused[#loc17, #loc18])
#loc337 = loc(fused[#loc19, #loc20])
#loc338 = loc(fused[#loc21, #loc22])
#loc339 = loc(fused[#loc23, #loc24])
#loc340 = loc(fused[#loc25, #loc26])
#loc341 = loc(fused[#loc27, #loc28])
#loc342 = loc(fused[#loc29, #loc30])
#loc343 = loc(fused[#loc31, #loc32])
#loc344 = loc(fused[#loc35, #loc33])
#loc345 = loc(fused[#loc36, #loc37])
#loc346 = loc(fused[#loc39, #loc37])
#loc347 = loc(fused[#loc40, #loc41])
#loc348 = loc(fused[#loc42, #loc43])
#loc349 = loc(fused[#loc45, #loc46])
#loc350 = loc(fused[#loc51, #loc52])
#loc351 = loc(fused[#loc53, #loc54])
#loc352 = loc(fused[#loc55, #loc56])
#loc353 = loc(fused[#loc57, #loc54])
#loc354 = loc(fused[#loc59, #loc60])
#loc355 = loc(fused[#loc62, #loc63])
#loc356 = loc(fused[#loc64, #loc65])
#loc357 = loc(fused[#loc68, #loc66])
#loc358 = loc(fused[#loc72, #loc69])
#loc359 = loc(fused[#loc76, #loc77])
#loc360 = loc(fused[#loc78, #loc79])
#loc361 = loc(fused[#loc81, #loc82])
#loc362 = loc(fused[#loc83, #loc84])
#loc363 = loc(fused[#loc85, #loc86])
#loc364 = loc(fused[#loc87, #loc79])
#loc365 = loc(fused[#loc89, #loc90])
#loc366 = loc(fused[#loc93, #loc94])
#loc367 = loc(fused[#loc95, #loc90])
#loc368 = loc(fused[#loc101, #loc102])
#loc369 = loc(fused[#loc103, #loc104])
#loc370 = loc(fused[#loc105, #loc106])
#loc371 = loc(fused[#loc107, #loc104])
#loc372 = loc(fused[#loc111, #loc112])
#loc373 = loc(fused[#loc115, #loc116])
#loc374 = loc(fused[#loc117, #loc118])
#loc375 = loc(fused[#loc119, #loc120])
#loc376 = loc(fused[#loc122, #loc123])
#loc377 = loc(fused[#loc124, #loc118])
#loc378 = loc(fused[#loc128, #loc126])
#loc379 = loc(fused[#loc131, #loc132])
#loc380 = loc(fused[#loc133, #loc134])
#loc381 = loc(fused[#loc135, #loc136])
#loc382 = loc(fused[#loc137, #loc134])
#loc383 = loc(fused[#loc140, #loc141])
#loc384 = loc(fused[#loc142, #loc143])
#loc385 = loc(fused[#loc144, #loc141])
#loc386 = loc(fused[#loc148, #loc149])
#loc387 = loc(fused[#loc151, #loc149])
#loc388 = loc(fused[#loc152, #loc153])
#loc389 = loc(fused[#loc156, #loc157])
#loc390 = loc(fused[#loc158, #loc159])
#loc391 = loc(fused[#loc160, #loc161])
#loc392 = loc(fused[#loc162, #loc163])
#loc393 = loc(fused[#loc165, #loc166])
#loc394 = loc(fused[#loc167, #loc168])
#loc395 = loc(fused[#loc169, #loc170])
#loc396 = loc(fused[#loc171, #loc172])
#loc397 = loc(fused[#loc173, #loc174])
#loc398 = loc(fused[#loc175, #loc176])
#loc399 = loc(fused[#loc177, #loc178])
#loc400 = loc(fused[#loc181, #loc179])
#loc401 = loc(fused[#loc182, #loc183])
#loc402 = loc(fused[#loc185, #loc183])
#loc403 = loc(fused[#loc186, #loc187])
#loc404 = loc(fused[#loc188, #loc189])
#loc405 = loc(fused[#loc191, #loc192])
#loc406 = loc(fused[#loc197, #loc198])
#loc407 = loc(fused[#loc199, #loc200])
#loc408 = loc(fused[#loc201, #loc202])
#loc409 = loc(fused[#loc203, #loc200])
#loc410 = loc(fused[#loc205, #loc206])
#loc411 = loc(fused[#loc208, #loc209])
#loc412 = loc(fused[#loc210, #loc211])
#loc413 = loc(fused[#loc213, #loc212])
#loc414 = loc(fused[#loc215, #loc214])
#loc415 = loc(fused[#loc218, #loc219])
#loc416 = loc(fused[#loc220, #loc221])
#loc417 = loc(fused[#loc223, #loc224])
#loc418 = loc(fused[#loc225, #loc226])
#loc419 = loc(fused[#loc227, #loc228])
#loc420 = loc(fused[#loc229, #loc221])
#loc421 = loc(fused[#loc231, #loc232])
#loc422 = loc(fused[#loc235, #loc236])
#loc423 = loc(fused[#loc237, #loc232])
#loc424 = loc(fused[#loc243, #loc244])
#loc425 = loc(fused[#loc245, #loc246])
#loc426 = loc(fused[#loc247, #loc248])
#loc427 = loc(fused[#loc249, #loc246])
#loc428 = loc(fused[#loc253, #loc254])
#loc429 = loc(fused[#loc257, #loc258])
#loc430 = loc(fused[#loc259, #loc260])
#loc431 = loc(fused[#loc261, #loc262])
#loc432 = loc(fused[#loc264, #loc265])
#loc433 = loc(fused[#loc266, #loc260])
#loc434 = loc(fused[#loc270, #loc268])
#loc435 = loc(fused[#loc273, #loc274])
#loc436 = loc(fused[#loc275, #loc276])
#loc437 = loc(fused[#loc277, #loc278])
#loc438 = loc(fused[#loc279, #loc276])
#loc439 = loc(fused[#loc282, #loc283])
#loc440 = loc(fused[#loc284, #loc285])
#loc441 = loc(fused[#loc286, #loc283])
#loc442 = loc(fused[#loc290, #loc291])
#loc443 = loc(fused[#loc293, #loc291])
#loc444 = loc(fused[#loc294, #loc295])
#loc445 = loc(fused[#loc296, #loc297])
#loc446 = loc(fused[#loc298, #loc299, #loc300, #loc295])
#loc447 = loc(fused[#loc301, #loc302])
#loc448 = loc(fused[#loc306, #loc307])
#loc449 = loc(fused[#loc308, #loc309])
#loc450 = loc(fused[#loc312, #loc310])
#loc451 = loc(fused[#loc313, #loc314])
#loc452 = loc(fused[#loc316, #loc314])
#loc453 = loc(fused[#loc318, #loc317])
#loc454 = loc(fused[#loc320, #loc321])
#loc455 = loc(fused[#loc323, #loc321])
#loc456 = loc(fused[#loc324, #loc325])
