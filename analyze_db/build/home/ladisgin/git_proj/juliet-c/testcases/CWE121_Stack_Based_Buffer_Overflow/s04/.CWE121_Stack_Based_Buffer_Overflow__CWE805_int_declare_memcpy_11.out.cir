!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc53 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_11.c":103:10)
#loc54 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_11.c":103:14)
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_11.c":103:20)
#loc56 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_11.c":103:32)
#loc159 = loc(fused[#loc53, #loc54])
#loc160 = loc(fused[#loc55, #loc56])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s04/CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_11.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i32 = dense<32> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func no_proto private @globalReturnsTrue(...) -> !s32i loc(#loc137)
  cir.func private @printIntLine(!s32i) loc(#loc138)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_11_bad() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc140)
    %1 = cir.alloca !cir.array<!s32i x 50>, !cir.ptr<!cir.array<!s32i x 50>>, ["dataBadBuffer"] {alignment = 16 : i64} loc(#loc141)
    %2 = cir.alloca !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>>, ["dataGoodBuffer"] {alignment = 16 : i64} loc(#loc142)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc144)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc144)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc15)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc15)
      cir.if %6 {
        %7 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s32i x 50>>), !cir.ptr<!s32i> loc(#loc18)
        cir.store %7, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc146)
      } loc(#loc145)
    } loc(#loc143)
    cir.scope {
      %3 = cir.alloca !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc148)
      %4 = cir.const #cir.zero : !cir.array<!s32i x 100> loc(#loc148)
      cir.store %4, %3 : !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>> loc(#loc148)
      %5 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc24)
      %6 = cir.cast(bitcast, %5 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc24)
      %7 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s32i x 100>>), !cir.ptr<!s32i> loc(#loc25)
      %8 = cir.cast(bitcast, %7 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc25)
      %9 = cir.const #cir.int<100> : !s32i loc(#loc26)
      %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc26)
      %11 = cir.const #cir.int<4> : !u64i loc(#loc149)
      %12 = cir.binop(mul, %10, %11) : !u64i loc(#loc150)
      cir.libc.memcpy %12 bytes from %8 to %6 : !u64i, !cir.ptr<!void> -> !cir.ptr<!void> loc(#loc151)
      %13 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc31)
      %14 = cir.const #cir.int<0> : !s32i loc(#loc32)
      %15 = cir.ptr_stride(%13 : !cir.ptr<!s32i>, %14 : !s32i), !cir.ptr<!s32i> loc(#loc33)
      %16 = cir.load %15 : !cir.ptr<!s32i>, !s32i loc(#loc31)
      cir.call @printIntLine(%16) : (!s32i) -> () loc(#loc34)
    } loc(#loc147)
    cir.return loc(#loc6)
  } loc(#loc139)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_11_good() extra(#fn_attr) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc153)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc37)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc154)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc39)
    cir.return loc(#loc36)
  } loc(#loc152)
  cir.func private @srand(!u32i) extra(#fn_attr1) loc(#loc155)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc156)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc157)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc47)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc48)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc49)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc50)
  cir.func @main(%arg0: !s32i loc(fused[#loc53, #loc54]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc55, #loc56])) -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc159)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc160)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc52)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc57)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc57)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc58)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc59)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc59)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr1) loc(#loc60)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc47)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc47)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc61)
    %8 = cir.get_global @CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_11_good : !cir.ptr<!cir.func<!void ()>> loc(#loc161)
    cir.call @CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_11_good() : () -> () loc(#loc62)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc48)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc48)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc64)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc49)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc49)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc65)
    %13 = cir.get_global @CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_11_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc162)
    cir.call @CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_11_bad() : () -> () loc(#loc66)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc50)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc50)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc68)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc69)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc163)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc163)
    cir.return %17 : !s32i loc(#loc163)
  } loc(#loc158)
  cir.func no_proto private @globalReturnsFalse(...) -> !s32i loc(#loc164)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc73)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc166)
    %1 = cir.alloca !cir.array<!s32i x 50>, !cir.ptr<!cir.array<!s32i x 50>>, ["dataBadBuffer"] {alignment = 16 : i64} loc(#loc167)
    %2 = cir.alloca !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>>, ["dataGoodBuffer"] {alignment = 16 : i64} loc(#loc168)
    cir.scope {
      %3 = cir.get_global @globalReturnsFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc170)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc170)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc84)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc84)
      cir.if %6 {
        %7 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc73)
        %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc73)
        cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc89)
      } else {
        %7 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s32i x 100>>), !cir.ptr<!s32i> loc(#loc90)
        cir.store %7, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc172)
      } loc(#loc171)
    } loc(#loc169)
    cir.scope {
      %3 = cir.alloca !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc174)
      %4 = cir.const #cir.zero : !cir.array<!s32i x 100> loc(#loc174)
      cir.store %4, %3 : !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>> loc(#loc174)
      %5 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc96)
      %6 = cir.cast(bitcast, %5 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc96)
      %7 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s32i x 100>>), !cir.ptr<!s32i> loc(#loc97)
      %8 = cir.cast(bitcast, %7 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc97)
      %9 = cir.const #cir.int<100> : !s32i loc(#loc98)
      %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc98)
      %11 = cir.const #cir.int<4> : !u64i loc(#loc175)
      %12 = cir.binop(mul, %10, %11) : !u64i loc(#loc176)
      cir.libc.memcpy %12 bytes from %8 to %6 : !u64i, !cir.ptr<!void> -> !cir.ptr<!void> loc(#loc177)
      %13 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc103)
      %14 = cir.const #cir.int<0> : !s32i loc(#loc104)
      %15 = cir.ptr_stride(%13 : !cir.ptr<!s32i>, %14 : !s32i), !cir.ptr<!s32i> loc(#loc105)
      %16 = cir.load %15 : !cir.ptr<!s32i>, !s32i loc(#loc103)
      cir.call @printIntLine(%16) : (!s32i) -> () loc(#loc106)
    } loc(#loc173)
    cir.return loc(#loc75)
  } loc(#loc165)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc179)
    %1 = cir.alloca !cir.array<!s32i x 50>, !cir.ptr<!cir.array<!s32i x 50>>, ["dataBadBuffer"] {alignment = 16 : i64} loc(#loc180)
    %2 = cir.alloca !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>>, ["dataGoodBuffer"] {alignment = 16 : i64} loc(#loc181)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc183)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc183)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc117)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc117)
      cir.if %6 {
        %7 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s32i x 100>>), !cir.ptr<!s32i> loc(#loc120)
        cir.store %7, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc185)
      } loc(#loc184)
    } loc(#loc182)
    cir.scope {
      %3 = cir.alloca !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc187)
      %4 = cir.const #cir.zero : !cir.array<!s32i x 100> loc(#loc187)
      cir.store %4, %3 : !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>> loc(#loc187)
      %5 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc126)
      %6 = cir.cast(bitcast, %5 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc126)
      %7 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s32i x 100>>), !cir.ptr<!s32i> loc(#loc127)
      %8 = cir.cast(bitcast, %7 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc127)
      %9 = cir.const #cir.int<100> : !s32i loc(#loc128)
      %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc128)
      %11 = cir.const #cir.int<4> : !u64i loc(#loc188)
      %12 = cir.binop(mul, %10, %11) : !u64i loc(#loc189)
      cir.libc.memcpy %12 bytes from %8 to %6 : !u64i, !cir.ptr<!void> -> !cir.ptr<!void> loc(#loc190)
      %13 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc133)
      %14 = cir.const #cir.int<0> : !s32i loc(#loc134)
      %15 = cir.ptr_stride(%13 : !cir.ptr<!s32i>, %14 : !s32i), !cir.ptr<!s32i> loc(#loc135)
      %16 = cir.load %15 : !cir.ptr<!s32i>, !s32i loc(#loc133)
      cir.call @printIntLine(%16) : (!s32i) -> () loc(#loc136)
    } loc(#loc186)
    cir.return loc(#loc108)
  } loc(#loc178)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s04/CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_11.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":48:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":48:23)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc5 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_11.c":21:1)
#loc6 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_11.c":38:1)
#loc7 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_11.c":23:5)
#loc8 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_11.c":23:11)
#loc9 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_11.c":24:5)
#loc10 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_11.c":24:25)
#loc11 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_11.c":25:5)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_11.c":25:27)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_11.c":26:5)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_11.c":31:5)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_11.c":26:8)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_11.c":26:26)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_11.c":27:5)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_11.c":30:16)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_11.c":30:9)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_11.c":32:5)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_11.c":37:5)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_11.c":33:9)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_11.c":33:29)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_11.c":35:16)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_11.c":35:22)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_11.c":35:30)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_11.c":35:34)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_11.c":35:44)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_11.c":35:9)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_11.c":35:45)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_11.c":36:22)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_11.c":36:27)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_11.c":36:28)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_11.c":36:9)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_11.c":87:1)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_11.c":91:1)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_11.c":89:5)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_11.c":89:14)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_11.c":90:5)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_11.c":90:14)
#loc41 = loc("/usr/include/stdlib.h":575:1)
#loc42 = loc("/usr/include/stdlib.h":575:41)
#loc43 = loc("/usr/include/time.h":76:1)
#loc44 = loc("/usr/include/time.h":76:38)
#loc45 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc46 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_11.c":108:15)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_11.c":110:15)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_11.c":113:15)
#loc50 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_11.c":115:15)
#loc51 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_11.c":103:1)
#loc52 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_11.c":118:1)
#loc57 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_11.c":104:1)
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_11.c":106:27)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_11.c":106:22)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_11.c":106:5)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_11.c":108:5)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_11.c":109:5)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_11.c":109:75)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_11.c":110:5)
#loc65 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_11.c":113:5)
#loc66 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_11.c":114:5)
#loc67 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_11.c":114:74)
#loc68 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_11.c":115:5)
#loc69 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_11.c":117:12)
#loc70 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_11.c":117:5)
#loc71 = loc("../../../testcasesupport/std_testcase_io.h":50:1)
#loc72 = loc("../../../testcasesupport/std_testcase_io.h":50:24)
#loc73 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_11.c":53:19)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_11.c":45:1)
#loc75 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_11.c":66:1)
#loc76 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_11.c":47:5)
#loc77 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_11.c":47:11)
#loc78 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_11.c":48:5)
#loc79 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_11.c":48:25)
#loc80 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_11.c":49:5)
#loc81 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_11.c":49:27)
#loc82 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_11.c":50:5)
#loc83 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_11.c":59:5)
#loc84 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_11.c":50:8)
#loc85 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_11.c":50:27)
#loc86 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_11.c":51:5)
#loc87 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_11.c":54:5)
#loc88 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_11.c":56:5)
#loc89 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_11.c":53:9)
#loc90 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_11.c":58:16)
#loc91 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_11.c":58:9)
#loc92 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_11.c":60:5)
#loc93 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_11.c":65:5)
#loc94 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_11.c":61:9)
#loc95 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_11.c":61:29)
#loc96 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_11.c":63:16)
#loc97 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_11.c":63:22)
#loc98 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_11.c":63:30)
#loc99 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_11.c":63:34)
#loc100 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_11.c":63:44)
#loc101 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_11.c":63:9)
#loc102 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_11.c":63:45)
#loc103 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_11.c":64:22)
#loc104 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_11.c":64:27)
#loc105 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_11.c":64:28)
#loc106 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_11.c":64:9)
#loc107 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_11.c":69:1)
#loc108 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_11.c":85:1)
#loc109 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_11.c":71:5)
#loc110 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_11.c":71:11)
#loc111 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_11.c":72:5)
#loc112 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_11.c":72:25)
#loc113 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_11.c":73:5)
#loc114 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_11.c":73:27)
#loc115 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_11.c":74:5)
#loc116 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_11.c":78:5)
#loc117 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_11.c":74:8)
#loc118 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_11.c":74:26)
#loc119 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_11.c":75:5)
#loc120 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_11.c":77:16)
#loc121 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_11.c":77:9)
#loc122 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_11.c":79:5)
#loc123 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_11.c":84:5)
#loc124 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_11.c":80:9)
#loc125 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_11.c":80:29)
#loc126 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_11.c":82:16)
#loc127 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_11.c":82:22)
#loc128 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_11.c":82:30)
#loc129 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_11.c":82:34)
#loc130 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_11.c":82:44)
#loc131 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_11.c":82:9)
#loc132 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_11.c":82:45)
#loc133 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_11.c":83:22)
#loc134 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_11.c":83:27)
#loc135 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_11.c":83:28)
#loc136 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_11.c":83:9)
#loc137 = loc(fused[#loc1, #loc2])
#loc138 = loc(fused[#loc3, #loc4])
#loc139 = loc(fused[#loc5, #loc6])
#loc140 = loc(fused[#loc7, #loc8])
#loc141 = loc(fused[#loc9, #loc10])
#loc142 = loc(fused[#loc11, #loc12])
#loc143 = loc(fused[#loc13, #loc14])
#loc144 = loc(fused[#loc15, #loc16])
#loc145 = loc(fused[#loc17, #loc14])
#loc146 = loc(fused[#loc19, #loc18])
#loc147 = loc(fused[#loc20, #loc21])
#loc148 = loc(fused[#loc22, #loc23])
#loc149 = loc(fused[#loc27, #loc28])
#loc150 = loc(fused[#loc26, #loc28])
#loc151 = loc(fused[#loc29, #loc30])
#loc152 = loc(fused[#loc35, #loc36])
#loc153 = loc(fused[#loc37, #loc38])
#loc154 = loc(fused[#loc39, #loc40])
#loc155 = loc(fused[#loc41, #loc42])
#loc156 = loc(fused[#loc43, #loc44])
#loc157 = loc(fused[#loc45, #loc46])
#loc158 = loc(fused[#loc51, #loc52])
#loc161 = loc(fused[#loc62, #loc63])
#loc162 = loc(fused[#loc66, #loc67])
#loc163 = loc(fused[#loc70, #loc69])
#loc164 = loc(fused[#loc71, #loc72])
#loc165 = loc(fused[#loc74, #loc75])
#loc166 = loc(fused[#loc76, #loc77])
#loc167 = loc(fused[#loc78, #loc79])
#loc168 = loc(fused[#loc80, #loc81])
#loc169 = loc(fused[#loc82, #loc83])
#loc170 = loc(fused[#loc84, #loc85])
#loc171 = loc(fused[#loc86, #loc87, #loc88, #loc83])
#loc172 = loc(fused[#loc91, #loc90])
#loc173 = loc(fused[#loc92, #loc93])
#loc174 = loc(fused[#loc94, #loc95])
#loc175 = loc(fused[#loc99, #loc100])
#loc176 = loc(fused[#loc98, #loc100])
#loc177 = loc(fused[#loc101, #loc102])
#loc178 = loc(fused[#loc107, #loc108])
#loc179 = loc(fused[#loc109, #loc110])
#loc180 = loc(fused[#loc111, #loc112])
#loc181 = loc(fused[#loc113, #loc114])
#loc182 = loc(fused[#loc115, #loc116])
#loc183 = loc(fused[#loc117, #loc118])
#loc184 = loc(fused[#loc119, #loc116])
#loc185 = loc(fused[#loc121, #loc120])
#loc186 = loc(fused[#loc122, #loc123])
#loc187 = loc(fused[#loc124, #loc125])
#loc188 = loc(fused[#loc129, #loc130])
#loc189 = loc(fused[#loc128, #loc130])
#loc190 = loc(fused[#loc131, #loc132])
