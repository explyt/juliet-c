!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_31.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc81)
  cir.func private  @exit(!s32i) extra(#fn_attr) loc(#loc82)
  cir.func private  @printLongLongLine(!s64i) loc(#loc83)
  cir.func private  @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc84)
  cir.func no_proto  @CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_31_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["data"] {alignment = 8 : i64} loc(#loc86)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc13)
    cir.store %1, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc87)
    %2 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc15)
    %3 = cir.const #cir.int<8> : !u64i loc(#loc88)
    %4 = cir.call @malloc(%3) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc15)
    %5 = cir.cast(bitcast, %4 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc89)
    cir.store %5, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc90)
    cir.scope {
      %8 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc22)
      %9 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc23)
      %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc23)
      %11 = cir.cmp(eq, %8, %10) : !cir.ptr<!s64i>, !s32i loc(#loc92)
      %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc24)
      cir.if %12 {
        %13 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc26)
        %14 = cir.const #cir.int<1> : !s32i loc(#loc27)
        %15 = cir.unary(minus, %14) : !s32i, !s32i loc(#loc28)
        cir.call @exit(%15) : (!s32i) -> () extra(#fn_attr) loc(#loc26)
      } loc(#loc93)
    } loc(#loc91)
    %6 = cir.const #cir.int<2147483643> : !s64i loc(#loc29)
    %7 = cir.load deref %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc30)
    cir.store %6, %7 : !s64i, !cir.ptr<!s64i> loc(#loc94)
    cir.scope {
      %8 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["dataCopy", init] {alignment = 8 : i64} loc(#loc96)
      %9 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["data", init] {alignment = 8 : i64} loc(#loc97)
      %10 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc35)
      cir.store %10, %8 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc96)
      %11 = cir.load %8 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc37)
      cir.store %11, %9 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc97)
      %12 = cir.load deref %9 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc38)
      %13 = cir.load %12 : !cir.ptr<!s64i>, !s64i loc(#loc39)
      cir.call @printLongLongLine(%13) : (!s64i) -> () loc(#loc40)
      %14 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc41)
      %15 = cir.load %9 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc42)
      %16 = cir.cast(bitcast, %15 : !cir.ptr<!s64i>), !cir.ptr<!void> loc(#loc42)
      cir.call @free(%16) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc41)
    } loc(#loc95)
    cir.return loc(#loc10)
  } loc(#loc85)
  cir.func no_proto  @CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_31_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc99)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc45)
    cir.return loc(#loc44)
  } loc(#loc98)
  cir.func no_proto internal private  @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["data"] {alignment = 8 : i64} loc(#loc101)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc51)
    cir.store %1, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc102)
    %2 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc53)
    %3 = cir.const #cir.int<8> : !u64i loc(#loc103)
    %4 = cir.call @malloc(%3) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc53)
    %5 = cir.cast(bitcast, %4 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc104)
    cir.store %5, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc105)
    cir.scope {
      %8 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc60)
      %9 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc61)
      %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc61)
      %11 = cir.cmp(eq, %8, %10) : !cir.ptr<!s64i>, !s32i loc(#loc107)
      %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc62)
      cir.if %12 {
        %13 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc64)
        %14 = cir.const #cir.int<1> : !s32i loc(#loc65)
        %15 = cir.unary(minus, %14) : !s32i, !s32i loc(#loc66)
        cir.call @exit(%15) : (!s32i) -> () extra(#fn_attr) loc(#loc64)
      } loc(#loc108)
    } loc(#loc106)
    %6 = cir.const #cir.int<2147483643> : !s64i loc(#loc67)
    %7 = cir.load deref %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc68)
    cir.store %6, %7 : !s64i, !cir.ptr<!s64i> loc(#loc109)
    cir.scope {
      %8 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["dataCopy", init] {alignment = 8 : i64} loc(#loc111)
      %9 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["data", init] {alignment = 8 : i64} loc(#loc112)
      %10 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc73)
      cir.store %10, %8 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc111)
      %11 = cir.load %8 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc75)
      cir.store %11, %9 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc112)
      %12 = cir.load deref %9 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc76)
      %13 = cir.load %12 : !cir.ptr<!s64i>, !s64i loc(#loc77)
      cir.call @printLongLongLine(%13) : (!s64i) -> () loc(#loc78)
      %14 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc79)
      %15 = cir.load %9 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc80)
      %16 = cir.cast(bitcast, %15 : !cir.ptr<!s64i>), !cir.ptr<!void> loc(#loc80)
      cir.call @free(%16) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc79)
    } loc(#loc110)
    cir.return loc(#loc48)
  } loc(#loc100)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_31.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":26:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":26:49)
#loc7 = loc("/usr/include/stdlib.h":687:1)
#loc8 = loc("/usr/include/stdlib.h":687:32)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_31.c":21:1)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_31.c":38:1)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_31.c":23:5)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_31.c":23:15)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_31.c":25:12)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_31.c":25:5)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_31.c":28:23)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_31.c":28:30)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_31.c":28:41)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_31.c":28:42)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_31.c":28:5)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_31.c":29:5)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_31.c":29:33)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_31.c":29:9)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_31.c":29:17)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_31.c":29:14)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_31.c":29:23)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_31.c":29:24)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_31.c":29:30)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_31.c":29:29)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_31.c":30:13)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_31.c":30:6)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_31.c":30:5)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_31.c":31:5)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_31.c":37:5)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_31.c":32:9)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_31.c":32:30)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_31.c":33:9)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_31.c":33:26)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_31.c":35:28)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_31.c":35:27)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_31.c":35:9)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_31.c":36:9)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_31.c":36:14)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_31.c":63:1)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_31.c":66:1)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_31.c":65:5)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_31.c":65:13)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_31.c":45:1)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_31.c":61:1)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_31.c":47:5)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_31.c":47:15)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_31.c":49:12)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_31.c":49:5)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_31.c":51:23)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_31.c":51:30)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_31.c":51:42)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_31.c":51:43)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_31.c":51:5)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_31.c":52:5)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_31.c":52:33)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_31.c":52:9)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_31.c":52:17)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_31.c":52:14)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_31.c":52:23)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_31.c":52:24)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_31.c":52:30)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_31.c":52:29)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_31.c":53:13)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_31.c":53:6)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_31.c":53:5)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_31.c":54:5)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_31.c":60:5)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_31.c":55:9)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_31.c":55:30)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_31.c":56:9)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_31.c":56:26)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_31.c":58:28)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_31.c":58:27)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_31.c":58:9)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_31.c":59:9)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_31.c":59:14)
#loc81 = loc(fused[#loc1, #loc2])
#loc82 = loc(fused[#loc3, #loc4])
#loc83 = loc(fused[#loc5, #loc6])
#loc84 = loc(fused[#loc7, #loc8])
#loc85 = loc(fused[#loc9, #loc10])
#loc86 = loc(fused[#loc11, #loc12])
#loc87 = loc(fused[#loc14, #loc13])
#loc88 = loc(fused[#loc16, #loc17])
#loc89 = loc(fused[#loc15, #loc18])
#loc90 = loc(fused[#loc19, #loc18])
#loc91 = loc(fused[#loc20, #loc21])
#loc92 = loc(fused[#loc22, #loc23])
#loc93 = loc(fused[#loc25, #loc21])
#loc94 = loc(fused[#loc31, #loc29])
#loc95 = loc(fused[#loc32, #loc33])
#loc96 = loc(fused[#loc34, #loc35])
#loc97 = loc(fused[#loc36, #loc37])
#loc98 = loc(fused[#loc43, #loc44])
#loc99 = loc(fused[#loc45, #loc46])
#loc100 = loc(fused[#loc47, #loc48])
#loc101 = loc(fused[#loc49, #loc50])
#loc102 = loc(fused[#loc52, #loc51])
#loc103 = loc(fused[#loc54, #loc55])
#loc104 = loc(fused[#loc53, #loc56])
#loc105 = loc(fused[#loc57, #loc56])
#loc106 = loc(fused[#loc58, #loc59])
#loc107 = loc(fused[#loc60, #loc61])
#loc108 = loc(fused[#loc63, #loc59])
#loc109 = loc(fused[#loc69, #loc67])
#loc110 = loc(fused[#loc70, #loc71])
#loc111 = loc(fused[#loc72, #loc73])
#loc112 = loc(fused[#loc74, #loc75])
