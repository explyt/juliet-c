!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc5 = loc("CWE190_Integer_Overflow__char_rand_add_43.cpp":25:23)
#loc6 = loc("CWE190_Integer_Overflow__char_rand_add_43.cpp":25:29)
#loc8 = loc("CWE190_Integer_Overflow__char_rand_add_43.cpp":28:18)
#loc28 = loc("CWE190_Integer_Overflow__char_rand_add_43.cpp":48:27)
#loc29 = loc("CWE190_Integer_Overflow__char_rand_add_43.cpp":48:33)
#loc49 = loc("CWE190_Integer_Overflow__char_rand_add_43.cpp":67:27)
#loc50 = loc("CWE190_Integer_Overflow__char_rand_add_43.cpp":67:33)
#loc52 = loc("CWE190_Integer_Overflow__char_rand_add_43.cpp":70:18)
#loc83 = loc(fused[#loc5, #loc6])
#loc92 = loc(fused[#loc28, #loc29])
#loc100 = loc(fused[#loc49, #loc50])
module @"/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_rand_add_43.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, "dlti.endianness" = "little", "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc81)
  cir.func internal private @_ZN41CWE190_Integer_Overflow__char_rand_add_43L9badSourceERc(%arg0: !cir.ptr<!s8i> loc(fused[#loc5, #loc6])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init, const] {alignment = 8 : i64} loc(#loc83)
    cir.store %arg0, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc7)
    %1 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
    %2 = cir.const #cir.int<1> : !s32i loc(#loc8)
    %3 = cir.binop(and, %1, %2) : !s32i loc(#loc8)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc8)
    cir.brcond %4 ^bb1, ^bb2 loc(#loc8)
  ^bb1:  // pred: ^bb0
    %5 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
    %6 = cir.cast(integral, %5 : !s32i), !u32i loc(#loc8)
    %7 = cir.const #cir.int<30> : !s32i loc(#loc8)
    %8 = cir.shift(left, %6 : !u32i, %7 : !s32i) -> !u32i loc(#loc8)
    %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
    %10 = cir.cast(integral, %9 : !s32i), !u32i loc(#loc8)
    %11 = cir.const #cir.int<15> : !s32i loc(#loc8)
    %12 = cir.shift(left, %10 : !u32i, %11 : !s32i) -> !u32i loc(#loc8)
    %13 = cir.binop(xor, %8, %12) : !u32i loc(#loc8)
    %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
    %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc8)
    %16 = cir.binop(xor, %13, %15) : !u32i loc(#loc8)
    cir.br ^bb3(%16 : !u32i) loc(#loc8)
  ^bb2:  // pred: ^bb0
    %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
    %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc8)
    %19 = cir.const #cir.int<30> : !s32i loc(#loc8)
    %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc8)
    %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
    %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc8)
    %23 = cir.const #cir.int<15> : !s32i loc(#loc8)
    %24 = cir.shift(left, %22 : !u32i, %23 : !s32i) -> !u32i loc(#loc8)
    %25 = cir.binop(xor, %20, %24) : !u32i loc(#loc8)
    %26 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
    %27 = cir.cast(integral, %26 : !s32i), !u32i loc(#loc8)
    %28 = cir.binop(xor, %25, %27) : !u32i loc(#loc8)
    %29 = cir.unary(minus, %28) : !u32i, !u32i loc(#loc8)
    %30 = cir.const #cir.int<1> : !s32i loc(#loc8)
    %31 = cir.cast(integral, %30 : !s32i), !u32i loc(#loc8)
    %32 = cir.binop(sub, %29, %31) : !u32i loc(#loc8)
    cir.br ^bb3(%32 : !u32i) loc(#loc8)
  ^bb3(%33: !u32i loc("CWE190_Integer_Overflow__char_rand_add_43.cpp":28:18)):  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc8)
  ^bb4:  // pred: ^bb3
    %34 = cir.cast(integral, %33 : !u32i), !s32i loc(#loc8)
    %35 = cir.cast(integral, %34 : !s32i), !s8i loc(#loc8)
    %36 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc9)
    cir.store %35, %36 : !s8i, !cir.ptr<!s8i> loc(#loc84)
    cir.return loc(#loc4)
  } loc(#loc82)
  cir.func private @printHexCharLine(!s8i) loc(#loc85)
  cir.func @_ZN41CWE190_Integer_Overflow__char_rand_add_433badEv() extra(#fn_attr1) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc87)
    %1 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc88)
    %2 = cir.const #cir.int<32> : !s8i loc(#loc18)
    cir.store %2, %1 : !s8i, !cir.ptr<!s8i> loc(#loc89)
    cir.call @_ZN41CWE190_Integer_Overflow__char_rand_add_43L9badSourceERc(%1) : (!cir.ptr<!s8i>) -> () loc(#loc20)
    cir.br ^bb1 loc(#loc90)
  ^bb1:  // pred: ^bb0
    %3 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc23)
    %4 = cir.cast(integral, %3 : !s8i), !s32i loc(#loc23)
    %5 = cir.const #cir.int<1> : !s32i loc(#loc15)
    %6 = cir.binop(add, %4, %5) nsw : !s32i loc(#loc23)
    %7 = cir.cast(integral, %6 : !s32i), !s8i loc(#loc23)
    cir.store %7, %0 : !s8i, !cir.ptr<!s8i> loc(#loc87)
    %8 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc24)
    cir.call @printHexCharLine(%8) : (!s8i) -> () loc(#loc25)
    cir.br ^bb2 loc(#loc22)
  ^bb2:  // pred: ^bb1
    cir.return loc(#loc13)
  } loc(#loc86)
  cir.func internal private @_ZN41CWE190_Integer_Overflow__char_rand_add_43L13goodG2BSourceERc(%arg0: !cir.ptr<!s8i> loc(fused[#loc28, #loc29])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init, const] {alignment = 8 : i64} loc(#loc92)
    cir.store %arg0, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc30)
    %1 = cir.const #cir.int<2> : !s32i loc(#loc31)
    %2 = cir.cast(integral, %1 : !s32i), !s8i loc(#loc31)
    %3 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc32)
    cir.store %2, %3 : !s8i, !cir.ptr<!s8i> loc(#loc93)
    cir.return loc(#loc27)
  } loc(#loc91)
  cir.func internal private @_ZN41CWE190_Integer_Overflow__char_rand_add_43L7goodG2BEv() extra(#fn_attr1) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc95)
    %1 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc96)
    %2 = cir.const #cir.int<32> : !s8i loc(#loc39)
    cir.store %2, %1 : !s8i, !cir.ptr<!s8i> loc(#loc97)
    cir.call @_ZN41CWE190_Integer_Overflow__char_rand_add_43L13goodG2BSourceERc(%1) : (!cir.ptr<!s8i>) -> () loc(#loc41)
    cir.br ^bb1 loc(#loc98)
  ^bb1:  // pred: ^bb0
    %3 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc44)
    %4 = cir.cast(integral, %3 : !s8i), !s32i loc(#loc44)
    %5 = cir.const #cir.int<1> : !s32i loc(#loc36)
    %6 = cir.binop(add, %4, %5) nsw : !s32i loc(#loc44)
    %7 = cir.cast(integral, %6 : !s32i), !s8i loc(#loc44)
    cir.store %7, %0 : !s8i, !cir.ptr<!s8i> loc(#loc95)
    %8 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc45)
    cir.call @printHexCharLine(%8) : (!s8i) -> () loc(#loc46)
    cir.br ^bb2 loc(#loc43)
  ^bb2:  // pred: ^bb1
    cir.return loc(#loc34)
  } loc(#loc94)
  cir.func internal private @_ZN41CWE190_Integer_Overflow__char_rand_add_43L13goodB2GSourceERc(%arg0: !cir.ptr<!s8i> loc(fused[#loc49, #loc50])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init, const] {alignment = 8 : i64} loc(#loc100)
    cir.store %arg0, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc51)
    %1 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc52)
    %2 = cir.const #cir.int<1> : !s32i loc(#loc52)
    %3 = cir.binop(and, %1, %2) : !s32i loc(#loc52)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc52)
    cir.brcond %4 ^bb1, ^bb2 loc(#loc52)
  ^bb1:  // pred: ^bb0
    %5 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc52)
    %6 = cir.cast(integral, %5 : !s32i), !u32i loc(#loc52)
    %7 = cir.const #cir.int<30> : !s32i loc(#loc52)
    %8 = cir.shift(left, %6 : !u32i, %7 : !s32i) -> !u32i loc(#loc52)
    %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc52)
    %10 = cir.cast(integral, %9 : !s32i), !u32i loc(#loc52)
    %11 = cir.const #cir.int<15> : !s32i loc(#loc52)
    %12 = cir.shift(left, %10 : !u32i, %11 : !s32i) -> !u32i loc(#loc52)
    %13 = cir.binop(xor, %8, %12) : !u32i loc(#loc52)
    %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc52)
    %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc52)
    %16 = cir.binop(xor, %13, %15) : !u32i loc(#loc52)
    cir.br ^bb3(%16 : !u32i) loc(#loc52)
  ^bb2:  // pred: ^bb0
    %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc52)
    %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc52)
    %19 = cir.const #cir.int<30> : !s32i loc(#loc52)
    %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc52)
    %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc52)
    %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc52)
    %23 = cir.const #cir.int<15> : !s32i loc(#loc52)
    %24 = cir.shift(left, %22 : !u32i, %23 : !s32i) -> !u32i loc(#loc52)
    %25 = cir.binop(xor, %20, %24) : !u32i loc(#loc52)
    %26 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc52)
    %27 = cir.cast(integral, %26 : !s32i), !u32i loc(#loc52)
    %28 = cir.binop(xor, %25, %27) : !u32i loc(#loc52)
    %29 = cir.unary(minus, %28) : !u32i, !u32i loc(#loc52)
    %30 = cir.const #cir.int<1> : !s32i loc(#loc52)
    %31 = cir.cast(integral, %30 : !s32i), !u32i loc(#loc52)
    %32 = cir.binop(sub, %29, %31) : !u32i loc(#loc52)
    cir.br ^bb3(%32 : !u32i) loc(#loc52)
  ^bb3(%33: !u32i loc("CWE190_Integer_Overflow__char_rand_add_43.cpp":70:18)):  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc52)
  ^bb4:  // pred: ^bb3
    %34 = cir.cast(integral, %33 : !u32i), !s32i loc(#loc52)
    %35 = cir.cast(integral, %34 : !s32i), !s8i loc(#loc52)
    %36 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc53)
    cir.store %35, %36 : !s8i, !cir.ptr<!s8i> loc(#loc101)
    cir.return loc(#loc48)
  } loc(#loc99)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc102)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc56)
  cir.func internal private @_ZN41CWE190_Integer_Overflow__char_rand_add_43L7goodB2GEv() extra(#fn_attr1) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc104)
    %1 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc105)
    %2 = cir.const #cir.int<32> : !s8i loc(#loc63)
    cir.store %2, %1 : !s8i, !cir.ptr<!s8i> loc(#loc106)
    cir.call @_ZN41CWE190_Integer_Overflow__char_rand_add_43L13goodB2GSourceERc(%1) : (!cir.ptr<!s8i>) -> () loc(#loc65)
    cir.br ^bb1 loc(#loc107)
  ^bb1:  // pred: ^bb0
    %3 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc68)
    %4 = cir.cast(integral, %3 : !s8i), !s32i loc(#loc68)
    %5 = cir.const #cir.int<127> : !s32i loc(#loc69)
    %6 = cir.cmp(lt, %4, %5) : !s32i, !cir.bool loc(#loc108)
    cir.brcond %6 ^bb2, ^bb3 loc(#loc109)
  ^bb2:  // pred: ^bb1
    %7 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc73)
    %8 = cir.cast(integral, %7 : !s8i), !s32i loc(#loc73)
    %9 = cir.const #cir.int<1> : !s32i loc(#loc60)
    %10 = cir.binop(add, %8, %9) nsw : !s32i loc(#loc73)
    %11 = cir.cast(integral, %10 : !s32i), !s8i loc(#loc73)
    cir.store %11, %0 : !s8i, !cir.ptr<!s8i> loc(#loc104)
    %12 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc74)
    cir.call @printHexCharLine(%12) : (!s8i) -> () loc(#loc75)
    cir.br ^bb4 loc(#loc71)
  ^bb3:  // pred: ^bb1
    %13 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc56)
    %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc56)
    cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc76)
    cir.br ^bb4 loc(#loc67)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc67)
  ^bb5:  // pred: ^bb4
    cir.return loc(#loc58)
  } loc(#loc103)
  cir.func @_ZN41CWE190_Integer_Overflow__char_rand_add_434goodEv() extra(#fn_attr1) {
    cir.call @_ZN41CWE190_Integer_Overflow__char_rand_add_43L7goodG2BEv() : () -> () loc(#loc79)
    cir.call @_ZN41CWE190_Integer_Overflow__char_rand_add_43L7goodB2GEv() : () -> () loc(#loc80)
    cir.return loc(#loc78)
  } loc(#loc110)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_rand_add_43.cpp":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("CWE190_Integer_Overflow__char_rand_add_43.cpp":25:1)
#loc4 = loc("CWE190_Integer_Overflow__char_rand_add_43.cpp":29:1)
#loc7 = loc("CWE190_Integer_Overflow__char_rand_add_43.cpp":26:1)
#loc9 = loc("CWE190_Integer_Overflow__char_rand_add_43.cpp":28:5)
#loc10 = loc("../../../testcasesupport/std_testcase_io.h":30:1)
#loc11 = loc("../../../testcasesupport/std_testcase_io.h":30:35)
#loc12 = loc("CWE190_Integer_Overflow__char_rand_add_43.cpp":31:1)
#loc13 = loc("CWE190_Integer_Overflow__char_rand_add_43.cpp":41:1)
#loc14 = loc("CWE190_Integer_Overflow__char_rand_add_43.cpp":38:9)
#loc15 = loc("CWE190_Integer_Overflow__char_rand_add_43.cpp":38:30)
#loc16 = loc("CWE190_Integer_Overflow__char_rand_add_43.cpp":33:5)
#loc17 = loc("CWE190_Integer_Overflow__char_rand_add_43.cpp":33:10)
#loc18 = loc("CWE190_Integer_Overflow__char_rand_add_43.cpp":34:12)
#loc19 = loc("CWE190_Integer_Overflow__char_rand_add_43.cpp":34:5)
#loc20 = loc("CWE190_Integer_Overflow__char_rand_add_43.cpp":35:5)
#loc21 = loc("CWE190_Integer_Overflow__char_rand_add_43.cpp":36:5)
#loc22 = loc("CWE190_Integer_Overflow__char_rand_add_43.cpp":40:5)
#loc23 = loc("CWE190_Integer_Overflow__char_rand_add_43.cpp":38:23)
#loc24 = loc("CWE190_Integer_Overflow__char_rand_add_43.cpp":39:26)
#loc25 = loc("CWE190_Integer_Overflow__char_rand_add_43.cpp":39:9)
#loc26 = loc("CWE190_Integer_Overflow__char_rand_add_43.cpp":48:1)
#loc27 = loc("CWE190_Integer_Overflow__char_rand_add_43.cpp":52:1)
#loc30 = loc("CWE190_Integer_Overflow__char_rand_add_43.cpp":49:1)
#loc31 = loc("CWE190_Integer_Overflow__char_rand_add_43.cpp":51:12)
#loc32 = loc("CWE190_Integer_Overflow__char_rand_add_43.cpp":51:5)
#loc33 = loc("CWE190_Integer_Overflow__char_rand_add_43.cpp":54:1)
#loc34 = loc("CWE190_Integer_Overflow__char_rand_add_43.cpp":64:1)
#loc35 = loc("CWE190_Integer_Overflow__char_rand_add_43.cpp":61:9)
#loc36 = loc("CWE190_Integer_Overflow__char_rand_add_43.cpp":61:30)
#loc37 = loc("CWE190_Integer_Overflow__char_rand_add_43.cpp":56:5)
#loc38 = loc("CWE190_Integer_Overflow__char_rand_add_43.cpp":56:10)
#loc39 = loc("CWE190_Integer_Overflow__char_rand_add_43.cpp":57:12)
#loc40 = loc("CWE190_Integer_Overflow__char_rand_add_43.cpp":57:5)
#loc41 = loc("CWE190_Integer_Overflow__char_rand_add_43.cpp":58:5)
#loc42 = loc("CWE190_Integer_Overflow__char_rand_add_43.cpp":59:5)
#loc43 = loc("CWE190_Integer_Overflow__char_rand_add_43.cpp":63:5)
#loc44 = loc("CWE190_Integer_Overflow__char_rand_add_43.cpp":61:23)
#loc45 = loc("CWE190_Integer_Overflow__char_rand_add_43.cpp":62:26)
#loc46 = loc("CWE190_Integer_Overflow__char_rand_add_43.cpp":62:9)
#loc47 = loc("CWE190_Integer_Overflow__char_rand_add_43.cpp":67:1)
#loc48 = loc("CWE190_Integer_Overflow__char_rand_add_43.cpp":71:1)
#loc51 = loc("CWE190_Integer_Overflow__char_rand_add_43.cpp":68:1)
#loc53 = loc("CWE190_Integer_Overflow__char_rand_add_43.cpp":70:5)
#loc54 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc55 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc56 = loc("CWE190_Integer_Overflow__char_rand_add_43.cpp":86:19)
#loc57 = loc("CWE190_Integer_Overflow__char_rand_add_43.cpp":73:1)
#loc58 = loc("CWE190_Integer_Overflow__char_rand_add_43.cpp":88:1)
#loc59 = loc("CWE190_Integer_Overflow__char_rand_add_43.cpp":81:9)
#loc60 = loc("CWE190_Integer_Overflow__char_rand_add_43.cpp":81:30)
#loc61 = loc("CWE190_Integer_Overflow__char_rand_add_43.cpp":75:5)
#loc62 = loc("CWE190_Integer_Overflow__char_rand_add_43.cpp":75:10)
#loc63 = loc("CWE190_Integer_Overflow__char_rand_add_43.cpp":76:12)
#loc64 = loc("CWE190_Integer_Overflow__char_rand_add_43.cpp":76:5)
#loc65 = loc("CWE190_Integer_Overflow__char_rand_add_43.cpp":77:5)
#loc66 = loc("CWE190_Integer_Overflow__char_rand_add_43.cpp":79:5)
#loc67 = loc("CWE190_Integer_Overflow__char_rand_add_43.cpp":87:5)
#loc68 = loc("CWE190_Integer_Overflow__char_rand_add_43.cpp":79:9)
#loc69 = loc("CWE190_Integer_Overflow__char_rand_add_43.cpp":79:16)
#loc70 = loc("CWE190_Integer_Overflow__char_rand_add_43.cpp":80:5)
#loc71 = loc("CWE190_Integer_Overflow__char_rand_add_43.cpp":83:5)
#loc72 = loc("CWE190_Integer_Overflow__char_rand_add_43.cpp":85:5)
#loc73 = loc("CWE190_Integer_Overflow__char_rand_add_43.cpp":81:23)
#loc74 = loc("CWE190_Integer_Overflow__char_rand_add_43.cpp":82:26)
#loc75 = loc("CWE190_Integer_Overflow__char_rand_add_43.cpp":82:9)
#loc76 = loc("CWE190_Integer_Overflow__char_rand_add_43.cpp":86:9)
#loc77 = loc("CWE190_Integer_Overflow__char_rand_add_43.cpp":90:1)
#loc78 = loc("CWE190_Integer_Overflow__char_rand_add_43.cpp":94:1)
#loc79 = loc("CWE190_Integer_Overflow__char_rand_add_43.cpp":92:5)
#loc80 = loc("CWE190_Integer_Overflow__char_rand_add_43.cpp":93:5)
#loc81 = loc(fused[#loc1, #loc2])
#loc82 = loc(fused[#loc3, #loc4])
#loc84 = loc(fused[#loc9, #loc8])
#loc85 = loc(fused[#loc10, #loc11])
#loc86 = loc(fused[#loc12, #loc13])
#loc87 = loc(fused[#loc14, #loc15])
#loc88 = loc(fused[#loc16, #loc17])
#loc89 = loc(fused[#loc19, #loc18])
#loc90 = loc(fused[#loc21, #loc22])
#loc91 = loc(fused[#loc26, #loc27])
#loc93 = loc(fused[#loc32, #loc31])
#loc94 = loc(fused[#loc33, #loc34])
#loc95 = loc(fused[#loc35, #loc36])
#loc96 = loc(fused[#loc37, #loc38])
#loc97 = loc(fused[#loc40, #loc39])
#loc98 = loc(fused[#loc42, #loc43])
#loc99 = loc(fused[#loc47, #loc48])
#loc101 = loc(fused[#loc53, #loc52])
#loc102 = loc(fused[#loc54, #loc55])
#loc103 = loc(fused[#loc57, #loc58])
#loc104 = loc(fused[#loc59, #loc60])
#loc105 = loc(fused[#loc61, #loc62])
#loc106 = loc(fused[#loc64, #loc63])
#loc107 = loc(fused[#loc66, #loc67])
#loc108 = loc(fused[#loc68, #loc69])
#loc109 = loc(fused[#loc70, #loc71, #loc72, #loc67])
#loc110 = loc(fused[#loc77, #loc78])
