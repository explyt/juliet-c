!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.struct<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.struct<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.struct<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc74 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":217:10)
#loc75 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":217:14)
#loc76 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":217:20)
#loc77 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":217:32)
#true = #cir.bool<true> : !cir.bool
#loc301 = loc(fused[#loc74, #loc75])
#loc302 = loc(fused[#loc76, #loc77])
!ty__IO_FILE = !cir.struct<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!cir.struct<struct "_IO_FILE">>>, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_fgets_square_08.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @fgets(!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc271)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc272)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc273)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc274)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"fgets() failed.\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc9)
  cir.func private @printIntLine(!s32i) loc(#loc275)
  cir.func no_proto @CWE190_Integer_Overflow__int_fgets_square_08_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc277)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc16)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc278)
    cir.scope {
      %2 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc280)
      %3 = cir.call %2() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc20)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc20)
      cir.if %4 {
        cir.scope {
          %5 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc283)
          %6 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc283)
          cir.store %6, %5 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc283)
          cir.scope {
            %7 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc29)
            %8 = cir.const #cir.int<3> : !s32i loc(#loc30)
            %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc30)
            %10 = cir.const #cir.int<4> : !u64i loc(#loc30)
            %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc30)
            %12 = cir.const #cir.int<2> : !s32i loc(#loc30)
            %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc30)
            %14 = cir.binop(add, %11, %13) : !u64i loc(#loc30)
            %15 = cir.cast(integral, %14 : !u64i), !s32i loc(#loc30)
            %16 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc272)
            %17 = cir.load %16 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc31)
            %18 = cir.call @fgets(%7, %15, %17) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc32)
            %19 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc33)
            %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc33)
            %21 = cir.cmp(ne, %18, %20) : !cir.ptr<!s8i>, !cir.bool loc(#loc285)
            cir.if %21 {
              %22 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc37)
              %23 = cir.call @atoi(%22) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc38)
              cir.store %23, %0 : !s32i, !cir.ptr<!s32i> loc(#loc287)
            } else {
              %22 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc9)
              %23 = cir.cast(array_to_ptrdecay, %22 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc9)
              cir.call @printLine(%23) : (!cir.ptr<!s8i>) -> () loc(#loc41)
            } loc(#loc286)
          } loc(#loc284)
        } loc(#loc282)
      } loc(#loc281)
    } loc(#loc279)
    cir.scope {
      %2 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc289)
      %3 = cir.call %2() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc44)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc44)
      cir.if %4 {
        cir.scope {
          %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc292)
          %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc51)
          %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc50)
          %8 = cir.binop(mul, %6, %7) nsw : !s32i loc(#loc51)
          cir.store %8, %5 : !s32i, !cir.ptr<!s32i> loc(#loc292)
          %9 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc52)
          cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc53)
        } loc(#loc291)
      } loc(#loc290)
    } loc(#loc288)
    cir.return loc(#loc13)
  } loc(#loc276)
  cir.func no_proto @CWE190_Integer_Overflow__int_fgets_square_08_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc294)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc56)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc295)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc58)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc296)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc60)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc297)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc62)
    cir.return loc(#loc55)
  } loc(#loc293)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc298)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc299)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc68)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc69)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc70)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc71)
  cir.func @main(%arg0: !s32i loc(fused[#loc74, #loc75]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc76, #loc77])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc301)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc302)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc73)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc78)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc78)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc79)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc80)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc80)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc81)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc68)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc68)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc82)
    %8 = cir.get_global @CWE190_Integer_Overflow__int_fgets_square_08_good : !cir.ptr<!cir.func<!void ()>> loc(#loc303)
    cir.call @CWE190_Integer_Overflow__int_fgets_square_08_good() : () -> () loc(#loc83)
    %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc69)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc69)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc85)
    %11 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc70)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc70)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc86)
    %13 = cir.get_global @CWE190_Integer_Overflow__int_fgets_square_08_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc304)
    cir.call @CWE190_Integer_Overflow__int_fgets_square_08_bad() : () -> () loc(#loc87)
    %14 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc71)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc71)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc89)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc90)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc305)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc305)
    cir.return %17 : !s32i loc(#loc305)
  } loc(#loc300)
  cir.func no_proto internal private @staticReturnsTrue() -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc93)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc94)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc307)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc307)
    cir.return %2 : !s32i loc(#loc307)
  } loc(#loc306)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc96)
  cir.func private @sqrt(!cir.double) -> !cir.double extra(#fn_attr) loc(#loc97)
  cir.global "private" constant cir_private dsolocal @".str.6" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc98)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc309)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc103)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc310)
    cir.scope {
      %2 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc312)
      %3 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc107)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc107)
      cir.if %4 {
        cir.scope {
          %5 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc315)
          %6 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc315)
          cir.store %6, %5 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc315)
          cir.scope {
            %7 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc116)
            %8 = cir.const #cir.int<3> : !s32i loc(#loc117)
            %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc117)
            %10 = cir.const #cir.int<4> : !u64i loc(#loc117)
            %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc117)
            %12 = cir.const #cir.int<2> : !s32i loc(#loc117)
            %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc117)
            %14 = cir.binop(add, %11, %13) : !u64i loc(#loc117)
            %15 = cir.cast(integral, %14 : !u64i), !s32i loc(#loc117)
            %16 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc272)
            %17 = cir.load %16 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc118)
            %18 = cir.call @fgets(%7, %15, %17) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc119)
            %19 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc120)
            %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc120)
            %21 = cir.cmp(ne, %18, %20) : !cir.ptr<!s8i>, !cir.bool loc(#loc317)
            cir.if %21 {
              %22 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc124)
              %23 = cir.call @atoi(%22) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc125)
              cir.store %23, %0 : !s32i, !cir.ptr<!s32i> loc(#loc319)
            } else {
              %22 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc128)
              %23 = cir.cast(array_to_ptrdecay, %22 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc128)
              cir.call @printLine(%23) : (!cir.ptr<!s8i>) -> () loc(#loc129)
            } loc(#loc318)
          } loc(#loc316)
        } loc(#loc314)
      } loc(#loc313)
    } loc(#loc311)
    cir.scope {
      %2 = cir.get_global @staticReturnsFalse : !cir.ptr<!cir.func<!s32i ()>> loc(#loc321)
      %3 = cir.call %2() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc132)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc132)
      cir.if %4 {
        %5 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc96)
        %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc96)
        cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc137)
      } else {
        cir.scope {
          %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc140)
          %6 = cir.const #cir.int<2147483647> : !s32i loc(#loc141)
          %7 = cir.unary(minus, %6) : !s32i, !s32i loc(#loc141)
          %8 = cir.const #cir.int<1> : !s32i loc(#loc141)
          %9 = cir.binop(sub, %7, %8) nsw : !s32i loc(#loc141)
          %10 = cir.cmp(gt, %5, %9) : !s32i, !cir.bool loc(#loc324)
          %11 = cir.ternary(%10, true {
            %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc143)
            %13 = cir.abs %12 poison : !s32i loc(#loc144)
            %14 = cir.cast(integral, %13 : !s32i), !s64i loc(#loc144)
            %15 = cir.get_global @sqrt : !cir.ptr<!cir.func<!cir.double (!cir.double)>> loc(#loc145)
            %16 = cir.const #cir.int<2147483647> : !s32i loc(#loc146)
            %17 = cir.cast(int_to_float, %16 : !s32i), !cir.double loc(#loc146)
            %18 = cir.call @sqrt(%17) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc145)
            %19 = cir.cast(float_to_int, %18 : !cir.double), !s64i loc(#loc145)
            %20 = cir.cmp(lt, %14, %19) : !s64i, !cir.bool loc(#loc325)
            %21 = cir.ternary(%20, true {
              %22 = cir.const #true loc(#loc142)
              cir.yield %22 : !cir.bool loc(#loc142)
            }, false {
              %22 = cir.const #false loc(#loc142)
              cir.yield %22 : !cir.bool loc(#loc142)
            }) : (!cir.bool) -> !cir.bool loc(#loc142)
            cir.yield %21 : !cir.bool loc(#loc142)
          }, false {
            %12 = cir.const #false loc(#loc142)
            cir.yield %12 : !cir.bool loc(#loc142)
          }) : (!cir.bool) -> !cir.bool loc(#loc142)
          cir.if %11 {
            %12 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc327)
            %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc153)
            %14 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc152)
            %15 = cir.binop(mul, %13, %14) nsw : !s32i loc(#loc153)
            cir.store %15, %12 : !s32i, !cir.ptr<!s32i> loc(#loc327)
            %16 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc154)
            cir.call @printIntLine(%16) : (!s32i) -> () loc(#loc155)
          } else {
            %12 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc98)
            %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc98)
            cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc156)
          } loc(#loc326)
        } loc(#loc323)
      } loc(#loc322)
    } loc(#loc320)
    cir.return loc(#loc100)
  } loc(#loc308)
  cir.func no_proto internal private @staticReturnsFalse() -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc158)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc159)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc329)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc329)
    cir.return %2 : !s32i loc(#loc329)
  } loc(#loc328)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc331)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc165)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc332)
    cir.scope {
      %2 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc334)
      %3 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc169)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc169)
      cir.if %4 {
        cir.scope {
          %5 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc337)
          %6 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc337)
          cir.store %6, %5 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc337)
          cir.scope {
            %7 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc178)
            %8 = cir.const #cir.int<3> : !s32i loc(#loc179)
            %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc179)
            %10 = cir.const #cir.int<4> : !u64i loc(#loc179)
            %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc179)
            %12 = cir.const #cir.int<2> : !s32i loc(#loc179)
            %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc179)
            %14 = cir.binop(add, %11, %13) : !u64i loc(#loc179)
            %15 = cir.cast(integral, %14 : !u64i), !s32i loc(#loc179)
            %16 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc272)
            %17 = cir.load %16 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc180)
            %18 = cir.call @fgets(%7, %15, %17) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc181)
            %19 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc182)
            %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc182)
            %21 = cir.cmp(ne, %18, %20) : !cir.ptr<!s8i>, !cir.bool loc(#loc339)
            cir.if %21 {
              %22 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc186)
              %23 = cir.call @atoi(%22) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc187)
              cir.store %23, %0 : !s32i, !cir.ptr<!s32i> loc(#loc341)
            } else {
              %22 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc190)
              %23 = cir.cast(array_to_ptrdecay, %22 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc190)
              cir.call @printLine(%23) : (!cir.ptr<!s8i>) -> () loc(#loc191)
            } loc(#loc340)
          } loc(#loc338)
        } loc(#loc336)
      } loc(#loc335)
    } loc(#loc333)
    cir.scope {
      %2 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc343)
      %3 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc194)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc194)
      cir.if %4 {
        cir.scope {
          %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc199)
          %6 = cir.const #cir.int<2147483647> : !s32i loc(#loc200)
          %7 = cir.unary(minus, %6) : !s32i, !s32i loc(#loc200)
          %8 = cir.const #cir.int<1> : !s32i loc(#loc200)
          %9 = cir.binop(sub, %7, %8) nsw : !s32i loc(#loc200)
          %10 = cir.cmp(gt, %5, %9) : !s32i, !cir.bool loc(#loc346)
          %11 = cir.ternary(%10, true {
            %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc202)
            %13 = cir.abs %12 poison : !s32i loc(#loc203)
            %14 = cir.cast(integral, %13 : !s32i), !s64i loc(#loc203)
            %15 = cir.get_global @sqrt : !cir.ptr<!cir.func<!cir.double (!cir.double)>> loc(#loc204)
            %16 = cir.const #cir.int<2147483647> : !s32i loc(#loc205)
            %17 = cir.cast(int_to_float, %16 : !s32i), !cir.double loc(#loc205)
            %18 = cir.call @sqrt(%17) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc204)
            %19 = cir.cast(float_to_int, %18 : !cir.double), !s64i loc(#loc204)
            %20 = cir.cmp(lt, %14, %19) : !s64i, !cir.bool loc(#loc347)
            %21 = cir.ternary(%20, true {
              %22 = cir.const #true loc(#loc201)
              cir.yield %22 : !cir.bool loc(#loc201)
            }, false {
              %22 = cir.const #false loc(#loc201)
              cir.yield %22 : !cir.bool loc(#loc201)
            }) : (!cir.bool) -> !cir.bool loc(#loc201)
            cir.yield %21 : !cir.bool loc(#loc201)
          }, false {
            %12 = cir.const #false loc(#loc201)
            cir.yield %12 : !cir.bool loc(#loc201)
          }) : (!cir.bool) -> !cir.bool loc(#loc201)
          cir.if %11 {
            %12 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc349)
            %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc212)
            %14 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc211)
            %15 = cir.binop(mul, %13, %14) nsw : !s32i loc(#loc212)
            cir.store %15, %12 : !s32i, !cir.ptr<!s32i> loc(#loc349)
            %16 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc213)
            cir.call @printIntLine(%16) : (!s32i) -> () loc(#loc214)
          } else {
            %12 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc215)
            %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc215)
            cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc216)
          } loc(#loc348)
        } loc(#loc345)
      } loc(#loc344)
    } loc(#loc342)
    cir.return loc(#loc162)
  } loc(#loc330)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc351)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc221)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc352)
    cir.scope {
      %2 = cir.get_global @staticReturnsFalse : !cir.ptr<!cir.func<!s32i ()>> loc(#loc354)
      %3 = cir.call @staticReturnsFalse() : () -> !s32i loc(#loc225)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc225)
      cir.if %4 {
        %5 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc230)
        %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc230)
        cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc231)
      } else {
        %5 = cir.const #cir.int<2> : !s32i loc(#loc232)
        cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc356)
      } loc(#loc355)
    } loc(#loc353)
    cir.scope {
      %2 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc358)
      %3 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc236)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc236)
      cir.if %4 {
        cir.scope {
          %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc361)
          %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc243)
          %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc242)
          %8 = cir.binop(mul, %6, %7) nsw : !s32i loc(#loc243)
          cir.store %8, %5 : !s32i, !cir.ptr<!s32i> loc(#loc361)
          %9 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc244)
          cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc245)
        } loc(#loc360)
      } loc(#loc359)
    } loc(#loc357)
    cir.return loc(#loc218)
  } loc(#loc350)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc363)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc250)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc364)
    cir.scope {
      %2 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc366)
      %3 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc254)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc254)
      cir.if %4 {
        %5 = cir.const #cir.int<2> : !s32i loc(#loc257)
        cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc368)
      } loc(#loc367)
    } loc(#loc365)
    cir.scope {
      %2 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc370)
      %3 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc261)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc261)
      cir.if %4 {
        cir.scope {
          %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc373)
          %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc268)
          %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc267)
          %8 = cir.binop(mul, %6, %7) nsw : !s32i loc(#loc268)
          cir.store %8, %5 : !s32i, !cir.ptr<!s32i> loc(#loc373)
          %9 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc269)
          cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc270)
        } loc(#loc372)
      } loc(#loc371)
    } loc(#loc369)
    cir.return loc(#loc247)
  } loc(#loc362)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_fgets_square_08.c":0:0)
#loc1 = loc("/usr/include/stdio.h":654:1)
#loc2 = loc("/usr/include/stdio.h":655:59)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("/usr/include/stdlib.h":105:1)
#loc6 = loc("/usr/include/stdlib.h":106:33)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":56:27)
#loc10 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc11 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc12 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":39:1)
#loc13 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":68:1)
#loc14 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":41:5)
#loc15 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":41:9)
#loc16 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":43:12)
#loc17 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":43:5)
#loc18 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":44:5)
#loc19 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":59:5)
#loc20 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":44:8)
#loc21 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":44:26)
#loc22 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":45:5)
#loc23 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":46:9)
#loc24 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":58:9)
#loc25 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":47:13)
#loc26 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":47:49)
#loc27 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":49:13)
#loc28 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":57:13)
#loc29 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":49:23)
#loc30 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":49:36)
#loc31 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":49:53)
#loc32 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":49:17)
#loc33 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":49:63)
#loc34 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":50:13)
#loc35 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":53:13)
#loc36 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":55:13)
#loc37 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":52:29)
#loc38 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":52:24)
#loc39 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":52:17)
#loc40 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":52:40)
#loc41 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":56:17)
#loc42 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":60:5)
#loc43 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":67:5)
#loc44 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":60:8)
#loc45 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":60:26)
#loc46 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":61:5)
#loc47 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":62:9)
#loc48 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":66:9)
#loc49 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":64:13)
#loc50 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":64:33)
#loc51 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":64:26)
#loc52 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":65:26)
#loc53 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":65:13)
#loc54 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":200:1)
#loc55 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":206:1)
#loc56 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":202:5)
#loc57 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":202:14)
#loc58 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":203:5)
#loc59 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":203:14)
#loc60 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":204:5)
#loc61 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":204:14)
#loc62 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":205:5)
#loc63 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":205:14)
#loc64 = loc("/usr/include/stdlib.h":575:1)
#loc65 = loc("/usr/include/stdlib.h":575:41)
#loc66 = loc("/usr/include/time.h":76:1)
#loc67 = loc("/usr/include/time.h":76:38)
#loc68 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":222:15)
#loc69 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":224:15)
#loc70 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":227:15)
#loc71 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":229:15)
#loc72 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":217:1)
#loc73 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":232:1)
#loc78 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":218:1)
#loc79 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":220:27)
#loc80 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":220:22)
#loc81 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":220:5)
#loc82 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":222:5)
#loc83 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":223:5)
#loc84 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":223:55)
#loc85 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":224:5)
#loc86 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":227:5)
#loc87 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":228:5)
#loc88 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":228:54)
#loc89 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":229:5)
#loc90 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":231:12)
#loc91 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":231:5)
#loc92 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":27:1)
#loc93 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":30:1)
#loc94 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":29:12)
#loc95 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":29:5)
#loc96 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":99:19)
#loc97 = loc("/usr/include/bits/mathcalls.h":158:1)
#loc98 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":111:23)
#loc99 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":75:1)
#loc100 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":114:1)
#loc101 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":77:5)
#loc102 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":77:9)
#loc103 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":79:12)
#loc104 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":79:5)
#loc105 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":80:5)
#loc106 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":95:5)
#loc107 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":80:8)
#loc108 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":80:26)
#loc109 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":81:5)
#loc110 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":82:9)
#loc111 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":94:9)
#loc112 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":83:13)
#loc113 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":83:49)
#loc114 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":85:13)
#loc115 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":93:13)
#loc116 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":85:23)
#loc117 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":85:36)
#loc118 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":85:53)
#loc119 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":85:17)
#loc120 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":85:63)
#loc121 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":86:13)
#loc122 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":89:13)
#loc123 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":91:13)
#loc124 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":88:29)
#loc125 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":88:24)
#loc126 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":88:17)
#loc127 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":88:40)
#loc128 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":92:27)
#loc129 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":92:17)
#loc130 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":96:5)
#loc131 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":113:5)
#loc132 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":96:8)
#loc133 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":96:27)
#loc134 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":97:5)
#loc135 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":100:5)
#loc136 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":102:5)
#loc137 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":99:9)
#loc138 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":104:9)
#loc139 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":112:9)
#loc140 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":104:13)
#loc141 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":104:20)
#loc142 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":104:28)
#loc143 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":104:35)
#loc144 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":104:31)
#loc145 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":104:49)
#loc146 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":104:62)
#loc147 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":104:69)
#loc148 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":105:9)
#loc149 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":108:9)
#loc150 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":110:9)
#loc151 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":106:13)
#loc152 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":106:33)
#loc153 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":106:26)
#loc154 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":107:26)
#loc155 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":107:13)
#loc156 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":111:13)
#loc157 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":32:1)
#loc158 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":35:1)
#loc159 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":34:12)
#loc160 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":34:5)
#loc161 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":117:1)
#loc162 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":151:1)
#loc163 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":119:5)
#loc164 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":119:9)
#loc165 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":121:12)
#loc166 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":121:5)
#loc167 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":122:5)
#loc168 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":137:5)
#loc169 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":122:8)
#loc170 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":122:26)
#loc171 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":123:5)
#loc172 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":124:9)
#loc173 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":136:9)
#loc174 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":125:13)
#loc175 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":125:49)
#loc176 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":127:13)
#loc177 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":135:13)
#loc178 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":127:23)
#loc179 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":127:36)
#loc180 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":127:53)
#loc181 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":127:17)
#loc182 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":127:63)
#loc183 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":128:13)
#loc184 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":131:13)
#loc185 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":133:13)
#loc186 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":130:29)
#loc187 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":130:24)
#loc188 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":130:17)
#loc189 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":130:40)
#loc190 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":134:27)
#loc191 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":134:17)
#loc192 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":138:5)
#loc193 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":150:5)
#loc194 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":138:8)
#loc195 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":138:26)
#loc196 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":139:5)
#loc197 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":141:9)
#loc198 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":149:9)
#loc199 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":141:13)
#loc200 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":141:20)
#loc201 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":141:28)
#loc202 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":141:35)
#loc203 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":141:31)
#loc204 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":141:49)
#loc205 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":141:62)
#loc206 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":141:69)
#loc207 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":142:9)
#loc208 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":145:9)
#loc209 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":147:9)
#loc210 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":143:13)
#loc211 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":143:33)
#loc212 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":143:26)
#loc213 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":144:26)
#loc214 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":144:13)
#loc215 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":148:23)
#loc216 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":148:13)
#loc217 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":154:1)
#loc218 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":177:1)
#loc219 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":156:5)
#loc220 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":156:9)
#loc221 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":158:12)
#loc222 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":158:5)
#loc223 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":159:5)
#loc224 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":168:5)
#loc225 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":159:8)
#loc226 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":159:27)
#loc227 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":160:5)
#loc228 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":163:5)
#loc229 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":165:5)
#loc230 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":162:19)
#loc231 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":162:9)
#loc232 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":167:16)
#loc233 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":167:9)
#loc234 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":169:5)
#loc235 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":176:5)
#loc236 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":169:8)
#loc237 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":169:26)
#loc238 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":170:5)
#loc239 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":171:9)
#loc240 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":175:9)
#loc241 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":173:13)
#loc242 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":173:33)
#loc243 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":173:26)
#loc244 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":174:26)
#loc245 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":174:13)
#loc246 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":180:1)
#loc247 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":198:1)
#loc248 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":182:5)
#loc249 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":182:9)
#loc250 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":184:12)
#loc251 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":184:5)
#loc252 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":185:5)
#loc253 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":189:5)
#loc254 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":185:8)
#loc255 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":185:26)
#loc256 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":186:5)
#loc257 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":188:16)
#loc258 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":188:9)
#loc259 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":190:5)
#loc260 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":197:5)
#loc261 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":190:8)
#loc262 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":190:26)
#loc263 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":191:5)
#loc264 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":192:9)
#loc265 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":196:9)
#loc266 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":194:13)
#loc267 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":194:33)
#loc268 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":194:26)
#loc269 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":195:26)
#loc270 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":195:13)
#loc271 = loc(fused[#loc1, #loc2])
#loc272 = loc(fused[#loc3, #loc4])
#loc273 = loc(fused[#loc5, #loc6])
#loc274 = loc(fused[#loc7, #loc8])
#loc275 = loc(fused[#loc10, #loc11])
#loc276 = loc(fused[#loc12, #loc13])
#loc277 = loc(fused[#loc14, #loc15])
#loc278 = loc(fused[#loc17, #loc16])
#loc279 = loc(fused[#loc18, #loc19])
#loc280 = loc(fused[#loc20, #loc21])
#loc281 = loc(fused[#loc22, #loc19])
#loc282 = loc(fused[#loc23, #loc24])
#loc283 = loc(fused[#loc25, #loc26])
#loc284 = loc(fused[#loc27, #loc28])
#loc285 = loc(fused[#loc32, #loc33])
#loc286 = loc(fused[#loc34, #loc35, #loc36, #loc28])
#loc287 = loc(fused[#loc39, #loc40])
#loc288 = loc(fused[#loc42, #loc43])
#loc289 = loc(fused[#loc44, #loc45])
#loc290 = loc(fused[#loc46, #loc43])
#loc291 = loc(fused[#loc47, #loc48])
#loc292 = loc(fused[#loc49, #loc50])
#loc293 = loc(fused[#loc54, #loc55])
#loc294 = loc(fused[#loc56, #loc57])
#loc295 = loc(fused[#loc58, #loc59])
#loc296 = loc(fused[#loc60, #loc61])
#loc297 = loc(fused[#loc62, #loc63])
#loc298 = loc(fused[#loc64, #loc65])
#loc299 = loc(fused[#loc66, #loc67])
#loc300 = loc(fused[#loc72, #loc73])
#loc303 = loc(fused[#loc83, #loc84])
#loc304 = loc(fused[#loc87, #loc88])
#loc305 = loc(fused[#loc91, #loc90])
#loc306 = loc(fused[#loc92, #loc93])
#loc307 = loc(fused[#loc95, #loc94])
#loc308 = loc(fused[#loc99, #loc100])
#loc309 = loc(fused[#loc101, #loc102])
#loc310 = loc(fused[#loc104, #loc103])
#loc311 = loc(fused[#loc105, #loc106])
#loc312 = loc(fused[#loc107, #loc108])
#loc313 = loc(fused[#loc109, #loc106])
#loc314 = loc(fused[#loc110, #loc111])
#loc315 = loc(fused[#loc112, #loc113])
#loc316 = loc(fused[#loc114, #loc115])
#loc317 = loc(fused[#loc119, #loc120])
#loc318 = loc(fused[#loc121, #loc122, #loc123, #loc115])
#loc319 = loc(fused[#loc126, #loc127])
#loc320 = loc(fused[#loc130, #loc131])
#loc321 = loc(fused[#loc132, #loc133])
#loc322 = loc(fused[#loc134, #loc135, #loc136, #loc131])
#loc323 = loc(fused[#loc138, #loc139])
#loc324 = loc(fused[#loc140, #loc141])
#loc325 = loc(fused[#loc144, #loc147])
#loc326 = loc(fused[#loc148, #loc149, #loc150, #loc139])
#loc327 = loc(fused[#loc151, #loc152])
#loc328 = loc(fused[#loc157, #loc158])
#loc329 = loc(fused[#loc160, #loc159])
#loc330 = loc(fused[#loc161, #loc162])
#loc331 = loc(fused[#loc163, #loc164])
#loc332 = loc(fused[#loc166, #loc165])
#loc333 = loc(fused[#loc167, #loc168])
#loc334 = loc(fused[#loc169, #loc170])
#loc335 = loc(fused[#loc171, #loc168])
#loc336 = loc(fused[#loc172, #loc173])
#loc337 = loc(fused[#loc174, #loc175])
#loc338 = loc(fused[#loc176, #loc177])
#loc339 = loc(fused[#loc181, #loc182])
#loc340 = loc(fused[#loc183, #loc184, #loc185, #loc177])
#loc341 = loc(fused[#loc188, #loc189])
#loc342 = loc(fused[#loc192, #loc193])
#loc343 = loc(fused[#loc194, #loc195])
#loc344 = loc(fused[#loc196, #loc193])
#loc345 = loc(fused[#loc197, #loc198])
#loc346 = loc(fused[#loc199, #loc200])
#loc347 = loc(fused[#loc203, #loc206])
#loc348 = loc(fused[#loc207, #loc208, #loc209, #loc198])
#loc349 = loc(fused[#loc210, #loc211])
#loc350 = loc(fused[#loc217, #loc218])
#loc351 = loc(fused[#loc219, #loc220])
#loc352 = loc(fused[#loc222, #loc221])
#loc353 = loc(fused[#loc223, #loc224])
#loc354 = loc(fused[#loc225, #loc226])
#loc355 = loc(fused[#loc227, #loc228, #loc229, #loc224])
#loc356 = loc(fused[#loc233, #loc232])
#loc357 = loc(fused[#loc234, #loc235])
#loc358 = loc(fused[#loc236, #loc237])
#loc359 = loc(fused[#loc238, #loc235])
#loc360 = loc(fused[#loc239, #loc240])
#loc361 = loc(fused[#loc241, #loc242])
#loc362 = loc(fused[#loc246, #loc247])
#loc363 = loc(fused[#loc248, #loc249])
#loc364 = loc(fused[#loc251, #loc250])
#loc365 = loc(fused[#loc252, #loc253])
#loc366 = loc(fused[#loc254, #loc255])
#loc367 = loc(fused[#loc256, #loc253])
#loc368 = loc(fused[#loc258, #loc257])
#loc369 = loc(fused[#loc259, #loc260])
#loc370 = loc(fused[#loc261, #loc262])
#loc371 = loc(fused[#loc263, #loc260])
#loc372 = loc(fused[#loc264, #loc265])
#loc373 = loc(fused[#loc266, #loc267])
