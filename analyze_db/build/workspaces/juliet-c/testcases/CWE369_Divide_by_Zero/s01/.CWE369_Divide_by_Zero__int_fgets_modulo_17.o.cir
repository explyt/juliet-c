!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.record<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.record<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.record<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
!ty__IO_FILE = !cir.record<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/workspaces/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__int_fgets_modulo_17.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, "dlti.mangling_mode" = "e", "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @fgets(!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc167)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc168)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc169)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc170)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"fgets() failed.\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc9)
  cir.func private @printIntLine(!s32i) loc(#loc171)
  cir.func no_proto @CWE369_Divide_by_Zero__int_fgets_modulo_17_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc173)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["j"] {alignment = 4 : i64} loc(#loc174)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc175)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc19)
    %4 = cir.unary(minus, %3) nsw : !s32i, !s32i loc(#loc20)
    cir.store %4, %2 : !s32i, !cir.ptr<!s32i> loc(#loc176)
    cir.scope {
      %5 = cir.const #cir.int<0> : !s32i loc(#loc24)
      cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc178)
      cir.for : cond {
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc26)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc27)
        %8 = cir.cmp(lt, %6, %7) : !s32i, !cir.bool loc(#loc179)
        cir.condition(%8) loc(#loc28)
      } body {
        cir.scope {
          cir.scope {
            %6 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc182)
            %7 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc182)
            cir.store %7, %6 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc182)
            cir.scope {
              %8 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc36)
              %9 = cir.const #cir.int<3> : !s32i loc(#loc37)
              %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc37)
              %11 = cir.const #cir.int<4> : !u64i loc(#loc37)
              %12 = cir.binop(mul, %10, %11) : !u64i loc(#loc37)
              %13 = cir.const #cir.int<2> : !s32i loc(#loc37)
              %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc37)
              %15 = cir.binop(add, %12, %14) : !u64i loc(#loc37)
              %16 = cir.cast(integral, %15 : !u64i), !s32i loc(#loc37)
              %17 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc168)
              %18 = cir.load %17 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc38)
              %19 = cir.call @fgets(%8, %16, %18) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc39)
              %20 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc40)
              %21 = cir.cast(bitcast, %20 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc40)
              %22 = cir.cmp(ne, %19, %21) : !cir.ptr<!s8i>, !cir.bool loc(#loc184)
              cir.if %22 {
                %23 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc44)
                %24 = cir.call @atoi(%23) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc45)
                cir.store %24, %2 : !s32i, !cir.ptr<!s32i> loc(#loc186)
              } else {
                %23 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc9)
                %24 = cir.cast(array_to_ptrdecay, %23 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc9)
                cir.call @printLine(%24) : (!cir.ptr<!s8i>) -> () loc(#loc48)
              } loc(#loc185)
            } loc(#loc183)
          } loc(#loc181)
        } loc(#loc180)
        cir.yield loc(#loc23)
      } step {
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc49)
        %7 = cir.unary(inc, %6) nsw : !s32i, !s32i loc(#loc50)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc187)
        cir.yield loc(#loc177)
      } loc(#loc177)
    } loc(#loc177)
    cir.scope {
      %5 = cir.const #cir.int<0> : !s32i loc(#loc53)
      cir.store %5, %1 : !s32i, !cir.ptr<!s32i> loc(#loc189)
      cir.for : cond {
        %6 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc55)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc56)
        %8 = cir.cmp(lt, %6, %7) : !s32i, !cir.bool loc(#loc190)
        cir.condition(%8) loc(#loc57)
      } body {
        cir.scope {
          %6 = cir.const #cir.int<100> : !s32i loc(#loc59)
          %7 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc60)
          %8 = cir.binop(rem, %6, %7) : !s32i loc(#loc192)
          cir.call @printIntLine(%8) : (!s32i) -> () loc(#loc61)
        } loc(#loc191)
        cir.yield loc(#loc52)
      } step {
        %6 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc62)
        %7 = cir.unary(inc, %6) nsw : !s32i, !s32i loc(#loc63)
        cir.store %7, %1 : !s32i, !cir.ptr<!s32i> loc(#loc193)
        cir.yield loc(#loc188)
      } loc(#loc188)
    } loc(#loc188)
    cir.return loc(#loc13)
  } loc(#loc172)
  cir.func no_proto @CWE369_Divide_by_Zero__int_fgets_modulo_17_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc195)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc66)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc196)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc68)
    cir.return loc(#loc65)
  } loc(#loc194)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"This would result in a divide by zero\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc70)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc198)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["k"] {alignment = 4 : i64} loc(#loc199)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc200)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc78)
    %4 = cir.unary(minus, %3) nsw : !s32i, !s32i loc(#loc79)
    cir.store %4, %2 : !s32i, !cir.ptr<!s32i> loc(#loc201)
    cir.scope {
      %5 = cir.const #cir.int<0> : !s32i loc(#loc83)
      cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc203)
      cir.for : cond {
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc85)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc86)
        %8 = cir.cmp(lt, %6, %7) : !s32i, !cir.bool loc(#loc204)
        cir.condition(%8) loc(#loc87)
      } body {
        cir.scope {
          cir.scope {
            %6 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc207)
            %7 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc207)
            cir.store %7, %6 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc207)
            cir.scope {
              %8 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc95)
              %9 = cir.const #cir.int<3> : !s32i loc(#loc96)
              %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc96)
              %11 = cir.const #cir.int<4> : !u64i loc(#loc96)
              %12 = cir.binop(mul, %10, %11) : !u64i loc(#loc96)
              %13 = cir.const #cir.int<2> : !s32i loc(#loc96)
              %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc96)
              %15 = cir.binop(add, %12, %14) : !u64i loc(#loc96)
              %16 = cir.cast(integral, %15 : !u64i), !s32i loc(#loc96)
              %17 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc168)
              %18 = cir.load %17 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc97)
              %19 = cir.call @fgets(%8, %16, %18) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc98)
              %20 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc99)
              %21 = cir.cast(bitcast, %20 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc99)
              %22 = cir.cmp(ne, %19, %21) : !cir.ptr<!s8i>, !cir.bool loc(#loc209)
              cir.if %22 {
                %23 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc103)
                %24 = cir.call @atoi(%23) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc104)
                cir.store %24, %2 : !s32i, !cir.ptr<!s32i> loc(#loc211)
              } else {
                %23 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc107)
                %24 = cir.cast(array_to_ptrdecay, %23 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc107)
                cir.call @printLine(%24) : (!cir.ptr<!s8i>) -> () loc(#loc108)
              } loc(#loc210)
            } loc(#loc208)
          } loc(#loc206)
        } loc(#loc205)
        cir.yield loc(#loc82)
      } step {
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc109)
        %7 = cir.unary(inc, %6) nsw : !s32i, !s32i loc(#loc110)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc212)
        cir.yield loc(#loc202)
      } loc(#loc202)
    } loc(#loc202)
    cir.scope {
      %5 = cir.const #cir.int<0> : !s32i loc(#loc113)
      cir.store %5, %1 : !s32i, !cir.ptr<!s32i> loc(#loc214)
      cir.for : cond {
        %6 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc115)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc116)
        %8 = cir.cmp(lt, %6, %7) : !s32i, !cir.bool loc(#loc215)
        cir.condition(%8) loc(#loc117)
      } body {
        cir.scope {
          cir.scope {
            %6 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc121)
            %7 = cir.const #cir.int<0> : !s32i loc(#loc122)
            %8 = cir.cmp(ne, %6, %7) : !s32i, !cir.bool loc(#loc218)
            cir.if %8 {
              %9 = cir.const #cir.int<100> : !s32i loc(#loc126)
              %10 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc127)
              %11 = cir.binop(rem, %9, %10) : !s32i loc(#loc220)
              cir.call @printIntLine(%11) : (!s32i) -> () loc(#loc128)
            } else {
              %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc70)
              %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc70)
              cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc129)
            } loc(#loc219)
          } loc(#loc217)
        } loc(#loc216)
        cir.yield loc(#loc112)
      } step {
        %6 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc130)
        %7 = cir.unary(inc, %6) nsw : !s32i, !s32i loc(#loc131)
        cir.store %7, %1 : !s32i, !cir.ptr<!s32i> loc(#loc221)
        cir.yield loc(#loc213)
      } loc(#loc213)
    } loc(#loc213)
    cir.return loc(#loc72)
  } loc(#loc197)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["h"] {alignment = 4 : i64} loc(#loc223)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["j"] {alignment = 4 : i64} loc(#loc224)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc225)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc139)
    %4 = cir.unary(minus, %3) nsw : !s32i, !s32i loc(#loc140)
    cir.store %4, %2 : !s32i, !cir.ptr<!s32i> loc(#loc226)
    cir.scope {
      %5 = cir.const #cir.int<0> : !s32i loc(#loc144)
      cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc228)
      cir.for : cond {
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc146)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc147)
        %8 = cir.cmp(lt, %6, %7) : !s32i, !cir.bool loc(#loc229)
        cir.condition(%8) loc(#loc148)
      } body {
        cir.scope {
          %6 = cir.const #cir.int<7> : !s32i loc(#loc150)
          cir.store %6, %2 : !s32i, !cir.ptr<!s32i> loc(#loc231)
        } loc(#loc230)
        cir.yield loc(#loc143)
      } step {
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc152)
        %7 = cir.unary(inc, %6) nsw : !s32i, !s32i loc(#loc153)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc232)
        cir.yield loc(#loc227)
      } loc(#loc227)
    } loc(#loc227)
    cir.scope {
      %5 = cir.const #cir.int<0> : !s32i loc(#loc156)
      cir.store %5, %1 : !s32i, !cir.ptr<!s32i> loc(#loc234)
      cir.for : cond {
        %6 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc158)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc159)
        %8 = cir.cmp(lt, %6, %7) : !s32i, !cir.bool loc(#loc235)
        cir.condition(%8) loc(#loc160)
      } body {
        cir.scope {
          %6 = cir.const #cir.int<100> : !s32i loc(#loc162)
          %7 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc163)
          %8 = cir.binop(rem, %6, %7) : !s32i loc(#loc237)
          cir.call @printIntLine(%8) : (!s32i) -> () loc(#loc164)
        } loc(#loc236)
        cir.yield loc(#loc155)
      } step {
        %6 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc165)
        %7 = cir.unary(inc, %6) nsw : !s32i, !s32i loc(#loc166)
        cir.store %7, %1 : !s32i, !cir.ptr<!s32i> loc(#loc238)
        cir.yield loc(#loc233)
      } loc(#loc233)
    } loc(#loc233)
    cir.return loc(#loc133)
  } loc(#loc222)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__int_fgets_modulo_17.c":0:0)
#loc1 = loc("/usr/include/stdio.h":654:1)
#loc2 = loc("/usr/include/stdio.h":655:59)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("/usr/include/stdlib.h":105:1)
#loc6 = loc("/usr/include/stdlib.h":106:33)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_17.c":42:27)
#loc10 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc11 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc12 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_17.c":24:1)
#loc13 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_17.c":51:1)
#loc14 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_17.c":26:5)
#loc15 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_17.c":26:9)
#loc16 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_17.c":26:11)
#loc17 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_17.c":27:5)
#loc18 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_17.c":27:9)
#loc19 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_17.c":29:13)
#loc20 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_17.c":29:12)
#loc21 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_17.c":29:5)
#loc22 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_17.c":30:5)
#loc23 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_17.c":45:5)
#loc24 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_17.c":30:13)
#loc25 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_17.c":30:9)
#loc26 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_17.c":30:16)
#loc27 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_17.c":30:20)
#loc28 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_17.c":30:18)
#loc29 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_17.c":31:5)
#loc30 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_17.c":32:9)
#loc31 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_17.c":44:9)
#loc32 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_17.c":33:13)
#loc33 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_17.c":33:49)
#loc34 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_17.c":35:13)
#loc35 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_17.c":43:13)
#loc36 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_17.c":35:23)
#loc37 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_17.c":35:36)
#loc38 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_17.c":35:53)
#loc39 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_17.c":35:17)
#loc40 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_17.c":35:63)
#loc41 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_17.c":36:13)
#loc42 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_17.c":39:13)
#loc43 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_17.c":41:13)
#loc44 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_17.c":38:29)
#loc45 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_17.c":38:24)
#loc46 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_17.c":38:17)
#loc47 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_17.c":38:40)
#loc48 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_17.c":42:17)
#loc49 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_17.c":30:24)
#loc50 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_17.c":30:23)
#loc51 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_17.c":46:5)
#loc52 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_17.c":50:5)
#loc53 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_17.c":46:13)
#loc54 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_17.c":46:9)
#loc55 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_17.c":46:16)
#loc56 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_17.c":46:20)
#loc57 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_17.c":46:18)
#loc58 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_17.c":47:5)
#loc59 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_17.c":49:22)
#loc60 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_17.c":49:28)
#loc61 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_17.c":49:9)
#loc62 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_17.c":46:24)
#loc63 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_17.c":46:23)
#loc64 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_17.c":113:1)
#loc65 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_17.c":117:1)
#loc66 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_17.c":115:5)
#loc67 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_17.c":115:13)
#loc68 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_17.c":116:5)
#loc69 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_17.c":116:13)
#loc70 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_17.c":89:23)
#loc71 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_17.c":58:1)
#loc72 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_17.c":92:1)
#loc73 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_17.c":60:5)
#loc74 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_17.c":60:9)
#loc75 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_17.c":60:11)
#loc76 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_17.c":61:5)
#loc77 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_17.c":61:9)
#loc78 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_17.c":63:13)
#loc79 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_17.c":63:12)
#loc80 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_17.c":63:5)
#loc81 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_17.c":64:5)
#loc82 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_17.c":79:5)
#loc83 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_17.c":64:13)
#loc84 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_17.c":64:9)
#loc85 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_17.c":64:16)
#loc86 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_17.c":64:20)
#loc87 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_17.c":64:18)
#loc88 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_17.c":65:5)
#loc89 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_17.c":66:9)
#loc90 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_17.c":78:9)
#loc91 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_17.c":67:13)
#loc92 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_17.c":67:49)
#loc93 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_17.c":69:13)
#loc94 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_17.c":77:13)
#loc95 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_17.c":69:23)
#loc96 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_17.c":69:36)
#loc97 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_17.c":69:53)
#loc98 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_17.c":69:17)
#loc99 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_17.c":69:63)
#loc100 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_17.c":70:13)
#loc101 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_17.c":73:13)
#loc102 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_17.c":75:13)
#loc103 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_17.c":72:29)
#loc104 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_17.c":72:24)
#loc105 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_17.c":72:17)
#loc106 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_17.c":72:40)
#loc107 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_17.c":76:27)
#loc108 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_17.c":76:17)
#loc109 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_17.c":64:24)
#loc110 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_17.c":64:23)
#loc111 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_17.c":80:5)
#loc112 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_17.c":91:5)
#loc113 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_17.c":80:13)
#loc114 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_17.c":80:9)
#loc115 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_17.c":80:16)
#loc116 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_17.c":80:20)
#loc117 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_17.c":80:18)
#loc118 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_17.c":81:5)
#loc119 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_17.c":83:9)
#loc120 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_17.c":90:9)
#loc121 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_17.c":83:13)
#loc122 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_17.c":83:21)
#loc123 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_17.c":84:9)
#loc124 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_17.c":86:9)
#loc125 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_17.c":88:9)
#loc126 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_17.c":85:26)
#loc127 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_17.c":85:32)
#loc128 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_17.c":85:13)
#loc129 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_17.c":89:13)
#loc130 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_17.c":80:24)
#loc131 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_17.c":80:23)
#loc132 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_17.c":95:1)
#loc133 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_17.c":111:1)
#loc134 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_17.c":97:5)
#loc135 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_17.c":97:9)
#loc136 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_17.c":97:11)
#loc137 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_17.c":98:5)
#loc138 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_17.c":98:9)
#loc139 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_17.c":100:13)
#loc140 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_17.c":100:12)
#loc141 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_17.c":100:5)
#loc142 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_17.c":101:5)
#loc143 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_17.c":105:5)
#loc144 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_17.c":101:13)
#loc145 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_17.c":101:9)
#loc146 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_17.c":101:16)
#loc147 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_17.c":101:20)
#loc148 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_17.c":101:18)
#loc149 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_17.c":102:5)
#loc150 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_17.c":104:16)
#loc151 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_17.c":104:9)
#loc152 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_17.c":101:24)
#loc153 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_17.c":101:23)
#loc154 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_17.c":106:5)
#loc155 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_17.c":110:5)
#loc156 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_17.c":106:13)
#loc157 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_17.c":106:9)
#loc158 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_17.c":106:16)
#loc159 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_17.c":106:20)
#loc160 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_17.c":106:18)
#loc161 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_17.c":107:5)
#loc162 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_17.c":109:22)
#loc163 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_17.c":109:28)
#loc164 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_17.c":109:9)
#loc165 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_17.c":106:24)
#loc166 = loc("CWE369_Divide_by_Zero__int_fgets_modulo_17.c":106:23)
#loc167 = loc(fused[#loc1, #loc2])
#loc168 = loc(fused[#loc3, #loc4])
#loc169 = loc(fused[#loc5, #loc6])
#loc170 = loc(fused[#loc7, #loc8])
#loc171 = loc(fused[#loc10, #loc11])
#loc172 = loc(fused[#loc12, #loc13])
#loc173 = loc(fused[#loc14, #loc15])
#loc174 = loc(fused[#loc14, #loc16])
#loc175 = loc(fused[#loc17, #loc18])
#loc176 = loc(fused[#loc21, #loc19])
#loc177 = loc(fused[#loc22, #loc23])
#loc178 = loc(fused[#loc25, #loc24])
#loc179 = loc(fused[#loc26, #loc27])
#loc180 = loc(fused[#loc29, #loc23])
#loc181 = loc(fused[#loc30, #loc31])
#loc182 = loc(fused[#loc32, #loc33])
#loc183 = loc(fused[#loc34, #loc35])
#loc184 = loc(fused[#loc39, #loc40])
#loc185 = loc(fused[#loc41, #loc42, #loc43, #loc35])
#loc186 = loc(fused[#loc46, #loc47])
#loc187 = loc(fused[#loc50, #loc49])
#loc188 = loc(fused[#loc51, #loc52])
#loc189 = loc(fused[#loc54, #loc53])
#loc190 = loc(fused[#loc55, #loc56])
#loc191 = loc(fused[#loc58, #loc52])
#loc192 = loc(fused[#loc59, #loc60])
#loc193 = loc(fused[#loc63, #loc62])
#loc194 = loc(fused[#loc64, #loc65])
#loc195 = loc(fused[#loc66, #loc67])
#loc196 = loc(fused[#loc68, #loc69])
#loc197 = loc(fused[#loc71, #loc72])
#loc198 = loc(fused[#loc73, #loc74])
#loc199 = loc(fused[#loc73, #loc75])
#loc200 = loc(fused[#loc76, #loc77])
#loc201 = loc(fused[#loc80, #loc78])
#loc202 = loc(fused[#loc81, #loc82])
#loc203 = loc(fused[#loc84, #loc83])
#loc204 = loc(fused[#loc85, #loc86])
#loc205 = loc(fused[#loc88, #loc82])
#loc206 = loc(fused[#loc89, #loc90])
#loc207 = loc(fused[#loc91, #loc92])
#loc208 = loc(fused[#loc93, #loc94])
#loc209 = loc(fused[#loc98, #loc99])
#loc210 = loc(fused[#loc100, #loc101, #loc102, #loc94])
#loc211 = loc(fused[#loc105, #loc106])
#loc212 = loc(fused[#loc110, #loc109])
#loc213 = loc(fused[#loc111, #loc112])
#loc214 = loc(fused[#loc114, #loc113])
#loc215 = loc(fused[#loc115, #loc116])
#loc216 = loc(fused[#loc118, #loc112])
#loc217 = loc(fused[#loc119, #loc120])
#loc218 = loc(fused[#loc121, #loc122])
#loc219 = loc(fused[#loc123, #loc124, #loc125, #loc120])
#loc220 = loc(fused[#loc126, #loc127])
#loc221 = loc(fused[#loc131, #loc130])
#loc222 = loc(fused[#loc132, #loc133])
#loc223 = loc(fused[#loc134, #loc135])
#loc224 = loc(fused[#loc134, #loc136])
#loc225 = loc(fused[#loc137, #loc138])
#loc226 = loc(fused[#loc141, #loc139])
#loc227 = loc(fused[#loc142, #loc143])
#loc228 = loc(fused[#loc145, #loc144])
#loc229 = loc(fused[#loc146, #loc147])
#loc230 = loc(fused[#loc149, #loc143])
#loc231 = loc(fused[#loc151, #loc150])
#loc232 = loc(fused[#loc153, #loc152])
#loc233 = loc(fused[#loc154, #loc155])
#loc234 = loc(fused[#loc157, #loc156])
#loc235 = loc(fused[#loc158, #loc159])
#loc236 = loc(fused[#loc161, #loc155])
#loc237 = loc(fused[#loc162, #loc163])
#loc238 = loc(fused[#loc166, #loc165])
