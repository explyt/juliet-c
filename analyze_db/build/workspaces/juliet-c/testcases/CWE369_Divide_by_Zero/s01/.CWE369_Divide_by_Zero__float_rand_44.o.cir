!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc5 = loc("CWE369_Divide_by_Zero__float_rand_44.c":24:21)
#loc6 = loc("CWE369_Divide_by_Zero__float_rand_44.c":24:27)
#loc26 = loc("CWE369_Divide_by_Zero__float_rand_44.c":41:19)
#loc38 = loc("CWE369_Divide_by_Zero__float_rand_44.c":51:25)
#loc39 = loc("CWE369_Divide_by_Zero__float_rand_44.c":51:31)
#loc66 = loc("CWE369_Divide_by_Zero__float_rand_44.c":72:25)
#loc67 = loc("CWE369_Divide_by_Zero__float_rand_44.c":72:31)
#loc92 = loc("CWE369_Divide_by_Zero__float_rand_44.c":93:19)
#loc98 = loc(fused[#loc5, #loc6])
#loc112 = loc(fused[#loc38, #loc39])
#loc123 = loc(fused[#loc66, #loc67])
module @"/workspaces/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__float_rand_44.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i32 = dense<32> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @printIntLine(!s32i) loc(#loc96)
  cir.func internal private @badSink(%arg0: !cir.float loc(fused[#loc5, #loc6])) extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc99)
    %1 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data", init] {alignment = 4 : i64} loc(#loc98)
    cir.store %arg0, %1 : !cir.float, !cir.ptr<!cir.float> loc(#loc9)
    cir.br ^bb1 loc(#loc100)
  ^bb1:  // pred: ^bb0
    %2 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc12)
    %3 = cir.load %1 : !cir.ptr<!cir.float>, !cir.float loc(#loc13)
    %4 = cir.cast(floating, %3 : !cir.float), !cir.double loc(#loc13)
    %5 = cir.binop(div, %2, %4) : !cir.double loc(#loc101)
    %6 = cir.cast(float_to_int, %5 : !cir.double), !s32i loc(#loc101)
    cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc99)
    %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc14)
    cir.call @printIntLine(%7) : (!s32i) -> () loc(#loc15)
    cir.br ^bb2 loc(#loc11)
  ^bb2:  // pred: ^bb1
    cir.return loc(#loc4)
  } loc(#loc97)
  cir.func private @rand() -> !s32i extra(#fn_attr1) loc(#loc102)
  cir.func no_proto @CWE369_Divide_by_Zero__float_rand_44_bad() extra(#fn_attr) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc104)
    %1 = cir.alloca !cir.ptr<!cir.func<(!cir.float)>>, !cir.ptr<!cir.ptr<!cir.func<(!cir.float)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc105)
    %2 = cir.get_global @badSink : !cir.ptr<!cir.func<(!cir.float)>> loc(#loc23)
    cir.store %2, %1 : !cir.ptr<!cir.func<(!cir.float)>>, !cir.ptr<!cir.ptr<!cir.func<(!cir.float)>>> loc(#loc105)
    %3 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc24)
    cir.store %3, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc106)
    %4 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc26)
    %5 = cir.const #cir.int<1> : !s32i loc(#loc26)
    %6 = cir.binop(and, %4, %5) : !s32i loc(#loc26)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc26)
    cir.brcond %7 ^bb1, ^bb2 loc(#loc26)
  ^bb1:  // pred: ^bb0
    %8 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc26)
    %9 = cir.cast(integral, %8 : !s32i), !u32i loc(#loc26)
    %10 = cir.const #cir.int<30> : !s32i loc(#loc26)
    %11 = cir.shift(left, %9 : !u32i, %10 : !s32i) -> !u32i loc(#loc26)
    %12 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc26)
    %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc26)
    %14 = cir.const #cir.int<15> : !s32i loc(#loc26)
    %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc26)
    %16 = cir.binop(xor, %11, %15) : !u32i loc(#loc26)
    %17 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc26)
    %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc26)
    %19 = cir.binop(xor, %16, %18) : !u32i loc(#loc26)
    cir.br ^bb3(%19 : !u32i) loc(#loc26)
  ^bb2:  // pred: ^bb0
    %20 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc26)
    %21 = cir.cast(integral, %20 : !s32i), !u32i loc(#loc26)
    %22 = cir.const #cir.int<30> : !s32i loc(#loc26)
    %23 = cir.shift(left, %21 : !u32i, %22 : !s32i) -> !u32i loc(#loc26)
    %24 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc26)
    %25 = cir.cast(integral, %24 : !s32i), !u32i loc(#loc26)
    %26 = cir.const #cir.int<15> : !s32i loc(#loc26)
    %27 = cir.shift(left, %25 : !u32i, %26 : !s32i) -> !u32i loc(#loc26)
    %28 = cir.binop(xor, %23, %27) : !u32i loc(#loc26)
    %29 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc26)
    %30 = cir.cast(integral, %29 : !s32i), !u32i loc(#loc26)
    %31 = cir.binop(xor, %28, %30) : !u32i loc(#loc26)
    %32 = cir.unary(minus, %31) : !u32i, !u32i loc(#loc26)
    %33 = cir.const #cir.int<1> : !s32i loc(#loc26)
    %34 = cir.cast(integral, %33 : !s32i), !u32i loc(#loc26)
    %35 = cir.binop(sub, %32, %34) : !u32i loc(#loc26)
    cir.br ^bb3(%35 : !u32i) loc(#loc26)
  ^bb3(%36: !u32i loc("CWE369_Divide_by_Zero__float_rand_44.c":41:19)):  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc26)
  ^bb4:  // pred: ^bb3
    %37 = cir.cast(integral, %36 : !u32i), !s32i loc(#loc26)
    %38 = cir.cast(int_to_float, %37 : !s32i), !cir.float loc(#loc26)
    cir.store %38, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc107)
    %39 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<(!cir.float)>>>, !cir.ptr<!cir.func<(!cir.float)>> loc(#loc28)
    %40 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc29)
    cir.call %39(%40) : (!cir.ptr<!cir.func<(!cir.float)>>, !cir.float) -> () loc(#loc28)
    cir.return loc(#loc19)
  } loc(#loc103)
  cir.func no_proto @CWE369_Divide_by_Zero__float_rand_44_good() extra(#fn_attr) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc109)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc32)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc110)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc34)
    cir.return loc(#loc31)
  } loc(#loc108)
  cir.func internal private @goodG2BSink(%arg0: !cir.float loc(fused[#loc38, #loc39])) extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc113)
    %1 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data", init] {alignment = 4 : i64} loc(#loc112)
    cir.store %arg0, %1 : !cir.float, !cir.ptr<!cir.float> loc(#loc42)
    cir.br ^bb1 loc(#loc114)
  ^bb1:  // pred: ^bb0
    %2 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc45)
    %3 = cir.load %1 : !cir.ptr<!cir.float>, !cir.float loc(#loc46)
    %4 = cir.cast(floating, %3 : !cir.float), !cir.double loc(#loc46)
    %5 = cir.binop(div, %2, %4) : !cir.double loc(#loc115)
    %6 = cir.cast(float_to_int, %5 : !cir.double), !s32i loc(#loc115)
    cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc113)
    %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc47)
    cir.call @printIntLine(%7) : (!s32i) -> () loc(#loc48)
    cir.br ^bb2 loc(#loc44)
  ^bb2:  // pred: ^bb1
    cir.return loc(#loc37)
  } loc(#loc111)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc117)
    %1 = cir.alloca !cir.ptr<!cir.func<(!cir.float)>>, !cir.ptr<!cir.ptr<!cir.func<(!cir.float)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc118)
    %2 = cir.get_global @goodG2BSink : !cir.ptr<!cir.func<(!cir.float)>> loc(#loc54)
    cir.store %2, %1 : !cir.ptr<!cir.func<(!cir.float)>>, !cir.ptr<!cir.ptr<!cir.func<(!cir.float)>>> loc(#loc118)
    %3 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc55)
    cir.store %3, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc119)
    %4 = cir.const #cir.fp<2.000000e+00> : !cir.float loc(#loc57)
    cir.store %4, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc120)
    %5 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<(!cir.float)>>>, !cir.ptr<!cir.func<(!cir.float)>> loc(#loc59)
    %6 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc60)
    cir.call %5(%6) : (!cir.ptr<!cir.func<(!cir.float)>>, !cir.float) -> () loc(#loc59)
    cir.return loc(#loc50)
  } loc(#loc116)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc121)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"This would result in a divide by zero\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc63)
  cir.func internal private @goodB2GSink(%arg0: !cir.float loc(fused[#loc66, #loc67])) extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc124)
    %1 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data", init] {alignment = 4 : i64} loc(#loc123)
    cir.store %arg0, %1 : !cir.float, !cir.ptr<!cir.float> loc(#loc70)
    cir.br ^bb1 loc(#loc125)
  ^bb1:  // pred: ^bb0
    %2 = cir.load %1 : !cir.ptr<!cir.float>, !cir.float loc(#loc73)
    %3 = cir.cast(floating, %2 : !cir.float), !cir.double loc(#loc73)
    %4 = cir.fabs %3 : !cir.double loc(#loc73)
    %5 = cir.const #cir.fp<9.9999999999999995E-7> : !cir.double loc(#loc74)
    %6 = cir.cmp(gt, %4, %5) : !cir.double, !cir.bool loc(#loc126)
    cir.brcond %6 ^bb2, ^bb3 loc(#loc127)
  ^bb2:  // pred: ^bb1
    %7 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc79)
    %8 = cir.load %1 : !cir.ptr<!cir.float>, !cir.float loc(#loc80)
    %9 = cir.cast(floating, %8 : !cir.float), !cir.double loc(#loc80)
    %10 = cir.binop(div, %7, %9) : !cir.double loc(#loc128)
    %11 = cir.cast(float_to_int, %10 : !cir.double), !s32i loc(#loc128)
    cir.store %11, %0 : !s32i, !cir.ptr<!s32i> loc(#loc124)
    %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc81)
    cir.call @printIntLine(%12) : (!s32i) -> () loc(#loc82)
    cir.br ^bb4 loc(#loc77)
  ^bb3:  // pred: ^bb1
    %13 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc63)
    %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc63)
    cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc83)
    cir.br ^bb4 loc(#loc72)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc72)
  ^bb5:  // pred: ^bb4
    cir.return loc(#loc65)
  } loc(#loc122)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc130)
    %1 = cir.alloca !cir.ptr<!cir.func<(!cir.float)>>, !cir.ptr<!cir.ptr<!cir.func<(!cir.float)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc131)
    %2 = cir.get_global @goodB2GSink : !cir.ptr<!cir.func<(!cir.float)>> loc(#loc89)
    cir.store %2, %1 : !cir.ptr<!cir.func<(!cir.float)>>, !cir.ptr<!cir.ptr<!cir.func<(!cir.float)>>> loc(#loc131)
    %3 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc90)
    cir.store %3, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc132)
    %4 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc92)
    %5 = cir.const #cir.int<1> : !s32i loc(#loc92)
    %6 = cir.binop(and, %4, %5) : !s32i loc(#loc92)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc92)
    cir.brcond %7 ^bb1, ^bb2 loc(#loc92)
  ^bb1:  // pred: ^bb0
    %8 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc92)
    %9 = cir.cast(integral, %8 : !s32i), !u32i loc(#loc92)
    %10 = cir.const #cir.int<30> : !s32i loc(#loc92)
    %11 = cir.shift(left, %9 : !u32i, %10 : !s32i) -> !u32i loc(#loc92)
    %12 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc92)
    %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc92)
    %14 = cir.const #cir.int<15> : !s32i loc(#loc92)
    %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc92)
    %16 = cir.binop(xor, %11, %15) : !u32i loc(#loc92)
    %17 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc92)
    %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc92)
    %19 = cir.binop(xor, %16, %18) : !u32i loc(#loc92)
    cir.br ^bb3(%19 : !u32i) loc(#loc92)
  ^bb2:  // pred: ^bb0
    %20 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc92)
    %21 = cir.cast(integral, %20 : !s32i), !u32i loc(#loc92)
    %22 = cir.const #cir.int<30> : !s32i loc(#loc92)
    %23 = cir.shift(left, %21 : !u32i, %22 : !s32i) -> !u32i loc(#loc92)
    %24 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc92)
    %25 = cir.cast(integral, %24 : !s32i), !u32i loc(#loc92)
    %26 = cir.const #cir.int<15> : !s32i loc(#loc92)
    %27 = cir.shift(left, %25 : !u32i, %26 : !s32i) -> !u32i loc(#loc92)
    %28 = cir.binop(xor, %23, %27) : !u32i loc(#loc92)
    %29 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc92)
    %30 = cir.cast(integral, %29 : !s32i), !u32i loc(#loc92)
    %31 = cir.binop(xor, %28, %30) : !u32i loc(#loc92)
    %32 = cir.unary(minus, %31) : !u32i, !u32i loc(#loc92)
    %33 = cir.const #cir.int<1> : !s32i loc(#loc92)
    %34 = cir.cast(integral, %33 : !s32i), !u32i loc(#loc92)
    %35 = cir.binop(sub, %32, %34) : !u32i loc(#loc92)
    cir.br ^bb3(%35 : !u32i) loc(#loc92)
  ^bb3(%36: !u32i loc("CWE369_Divide_by_Zero__float_rand_44.c":93:19)):  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc92)
  ^bb4:  // pred: ^bb3
    %37 = cir.cast(integral, %36 : !u32i), !s32i loc(#loc92)
    %38 = cir.cast(int_to_float, %37 : !s32i), !cir.float loc(#loc92)
    cir.store %38, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc133)
    %39 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<(!cir.float)>>>, !cir.ptr<!cir.func<(!cir.float)>> loc(#loc94)
    %40 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc95)
    cir.call %39(%40) : (!cir.ptr<!cir.func<(!cir.float)>>, !cir.float) -> () loc(#loc94)
    cir.return loc(#loc85)
  } loc(#loc129)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__float_rand_44.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("CWE369_Divide_by_Zero__float_rand_44.c":24:1)
#loc4 = loc("CWE369_Divide_by_Zero__float_rand_44.c":31:1)
#loc7 = loc("CWE369_Divide_by_Zero__float_rand_44.c":28:9)
#loc8 = loc("CWE369_Divide_by_Zero__float_rand_44.c":28:40)
#loc9 = loc("CWE369_Divide_by_Zero__float_rand_44.c":25:1)
#loc10 = loc("CWE369_Divide_by_Zero__float_rand_44.c":26:5)
#loc11 = loc("CWE369_Divide_by_Zero__float_rand_44.c":30:5)
#loc12 = loc("CWE369_Divide_by_Zero__float_rand_44.c":28:28)
#loc13 = loc("CWE369_Divide_by_Zero__float_rand_44.c":28:36)
#loc14 = loc("CWE369_Divide_by_Zero__float_rand_44.c":29:22)
#loc15 = loc("CWE369_Divide_by_Zero__float_rand_44.c":29:9)
#loc16 = loc("/usr/include/stdlib.h":573:1)
#loc17 = loc("/usr/include/stdlib.h":573:24)
#loc18 = loc("CWE369_Divide_by_Zero__float_rand_44.c":33:1)
#loc19 = loc("CWE369_Divide_by_Zero__float_rand_44.c":44:1)
#loc20 = loc("CWE369_Divide_by_Zero__float_rand_44.c":35:5)
#loc21 = loc("CWE369_Divide_by_Zero__float_rand_44.c":35:11)
#loc22 = loc("CWE369_Divide_by_Zero__float_rand_44.c":37:5)
#loc23 = loc("CWE369_Divide_by_Zero__float_rand_44.c":37:31)
#loc24 = loc("CWE369_Divide_by_Zero__float_rand_44.c":39:12)
#loc25 = loc("CWE369_Divide_by_Zero__float_rand_44.c":39:5)
#loc27 = loc("CWE369_Divide_by_Zero__float_rand_44.c":41:5)
#loc28 = loc("CWE369_Divide_by_Zero__float_rand_44.c":43:5)
#loc29 = loc("CWE369_Divide_by_Zero__float_rand_44.c":43:13)
#loc30 = loc("CWE369_Divide_by_Zero__float_rand_44.c":97:1)
#loc31 = loc("CWE369_Divide_by_Zero__float_rand_44.c":101:1)
#loc32 = loc("CWE369_Divide_by_Zero__float_rand_44.c":99:5)
#loc33 = loc("CWE369_Divide_by_Zero__float_rand_44.c":99:13)
#loc34 = loc("CWE369_Divide_by_Zero__float_rand_44.c":100:5)
#loc35 = loc("CWE369_Divide_by_Zero__float_rand_44.c":100:13)
#loc36 = loc("CWE369_Divide_by_Zero__float_rand_44.c":51:1)
#loc37 = loc("CWE369_Divide_by_Zero__float_rand_44.c":58:1)
#loc40 = loc("CWE369_Divide_by_Zero__float_rand_44.c":55:9)
#loc41 = loc("CWE369_Divide_by_Zero__float_rand_44.c":55:40)
#loc42 = loc("CWE369_Divide_by_Zero__float_rand_44.c":52:1)
#loc43 = loc("CWE369_Divide_by_Zero__float_rand_44.c":53:5)
#loc44 = loc("CWE369_Divide_by_Zero__float_rand_44.c":57:5)
#loc45 = loc("CWE369_Divide_by_Zero__float_rand_44.c":55:28)
#loc46 = loc("CWE369_Divide_by_Zero__float_rand_44.c":55:36)
#loc47 = loc("CWE369_Divide_by_Zero__float_rand_44.c":56:22)
#loc48 = loc("CWE369_Divide_by_Zero__float_rand_44.c":56:9)
#loc49 = loc("CWE369_Divide_by_Zero__float_rand_44.c":60:1)
#loc50 = loc("CWE369_Divide_by_Zero__float_rand_44.c":69:1)
#loc51 = loc("CWE369_Divide_by_Zero__float_rand_44.c":62:5)
#loc52 = loc("CWE369_Divide_by_Zero__float_rand_44.c":62:11)
#loc53 = loc("CWE369_Divide_by_Zero__float_rand_44.c":63:5)
#loc54 = loc("CWE369_Divide_by_Zero__float_rand_44.c":63:31)
#loc55 = loc("CWE369_Divide_by_Zero__float_rand_44.c":65:12)
#loc56 = loc("CWE369_Divide_by_Zero__float_rand_44.c":65:5)
#loc57 = loc("CWE369_Divide_by_Zero__float_rand_44.c":67:12)
#loc58 = loc("CWE369_Divide_by_Zero__float_rand_44.c":67:5)
#loc59 = loc("CWE369_Divide_by_Zero__float_rand_44.c":68:5)
#loc60 = loc("CWE369_Divide_by_Zero__float_rand_44.c":68:13)
#loc61 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc62 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc63 = loc("CWE369_Divide_by_Zero__float_rand_44.c":82:19)
#loc64 = loc("CWE369_Divide_by_Zero__float_rand_44.c":72:1)
#loc65 = loc("CWE369_Divide_by_Zero__float_rand_44.c":84:1)
#loc68 = loc("CWE369_Divide_by_Zero__float_rand_44.c":77:9)
#loc69 = loc("CWE369_Divide_by_Zero__float_rand_44.c":77:40)
#loc70 = loc("CWE369_Divide_by_Zero__float_rand_44.c":73:1)
#loc71 = loc("CWE369_Divide_by_Zero__float_rand_44.c":75:5)
#loc72 = loc("CWE369_Divide_by_Zero__float_rand_44.c":83:5)
#loc73 = loc("CWE369_Divide_by_Zero__float_rand_44.c":75:13)
#loc74 = loc("CWE369_Divide_by_Zero__float_rand_44.c":75:21)
#loc75 = loc("CWE369_Divide_by_Zero__float_rand_44.c":75:8)
#loc76 = loc("CWE369_Divide_by_Zero__float_rand_44.c":76:5)
#loc77 = loc("CWE369_Divide_by_Zero__float_rand_44.c":79:5)
#loc78 = loc("CWE369_Divide_by_Zero__float_rand_44.c":81:5)
#loc79 = loc("CWE369_Divide_by_Zero__float_rand_44.c":77:28)
#loc80 = loc("CWE369_Divide_by_Zero__float_rand_44.c":77:36)
#loc81 = loc("CWE369_Divide_by_Zero__float_rand_44.c":78:22)
#loc82 = loc("CWE369_Divide_by_Zero__float_rand_44.c":78:9)
#loc83 = loc("CWE369_Divide_by_Zero__float_rand_44.c":82:9)
#loc84 = loc("CWE369_Divide_by_Zero__float_rand_44.c":86:1)
#loc85 = loc("CWE369_Divide_by_Zero__float_rand_44.c":95:1)
#loc86 = loc("CWE369_Divide_by_Zero__float_rand_44.c":88:5)
#loc87 = loc("CWE369_Divide_by_Zero__float_rand_44.c":88:11)
#loc88 = loc("CWE369_Divide_by_Zero__float_rand_44.c":89:5)
#loc89 = loc("CWE369_Divide_by_Zero__float_rand_44.c":89:31)
#loc90 = loc("CWE369_Divide_by_Zero__float_rand_44.c":91:12)
#loc91 = loc("CWE369_Divide_by_Zero__float_rand_44.c":91:5)
#loc93 = loc("CWE369_Divide_by_Zero__float_rand_44.c":93:5)
#loc94 = loc("CWE369_Divide_by_Zero__float_rand_44.c":94:5)
#loc95 = loc("CWE369_Divide_by_Zero__float_rand_44.c":94:13)
#loc96 = loc(fused[#loc1, #loc2])
#loc97 = loc(fused[#loc3, #loc4])
#loc99 = loc(fused[#loc7, #loc8])
#loc100 = loc(fused[#loc10, #loc11])
#loc101 = loc(fused[#loc12, #loc13])
#loc102 = loc(fused[#loc16, #loc17])
#loc103 = loc(fused[#loc18, #loc19])
#loc104 = loc(fused[#loc20, #loc21])
#loc105 = loc(fused[#loc22, #loc23])
#loc106 = loc(fused[#loc25, #loc24])
#loc107 = loc(fused[#loc27, #loc26])
#loc108 = loc(fused[#loc30, #loc31])
#loc109 = loc(fused[#loc32, #loc33])
#loc110 = loc(fused[#loc34, #loc35])
#loc111 = loc(fused[#loc36, #loc37])
#loc113 = loc(fused[#loc40, #loc41])
#loc114 = loc(fused[#loc43, #loc44])
#loc115 = loc(fused[#loc45, #loc46])
#loc116 = loc(fused[#loc49, #loc50])
#loc117 = loc(fused[#loc51, #loc52])
#loc118 = loc(fused[#loc53, #loc54])
#loc119 = loc(fused[#loc56, #loc55])
#loc120 = loc(fused[#loc58, #loc57])
#loc121 = loc(fused[#loc61, #loc62])
#loc122 = loc(fused[#loc64, #loc65])
#loc124 = loc(fused[#loc68, #loc69])
#loc125 = loc(fused[#loc71, #loc72])
#loc126 = loc(fused[#loc75, #loc74])
#loc127 = loc(fused[#loc76, #loc77, #loc78, #loc72])
#loc128 = loc(fused[#loc79, #loc80])
#loc129 = loc(fused[#loc84, #loc85])
#loc130 = loc(fused[#loc86, #loc87])
#loc131 = loc(fused[#loc88, #loc89])
#loc132 = loc(fused[#loc91, #loc90])
#loc133 = loc(fused[#loc93, #loc92])
