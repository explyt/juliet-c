!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#true = #cir.bool<true> : !cir.bool
!ty_in_addr = !cir.record<struct "in_addr" {!u32i} #cir.record.decl.ast>
!ty_sockaddr = !cir.record<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.record<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/workspaces/juliet-c/testcases/CWE680_Integer_Overflow_to_Buffer_Overflow/CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_68a.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i32 = dense<32> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e">} {
  cir.global external dsolocal @CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_68_badData = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc138)
  cir.global external dsolocal @CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_68_goodG2BData = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc139)
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc140)
  cir.func private @inet_addr(!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc141)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"127.0.0.1\00" : !cir.array<!s8i x 10>> : !cir.array<!s8i x 10> {alignment = 1 : i64} loc(#loc9)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc142)
  cir.func private @connect(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc143)
  cir.func private @recv(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc144)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc145)
  cir.func private @close(!s32i) -> !s32i loc(#loc146)
  cir.func private @_ZN65CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_687badSinkEv() loc(#loc147)
  cir.func @_ZN65CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_683badEv() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc149)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc26)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc27)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc150)
    cir.scope {
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc152)
      %6 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc153)
      %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["connectSocket", init] {alignment = 4 : i64} loc(#loc154)
      %8 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc155)
      %9 = cir.const #cir.int<1> : !s32i loc(#loc36)
      %10 = cir.unary(minus, %9) nsw : !s32i, !s32i loc(#loc36)
      cir.store %10, %7 : !s32i, !cir.ptr<!s32i> loc(#loc154)
      cir.scope {
        cir.do {
          cir.scope {
            %11 = cir.const #cir.int<2> : !s32i loc(#loc43)
            %12 = cir.const #cir.int<1> : !u32i loc(#loc44)
            %13 = cir.cast(integral, %12 : !u32i), !s32i loc(#loc44)
            %14 = cir.const #cir.int<6> : !u32i loc(#loc45)
            %15 = cir.cast(integral, %14 : !u32i), !s32i loc(#loc45)
            %16 = cir.call @socket(%11, %13, %15) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc46)
            cir.store %16, %7 : !s32i, !cir.ptr<!s32i> loc(#loc158)
            cir.scope {
              %54 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc51)
              %55 = cir.const #cir.int<1> : !s32i loc(#loc52)
              %56 = cir.unary(minus, %55) nsw : !s32i, !s32i loc(#loc52)
              %57 = cir.cmp(eq, %54, %56) : !s32i, !cir.bool loc(#loc160)
              cir.if %57 {
                cir.break loc(#loc54)
              } loc(#loc161)
            } loc(#loc159)
            %17 = cir.cast(bitcast, %6 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc162)
            %18 = cir.const #cir.int<0> : !s32i loc(#loc57)
            %19 = cir.const #cir.int<16> : !u64i loc(#loc163)
            cir.libc.memset %19 bytes from %17 set to %18 : !cir.ptr<!void>, !s32i, !u64i loc(#loc164)
            %20 = cir.const #cir.int<2> : !s32i loc(#loc62)
            %21 = cir.cast(integral, %20 : !s32i), !u16i loc(#loc62)
            %22 = cir.get_member %6[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc63)
            cir.store %21, %22 : !u16i, !cir.ptr<!u16i> loc(#loc165)
            %23 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 10>> loc(#loc9)
            %24 = cir.cast(array_to_ptrdecay, %23 : !cir.ptr<!cir.array<!s8i x 10>>), !cir.ptr<!s8i> loc(#loc9)
            %25 = cir.call @inet_addr(%24) : (!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc65)
            %26 = cir.get_member %6[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc66)
            %27 = cir.get_member %26[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc67)
            cir.store %25, %27 : !u32i, !cir.ptr<!u32i> loc(#loc166)
            %28 = cir.const #cir.int<27015> : !s32i loc(#loc70)
            %29 = cir.cast(integral, %28 : !s32i), !u16i loc(#loc70)
            %30 = cir.call @htons(%29) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc71)
            %31 = cir.get_member %6[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc72)
            cir.store %30, %31 : !u16i, !cir.ptr<!u16i> loc(#loc167)
            cir.scope {
              %54 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc77)
              %55 = cir.cast(bitcast, %6 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc169)
              %56 = cir.const #cir.int<16> : !u64i loc(#loc170)
              %57 = cir.cast(integral, %56 : !u64i), !u32i loc(#loc170)
              %58 = cir.call @connect(%54, %55, %57) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc82)
              %59 = cir.const #cir.int<1> : !s32i loc(#loc83)
              %60 = cir.unary(minus, %59) nsw : !s32i, !s32i loc(#loc83)
              %61 = cir.cmp(eq, %58, %60) : !s32i, !cir.bool loc(#loc171)
              cir.if %61 {
                cir.break loc(#loc85)
              } loc(#loc172)
            } loc(#loc168)
            %32 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc86)
            %33 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc87)
            %34 = cir.cast(bitcast, %33 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc87)
            %35 = cir.const #cir.int<3> : !s32i loc(#loc88)
            %36 = cir.cast(integral, %35 : !s32i), !u64i loc(#loc88)
            %37 = cir.const #cir.int<4> : !u64i loc(#loc88)
            %38 = cir.binop(mul, %36, %37) : !u64i loc(#loc88)
            %39 = cir.const #cir.int<2> : !s32i loc(#loc88)
            %40 = cir.cast(integral, %39 : !s32i), !u64i loc(#loc88)
            %41 = cir.binop(add, %38, %40) : !u64i loc(#loc88)
            %42 = cir.const #cir.int<1> : !s32i loc(#loc89)
            %43 = cir.cast(integral, %42 : !s32i), !u64i loc(#loc89)
            %44 = cir.binop(sub, %41, %43) : !u64i loc(#loc173)
            %45 = cir.const #cir.int<0> : !s32i loc(#loc90)
            %46 = cir.call @recv(%32, %34, %44, %45) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc91)
            %47 = cir.cast(integral, %46 : !s64i), !s32i loc(#loc91)
            cir.store %47, %5 : !s32i, !cir.ptr<!s32i> loc(#loc174)
            cir.scope {
              %54 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc96)
              %55 = cir.const #cir.int<1> : !s32i loc(#loc97)
              %56 = cir.unary(minus, %55) nsw : !s32i, !s32i loc(#loc97)
              %57 = cir.cmp(eq, %54, %56) : !s32i, !cir.bool loc(#loc176)
              %58 = cir.ternary(%57, true {
                %59 = cir.const #true loc(#loc98)
                cir.yield %59 : !cir.bool loc(#loc98)
              }, false {
                %59 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc99)
                %60 = cir.const #cir.int<0> : !s32i loc(#loc100)
                %61 = cir.cmp(eq, %59, %60) : !s32i, !cir.bool loc(#loc177)
                %62 = cir.ternary(%61, true {
                  %63 = cir.const #true loc(#loc98)
                  cir.yield %63 : !cir.bool loc(#loc98)
                }, false {
                  %63 = cir.const #false loc(#loc98)
                  cir.yield %63 : !cir.bool loc(#loc98)
                }) : (!cir.bool) -> !cir.bool loc(#loc98)
                cir.yield %62 : !cir.bool loc(#loc98)
              }) : (!cir.bool) -> !cir.bool loc(#loc98)
              cir.if %58 {
                cir.break loc(#loc102)
              } loc(#loc178)
            } loc(#loc175)
            %48 = cir.const #cir.int<0> : !s8i loc(#loc103)
            %49 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc104)
            %50 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc105)
            %51 = cir.ptr_stride(%50 : !cir.ptr<!s8i>, %49 : !s32i), !cir.ptr<!s8i> loc(#loc105)
            cir.store %48, %51 : !s8i, !cir.ptr<!s8i> loc(#loc179)
            %52 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc106)
            %53 = cir.call @atoi(%52) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc107)
            cir.store %53, %0 : !s32i, !cir.ptr<!s32i> loc(#loc180)
          } loc(#loc157)
          cir.yield loc(#loc40)
        } while {
          %11 = cir.const #cir.int<0> : !s32i loc(#loc110)
          %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc110)
          cir.condition(%12) loc(#loc110)
        } loc(#loc156)
      } loc(#loc156)
      cir.scope {
        %11 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc113)
        %12 = cir.const #cir.int<1> : !s32i loc(#loc114)
        %13 = cir.unary(minus, %12) nsw : !s32i, !s32i loc(#loc114)
        %14 = cir.cmp(ne, %11, %13) : !s32i, !cir.bool loc(#loc182)
        cir.if %14 {
          %15 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc116)
          %16 = cir.call @close(%15) : (!s32i) -> !s32i loc(#loc117)
        } loc(#loc183)
      } loc(#loc181)
    } loc(#loc151)
    %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc118)
    %4 = cir.get_global @CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_68_badData : !cir.ptr<!s32i> loc(#loc138)
    cir.store %3, %4 : !s32i, !cir.ptr<!s32i> loc(#loc184)
    cir.call @_ZN65CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_687badSinkEv() : () -> () loc(#loc120)
    cir.return loc(#loc23)
  } loc(#loc148)
  cir.func private @_ZN65CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_6811goodG2BSinkEv() loc(#loc185)
  cir.func internal private @_ZN65CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_68L7goodG2BEv() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc187)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc127)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc128)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc188)
    %3 = cir.const #cir.int<20> : !s32i loc(#loc130)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc189)
    %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc132)
    %5 = cir.get_global @CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_68_goodG2BData : !cir.ptr<!s32i> loc(#loc139)
    cir.store %4, %5 : !s32i, !cir.ptr<!s32i> loc(#loc190)
    cir.call @_ZN65CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_6811goodG2BSinkEv() : () -> () loc(#loc134)
    cir.return loc(#loc124)
  } loc(#loc186)
  cir.func @_ZN65CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_684goodEv() extra(#fn_attr1) {
    cir.call @_ZN65CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_68L7goodG2BEv() : () -> () loc(#loc137)
    cir.return loc(#loc136)
  } loc(#loc191)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE680_Integer_Overflow_to_Buffer_Overflow/CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_68a.cpp":0:0)
#loc1 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_68a.cpp":41:1)
#loc2 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_68a.cpp":41:5)
#loc3 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_68a.cpp":42:1)
#loc4 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_68a.cpp":42:5)
#loc5 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:1)
#loc6 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:62)
#loc7 = loc("/usr/include/arpa/inet.h":34:1)
#loc8 = loc("/usr/include/arpa/inet.h":34:47)
#loc9 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_68a.cpp":83:49)
#loc10 = loc("/usr/include/netinet/in.h":402:1)
#loc11 = loc("/usr/include/netinet/in.h":403:40)
#loc12 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":126:1)
#loc13 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":126:75)
#loc14 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":145:1)
#loc15 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":145:68)
#loc16 = loc("/usr/include/stdlib.h":105:1)
#loc17 = loc("/usr/include/stdlib.h":106:33)
#loc18 = loc("/usr/include/unistd.h":358:1)
#loc19 = loc("/usr/include/unistd.h":358:27)
#loc20 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_68a.cpp":50:1)
#loc21 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_68a.cpp":50:14)
#loc22 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_68a.cpp":52:1)
#loc23 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_68a.cpp":115:1)
#loc24 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_68a.cpp":54:5)
#loc25 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_68a.cpp":54:9)
#loc26 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_68a.cpp":56:13)
#loc27 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_68a.cpp":56:12)
#loc28 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_68a.cpp":56:5)
#loc29 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_68a.cpp":57:5)
#loc30 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_68a.cpp":112:5)
#loc31 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_68a.cpp":62:9)
#loc32 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_68a.cpp":62:13)
#loc33 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_68a.cpp":63:9)
#loc34 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_68a.cpp":63:28)
#loc35 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_68a.cpp":64:9)
#loc36 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_68a.cpp":64:32)
#loc37 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_68a.cpp":65:9)
#loc38 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_68a.cpp":65:41)
#loc39 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_68a.cpp":66:9)
#loc40 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_68a.cpp":101:17)
#loc41 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_68a.cpp":67:9)
#loc42 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_68a.cpp":100:9)
#loc43 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_68a.cpp":76:36)
#loc44 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_68a.cpp":76:45)
#loc45 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_68a.cpp":76:58)
#loc46 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_68a.cpp":76:29)
#loc47 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_68a.cpp":76:13)
#loc48 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_68a.cpp":76:69)
#loc49 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_68a.cpp":77:13)
#loc50 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_68a.cpp":80:13)
#loc51 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_68a.cpp":77:17)
#loc52 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_68a.cpp":77:34)
#loc53 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_68a.cpp":78:13)
#loc54 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_68a.cpp":79:17)
#loc55 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_68a.cpp":81:20)
#loc56 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_68a.cpp":81:21)
#loc57 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_68a.cpp":81:30)
#loc58 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_68a.cpp":81:33)
#loc59 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_68a.cpp":81:47)
#loc60 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_68a.cpp":81:13)
#loc61 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_68a.cpp":81:48)
#loc62 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_68a.cpp":82:34)
#loc63 = loc("/usr/include/netinet/in.h":249:5)
#loc64 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_68a.cpp":82:13)
#loc65 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_68a.cpp":83:39)
#loc66 = loc("/usr/include/netinet/in.h":251:20)
#loc67 = loc("/usr/include/netinet/in.h":33:15)
#loc68 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_68a.cpp":83:13)
#loc69 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_68a.cpp":83:59)
#loc70 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_68a.cpp":84:38)
#loc71 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_68a.cpp":84:32)
#loc72 = loc("/usr/include/netinet/in.h":250:15)
#loc73 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_68a.cpp":84:13)
#loc74 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_68a.cpp":84:46)
#loc75 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_68a.cpp":85:13)
#loc76 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_68a.cpp":88:13)
#loc77 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_68a.cpp":85:25)
#loc78 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_68a.cpp":85:58)
#loc79 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_68a.cpp":85:59)
#loc80 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_68a.cpp":85:68)
#loc81 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_68a.cpp":85:82)
#loc82 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_68a.cpp":85:17)
#loc83 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_68a.cpp":85:88)
#loc84 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_68a.cpp":86:13)
#loc85 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_68a.cpp":87:17)
#loc86 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_68a.cpp":91:31)
#loc87 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_68a.cpp":91:46)
#loc88 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_68a.cpp":91:59)
#loc89 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_68a.cpp":91:77)
#loc90 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_68a.cpp":91:80)
#loc91 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_68a.cpp":91:26)
#loc92 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_68a.cpp":91:13)
#loc93 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_68a.cpp":91:81)
#loc94 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_68a.cpp":92:13)
#loc95 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_68a.cpp":95:13)
#loc96 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_68a.cpp":92:17)
#loc97 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_68a.cpp":92:31)
#loc98 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_68a.cpp":92:44)
#loc99 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_68a.cpp":92:47)
#loc100 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_68a.cpp":92:61)
#loc101 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_68a.cpp":93:13)
#loc102 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_68a.cpp":94:17)
#loc103 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_68a.cpp":97:39)
#loc104 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_68a.cpp":97:25)
#loc105 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_68a.cpp":97:13)
#loc106 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_68a.cpp":99:25)
#loc107 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_68a.cpp":99:20)
#loc108 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_68a.cpp":99:13)
#loc109 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_68a.cpp":99:36)
#loc110 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_68a.cpp":101:16)
#loc111 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_68a.cpp":102:9)
#loc112 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_68a.cpp":105:9)
#loc113 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_68a.cpp":102:13)
#loc114 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_68a.cpp":102:30)
#loc115 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_68a.cpp":103:9)
#loc116 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_68a.cpp":104:26)
#loc117 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_68a.cpp":104:13)
#loc118 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_68a.cpp":113:81)
#loc119 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_68a.cpp":113:5)
#loc120 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_68a.cpp":114:5)
#loc121 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_68a.cpp":122:1)
#loc122 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_68a.cpp":122:18)
#loc123 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_68a.cpp":125:1)
#loc124 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_68a.cpp":134:1)
#loc125 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_68a.cpp":127:5)
#loc126 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_68a.cpp":127:9)
#loc127 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_68a.cpp":129:13)
#loc128 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_68a.cpp":129:12)
#loc129 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_68a.cpp":129:5)
#loc130 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_68a.cpp":131:12)
#loc131 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_68a.cpp":131:5)
#loc132 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_68a.cpp":132:85)
#loc133 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_68a.cpp":132:5)
#loc134 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_68a.cpp":133:5)
#loc135 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_68a.cpp":136:1)
#loc136 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_68a.cpp":139:1)
#loc137 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_68a.cpp":138:5)
#loc138 = loc(fused[#loc1, #loc2])
#loc139 = loc(fused[#loc3, #loc4])
#loc140 = loc(fused[#loc5, #loc6])
#loc141 = loc(fused[#loc7, #loc8])
#loc142 = loc(fused[#loc10, #loc11])
#loc143 = loc(fused[#loc12, #loc13])
#loc144 = loc(fused[#loc14, #loc15])
#loc145 = loc(fused[#loc16, #loc17])
#loc146 = loc(fused[#loc18, #loc19])
#loc147 = loc(fused[#loc20, #loc21])
#loc148 = loc(fused[#loc22, #loc23])
#loc149 = loc(fused[#loc24, #loc25])
#loc150 = loc(fused[#loc28, #loc26])
#loc151 = loc(fused[#loc29, #loc30])
#loc152 = loc(fused[#loc31, #loc32])
#loc153 = loc(fused[#loc33, #loc34])
#loc154 = loc(fused[#loc35, #loc36])
#loc155 = loc(fused[#loc37, #loc38])
#loc156 = loc(fused[#loc39, #loc40])
#loc157 = loc(fused[#loc41, #loc42])
#loc158 = loc(fused[#loc47, #loc48])
#loc159 = loc(fused[#loc49, #loc50])
#loc160 = loc(fused[#loc51, #loc52])
#loc161 = loc(fused[#loc53, #loc50])
#loc162 = loc(fused[#loc55, #loc56])
#loc163 = loc(fused[#loc58, #loc59])
#loc164 = loc(fused[#loc60, #loc61])
#loc165 = loc(fused[#loc64, #loc62])
#loc166 = loc(fused[#loc68, #loc69])
#loc167 = loc(fused[#loc73, #loc74])
#loc168 = loc(fused[#loc75, #loc76])
#loc169 = loc(fused[#loc78, #loc79])
#loc170 = loc(fused[#loc80, #loc81])
#loc171 = loc(fused[#loc82, #loc83])
#loc172 = loc(fused[#loc84, #loc76])
#loc173 = loc(fused[#loc88, #loc89])
#loc174 = loc(fused[#loc92, #loc93])
#loc175 = loc(fused[#loc94, #loc95])
#loc176 = loc(fused[#loc96, #loc97])
#loc177 = loc(fused[#loc99, #loc100])
#loc178 = loc(fused[#loc101, #loc95])
#loc179 = loc(fused[#loc105, #loc103])
#loc180 = loc(fused[#loc108, #loc109])
#loc181 = loc(fused[#loc111, #loc112])
#loc182 = loc(fused[#loc113, #loc114])
#loc183 = loc(fused[#loc115, #loc112])
#loc184 = loc(fused[#loc119, #loc118])
#loc185 = loc(fused[#loc121, #loc122])
#loc186 = loc(fused[#loc123, #loc124])
#loc187 = loc(fused[#loc125, #loc126])
#loc188 = loc(fused[#loc129, #loc127])
#loc189 = loc(fused[#loc131, #loc130])
#loc190 = loc(fused[#loc133, #loc132])
#loc191 = loc(fused[#loc135, #loc136])
