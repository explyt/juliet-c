!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_add_18.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @printUnsignedLine(!u32i) loc(#loc78)
  cir.func no_proto  @CWE190_Integer_Overflow__unsigned_int_max_add_18_bad() extra(#fn_attr) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc80)
    %1 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc81)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc9)
    %3 = cir.cast(integral, %2 : !s32i), !u32i loc(#loc9)
    cir.store %3, %0 : !u32i, !cir.ptr<!u32i> loc(#loc82)
    cir.goto "source" loc(#loc83)
  ^bb1:  // no predecessors
    cir.label "source" loc(#loc13)
    %4 = cir.const #cir.int<2147483647> : !s32i loc(#loc14)
    %5 = cir.cast(integral, %4 : !s32i), !u32i loc(#loc14)
    %6 = cir.const #cir.int<2> : !u32i loc(#loc14)
    %7 = cir.binop(mul, %5, %6) : !u32i loc(#loc14)
    %8 = cir.const #cir.int<1> : !u32i loc(#loc14)
    %9 = cir.binop(add, %7, %8) : !u32i loc(#loc14)
    cir.store %9, %0 : !u32i, !cir.ptr<!u32i> loc(#loc84)
    cir.goto "sink" loc(#loc85)
  ^bb2:  // no predecessors
    cir.label "sink" loc(#loc18)
    %10 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc19)
    %11 = cir.const #cir.int<1> : !s32i loc(#loc8)
    %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc8)
    %13 = cir.binop(add, %10, %12) : !u32i loc(#loc86)
    cir.store %13, %1 : !u32i, !cir.ptr<!u32i> loc(#loc81)
    %14 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc20)
    cir.call @printUnsignedLine(%14) : (!u32i) -> () loc(#loc21)
    cir.return loc(#loc4)
  } loc(#loc79)
  cir.func no_proto  @CWE190_Integer_Overflow__unsigned_int_max_add_18_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc88)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc24)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc89)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc26)
    cir.return loc(#loc23)
  } loc(#loc87)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc90)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc30)
  cir.func no_proto internal private  @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc92)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc35)
    %2 = cir.cast(integral, %1 : !s32i), !u32i loc(#loc35)
    cir.store %2, %0 : !u32i, !cir.ptr<!u32i> loc(#loc93)
    cir.goto "source" loc(#loc94)
  ^bb1:  // no predecessors
    cir.label "source" loc(#loc39)
    %3 = cir.const #cir.int<2147483647> : !s32i loc(#loc40)
    %4 = cir.cast(integral, %3 : !s32i), !u32i loc(#loc40)
    %5 = cir.const #cir.int<2> : !u32i loc(#loc40)
    %6 = cir.binop(mul, %4, %5) : !u32i loc(#loc40)
    %7 = cir.const #cir.int<1> : !u32i loc(#loc40)
    %8 = cir.binop(add, %6, %7) : !u32i loc(#loc40)
    cir.store %8, %0 : !u32i, !cir.ptr<!u32i> loc(#loc95)
    cir.goto "sink" loc(#loc96)
  ^bb2:  // no predecessors
    cir.label "sink" loc(#loc44)
    cir.scope {
      %9 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc47)
      %10 = cir.const #cir.int<2147483647> : !s32i loc(#loc48)
      %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc48)
      %12 = cir.const #cir.int<2> : !u32i loc(#loc48)
      %13 = cir.binop(mul, %11, %12) : !u32i loc(#loc48)
      %14 = cir.const #cir.int<1> : !u32i loc(#loc48)
      %15 = cir.binop(add, %13, %14) : !u32i loc(#loc48)
      %16 = cir.cmp(lt, %9, %15) : !u32i, !s32i loc(#loc98)
      %17 = cir.cast(int_to_bool, %16 : !s32i), !cir.bool loc(#loc49)
      cir.if %17 {
        %18 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc100)
        %19 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc55)
        %20 = cir.const #cir.int<1> : !s32i loc(#loc54)
        %21 = cir.cast(integral, %20 : !s32i), !u32i loc(#loc54)
        %22 = cir.binop(add, %19, %21) : !u32i loc(#loc101)
        cir.store %22, %18 : !u32i, !cir.ptr<!u32i> loc(#loc100)
        %23 = cir.load %18 : !cir.ptr<!u32i>, !u32i loc(#loc56)
        cir.call @printUnsignedLine(%23) : (!u32i) -> () loc(#loc57)
      } else {
        %18 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc30)
        %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc30)
        cir.call @printLine(%19) : (!cir.ptr<!s8i>) -> () loc(#loc58)
      } loc(#loc99)
    } loc(#loc97)
    cir.return loc(#loc32)
  } loc(#loc91)
  cir.func no_proto internal private  @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc103)
    %1 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc104)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc65)
    %3 = cir.cast(integral, %2 : !s32i), !u32i loc(#loc65)
    cir.store %3, %0 : !u32i, !cir.ptr<!u32i> loc(#loc105)
    cir.goto "source" loc(#loc106)
  ^bb1:  // no predecessors
    cir.label "source" loc(#loc69)
    %4 = cir.const #cir.int<2> : !s32i loc(#loc70)
    %5 = cir.cast(integral, %4 : !s32i), !u32i loc(#loc70)
    cir.store %5, %0 : !u32i, !cir.ptr<!u32i> loc(#loc107)
    cir.goto "sink" loc(#loc108)
  ^bb2:  // no predecessors
    cir.label "sink" loc(#loc74)
    %6 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc75)
    %7 = cir.const #cir.int<1> : !s32i loc(#loc64)
    %8 = cir.cast(integral, %7 : !s32i), !u32i loc(#loc64)
    %9 = cir.binop(add, %6, %8) : !u32i loc(#loc109)
    cir.store %9, %1 : !u32i, !cir.ptr<!u32i> loc(#loc104)
    %10 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc76)
    cir.call @printUnsignedLine(%10) : (!u32i) -> () loc(#loc77)
    cir.return loc(#loc60)
  } loc(#loc102)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_add_18.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":34:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":34:47)
#loc3 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_18.c":22:1)
#loc4 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_18.c":37:1)
#loc5 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_18.c":24:5)
#loc6 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_18.c":24:18)
#loc7 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_18.c":34:9)
#loc8 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_18.c":34:38)
#loc9 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_18.c":25:12)
#loc10 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_18.c":25:5)
#loc11 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_18.c":26:5)
#loc12 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_18.c":26:10)
#loc13 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_18.c":27:1)
#loc14 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_18.c":29:12)
#loc15 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_18.c":29:5)
#loc16 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_18.c":30:5)
#loc17 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_18.c":30:10)
#loc18 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_18.c":31:1)
#loc19 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_18.c":34:31)
#loc20 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_18.c":35:27)
#loc21 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_18.c":35:9)
#loc22 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_18.c":84:1)
#loc23 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_18.c":88:1)
#loc24 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_18.c":86:5)
#loc25 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_18.c":86:13)
#loc26 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_18.c":87:5)
#loc27 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_18.c":87:13)
#loc28 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc29 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc30 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_18.c":62:19)
#loc31 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_18.c":44:1)
#loc32 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_18.c":64:1)
#loc33 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_18.c":46:5)
#loc34 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_18.c":46:18)
#loc35 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_18.c":47:12)
#loc36 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_18.c":47:5)
#loc37 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_18.c":48:5)
#loc38 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_18.c":48:10)
#loc39 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_18.c":49:1)
#loc40 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_18.c":51:12)
#loc41 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_18.c":51:5)
#loc42 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_18.c":52:5)
#loc43 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_18.c":52:10)
#loc44 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_18.c":53:1)
#loc45 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_18.c":55:5)
#loc46 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_18.c":63:5)
#loc47 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_18.c":55:9)
#loc48 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_18.c":55:16)
#loc49 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_18.c":55:14)
#loc50 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_18.c":56:5)
#loc51 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_18.c":59:5)
#loc52 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_18.c":61:5)
#loc53 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_18.c":57:9)
#loc54 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_18.c":57:38)
#loc55 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_18.c":57:31)
#loc56 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_18.c":58:27)
#loc57 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_18.c":58:9)
#loc58 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_18.c":62:9)
#loc59 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_18.c":67:1)
#loc60 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_18.c":82:1)
#loc61 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_18.c":69:5)
#loc62 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_18.c":69:18)
#loc63 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_18.c":79:9)
#loc64 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_18.c":79:38)
#loc65 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_18.c":70:12)
#loc66 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_18.c":70:5)
#loc67 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_18.c":71:5)
#loc68 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_18.c":71:10)
#loc69 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_18.c":72:1)
#loc70 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_18.c":74:12)
#loc71 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_18.c":74:5)
#loc72 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_18.c":75:5)
#loc73 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_18.c":75:10)
#loc74 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_18.c":76:1)
#loc75 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_18.c":79:31)
#loc76 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_18.c":80:27)
#loc77 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_18.c":80:9)
#loc78 = loc(fused[#loc1, #loc2])
#loc79 = loc(fused[#loc3, #loc4])
#loc80 = loc(fused[#loc5, #loc6])
#loc81 = loc(fused[#loc7, #loc8])
#loc82 = loc(fused[#loc10, #loc9])
#loc83 = loc(fused[#loc11, #loc12])
#loc84 = loc(fused[#loc15, #loc14])
#loc85 = loc(fused[#loc16, #loc17])
#loc86 = loc(fused[#loc19, #loc8])
#loc87 = loc(fused[#loc22, #loc23])
#loc88 = loc(fused[#loc24, #loc25])
#loc89 = loc(fused[#loc26, #loc27])
#loc90 = loc(fused[#loc28, #loc29])
#loc91 = loc(fused[#loc31, #loc32])
#loc92 = loc(fused[#loc33, #loc34])
#loc93 = loc(fused[#loc36, #loc35])
#loc94 = loc(fused[#loc37, #loc38])
#loc95 = loc(fused[#loc41, #loc40])
#loc96 = loc(fused[#loc42, #loc43])
#loc97 = loc(fused[#loc45, #loc46])
#loc98 = loc(fused[#loc47, #loc48])
#loc99 = loc(fused[#loc50, #loc51, #loc52, #loc46])
#loc100 = loc(fused[#loc53, #loc54])
#loc101 = loc(fused[#loc55, #loc54])
#loc102 = loc(fused[#loc59, #loc60])
#loc103 = loc(fused[#loc61, #loc62])
#loc104 = loc(fused[#loc63, #loc64])
#loc105 = loc(fused[#loc66, #loc65])
#loc106 = loc(fused[#loc67, #loc68])
#loc107 = loc(fused[#loc71, #loc70])
#loc108 = loc(fused[#loc72, #loc73])
#loc109 = loc(fused[#loc75, #loc64])
