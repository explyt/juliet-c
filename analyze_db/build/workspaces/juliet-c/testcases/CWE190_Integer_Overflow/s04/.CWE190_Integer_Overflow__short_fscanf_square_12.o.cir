!s16i = !cir.int<s, 16>
!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.record<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.record<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.record<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
!ty__IO_FILE = !cir.record<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_fscanf_square_12.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func no_proto private @globalReturnsTrueOrFalse(...) -> !s32i loc(#loc165)
  cir.func private @__isoc99_fscanf(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i loc(#loc166)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc167)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"%hd\00" : !cir.array<!s8i x 4>> : !cir.array<!s8i x 4> {alignment = 1 : i64} loc(#loc7)
  cir.func private @printIntLine(!s32i) loc(#loc168)
  cir.func private @sqrt(!cir.double) -> !cir.double extra(#fn_attr) loc(#loc10)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc169)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc13)
  cir.func no_proto @CWE190_Integer_Overflow__short_fscanf_square_12_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc171)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc18)
    %2 = cir.cast(integral, %1 : !s32i), !s16i loc(#loc18)
    cir.store %2, %0 : !s16i, !cir.ptr<!s16i> loc(#loc172)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc174)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc174)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc22)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc22)
      cir.if %6 {
        %7 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc27)
        %8 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc167)
        %9 = cir.load %8 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc28)
        %10 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc7)
        %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc7)
        %12 = cir.call @__isoc99_fscanf(%9, %11, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s16i>) -> !s32i loc(#loc27)
      } else {
        %7 = cir.const #cir.int<2> : !s32i loc(#loc29)
        %8 = cir.cast(integral, %7 : !s32i), !s16i loc(#loc29)
        cir.store %8, %0 : !s16i, !cir.ptr<!s16i> loc(#loc176)
      } loc(#loc175)
    } loc(#loc173)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc178)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc178)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc33)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc33)
      cir.if %6 {
        cir.scope {
          %7 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc181)
          %8 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc42)
          %9 = cir.cast(integral, %8 : !s16i), !s32i loc(#loc42)
          %10 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc41)
          %11 = cir.cast(integral, %10 : !s16i), !s32i loc(#loc41)
          %12 = cir.binop(mul, %9, %11) nsw : !s32i loc(#loc42)
          %13 = cir.cast(integral, %12 : !s32i), !s16i loc(#loc42)
          cir.store %13, %7 : !s16i, !cir.ptr<!s16i> loc(#loc181)
          %14 = cir.load %7 : !cir.ptr<!s16i>, !s16i loc(#loc43)
          %15 = cir.cast(integral, %14 : !s16i), !s32i loc(#loc43)
          cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc44)
        } loc(#loc180)
      } else {
        cir.scope {
          %7 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc47)
          %8 = cir.cast(integral, %7 : !s16i), !s64i loc(#loc47)
          %9 = cir.cast(integral, %8 : !s64i), !s32i loc(#loc47)
          %10 = cir.abs %9 poison : !s32i loc(#loc48)
          %11 = cir.cast(integral, %10 : !s32i), !s64i loc(#loc48)
          %12 = cir.get_global @sqrt : !cir.ptr<!cir.func<(!cir.double) -> !cir.double>> loc(#loc49)
          %13 = cir.const #cir.int<32767> : !s32i loc(#loc50)
          %14 = cir.cast(int_to_float, %13 : !s32i), !cir.double loc(#loc50)
          %15 = cir.call @sqrt(%14) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc49)
          %16 = cir.cast(float_to_int, %15 : !cir.double), !s64i loc(#loc49)
          %17 = cir.cmp(le, %11, %16) : !s64i, !cir.bool loc(#loc183)
          cir.if %17 {
            %18 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc185)
            %19 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc57)
            %20 = cir.cast(integral, %19 : !s16i), !s32i loc(#loc57)
            %21 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc56)
            %22 = cir.cast(integral, %21 : !s16i), !s32i loc(#loc56)
            %23 = cir.binop(mul, %20, %22) nsw : !s32i loc(#loc57)
            %24 = cir.cast(integral, %23 : !s32i), !s16i loc(#loc57)
            cir.store %24, %18 : !s16i, !cir.ptr<!s16i> loc(#loc185)
            %25 = cir.load %18 : !cir.ptr<!s16i>, !s16i loc(#loc58)
            %26 = cir.cast(integral, %25 : !s16i), !s32i loc(#loc58)
            cir.call @printIntLine(%26) : (!s32i) -> () loc(#loc59)
          } else {
            %18 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc13)
            %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc13)
            cir.call @printLine(%19) : (!cir.ptr<!s8i>) -> () loc(#loc60)
          } loc(#loc184)
        } loc(#loc182)
      } loc(#loc179)
    } loc(#loc177)
    cir.return loc(#loc15)
  } loc(#loc170)
  cir.func no_proto @CWE190_Integer_Overflow__short_fscanf_square_12_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc187)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc63)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc188)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc65)
    cir.return loc(#loc62)
  } loc(#loc186)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc190)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc71)
    %2 = cir.cast(integral, %1 : !s32i), !s16i loc(#loc71)
    cir.store %2, %0 : !s16i, !cir.ptr<!s16i> loc(#loc191)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc193)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc193)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc75)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc75)
      cir.if %6 {
        %7 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc80)
        %8 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc167)
        %9 = cir.load %8 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc81)
        %10 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc82)
        %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc82)
        %12 = cir.call @__isoc99_fscanf(%9, %11, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s16i>) -> !s32i loc(#loc80)
      } else {
        %7 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc83)
        %8 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc167)
        %9 = cir.load %8 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc84)
        %10 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc85)
        %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc85)
        %12 = cir.call @__isoc99_fscanf(%9, %11, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s16i>) -> !s32i loc(#loc83)
      } loc(#loc194)
    } loc(#loc192)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc196)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc196)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc88)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc88)
      cir.if %6 {
        cir.scope {
          %7 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc95)
          %8 = cir.cast(integral, %7 : !s16i), !s64i loc(#loc95)
          %9 = cir.cast(integral, %8 : !s64i), !s32i loc(#loc95)
          %10 = cir.abs %9 poison : !s32i loc(#loc96)
          %11 = cir.cast(integral, %10 : !s32i), !s64i loc(#loc96)
          %12 = cir.get_global @sqrt : !cir.ptr<!cir.func<(!cir.double) -> !cir.double>> loc(#loc97)
          %13 = cir.const #cir.int<32767> : !s32i loc(#loc98)
          %14 = cir.cast(int_to_float, %13 : !s32i), !cir.double loc(#loc98)
          %15 = cir.call @sqrt(%14) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc97)
          %16 = cir.cast(float_to_int, %15 : !cir.double), !s64i loc(#loc97)
          %17 = cir.cmp(le, %11, %16) : !s64i, !cir.bool loc(#loc199)
          cir.if %17 {
            %18 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc201)
            %19 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc105)
            %20 = cir.cast(integral, %19 : !s16i), !s32i loc(#loc105)
            %21 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc104)
            %22 = cir.cast(integral, %21 : !s16i), !s32i loc(#loc104)
            %23 = cir.binop(mul, %20, %22) nsw : !s32i loc(#loc105)
            %24 = cir.cast(integral, %23 : !s32i), !s16i loc(#loc105)
            cir.store %24, %18 : !s16i, !cir.ptr<!s16i> loc(#loc201)
            %25 = cir.load %18 : !cir.ptr<!s16i>, !s16i loc(#loc106)
            %26 = cir.cast(integral, %25 : !s16i), !s32i loc(#loc106)
            cir.call @printIntLine(%26) : (!s32i) -> () loc(#loc107)
          } else {
            %18 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc108)
            %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc108)
            cir.call @printLine(%19) : (!cir.ptr<!s8i>) -> () loc(#loc109)
          } loc(#loc200)
        } loc(#loc198)
      } else {
        cir.scope {
          %7 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc112)
          %8 = cir.cast(integral, %7 : !s16i), !s64i loc(#loc112)
          %9 = cir.cast(integral, %8 : !s64i), !s32i loc(#loc112)
          %10 = cir.abs %9 poison : !s32i loc(#loc113)
          %11 = cir.cast(integral, %10 : !s32i), !s64i loc(#loc113)
          %12 = cir.get_global @sqrt : !cir.ptr<!cir.func<(!cir.double) -> !cir.double>> loc(#loc114)
          %13 = cir.const #cir.int<32767> : !s32i loc(#loc115)
          %14 = cir.cast(int_to_float, %13 : !s32i), !cir.double loc(#loc115)
          %15 = cir.call @sqrt(%14) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc114)
          %16 = cir.cast(float_to_int, %15 : !cir.double), !s64i loc(#loc114)
          %17 = cir.cmp(le, %11, %16) : !s64i, !cir.bool loc(#loc203)
          cir.if %17 {
            %18 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc205)
            %19 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc122)
            %20 = cir.cast(integral, %19 : !s16i), !s32i loc(#loc122)
            %21 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc121)
            %22 = cir.cast(integral, %21 : !s16i), !s32i loc(#loc121)
            %23 = cir.binop(mul, %20, %22) nsw : !s32i loc(#loc122)
            %24 = cir.cast(integral, %23 : !s32i), !s16i loc(#loc122)
            cir.store %24, %18 : !s16i, !cir.ptr<!s16i> loc(#loc205)
            %25 = cir.load %18 : !cir.ptr<!s16i>, !s16i loc(#loc123)
            %26 = cir.cast(integral, %25 : !s16i), !s32i loc(#loc123)
            cir.call @printIntLine(%26) : (!s32i) -> () loc(#loc124)
          } else {
            %18 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc125)
            %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc125)
            cir.call @printLine(%19) : (!cir.ptr<!s8i>) -> () loc(#loc126)
          } loc(#loc204)
        } loc(#loc202)
      } loc(#loc197)
    } loc(#loc195)
    cir.return loc(#loc68)
  } loc(#loc189)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc207)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc131)
    %2 = cir.cast(integral, %1 : !s32i), !s16i loc(#loc131)
    cir.store %2, %0 : !s16i, !cir.ptr<!s16i> loc(#loc208)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc210)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc210)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc135)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc135)
      cir.if %6 {
        %7 = cir.const #cir.int<2> : !s32i loc(#loc140)
        %8 = cir.cast(integral, %7 : !s32i), !s16i loc(#loc140)
        cir.store %8, %0 : !s16i, !cir.ptr<!s16i> loc(#loc212)
      } else {
        %7 = cir.const #cir.int<2> : !s32i loc(#loc142)
        %8 = cir.cast(integral, %7 : !s32i), !s16i loc(#loc142)
        cir.store %8, %0 : !s16i, !cir.ptr<!s16i> loc(#loc213)
      } loc(#loc211)
    } loc(#loc209)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc215)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc215)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc146)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc146)
      cir.if %6 {
        cir.scope {
          %7 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc218)
          %8 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc155)
          %9 = cir.cast(integral, %8 : !s16i), !s32i loc(#loc155)
          %10 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc154)
          %11 = cir.cast(integral, %10 : !s16i), !s32i loc(#loc154)
          %12 = cir.binop(mul, %9, %11) nsw : !s32i loc(#loc155)
          %13 = cir.cast(integral, %12 : !s32i), !s16i loc(#loc155)
          cir.store %13, %7 : !s16i, !cir.ptr<!s16i> loc(#loc218)
          %14 = cir.load %7 : !cir.ptr<!s16i>, !s16i loc(#loc156)
          %15 = cir.cast(integral, %14 : !s16i), !s32i loc(#loc156)
          cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc157)
        } loc(#loc217)
      } else {
        cir.scope {
          %7 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc220)
          %8 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc162)
          %9 = cir.cast(integral, %8 : !s16i), !s32i loc(#loc162)
          %10 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc161)
          %11 = cir.cast(integral, %10 : !s16i), !s32i loc(#loc161)
          %12 = cir.binop(mul, %9, %11) nsw : !s32i loc(#loc162)
          %13 = cir.cast(integral, %12 : !s32i), !s16i loc(#loc162)
          cir.store %13, %7 : !s16i, !cir.ptr<!s16i> loc(#loc220)
          %14 = cir.load %7 : !cir.ptr<!s16i>, !s16i loc(#loc163)
          %15 = cir.cast(integral, %14 : !s16i), !s32i loc(#loc163)
          cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc164)
        } loc(#loc219)
      } loc(#loc216)
    } loc(#loc214)
    cir.return loc(#loc128)
  } loc(#loc206)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_fscanf_square_12.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":52:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":52:30)
#loc3 = loc("/usr/include/stdio.h":463:1)
#loc4 = loc("/usr/include/stdio.h":465:33)
#loc5 = loc("/usr/include/stdio.h":149:1)
#loc6 = loc("/usr/include/stdio.h":149:14)
#loc7 = loc("CWE190_Integer_Overflow__short_fscanf_square_12.c":31:24)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc9 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc10 = loc("/usr/include/x86_64-linux-gnu/bits/mathcalls.h":143:1)
#loc11 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc12 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc13 = loc("CWE190_Integer_Overflow__short_fscanf_square_12.c":56:23)
#loc14 = loc("CWE190_Integer_Overflow__short_fscanf_square_12.c":24:1)
#loc15 = loc("CWE190_Integer_Overflow__short_fscanf_square_12.c":59:1)
#loc16 = loc("CWE190_Integer_Overflow__short_fscanf_square_12.c":26:5)
#loc17 = loc("CWE190_Integer_Overflow__short_fscanf_square_12.c":26:11)
#loc18 = loc("CWE190_Integer_Overflow__short_fscanf_square_12.c":27:12)
#loc19 = loc("CWE190_Integer_Overflow__short_fscanf_square_12.c":27:5)
#loc20 = loc("CWE190_Integer_Overflow__short_fscanf_square_12.c":28:5)
#loc21 = loc("CWE190_Integer_Overflow__short_fscanf_square_12.c":37:5)
#loc22 = loc("CWE190_Integer_Overflow__short_fscanf_square_12.c":28:8)
#loc23 = loc("CWE190_Integer_Overflow__short_fscanf_square_12.c":28:33)
#loc24 = loc("CWE190_Integer_Overflow__short_fscanf_square_12.c":29:5)
#loc25 = loc("CWE190_Integer_Overflow__short_fscanf_square_12.c":32:5)
#loc26 = loc("CWE190_Integer_Overflow__short_fscanf_square_12.c":34:5)
#loc27 = loc("CWE190_Integer_Overflow__short_fscanf_square_12.c":31:9)
#loc28 = loc("CWE190_Integer_Overflow__short_fscanf_square_12.c":31:17)
#loc29 = loc("CWE190_Integer_Overflow__short_fscanf_square_12.c":36:16)
#loc30 = loc("CWE190_Integer_Overflow__short_fscanf_square_12.c":36:9)
#loc31 = loc("CWE190_Integer_Overflow__short_fscanf_square_12.c":38:5)
#loc32 = loc("CWE190_Integer_Overflow__short_fscanf_square_12.c":58:5)
#loc33 = loc("CWE190_Integer_Overflow__short_fscanf_square_12.c":38:8)
#loc34 = loc("CWE190_Integer_Overflow__short_fscanf_square_12.c":38:33)
#loc35 = loc("CWE190_Integer_Overflow__short_fscanf_square_12.c":39:5)
#loc36 = loc("CWE190_Integer_Overflow__short_fscanf_square_12.c":45:5)
#loc37 = loc("CWE190_Integer_Overflow__short_fscanf_square_12.c":47:5)
#loc38 = loc("CWE190_Integer_Overflow__short_fscanf_square_12.c":40:9)
#loc39 = loc("CWE190_Integer_Overflow__short_fscanf_square_12.c":44:9)
#loc40 = loc("CWE190_Integer_Overflow__short_fscanf_square_12.c":42:13)
#loc41 = loc("CWE190_Integer_Overflow__short_fscanf_square_12.c":42:35)
#loc42 = loc("CWE190_Integer_Overflow__short_fscanf_square_12.c":42:28)
#loc43 = loc("CWE190_Integer_Overflow__short_fscanf_square_12.c":43:26)
#loc44 = loc("CWE190_Integer_Overflow__short_fscanf_square_12.c":43:13)
#loc45 = loc("CWE190_Integer_Overflow__short_fscanf_square_12.c":49:9)
#loc46 = loc("CWE190_Integer_Overflow__short_fscanf_square_12.c":57:9)
#loc47 = loc("CWE190_Integer_Overflow__short_fscanf_square_12.c":49:23)
#loc48 = loc("CWE190_Integer_Overflow__short_fscanf_square_12.c":49:13)
#loc49 = loc("CWE190_Integer_Overflow__short_fscanf_square_12.c":49:38)
#loc50 = loc("CWE190_Integer_Overflow__short_fscanf_square_12.c":49:51)
#loc51 = loc("CWE190_Integer_Overflow__short_fscanf_square_12.c":49:59)
#loc52 = loc("CWE190_Integer_Overflow__short_fscanf_square_12.c":50:9)
#loc53 = loc("CWE190_Integer_Overflow__short_fscanf_square_12.c":53:9)
#loc54 = loc("CWE190_Integer_Overflow__short_fscanf_square_12.c":55:9)
#loc55 = loc("CWE190_Integer_Overflow__short_fscanf_square_12.c":51:13)
#loc56 = loc("CWE190_Integer_Overflow__short_fscanf_square_12.c":51:35)
#loc57 = loc("CWE190_Integer_Overflow__short_fscanf_square_12.c":51:28)
#loc58 = loc("CWE190_Integer_Overflow__short_fscanf_square_12.c":52:26)
#loc59 = loc("CWE190_Integer_Overflow__short_fscanf_square_12.c":52:13)
#loc60 = loc("CWE190_Integer_Overflow__short_fscanf_square_12.c":56:13)
#loc61 = loc("CWE190_Integer_Overflow__short_fscanf_square_12.c":145:1)
#loc62 = loc("CWE190_Integer_Overflow__short_fscanf_square_12.c":149:1)
#loc63 = loc("CWE190_Integer_Overflow__short_fscanf_square_12.c":147:5)
#loc64 = loc("CWE190_Integer_Overflow__short_fscanf_square_12.c":147:13)
#loc65 = loc("CWE190_Integer_Overflow__short_fscanf_square_12.c":148:5)
#loc66 = loc("CWE190_Integer_Overflow__short_fscanf_square_12.c":148:13)
#loc67 = loc("CWE190_Integer_Overflow__short_fscanf_square_12.c":68:1)
#loc68 = loc("CWE190_Integer_Overflow__short_fscanf_square_12.c":108:1)
#loc69 = loc("CWE190_Integer_Overflow__short_fscanf_square_12.c":70:5)
#loc70 = loc("CWE190_Integer_Overflow__short_fscanf_square_12.c":70:11)
#loc71 = loc("CWE190_Integer_Overflow__short_fscanf_square_12.c":71:12)
#loc72 = loc("CWE190_Integer_Overflow__short_fscanf_square_12.c":71:5)
#loc73 = loc("CWE190_Integer_Overflow__short_fscanf_square_12.c":72:5)
#loc74 = loc("CWE190_Integer_Overflow__short_fscanf_square_12.c":81:5)
#loc75 = loc("CWE190_Integer_Overflow__short_fscanf_square_12.c":72:8)
#loc76 = loc("CWE190_Integer_Overflow__short_fscanf_square_12.c":72:33)
#loc77 = loc("CWE190_Integer_Overflow__short_fscanf_square_12.c":73:5)
#loc78 = loc("CWE190_Integer_Overflow__short_fscanf_square_12.c":76:5)
#loc79 = loc("CWE190_Integer_Overflow__short_fscanf_square_12.c":78:5)
#loc80 = loc("CWE190_Integer_Overflow__short_fscanf_square_12.c":75:9)
#loc81 = loc("CWE190_Integer_Overflow__short_fscanf_square_12.c":75:17)
#loc82 = loc("CWE190_Integer_Overflow__short_fscanf_square_12.c":75:24)
#loc83 = loc("CWE190_Integer_Overflow__short_fscanf_square_12.c":80:9)
#loc84 = loc("CWE190_Integer_Overflow__short_fscanf_square_12.c":80:17)
#loc85 = loc("CWE190_Integer_Overflow__short_fscanf_square_12.c":80:24)
#loc86 = loc("CWE190_Integer_Overflow__short_fscanf_square_12.c":82:5)
#loc87 = loc("CWE190_Integer_Overflow__short_fscanf_square_12.c":107:5)
#loc88 = loc("CWE190_Integer_Overflow__short_fscanf_square_12.c":82:8)
#loc89 = loc("CWE190_Integer_Overflow__short_fscanf_square_12.c":82:33)
#loc90 = loc("CWE190_Integer_Overflow__short_fscanf_square_12.c":83:5)
#loc91 = loc("CWE190_Integer_Overflow__short_fscanf_square_12.c":94:5)
#loc92 = loc("CWE190_Integer_Overflow__short_fscanf_square_12.c":96:5)
#loc93 = loc("CWE190_Integer_Overflow__short_fscanf_square_12.c":85:9)
#loc94 = loc("CWE190_Integer_Overflow__short_fscanf_square_12.c":93:9)
#loc95 = loc("CWE190_Integer_Overflow__short_fscanf_square_12.c":85:23)
#loc96 = loc("CWE190_Integer_Overflow__short_fscanf_square_12.c":85:13)
#loc97 = loc("CWE190_Integer_Overflow__short_fscanf_square_12.c":85:38)
#loc98 = loc("CWE190_Integer_Overflow__short_fscanf_square_12.c":85:51)
#loc99 = loc("CWE190_Integer_Overflow__short_fscanf_square_12.c":85:59)
#loc100 = loc("CWE190_Integer_Overflow__short_fscanf_square_12.c":86:9)
#loc101 = loc("CWE190_Integer_Overflow__short_fscanf_square_12.c":89:9)
#loc102 = loc("CWE190_Integer_Overflow__short_fscanf_square_12.c":91:9)
#loc103 = loc("CWE190_Integer_Overflow__short_fscanf_square_12.c":87:13)
#loc104 = loc("CWE190_Integer_Overflow__short_fscanf_square_12.c":87:35)
#loc105 = loc("CWE190_Integer_Overflow__short_fscanf_square_12.c":87:28)
#loc106 = loc("CWE190_Integer_Overflow__short_fscanf_square_12.c":88:26)
#loc107 = loc("CWE190_Integer_Overflow__short_fscanf_square_12.c":88:13)
#loc108 = loc("CWE190_Integer_Overflow__short_fscanf_square_12.c":92:23)
#loc109 = loc("CWE190_Integer_Overflow__short_fscanf_square_12.c":92:13)
#loc110 = loc("CWE190_Integer_Overflow__short_fscanf_square_12.c":98:9)
#loc111 = loc("CWE190_Integer_Overflow__short_fscanf_square_12.c":106:9)
#loc112 = loc("CWE190_Integer_Overflow__short_fscanf_square_12.c":98:23)
#loc113 = loc("CWE190_Integer_Overflow__short_fscanf_square_12.c":98:13)
#loc114 = loc("CWE190_Integer_Overflow__short_fscanf_square_12.c":98:38)
#loc115 = loc("CWE190_Integer_Overflow__short_fscanf_square_12.c":98:51)
#loc116 = loc("CWE190_Integer_Overflow__short_fscanf_square_12.c":98:59)
#loc117 = loc("CWE190_Integer_Overflow__short_fscanf_square_12.c":99:9)
#loc118 = loc("CWE190_Integer_Overflow__short_fscanf_square_12.c":102:9)
#loc119 = loc("CWE190_Integer_Overflow__short_fscanf_square_12.c":104:9)
#loc120 = loc("CWE190_Integer_Overflow__short_fscanf_square_12.c":100:13)
#loc121 = loc("CWE190_Integer_Overflow__short_fscanf_square_12.c":100:35)
#loc122 = loc("CWE190_Integer_Overflow__short_fscanf_square_12.c":100:28)
#loc123 = loc("CWE190_Integer_Overflow__short_fscanf_square_12.c":101:26)
#loc124 = loc("CWE190_Integer_Overflow__short_fscanf_square_12.c":101:13)
#loc125 = loc("CWE190_Integer_Overflow__short_fscanf_square_12.c":105:23)
#loc126 = loc("CWE190_Integer_Overflow__short_fscanf_square_12.c":105:13)
#loc127 = loc("CWE190_Integer_Overflow__short_fscanf_square_12.c":113:1)
#loc128 = loc("CWE190_Integer_Overflow__short_fscanf_square_12.c":143:1)
#loc129 = loc("CWE190_Integer_Overflow__short_fscanf_square_12.c":115:5)
#loc130 = loc("CWE190_Integer_Overflow__short_fscanf_square_12.c":115:11)
#loc131 = loc("CWE190_Integer_Overflow__short_fscanf_square_12.c":116:12)
#loc132 = loc("CWE190_Integer_Overflow__short_fscanf_square_12.c":116:5)
#loc133 = loc("CWE190_Integer_Overflow__short_fscanf_square_12.c":117:5)
#loc134 = loc("CWE190_Integer_Overflow__short_fscanf_square_12.c":126:5)
#loc135 = loc("CWE190_Integer_Overflow__short_fscanf_square_12.c":117:8)
#loc136 = loc("CWE190_Integer_Overflow__short_fscanf_square_12.c":117:33)
#loc137 = loc("CWE190_Integer_Overflow__short_fscanf_square_12.c":118:5)
#loc138 = loc("CWE190_Integer_Overflow__short_fscanf_square_12.c":121:5)
#loc139 = loc("CWE190_Integer_Overflow__short_fscanf_square_12.c":123:5)
#loc140 = loc("CWE190_Integer_Overflow__short_fscanf_square_12.c":120:16)
#loc141 = loc("CWE190_Integer_Overflow__short_fscanf_square_12.c":120:9)
#loc142 = loc("CWE190_Integer_Overflow__short_fscanf_square_12.c":125:16)
#loc143 = loc("CWE190_Integer_Overflow__short_fscanf_square_12.c":125:9)
#loc144 = loc("CWE190_Integer_Overflow__short_fscanf_square_12.c":127:5)
#loc145 = loc("CWE190_Integer_Overflow__short_fscanf_square_12.c":142:5)
#loc146 = loc("CWE190_Integer_Overflow__short_fscanf_square_12.c":127:8)
#loc147 = loc("CWE190_Integer_Overflow__short_fscanf_square_12.c":127:33)
#loc148 = loc("CWE190_Integer_Overflow__short_fscanf_square_12.c":128:5)
#loc149 = loc("CWE190_Integer_Overflow__short_fscanf_square_12.c":134:5)
#loc150 = loc("CWE190_Integer_Overflow__short_fscanf_square_12.c":136:5)
#loc151 = loc("CWE190_Integer_Overflow__short_fscanf_square_12.c":129:9)
#loc152 = loc("CWE190_Integer_Overflow__short_fscanf_square_12.c":133:9)
#loc153 = loc("CWE190_Integer_Overflow__short_fscanf_square_12.c":131:13)
#loc154 = loc("CWE190_Integer_Overflow__short_fscanf_square_12.c":131:35)
#loc155 = loc("CWE190_Integer_Overflow__short_fscanf_square_12.c":131:28)
#loc156 = loc("CWE190_Integer_Overflow__short_fscanf_square_12.c":132:26)
#loc157 = loc("CWE190_Integer_Overflow__short_fscanf_square_12.c":132:13)
#loc158 = loc("CWE190_Integer_Overflow__short_fscanf_square_12.c":137:9)
#loc159 = loc("CWE190_Integer_Overflow__short_fscanf_square_12.c":141:9)
#loc160 = loc("CWE190_Integer_Overflow__short_fscanf_square_12.c":139:13)
#loc161 = loc("CWE190_Integer_Overflow__short_fscanf_square_12.c":139:35)
#loc162 = loc("CWE190_Integer_Overflow__short_fscanf_square_12.c":139:28)
#loc163 = loc("CWE190_Integer_Overflow__short_fscanf_square_12.c":140:26)
#loc164 = loc("CWE190_Integer_Overflow__short_fscanf_square_12.c":140:13)
#loc165 = loc(fused[#loc1, #loc2])
#loc166 = loc(fused[#loc3, #loc4])
#loc167 = loc(fused[#loc5, #loc6])
#loc168 = loc(fused[#loc8, #loc9])
#loc169 = loc(fused[#loc11, #loc12])
#loc170 = loc(fused[#loc14, #loc15])
#loc171 = loc(fused[#loc16, #loc17])
#loc172 = loc(fused[#loc19, #loc18])
#loc173 = loc(fused[#loc20, #loc21])
#loc174 = loc(fused[#loc22, #loc23])
#loc175 = loc(fused[#loc24, #loc25, #loc26, #loc21])
#loc176 = loc(fused[#loc30, #loc29])
#loc177 = loc(fused[#loc31, #loc32])
#loc178 = loc(fused[#loc33, #loc34])
#loc179 = loc(fused[#loc35, #loc36, #loc37, #loc32])
#loc180 = loc(fused[#loc38, #loc39])
#loc181 = loc(fused[#loc40, #loc41])
#loc182 = loc(fused[#loc45, #loc46])
#loc183 = loc(fused[#loc48, #loc51])
#loc184 = loc(fused[#loc52, #loc53, #loc54, #loc46])
#loc185 = loc(fused[#loc55, #loc56])
#loc186 = loc(fused[#loc61, #loc62])
#loc187 = loc(fused[#loc63, #loc64])
#loc188 = loc(fused[#loc65, #loc66])
#loc189 = loc(fused[#loc67, #loc68])
#loc190 = loc(fused[#loc69, #loc70])
#loc191 = loc(fused[#loc72, #loc71])
#loc192 = loc(fused[#loc73, #loc74])
#loc193 = loc(fused[#loc75, #loc76])
#loc194 = loc(fused[#loc77, #loc78, #loc79, #loc74])
#loc195 = loc(fused[#loc86, #loc87])
#loc196 = loc(fused[#loc88, #loc89])
#loc197 = loc(fused[#loc90, #loc91, #loc92, #loc87])
#loc198 = loc(fused[#loc93, #loc94])
#loc199 = loc(fused[#loc96, #loc99])
#loc200 = loc(fused[#loc100, #loc101, #loc102, #loc94])
#loc201 = loc(fused[#loc103, #loc104])
#loc202 = loc(fused[#loc110, #loc111])
#loc203 = loc(fused[#loc113, #loc116])
#loc204 = loc(fused[#loc117, #loc118, #loc119, #loc111])
#loc205 = loc(fused[#loc120, #loc121])
#loc206 = loc(fused[#loc127, #loc128])
#loc207 = loc(fused[#loc129, #loc130])
#loc208 = loc(fused[#loc132, #loc131])
#loc209 = loc(fused[#loc133, #loc134])
#loc210 = loc(fused[#loc135, #loc136])
#loc211 = loc(fused[#loc137, #loc138, #loc139, #loc134])
#loc212 = loc(fused[#loc141, #loc140])
#loc213 = loc(fused[#loc143, #loc142])
#loc214 = loc(fused[#loc144, #loc145])
#loc215 = loc(fused[#loc146, #loc147])
#loc216 = loc(fused[#loc148, #loc149, #loc150, #loc145])
#loc217 = loc(fused[#loc151, #loc152])
#loc218 = loc(fused[#loc153, #loc154])
#loc219 = loc(fused[#loc158, #loc159])
#loc220 = loc(fused[#loc160, #loc161])
