!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc61 = loc("CWE401_Memory_Leak__int_malloc_16.c":110:10)
#loc62 = loc("CWE401_Memory_Leak__int_malloc_16.c":110:14)
#loc63 = loc("CWE401_Memory_Leak__int_malloc_16.c":110:20)
#loc64 = loc("CWE401_Memory_Leak__int_malloc_16.c":110:32)
#loc166 = loc(fused[#loc61, #loc62])
#loc167 = loc(fused[#loc63, #loc64])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE401_Memory_Leak/s01/CWE401_Memory_Leak__int_malloc_16.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc143)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc144)
  cir.func private @printIntLine(!s32i) loc(#loc145)
  cir.func no_proto @CWE401_Memory_Leak__int_malloc_16_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc147)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc11)
    cir.store %1, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc148)
    cir.br ^bb1 loc(#loc149)
  ^bb1:  // pred: ^bb0
    cir.br ^bb2 loc(#loc149)
  ^bb2:  // pred: ^bb1
    %2 = cir.const #cir.int<1> : !s32i loc(#loc15)
    %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc15)
    cir.brcond %3 ^bb3, ^bb8 loc(#loc15)
  ^bb3:  // pred: ^bb2
    %4 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc16)
    %5 = cir.const #cir.int<100> : !s32i loc(#loc17)
    %6 = cir.cast(integral, %5 : !s32i), !u64i loc(#loc17)
    %7 = cir.const #cir.int<4> : !u64i loc(#loc150)
    %8 = cir.binop(mul, %6, %7) : !u64i loc(#loc151)
    %9 = cir.call @malloc(%8) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc16)
    %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc152)
    cir.store %10, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc153)
    cir.br ^bb4 loc(#loc154)
  ^bb4:  // pred: ^bb3
    %11 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc24)
    %12 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc25)
    %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc25)
    %14 = cir.cmp(eq, %11, %13) : !cir.ptr<!s32i>, !cir.bool loc(#loc155)
    cir.brcond %14 ^bb5, ^bb6 loc(#loc156)
  ^bb5:  // pred: ^bb4
    %15 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc27)
    %16 = cir.const #cir.int<1> : !s32i loc(#loc28)
    %17 = cir.unary(minus, %16) : !s32i, !s32i loc(#loc29)
    cir.call @exit(%17) : (!s32i) -> () extra(#fn_attr) loc(#loc27)
    cir.br ^bb6 loc(#loc23)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc23)
  ^bb7:  // pred: ^bb6
    %18 = cir.const #cir.int<5> : !s32i loc(#loc30)
    %19 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc31)
    %20 = cir.const #cir.int<0> : !s32i loc(#loc32)
    %21 = cir.ptr_stride(%19 : !cir.ptr<!s32i>, %20 : !s32i), !cir.ptr<!s32i> loc(#loc33)
    cir.store %18, %21 : !s32i, !cir.ptr<!s32i> loc(#loc157)
    %22 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc34)
    %23 = cir.const #cir.int<0> : !s32i loc(#loc35)
    %24 = cir.ptr_stride(%22 : !cir.ptr<!s32i>, %23 : !s32i), !cir.ptr<!s32i> loc(#loc36)
    %25 = cir.load %24 : !cir.ptr<!s32i>, !s32i loc(#loc34)
    cir.call @printIntLine(%25) : (!s32i) -> () loc(#loc37)
    cir.br ^bb8 loc(#loc38)
  ^bb8:  // 2 preds: ^bb2, ^bb7
    cir.br ^bb9 loc(#loc14)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc158)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc158)
  ^bb11:  // pred: ^bb10
    %26 = cir.const #cir.int<1> : !s32i loc(#loc41)
    %27 = cir.cast(int_to_bool, %26 : !s32i), !cir.bool loc(#loc41)
    cir.brcond %27 ^bb12, ^bb13 loc(#loc41)
  ^bb12:  // pred: ^bb11
    cir.br ^bb13 loc(#loc42)
  ^bb13:  // 2 preds: ^bb11, ^bb12
    cir.br ^bb14 loc(#loc40)
  ^bb14:  // pred: ^bb13
    cir.return loc(#loc8)
  } loc(#loc146)
  cir.func no_proto @CWE401_Memory_Leak__int_malloc_16_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc160)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc45)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc161)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc47)
    cir.return loc(#loc44)
  } loc(#loc159)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc162)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc163)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc164)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc55)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc56)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc57)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc58)
  cir.func @main(%arg0: !s32i loc(fused[#loc61, #loc62]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc63, #loc64])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc166)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc167)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc60)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc65)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc65)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc66)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc67)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc67)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc68)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc55)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc55)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc69)
    %8 = cir.get_global @CWE401_Memory_Leak__int_malloc_16_good : !cir.ptr<!cir.func<!void ()>> loc(#loc168)
    cir.call @CWE401_Memory_Leak__int_malloc_16_good() : () -> () loc(#loc70)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc56)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc56)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc72)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc57)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc57)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc73)
    %13 = cir.get_global @CWE401_Memory_Leak__int_malloc_16_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc169)
    cir.call @CWE401_Memory_Leak__int_malloc_16_bad() : () -> () loc(#loc74)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc58)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc58)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc76)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc77)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc170)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc170)
    cir.return %17 : !s32i loc(#loc170)
  } loc(#loc165)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc171)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc173)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc85)
    cir.store %1, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc174)
    cir.br ^bb1 loc(#loc175)
  ^bb1:  // pred: ^bb0
    cir.br ^bb2 loc(#loc175)
  ^bb2:  // pred: ^bb1
    %2 = cir.const #cir.int<1> : !s32i loc(#loc89)
    %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc89)
    cir.brcond %3 ^bb3, ^bb8 loc(#loc89)
  ^bb3:  // pred: ^bb2
    %4 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc90)
    %5 = cir.const #cir.int<100> : !s32i loc(#loc91)
    %6 = cir.cast(integral, %5 : !s32i), !u64i loc(#loc91)
    %7 = cir.const #cir.int<4> : !u64i loc(#loc176)
    %8 = cir.binop(mul, %6, %7) : !u64i loc(#loc177)
    %9 = cir.call @malloc(%8) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc90)
    %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc178)
    cir.store %10, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc179)
    cir.br ^bb4 loc(#loc180)
  ^bb4:  // pred: ^bb3
    %11 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc98)
    %12 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc99)
    %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc99)
    %14 = cir.cmp(eq, %11, %13) : !cir.ptr<!s32i>, !cir.bool loc(#loc181)
    cir.brcond %14 ^bb5, ^bb6 loc(#loc182)
  ^bb5:  // pred: ^bb4
    %15 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc101)
    %16 = cir.const #cir.int<1> : !s32i loc(#loc102)
    %17 = cir.unary(minus, %16) : !s32i, !s32i loc(#loc103)
    cir.call @exit(%17) : (!s32i) -> () extra(#fn_attr) loc(#loc101)
    cir.br ^bb6 loc(#loc97)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc97)
  ^bb7:  // pred: ^bb6
    %18 = cir.const #cir.int<5> : !s32i loc(#loc104)
    %19 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc105)
    %20 = cir.const #cir.int<0> : !s32i loc(#loc106)
    %21 = cir.ptr_stride(%19 : !cir.ptr<!s32i>, %20 : !s32i), !cir.ptr<!s32i> loc(#loc107)
    cir.store %18, %21 : !s32i, !cir.ptr<!s32i> loc(#loc183)
    %22 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc108)
    %23 = cir.const #cir.int<0> : !s32i loc(#loc109)
    %24 = cir.ptr_stride(%22 : !cir.ptr<!s32i>, %23 : !s32i), !cir.ptr<!s32i> loc(#loc110)
    %25 = cir.load %24 : !cir.ptr<!s32i>, !s32i loc(#loc108)
    cir.call @printIntLine(%25) : (!s32i) -> () loc(#loc111)
    cir.br ^bb8 loc(#loc112)
  ^bb8:  // 2 preds: ^bb2, ^bb7
    cir.br ^bb9 loc(#loc88)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc184)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc184)
  ^bb11:  // pred: ^bb10
    %26 = cir.const #cir.int<1> : !s32i loc(#loc115)
    %27 = cir.cast(int_to_bool, %26 : !s32i), !cir.bool loc(#loc115)
    cir.brcond %27 ^bb12, ^bb13 loc(#loc115)
  ^bb12:  // pred: ^bb11
    %28 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc116)
    %29 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc117)
    %30 = cir.cast(bitcast, %29 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc117)
    cir.call @free(%30) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc116)
    cir.br ^bb13 loc(#loc118)
  ^bb13:  // 2 preds: ^bb11, ^bb12
    cir.br ^bb14 loc(#loc114)
  ^bb14:  // pred: ^bb13
    cir.return loc(#loc82)
  } loc(#loc172)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc186)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc123)
    cir.store %1, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc187)
    cir.br ^bb1 loc(#loc188)
  ^bb1:  // pred: ^bb0
    cir.br ^bb2 loc(#loc188)
  ^bb2:  // pred: ^bb1
    %2 = cir.const #cir.int<1> : !s32i loc(#loc127)
    %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc127)
    cir.brcond %3 ^bb3, ^bb4 loc(#loc127)
  ^bb3:  // pred: ^bb2
    %4 = cir.const #cir.int<100> : !s32i loc(#loc128)
    %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc128)
    %6 = cir.const #cir.int<4> : !u64i loc(#loc128)
    %7 = cir.binop(mul, %5, %6) : !u64i loc(#loc128)
    %8 = cir.alloca !u8i, !cir.ptr<!u8i>, %7 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc128)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc128)
    %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc128)
    cir.store %10, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc189)
    %11 = cir.const #cir.int<5> : !s32i loc(#loc130)
    %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc131)
    %13 = cir.const #cir.int<0> : !s32i loc(#loc132)
    %14 = cir.ptr_stride(%12 : !cir.ptr<!s32i>, %13 : !s32i), !cir.ptr<!s32i> loc(#loc133)
    cir.store %11, %14 : !s32i, !cir.ptr<!s32i> loc(#loc190)
    %15 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc134)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc135)
    %17 = cir.ptr_stride(%15 : !cir.ptr<!s32i>, %16 : !s32i), !cir.ptr<!s32i> loc(#loc136)
    %18 = cir.load %17 : !cir.ptr<!s32i>, !s32i loc(#loc134)
    cir.call @printIntLine(%18) : (!s32i) -> () loc(#loc137)
    cir.br ^bb4 loc(#loc138)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc126)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc191)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc191)
  ^bb7:  // pred: ^bb6
    %19 = cir.const #cir.int<1> : !s32i loc(#loc141)
    %20 = cir.cast(int_to_bool, %19 : !s32i), !cir.bool loc(#loc141)
    cir.brcond %20 ^bb8, ^bb9 loc(#loc141)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc142)
  ^bb9:  // 2 preds: ^bb7, ^bb8
    cir.br ^bb10 loc(#loc140)
  ^bb10:  // pred: ^bb9
    cir.return loc(#loc120)
  } loc(#loc185)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE401_Memory_Leak/s01/CWE401_Memory_Leak__int_malloc_16.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc7 = loc("CWE401_Memory_Leak__int_malloc_16.c":24:1)
#loc8 = loc("CWE401_Memory_Leak__int_malloc_16.c":44:1)
#loc9 = loc("CWE401_Memory_Leak__int_malloc_16.c":26:5)
#loc10 = loc("CWE401_Memory_Leak__int_malloc_16.c":26:11)
#loc11 = loc("CWE401_Memory_Leak__int_malloc_16.c":27:12)
#loc12 = loc("CWE401_Memory_Leak__int_malloc_16.c":27:5)
#loc13 = loc("CWE401_Memory_Leak__int_malloc_16.c":28:5)
#loc14 = loc("CWE401_Memory_Leak__int_malloc_16.c":37:5)
#loc15 = loc("CWE401_Memory_Leak__int_malloc_16.c":28:11)
#loc16 = loc("CWE401_Memory_Leak__int_malloc_16.c":31:23)
#loc17 = loc("CWE401_Memory_Leak__int_malloc_16.c":31:30)
#loc18 = loc("CWE401_Memory_Leak__int_malloc_16.c":31:34)
#loc19 = loc("CWE401_Memory_Leak__int_malloc_16.c":31:44)
#loc20 = loc("CWE401_Memory_Leak__int_malloc_16.c":31:45)
#loc21 = loc("CWE401_Memory_Leak__int_malloc_16.c":31:9)
#loc22 = loc("CWE401_Memory_Leak__int_malloc_16.c":32:9)
#loc23 = loc("CWE401_Memory_Leak__int_malloc_16.c":32:37)
#loc24 = loc("CWE401_Memory_Leak__int_malloc_16.c":32:13)
#loc25 = loc("CWE401_Memory_Leak__int_malloc_16.c":32:21)
#loc26 = loc("CWE401_Memory_Leak__int_malloc_16.c":32:27)
#loc27 = loc("CWE401_Memory_Leak__int_malloc_16.c":32:28)
#loc28 = loc("CWE401_Memory_Leak__int_malloc_16.c":32:34)
#loc29 = loc("CWE401_Memory_Leak__int_malloc_16.c":32:33)
#loc30 = loc("CWE401_Memory_Leak__int_malloc_16.c":34:19)
#loc31 = loc("CWE401_Memory_Leak__int_malloc_16.c":34:9)
#loc32 = loc("CWE401_Memory_Leak__int_malloc_16.c":34:14)
#loc33 = loc("CWE401_Memory_Leak__int_malloc_16.c":34:15)
#loc34 = loc("CWE401_Memory_Leak__int_malloc_16.c":35:22)
#loc35 = loc("CWE401_Memory_Leak__int_malloc_16.c":35:27)
#loc36 = loc("CWE401_Memory_Leak__int_malloc_16.c":35:28)
#loc37 = loc("CWE401_Memory_Leak__int_malloc_16.c":35:9)
#loc38 = loc("CWE401_Memory_Leak__int_malloc_16.c":36:9)
#loc39 = loc("CWE401_Memory_Leak__int_malloc_16.c":38:5)
#loc40 = loc("CWE401_Memory_Leak__int_malloc_16.c":43:5)
#loc41 = loc("CWE401_Memory_Leak__int_malloc_16.c":38:11)
#loc42 = loc("CWE401_Memory_Leak__int_malloc_16.c":42:9)
#loc43 = loc("CWE401_Memory_Leak__int_malloc_16.c":95:1)
#loc44 = loc("CWE401_Memory_Leak__int_malloc_16.c":99:1)
#loc45 = loc("CWE401_Memory_Leak__int_malloc_16.c":97:5)
#loc46 = loc("CWE401_Memory_Leak__int_malloc_16.c":97:13)
#loc47 = loc("CWE401_Memory_Leak__int_malloc_16.c":98:5)
#loc48 = loc("CWE401_Memory_Leak__int_malloc_16.c":98:13)
#loc49 = loc("/usr/include/stdlib.h":575:1)
#loc50 = loc("/usr/include/stdlib.h":575:41)
#loc51 = loc("/usr/include/time.h":76:1)
#loc52 = loc("/usr/include/time.h":76:38)
#loc53 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc54 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc55 = loc("CWE401_Memory_Leak__int_malloc_16.c":115:15)
#loc56 = loc("CWE401_Memory_Leak__int_malloc_16.c":117:15)
#loc57 = loc("CWE401_Memory_Leak__int_malloc_16.c":120:15)
#loc58 = loc("CWE401_Memory_Leak__int_malloc_16.c":122:15)
#loc59 = loc("CWE401_Memory_Leak__int_malloc_16.c":110:1)
#loc60 = loc("CWE401_Memory_Leak__int_malloc_16.c":125:1)
#loc65 = loc("CWE401_Memory_Leak__int_malloc_16.c":111:1)
#loc66 = loc("CWE401_Memory_Leak__int_malloc_16.c":113:27)
#loc67 = loc("CWE401_Memory_Leak__int_malloc_16.c":113:22)
#loc68 = loc("CWE401_Memory_Leak__int_malloc_16.c":113:5)
#loc69 = loc("CWE401_Memory_Leak__int_malloc_16.c":115:5)
#loc70 = loc("CWE401_Memory_Leak__int_malloc_16.c":116:5)
#loc71 = loc("CWE401_Memory_Leak__int_malloc_16.c":116:44)
#loc72 = loc("CWE401_Memory_Leak__int_malloc_16.c":117:5)
#loc73 = loc("CWE401_Memory_Leak__int_malloc_16.c":120:5)
#loc74 = loc("CWE401_Memory_Leak__int_malloc_16.c":121:5)
#loc75 = loc("CWE401_Memory_Leak__int_malloc_16.c":121:43)
#loc76 = loc("CWE401_Memory_Leak__int_malloc_16.c":122:5)
#loc77 = loc("CWE401_Memory_Leak__int_malloc_16.c":124:12)
#loc78 = loc("CWE401_Memory_Leak__int_malloc_16.c":124:5)
#loc79 = loc("/usr/include/stdlib.h":687:1)
#loc80 = loc("/usr/include/stdlib.h":687:32)
#loc81 = loc("CWE401_Memory_Leak__int_malloc_16.c":51:1)
#loc82 = loc("CWE401_Memory_Leak__int_malloc_16.c":71:1)
#loc83 = loc("CWE401_Memory_Leak__int_malloc_16.c":53:5)
#loc84 = loc("CWE401_Memory_Leak__int_malloc_16.c":53:11)
#loc85 = loc("CWE401_Memory_Leak__int_malloc_16.c":54:12)
#loc86 = loc("CWE401_Memory_Leak__int_malloc_16.c":54:5)
#loc87 = loc("CWE401_Memory_Leak__int_malloc_16.c":55:5)
#loc88 = loc("CWE401_Memory_Leak__int_malloc_16.c":64:5)
#loc89 = loc("CWE401_Memory_Leak__int_malloc_16.c":55:11)
#loc90 = loc("CWE401_Memory_Leak__int_malloc_16.c":58:23)
#loc91 = loc("CWE401_Memory_Leak__int_malloc_16.c":58:30)
#loc92 = loc("CWE401_Memory_Leak__int_malloc_16.c":58:34)
#loc93 = loc("CWE401_Memory_Leak__int_malloc_16.c":58:44)
#loc94 = loc("CWE401_Memory_Leak__int_malloc_16.c":58:45)
#loc95 = loc("CWE401_Memory_Leak__int_malloc_16.c":58:9)
#loc96 = loc("CWE401_Memory_Leak__int_malloc_16.c":59:9)
#loc97 = loc("CWE401_Memory_Leak__int_malloc_16.c":59:37)
#loc98 = loc("CWE401_Memory_Leak__int_malloc_16.c":59:13)
#loc99 = loc("CWE401_Memory_Leak__int_malloc_16.c":59:21)
#loc100 = loc("CWE401_Memory_Leak__int_malloc_16.c":59:27)
#loc101 = loc("CWE401_Memory_Leak__int_malloc_16.c":59:28)
#loc102 = loc("CWE401_Memory_Leak__int_malloc_16.c":59:34)
#loc103 = loc("CWE401_Memory_Leak__int_malloc_16.c":59:33)
#loc104 = loc("CWE401_Memory_Leak__int_malloc_16.c":61:19)
#loc105 = loc("CWE401_Memory_Leak__int_malloc_16.c":61:9)
#loc106 = loc("CWE401_Memory_Leak__int_malloc_16.c":61:14)
#loc107 = loc("CWE401_Memory_Leak__int_malloc_16.c":61:15)
#loc108 = loc("CWE401_Memory_Leak__int_malloc_16.c":62:22)
#loc109 = loc("CWE401_Memory_Leak__int_malloc_16.c":62:27)
#loc110 = loc("CWE401_Memory_Leak__int_malloc_16.c":62:28)
#loc111 = loc("CWE401_Memory_Leak__int_malloc_16.c":62:9)
#loc112 = loc("CWE401_Memory_Leak__int_malloc_16.c":63:9)
#loc113 = loc("CWE401_Memory_Leak__int_malloc_16.c":65:5)
#loc114 = loc("CWE401_Memory_Leak__int_malloc_16.c":70:5)
#loc115 = loc("CWE401_Memory_Leak__int_malloc_16.c":65:11)
#loc116 = loc("CWE401_Memory_Leak__int_malloc_16.c":68:9)
#loc117 = loc("CWE401_Memory_Leak__int_malloc_16.c":68:14)
#loc118 = loc("CWE401_Memory_Leak__int_malloc_16.c":69:9)
#loc119 = loc("CWE401_Memory_Leak__int_malloc_16.c":74:1)
#loc120 = loc("CWE401_Memory_Leak__int_malloc_16.c":93:1)
#loc121 = loc("CWE401_Memory_Leak__int_malloc_16.c":76:5)
#loc122 = loc("CWE401_Memory_Leak__int_malloc_16.c":76:11)
#loc123 = loc("CWE401_Memory_Leak__int_malloc_16.c":77:12)
#loc124 = loc("CWE401_Memory_Leak__int_malloc_16.c":77:5)
#loc125 = loc("CWE401_Memory_Leak__int_malloc_16.c":78:5)
#loc126 = loc("CWE401_Memory_Leak__int_malloc_16.c":86:5)
#loc127 = loc("CWE401_Memory_Leak__int_malloc_16.c":78:11)
#loc128 = loc("CWE401_Memory_Leak__int_malloc_16.c":81:23)
#loc129 = loc("CWE401_Memory_Leak__int_malloc_16.c":81:9)
#loc130 = loc("CWE401_Memory_Leak__int_malloc_16.c":83:19)
#loc131 = loc("CWE401_Memory_Leak__int_malloc_16.c":83:9)
#loc132 = loc("CWE401_Memory_Leak__int_malloc_16.c":83:14)
#loc133 = loc("CWE401_Memory_Leak__int_malloc_16.c":83:15)
#loc134 = loc("CWE401_Memory_Leak__int_malloc_16.c":84:22)
#loc135 = loc("CWE401_Memory_Leak__int_malloc_16.c":84:27)
#loc136 = loc("CWE401_Memory_Leak__int_malloc_16.c":84:28)
#loc137 = loc("CWE401_Memory_Leak__int_malloc_16.c":84:9)
#loc138 = loc("CWE401_Memory_Leak__int_malloc_16.c":85:9)
#loc139 = loc("CWE401_Memory_Leak__int_malloc_16.c":87:5)
#loc140 = loc("CWE401_Memory_Leak__int_malloc_16.c":92:5)
#loc141 = loc("CWE401_Memory_Leak__int_malloc_16.c":87:11)
#loc142 = loc("CWE401_Memory_Leak__int_malloc_16.c":91:9)
#loc143 = loc(fused[#loc1, #loc2])
#loc144 = loc(fused[#loc3, #loc4])
#loc145 = loc(fused[#loc5, #loc6])
#loc146 = loc(fused[#loc7, #loc8])
#loc147 = loc(fused[#loc9, #loc10])
#loc148 = loc(fused[#loc12, #loc11])
#loc149 = loc(fused[#loc13, #loc14])
#loc150 = loc(fused[#loc18, #loc19])
#loc151 = loc(fused[#loc17, #loc19])
#loc152 = loc(fused[#loc16, #loc20])
#loc153 = loc(fused[#loc21, #loc20])
#loc154 = loc(fused[#loc22, #loc23])
#loc155 = loc(fused[#loc24, #loc25])
#loc156 = loc(fused[#loc26, #loc23])
#loc157 = loc(fused[#loc31, #loc30])
#loc158 = loc(fused[#loc39, #loc40])
#loc159 = loc(fused[#loc43, #loc44])
#loc160 = loc(fused[#loc45, #loc46])
#loc161 = loc(fused[#loc47, #loc48])
#loc162 = loc(fused[#loc49, #loc50])
#loc163 = loc(fused[#loc51, #loc52])
#loc164 = loc(fused[#loc53, #loc54])
#loc165 = loc(fused[#loc59, #loc60])
#loc168 = loc(fused[#loc70, #loc71])
#loc169 = loc(fused[#loc74, #loc75])
#loc170 = loc(fused[#loc78, #loc77])
#loc171 = loc(fused[#loc79, #loc80])
#loc172 = loc(fused[#loc81, #loc82])
#loc173 = loc(fused[#loc83, #loc84])
#loc174 = loc(fused[#loc86, #loc85])
#loc175 = loc(fused[#loc87, #loc88])
#loc176 = loc(fused[#loc92, #loc93])
#loc177 = loc(fused[#loc91, #loc93])
#loc178 = loc(fused[#loc90, #loc94])
#loc179 = loc(fused[#loc95, #loc94])
#loc180 = loc(fused[#loc96, #loc97])
#loc181 = loc(fused[#loc98, #loc99])
#loc182 = loc(fused[#loc100, #loc97])
#loc183 = loc(fused[#loc105, #loc104])
#loc184 = loc(fused[#loc113, #loc114])
#loc185 = loc(fused[#loc119, #loc120])
#loc186 = loc(fused[#loc121, #loc122])
#loc187 = loc(fused[#loc124, #loc123])
#loc188 = loc(fused[#loc125, #loc126])
#loc189 = loc(fused[#loc129, #loc128])
#loc190 = loc(fused[#loc131, #loc130])
#loc191 = loc(fused[#loc139, #loc140])
