!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc18 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_61b.c":43:85)
#loc19 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_61b.c":43:89)
#loc114 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_61b.c":109:89)
#loc115 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_61b.c":109:93)
#true = #cir.bool<true> : !cir.bool
!ty_in_addr = !cir.record<struct "in_addr" {!u32i} #cir.record.decl.ast>
#loc129 = loc(fused[#loc18, #loc19])
#loc165 = loc(fused[#loc114, #loc115])
!ty_sockaddr = !cir.record<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.record<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/workspaces/juliet-c/testcases/CWE680_Integer_Overflow_to_Buffer_Overflow/CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_61b.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e">} {
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc121)
  cir.func private @inet_addr(!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc122)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"127.0.0.1\00" : !cir.array<!s8i x 10>> : !cir.array<!s8i x 10> {alignment = 1 : i64} loc(#loc5)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc123)
  cir.func private @connect(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc124)
  cir.func private @recv(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc125)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc126)
  cir.func private @close(!s32i) -> !s32i loc(#loc127)
  cir.func @CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_61b_badSource(%arg0: !s32i loc(fused[#loc18, #loc19])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc129)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc17)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc20)
    cir.scope {
      %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc131)
      %5 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc132)
      %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["connectSocket", init] {alignment = 4 : i64} loc(#loc133)
      %7 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc134)
      %8 = cir.const #cir.int<1> : !s32i loc(#loc28)
      %9 = cir.unary(minus, %8) nsw : !s32i, !s32i loc(#loc28)
      cir.store %9, %6 : !s32i, !cir.ptr<!s32i> loc(#loc133)
      cir.scope {
        cir.do {
          cir.scope {
            %10 = cir.const #cir.int<2> : !s32i loc(#loc35)
            %11 = cir.const #cir.int<1> : !s32i loc(#loc36)
            %12 = cir.const #cir.int<6> : !s32i loc(#loc37)
            %13 = cir.call @socket(%10, %11, %12) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc38)
            cir.store %13, %6 : !s32i, !cir.ptr<!s32i> loc(#loc137)
            cir.scope {
              %52 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc43)
              %53 = cir.const #cir.int<1> : !s32i loc(#loc44)
              %54 = cir.unary(minus, %53) nsw : !s32i, !s32i loc(#loc44)
              %55 = cir.cmp(eq, %52, %54) : !s32i, !cir.bool loc(#loc139)
              cir.if %55 {
                cir.break loc(#loc46)
              } loc(#loc140)
            } loc(#loc138)
            %14 = cir.cast(bitcast, %5 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc141)
            %15 = cir.const #cir.int<0> : !s32i loc(#loc49)
            %16 = cir.const #cir.int<16> : !u64i loc(#loc142)
            cir.libc.memset %16 bytes from %14 set to %15 : !cir.ptr<!void>, !s32i, !u64i loc(#loc143)
            %17 = cir.const #cir.int<2> : !s32i loc(#loc54)
            %18 = cir.cast(integral, %17 : !s32i), !u16i loc(#loc54)
            %19 = cir.get_member %5[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc55)
            cir.store %18, %19 : !u16i, !cir.ptr<!u16i> loc(#loc144)
            %20 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 10>> loc(#loc5)
            %21 = cir.cast(array_to_ptrdecay, %20 : !cir.ptr<!cir.array<!s8i x 10>>), !cir.ptr<!s8i> loc(#loc5)
            %22 = cir.call @inet_addr(%21) : (!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc57)
            %23 = cir.get_member %5[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc58)
            %24 = cir.get_member %23[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc59)
            cir.store %22, %24 : !u32i, !cir.ptr<!u32i> loc(#loc145)
            %25 = cir.const #cir.int<27015> : !s32i loc(#loc62)
            %26 = cir.cast(integral, %25 : !s32i), !u16i loc(#loc62)
            %27 = cir.call @htons(%26) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc63)
            %28 = cir.get_member %5[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc64)
            cir.store %27, %28 : !u16i, !cir.ptr<!u16i> loc(#loc146)
            cir.scope {
              %52 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc69)
              %53 = cir.cast(bitcast, %5 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc148)
              %54 = cir.const #cir.int<16> : !u64i loc(#loc149)
              %55 = cir.cast(integral, %54 : !u64i), !u32i loc(#loc149)
              %56 = cir.call @connect(%52, %53, %55) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc74)
              %57 = cir.const #cir.int<1> : !s32i loc(#loc75)
              %58 = cir.unary(minus, %57) nsw : !s32i, !s32i loc(#loc75)
              %59 = cir.cmp(eq, %56, %58) : !s32i, !cir.bool loc(#loc150)
              cir.if %59 {
                cir.break loc(#loc77)
              } loc(#loc151)
            } loc(#loc147)
            %29 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc78)
            %30 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc79)
            %31 = cir.cast(bitcast, %30 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc79)
            %32 = cir.const #cir.int<3> : !s32i loc(#loc80)
            %33 = cir.cast(integral, %32 : !s32i), !u64i loc(#loc80)
            %34 = cir.const #cir.int<4> : !u64i loc(#loc80)
            %35 = cir.binop(mul, %33, %34) : !u64i loc(#loc80)
            %36 = cir.const #cir.int<2> : !s32i loc(#loc80)
            %37 = cir.cast(integral, %36 : !s32i), !u64i loc(#loc80)
            %38 = cir.binop(add, %35, %37) : !u64i loc(#loc80)
            %39 = cir.const #cir.int<1> : !s32i loc(#loc81)
            %40 = cir.cast(integral, %39 : !s32i), !u64i loc(#loc81)
            %41 = cir.binop(sub, %38, %40) : !u64i loc(#loc152)
            %42 = cir.const #cir.int<0> : !s32i loc(#loc82)
            %43 = cir.call @recv(%29, %31, %41, %42) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc83)
            %44 = cir.cast(integral, %43 : !s64i), !s32i loc(#loc83)
            cir.store %44, %4 : !s32i, !cir.ptr<!s32i> loc(#loc153)
            cir.scope {
              %52 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc88)
              %53 = cir.const #cir.int<1> : !s32i loc(#loc89)
              %54 = cir.unary(minus, %53) nsw : !s32i, !s32i loc(#loc89)
              %55 = cir.cmp(eq, %52, %54) : !s32i, !cir.bool loc(#loc155)
              %56 = cir.ternary(%55, true {
                %57 = cir.const #true loc(#loc90)
                cir.yield %57 : !cir.bool loc(#loc90)
              }, false {
                %57 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc91)
                %58 = cir.const #cir.int<0> : !s32i loc(#loc92)
                %59 = cir.cmp(eq, %57, %58) : !s32i, !cir.bool loc(#loc156)
                %60 = cir.ternary(%59, true {
                  %61 = cir.const #true loc(#loc90)
                  cir.yield %61 : !cir.bool loc(#loc90)
                }, false {
                  %61 = cir.const #false loc(#loc90)
                  cir.yield %61 : !cir.bool loc(#loc90)
                }) : (!cir.bool) -> !cir.bool loc(#loc90)
                cir.yield %60 : !cir.bool loc(#loc90)
              }) : (!cir.bool) -> !cir.bool loc(#loc90)
              cir.if %56 {
                cir.break loc(#loc94)
              } loc(#loc157)
            } loc(#loc154)
            %45 = cir.const #cir.int<0> : !s32i loc(#loc95)
            %46 = cir.cast(integral, %45 : !s32i), !s8i loc(#loc95)
            %47 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc96)
            %48 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc97)
            %49 = cir.ptr_stride(%48 : !cir.ptr<!s8i>, %47 : !s32i), !cir.ptr<!s8i> loc(#loc97)
            cir.store %46, %49 : !s8i, !cir.ptr<!s8i> loc(#loc158)
            %50 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc98)
            %51 = cir.call @atoi(%50) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc99)
            cir.store %51, %0 : !s32i, !cir.ptr<!s32i> loc(#loc159)
          } loc(#loc136)
          cir.yield loc(#loc32)
        } while {
          %10 = cir.const #cir.int<0> : !s32i loc(#loc102)
          %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc102)
          cir.condition(%11) loc(#loc102)
        } loc(#loc135)
      } loc(#loc135)
      cir.scope {
        %10 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc105)
        %11 = cir.const #cir.int<1> : !s32i loc(#loc106)
        %12 = cir.unary(minus, %11) nsw : !s32i, !s32i loc(#loc106)
        %13 = cir.cmp(ne, %10, %12) : !s32i, !cir.bool loc(#loc161)
        cir.if %13 {
          %14 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc108)
          %15 = cir.call @close(%14) : (!s32i) -> !s32i loc(#loc109)
        } loc(#loc162)
      } loc(#loc160)
    } loc(#loc130)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc110)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc163)
    %3 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc163)
    cir.return %3 : !s32i loc(#loc163)
  } loc(#loc128)
  cir.func @CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_61b_goodG2BSource(%arg0: !s32i loc(fused[#loc114, #loc115])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc165)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc113)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc116)
    %2 = cir.const #cir.int<20> : !s32i loc(#loc117)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc166)
    %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc119)
    cir.store %3, %1 : !s32i, !cir.ptr<!s32i> loc(#loc167)
    %4 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc167)
    cir.return %4 : !s32i loc(#loc167)
  } loc(#loc164)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE680_Integer_Overflow_to_Buffer_Overflow/CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_61b.c":0:0)
#loc1 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:1)
#loc2 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:62)
#loc3 = loc("/usr/include/arpa/inet.h":34:1)
#loc4 = loc("/usr/include/arpa/inet.h":34:47)
#loc5 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_61b.c":71:49)
#loc6 = loc("/usr/include/netinet/in.h":402:1)
#loc7 = loc("/usr/include/netinet/in.h":403:40)
#loc8 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":126:1)
#loc9 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":126:75)
#loc10 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":145:1)
#loc11 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":145:68)
#loc12 = loc("/usr/include/stdlib.h":105:1)
#loc13 = loc("/usr/include/stdlib.h":106:33)
#loc14 = loc("/usr/include/unistd.h":358:1)
#loc15 = loc("/usr/include/unistd.h":358:27)
#loc16 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_61b.c":43:1)
#loc17 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_61b.c":102:1)
#loc20 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_61b.c":44:1)
#loc21 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_61b.c":45:5)
#loc22 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_61b.c":100:5)
#loc23 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_61b.c":50:9)
#loc24 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_61b.c":50:13)
#loc25 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_61b.c":51:9)
#loc26 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_61b.c":51:28)
#loc27 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_61b.c":52:9)
#loc28 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_61b.c":52:32)
#loc29 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_61b.c":53:9)
#loc30 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_61b.c":53:41)
#loc31 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_61b.c":54:9)
#loc32 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_61b.c":89:17)
#loc33 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_61b.c":55:9)
#loc34 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_61b.c":88:9)
#loc35 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_61b.c":64:36)
#loc36 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_61b.c":64:45)
#loc37 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_61b.c":64:58)
#loc38 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_61b.c":64:29)
#loc39 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_61b.c":64:13)
#loc40 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_61b.c":64:69)
#loc41 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_61b.c":65:13)
#loc42 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_61b.c":68:13)
#loc43 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_61b.c":65:17)
#loc44 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_61b.c":65:34)
#loc45 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_61b.c":66:13)
#loc46 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_61b.c":67:17)
#loc47 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_61b.c":69:20)
#loc48 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_61b.c":69:21)
#loc49 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_61b.c":69:30)
#loc50 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_61b.c":69:33)
#loc51 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_61b.c":69:47)
#loc52 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_61b.c":69:13)
#loc53 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_61b.c":69:48)
#loc54 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_61b.c":70:34)
#loc55 = loc("/usr/include/netinet/in.h":249:5)
#loc56 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_61b.c":70:13)
#loc57 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_61b.c":71:39)
#loc58 = loc("/usr/include/netinet/in.h":251:20)
#loc59 = loc("/usr/include/netinet/in.h":33:15)
#loc60 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_61b.c":71:13)
#loc61 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_61b.c":71:59)
#loc62 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_61b.c":72:38)
#loc63 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_61b.c":72:32)
#loc64 = loc("/usr/include/netinet/in.h":250:15)
#loc65 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_61b.c":72:13)
#loc66 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_61b.c":72:46)
#loc67 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_61b.c":73:13)
#loc68 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_61b.c":76:13)
#loc69 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_61b.c":73:25)
#loc70 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_61b.c":73:58)
#loc71 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_61b.c":73:59)
#loc72 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_61b.c":73:68)
#loc73 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_61b.c":73:82)
#loc74 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_61b.c":73:17)
#loc75 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_61b.c":73:88)
#loc76 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_61b.c":74:13)
#loc77 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_61b.c":75:17)
#loc78 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_61b.c":79:31)
#loc79 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_61b.c":79:46)
#loc80 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_61b.c":79:59)
#loc81 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_61b.c":79:77)
#loc82 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_61b.c":79:80)
#loc83 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_61b.c":79:26)
#loc84 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_61b.c":79:13)
#loc85 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_61b.c":79:81)
#loc86 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_61b.c":80:13)
#loc87 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_61b.c":83:13)
#loc88 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_61b.c":80:17)
#loc89 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_61b.c":80:31)
#loc90 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_61b.c":80:44)
#loc91 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_61b.c":80:47)
#loc92 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_61b.c":80:61)
#loc93 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_61b.c":81:13)
#loc94 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_61b.c":82:17)
#loc95 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_61b.c":85:39)
#loc96 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_61b.c":85:25)
#loc97 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_61b.c":85:13)
#loc98 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_61b.c":87:25)
#loc99 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_61b.c":87:20)
#loc100 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_61b.c":87:13)
#loc101 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_61b.c":87:36)
#loc102 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_61b.c":89:16)
#loc103 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_61b.c":90:9)
#loc104 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_61b.c":93:9)
#loc105 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_61b.c":90:13)
#loc106 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_61b.c":90:30)
#loc107 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_61b.c":91:9)
#loc108 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_61b.c":92:26)
#loc109 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_61b.c":92:13)
#loc110 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_61b.c":101:12)
#loc111 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_61b.c":101:5)
#loc112 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_61b.c":109:1)
#loc113 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_61b.c":114:1)
#loc116 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_61b.c":110:1)
#loc117 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_61b.c":112:12)
#loc118 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_61b.c":112:5)
#loc119 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_61b.c":113:12)
#loc120 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_61b.c":113:5)
#loc121 = loc(fused[#loc1, #loc2])
#loc122 = loc(fused[#loc3, #loc4])
#loc123 = loc(fused[#loc6, #loc7])
#loc124 = loc(fused[#loc8, #loc9])
#loc125 = loc(fused[#loc10, #loc11])
#loc126 = loc(fused[#loc12, #loc13])
#loc127 = loc(fused[#loc14, #loc15])
#loc128 = loc(fused[#loc16, #loc17])
#loc130 = loc(fused[#loc21, #loc22])
#loc131 = loc(fused[#loc23, #loc24])
#loc132 = loc(fused[#loc25, #loc26])
#loc133 = loc(fused[#loc27, #loc28])
#loc134 = loc(fused[#loc29, #loc30])
#loc135 = loc(fused[#loc31, #loc32])
#loc136 = loc(fused[#loc33, #loc34])
#loc137 = loc(fused[#loc39, #loc40])
#loc138 = loc(fused[#loc41, #loc42])
#loc139 = loc(fused[#loc43, #loc44])
#loc140 = loc(fused[#loc45, #loc42])
#loc141 = loc(fused[#loc47, #loc48])
#loc142 = loc(fused[#loc50, #loc51])
#loc143 = loc(fused[#loc52, #loc53])
#loc144 = loc(fused[#loc56, #loc54])
#loc145 = loc(fused[#loc60, #loc61])
#loc146 = loc(fused[#loc65, #loc66])
#loc147 = loc(fused[#loc67, #loc68])
#loc148 = loc(fused[#loc70, #loc71])
#loc149 = loc(fused[#loc72, #loc73])
#loc150 = loc(fused[#loc74, #loc75])
#loc151 = loc(fused[#loc76, #loc68])
#loc152 = loc(fused[#loc80, #loc81])
#loc153 = loc(fused[#loc84, #loc85])
#loc154 = loc(fused[#loc86, #loc87])
#loc155 = loc(fused[#loc88, #loc89])
#loc156 = loc(fused[#loc91, #loc92])
#loc157 = loc(fused[#loc93, #loc87])
#loc158 = loc(fused[#loc97, #loc95])
#loc159 = loc(fused[#loc100, #loc101])
#loc160 = loc(fused[#loc103, #loc104])
#loc161 = loc(fused[#loc105, #loc106])
#loc162 = loc(fused[#loc107, #loc104])
#loc163 = loc(fused[#loc111, #loc110])
#loc164 = loc(fused[#loc112, #loc113])
#loc166 = loc(fused[#loc118, #loc117])
#loc167 = loc(fused[#loc120, #loc119])
