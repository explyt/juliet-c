!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":44:21)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":44:25)
#loc233 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":319:10)
#loc234 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":319:14)
#loc235 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":319:20)
#loc236 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":319:32)
#loc254 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":198:25)
#loc255 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":198:29)
#loc443 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":156:25)
#loc444 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":156:29)
#true = #cir.bool<true> : !cir.bool
!ty_in_addr = !cir.struct<struct "in_addr" {!u32i} #cir.record.decl.ast>
#loc531 = loc(fused[#loc28, #loc29])
#loc609 = loc(fused[#loc233, #loc234])
#loc610 = loc(fused[#loc235, #loc236])
#loc615 = loc(fused[#loc254, #loc255])
#loc688 = loc(fused[#loc443, #loc444])
!ty_sockaddr = !cir.struct<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.struct<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc518)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc519)
  cir.func private @bind(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc520)
  cir.func private @listen(!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc521)
  cir.func private @accept(!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc522)
  cir.func private @recv(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc523)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc524)
  cir.func private @close(!s32i) -> !s32i loc(#loc525)
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc526)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc527)
  cir.func private @printIntLine(!s32i) loc(#loc528)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"ERROR: Array index is negative.\00" : !cir.array<!s8i x 32>> : !cir.array<!s8i x 32> {alignment = 1 : i64} loc(#loc23)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc529)
  cir.func internal private @badSink(%arg0: !s32i loc(fused[#loc28, #loc29])) extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc531)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc30)
    cir.scope {
      %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc533)
      %2 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc534)
      %3 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc37)
      %4 = cir.const #cir.int<10> : !s32i loc(#loc38)
      %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc38)
      %6 = cir.const #cir.int<4> : !u64i loc(#loc535)
      %7 = cir.binop(mul, %5, %6) : !u64i loc(#loc536)
      %8 = cir.call @malloc(%7) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc37)
      %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc537)
      cir.store %9, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc534)
      cir.scope {
        %13 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc43)
        %14 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc44)
        %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc44)
        %16 = cir.cmp(eq, %13, %15) : !cir.ptr<!s32i>, !cir.bool loc(#loc539)
        cir.if %16 {
          %17 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc46)
          %18 = cir.const #cir.int<1> : !s32i loc(#loc47)
          %19 = cir.unary(minus, %18) : !s32i, !s32i loc(#loc48)
          cir.call @exit(%19) : (!s32i) -> () extra(#fn_attr) loc(#loc46)
        } loc(#loc540)
      } loc(#loc538)
      cir.scope {
        %13 = cir.const #cir.int<0> : !s32i loc(#loc51)
        cir.store %13, %1 : !s32i, !cir.ptr<!s32i> loc(#loc542)
        cir.for : cond {
          %14 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc53)
          %15 = cir.const #cir.int<10> : !s32i loc(#loc54)
          %16 = cir.cmp(lt, %14, %15) : !s32i, !cir.bool loc(#loc543)
          cir.condition(%16) loc(#loc55)
        } body {
          cir.scope {
            %14 = cir.const #cir.int<0> : !s32i loc(#loc57)
            %15 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc58)
            %16 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc59)
            %17 = cir.ptr_stride(%15 : !cir.ptr<!s32i>, %16 : !s32i), !cir.ptr<!s32i> loc(#loc60)
            cir.store %14, %17 : !s32i, !cir.ptr<!s32i> loc(#loc545)
          } loc(#loc544)
          cir.yield loc(#loc50)
        } step {
          %14 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc61)
          %15 = cir.unary(inc, %14) : !s32i, !s32i loc(#loc62)
          cir.store %15, %1 : !s32i, !cir.ptr<!s32i> loc(#loc546)
          cir.yield loc(#loc541)
        } loc(#loc541)
      } loc(#loc541)
      cir.scope {
        %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc65)
        %14 = cir.const #cir.int<0> : !s32i loc(#loc66)
        %15 = cir.cmp(ge, %13, %14) : !s32i, !cir.bool loc(#loc548)
        cir.if %15 {
          %16 = cir.const #cir.int<1> : !s32i loc(#loc70)
          %17 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc71)
          %18 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc72)
          %19 = cir.ptr_stride(%17 : !cir.ptr<!s32i>, %18 : !s32i), !cir.ptr<!s32i> loc(#loc73)
          cir.store %16, %19 : !s32i, !cir.ptr<!s32i> loc(#loc550)
          cir.scope {
            %20 = cir.const #cir.int<0> : !s32i loc(#loc76)
            cir.store %20, %1 : !s32i, !cir.ptr<!s32i> loc(#loc552)
            cir.for : cond {
              %21 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc78)
              %22 = cir.const #cir.int<10> : !s32i loc(#loc79)
              %23 = cir.cmp(lt, %21, %22) : !s32i, !cir.bool loc(#loc553)
              cir.condition(%23) loc(#loc80)
            } body {
              cir.scope {
                %21 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc82)
                %22 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc83)
                %23 = cir.ptr_stride(%21 : !cir.ptr<!s32i>, %22 : !s32i), !cir.ptr<!s32i> loc(#loc84)
                %24 = cir.load %23 : !cir.ptr<!s32i>, !s32i loc(#loc82)
                cir.call @printIntLine(%24) : (!s32i) -> () loc(#loc85)
              } loc(#loc554)
              cir.yield loc(#loc75)
            } step {
              %21 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc86)
              %22 = cir.unary(inc, %21) : !s32i, !s32i loc(#loc87)
              cir.store %22, %1 : !s32i, !cir.ptr<!s32i> loc(#loc555)
              cir.yield loc(#loc551)
            } loc(#loc551)
          } loc(#loc551)
        } else {
          %16 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc23)
          %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc23)
          cir.call @printLine(%17) : (!cir.ptr<!s8i>) -> () loc(#loc88)
        } loc(#loc549)
      } loc(#loc547)
      %10 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc89)
      %11 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc90)
      %12 = cir.cast(bitcast, %11 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc90)
      cir.call @free(%12) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc89)
    } loc(#loc532)
    cir.return loc(#loc27)
  } loc(#loc530)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc557)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc95)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc96)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc558)
    cir.scope {
      %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc560)
      %5 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc561)
      %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc562)
      %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc563)
      %8 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc564)
      %9 = cir.const #cir.int<1> : !s32i loc(#loc105)
      %10 = cir.unary(minus, %9) : !s32i, !s32i loc(#loc105)
      cir.store %10, %6 : !s32i, !cir.ptr<!s32i> loc(#loc562)
      %11 = cir.const #cir.int<1> : !s32i loc(#loc107)
      %12 = cir.unary(minus, %11) : !s32i, !s32i loc(#loc107)
      cir.store %12, %7 : !s32i, !cir.ptr<!s32i> loc(#loc563)
      cir.scope {
        cir.do {
          %13 = cir.const #cir.int<2> : !s32i loc(#loc112)
          %14 = cir.const #cir.int<1> : !s32i loc(#loc113)
          %15 = cir.const #cir.int<6> : !s32i loc(#loc114)
          %16 = cir.call @socket(%13, %14, %15) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc115)
          cir.store %16, %6 : !s32i, !cir.ptr<!s32i> loc(#loc566)
          cir.scope {
            %58 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc120)
            %59 = cir.const #cir.int<1> : !s32i loc(#loc121)
            %60 = cir.unary(minus, %59) : !s32i, !s32i loc(#loc121)
            %61 = cir.cmp(eq, %58, %60) : !s32i, !cir.bool loc(#loc568)
            cir.if %61 {
              cir.break loc(#loc123)
            } loc(#loc569)
          } loc(#loc567)
          %17 = cir.cast(bitcast, %5 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc570)
          %18 = cir.const #cir.int<0> : !s32i loc(#loc126)
          %19 = cir.const #cir.int<16> : !u64i loc(#loc571)
          cir.libc.memset %19 bytes from %17 set to %18 : !cir.ptr<!void>, !s32i, !u64i loc(#loc572)
          %20 = cir.const #cir.int<2> : !s32i loc(#loc131)
          %21 = cir.cast(integral, %20 : !s32i), !u16i loc(#loc131)
          %22 = cir.get_member %5[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc132)
          cir.store %21, %22 : !u16i, !cir.ptr<!u16i> loc(#loc573)
          %23 = cir.const #cir.int<0> : !s32i loc(#loc134)
          %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc134)
          %25 = cir.get_member %5[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc135)
          %26 = cir.get_member %25[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc136)
          cir.store %24, %26 : !u32i, !cir.ptr<!u32i> loc(#loc574)
          %27 = cir.const #cir.int<27015> : !s32i loc(#loc138)
          %28 = cir.cast(integral, %27 : !s32i), !u16i loc(#loc138)
          %29 = cir.call @htons(%28) : (!u16i) -> !u16i extra(#fn_attr) loc(#loc139)
          %30 = cir.get_member %5[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc140)
          cir.store %29, %30 : !u16i, !cir.ptr<!u16i> loc(#loc575)
          cir.scope {
            %58 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc145)
            %59 = cir.cast(bitcast, %5 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc577)
            %60 = cir.const #cir.int<16> : !u64i loc(#loc578)
            %61 = cir.cast(integral, %60 : !u64i), !u32i loc(#loc578)
            %62 = cir.call @bind(%58, %59, %61) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc150)
            %63 = cir.const #cir.int<1> : !s32i loc(#loc151)
            %64 = cir.unary(minus, %63) : !s32i, !s32i loc(#loc151)
            %65 = cir.cmp(eq, %62, %64) : !s32i, !cir.bool loc(#loc579)
            cir.if %65 {
              cir.break loc(#loc153)
            } loc(#loc580)
          } loc(#loc576)
          cir.scope {
            %58 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc156)
            %59 = cir.const #cir.int<5> : !s32i loc(#loc157)
            %60 = cir.call @listen(%58, %59) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc158)
            %61 = cir.const #cir.int<1> : !s32i loc(#loc159)
            %62 = cir.unary(minus, %61) : !s32i, !s32i loc(#loc159)
            %63 = cir.cmp(eq, %60, %62) : !s32i, !cir.bool loc(#loc582)
            cir.if %63 {
              cir.break loc(#loc161)
            } loc(#loc583)
          } loc(#loc581)
          %31 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc162)
          %32 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc163)
          %33 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc164)
          %34 = cir.call @accept(%31, %32, %33) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc165)
          cir.store %34, %7 : !s32i, !cir.ptr<!s32i> loc(#loc584)
          cir.scope {
            %58 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc170)
            %59 = cir.const #cir.int<1> : !s32i loc(#loc171)
            %60 = cir.unary(minus, %59) : !s32i, !s32i loc(#loc171)
            %61 = cir.cmp(eq, %58, %60) : !s32i, !cir.bool loc(#loc586)
            cir.if %61 {
              cir.break loc(#loc173)
            } loc(#loc587)
          } loc(#loc585)
          %35 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc174)
          %36 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc175)
          %37 = cir.cast(bitcast, %36 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc175)
          %38 = cir.const #cir.int<3> : !s32i loc(#loc176)
          %39 = cir.cast(integral, %38 : !s32i), !u64i loc(#loc176)
          %40 = cir.const #cir.int<4> : !u64i loc(#loc176)
          %41 = cir.binop(mul, %39, %40) : !u64i loc(#loc176)
          %42 = cir.const #cir.int<2> : !s32i loc(#loc176)
          %43 = cir.cast(integral, %42 : !s32i), !u64i loc(#loc176)
          %44 = cir.binop(add, %41, %43) : !u64i loc(#loc176)
          %45 = cir.const #cir.int<1> : !s32i loc(#loc177)
          %46 = cir.cast(integral, %45 : !s32i), !u64i loc(#loc177)
          %47 = cir.binop(sub, %44, %46) : !u64i loc(#loc588)
          %48 = cir.const #cir.int<0> : !s32i loc(#loc178)
          %49 = cir.call @recv(%35, %37, %47, %48) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc179)
          %50 = cir.cast(integral, %49 : !s64i), !s32i loc(#loc179)
          cir.store %50, %4 : !s32i, !cir.ptr<!s32i> loc(#loc589)
          cir.scope {
            %58 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc184)
            %59 = cir.const #cir.int<1> : !s32i loc(#loc185)
            %60 = cir.unary(minus, %59) : !s32i, !s32i loc(#loc185)
            %61 = cir.cmp(eq, %58, %60) : !s32i, !cir.bool loc(#loc591)
            %62 = cir.ternary(%61, true {
              %63 = cir.const #true loc(#loc186)
              cir.yield %63 : !cir.bool loc(#loc186)
            }, false {
              %63 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc187)
              %64 = cir.const #cir.int<0> : !s32i loc(#loc188)
              %65 = cir.cmp(eq, %63, %64) : !s32i, !cir.bool loc(#loc592)
              %66 = cir.ternary(%65, true {
                %67 = cir.const #true loc(#loc186)
                cir.yield %67 : !cir.bool loc(#loc186)
              }, false {
                %67 = cir.const #false loc(#loc186)
                cir.yield %67 : !cir.bool loc(#loc186)
              }) : (!cir.bool) -> !cir.bool loc(#loc186)
              cir.yield %66 : !cir.bool loc(#loc186)
            }) : (!cir.bool) -> !cir.bool loc(#loc186)
            cir.if %62 {
              cir.break loc(#loc190)
            } loc(#loc593)
          } loc(#loc590)
          %51 = cir.const #cir.int<0> : !s32i loc(#loc191)
          %52 = cir.cast(integral, %51 : !s32i), !s8i loc(#loc191)
          %53 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc192)
          %54 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc193)
          %55 = cir.ptr_stride(%54 : !cir.ptr<!s8i>, %53 : !s32i), !cir.ptr<!s8i> loc(#loc193)
          cir.store %52, %55 : !s8i, !cir.ptr<!s8i> loc(#loc594)
          %56 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc194)
          %57 = cir.call @atoi(%56) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc195)
          cir.store %57, %0 : !s32i, !cir.ptr<!s32i> loc(#loc595)
          cir.yield loc(#loc111)
        } while {
          %13 = cir.const #cir.int<0> : !s32i loc(#loc198)
          %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc198)
          cir.condition(%14) loc(#loc198)
        } loc(#loc565)
      } loc(#loc565)
      cir.scope {
        %13 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc201)
        %14 = cir.const #cir.int<1> : !s32i loc(#loc202)
        %15 = cir.unary(minus, %14) : !s32i, !s32i loc(#loc202)
        %16 = cir.cmp(ne, %13, %15) : !s32i, !cir.bool loc(#loc597)
        cir.if %16 {
          %17 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc204)
          %18 = cir.call @close(%17) : (!s32i) -> !s32i loc(#loc205)
        } loc(#loc598)
      } loc(#loc596)
      cir.scope {
        %13 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc208)
        %14 = cir.const #cir.int<1> : !s32i loc(#loc209)
        %15 = cir.unary(minus, %14) : !s32i, !s32i loc(#loc209)
        %16 = cir.cmp(ne, %13, %15) : !s32i, !cir.bool loc(#loc600)
        cir.if %16 {
          %17 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc211)
          %18 = cir.call @close(%17) : (!s32i) -> !s32i loc(#loc212)
        } loc(#loc601)
      } loc(#loc599)
    } loc(#loc559)
    %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc213)
    cir.call @badSink(%3) : (!s32i) -> () loc(#loc214)
    cir.return loc(#loc92)
  } loc(#loc556)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc603)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc217)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc604)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc219)
    cir.return loc(#loc216)
  } loc(#loc602)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc605)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc606)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc607)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc227)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc228)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc229)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc230)
  cir.func @main(%arg0: !s32i loc(fused[#loc233, #loc234]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc235, #loc236])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc609)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc610)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc232)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc237)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc237)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc238)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc239)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc239)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc240)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc227)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc227)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc241)
    %8 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41_good : !cir.ptr<!cir.func<!void ()>> loc(#loc611)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41_good() : () -> () loc(#loc242)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc228)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc228)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc244)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc229)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc229)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc245)
    %13 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc612)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41_bad() : () -> () loc(#loc246)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc230)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc230)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc248)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc249)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc613)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc613)
    cir.return %17 : !s32i loc(#loc613)
  } loc(#loc608)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"ERROR: Array index is out-of-bounds\00" : !cir.array<!s8i x 36>> : !cir.array<!s8i x 36> {alignment = 1 : i64} loc(#loc251)
  cir.func internal private @goodB2GSink(%arg0: !s32i loc(fused[#loc254, #loc255])) extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc615)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc256)
    cir.scope {
      %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc617)
      %2 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc618)
      %3 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc263)
      %4 = cir.const #cir.int<10> : !s32i loc(#loc264)
      %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc264)
      %6 = cir.const #cir.int<4> : !u64i loc(#loc619)
      %7 = cir.binop(mul, %5, %6) : !u64i loc(#loc620)
      %8 = cir.call @malloc(%7) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc263)
      %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc621)
      cir.store %9, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc618)
      cir.scope {
        %13 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc269)
        %14 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc270)
        %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc270)
        %16 = cir.cmp(eq, %13, %15) : !cir.ptr<!s32i>, !cir.bool loc(#loc623)
        cir.if %16 {
          %17 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc272)
          %18 = cir.const #cir.int<1> : !s32i loc(#loc273)
          %19 = cir.unary(minus, %18) : !s32i, !s32i loc(#loc274)
          cir.call @exit(%19) : (!s32i) -> () extra(#fn_attr) loc(#loc272)
        } loc(#loc624)
      } loc(#loc622)
      cir.scope {
        %13 = cir.const #cir.int<0> : !s32i loc(#loc277)
        cir.store %13, %1 : !s32i, !cir.ptr<!s32i> loc(#loc626)
        cir.for : cond {
          %14 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc279)
          %15 = cir.const #cir.int<10> : !s32i loc(#loc280)
          %16 = cir.cmp(lt, %14, %15) : !s32i, !cir.bool loc(#loc627)
          cir.condition(%16) loc(#loc281)
        } body {
          cir.scope {
            %14 = cir.const #cir.int<0> : !s32i loc(#loc283)
            %15 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc284)
            %16 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc285)
            %17 = cir.ptr_stride(%15 : !cir.ptr<!s32i>, %16 : !s32i), !cir.ptr<!s32i> loc(#loc286)
            cir.store %14, %17 : !s32i, !cir.ptr<!s32i> loc(#loc629)
          } loc(#loc628)
          cir.yield loc(#loc276)
        } step {
          %14 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc287)
          %15 = cir.unary(inc, %14) : !s32i, !s32i loc(#loc288)
          cir.store %15, %1 : !s32i, !cir.ptr<!s32i> loc(#loc630)
          cir.yield loc(#loc625)
        } loc(#loc625)
      } loc(#loc625)
      cir.scope {
        %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc291)
        %14 = cir.const #cir.int<0> : !s32i loc(#loc292)
        %15 = cir.cmp(ge, %13, %14) : !s32i, !cir.bool loc(#loc632)
        %16 = cir.ternary(%15, true {
          %17 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc294)
          %18 = cir.const #cir.int<10> : !s32i loc(#loc295)
          %19 = cir.cmp(lt, %17, %18) : !s32i, !cir.bool loc(#loc633)
          %20 = cir.ternary(%19, true {
            %21 = cir.const #true loc(#loc293)
            cir.yield %21 : !cir.bool loc(#loc293)
          }, false {
            %21 = cir.const #false loc(#loc293)
            cir.yield %21 : !cir.bool loc(#loc293)
          }) : (!cir.bool) -> !cir.bool loc(#loc293)
          cir.yield %20 : !cir.bool loc(#loc293)
        }, false {
          %17 = cir.const #false loc(#loc293)
          cir.yield %17 : !cir.bool loc(#loc293)
        }) : (!cir.bool) -> !cir.bool loc(#loc293)
        cir.if %16 {
          %17 = cir.const #cir.int<1> : !s32i loc(#loc300)
          %18 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc301)
          %19 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc302)
          %20 = cir.ptr_stride(%18 : !cir.ptr<!s32i>, %19 : !s32i), !cir.ptr<!s32i> loc(#loc303)
          cir.store %17, %20 : !s32i, !cir.ptr<!s32i> loc(#loc635)
          cir.scope {
            %21 = cir.const #cir.int<0> : !s32i loc(#loc306)
            cir.store %21, %1 : !s32i, !cir.ptr<!s32i> loc(#loc637)
            cir.for : cond {
              %22 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc308)
              %23 = cir.const #cir.int<10> : !s32i loc(#loc309)
              %24 = cir.cmp(lt, %22, %23) : !s32i, !cir.bool loc(#loc638)
              cir.condition(%24) loc(#loc310)
            } body {
              cir.scope {
                %22 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc312)
                %23 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc313)
                %24 = cir.ptr_stride(%22 : !cir.ptr<!s32i>, %23 : !s32i), !cir.ptr<!s32i> loc(#loc314)
                %25 = cir.load %24 : !cir.ptr<!s32i>, !s32i loc(#loc312)
                cir.call @printIntLine(%25) : (!s32i) -> () loc(#loc315)
              } loc(#loc639)
              cir.yield loc(#loc305)
            } step {
              %22 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc316)
              %23 = cir.unary(inc, %22) : !s32i, !s32i loc(#loc317)
              cir.store %23, %1 : !s32i, !cir.ptr<!s32i> loc(#loc640)
              cir.yield loc(#loc636)
            } loc(#loc636)
          } loc(#loc636)
        } else {
          %17 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc251)
          %18 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc251)
          cir.call @printLine(%18) : (!cir.ptr<!s8i>) -> () loc(#loc318)
        } loc(#loc634)
      } loc(#loc631)
      %10 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc319)
      %11 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc320)
      %12 = cir.cast(bitcast, %11 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc320)
      cir.call @free(%12) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc319)
    } loc(#loc616)
    cir.return loc(#loc253)
  } loc(#loc614)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc642)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc325)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc326)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc643)
    cir.scope {
      %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc645)
      %5 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc646)
      %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc647)
      %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc648)
      %8 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc649)
      %9 = cir.const #cir.int<1> : !s32i loc(#loc335)
      %10 = cir.unary(minus, %9) : !s32i, !s32i loc(#loc335)
      cir.store %10, %6 : !s32i, !cir.ptr<!s32i> loc(#loc647)
      %11 = cir.const #cir.int<1> : !s32i loc(#loc337)
      %12 = cir.unary(minus, %11) : !s32i, !s32i loc(#loc337)
      cir.store %12, %7 : !s32i, !cir.ptr<!s32i> loc(#loc648)
      cir.scope {
        cir.do {
          %13 = cir.const #cir.int<2> : !s32i loc(#loc342)
          %14 = cir.const #cir.int<1> : !s32i loc(#loc343)
          %15 = cir.const #cir.int<6> : !s32i loc(#loc344)
          %16 = cir.call @socket(%13, %14, %15) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc345)
          cir.store %16, %6 : !s32i, !cir.ptr<!s32i> loc(#loc651)
          cir.scope {
            %58 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc350)
            %59 = cir.const #cir.int<1> : !s32i loc(#loc351)
            %60 = cir.unary(minus, %59) : !s32i, !s32i loc(#loc351)
            %61 = cir.cmp(eq, %58, %60) : !s32i, !cir.bool loc(#loc653)
            cir.if %61 {
              cir.break loc(#loc353)
            } loc(#loc654)
          } loc(#loc652)
          %17 = cir.cast(bitcast, %5 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc655)
          %18 = cir.const #cir.int<0> : !s32i loc(#loc356)
          %19 = cir.const #cir.int<16> : !u64i loc(#loc656)
          cir.libc.memset %19 bytes from %17 set to %18 : !cir.ptr<!void>, !s32i, !u64i loc(#loc657)
          %20 = cir.const #cir.int<2> : !s32i loc(#loc361)
          %21 = cir.cast(integral, %20 : !s32i), !u16i loc(#loc361)
          %22 = cir.get_member %5[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc132)
          cir.store %21, %22 : !u16i, !cir.ptr<!u16i> loc(#loc658)
          %23 = cir.const #cir.int<0> : !s32i loc(#loc363)
          %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc363)
          %25 = cir.get_member %5[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc135)
          %26 = cir.get_member %25[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc136)
          cir.store %24, %26 : !u32i, !cir.ptr<!u32i> loc(#loc659)
          %27 = cir.const #cir.int<27015> : !s32i loc(#loc365)
          %28 = cir.cast(integral, %27 : !s32i), !u16i loc(#loc365)
          %29 = cir.call @htons(%28) : (!u16i) -> !u16i extra(#fn_attr) loc(#loc366)
          %30 = cir.get_member %5[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc140)
          cir.store %29, %30 : !u16i, !cir.ptr<!u16i> loc(#loc660)
          cir.scope {
            %58 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc371)
            %59 = cir.cast(bitcast, %5 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc662)
            %60 = cir.const #cir.int<16> : !u64i loc(#loc663)
            %61 = cir.cast(integral, %60 : !u64i), !u32i loc(#loc663)
            %62 = cir.call @bind(%58, %59, %61) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc376)
            %63 = cir.const #cir.int<1> : !s32i loc(#loc377)
            %64 = cir.unary(minus, %63) : !s32i, !s32i loc(#loc377)
            %65 = cir.cmp(eq, %62, %64) : !s32i, !cir.bool loc(#loc664)
            cir.if %65 {
              cir.break loc(#loc379)
            } loc(#loc665)
          } loc(#loc661)
          cir.scope {
            %58 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc382)
            %59 = cir.const #cir.int<5> : !s32i loc(#loc383)
            %60 = cir.call @listen(%58, %59) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc384)
            %61 = cir.const #cir.int<1> : !s32i loc(#loc385)
            %62 = cir.unary(minus, %61) : !s32i, !s32i loc(#loc385)
            %63 = cir.cmp(eq, %60, %62) : !s32i, !cir.bool loc(#loc667)
            cir.if %63 {
              cir.break loc(#loc387)
            } loc(#loc668)
          } loc(#loc666)
          %31 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc388)
          %32 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc389)
          %33 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc390)
          %34 = cir.call @accept(%31, %32, %33) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc391)
          cir.store %34, %7 : !s32i, !cir.ptr<!s32i> loc(#loc669)
          cir.scope {
            %58 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc396)
            %59 = cir.const #cir.int<1> : !s32i loc(#loc397)
            %60 = cir.unary(minus, %59) : !s32i, !s32i loc(#loc397)
            %61 = cir.cmp(eq, %58, %60) : !s32i, !cir.bool loc(#loc671)
            cir.if %61 {
              cir.break loc(#loc399)
            } loc(#loc672)
          } loc(#loc670)
          %35 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc400)
          %36 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc401)
          %37 = cir.cast(bitcast, %36 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc401)
          %38 = cir.const #cir.int<3> : !s32i loc(#loc402)
          %39 = cir.cast(integral, %38 : !s32i), !u64i loc(#loc402)
          %40 = cir.const #cir.int<4> : !u64i loc(#loc402)
          %41 = cir.binop(mul, %39, %40) : !u64i loc(#loc402)
          %42 = cir.const #cir.int<2> : !s32i loc(#loc402)
          %43 = cir.cast(integral, %42 : !s32i), !u64i loc(#loc402)
          %44 = cir.binop(add, %41, %43) : !u64i loc(#loc402)
          %45 = cir.const #cir.int<1> : !s32i loc(#loc403)
          %46 = cir.cast(integral, %45 : !s32i), !u64i loc(#loc403)
          %47 = cir.binop(sub, %44, %46) : !u64i loc(#loc673)
          %48 = cir.const #cir.int<0> : !s32i loc(#loc404)
          %49 = cir.call @recv(%35, %37, %47, %48) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc405)
          %50 = cir.cast(integral, %49 : !s64i), !s32i loc(#loc405)
          cir.store %50, %4 : !s32i, !cir.ptr<!s32i> loc(#loc674)
          cir.scope {
            %58 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc410)
            %59 = cir.const #cir.int<1> : !s32i loc(#loc411)
            %60 = cir.unary(minus, %59) : !s32i, !s32i loc(#loc411)
            %61 = cir.cmp(eq, %58, %60) : !s32i, !cir.bool loc(#loc676)
            %62 = cir.ternary(%61, true {
              %63 = cir.const #true loc(#loc412)
              cir.yield %63 : !cir.bool loc(#loc412)
            }, false {
              %63 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc413)
              %64 = cir.const #cir.int<0> : !s32i loc(#loc414)
              %65 = cir.cmp(eq, %63, %64) : !s32i, !cir.bool loc(#loc677)
              %66 = cir.ternary(%65, true {
                %67 = cir.const #true loc(#loc412)
                cir.yield %67 : !cir.bool loc(#loc412)
              }, false {
                %67 = cir.const #false loc(#loc412)
                cir.yield %67 : !cir.bool loc(#loc412)
              }) : (!cir.bool) -> !cir.bool loc(#loc412)
              cir.yield %66 : !cir.bool loc(#loc412)
            }) : (!cir.bool) -> !cir.bool loc(#loc412)
            cir.if %62 {
              cir.break loc(#loc416)
            } loc(#loc678)
          } loc(#loc675)
          %51 = cir.const #cir.int<0> : !s32i loc(#loc417)
          %52 = cir.cast(integral, %51 : !s32i), !s8i loc(#loc417)
          %53 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc418)
          %54 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc419)
          %55 = cir.ptr_stride(%54 : !cir.ptr<!s8i>, %53 : !s32i), !cir.ptr<!s8i> loc(#loc419)
          cir.store %52, %55 : !s8i, !cir.ptr<!s8i> loc(#loc679)
          %56 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc420)
          %57 = cir.call @atoi(%56) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc421)
          cir.store %57, %0 : !s32i, !cir.ptr<!s32i> loc(#loc680)
          cir.yield loc(#loc341)
        } while {
          %13 = cir.const #cir.int<0> : !s32i loc(#loc424)
          %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc424)
          cir.condition(%14) loc(#loc424)
        } loc(#loc650)
      } loc(#loc650)
      cir.scope {
        %13 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc427)
        %14 = cir.const #cir.int<1> : !s32i loc(#loc428)
        %15 = cir.unary(minus, %14) : !s32i, !s32i loc(#loc428)
        %16 = cir.cmp(ne, %13, %15) : !s32i, !cir.bool loc(#loc682)
        cir.if %16 {
          %17 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc430)
          %18 = cir.call @close(%17) : (!s32i) -> !s32i loc(#loc431)
        } loc(#loc683)
      } loc(#loc681)
      cir.scope {
        %13 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc434)
        %14 = cir.const #cir.int<1> : !s32i loc(#loc435)
        %15 = cir.unary(minus, %14) : !s32i, !s32i loc(#loc435)
        %16 = cir.cmp(ne, %13, %15) : !s32i, !cir.bool loc(#loc685)
        cir.if %16 {
          %17 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc437)
          %18 = cir.call @close(%17) : (!s32i) -> !s32i loc(#loc438)
        } loc(#loc686)
      } loc(#loc684)
    } loc(#loc644)
    %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc439)
    cir.call @goodB2GSink(%3) : (!s32i) -> () loc(#loc440)
    cir.return loc(#loc322)
  } loc(#loc641)
  cir.func internal private @goodG2BSink(%arg0: !s32i loc(fused[#loc443, #loc444])) extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc688)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc445)
    cir.scope {
      %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc690)
      %2 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc691)
      %3 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc452)
      %4 = cir.const #cir.int<10> : !s32i loc(#loc453)
      %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc453)
      %6 = cir.const #cir.int<4> : !u64i loc(#loc692)
      %7 = cir.binop(mul, %5, %6) : !u64i loc(#loc693)
      %8 = cir.call @malloc(%7) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc452)
      %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc694)
      cir.store %9, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc691)
      cir.scope {
        %13 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc458)
        %14 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc459)
        %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc459)
        %16 = cir.cmp(eq, %13, %15) : !cir.ptr<!s32i>, !cir.bool loc(#loc696)
        cir.if %16 {
          %17 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc461)
          %18 = cir.const #cir.int<1> : !s32i loc(#loc462)
          %19 = cir.unary(minus, %18) : !s32i, !s32i loc(#loc463)
          cir.call @exit(%19) : (!s32i) -> () extra(#fn_attr) loc(#loc461)
        } loc(#loc697)
      } loc(#loc695)
      cir.scope {
        %13 = cir.const #cir.int<0> : !s32i loc(#loc466)
        cir.store %13, %1 : !s32i, !cir.ptr<!s32i> loc(#loc699)
        cir.for : cond {
          %14 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc468)
          %15 = cir.const #cir.int<10> : !s32i loc(#loc469)
          %16 = cir.cmp(lt, %14, %15) : !s32i, !cir.bool loc(#loc700)
          cir.condition(%16) loc(#loc470)
        } body {
          cir.scope {
            %14 = cir.const #cir.int<0> : !s32i loc(#loc472)
            %15 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc473)
            %16 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc474)
            %17 = cir.ptr_stride(%15 : !cir.ptr<!s32i>, %16 : !s32i), !cir.ptr<!s32i> loc(#loc475)
            cir.store %14, %17 : !s32i, !cir.ptr<!s32i> loc(#loc702)
          } loc(#loc701)
          cir.yield loc(#loc465)
        } step {
          %14 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc476)
          %15 = cir.unary(inc, %14) : !s32i, !s32i loc(#loc477)
          cir.store %15, %1 : !s32i, !cir.ptr<!s32i> loc(#loc703)
          cir.yield loc(#loc698)
        } loc(#loc698)
      } loc(#loc698)
      cir.scope {
        %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc480)
        %14 = cir.const #cir.int<0> : !s32i loc(#loc481)
        %15 = cir.cmp(ge, %13, %14) : !s32i, !cir.bool loc(#loc705)
        cir.if %15 {
          %16 = cir.const #cir.int<1> : !s32i loc(#loc485)
          %17 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc486)
          %18 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc487)
          %19 = cir.ptr_stride(%17 : !cir.ptr<!s32i>, %18 : !s32i), !cir.ptr<!s32i> loc(#loc488)
          cir.store %16, %19 : !s32i, !cir.ptr<!s32i> loc(#loc707)
          cir.scope {
            %20 = cir.const #cir.int<0> : !s32i loc(#loc491)
            cir.store %20, %1 : !s32i, !cir.ptr<!s32i> loc(#loc709)
            cir.for : cond {
              %21 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc493)
              %22 = cir.const #cir.int<10> : !s32i loc(#loc494)
              %23 = cir.cmp(lt, %21, %22) : !s32i, !cir.bool loc(#loc710)
              cir.condition(%23) loc(#loc495)
            } body {
              cir.scope {
                %21 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc497)
                %22 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc498)
                %23 = cir.ptr_stride(%21 : !cir.ptr<!s32i>, %22 : !s32i), !cir.ptr<!s32i> loc(#loc499)
                %24 = cir.load %23 : !cir.ptr<!s32i>, !s32i loc(#loc497)
                cir.call @printIntLine(%24) : (!s32i) -> () loc(#loc500)
              } loc(#loc711)
              cir.yield loc(#loc490)
            } step {
              %21 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc501)
              %22 = cir.unary(inc, %21) : !s32i, !s32i loc(#loc502)
              cir.store %22, %1 : !s32i, !cir.ptr<!s32i> loc(#loc712)
              cir.yield loc(#loc708)
            } loc(#loc708)
          } loc(#loc708)
        } else {
          %16 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc503)
          %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc503)
          cir.call @printLine(%17) : (!cir.ptr<!s8i>) -> () loc(#loc504)
        } loc(#loc706)
      } loc(#loc704)
      %10 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc505)
      %11 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc506)
      %12 = cir.cast(bitcast, %11 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc506)
      cir.call @free(%12) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc505)
    } loc(#loc689)
    cir.return loc(#loc442)
  } loc(#loc687)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc714)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc511)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc512)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc715)
    %3 = cir.const #cir.int<7> : !s32i loc(#loc514)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc716)
    %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc516)
    cir.call @goodG2BSink(%4) : (!s32i) -> () loc(#loc517)
    cir.return loc(#loc508)
  } loc(#loc713)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":0:0)
#loc1 = loc("/usr/include/sys/socket.h":102:1)
#loc2 = loc("/usr/include/sys/socket.h":102:62)
#loc3 = loc("/usr/include/netinet/in.h":404:1)
#loc4 = loc("/usr/include/netinet/in.h":405:40)
#loc5 = loc("/usr/include/sys/socket.h":112:1)
#loc6 = loc("/usr/include/sys/socket.h":113:6)
#loc7 = loc("/usr/include/sys/socket.h":296:1)
#loc8 = loc("/usr/include/sys/socket.h":296:39)
#loc9 = loc("/usr/include/sys/socket.h":306:1)
#loc10 = loc("/usr/include/sys/socket.h":307:38)
#loc11 = loc("/usr/include/sys/socket.h":145:1)
#loc12 = loc("/usr/include/sys/socket.h":145:68)
#loc13 = loc("/usr/include/stdlib.h":105:1)
#loc14 = loc("/usr/include/stdlib.h":106:33)
#loc15 = loc("/usr/include/unistd.h":358:1)
#loc16 = loc("/usr/include/unistd.h":358:27)
#loc17 = loc("/usr/include/stdlib.h":672:1)
#loc18 = loc("/usr/include/stdlib.h":672:45)
#loc19 = loc("/usr/include/stdlib.h":756:1)
#loc20 = loc("/usr/include/stdlib.h":756:70)
#loc21 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc22 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":68:23)
#loc24 = loc("/usr/include/stdlib.h":687:1)
#loc25 = loc("/usr/include/stdlib.h":687:32)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":44:1)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":72:1)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":45:1)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":46:5)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":71:5)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":47:9)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":47:13)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":48:9)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":48:54)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":48:31)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":48:38)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":48:43)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":48:53)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":49:9)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":49:39)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":49:13)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":49:23)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":49:29)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":49:30)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":49:36)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":49:35)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":51:9)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":54:9)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":51:18)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":51:14)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":51:21)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":51:25)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":51:23)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":52:9)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":53:25)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":53:13)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":53:20)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":53:21)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":51:30)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":51:29)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":57:9)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":69:9)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":57:13)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":57:21)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":58:9)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":65:9)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":67:9)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":59:28)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":59:13)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":59:20)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":59:24)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":61:13)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":64:13)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":61:21)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":61:17)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":61:24)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":61:28)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":61:26)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":62:13)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":63:30)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":63:37)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":63:38)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":63:17)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":61:33)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":61:32)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":68:13)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":70:9)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":70:14)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":74:1)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":149:1)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":76:5)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":76:9)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":78:13)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":78:12)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":78:5)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":79:5)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":147:5)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":84:9)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":84:13)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":85:9)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":85:28)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":86:9)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":86:31)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":87:9)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":87:31)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":88:9)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":88:41)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":89:9)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":132:17)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":99:35)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":99:44)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":99:57)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":99:28)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":99:13)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":99:68)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":100:13)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":103:13)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":100:17)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":100:33)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":101:13)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":102:17)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":104:20)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":104:21)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":104:30)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":104:33)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":104:47)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":104:13)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":104:48)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":105:34)
#loc132 = loc("/usr/include/netinet/in.h":249:5)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":105:13)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":106:39)
#loc135 = loc("/usr/include/netinet/in.h":251:20)
#loc136 = loc("/usr/include/netinet/in.h":33:15)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":106:13)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":107:38)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":107:32)
#loc140 = loc("/usr/include/netinet/in.h":250:15)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":107:13)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":107:46)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":108:13)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":111:13)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":108:22)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":108:54)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":108:55)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":108:64)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":108:78)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":108:17)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":108:84)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":109:13)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":110:17)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":112:13)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":115:13)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":112:24)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":112:38)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":112:17)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":112:57)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":113:13)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":114:17)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":116:35)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":116:49)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":116:55)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":116:28)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":116:13)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":116:59)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":117:13)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":120:13)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":117:17)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":117:33)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":118:13)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":119:17)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":122:31)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":122:45)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":122:58)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":122:76)
#loc178 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":122:79)
#loc179 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":122:26)
#loc180 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":122:13)
#loc181 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":122:80)
#loc182 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":123:13)
#loc183 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":126:13)
#loc184 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":123:17)
#loc185 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":123:31)
#loc186 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":123:44)
#loc187 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":123:47)
#loc188 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":123:61)
#loc189 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":124:13)
#loc190 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":125:17)
#loc191 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":128:39)
#loc192 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":128:25)
#loc193 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":128:13)
#loc194 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":130:25)
#loc195 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":130:20)
#loc196 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":130:13)
#loc197 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":130:36)
#loc198 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":132:16)
#loc199 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":133:9)
#loc200 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":136:9)
#loc201 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":133:13)
#loc202 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":133:29)
#loc203 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":134:9)
#loc204 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":135:26)
#loc205 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":135:13)
#loc206 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":137:9)
#loc207 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":140:9)
#loc208 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":137:13)
#loc209 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":137:29)
#loc210 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":138:9)
#loc211 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":139:26)
#loc212 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":139:13)
#loc213 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":148:13)
#loc214 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":148:5)
#loc215 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":304:1)
#loc216 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":308:1)
#loc217 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":306:5)
#loc218 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":306:13)
#loc219 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":307:5)
#loc220 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":307:13)
#loc221 = loc("/usr/include/stdlib.h":575:1)
#loc222 = loc("/usr/include/stdlib.h":575:41)
#loc223 = loc("/usr/include/time.h":76:1)
#loc224 = loc("/usr/include/time.h":76:38)
#loc225 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc226 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc227 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":324:15)
#loc228 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":326:15)
#loc229 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":329:15)
#loc230 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":331:15)
#loc231 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":319:1)
#loc232 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":334:1)
#loc237 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":320:1)
#loc238 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":322:27)
#loc239 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":322:22)
#loc240 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":322:5)
#loc241 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":324:5)
#loc242 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":325:5)
#loc243 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":325:71)
#loc244 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":326:5)
#loc245 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":329:5)
#loc246 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":330:5)
#loc247 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":330:70)
#loc248 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":331:5)
#loc249 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":333:12)
#loc250 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":333:5)
#loc251 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":221:23)
#loc252 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":198:1)
#loc253 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":225:1)
#loc256 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":199:1)
#loc257 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":200:5)
#loc258 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":224:5)
#loc259 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":201:9)
#loc260 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":201:13)
#loc261 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":202:9)
#loc262 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":202:54)
#loc263 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":202:31)
#loc264 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":202:38)
#loc265 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":202:43)
#loc266 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":202:53)
#loc267 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":203:9)
#loc268 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":203:39)
#loc269 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":203:13)
#loc270 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":203:23)
#loc271 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":203:29)
#loc272 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":203:30)
#loc273 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":203:36)
#loc274 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":203:35)
#loc275 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":205:9)
#loc276 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":208:9)
#loc277 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":205:18)
#loc278 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":205:14)
#loc279 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":205:21)
#loc280 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":205:25)
#loc281 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":205:23)
#loc282 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":206:9)
#loc283 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":207:25)
#loc284 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":207:13)
#loc285 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":207:20)
#loc286 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":207:21)
#loc287 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":205:30)
#loc288 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":205:29)
#loc289 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":210:9)
#loc290 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":222:9)
#loc291 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":210:13)
#loc292 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":210:21)
#loc293 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":210:23)
#loc294 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":210:26)
#loc295 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":210:34)
#loc296 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":210:36)
#loc297 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":211:9)
#loc298 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":218:9)
#loc299 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":220:9)
#loc300 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":212:28)
#loc301 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":212:13)
#loc302 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":212:20)
#loc303 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":212:24)
#loc304 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":214:13)
#loc305 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":217:13)
#loc306 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":214:21)
#loc307 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":214:17)
#loc308 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":214:24)
#loc309 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":214:28)
#loc310 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":214:26)
#loc311 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":215:13)
#loc312 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":216:30)
#loc313 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":216:37)
#loc314 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":216:38)
#loc315 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":216:17)
#loc316 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":214:33)
#loc317 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":214:32)
#loc318 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":221:13)
#loc319 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":223:9)
#loc320 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":223:14)
#loc321 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":227:1)
#loc322 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":302:1)
#loc323 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":229:5)
#loc324 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":229:9)
#loc325 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":231:13)
#loc326 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":231:12)
#loc327 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":231:5)
#loc328 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":232:5)
#loc329 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":300:5)
#loc330 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":237:9)
#loc331 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":237:13)
#loc332 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":238:9)
#loc333 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":238:28)
#loc334 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":239:9)
#loc335 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":239:31)
#loc336 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":240:9)
#loc337 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":240:31)
#loc338 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":241:9)
#loc339 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":241:41)
#loc340 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":242:9)
#loc341 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":285:17)
#loc342 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":252:35)
#loc343 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":252:44)
#loc344 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":252:57)
#loc345 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":252:28)
#loc346 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":252:13)
#loc347 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":252:68)
#loc348 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":253:13)
#loc349 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":256:13)
#loc350 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":253:17)
#loc351 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":253:33)
#loc352 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":254:13)
#loc353 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":255:17)
#loc354 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":257:20)
#loc355 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":257:21)
#loc356 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":257:30)
#loc357 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":257:33)
#loc358 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":257:47)
#loc359 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":257:13)
#loc360 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":257:48)
#loc361 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":258:34)
#loc362 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":258:13)
#loc363 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":259:39)
#loc364 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":259:13)
#loc365 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":260:38)
#loc366 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":260:32)
#loc367 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":260:13)
#loc368 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":260:46)
#loc369 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":261:13)
#loc370 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":264:13)
#loc371 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":261:22)
#loc372 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":261:54)
#loc373 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":261:55)
#loc374 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":261:64)
#loc375 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":261:78)
#loc376 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":261:17)
#loc377 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":261:84)
#loc378 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":262:13)
#loc379 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":263:17)
#loc380 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":265:13)
#loc381 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":268:13)
#loc382 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":265:24)
#loc383 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":265:38)
#loc384 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":265:17)
#loc385 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":265:57)
#loc386 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":266:13)
#loc387 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":267:17)
#loc388 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":269:35)
#loc389 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":269:49)
#loc390 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":269:55)
#loc391 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":269:28)
#loc392 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":269:13)
#loc393 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":269:59)
#loc394 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":270:13)
#loc395 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":273:13)
#loc396 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":270:17)
#loc397 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":270:33)
#loc398 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":271:13)
#loc399 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":272:17)
#loc400 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":275:31)
#loc401 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":275:45)
#loc402 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":275:58)
#loc403 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":275:76)
#loc404 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":275:79)
#loc405 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":275:26)
#loc406 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":275:13)
#loc407 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":275:80)
#loc408 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":276:13)
#loc409 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":279:13)
#loc410 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":276:17)
#loc411 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":276:31)
#loc412 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":276:44)
#loc413 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":276:47)
#loc414 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":276:61)
#loc415 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":277:13)
#loc416 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":278:17)
#loc417 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":281:39)
#loc418 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":281:25)
#loc419 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":281:13)
#loc420 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":283:25)
#loc421 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":283:20)
#loc422 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":283:13)
#loc423 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":283:36)
#loc424 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":285:16)
#loc425 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":286:9)
#loc426 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":289:9)
#loc427 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":286:13)
#loc428 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":286:29)
#loc429 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":287:9)
#loc430 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":288:26)
#loc431 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":288:13)
#loc432 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":290:9)
#loc433 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":293:9)
#loc434 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":290:13)
#loc435 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":290:29)
#loc436 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":291:9)
#loc437 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":292:26)
#loc438 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":292:13)
#loc439 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":301:17)
#loc440 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":301:5)
#loc441 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":156:1)
#loc442 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":184:1)
#loc445 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":157:1)
#loc446 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":158:5)
#loc447 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":183:5)
#loc448 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":159:9)
#loc449 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":159:13)
#loc450 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":160:9)
#loc451 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":160:54)
#loc452 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":160:31)
#loc453 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":160:38)
#loc454 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":160:43)
#loc455 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":160:53)
#loc456 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":161:9)
#loc457 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":161:39)
#loc458 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":161:13)
#loc459 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":161:23)
#loc460 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":161:29)
#loc461 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":161:30)
#loc462 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":161:36)
#loc463 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":161:35)
#loc464 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":163:9)
#loc465 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":166:9)
#loc466 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":163:18)
#loc467 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":163:14)
#loc468 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":163:21)
#loc469 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":163:25)
#loc470 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":163:23)
#loc471 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":164:9)
#loc472 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":165:25)
#loc473 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":165:13)
#loc474 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":165:20)
#loc475 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":165:21)
#loc476 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":163:30)
#loc477 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":163:29)
#loc478 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":169:9)
#loc479 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":181:9)
#loc480 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":169:13)
#loc481 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":169:21)
#loc482 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":170:9)
#loc483 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":177:9)
#loc484 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":179:9)
#loc485 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":171:28)
#loc486 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":171:13)
#loc487 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":171:20)
#loc488 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":171:24)
#loc489 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":173:13)
#loc490 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":176:13)
#loc491 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":173:21)
#loc492 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":173:17)
#loc493 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":173:24)
#loc494 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":173:28)
#loc495 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":173:26)
#loc496 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":174:13)
#loc497 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":175:30)
#loc498 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":175:37)
#loc499 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":175:38)
#loc500 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":175:17)
#loc501 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":173:33)
#loc502 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":173:32)
#loc503 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":180:23)
#loc504 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":180:13)
#loc505 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":182:9)
#loc506 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":182:14)
#loc507 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":186:1)
#loc508 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":195:1)
#loc509 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":188:5)
#loc510 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":188:9)
#loc511 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":190:13)
#loc512 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":190:12)
#loc513 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":190:5)
#loc514 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":193:12)
#loc515 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":193:5)
#loc516 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":194:17)
#loc517 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c":194:5)
#loc518 = loc(fused[#loc1, #loc2])
#loc519 = loc(fused[#loc3, #loc4])
#loc520 = loc(fused[#loc5, #loc6])
#loc521 = loc(fused[#loc7, #loc8])
#loc522 = loc(fused[#loc9, #loc10])
#loc523 = loc(fused[#loc11, #loc12])
#loc524 = loc(fused[#loc13, #loc14])
#loc525 = loc(fused[#loc15, #loc16])
#loc526 = loc(fused[#loc17, #loc18])
#loc527 = loc(fused[#loc19, #loc20])
#loc528 = loc(fused[#loc21, #loc22])
#loc529 = loc(fused[#loc24, #loc25])
#loc530 = loc(fused[#loc26, #loc27])
#loc532 = loc(fused[#loc31, #loc32])
#loc533 = loc(fused[#loc33, #loc34])
#loc534 = loc(fused[#loc35, #loc36])
#loc535 = loc(fused[#loc39, #loc40])
#loc536 = loc(fused[#loc38, #loc40])
#loc537 = loc(fused[#loc37, #loc36])
#loc538 = loc(fused[#loc41, #loc42])
#loc539 = loc(fused[#loc43, #loc44])
#loc540 = loc(fused[#loc45, #loc42])
#loc541 = loc(fused[#loc49, #loc50])
#loc542 = loc(fused[#loc52, #loc51])
#loc543 = loc(fused[#loc53, #loc54])
#loc544 = loc(fused[#loc56, #loc50])
#loc545 = loc(fused[#loc58, #loc57])
#loc546 = loc(fused[#loc62, #loc61])
#loc547 = loc(fused[#loc63, #loc64])
#loc548 = loc(fused[#loc65, #loc66])
#loc549 = loc(fused[#loc67, #loc68, #loc69, #loc64])
#loc550 = loc(fused[#loc71, #loc70])
#loc551 = loc(fused[#loc74, #loc75])
#loc552 = loc(fused[#loc77, #loc76])
#loc553 = loc(fused[#loc78, #loc79])
#loc554 = loc(fused[#loc81, #loc75])
#loc555 = loc(fused[#loc87, #loc86])
#loc556 = loc(fused[#loc91, #loc92])
#loc557 = loc(fused[#loc93, #loc94])
#loc558 = loc(fused[#loc97, #loc95])
#loc559 = loc(fused[#loc98, #loc99])
#loc560 = loc(fused[#loc100, #loc101])
#loc561 = loc(fused[#loc102, #loc103])
#loc562 = loc(fused[#loc104, #loc105])
#loc563 = loc(fused[#loc106, #loc107])
#loc564 = loc(fused[#loc108, #loc109])
#loc565 = loc(fused[#loc110, #loc111])
#loc566 = loc(fused[#loc116, #loc117])
#loc567 = loc(fused[#loc118, #loc119])
#loc568 = loc(fused[#loc120, #loc121])
#loc569 = loc(fused[#loc122, #loc119])
#loc570 = loc(fused[#loc124, #loc125])
#loc571 = loc(fused[#loc127, #loc128])
#loc572 = loc(fused[#loc129, #loc130])
#loc573 = loc(fused[#loc133, #loc131])
#loc574 = loc(fused[#loc137, #loc134])
#loc575 = loc(fused[#loc141, #loc142])
#loc576 = loc(fused[#loc143, #loc144])
#loc577 = loc(fused[#loc146, #loc147])
#loc578 = loc(fused[#loc148, #loc149])
#loc579 = loc(fused[#loc150, #loc151])
#loc580 = loc(fused[#loc152, #loc144])
#loc581 = loc(fused[#loc154, #loc155])
#loc582 = loc(fused[#loc158, #loc159])
#loc583 = loc(fused[#loc160, #loc155])
#loc584 = loc(fused[#loc166, #loc167])
#loc585 = loc(fused[#loc168, #loc169])
#loc586 = loc(fused[#loc170, #loc171])
#loc587 = loc(fused[#loc172, #loc169])
#loc588 = loc(fused[#loc176, #loc177])
#loc589 = loc(fused[#loc180, #loc181])
#loc590 = loc(fused[#loc182, #loc183])
#loc591 = loc(fused[#loc184, #loc185])
#loc592 = loc(fused[#loc187, #loc188])
#loc593 = loc(fused[#loc189, #loc183])
#loc594 = loc(fused[#loc193, #loc191])
#loc595 = loc(fused[#loc196, #loc197])
#loc596 = loc(fused[#loc199, #loc200])
#loc597 = loc(fused[#loc201, #loc202])
#loc598 = loc(fused[#loc203, #loc200])
#loc599 = loc(fused[#loc206, #loc207])
#loc600 = loc(fused[#loc208, #loc209])
#loc601 = loc(fused[#loc210, #loc207])
#loc602 = loc(fused[#loc215, #loc216])
#loc603 = loc(fused[#loc217, #loc218])
#loc604 = loc(fused[#loc219, #loc220])
#loc605 = loc(fused[#loc221, #loc222])
#loc606 = loc(fused[#loc223, #loc224])
#loc607 = loc(fused[#loc225, #loc226])
#loc608 = loc(fused[#loc231, #loc232])
#loc611 = loc(fused[#loc242, #loc243])
#loc612 = loc(fused[#loc246, #loc247])
#loc613 = loc(fused[#loc250, #loc249])
#loc614 = loc(fused[#loc252, #loc253])
#loc616 = loc(fused[#loc257, #loc258])
#loc617 = loc(fused[#loc259, #loc260])
#loc618 = loc(fused[#loc261, #loc262])
#loc619 = loc(fused[#loc265, #loc266])
#loc620 = loc(fused[#loc264, #loc266])
#loc621 = loc(fused[#loc263, #loc262])
#loc622 = loc(fused[#loc267, #loc268])
#loc623 = loc(fused[#loc269, #loc270])
#loc624 = loc(fused[#loc271, #loc268])
#loc625 = loc(fused[#loc275, #loc276])
#loc626 = loc(fused[#loc278, #loc277])
#loc627 = loc(fused[#loc279, #loc280])
#loc628 = loc(fused[#loc282, #loc276])
#loc629 = loc(fused[#loc284, #loc283])
#loc630 = loc(fused[#loc288, #loc287])
#loc631 = loc(fused[#loc289, #loc290])
#loc632 = loc(fused[#loc291, #loc292])
#loc633 = loc(fused[#loc294, #loc296])
#loc634 = loc(fused[#loc297, #loc298, #loc299, #loc290])
#loc635 = loc(fused[#loc301, #loc300])
#loc636 = loc(fused[#loc304, #loc305])
#loc637 = loc(fused[#loc307, #loc306])
#loc638 = loc(fused[#loc308, #loc309])
#loc639 = loc(fused[#loc311, #loc305])
#loc640 = loc(fused[#loc317, #loc316])
#loc641 = loc(fused[#loc321, #loc322])
#loc642 = loc(fused[#loc323, #loc324])
#loc643 = loc(fused[#loc327, #loc325])
#loc644 = loc(fused[#loc328, #loc329])
#loc645 = loc(fused[#loc330, #loc331])
#loc646 = loc(fused[#loc332, #loc333])
#loc647 = loc(fused[#loc334, #loc335])
#loc648 = loc(fused[#loc336, #loc337])
#loc649 = loc(fused[#loc338, #loc339])
#loc650 = loc(fused[#loc340, #loc341])
#loc651 = loc(fused[#loc346, #loc347])
#loc652 = loc(fused[#loc348, #loc349])
#loc653 = loc(fused[#loc350, #loc351])
#loc654 = loc(fused[#loc352, #loc349])
#loc655 = loc(fused[#loc354, #loc355])
#loc656 = loc(fused[#loc357, #loc358])
#loc657 = loc(fused[#loc359, #loc360])
#loc658 = loc(fused[#loc362, #loc361])
#loc659 = loc(fused[#loc364, #loc363])
#loc660 = loc(fused[#loc367, #loc368])
#loc661 = loc(fused[#loc369, #loc370])
#loc662 = loc(fused[#loc372, #loc373])
#loc663 = loc(fused[#loc374, #loc375])
#loc664 = loc(fused[#loc376, #loc377])
#loc665 = loc(fused[#loc378, #loc370])
#loc666 = loc(fused[#loc380, #loc381])
#loc667 = loc(fused[#loc384, #loc385])
#loc668 = loc(fused[#loc386, #loc381])
#loc669 = loc(fused[#loc392, #loc393])
#loc670 = loc(fused[#loc394, #loc395])
#loc671 = loc(fused[#loc396, #loc397])
#loc672 = loc(fused[#loc398, #loc395])
#loc673 = loc(fused[#loc402, #loc403])
#loc674 = loc(fused[#loc406, #loc407])
#loc675 = loc(fused[#loc408, #loc409])
#loc676 = loc(fused[#loc410, #loc411])
#loc677 = loc(fused[#loc413, #loc414])
#loc678 = loc(fused[#loc415, #loc409])
#loc679 = loc(fused[#loc419, #loc417])
#loc680 = loc(fused[#loc422, #loc423])
#loc681 = loc(fused[#loc425, #loc426])
#loc682 = loc(fused[#loc427, #loc428])
#loc683 = loc(fused[#loc429, #loc426])
#loc684 = loc(fused[#loc432, #loc433])
#loc685 = loc(fused[#loc434, #loc435])
#loc686 = loc(fused[#loc436, #loc433])
#loc687 = loc(fused[#loc441, #loc442])
#loc689 = loc(fused[#loc446, #loc447])
#loc690 = loc(fused[#loc448, #loc449])
#loc691 = loc(fused[#loc450, #loc451])
#loc692 = loc(fused[#loc454, #loc455])
#loc693 = loc(fused[#loc453, #loc455])
#loc694 = loc(fused[#loc452, #loc451])
#loc695 = loc(fused[#loc456, #loc457])
#loc696 = loc(fused[#loc458, #loc459])
#loc697 = loc(fused[#loc460, #loc457])
#loc698 = loc(fused[#loc464, #loc465])
#loc699 = loc(fused[#loc467, #loc466])
#loc700 = loc(fused[#loc468, #loc469])
#loc701 = loc(fused[#loc471, #loc465])
#loc702 = loc(fused[#loc473, #loc472])
#loc703 = loc(fused[#loc477, #loc476])
#loc704 = loc(fused[#loc478, #loc479])
#loc705 = loc(fused[#loc480, #loc481])
#loc706 = loc(fused[#loc482, #loc483, #loc484, #loc479])
#loc707 = loc(fused[#loc486, #loc485])
#loc708 = loc(fused[#loc489, #loc490])
#loc709 = loc(fused[#loc492, #loc491])
#loc710 = loc(fused[#loc493, #loc494])
#loc711 = loc(fused[#loc496, #loc490])
#loc712 = loc(fused[#loc502, #loc501])
#loc713 = loc(fused[#loc507, #loc508])
#loc714 = loc(fused[#loc509, #loc510])
#loc715 = loc(fused[#loc513, #loc511])
#loc716 = loc(fused[#loc515, #loc514])
