!s32i = !cir.int<s, 32>
!u32i = !cir.int<u, 32>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE196_Unsigned_to_Signed_Conversion_Error/CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc76)
  cir.func private @printIntLine(!s32i) loc(#loc77)
  cir.func no_proto @CWE196_Unsigned_to_Signed_Conversion_Error__basic_16_bad() extra(#fn_attr1) {
    cir.scope {
      cir.while {
        %0 = cir.const #cir.int<1> : !s32i loc(#loc9)
        %1 = cir.cast(int_to_bool, %0 : !s32i), !cir.bool loc(#loc9)
        cir.condition(%1) loc(#loc9)
      } do {
        cir.scope {
          cir.scope {
            %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["intUnsigned"] {alignment = 4 : i64} loc(#loc82)
            %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["intSigned"] {alignment = 4 : i64} loc(#loc83)
            %2 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
            %3 = cir.cast(integral, %2 : !s32i), !u32i loc(#loc17)
            cir.store %3, %0 : !u32i, !cir.ptr<!u32i> loc(#loc84)
            cir.scope {
              %7 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc22)
              %8 = cir.const #cir.int<2> : !s32i loc(#loc23)
              %9 = cir.binop(rem, %7, %8) : !s32i loc(#loc86)
              %10 = cir.const #cir.int<0> : !s32i loc(#loc24)
              %11 = cir.cmp(eq, %9, %10) : !s32i, !cir.bool loc(#loc87)
              cir.if %11 {
                %12 = cir.const #cir.int<2147483647> : !s32i loc(#loc26)
                %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc26)
                %14 = cir.const #cir.int<2> : !u32i loc(#loc26)
                %15 = cir.binop(mul, %13, %14) : !u32i loc(#loc26)
                %16 = cir.const #cir.int<1> : !u32i loc(#loc26)
                %17 = cir.binop(add, %15, %16) : !u32i loc(#loc26)
                %18 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc27)
                %19 = cir.binop(sub, %17, %18) : !u32i loc(#loc89)
                cir.store %19, %0 : !u32i, !cir.ptr<!u32i> loc(#loc90)
              } loc(#loc88)
            } loc(#loc85)
            %4 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc29)
            %5 = cir.cast(integral, %4 : !u32i), !s32i loc(#loc29)
            cir.store %5, %1 : !s32i, !cir.ptr<!s32i> loc(#loc91)
            %6 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc31)
            cir.call @printIntLine(%6) : (!s32i) -> () loc(#loc32)
          } loc(#loc81)
          cir.break loc(#loc33)
        } loc(#loc80)
        cir.yield loc(#loc8)
      } loc(#loc79)
    } loc(#loc79)
    cir.return loc(#loc6)
  } loc(#loc78)
  cir.func no_proto @CWE196_Unsigned_to_Signed_Conversion_Error__basic_16_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<()>> loc(#loc93)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc36)
    cir.return loc(#loc35)
  } loc(#loc92)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc94)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    cir.scope {
      cir.while {
        %0 = cir.const #cir.int<1> : !s32i loc(#loc44)
        %1 = cir.cast(int_to_bool, %0 : !s32i), !cir.bool loc(#loc44)
        cir.condition(%1) loc(#loc44)
      } do {
        cir.scope {
          cir.scope {
            %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["intUnsigned"] {alignment = 4 : i64} loc(#loc99)
            %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["intSigned"] {alignment = 4 : i64} loc(#loc100)
            %2 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc52)
            %3 = cir.cast(integral, %2 : !s32i), !u32i loc(#loc52)
            cir.store %3, %0 : !u32i, !cir.ptr<!u32i> loc(#loc101)
            cir.scope {
              %7 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc57)
              %8 = cir.const #cir.int<2> : !s32i loc(#loc58)
              %9 = cir.binop(rem, %7, %8) : !s32i loc(#loc103)
              %10 = cir.const #cir.int<0> : !s32i loc(#loc59)
              %11 = cir.cmp(eq, %9, %10) : !s32i, !cir.bool loc(#loc104)
              cir.if %11 {
                %12 = cir.const #cir.int<2147483647> : !s32i loc(#loc61)
                %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc61)
                %14 = cir.const #cir.int<2> : !u32i loc(#loc61)
                %15 = cir.binop(mul, %13, %14) : !u32i loc(#loc61)
                %16 = cir.const #cir.int<1> : !u32i loc(#loc61)
                %17 = cir.binop(add, %15, %16) : !u32i loc(#loc61)
                %18 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc62)
                %19 = cir.binop(sub, %17, %18) : !u32i loc(#loc106)
                cir.store %19, %0 : !u32i, !cir.ptr<!u32i> loc(#loc107)
              } loc(#loc105)
            } loc(#loc102)
            cir.scope {
              %7 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc66)
              %8 = cir.const #cir.int<2147483647> : !s32i loc(#loc67)
              %9 = cir.cast(integral, %8 : !s32i), !u32i loc(#loc67)
              %10 = cir.cmp(gt, %7, %9) : !u32i, !cir.bool loc(#loc109)
              cir.if %10 {
                %11 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc69)
                %12 = cir.const #cir.int<1> : !s32i loc(#loc70)
                cir.call @exit(%12) : (!s32i) -> () extra(#fn_attr) loc(#loc69)
              } loc(#loc110)
            } loc(#loc108)
            %4 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc71)
            %5 = cir.cast(integral, %4 : !u32i), !s32i loc(#loc71)
            cir.store %5, %1 : !s32i, !cir.ptr<!s32i> loc(#loc111)
            %6 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc73)
            cir.call @printIntLine(%6) : (!s32i) -> () loc(#loc74)
          } loc(#loc98)
          cir.break loc(#loc75)
        } loc(#loc97)
        cir.yield loc(#loc43)
      } loc(#loc96)
    } loc(#loc96)
    cir.return loc(#loc41)
  } loc(#loc95)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE196_Unsigned_to_Signed_Conversion_Error/CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../testcasesupport/std_testcase_io.h":18:1)
#loc4 = loc("../../testcasesupport/std_testcase_io.h":18:33)
#loc5 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":20:1)
#loc6 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":38:1)
#loc7 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":22:5)
#loc8 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":37:5)
#loc9 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":22:11)
#loc10 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":23:5)
#loc11 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":24:9)
#loc12 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":35:9)
#loc13 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":25:13)
#loc14 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":25:22)
#loc15 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":26:13)
#loc16 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":26:17)
#loc17 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":27:27)
#loc18 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":27:13)
#loc19 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":27:32)
#loc20 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":28:13)
#loc21 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":31:13)
#loc22 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":28:17)
#loc23 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":28:26)
#loc24 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":28:31)
#loc25 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":29:13)
#loc26 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":30:31)
#loc27 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":30:42)
#loc28 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":30:17)
#loc29 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":33:25)
#loc30 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":33:13)
#loc31 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":34:26)
#loc32 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":34:13)
#loc33 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":36:9)
#loc34 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":69:1)
#loc35 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":72:1)
#loc36 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":71:5)
#loc37 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":71:11)
#loc38 = loc("/usr/include/stdlib.h":756:1)
#loc39 = loc("/usr/include/stdlib.h":756:70)
#loc40 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":45:1)
#loc41 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":67:1)
#loc42 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":47:5)
#loc43 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":66:5)
#loc44 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":47:11)
#loc45 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":48:5)
#loc46 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":49:9)
#loc47 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":64:9)
#loc48 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":50:13)
#loc49 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":50:22)
#loc50 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":51:13)
#loc51 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":51:17)
#loc52 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":52:27)
#loc53 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":52:13)
#loc54 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":52:32)
#loc55 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":53:13)
#loc56 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":56:13)
#loc57 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":53:17)
#loc58 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":53:26)
#loc59 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":53:31)
#loc60 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":54:13)
#loc61 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":55:31)
#loc62 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":55:42)
#loc63 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":55:17)
#loc64 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":58:13)
#loc65 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":61:13)
#loc66 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":58:17)
#loc67 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":58:31)
#loc68 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":59:13)
#loc69 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":60:17)
#loc70 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":60:22)
#loc71 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":62:25)
#loc72 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":62:13)
#loc73 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":63:26)
#loc74 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":63:13)
#loc75 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_16.c":65:9)
#loc76 = loc(fused[#loc1, #loc2])
#loc77 = loc(fused[#loc3, #loc4])
#loc78 = loc(fused[#loc5, #loc6])
#loc79 = loc(fused[#loc7, #loc8])
#loc80 = loc(fused[#loc10, #loc8])
#loc81 = loc(fused[#loc11, #loc12])
#loc82 = loc(fused[#loc13, #loc14])
#loc83 = loc(fused[#loc15, #loc16])
#loc84 = loc(fused[#loc18, #loc19])
#loc85 = loc(fused[#loc20, #loc21])
#loc86 = loc(fused[#loc22, #loc23])
#loc87 = loc(fused[#loc22, #loc24])
#loc88 = loc(fused[#loc25, #loc21])
#loc89 = loc(fused[#loc26, #loc27])
#loc90 = loc(fused[#loc28, #loc27])
#loc91 = loc(fused[#loc30, #loc29])
#loc92 = loc(fused[#loc34, #loc35])
#loc93 = loc(fused[#loc36, #loc37])
#loc94 = loc(fused[#loc38, #loc39])
#loc95 = loc(fused[#loc40, #loc41])
#loc96 = loc(fused[#loc42, #loc43])
#loc97 = loc(fused[#loc45, #loc43])
#loc98 = loc(fused[#loc46, #loc47])
#loc99 = loc(fused[#loc48, #loc49])
#loc100 = loc(fused[#loc50, #loc51])
#loc101 = loc(fused[#loc53, #loc54])
#loc102 = loc(fused[#loc55, #loc56])
#loc103 = loc(fused[#loc57, #loc58])
#loc104 = loc(fused[#loc57, #loc59])
#loc105 = loc(fused[#loc60, #loc56])
#loc106 = loc(fused[#loc61, #loc62])
#loc107 = loc(fused[#loc63, #loc62])
#loc108 = loc(fused[#loc64, #loc65])
#loc109 = loc(fused[#loc66, #loc67])
#loc110 = loc(fused[#loc68, #loc65])
#loc111 = loc(fused[#loc72, #loc71])
