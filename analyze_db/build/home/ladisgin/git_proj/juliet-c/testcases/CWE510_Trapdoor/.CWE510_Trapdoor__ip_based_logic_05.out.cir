!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc182 = loc("CWE510_Trapdoor__ip_based_logic_05.c":293:10)
#loc183 = loc("CWE510_Trapdoor__ip_based_logic_05.c":293:14)
#loc184 = loc("CWE510_Trapdoor__ip_based_logic_05.c":293:20)
#loc185 = loc("CWE510_Trapdoor__ip_based_logic_05.c":293:32)
!ty_in_addr = !cir.struct<struct "in_addr" {!u32i} #cir.record.decl.ast>
#loc481 = loc(fused[#loc182, #loc183])
#loc482 = loc(fused[#loc184, #loc185])
!ty_sockaddr = !cir.struct<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.struct<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE510_Trapdoor/CWE510_Trapdoor__ip_based_logic_05.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.global "private" internal dsolocal @staticTrue = #cir.int<1> : !s32i {alignment = 4 : i64} loc(#loc408)
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc409)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc410)
  cir.func private @bind(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc411)
  cir.func private @listen(!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc412)
  cir.func private @accept(!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc413)
  cir.func private @getsockname(!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i extra(#fn_attr) loc(#loc414)
  cir.func private @strcmp(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc415)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"192.168.30.123\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc17)
  cir.func private @inet_ntoa(!ty_in_addr) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc416)
  cir.func private @send(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc417)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Welcome, admin!\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc22)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Welcome!\00" : !cir.array<!s8i x 9>> : !cir.array<!s8i x 9> {alignment = 1 : i64} loc(#loc23)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc418)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Send failed!\00" : !cir.array<!s8i x 13>> : !cir.array<!s8i x 13> {alignment = 1 : i64} loc(#loc26)
  cir.func private @close(!s32i) -> !s32i loc(#loc419)
  cir.func no_proto @CWE510_Trapdoor__ip_based_logic_05_bad() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc408)
      %1 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc33)
      %2 = cir.cast(int_to_bool, %1 : !s32i), !cir.bool loc(#loc33)
      cir.if %2 {
        cir.scope {
          %3 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc424)
          %4 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["acceptService"] {alignment = 4 : i64} loc(#loc425)
          %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptServiceLen", init] {alignment = 4 : i64} loc(#loc426)
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc427)
          %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc428)
          %8 = cir.const #cir.int<16> : !u64i loc(#loc429)
          %9 = cir.cast(integral, %8 : !u64i), !s32i loc(#loc429)
          cir.store %9, %5 : !s32i, !cir.ptr<!s32i> loc(#loc426)
          %10 = cir.const #cir.int<1> : !s32i loc(#loc43)
          %11 = cir.unary(minus, %10) : !s32i, !s32i loc(#loc43)
          cir.store %11, %6 : !s32i, !cir.ptr<!s32i> loc(#loc427)
          %12 = cir.const #cir.int<1> : !s32i loc(#loc45)
          %13 = cir.unary(minus, %12) : !s32i, !s32i loc(#loc45)
          cir.store %13, %7 : !s32i, !cir.ptr<!s32i> loc(#loc428)
          cir.scope {
            cir.do {
              %14 = cir.const #cir.int<2> : !s32i loc(#loc49)
              %15 = cir.const #cir.int<1> : !s32i loc(#loc50)
              %16 = cir.const #cir.int<6> : !s32i loc(#loc51)
              %17 = cir.call @socket(%14, %15, %16) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc52)
              cir.store %17, %6 : !s32i, !cir.ptr<!s32i> loc(#loc431)
              cir.scope {
                %36 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc57)
                %37 = cir.const #cir.int<1> : !s32i loc(#loc58)
                %38 = cir.unary(minus, %37) : !s32i, !s32i loc(#loc58)
                %39 = cir.cmp(eq, %36, %38) : !s32i, !cir.bool loc(#loc433)
                cir.if %39 {
                  cir.break loc(#loc60)
                } loc(#loc434)
              } loc(#loc432)
              %18 = cir.cast(bitcast, %3 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc435)
              %19 = cir.const #cir.int<0> : !s32i loc(#loc63)
              %20 = cir.const #cir.int<16> : !u64i loc(#loc436)
              cir.libc.memset %20 bytes from %18 set to %19 : !cir.ptr<!void>, !s32i, !u64i loc(#loc437)
              %21 = cir.const #cir.int<2> : !s32i loc(#loc68)
              %22 = cir.cast(integral, %21 : !s32i), !u16i loc(#loc68)
              %23 = cir.get_member %3[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc69)
              cir.store %22, %23 : !u16i, !cir.ptr<!u16i> loc(#loc438)
              %24 = cir.const #cir.int<0> : !s32i loc(#loc71)
              %25 = cir.cast(integral, %24 : !s32i), !u32i loc(#loc71)
              %26 = cir.get_member %3[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc72)
              %27 = cir.get_member %26[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc73)
              cir.store %25, %27 : !u32i, !cir.ptr<!u32i> loc(#loc439)
              %28 = cir.const #cir.int<20000> : !s32i loc(#loc75)
              %29 = cir.cast(integral, %28 : !s32i), !u16i loc(#loc75)
              %30 = cir.call @htons(%29) : (!u16i) -> !u16i extra(#fn_attr) loc(#loc76)
              %31 = cir.get_member %3[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc77)
              cir.store %30, %31 : !u16i, !cir.ptr<!u16i> loc(#loc440)
              cir.scope {
                %36 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc82)
                %37 = cir.cast(bitcast, %3 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc442)
                %38 = cir.const #cir.int<16> : !u64i loc(#loc443)
                %39 = cir.cast(integral, %38 : !u64i), !u32i loc(#loc443)
                %40 = cir.call @bind(%36, %37, %39) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc87)
                %41 = cir.const #cir.int<1> : !s32i loc(#loc88)
                %42 = cir.unary(minus, %41) : !s32i, !s32i loc(#loc88)
                %43 = cir.cmp(eq, %40, %42) : !s32i, !cir.bool loc(#loc444)
                cir.if %43 {
                  cir.break loc(#loc90)
                } loc(#loc445)
              } loc(#loc441)
              cir.scope {
                %36 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc93)
                %37 = cir.const #cir.int<5> : !s32i loc(#loc94)
                %38 = cir.call @listen(%36, %37) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc95)
                %39 = cir.const #cir.int<1> : !s32i loc(#loc96)
                %40 = cir.unary(minus, %39) : !s32i, !s32i loc(#loc96)
                %41 = cir.cmp(eq, %38, %40) : !s32i, !cir.bool loc(#loc447)
                cir.if %41 {
                  cir.break loc(#loc98)
                } loc(#loc448)
              } loc(#loc446)
              %32 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc99)
              %33 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc100)
              %34 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc101)
              %35 = cir.call @accept(%32, %33, %34) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc102)
              cir.store %35, %7 : !s32i, !cir.ptr<!s32i> loc(#loc449)
              cir.scope {
                %36 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc107)
                %37 = cir.const #cir.int<1> : !s32i loc(#loc108)
                %38 = cir.unary(minus, %37) : !s32i, !s32i loc(#loc108)
                %39 = cir.cmp(eq, %36, %38) : !s32i, !cir.bool loc(#loc451)
                cir.if %39 {
                  cir.break loc(#loc110)
                } loc(#loc452)
              } loc(#loc450)
              cir.scope {
                %36 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc113)
                %37 = cir.cast(bitcast, %4 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc454)
                %38 = cir.cast(bitcast, %5 : !cir.ptr<!s32i>), !cir.ptr<!u32i> loc(#loc455)
                %39 = cir.call @getsockname(%36, %37, %38) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i extra(#fn_attr) loc(#loc118)
                %40 = cir.const #cir.int<1> : !s32i loc(#loc119)
                %41 = cir.unary(minus, %40) : !s32i, !s32i loc(#loc120)
                %42 = cir.cmp(eq, %39, %41) : !s32i, !cir.bool loc(#loc456)
                cir.if %42 {
                  cir.break loc(#loc122)
                } loc(#loc457)
              } loc(#loc453)
              cir.scope {
                %36 = cir.get_global @strcmp : !cir.ptr<!cir.func<!s32i (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc125)
                %37 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc17)
                %38 = cir.cast(array_to_ptrdecay, %37 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc17)
                %39 = cir.get_member %4[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc72)
                %40 = cir.load %39 : !cir.ptr<!ty_in_addr>, !ty_in_addr loc(#loc126)
                %41 = cir.call @inet_ntoa(%40) : (!ty_in_addr) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc126)
                %42 = cir.call @strcmp(%38, %41) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc125)
                %43 = cir.const #cir.int<0> : !s32i loc(#loc127)
                %44 = cir.cmp(eq, %42, %43) : !s32i, !cir.bool loc(#loc459)
                cir.if %44 {
                  cir.scope {
                    %45 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc133)
                    %46 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc22)
                    %47 = cir.cast(array_to_ptrdecay, %46 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc22)
                    %48 = cir.cast(bitcast, %47 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc22)
                    %49 = cir.const #cir.int<15> : !u64i loc(#loc462)
                    %50 = cir.const #cir.int<0> : !s32i loc(#loc136)
                    %51 = cir.call @send(%45, %48, %49, %50) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc137)
                    %52 = cir.const #cir.int<1> : !s32i loc(#loc138)
                    %53 = cir.unary(minus, %52) : !s32i, !s32i loc(#loc138)
                    %54 = cir.cast(integral, %53 : !s32i), !s64i loc(#loc138)
                    %55 = cir.cmp(eq, %51, %54) : !s64i, !cir.bool loc(#loc463)
                    cir.if %55 {
                      cir.break loc(#loc140)
                    } loc(#loc464)
                  } loc(#loc461)
                } else {
                  cir.scope {
                    %45 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc143)
                    %46 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc23)
                    %47 = cir.cast(array_to_ptrdecay, %46 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc23)
                    %48 = cir.cast(bitcast, %47 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc23)
                    %49 = cir.const #cir.int<8> : !u64i loc(#loc466)
                    %50 = cir.const #cir.int<0> : !s32i loc(#loc146)
                    %51 = cir.call @send(%45, %48, %49, %50) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc147)
                    %52 = cir.const #cir.int<1> : !s32i loc(#loc148)
                    %53 = cir.unary(minus, %52) : !s32i, !s32i loc(#loc148)
                    %54 = cir.cast(integral, %53 : !s32i), !s64i loc(#loc148)
                    %55 = cir.cmp(eq, %51, %54) : !s64i, !cir.bool loc(#loc467)
                    cir.if %55 {
                      %56 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 13>> loc(#loc26)
                      %57 = cir.cast(array_to_ptrdecay, %56 : !cir.ptr<!cir.array<!s8i x 13>>), !cir.ptr<!s8i> loc(#loc26)
                      cir.call @printLine(%57) : (!cir.ptr<!s8i>) -> () loc(#loc150)
                    } loc(#loc468)
                  } loc(#loc465)
                } loc(#loc460)
              } loc(#loc458)
              cir.yield loc(#loc48)
            } while {
              %14 = cir.const #cir.int<0> : !s32i loc(#loc151)
              %15 = cir.cast(int_to_bool, %14 : !s32i), !cir.bool loc(#loc151)
              cir.condition(%15) loc(#loc151)
            } loc(#loc430)
          } loc(#loc430)
          cir.scope {
            %14 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc154)
            %15 = cir.const #cir.int<1> : !s32i loc(#loc155)
            %16 = cir.unary(minus, %15) : !s32i, !s32i loc(#loc155)
            %17 = cir.cmp(ne, %14, %16) : !s32i, !cir.bool loc(#loc470)
            cir.if %17 {
              %18 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc157)
              %19 = cir.call @close(%18) : (!s32i) -> !s32i loc(#loc158)
            } loc(#loc471)
          } loc(#loc469)
          cir.scope {
            %14 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc161)
            %15 = cir.const #cir.int<1> : !s32i loc(#loc162)
            %16 = cir.unary(minus, %15) : !s32i, !s32i loc(#loc162)
            %17 = cir.cmp(ne, %14, %16) : !s32i, !cir.bool loc(#loc473)
            cir.if %17 {
              %18 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc164)
              %19 = cir.call @close(%18) : (!s32i) -> !s32i loc(#loc165)
            } loc(#loc474)
          } loc(#loc472)
        } loc(#loc423)
      } loc(#loc422)
    } loc(#loc421)
    cir.return loc(#loc30)
  } loc(#loc420)
  cir.func no_proto @CWE510_Trapdoor__ip_based_logic_05_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<!void ()>> loc(#loc476)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc168)
    %1 = cir.get_global @good2 : !cir.ptr<!cir.func<!void ()>> loc(#loc477)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc170)
    cir.return loc(#loc167)
  } loc(#loc475)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc478)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc479)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc176)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc177)
  cir.global "private" constant cir_private dsolocal @".str.6" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc178)
  cir.global "private" constant cir_private dsolocal @".str.7" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc179)
  cir.func @main(%arg0: !s32i loc(fused[#loc182, #loc183]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc184, #loc185])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc481)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc482)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc181)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc186)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc186)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc187)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc188)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc188)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc189)
    %6 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc176)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc176)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc190)
    %8 = cir.get_global @CWE510_Trapdoor__ip_based_logic_05_good : !cir.ptr<!cir.func<!void ()>> loc(#loc483)
    cir.call @CWE510_Trapdoor__ip_based_logic_05_good() : () -> () loc(#loc191)
    %9 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc177)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc177)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc193)
    %11 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc178)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc178)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc194)
    %13 = cir.get_global @CWE510_Trapdoor__ip_based_logic_05_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc484)
    cir.call @CWE510_Trapdoor__ip_based_logic_05_bad() : () -> () loc(#loc195)
    %14 = cir.get_global @".str.7" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc179)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc179)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc197)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc198)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc485)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc485)
    cir.return %17 : !s32i loc(#loc485)
  } loc(#loc480)
  cir.global "private" internal dsolocal @staticFalse = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc486)
  cir.global "private" constant cir_private dsolocal @".str.8" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc202)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.get_global @staticFalse : !cir.ptr<!s32i> loc(#loc486)
      %1 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc207)
      %2 = cir.cast(int_to_bool, %1 : !s32i), !cir.bool loc(#loc207)
      cir.if %2 {
        %3 = cir.get_global @".str.8" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc202)
        %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc202)
        cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc211)
      } else {
        cir.scope {
          %3 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc491)
          %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc492)
          %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc493)
          %6 = cir.const #cir.int<1> : !s32i loc(#loc217)
          %7 = cir.unary(minus, %6) : !s32i, !s32i loc(#loc217)
          cir.store %7, %4 : !s32i, !cir.ptr<!s32i> loc(#loc492)
          %8 = cir.const #cir.int<1> : !s32i loc(#loc219)
          %9 = cir.unary(minus, %8) : !s32i, !s32i loc(#loc219)
          cir.store %9, %5 : !s32i, !cir.ptr<!s32i> loc(#loc493)
          cir.scope {
            cir.do {
              %10 = cir.const #cir.int<2> : !s32i loc(#loc222)
              %11 = cir.const #cir.int<1> : !s32i loc(#loc223)
              %12 = cir.const #cir.int<6> : !s32i loc(#loc224)
              %13 = cir.call @socket(%10, %11, %12) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc225)
              cir.store %13, %4 : !s32i, !cir.ptr<!s32i> loc(#loc495)
              cir.scope {
                %32 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc230)
                %33 = cir.const #cir.int<1> : !s32i loc(#loc231)
                %34 = cir.unary(minus, %33) : !s32i, !s32i loc(#loc231)
                %35 = cir.cmp(eq, %32, %34) : !s32i, !cir.bool loc(#loc497)
                cir.if %35 {
                  cir.break loc(#loc233)
                } loc(#loc498)
              } loc(#loc496)
              %14 = cir.cast(bitcast, %3 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc499)
              %15 = cir.const #cir.int<0> : !s32i loc(#loc236)
              %16 = cir.const #cir.int<16> : !u64i loc(#loc500)
              cir.libc.memset %16 bytes from %14 set to %15 : !cir.ptr<!void>, !s32i, !u64i loc(#loc501)
              %17 = cir.const #cir.int<2> : !s32i loc(#loc241)
              %18 = cir.cast(integral, %17 : !s32i), !u16i loc(#loc241)
              %19 = cir.get_member %3[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc69)
              cir.store %18, %19 : !u16i, !cir.ptr<!u16i> loc(#loc502)
              %20 = cir.const #cir.int<0> : !s32i loc(#loc243)
              %21 = cir.cast(integral, %20 : !s32i), !u32i loc(#loc243)
              %22 = cir.get_member %3[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc72)
              %23 = cir.get_member %22[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc73)
              cir.store %21, %23 : !u32i, !cir.ptr<!u32i> loc(#loc503)
              %24 = cir.const #cir.int<20000> : !s32i loc(#loc245)
              %25 = cir.cast(integral, %24 : !s32i), !u16i loc(#loc245)
              %26 = cir.call @htons(%25) : (!u16i) -> !u16i extra(#fn_attr) loc(#loc246)
              %27 = cir.get_member %3[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc77)
              cir.store %26, %27 : !u16i, !cir.ptr<!u16i> loc(#loc504)
              cir.scope {
                %32 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc251)
                %33 = cir.cast(bitcast, %3 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc506)
                %34 = cir.const #cir.int<16> : !u64i loc(#loc507)
                %35 = cir.cast(integral, %34 : !u64i), !u32i loc(#loc507)
                %36 = cir.call @bind(%32, %33, %35) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc256)
                %37 = cir.const #cir.int<1> : !s32i loc(#loc257)
                %38 = cir.unary(minus, %37) : !s32i, !s32i loc(#loc257)
                %39 = cir.cmp(eq, %36, %38) : !s32i, !cir.bool loc(#loc508)
                cir.if %39 {
                  cir.break loc(#loc259)
                } loc(#loc509)
              } loc(#loc505)
              cir.scope {
                %32 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc262)
                %33 = cir.const #cir.int<5> : !s32i loc(#loc263)
                %34 = cir.call @listen(%32, %33) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc264)
                %35 = cir.const #cir.int<1> : !s32i loc(#loc265)
                %36 = cir.unary(minus, %35) : !s32i, !s32i loc(#loc265)
                %37 = cir.cmp(eq, %34, %36) : !s32i, !cir.bool loc(#loc511)
                cir.if %37 {
                  cir.break loc(#loc267)
                } loc(#loc512)
              } loc(#loc510)
              %28 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc268)
              %29 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc269)
              %30 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc270)
              %31 = cir.call @accept(%28, %29, %30) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc271)
              cir.store %31, %5 : !s32i, !cir.ptr<!s32i> loc(#loc513)
              cir.scope {
                %32 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc276)
                %33 = cir.const #cir.int<1> : !s32i loc(#loc277)
                %34 = cir.unary(minus, %33) : !s32i, !s32i loc(#loc277)
                %35 = cir.cmp(eq, %32, %34) : !s32i, !cir.bool loc(#loc515)
                cir.if %35 {
                  cir.break loc(#loc279)
                } loc(#loc516)
              } loc(#loc514)
              cir.scope {
                %32 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc282)
                %33 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc283)
                %34 = cir.cast(array_to_ptrdecay, %33 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc283)
                %35 = cir.cast(bitcast, %34 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc283)
                %36 = cir.const #cir.int<8> : !u64i loc(#loc518)
                %37 = cir.const #cir.int<0> : !s32i loc(#loc286)
                %38 = cir.call @send(%32, %35, %36, %37) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc287)
                %39 = cir.const #cir.int<1> : !s32i loc(#loc288)
                %40 = cir.unary(minus, %39) : !s32i, !s32i loc(#loc288)
                %41 = cir.cast(integral, %40 : !s32i), !s64i loc(#loc288)
                %42 = cir.cmp(eq, %38, %41) : !s64i, !cir.bool loc(#loc519)
                cir.if %42 {
                  %43 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 13>> loc(#loc290)
                  %44 = cir.cast(array_to_ptrdecay, %43 : !cir.ptr<!cir.array<!s8i x 13>>), !cir.ptr<!s8i> loc(#loc290)
                  cir.call @printLine(%44) : (!cir.ptr<!s8i>) -> () loc(#loc291)
                } loc(#loc520)
              } loc(#loc517)
              cir.yield loc(#loc221)
            } while {
              %10 = cir.const #cir.int<0> : !s32i loc(#loc292)
              %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc292)
              cir.condition(%11) loc(#loc292)
            } loc(#loc494)
          } loc(#loc494)
          cir.scope {
            %10 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc295)
            %11 = cir.const #cir.int<1> : !s32i loc(#loc296)
            %12 = cir.unary(minus, %11) : !s32i, !s32i loc(#loc296)
            %13 = cir.cmp(ne, %10, %12) : !s32i, !cir.bool loc(#loc522)
            cir.if %13 {
              %14 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc298)
              %15 = cir.call @close(%14) : (!s32i) -> !s32i loc(#loc299)
            } loc(#loc523)
          } loc(#loc521)
          cir.scope {
            %10 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc302)
            %11 = cir.const #cir.int<1> : !s32i loc(#loc303)
            %12 = cir.unary(minus, %11) : !s32i, !s32i loc(#loc303)
            %13 = cir.cmp(ne, %10, %12) : !s32i, !cir.bool loc(#loc525)
            cir.if %13 {
              %14 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc305)
              %15 = cir.call @close(%14) : (!s32i) -> !s32i loc(#loc306)
            } loc(#loc526)
          } loc(#loc524)
        } loc(#loc490)
      } loc(#loc489)
    } loc(#loc488)
    cir.return loc(#loc204)
  } loc(#loc487)
  cir.func no_proto internal private @good2() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc408)
      %1 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc311)
      %2 = cir.cast(int_to_bool, %1 : !s32i), !cir.bool loc(#loc311)
      cir.if %2 {
        cir.scope {
          %3 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc531)
          %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc532)
          %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc533)
          %6 = cir.const #cir.int<1> : !s32i loc(#loc318)
          %7 = cir.unary(minus, %6) : !s32i, !s32i loc(#loc318)
          cir.store %7, %4 : !s32i, !cir.ptr<!s32i> loc(#loc532)
          %8 = cir.const #cir.int<1> : !s32i loc(#loc320)
          %9 = cir.unary(minus, %8) : !s32i, !s32i loc(#loc320)
          cir.store %9, %5 : !s32i, !cir.ptr<!s32i> loc(#loc533)
          cir.scope {
            cir.do {
              %10 = cir.const #cir.int<2> : !s32i loc(#loc323)
              %11 = cir.const #cir.int<1> : !s32i loc(#loc324)
              %12 = cir.const #cir.int<6> : !s32i loc(#loc325)
              %13 = cir.call @socket(%10, %11, %12) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc326)
              cir.store %13, %4 : !s32i, !cir.ptr<!s32i> loc(#loc535)
              cir.scope {
                %32 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc331)
                %33 = cir.const #cir.int<1> : !s32i loc(#loc332)
                %34 = cir.unary(minus, %33) : !s32i, !s32i loc(#loc332)
                %35 = cir.cmp(eq, %32, %34) : !s32i, !cir.bool loc(#loc537)
                cir.if %35 {
                  cir.break loc(#loc334)
                } loc(#loc538)
              } loc(#loc536)
              %14 = cir.cast(bitcast, %3 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc539)
              %15 = cir.const #cir.int<0> : !s32i loc(#loc337)
              %16 = cir.const #cir.int<16> : !u64i loc(#loc540)
              cir.libc.memset %16 bytes from %14 set to %15 : !cir.ptr<!void>, !s32i, !u64i loc(#loc541)
              %17 = cir.const #cir.int<2> : !s32i loc(#loc342)
              %18 = cir.cast(integral, %17 : !s32i), !u16i loc(#loc342)
              %19 = cir.get_member %3[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc69)
              cir.store %18, %19 : !u16i, !cir.ptr<!u16i> loc(#loc542)
              %20 = cir.const #cir.int<0> : !s32i loc(#loc344)
              %21 = cir.cast(integral, %20 : !s32i), !u32i loc(#loc344)
              %22 = cir.get_member %3[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc72)
              %23 = cir.get_member %22[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc73)
              cir.store %21, %23 : !u32i, !cir.ptr<!u32i> loc(#loc543)
              %24 = cir.const #cir.int<20000> : !s32i loc(#loc346)
              %25 = cir.cast(integral, %24 : !s32i), !u16i loc(#loc346)
              %26 = cir.call @htons(%25) : (!u16i) -> !u16i extra(#fn_attr) loc(#loc347)
              %27 = cir.get_member %3[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc77)
              cir.store %26, %27 : !u16i, !cir.ptr<!u16i> loc(#loc544)
              cir.scope {
                %32 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc352)
                %33 = cir.cast(bitcast, %3 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc546)
                %34 = cir.const #cir.int<16> : !u64i loc(#loc547)
                %35 = cir.cast(integral, %34 : !u64i), !u32i loc(#loc547)
                %36 = cir.call @bind(%32, %33, %35) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc357)
                %37 = cir.const #cir.int<1> : !s32i loc(#loc358)
                %38 = cir.unary(minus, %37) : !s32i, !s32i loc(#loc358)
                %39 = cir.cmp(eq, %36, %38) : !s32i, !cir.bool loc(#loc548)
                cir.if %39 {
                  cir.break loc(#loc360)
                } loc(#loc549)
              } loc(#loc545)
              cir.scope {
                %32 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc363)
                %33 = cir.const #cir.int<5> : !s32i loc(#loc364)
                %34 = cir.call @listen(%32, %33) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc365)
                %35 = cir.const #cir.int<1> : !s32i loc(#loc366)
                %36 = cir.unary(minus, %35) : !s32i, !s32i loc(#loc366)
                %37 = cir.cmp(eq, %34, %36) : !s32i, !cir.bool loc(#loc551)
                cir.if %37 {
                  cir.break loc(#loc368)
                } loc(#loc552)
              } loc(#loc550)
              %28 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc369)
              %29 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc370)
              %30 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc371)
              %31 = cir.call @accept(%28, %29, %30) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc372)
              cir.store %31, %5 : !s32i, !cir.ptr<!s32i> loc(#loc553)
              cir.scope {
                %32 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc377)
                %33 = cir.const #cir.int<1> : !s32i loc(#loc378)
                %34 = cir.unary(minus, %33) : !s32i, !s32i loc(#loc378)
                %35 = cir.cmp(eq, %32, %34) : !s32i, !cir.bool loc(#loc555)
                cir.if %35 {
                  cir.break loc(#loc380)
                } loc(#loc556)
              } loc(#loc554)
              cir.scope {
                %32 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc383)
                %33 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc384)
                %34 = cir.cast(array_to_ptrdecay, %33 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc384)
                %35 = cir.cast(bitcast, %34 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc384)
                %36 = cir.const #cir.int<8> : !u64i loc(#loc558)
                %37 = cir.const #cir.int<0> : !s32i loc(#loc387)
                %38 = cir.call @send(%32, %35, %36, %37) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc388)
                %39 = cir.const #cir.int<1> : !s32i loc(#loc389)
                %40 = cir.unary(minus, %39) : !s32i, !s32i loc(#loc389)
                %41 = cir.cast(integral, %40 : !s32i), !s64i loc(#loc389)
                %42 = cir.cmp(eq, %38, %41) : !s64i, !cir.bool loc(#loc559)
                cir.if %42 {
                  %43 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 13>> loc(#loc391)
                  %44 = cir.cast(array_to_ptrdecay, %43 : !cir.ptr<!cir.array<!s8i x 13>>), !cir.ptr<!s8i> loc(#loc391)
                  cir.call @printLine(%44) : (!cir.ptr<!s8i>) -> () loc(#loc392)
                } loc(#loc560)
              } loc(#loc557)
              cir.yield loc(#loc322)
            } while {
              %10 = cir.const #cir.int<0> : !s32i loc(#loc393)
              %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc393)
              cir.condition(%11) loc(#loc393)
            } loc(#loc534)
          } loc(#loc534)
          cir.scope {
            %10 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc396)
            %11 = cir.const #cir.int<1> : !s32i loc(#loc397)
            %12 = cir.unary(minus, %11) : !s32i, !s32i loc(#loc397)
            %13 = cir.cmp(ne, %10, %12) : !s32i, !cir.bool loc(#loc562)
            cir.if %13 {
              %14 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc399)
              %15 = cir.call @close(%14) : (!s32i) -> !s32i loc(#loc400)
            } loc(#loc563)
          } loc(#loc561)
          cir.scope {
            %10 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc403)
            %11 = cir.const #cir.int<1> : !s32i loc(#loc404)
            %12 = cir.unary(minus, %11) : !s32i, !s32i loc(#loc404)
            %13 = cir.cmp(ne, %10, %12) : !s32i, !cir.bool loc(#loc565)
            cir.if %13 {
              %14 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc406)
              %15 = cir.call @close(%14) : (!s32i) -> !s32i loc(#loc407)
            } loc(#loc566)
          } loc(#loc564)
        } loc(#loc530)
      } loc(#loc529)
    } loc(#loc528)
    cir.return loc(#loc308)
  } loc(#loc527)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE510_Trapdoor/CWE510_Trapdoor__ip_based_logic_05.c":0:0)
#loc1 = loc("CWE510_Trapdoor__ip_based_logic_05.c":42:1)
#loc2 = loc("CWE510_Trapdoor__ip_based_logic_05.c":42:25)
#loc3 = loc("/usr/include/sys/socket.h":102:1)
#loc4 = loc("/usr/include/sys/socket.h":102:62)
#loc5 = loc("/usr/include/netinet/in.h":404:1)
#loc6 = loc("/usr/include/netinet/in.h":405:40)
#loc7 = loc("/usr/include/sys/socket.h":112:1)
#loc8 = loc("/usr/include/sys/socket.h":113:6)
#loc9 = loc("/usr/include/sys/socket.h":296:1)
#loc10 = loc("/usr/include/sys/socket.h":296:39)
#loc11 = loc("/usr/include/sys/socket.h":306:1)
#loc12 = loc("/usr/include/sys/socket.h":307:38)
#loc13 = loc("/usr/include/sys/socket.h":116:1)
#loc14 = loc("/usr/include/sys/socket.h":117:33)
#loc15 = loc("/usr/include/string.h":156:1)
#loc16 = loc("/usr/include/string.h":157:33)
#loc17 = loc("CWE510_Trapdoor__ip_based_logic_05.c":96:28)
#loc18 = loc("/usr/include/arpa/inet.h":53:1)
#loc19 = loc("/usr/include/arpa/inet.h":53:46)
#loc20 = loc("/usr/include/sys/socket.h":138:1)
#loc21 = loc("/usr/include/sys/socket.h":138:74)
#loc22 = loc("CWE510_Trapdoor__ip_based_logic_05.c":98:44)
#loc23 = loc("CWE510_Trapdoor__ip_based_logic_05.c":106:44)
#loc24 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc25 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc26 = loc("CWE510_Trapdoor__ip_based_logic_05.c":108:35)
#loc27 = loc("/usr/include/unistd.h":358:1)
#loc28 = loc("/usr/include/unistd.h":358:27)
#loc29 = loc("CWE510_Trapdoor__ip_based_logic_05.c":47:1)
#loc30 = loc("CWE510_Trapdoor__ip_based_logic_05.c":129:1)
#loc31 = loc("CWE510_Trapdoor__ip_based_logic_05.c":49:5)
#loc32 = loc("CWE510_Trapdoor__ip_based_logic_05.c":128:5)
#loc33 = loc("CWE510_Trapdoor__ip_based_logic_05.c":49:8)
#loc34 = loc("CWE510_Trapdoor__ip_based_logic_05.c":50:5)
#loc35 = loc("CWE510_Trapdoor__ip_based_logic_05.c":51:9)
#loc36 = loc("CWE510_Trapdoor__ip_based_logic_05.c":127:9)
#loc37 = loc("CWE510_Trapdoor__ip_based_logic_05.c":56:13)
#loc38 = loc("CWE510_Trapdoor__ip_based_logic_05.c":56:32)
#loc39 = loc("CWE510_Trapdoor__ip_based_logic_05.c":56:41)
#loc40 = loc("CWE510_Trapdoor__ip_based_logic_05.c":57:13)
#loc41 = loc("CWE510_Trapdoor__ip_based_logic_05.c":57:56)
#loc42 = loc("CWE510_Trapdoor__ip_based_logic_05.c":58:13)
#loc43 = loc("CWE510_Trapdoor__ip_based_logic_05.c":58:35)
#loc44 = loc("CWE510_Trapdoor__ip_based_logic_05.c":59:13)
#loc45 = loc("CWE510_Trapdoor__ip_based_logic_05.c":59:35)
#loc46 = loc("CWE510_Trapdoor__ip_based_logic_05.c":57:36)
#loc47 = loc("CWE510_Trapdoor__ip_based_logic_05.c":60:13)
#loc48 = loc("CWE510_Trapdoor__ip_based_logic_05.c":112:21)
#loc49 = loc("CWE510_Trapdoor__ip_based_logic_05.c":69:39)
#loc50 = loc("CWE510_Trapdoor__ip_based_logic_05.c":69:48)
#loc51 = loc("CWE510_Trapdoor__ip_based_logic_05.c":69:61)
#loc52 = loc("CWE510_Trapdoor__ip_based_logic_05.c":69:32)
#loc53 = loc("CWE510_Trapdoor__ip_based_logic_05.c":69:17)
#loc54 = loc("CWE510_Trapdoor__ip_based_logic_05.c":69:72)
#loc55 = loc("CWE510_Trapdoor__ip_based_logic_05.c":70:17)
#loc56 = loc("CWE510_Trapdoor__ip_based_logic_05.c":73:17)
#loc57 = loc("CWE510_Trapdoor__ip_based_logic_05.c":70:21)
#loc58 = loc("CWE510_Trapdoor__ip_based_logic_05.c":70:37)
#loc59 = loc("CWE510_Trapdoor__ip_based_logic_05.c":71:17)
#loc60 = loc("CWE510_Trapdoor__ip_based_logic_05.c":72:21)
#loc61 = loc("CWE510_Trapdoor__ip_based_logic_05.c":74:24)
#loc62 = loc("CWE510_Trapdoor__ip_based_logic_05.c":74:25)
#loc63 = loc("CWE510_Trapdoor__ip_based_logic_05.c":74:34)
#loc64 = loc("CWE510_Trapdoor__ip_based_logic_05.c":74:37)
#loc65 = loc("CWE510_Trapdoor__ip_based_logic_05.c":74:51)
#loc66 = loc("CWE510_Trapdoor__ip_based_logic_05.c":74:17)
#loc67 = loc("CWE510_Trapdoor__ip_based_logic_05.c":74:52)
#loc68 = loc("CWE510_Trapdoor__ip_based_logic_05.c":75:38)
#loc69 = loc("/usr/include/netinet/in.h":249:5)
#loc70 = loc("CWE510_Trapdoor__ip_based_logic_05.c":75:17)
#loc71 = loc("CWE510_Trapdoor__ip_based_logic_05.c":76:43)
#loc72 = loc("/usr/include/netinet/in.h":251:20)
#loc73 = loc("/usr/include/netinet/in.h":33:15)
#loc74 = loc("CWE510_Trapdoor__ip_based_logic_05.c":76:17)
#loc75 = loc("CWE510_Trapdoor__ip_based_logic_05.c":77:42)
#loc76 = loc("CWE510_Trapdoor__ip_based_logic_05.c":77:36)
#loc77 = loc("/usr/include/netinet/in.h":250:15)
#loc78 = loc("CWE510_Trapdoor__ip_based_logic_05.c":77:17)
#loc79 = loc("CWE510_Trapdoor__ip_based_logic_05.c":77:47)
#loc80 = loc("CWE510_Trapdoor__ip_based_logic_05.c":78:17)
#loc81 = loc("CWE510_Trapdoor__ip_based_logic_05.c":81:17)
#loc82 = loc("CWE510_Trapdoor__ip_based_logic_05.c":78:26)
#loc83 = loc("CWE510_Trapdoor__ip_based_logic_05.c":78:58)
#loc84 = loc("CWE510_Trapdoor__ip_based_logic_05.c":78:59)
#loc85 = loc("CWE510_Trapdoor__ip_based_logic_05.c":78:68)
#loc86 = loc("CWE510_Trapdoor__ip_based_logic_05.c":78:82)
#loc87 = loc("CWE510_Trapdoor__ip_based_logic_05.c":78:21)
#loc88 = loc("CWE510_Trapdoor__ip_based_logic_05.c":78:88)
#loc89 = loc("CWE510_Trapdoor__ip_based_logic_05.c":79:17)
#loc90 = loc("CWE510_Trapdoor__ip_based_logic_05.c":80:21)
#loc91 = loc("CWE510_Trapdoor__ip_based_logic_05.c":82:17)
#loc92 = loc("CWE510_Trapdoor__ip_based_logic_05.c":85:17)
#loc93 = loc("CWE510_Trapdoor__ip_based_logic_05.c":82:28)
#loc94 = loc("CWE510_Trapdoor__ip_based_logic_05.c":82:42)
#loc95 = loc("CWE510_Trapdoor__ip_based_logic_05.c":82:21)
#loc96 = loc("CWE510_Trapdoor__ip_based_logic_05.c":82:48)
#loc97 = loc("CWE510_Trapdoor__ip_based_logic_05.c":83:17)
#loc98 = loc("CWE510_Trapdoor__ip_based_logic_05.c":84:21)
#loc99 = loc("CWE510_Trapdoor__ip_based_logic_05.c":86:39)
#loc100 = loc("CWE510_Trapdoor__ip_based_logic_05.c":86:53)
#loc101 = loc("CWE510_Trapdoor__ip_based_logic_05.c":86:59)
#loc102 = loc("CWE510_Trapdoor__ip_based_logic_05.c":86:32)
#loc103 = loc("CWE510_Trapdoor__ip_based_logic_05.c":86:17)
#loc104 = loc("CWE510_Trapdoor__ip_based_logic_05.c":86:63)
#loc105 = loc("CWE510_Trapdoor__ip_based_logic_05.c":87:17)
#loc106 = loc("CWE510_Trapdoor__ip_based_logic_05.c":90:17)
#loc107 = loc("CWE510_Trapdoor__ip_based_logic_05.c":87:21)
#loc108 = loc("CWE510_Trapdoor__ip_based_logic_05.c":87:37)
#loc109 = loc("CWE510_Trapdoor__ip_based_logic_05.c":88:17)
#loc110 = loc("CWE510_Trapdoor__ip_based_logic_05.c":89:21)
#loc111 = loc("CWE510_Trapdoor__ip_based_logic_05.c":91:17)
#loc112 = loc("CWE510_Trapdoor__ip_based_logic_05.c":94:17)
#loc113 = loc("CWE510_Trapdoor__ip_based_logic_05.c":91:33)
#loc114 = loc("CWE510_Trapdoor__ip_based_logic_05.c":91:66)
#loc115 = loc("CWE510_Trapdoor__ip_based_logic_05.c":91:67)
#loc116 = loc("CWE510_Trapdoor__ip_based_logic_05.c":91:82)
#loc117 = loc("CWE510_Trapdoor__ip_based_logic_05.c":91:83)
#loc118 = loc("CWE510_Trapdoor__ip_based_logic_05.c":91:21)
#loc119 = loc("CWE510_Trapdoor__ip_based_logic_05.c":91:105)
#loc120 = loc("CWE510_Trapdoor__ip_based_logic_05.c":91:104)
#loc121 = loc("CWE510_Trapdoor__ip_based_logic_05.c":92:17)
#loc122 = loc("CWE510_Trapdoor__ip_based_logic_05.c":93:21)
#loc123 = loc("CWE510_Trapdoor__ip_based_logic_05.c":96:17)
#loc124 = loc("CWE510_Trapdoor__ip_based_logic_05.c":110:17)
#loc125 = loc("CWE510_Trapdoor__ip_based_logic_05.c":96:21)
#loc126 = loc("CWE510_Trapdoor__ip_based_logic_05.c":96:46)
#loc127 = loc("CWE510_Trapdoor__ip_based_logic_05.c":96:84)
#loc128 = loc("CWE510_Trapdoor__ip_based_logic_05.c":97:17)
#loc129 = loc("CWE510_Trapdoor__ip_based_logic_05.c":103:17)
#loc130 = loc("CWE510_Trapdoor__ip_based_logic_05.c":105:17)
#loc131 = loc("CWE510_Trapdoor__ip_based_logic_05.c":98:21)
#loc132 = loc("CWE510_Trapdoor__ip_based_logic_05.c":102:21)
#loc133 = loc("CWE510_Trapdoor__ip_based_logic_05.c":98:30)
#loc134 = loc("CWE510_Trapdoor__ip_based_logic_05.c":98:59)
#loc135 = loc("CWE510_Trapdoor__ip_based_logic_05.c":98:79)
#loc136 = loc("CWE510_Trapdoor__ip_based_logic_05.c":98:82)
#loc137 = loc("CWE510_Trapdoor__ip_based_logic_05.c":98:25)
#loc138 = loc("CWE510_Trapdoor__ip_based_logic_05.c":98:89)
#loc139 = loc("CWE510_Trapdoor__ip_based_logic_05.c":99:21)
#loc140 = loc("CWE510_Trapdoor__ip_based_logic_05.c":101:25)
#loc141 = loc("CWE510_Trapdoor__ip_based_logic_05.c":106:21)
#loc142 = loc("CWE510_Trapdoor__ip_based_logic_05.c":109:21)
#loc143 = loc("CWE510_Trapdoor__ip_based_logic_05.c":106:30)
#loc144 = loc("CWE510_Trapdoor__ip_based_logic_05.c":106:61)
#loc145 = loc("CWE510_Trapdoor__ip_based_logic_05.c":106:83)
#loc146 = loc("CWE510_Trapdoor__ip_based_logic_05.c":106:86)
#loc147 = loc("CWE510_Trapdoor__ip_based_logic_05.c":106:25)
#loc148 = loc("CWE510_Trapdoor__ip_based_logic_05.c":106:92)
#loc149 = loc("CWE510_Trapdoor__ip_based_logic_05.c":107:21)
#loc150 = loc("CWE510_Trapdoor__ip_based_logic_05.c":108:25)
#loc151 = loc("CWE510_Trapdoor__ip_based_logic_05.c":112:20)
#loc152 = loc("CWE510_Trapdoor__ip_based_logic_05.c":113:13)
#loc153 = loc("CWE510_Trapdoor__ip_based_logic_05.c":116:13)
#loc154 = loc("CWE510_Trapdoor__ip_based_logic_05.c":113:17)
#loc155 = loc("CWE510_Trapdoor__ip_based_logic_05.c":113:33)
#loc156 = loc("CWE510_Trapdoor__ip_based_logic_05.c":114:13)
#loc157 = loc("CWE510_Trapdoor__ip_based_logic_05.c":115:30)
#loc158 = loc("CWE510_Trapdoor__ip_based_logic_05.c":115:17)
#loc159 = loc("CWE510_Trapdoor__ip_based_logic_05.c":117:13)
#loc160 = loc("CWE510_Trapdoor__ip_based_logic_05.c":120:13)
#loc161 = loc("CWE510_Trapdoor__ip_based_logic_05.c":117:17)
#loc162 = loc("CWE510_Trapdoor__ip_based_logic_05.c":117:33)
#loc163 = loc("CWE510_Trapdoor__ip_based_logic_05.c":118:13)
#loc164 = loc("CWE510_Trapdoor__ip_based_logic_05.c":119:30)
#loc165 = loc("CWE510_Trapdoor__ip_based_logic_05.c":119:17)
#loc166 = loc("CWE510_Trapdoor__ip_based_logic_05.c":278:1)
#loc167 = loc("CWE510_Trapdoor__ip_based_logic_05.c":282:1)
#loc168 = loc("CWE510_Trapdoor__ip_based_logic_05.c":280:5)
#loc169 = loc("CWE510_Trapdoor__ip_based_logic_05.c":280:11)
#loc170 = loc("CWE510_Trapdoor__ip_based_logic_05.c":281:5)
#loc171 = loc("CWE510_Trapdoor__ip_based_logic_05.c":281:11)
#loc172 = loc("/usr/include/stdlib.h":575:1)
#loc173 = loc("/usr/include/stdlib.h":575:41)
#loc174 = loc("/usr/include/time.h":76:1)
#loc175 = loc("/usr/include/time.h":76:38)
#loc176 = loc("CWE510_Trapdoor__ip_based_logic_05.c":298:15)
#loc177 = loc("CWE510_Trapdoor__ip_based_logic_05.c":300:15)
#loc178 = loc("CWE510_Trapdoor__ip_based_logic_05.c":303:15)
#loc179 = loc("CWE510_Trapdoor__ip_based_logic_05.c":305:15)
#loc180 = loc("CWE510_Trapdoor__ip_based_logic_05.c":293:1)
#loc181 = loc("CWE510_Trapdoor__ip_based_logic_05.c":308:1)
#loc186 = loc("CWE510_Trapdoor__ip_based_logic_05.c":294:1)
#loc187 = loc("CWE510_Trapdoor__ip_based_logic_05.c":296:27)
#loc188 = loc("CWE510_Trapdoor__ip_based_logic_05.c":296:22)
#loc189 = loc("CWE510_Trapdoor__ip_based_logic_05.c":296:5)
#loc190 = loc("CWE510_Trapdoor__ip_based_logic_05.c":298:5)
#loc191 = loc("CWE510_Trapdoor__ip_based_logic_05.c":299:5)
#loc192 = loc("CWE510_Trapdoor__ip_based_logic_05.c":299:45)
#loc193 = loc("CWE510_Trapdoor__ip_based_logic_05.c":300:5)
#loc194 = loc("CWE510_Trapdoor__ip_based_logic_05.c":303:5)
#loc195 = loc("CWE510_Trapdoor__ip_based_logic_05.c":304:5)
#loc196 = loc("CWE510_Trapdoor__ip_based_logic_05.c":304:44)
#loc197 = loc("CWE510_Trapdoor__ip_based_logic_05.c":305:5)
#loc198 = loc("CWE510_Trapdoor__ip_based_logic_05.c":307:12)
#loc199 = loc("CWE510_Trapdoor__ip_based_logic_05.c":307:5)
#loc200 = loc("CWE510_Trapdoor__ip_based_logic_05.c":43:1)
#loc201 = loc("CWE510_Trapdoor__ip_based_logic_05.c":43:26)
#loc202 = loc("CWE510_Trapdoor__ip_based_logic_05.c":141:19)
#loc203 = loc("CWE510_Trapdoor__ip_based_logic_05.c":136:1)
#loc204 = loc("CWE510_Trapdoor__ip_based_logic_05.c":207:1)
#loc205 = loc("CWE510_Trapdoor__ip_based_logic_05.c":138:5)
#loc206 = loc("CWE510_Trapdoor__ip_based_logic_05.c":206:5)
#loc207 = loc("CWE510_Trapdoor__ip_based_logic_05.c":138:8)
#loc208 = loc("CWE510_Trapdoor__ip_based_logic_05.c":139:5)
#loc209 = loc("CWE510_Trapdoor__ip_based_logic_05.c":142:5)
#loc210 = loc("CWE510_Trapdoor__ip_based_logic_05.c":144:5)
#loc211 = loc("CWE510_Trapdoor__ip_based_logic_05.c":141:9)
#loc212 = loc("CWE510_Trapdoor__ip_based_logic_05.c":145:9)
#loc213 = loc("CWE510_Trapdoor__ip_based_logic_05.c":205:9)
#loc214 = loc("CWE510_Trapdoor__ip_based_logic_05.c":150:13)
#loc215 = loc("CWE510_Trapdoor__ip_based_logic_05.c":150:32)
#loc216 = loc("CWE510_Trapdoor__ip_based_logic_05.c":151:13)
#loc217 = loc("CWE510_Trapdoor__ip_based_logic_05.c":151:35)
#loc218 = loc("CWE510_Trapdoor__ip_based_logic_05.c":152:13)
#loc219 = loc("CWE510_Trapdoor__ip_based_logic_05.c":152:35)
#loc220 = loc("CWE510_Trapdoor__ip_based_logic_05.c":153:13)
#loc221 = loc("CWE510_Trapdoor__ip_based_logic_05.c":190:21)
#loc222 = loc("CWE510_Trapdoor__ip_based_logic_05.c":162:39)
#loc223 = loc("CWE510_Trapdoor__ip_based_logic_05.c":162:48)
#loc224 = loc("CWE510_Trapdoor__ip_based_logic_05.c":162:61)
#loc225 = loc("CWE510_Trapdoor__ip_based_logic_05.c":162:32)
#loc226 = loc("CWE510_Trapdoor__ip_based_logic_05.c":162:17)
#loc227 = loc("CWE510_Trapdoor__ip_based_logic_05.c":162:72)
#loc228 = loc("CWE510_Trapdoor__ip_based_logic_05.c":163:17)
#loc229 = loc("CWE510_Trapdoor__ip_based_logic_05.c":166:17)
#loc230 = loc("CWE510_Trapdoor__ip_based_logic_05.c":163:21)
#loc231 = loc("CWE510_Trapdoor__ip_based_logic_05.c":163:37)
#loc232 = loc("CWE510_Trapdoor__ip_based_logic_05.c":164:17)
#loc233 = loc("CWE510_Trapdoor__ip_based_logic_05.c":165:21)
#loc234 = loc("CWE510_Trapdoor__ip_based_logic_05.c":167:24)
#loc235 = loc("CWE510_Trapdoor__ip_based_logic_05.c":167:25)
#loc236 = loc("CWE510_Trapdoor__ip_based_logic_05.c":167:34)
#loc237 = loc("CWE510_Trapdoor__ip_based_logic_05.c":167:37)
#loc238 = loc("CWE510_Trapdoor__ip_based_logic_05.c":167:51)
#loc239 = loc("CWE510_Trapdoor__ip_based_logic_05.c":167:17)
#loc240 = loc("CWE510_Trapdoor__ip_based_logic_05.c":167:52)
#loc241 = loc("CWE510_Trapdoor__ip_based_logic_05.c":168:38)
#loc242 = loc("CWE510_Trapdoor__ip_based_logic_05.c":168:17)
#loc243 = loc("CWE510_Trapdoor__ip_based_logic_05.c":169:43)
#loc244 = loc("CWE510_Trapdoor__ip_based_logic_05.c":169:17)
#loc245 = loc("CWE510_Trapdoor__ip_based_logic_05.c":170:42)
#loc246 = loc("CWE510_Trapdoor__ip_based_logic_05.c":170:36)
#loc247 = loc("CWE510_Trapdoor__ip_based_logic_05.c":170:17)
#loc248 = loc("CWE510_Trapdoor__ip_based_logic_05.c":170:47)
#loc249 = loc("CWE510_Trapdoor__ip_based_logic_05.c":171:17)
#loc250 = loc("CWE510_Trapdoor__ip_based_logic_05.c":174:17)
#loc251 = loc("CWE510_Trapdoor__ip_based_logic_05.c":171:26)
#loc252 = loc("CWE510_Trapdoor__ip_based_logic_05.c":171:58)
#loc253 = loc("CWE510_Trapdoor__ip_based_logic_05.c":171:59)
#loc254 = loc("CWE510_Trapdoor__ip_based_logic_05.c":171:68)
#loc255 = loc("CWE510_Trapdoor__ip_based_logic_05.c":171:82)
#loc256 = loc("CWE510_Trapdoor__ip_based_logic_05.c":171:21)
#loc257 = loc("CWE510_Trapdoor__ip_based_logic_05.c":171:88)
#loc258 = loc("CWE510_Trapdoor__ip_based_logic_05.c":172:17)
#loc259 = loc("CWE510_Trapdoor__ip_based_logic_05.c":173:21)
#loc260 = loc("CWE510_Trapdoor__ip_based_logic_05.c":175:17)
#loc261 = loc("CWE510_Trapdoor__ip_based_logic_05.c":178:17)
#loc262 = loc("CWE510_Trapdoor__ip_based_logic_05.c":175:28)
#loc263 = loc("CWE510_Trapdoor__ip_based_logic_05.c":175:42)
#loc264 = loc("CWE510_Trapdoor__ip_based_logic_05.c":175:21)
#loc265 = loc("CWE510_Trapdoor__ip_based_logic_05.c":175:48)
#loc266 = loc("CWE510_Trapdoor__ip_based_logic_05.c":176:17)
#loc267 = loc("CWE510_Trapdoor__ip_based_logic_05.c":177:21)
#loc268 = loc("CWE510_Trapdoor__ip_based_logic_05.c":179:39)
#loc269 = loc("CWE510_Trapdoor__ip_based_logic_05.c":179:53)
#loc270 = loc("CWE510_Trapdoor__ip_based_logic_05.c":179:59)
#loc271 = loc("CWE510_Trapdoor__ip_based_logic_05.c":179:32)
#loc272 = loc("CWE510_Trapdoor__ip_based_logic_05.c":179:17)
#loc273 = loc("CWE510_Trapdoor__ip_based_logic_05.c":179:63)
#loc274 = loc("CWE510_Trapdoor__ip_based_logic_05.c":180:17)
#loc275 = loc("CWE510_Trapdoor__ip_based_logic_05.c":183:17)
#loc276 = loc("CWE510_Trapdoor__ip_based_logic_05.c":180:21)
#loc277 = loc("CWE510_Trapdoor__ip_based_logic_05.c":180:37)
#loc278 = loc("CWE510_Trapdoor__ip_based_logic_05.c":181:17)
#loc279 = loc("CWE510_Trapdoor__ip_based_logic_05.c":182:21)
#loc280 = loc("CWE510_Trapdoor__ip_based_logic_05.c":185:17)
#loc281 = loc("CWE510_Trapdoor__ip_based_logic_05.c":188:17)
#loc282 = loc("CWE510_Trapdoor__ip_based_logic_05.c":185:26)
#loc283 = loc("CWE510_Trapdoor__ip_based_logic_05.c":185:40)
#loc284 = loc("CWE510_Trapdoor__ip_based_logic_05.c":185:57)
#loc285 = loc("CWE510_Trapdoor__ip_based_logic_05.c":185:79)
#loc286 = loc("CWE510_Trapdoor__ip_based_logic_05.c":185:82)
#loc287 = loc("CWE510_Trapdoor__ip_based_logic_05.c":185:21)
#loc288 = loc("CWE510_Trapdoor__ip_based_logic_05.c":185:88)
#loc289 = loc("CWE510_Trapdoor__ip_based_logic_05.c":186:17)
#loc290 = loc("CWE510_Trapdoor__ip_based_logic_05.c":187:31)
#loc291 = loc("CWE510_Trapdoor__ip_based_logic_05.c":187:21)
#loc292 = loc("CWE510_Trapdoor__ip_based_logic_05.c":190:20)
#loc293 = loc("CWE510_Trapdoor__ip_based_logic_05.c":191:13)
#loc294 = loc("CWE510_Trapdoor__ip_based_logic_05.c":194:13)
#loc295 = loc("CWE510_Trapdoor__ip_based_logic_05.c":191:17)
#loc296 = loc("CWE510_Trapdoor__ip_based_logic_05.c":191:33)
#loc297 = loc("CWE510_Trapdoor__ip_based_logic_05.c":192:13)
#loc298 = loc("CWE510_Trapdoor__ip_based_logic_05.c":193:30)
#loc299 = loc("CWE510_Trapdoor__ip_based_logic_05.c":193:17)
#loc300 = loc("CWE510_Trapdoor__ip_based_logic_05.c":195:13)
#loc301 = loc("CWE510_Trapdoor__ip_based_logic_05.c":198:13)
#loc302 = loc("CWE510_Trapdoor__ip_based_logic_05.c":195:17)
#loc303 = loc("CWE510_Trapdoor__ip_based_logic_05.c":195:33)
#loc304 = loc("CWE510_Trapdoor__ip_based_logic_05.c":196:13)
#loc305 = loc("CWE510_Trapdoor__ip_based_logic_05.c":197:30)
#loc306 = loc("CWE510_Trapdoor__ip_based_logic_05.c":197:17)
#loc307 = loc("CWE510_Trapdoor__ip_based_logic_05.c":210:1)
#loc308 = loc("CWE510_Trapdoor__ip_based_logic_05.c":276:1)
#loc309 = loc("CWE510_Trapdoor__ip_based_logic_05.c":212:5)
#loc310 = loc("CWE510_Trapdoor__ip_based_logic_05.c":275:5)
#loc311 = loc("CWE510_Trapdoor__ip_based_logic_05.c":212:8)
#loc312 = loc("CWE510_Trapdoor__ip_based_logic_05.c":213:5)
#loc313 = loc("CWE510_Trapdoor__ip_based_logic_05.c":214:9)
#loc314 = loc("CWE510_Trapdoor__ip_based_logic_05.c":274:9)
#loc315 = loc("CWE510_Trapdoor__ip_based_logic_05.c":219:13)
#loc316 = loc("CWE510_Trapdoor__ip_based_logic_05.c":219:32)
#loc317 = loc("CWE510_Trapdoor__ip_based_logic_05.c":220:13)
#loc318 = loc("CWE510_Trapdoor__ip_based_logic_05.c":220:35)
#loc319 = loc("CWE510_Trapdoor__ip_based_logic_05.c":221:13)
#loc320 = loc("CWE510_Trapdoor__ip_based_logic_05.c":221:35)
#loc321 = loc("CWE510_Trapdoor__ip_based_logic_05.c":222:13)
#loc322 = loc("CWE510_Trapdoor__ip_based_logic_05.c":259:21)
#loc323 = loc("CWE510_Trapdoor__ip_based_logic_05.c":231:39)
#loc324 = loc("CWE510_Trapdoor__ip_based_logic_05.c":231:48)
#loc325 = loc("CWE510_Trapdoor__ip_based_logic_05.c":231:61)
#loc326 = loc("CWE510_Trapdoor__ip_based_logic_05.c":231:32)
#loc327 = loc("CWE510_Trapdoor__ip_based_logic_05.c":231:17)
#loc328 = loc("CWE510_Trapdoor__ip_based_logic_05.c":231:72)
#loc329 = loc("CWE510_Trapdoor__ip_based_logic_05.c":232:17)
#loc330 = loc("CWE510_Trapdoor__ip_based_logic_05.c":235:17)
#loc331 = loc("CWE510_Trapdoor__ip_based_logic_05.c":232:21)
#loc332 = loc("CWE510_Trapdoor__ip_based_logic_05.c":232:37)
#loc333 = loc("CWE510_Trapdoor__ip_based_logic_05.c":233:17)
#loc334 = loc("CWE510_Trapdoor__ip_based_logic_05.c":234:21)
#loc335 = loc("CWE510_Trapdoor__ip_based_logic_05.c":236:24)
#loc336 = loc("CWE510_Trapdoor__ip_based_logic_05.c":236:25)
#loc337 = loc("CWE510_Trapdoor__ip_based_logic_05.c":236:34)
#loc338 = loc("CWE510_Trapdoor__ip_based_logic_05.c":236:37)
#loc339 = loc("CWE510_Trapdoor__ip_based_logic_05.c":236:51)
#loc340 = loc("CWE510_Trapdoor__ip_based_logic_05.c":236:17)
#loc341 = loc("CWE510_Trapdoor__ip_based_logic_05.c":236:52)
#loc342 = loc("CWE510_Trapdoor__ip_based_logic_05.c":237:38)
#loc343 = loc("CWE510_Trapdoor__ip_based_logic_05.c":237:17)
#loc344 = loc("CWE510_Trapdoor__ip_based_logic_05.c":238:43)
#loc345 = loc("CWE510_Trapdoor__ip_based_logic_05.c":238:17)
#loc346 = loc("CWE510_Trapdoor__ip_based_logic_05.c":239:42)
#loc347 = loc("CWE510_Trapdoor__ip_based_logic_05.c":239:36)
#loc348 = loc("CWE510_Trapdoor__ip_based_logic_05.c":239:17)
#loc349 = loc("CWE510_Trapdoor__ip_based_logic_05.c":239:47)
#loc350 = loc("CWE510_Trapdoor__ip_based_logic_05.c":240:17)
#loc351 = loc("CWE510_Trapdoor__ip_based_logic_05.c":243:17)
#loc352 = loc("CWE510_Trapdoor__ip_based_logic_05.c":240:26)
#loc353 = loc("CWE510_Trapdoor__ip_based_logic_05.c":240:58)
#loc354 = loc("CWE510_Trapdoor__ip_based_logic_05.c":240:59)
#loc355 = loc("CWE510_Trapdoor__ip_based_logic_05.c":240:68)
#loc356 = loc("CWE510_Trapdoor__ip_based_logic_05.c":240:82)
#loc357 = loc("CWE510_Trapdoor__ip_based_logic_05.c":240:21)
#loc358 = loc("CWE510_Trapdoor__ip_based_logic_05.c":240:88)
#loc359 = loc("CWE510_Trapdoor__ip_based_logic_05.c":241:17)
#loc360 = loc("CWE510_Trapdoor__ip_based_logic_05.c":242:21)
#loc361 = loc("CWE510_Trapdoor__ip_based_logic_05.c":244:17)
#loc362 = loc("CWE510_Trapdoor__ip_based_logic_05.c":247:17)
#loc363 = loc("CWE510_Trapdoor__ip_based_logic_05.c":244:28)
#loc364 = loc("CWE510_Trapdoor__ip_based_logic_05.c":244:42)
#loc365 = loc("CWE510_Trapdoor__ip_based_logic_05.c":244:21)
#loc366 = loc("CWE510_Trapdoor__ip_based_logic_05.c":244:48)
#loc367 = loc("CWE510_Trapdoor__ip_based_logic_05.c":245:17)
#loc368 = loc("CWE510_Trapdoor__ip_based_logic_05.c":246:21)
#loc369 = loc("CWE510_Trapdoor__ip_based_logic_05.c":248:39)
#loc370 = loc("CWE510_Trapdoor__ip_based_logic_05.c":248:53)
#loc371 = loc("CWE510_Trapdoor__ip_based_logic_05.c":248:59)
#loc372 = loc("CWE510_Trapdoor__ip_based_logic_05.c":248:32)
#loc373 = loc("CWE510_Trapdoor__ip_based_logic_05.c":248:17)
#loc374 = loc("CWE510_Trapdoor__ip_based_logic_05.c":248:63)
#loc375 = loc("CWE510_Trapdoor__ip_based_logic_05.c":249:17)
#loc376 = loc("CWE510_Trapdoor__ip_based_logic_05.c":252:17)
#loc377 = loc("CWE510_Trapdoor__ip_based_logic_05.c":249:21)
#loc378 = loc("CWE510_Trapdoor__ip_based_logic_05.c":249:37)
#loc379 = loc("CWE510_Trapdoor__ip_based_logic_05.c":250:17)
#loc380 = loc("CWE510_Trapdoor__ip_based_logic_05.c":251:21)
#loc381 = loc("CWE510_Trapdoor__ip_based_logic_05.c":254:17)
#loc382 = loc("CWE510_Trapdoor__ip_based_logic_05.c":257:17)
#loc383 = loc("CWE510_Trapdoor__ip_based_logic_05.c":254:26)
#loc384 = loc("CWE510_Trapdoor__ip_based_logic_05.c":254:40)
#loc385 = loc("CWE510_Trapdoor__ip_based_logic_05.c":254:57)
#loc386 = loc("CWE510_Trapdoor__ip_based_logic_05.c":254:79)
#loc387 = loc("CWE510_Trapdoor__ip_based_logic_05.c":254:82)
#loc388 = loc("CWE510_Trapdoor__ip_based_logic_05.c":254:21)
#loc389 = loc("CWE510_Trapdoor__ip_based_logic_05.c":254:88)
#loc390 = loc("CWE510_Trapdoor__ip_based_logic_05.c":255:17)
#loc391 = loc("CWE510_Trapdoor__ip_based_logic_05.c":256:31)
#loc392 = loc("CWE510_Trapdoor__ip_based_logic_05.c":256:21)
#loc393 = loc("CWE510_Trapdoor__ip_based_logic_05.c":259:20)
#loc394 = loc("CWE510_Trapdoor__ip_based_logic_05.c":260:13)
#loc395 = loc("CWE510_Trapdoor__ip_based_logic_05.c":263:13)
#loc396 = loc("CWE510_Trapdoor__ip_based_logic_05.c":260:17)
#loc397 = loc("CWE510_Trapdoor__ip_based_logic_05.c":260:33)
#loc398 = loc("CWE510_Trapdoor__ip_based_logic_05.c":261:13)
#loc399 = loc("CWE510_Trapdoor__ip_based_logic_05.c":262:30)
#loc400 = loc("CWE510_Trapdoor__ip_based_logic_05.c":262:17)
#loc401 = loc("CWE510_Trapdoor__ip_based_logic_05.c":264:13)
#loc402 = loc("CWE510_Trapdoor__ip_based_logic_05.c":267:13)
#loc403 = loc("CWE510_Trapdoor__ip_based_logic_05.c":264:17)
#loc404 = loc("CWE510_Trapdoor__ip_based_logic_05.c":264:33)
#loc405 = loc("CWE510_Trapdoor__ip_based_logic_05.c":265:13)
#loc406 = loc("CWE510_Trapdoor__ip_based_logic_05.c":266:30)
#loc407 = loc("CWE510_Trapdoor__ip_based_logic_05.c":266:17)
#loc408 = loc(fused[#loc1, #loc2])
#loc409 = loc(fused[#loc3, #loc4])
#loc410 = loc(fused[#loc5, #loc6])
#loc411 = loc(fused[#loc7, #loc8])
#loc412 = loc(fused[#loc9, #loc10])
#loc413 = loc(fused[#loc11, #loc12])
#loc414 = loc(fused[#loc13, #loc14])
#loc415 = loc(fused[#loc15, #loc16])
#loc416 = loc(fused[#loc18, #loc19])
#loc417 = loc(fused[#loc20, #loc21])
#loc418 = loc(fused[#loc24, #loc25])
#loc419 = loc(fused[#loc27, #loc28])
#loc420 = loc(fused[#loc29, #loc30])
#loc421 = loc(fused[#loc31, #loc32])
#loc422 = loc(fused[#loc34, #loc32])
#loc423 = loc(fused[#loc35, #loc36])
#loc424 = loc(fused[#loc37, #loc38])
#loc425 = loc(fused[#loc37, #loc39])
#loc426 = loc(fused[#loc40, #loc41])
#loc427 = loc(fused[#loc42, #loc43])
#loc428 = loc(fused[#loc44, #loc45])
#loc429 = loc(fused[#loc46, #loc41])
#loc430 = loc(fused[#loc47, #loc48])
#loc431 = loc(fused[#loc53, #loc54])
#loc432 = loc(fused[#loc55, #loc56])
#loc433 = loc(fused[#loc57, #loc58])
#loc434 = loc(fused[#loc59, #loc56])
#loc435 = loc(fused[#loc61, #loc62])
#loc436 = loc(fused[#loc64, #loc65])
#loc437 = loc(fused[#loc66, #loc67])
#loc438 = loc(fused[#loc70, #loc68])
#loc439 = loc(fused[#loc74, #loc71])
#loc440 = loc(fused[#loc78, #loc79])
#loc441 = loc(fused[#loc80, #loc81])
#loc442 = loc(fused[#loc83, #loc84])
#loc443 = loc(fused[#loc85, #loc86])
#loc444 = loc(fused[#loc87, #loc88])
#loc445 = loc(fused[#loc89, #loc81])
#loc446 = loc(fused[#loc91, #loc92])
#loc447 = loc(fused[#loc95, #loc96])
#loc448 = loc(fused[#loc97, #loc92])
#loc449 = loc(fused[#loc103, #loc104])
#loc450 = loc(fused[#loc105, #loc106])
#loc451 = loc(fused[#loc107, #loc108])
#loc452 = loc(fused[#loc109, #loc106])
#loc453 = loc(fused[#loc111, #loc112])
#loc454 = loc(fused[#loc114, #loc115])
#loc455 = loc(fused[#loc116, #loc117])
#loc456 = loc(fused[#loc118, #loc119])
#loc457 = loc(fused[#loc121, #loc112])
#loc458 = loc(fused[#loc123, #loc124])
#loc459 = loc(fused[#loc125, #loc127])
#loc460 = loc(fused[#loc128, #loc129, #loc130, #loc124])
#loc461 = loc(fused[#loc131, #loc132])
#loc462 = loc(fused[#loc134, #loc135])
#loc463 = loc(fused[#loc137, #loc138])
#loc464 = loc(fused[#loc139, #loc132])
#loc465 = loc(fused[#loc141, #loc142])
#loc466 = loc(fused[#loc144, #loc145])
#loc467 = loc(fused[#loc147, #loc148])
#loc468 = loc(fused[#loc149, #loc142])
#loc469 = loc(fused[#loc152, #loc153])
#loc470 = loc(fused[#loc154, #loc155])
#loc471 = loc(fused[#loc156, #loc153])
#loc472 = loc(fused[#loc159, #loc160])
#loc473 = loc(fused[#loc161, #loc162])
#loc474 = loc(fused[#loc163, #loc160])
#loc475 = loc(fused[#loc166, #loc167])
#loc476 = loc(fused[#loc168, #loc169])
#loc477 = loc(fused[#loc170, #loc171])
#loc478 = loc(fused[#loc172, #loc173])
#loc479 = loc(fused[#loc174, #loc175])
#loc480 = loc(fused[#loc180, #loc181])
#loc483 = loc(fused[#loc191, #loc192])
#loc484 = loc(fused[#loc195, #loc196])
#loc485 = loc(fused[#loc199, #loc198])
#loc486 = loc(fused[#loc200, #loc201])
#loc487 = loc(fused[#loc203, #loc204])
#loc488 = loc(fused[#loc205, #loc206])
#loc489 = loc(fused[#loc208, #loc209, #loc210, #loc206])
#loc490 = loc(fused[#loc212, #loc213])
#loc491 = loc(fused[#loc214, #loc215])
#loc492 = loc(fused[#loc216, #loc217])
#loc493 = loc(fused[#loc218, #loc219])
#loc494 = loc(fused[#loc220, #loc221])
#loc495 = loc(fused[#loc226, #loc227])
#loc496 = loc(fused[#loc228, #loc229])
#loc497 = loc(fused[#loc230, #loc231])
#loc498 = loc(fused[#loc232, #loc229])
#loc499 = loc(fused[#loc234, #loc235])
#loc500 = loc(fused[#loc237, #loc238])
#loc501 = loc(fused[#loc239, #loc240])
#loc502 = loc(fused[#loc242, #loc241])
#loc503 = loc(fused[#loc244, #loc243])
#loc504 = loc(fused[#loc247, #loc248])
#loc505 = loc(fused[#loc249, #loc250])
#loc506 = loc(fused[#loc252, #loc253])
#loc507 = loc(fused[#loc254, #loc255])
#loc508 = loc(fused[#loc256, #loc257])
#loc509 = loc(fused[#loc258, #loc250])
#loc510 = loc(fused[#loc260, #loc261])
#loc511 = loc(fused[#loc264, #loc265])
#loc512 = loc(fused[#loc266, #loc261])
#loc513 = loc(fused[#loc272, #loc273])
#loc514 = loc(fused[#loc274, #loc275])
#loc515 = loc(fused[#loc276, #loc277])
#loc516 = loc(fused[#loc278, #loc275])
#loc517 = loc(fused[#loc280, #loc281])
#loc518 = loc(fused[#loc284, #loc285])
#loc519 = loc(fused[#loc287, #loc288])
#loc520 = loc(fused[#loc289, #loc281])
#loc521 = loc(fused[#loc293, #loc294])
#loc522 = loc(fused[#loc295, #loc296])
#loc523 = loc(fused[#loc297, #loc294])
#loc524 = loc(fused[#loc300, #loc301])
#loc525 = loc(fused[#loc302, #loc303])
#loc526 = loc(fused[#loc304, #loc301])
#loc527 = loc(fused[#loc307, #loc308])
#loc528 = loc(fused[#loc309, #loc310])
#loc529 = loc(fused[#loc312, #loc310])
#loc530 = loc(fused[#loc313, #loc314])
#loc531 = loc(fused[#loc315, #loc316])
#loc532 = loc(fused[#loc317, #loc318])
#loc533 = loc(fused[#loc319, #loc320])
#loc534 = loc(fused[#loc321, #loc322])
#loc535 = loc(fused[#loc327, #loc328])
#loc536 = loc(fused[#loc329, #loc330])
#loc537 = loc(fused[#loc331, #loc332])
#loc538 = loc(fused[#loc333, #loc330])
#loc539 = loc(fused[#loc335, #loc336])
#loc540 = loc(fused[#loc338, #loc339])
#loc541 = loc(fused[#loc340, #loc341])
#loc542 = loc(fused[#loc343, #loc342])
#loc543 = loc(fused[#loc345, #loc344])
#loc544 = loc(fused[#loc348, #loc349])
#loc545 = loc(fused[#loc350, #loc351])
#loc546 = loc(fused[#loc353, #loc354])
#loc547 = loc(fused[#loc355, #loc356])
#loc548 = loc(fused[#loc357, #loc358])
#loc549 = loc(fused[#loc359, #loc351])
#loc550 = loc(fused[#loc361, #loc362])
#loc551 = loc(fused[#loc365, #loc366])
#loc552 = loc(fused[#loc367, #loc362])
#loc553 = loc(fused[#loc373, #loc374])
#loc554 = loc(fused[#loc375, #loc376])
#loc555 = loc(fused[#loc377, #loc378])
#loc556 = loc(fused[#loc379, #loc376])
#loc557 = loc(fused[#loc381, #loc382])
#loc558 = loc(fused[#loc385, #loc386])
#loc559 = loc(fused[#loc388, #loc389])
#loc560 = loc(fused[#loc390, #loc382])
#loc561 = loc(fused[#loc394, #loc395])
#loc562 = loc(fused[#loc396, #loc397])
#loc563 = loc(fused[#loc398, #loc395])
#loc564 = loc(fused[#loc401, #loc402])
#loc565 = loc(fused[#loc403, #loc404])
#loc566 = loc(fused[#loc405, #loc402])
