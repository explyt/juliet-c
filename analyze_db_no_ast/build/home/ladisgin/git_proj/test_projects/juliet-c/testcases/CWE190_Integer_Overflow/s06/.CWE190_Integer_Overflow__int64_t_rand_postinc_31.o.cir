!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE190_Integer_Overflow/s06/CWE190_Integer_Overflow__int64_t_rand_postinc_31.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @rand() -> !s32i extra(#fn_attr) loc(#loc87)
  cir.func private  @printLongLongLine(!s64i) loc(#loc88)
  cir.func no_proto  @CWE190_Integer_Overflow__int64_t_rand_postinc_31_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc90)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc9)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc91)
    %2 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc11)
    %4 = cir.binop(and, %2, %3) : !s32i loc(#loc11)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc11)
    %6 = cir.ternary(%5, true {
      %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
      %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc11)
      %10 = cir.const #cir.int<60> : !s32i loc(#loc11)
      %11 = cir.shift(left, %9 : !u64i, %10 : !s32i) -> !u64i loc(#loc11)
      %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
      %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc11)
      %14 = cir.const #cir.int<45> : !s32i loc(#loc11)
      %15 = cir.shift(left, %13 : !u64i, %14 : !s32i) -> !u64i loc(#loc11)
      %16 = cir.binop(xor, %11, %15) : !u64i loc(#loc11)
      %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
      %18 = cir.cast(integral, %17 : !s32i), !u64i loc(#loc11)
      %19 = cir.const #cir.int<30> : !s32i loc(#loc11)
      %20 = cir.shift(left, %18 : !u64i, %19 : !s32i) -> !u64i loc(#loc11)
      %21 = cir.binop(xor, %16, %20) : !u64i loc(#loc11)
      %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
      %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc11)
      %24 = cir.const #cir.int<15> : !s32i loc(#loc11)
      %25 = cir.shift(left, %23 : !u64i, %24 : !s32i) -> !u64i loc(#loc11)
      %26 = cir.binop(xor, %21, %25) : !u64i loc(#loc11)
      %27 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
      %28 = cir.cast(integral, %27 : !s32i), !u64i loc(#loc11)
      %29 = cir.binop(xor, %26, %28) : !u64i loc(#loc11)
      cir.yield %29 : !u64i loc(#loc11)
    }, false {
      %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
      %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc11)
      %10 = cir.const #cir.int<60> : !s32i loc(#loc11)
      %11 = cir.shift(left, %9 : !u64i, %10 : !s32i) -> !u64i loc(#loc11)
      %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
      %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc11)
      %14 = cir.const #cir.int<45> : !s32i loc(#loc11)
      %15 = cir.shift(left, %13 : !u64i, %14 : !s32i) -> !u64i loc(#loc11)
      %16 = cir.binop(xor, %11, %15) : !u64i loc(#loc11)
      %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
      %18 = cir.cast(integral, %17 : !s32i), !u64i loc(#loc11)
      %19 = cir.const #cir.int<30> : !s32i loc(#loc11)
      %20 = cir.shift(left, %18 : !u64i, %19 : !s32i) -> !u64i loc(#loc11)
      %21 = cir.binop(xor, %16, %20) : !u64i loc(#loc11)
      %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
      %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc11)
      %24 = cir.const #cir.int<15> : !s32i loc(#loc11)
      %25 = cir.shift(left, %23 : !u64i, %24 : !s32i) -> !u64i loc(#loc11)
      %26 = cir.binop(xor, %21, %25) : !u64i loc(#loc11)
      %27 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
      %28 = cir.cast(integral, %27 : !s32i), !u64i loc(#loc11)
      %29 = cir.binop(xor, %26, %28) : !u64i loc(#loc11)
      %30 = cir.unary(minus, %29) : !u64i, !u64i loc(#loc11)
      %31 = cir.const #cir.int<1> : !s32i loc(#loc11)
      %32 = cir.cast(integral, %31 : !s32i), !u64i loc(#loc11)
      %33 = cir.binop(sub, %30, %32) : !u64i loc(#loc11)
      cir.yield %33 : !u64i loc(#loc11)
    }) : (!cir.bool) -> !u64i loc(#loc11)
    %7 = cir.cast(integral, %6 : !u64i), !s64i loc(#loc11)
    cir.store %7, %0 : !s64i, !cir.ptr<!s64i> loc(#loc92)
    cir.scope {
      %8 = cir.alloca !s64i, !cir.ptr<!s64i>, ["dataCopy", init] {alignment = 8 : i64} loc(#loc94)
      %9 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data", init] {alignment = 8 : i64} loc(#loc95)
      %10 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc16)
      cir.store %10, %8 : !s64i, !cir.ptr<!s64i> loc(#loc94)
      %11 = cir.load %8 : !cir.ptr<!s64i>, !s64i loc(#loc18)
      cir.store %11, %9 : !s64i, !cir.ptr<!s64i> loc(#loc95)
      cir.scope {
        %12 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc97)
        %13 = cir.load %9 : !cir.ptr<!s64i>, !s64i loc(#loc23)
        %14 = cir.unary(inc, %13) : !s64i, !s64i loc(#loc24)
        cir.store %14, %9 : !s64i, !cir.ptr<!s64i> loc(#loc98)
        %15 = cir.load %9 : !cir.ptr<!s64i>, !s64i loc(#loc22)
        cir.store %15, %12 : !s64i, !cir.ptr<!s64i> loc(#loc97)
        %16 = cir.load %12 : !cir.ptr<!s64i>, !s64i loc(#loc25)
        cir.call @printLongLongLine(%16) : (!s64i) -> () loc(#loc26)
      } loc(#loc96)
    } loc(#loc93)
    cir.return loc(#loc6)
  } loc(#loc89)
  cir.func no_proto  @CWE190_Integer_Overflow__int64_t_rand_postinc_31_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc100)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc29)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc101)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc31)
    cir.return loc(#loc28)
  } loc(#loc99)
  cir.func no_proto internal private  @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc103)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc37)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc104)
    %2 = cir.const #cir.int<2> : !s32i loc(#loc39)
    %3 = cir.cast(integral, %2 : !s32i), !s64i loc(#loc39)
    cir.store %3, %0 : !s64i, !cir.ptr<!s64i> loc(#loc105)
    cir.scope {
      %4 = cir.alloca !s64i, !cir.ptr<!s64i>, ["dataCopy", init] {alignment = 8 : i64} loc(#loc107)
      %5 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data", init] {alignment = 8 : i64} loc(#loc108)
      %6 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc44)
      cir.store %6, %4 : !s64i, !cir.ptr<!s64i> loc(#loc107)
      %7 = cir.load %4 : !cir.ptr<!s64i>, !s64i loc(#loc46)
      cir.store %7, %5 : !s64i, !cir.ptr<!s64i> loc(#loc108)
      cir.scope {
        %8 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc110)
        %9 = cir.load %5 : !cir.ptr<!s64i>, !s64i loc(#loc51)
        %10 = cir.unary(inc, %9) : !s64i, !s64i loc(#loc52)
        cir.store %10, %5 : !s64i, !cir.ptr<!s64i> loc(#loc111)
        %11 = cir.load %5 : !cir.ptr<!s64i>, !s64i loc(#loc50)
        cir.store %11, %8 : !s64i, !cir.ptr<!s64i> loc(#loc110)
        %12 = cir.load %8 : !cir.ptr<!s64i>, !s64i loc(#loc53)
        cir.call @printLongLongLine(%12) : (!s64i) -> () loc(#loc54)
      } loc(#loc109)
    } loc(#loc106)
    cir.return loc(#loc34)
  } loc(#loc102)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc112)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc57)
  cir.func no_proto internal private  @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc114)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc62)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc115)
    %2 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc64)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc64)
    %4 = cir.binop(and, %2, %3) : !s32i loc(#loc64)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc64)
    %6 = cir.ternary(%5, true {
      %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc64)
      %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc64)
      %10 = cir.const #cir.int<60> : !s32i loc(#loc64)
      %11 = cir.shift(left, %9 : !u64i, %10 : !s32i) -> !u64i loc(#loc64)
      %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc64)
      %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc64)
      %14 = cir.const #cir.int<45> : !s32i loc(#loc64)
      %15 = cir.shift(left, %13 : !u64i, %14 : !s32i) -> !u64i loc(#loc64)
      %16 = cir.binop(xor, %11, %15) : !u64i loc(#loc64)
      %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc64)
      %18 = cir.cast(integral, %17 : !s32i), !u64i loc(#loc64)
      %19 = cir.const #cir.int<30> : !s32i loc(#loc64)
      %20 = cir.shift(left, %18 : !u64i, %19 : !s32i) -> !u64i loc(#loc64)
      %21 = cir.binop(xor, %16, %20) : !u64i loc(#loc64)
      %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc64)
      %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc64)
      %24 = cir.const #cir.int<15> : !s32i loc(#loc64)
      %25 = cir.shift(left, %23 : !u64i, %24 : !s32i) -> !u64i loc(#loc64)
      %26 = cir.binop(xor, %21, %25) : !u64i loc(#loc64)
      %27 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc64)
      %28 = cir.cast(integral, %27 : !s32i), !u64i loc(#loc64)
      %29 = cir.binop(xor, %26, %28) : !u64i loc(#loc64)
      cir.yield %29 : !u64i loc(#loc64)
    }, false {
      %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc64)
      %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc64)
      %10 = cir.const #cir.int<60> : !s32i loc(#loc64)
      %11 = cir.shift(left, %9 : !u64i, %10 : !s32i) -> !u64i loc(#loc64)
      %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc64)
      %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc64)
      %14 = cir.const #cir.int<45> : !s32i loc(#loc64)
      %15 = cir.shift(left, %13 : !u64i, %14 : !s32i) -> !u64i loc(#loc64)
      %16 = cir.binop(xor, %11, %15) : !u64i loc(#loc64)
      %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc64)
      %18 = cir.cast(integral, %17 : !s32i), !u64i loc(#loc64)
      %19 = cir.const #cir.int<30> : !s32i loc(#loc64)
      %20 = cir.shift(left, %18 : !u64i, %19 : !s32i) -> !u64i loc(#loc64)
      %21 = cir.binop(xor, %16, %20) : !u64i loc(#loc64)
      %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc64)
      %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc64)
      %24 = cir.const #cir.int<15> : !s32i loc(#loc64)
      %25 = cir.shift(left, %23 : !u64i, %24 : !s32i) -> !u64i loc(#loc64)
      %26 = cir.binop(xor, %21, %25) : !u64i loc(#loc64)
      %27 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc64)
      %28 = cir.cast(integral, %27 : !s32i), !u64i loc(#loc64)
      %29 = cir.binop(xor, %26, %28) : !u64i loc(#loc64)
      %30 = cir.unary(minus, %29) : !u64i, !u64i loc(#loc64)
      %31 = cir.const #cir.int<1> : !s32i loc(#loc64)
      %32 = cir.cast(integral, %31 : !s32i), !u64i loc(#loc64)
      %33 = cir.binop(sub, %30, %32) : !u64i loc(#loc64)
      cir.yield %33 : !u64i loc(#loc64)
    }) : (!cir.bool) -> !u64i loc(#loc64)
    %7 = cir.cast(integral, %6 : !u64i), !s64i loc(#loc64)
    cir.store %7, %0 : !s64i, !cir.ptr<!s64i> loc(#loc116)
    cir.scope {
      %8 = cir.alloca !s64i, !cir.ptr<!s64i>, ["dataCopy", init] {alignment = 8 : i64} loc(#loc118)
      %9 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data", init] {alignment = 8 : i64} loc(#loc119)
      %10 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc69)
      cir.store %10, %8 : !s64i, !cir.ptr<!s64i> loc(#loc118)
      %11 = cir.load %8 : !cir.ptr<!s64i>, !s64i loc(#loc71)
      cir.store %11, %9 : !s64i, !cir.ptr<!s64i> loc(#loc119)
      cir.scope {
        %12 = cir.load %9 : !cir.ptr<!s64i>, !s64i loc(#loc74)
        %13 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc75)
        %14 = cir.cmp(lt, %12, %13) : !s64i, !s32i loc(#loc121)
        %15 = cir.cast(int_to_bool, %14 : !s32i), !cir.bool loc(#loc76)
        cir.if %15 {
          %16 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc123)
          %17 = cir.load %9 : !cir.ptr<!s64i>, !s64i loc(#loc82)
          %18 = cir.unary(inc, %17) : !s64i, !s64i loc(#loc83)
          cir.store %18, %9 : !s64i, !cir.ptr<!s64i> loc(#loc124)
          %19 = cir.load %9 : !cir.ptr<!s64i>, !s64i loc(#loc81)
          cir.store %19, %16 : !s64i, !cir.ptr<!s64i> loc(#loc123)
          %20 = cir.load %16 : !cir.ptr<!s64i>, !s64i loc(#loc84)
          cir.call @printLongLongLine(%20) : (!s64i) -> () loc(#loc85)
        } else {
          %16 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc57)
          %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc57)
          cir.call @printLine(%17) : (!cir.ptr<!s8i>) -> () loc(#loc86)
        } loc(#loc122)
      } loc(#loc120)
    } loc(#loc117)
    cir.return loc(#loc59)
  } loc(#loc113)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE190_Integer_Overflow/s06/CWE190_Integer_Overflow__int64_t_rand_postinc_31.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":26:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":26:49)
#loc5 = loc("CWE190_Integer_Overflow__int64_t_rand_postinc_31.c":22:1)
#loc6 = loc("CWE190_Integer_Overflow__int64_t_rand_postinc_31.c":38:1)
#loc7 = loc("CWE190_Integer_Overflow__int64_t_rand_postinc_31.c":24:5)
#loc8 = loc("CWE190_Integer_Overflow__int64_t_rand_postinc_31.c":24:13)
#loc9 = loc("CWE190_Integer_Overflow__int64_t_rand_postinc_31.c":25:12)
#loc10 = loc("CWE190_Integer_Overflow__int64_t_rand_postinc_31.c":25:5)
#loc11 = loc("CWE190_Integer_Overflow__int64_t_rand_postinc_31.c":27:21)
#loc12 = loc("CWE190_Integer_Overflow__int64_t_rand_postinc_31.c":27:5)
#loc13 = loc("CWE190_Integer_Overflow__int64_t_rand_postinc_31.c":28:5)
#loc14 = loc("CWE190_Integer_Overflow__int64_t_rand_postinc_31.c":37:5)
#loc15 = loc("CWE190_Integer_Overflow__int64_t_rand_postinc_31.c":29:9)
#loc16 = loc("CWE190_Integer_Overflow__int64_t_rand_postinc_31.c":29:28)
#loc17 = loc("CWE190_Integer_Overflow__int64_t_rand_postinc_31.c":30:9)
#loc18 = loc("CWE190_Integer_Overflow__int64_t_rand_postinc_31.c":30:24)
#loc19 = loc("CWE190_Integer_Overflow__int64_t_rand_postinc_31.c":31:9)
#loc20 = loc("CWE190_Integer_Overflow__int64_t_rand_postinc_31.c":36:9)
#loc21 = loc("CWE190_Integer_Overflow__int64_t_rand_postinc_31.c":34:13)
#loc22 = loc("CWE190_Integer_Overflow__int64_t_rand_postinc_31.c":34:30)
#loc23 = loc("CWE190_Integer_Overflow__int64_t_rand_postinc_31.c":33:17)
#loc24 = loc("CWE190_Integer_Overflow__int64_t_rand_postinc_31.c":33:13)
#loc25 = loc("CWE190_Integer_Overflow__int64_t_rand_postinc_31.c":35:31)
#loc26 = loc("CWE190_Integer_Overflow__int64_t_rand_postinc_31.c":35:13)
#loc27 = loc("CWE190_Integer_Overflow__int64_t_rand_postinc_31.c":87:1)
#loc28 = loc("CWE190_Integer_Overflow__int64_t_rand_postinc_31.c":91:1)
#loc29 = loc("CWE190_Integer_Overflow__int64_t_rand_postinc_31.c":89:5)
#loc30 = loc("CWE190_Integer_Overflow__int64_t_rand_postinc_31.c":89:13)
#loc31 = loc("CWE190_Integer_Overflow__int64_t_rand_postinc_31.c":90:5)
#loc32 = loc("CWE190_Integer_Overflow__int64_t_rand_postinc_31.c":90:13)
#loc33 = loc("CWE190_Integer_Overflow__int64_t_rand_postinc_31.c":45:1)
#loc34 = loc("CWE190_Integer_Overflow__int64_t_rand_postinc_31.c":61:1)
#loc35 = loc("CWE190_Integer_Overflow__int64_t_rand_postinc_31.c":47:5)
#loc36 = loc("CWE190_Integer_Overflow__int64_t_rand_postinc_31.c":47:13)
#loc37 = loc("CWE190_Integer_Overflow__int64_t_rand_postinc_31.c":48:12)
#loc38 = loc("CWE190_Integer_Overflow__int64_t_rand_postinc_31.c":48:5)
#loc39 = loc("CWE190_Integer_Overflow__int64_t_rand_postinc_31.c":50:12)
#loc40 = loc("CWE190_Integer_Overflow__int64_t_rand_postinc_31.c":50:5)
#loc41 = loc("CWE190_Integer_Overflow__int64_t_rand_postinc_31.c":51:5)
#loc42 = loc("CWE190_Integer_Overflow__int64_t_rand_postinc_31.c":60:5)
#loc43 = loc("CWE190_Integer_Overflow__int64_t_rand_postinc_31.c":52:9)
#loc44 = loc("CWE190_Integer_Overflow__int64_t_rand_postinc_31.c":52:28)
#loc45 = loc("CWE190_Integer_Overflow__int64_t_rand_postinc_31.c":53:9)
#loc46 = loc("CWE190_Integer_Overflow__int64_t_rand_postinc_31.c":53:24)
#loc47 = loc("CWE190_Integer_Overflow__int64_t_rand_postinc_31.c":54:9)
#loc48 = loc("CWE190_Integer_Overflow__int64_t_rand_postinc_31.c":59:9)
#loc49 = loc("CWE190_Integer_Overflow__int64_t_rand_postinc_31.c":57:13)
#loc50 = loc("CWE190_Integer_Overflow__int64_t_rand_postinc_31.c":57:30)
#loc51 = loc("CWE190_Integer_Overflow__int64_t_rand_postinc_31.c":56:17)
#loc52 = loc("CWE190_Integer_Overflow__int64_t_rand_postinc_31.c":56:13)
#loc53 = loc("CWE190_Integer_Overflow__int64_t_rand_postinc_31.c":58:31)
#loc54 = loc("CWE190_Integer_Overflow__int64_t_rand_postinc_31.c":58:13)
#loc55 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc56 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc57 = loc("CWE190_Integer_Overflow__int64_t_rand_postinc_31.c":82:23)
#loc58 = loc("CWE190_Integer_Overflow__int64_t_rand_postinc_31.c":64:1)
#loc59 = loc("CWE190_Integer_Overflow__int64_t_rand_postinc_31.c":85:1)
#loc60 = loc("CWE190_Integer_Overflow__int64_t_rand_postinc_31.c":66:5)
#loc61 = loc("CWE190_Integer_Overflow__int64_t_rand_postinc_31.c":66:13)
#loc62 = loc("CWE190_Integer_Overflow__int64_t_rand_postinc_31.c":67:12)
#loc63 = loc("CWE190_Integer_Overflow__int64_t_rand_postinc_31.c":67:5)
#loc64 = loc("CWE190_Integer_Overflow__int64_t_rand_postinc_31.c":69:21)
#loc65 = loc("CWE190_Integer_Overflow__int64_t_rand_postinc_31.c":69:5)
#loc66 = loc("CWE190_Integer_Overflow__int64_t_rand_postinc_31.c":70:5)
#loc67 = loc("CWE190_Integer_Overflow__int64_t_rand_postinc_31.c":84:5)
#loc68 = loc("CWE190_Integer_Overflow__int64_t_rand_postinc_31.c":71:9)
#loc69 = loc("CWE190_Integer_Overflow__int64_t_rand_postinc_31.c":71:28)
#loc70 = loc("CWE190_Integer_Overflow__int64_t_rand_postinc_31.c":72:9)
#loc71 = loc("CWE190_Integer_Overflow__int64_t_rand_postinc_31.c":72:24)
#loc72 = loc("CWE190_Integer_Overflow__int64_t_rand_postinc_31.c":74:9)
#loc73 = loc("CWE190_Integer_Overflow__int64_t_rand_postinc_31.c":83:9)
#loc74 = loc("CWE190_Integer_Overflow__int64_t_rand_postinc_31.c":74:13)
#loc75 = loc("CWE190_Integer_Overflow__int64_t_rand_postinc_31.c":74:20)
#loc76 = loc("CWE190_Integer_Overflow__int64_t_rand_postinc_31.c":74:18)
#loc77 = loc("CWE190_Integer_Overflow__int64_t_rand_postinc_31.c":75:9)
#loc78 = loc("CWE190_Integer_Overflow__int64_t_rand_postinc_31.c":79:9)
#loc79 = loc("CWE190_Integer_Overflow__int64_t_rand_postinc_31.c":81:9)
#loc80 = loc("CWE190_Integer_Overflow__int64_t_rand_postinc_31.c":77:13)
#loc81 = loc("CWE190_Integer_Overflow__int64_t_rand_postinc_31.c":77:30)
#loc82 = loc("CWE190_Integer_Overflow__int64_t_rand_postinc_31.c":76:17)
#loc83 = loc("CWE190_Integer_Overflow__int64_t_rand_postinc_31.c":76:13)
#loc84 = loc("CWE190_Integer_Overflow__int64_t_rand_postinc_31.c":78:31)
#loc85 = loc("CWE190_Integer_Overflow__int64_t_rand_postinc_31.c":78:13)
#loc86 = loc("CWE190_Integer_Overflow__int64_t_rand_postinc_31.c":82:13)
#loc87 = loc(fused[#loc1, #loc2])
#loc88 = loc(fused[#loc3, #loc4])
#loc89 = loc(fused[#loc5, #loc6])
#loc90 = loc(fused[#loc7, #loc8])
#loc91 = loc(fused[#loc10, #loc9])
#loc92 = loc(fused[#loc12, #loc11])
#loc93 = loc(fused[#loc13, #loc14])
#loc94 = loc(fused[#loc15, #loc16])
#loc95 = loc(fused[#loc17, #loc18])
#loc96 = loc(fused[#loc19, #loc20])
#loc97 = loc(fused[#loc21, #loc22])
#loc98 = loc(fused[#loc24, #loc23])
#loc99 = loc(fused[#loc27, #loc28])
#loc100 = loc(fused[#loc29, #loc30])
#loc101 = loc(fused[#loc31, #loc32])
#loc102 = loc(fused[#loc33, #loc34])
#loc103 = loc(fused[#loc35, #loc36])
#loc104 = loc(fused[#loc38, #loc37])
#loc105 = loc(fused[#loc40, #loc39])
#loc106 = loc(fused[#loc41, #loc42])
#loc107 = loc(fused[#loc43, #loc44])
#loc108 = loc(fused[#loc45, #loc46])
#loc109 = loc(fused[#loc47, #loc48])
#loc110 = loc(fused[#loc49, #loc50])
#loc111 = loc(fused[#loc52, #loc51])
#loc112 = loc(fused[#loc55, #loc56])
#loc113 = loc(fused[#loc58, #loc59])
#loc114 = loc(fused[#loc60, #loc61])
#loc115 = loc(fused[#loc63, #loc62])
#loc116 = loc(fused[#loc65, #loc64])
#loc117 = loc(fused[#loc66, #loc67])
#loc118 = loc(fused[#loc68, #loc69])
#loc119 = loc(fused[#loc70, #loc71])
#loc120 = loc(fused[#loc72, #loc73])
#loc121 = loc(fused[#loc74, #loc75])
#loc122 = loc(fused[#loc77, #loc78, #loc79, #loc73])
#loc123 = loc(fused[#loc80, #loc81])
#loc124 = loc(fused[#loc83, #loc82])
