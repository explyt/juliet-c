!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!ty__stdThreadLock = !cir.struct<struct "_stdThreadLock" incomplete>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE667_Improper_Locking/CWE667_Improper_Locking__basic_15.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.global "private" internal dsolocal @good2.goodLock = #cir.ptr<null> : !cir.ptr<!ty__stdThreadLock> {alignment = 8 : i64} loc(#loc1)
  cir.global "private" internal dsolocal @good1.goodLock = #cir.ptr<null> : !cir.ptr<!ty__stdThreadLock> {alignment = 8 : i64} loc(#loc2)
  cir.global "private" internal dsolocal @CWE667_Improper_Locking__basic_15_bad.badLock = #cir.ptr<null> : !cir.ptr<!ty__stdThreadLock> {alignment = 8 : i64} loc(#loc3)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc116)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Creating lock...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc6)
  cir.func private @stdThreadLockCreate(!cir.ptr<!cir.ptr<!ty__stdThreadLock>>) -> !s32i loc(#loc117)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Could not create lock\00" : !cir.array<!s8i x 22>> : !cir.array<!s8i x 22> {alignment = 1 : i64} loc(#loc9)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc118)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Acquiring lock...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc12)
  cir.func private @stdThreadLockAcquire(!cir.ptr<!ty__stdThreadLock>) loc(#loc119)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc15)
  cir.func no_proto @CWE667_Improper_Locking__basic_15_bad() extra(#fn_attr1) {
    cir.br ^bb1 loc(#loc121)
  ^bb1:  // pred: ^bb0
    %0 = cir.const #cir.int<6> : !s32i loc(#loc20)
    cir.br ^bb2 loc(#loc18)
  ^bb2:  // pred: ^bb1
    cir.switch.flat %0 : !s32i, ^bb11 [
      6: ^bb4
    ] loc(#loc18)
  ^bb3:  // no predecessors
    cir.br ^bb4 loc(#loc21)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc122)
  ^bb5:  // pred: ^bb4
    %1 = cir.get_global @CWE667_Improper_Locking__basic_15_bad.badLock : !cir.ptr<!cir.ptr<!ty__stdThreadLock>> loc(#loc3)
    %2 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc6)
    %3 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc6)
    cir.call @printLine(%3) : (!cir.ptr<!s8i>) -> () loc(#loc24)
    cir.br ^bb6 loc(#loc123)
  ^bb6:  // pred: ^bb5
    %4 = cir.call @stdThreadLockCreate(%1) : (!cir.ptr<!cir.ptr<!ty__stdThreadLock>>) -> !s32i loc(#loc27)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc27)
    %6 = cir.unary(not, %5) : !cir.bool, !cir.bool loc(#loc27)
    cir.brcond %6 ^bb7, ^bb8 loc(#loc124)
  ^bb7:  // pred: ^bb6
    %7 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 22>> loc(#loc9)
    %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 22>>), !cir.ptr<!s8i> loc(#loc9)
    cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc29)
    %9 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc30)
    %10 = cir.const #cir.int<1> : !s32i loc(#loc31)
    cir.call @exit(%10) : (!s32i) -> () extra(#fn_attr) loc(#loc30)
    cir.br ^bb8 loc(#loc26)
  ^bb8:  // 2 preds: ^bb6, ^bb7
    cir.br ^bb9 loc(#loc26)
  ^bb9:  // pred: ^bb8
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc12)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc12)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc32)
    %13 = cir.load %1 : !cir.ptr<!cir.ptr<!ty__stdThreadLock>>, !cir.ptr<!ty__stdThreadLock> loc(#loc33)
    cir.call @stdThreadLockAcquire(%13) : (!cir.ptr<!ty__stdThreadLock>) -> () loc(#loc34)
    cir.br ^bb10 loc(#loc23)
  ^bb10:  // pred: ^bb9
    cir.br ^bb12 loc(#loc35)
  ^bb11:  // pred: ^bb2
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc15)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc15)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc36)
    cir.br ^bb12 loc(#loc37)
  ^bb12:  // 2 preds: ^bb10, ^bb11
    cir.br ^bb13 loc(#loc19)
  ^bb13:  // pred: ^bb12
    cir.return loc(#loc17)
  } loc(#loc120)
  cir.func no_proto @CWE667_Improper_Locking__basic_15_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<!void ()>> loc(#loc126)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc40)
    %1 = cir.get_global @good2 : !cir.ptr<!cir.func<!void ()>> loc(#loc127)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc42)
    cir.return loc(#loc39)
  } loc(#loc125)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Releasing lock...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc44)
  cir.func private @stdThreadLockRelease(!cir.ptr<!ty__stdThreadLock>) loc(#loc128)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"Destroying lock...\00" : !cir.array<!s8i x 19>> : !cir.array<!s8i x 19> {alignment = 1 : i64} loc(#loc47)
  cir.func private @stdThreadLockDestroy(!cir.ptr<!ty__stdThreadLock>) loc(#loc129)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    cir.br ^bb1 loc(#loc131)
  ^bb1:  // pred: ^bb0
    %0 = cir.const #cir.int<5> : !s32i loc(#loc54)
    cir.br ^bb2 loc(#loc52)
  ^bb2:  // pred: ^bb1
    cir.switch.flat %0 : !s32i, ^bb5 [
      6: ^bb4
    ] loc(#loc52)
  ^bb3:  // no predecessors
    cir.br ^bb4 loc(#loc55)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    %1 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc56)
    %2 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc56)
    cir.call @printLine(%2) : (!cir.ptr<!s8i>) -> () loc(#loc57)
    cir.br ^bb12 loc(#loc58)
  ^bb5:  // pred: ^bb2
    cir.br ^bb6 loc(#loc132)
  ^bb6:  // pred: ^bb5
    %3 = cir.get_global @good1.goodLock : !cir.ptr<!cir.ptr<!ty__stdThreadLock>> loc(#loc2)
    %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc61)
    %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc61)
    cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc62)
    cir.br ^bb7 loc(#loc133)
  ^bb7:  // pred: ^bb6
    %6 = cir.call @stdThreadLockCreate(%3) : (!cir.ptr<!cir.ptr<!ty__stdThreadLock>>) -> !s32i loc(#loc65)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc65)
    %8 = cir.unary(not, %7) : !cir.bool, !cir.bool loc(#loc65)
    cir.brcond %8 ^bb8, ^bb9 loc(#loc134)
  ^bb8:  // pred: ^bb7
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 22>> loc(#loc67)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 22>>), !cir.ptr<!s8i> loc(#loc67)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc68)
    %11 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc69)
    %12 = cir.const #cir.int<1> : !s32i loc(#loc70)
    cir.call @exit(%12) : (!s32i) -> () extra(#fn_attr) loc(#loc69)
    cir.br ^bb9 loc(#loc64)
  ^bb9:  // 2 preds: ^bb7, ^bb8
    cir.br ^bb10 loc(#loc64)
  ^bb10:  // pred: ^bb9
    %13 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc71)
    %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc71)
    cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc72)
    %15 = cir.load %3 : !cir.ptr<!cir.ptr<!ty__stdThreadLock>>, !cir.ptr<!ty__stdThreadLock> loc(#loc73)
    cir.call @stdThreadLockAcquire(%15) : (!cir.ptr<!ty__stdThreadLock>) -> () loc(#loc74)
    %16 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc44)
    %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc44)
    cir.call @printLine(%17) : (!cir.ptr<!s8i>) -> () loc(#loc75)
    %18 = cir.load %3 : !cir.ptr<!cir.ptr<!ty__stdThreadLock>>, !cir.ptr<!ty__stdThreadLock> loc(#loc76)
    cir.call @stdThreadLockRelease(%18) : (!cir.ptr<!ty__stdThreadLock>) -> () loc(#loc77)
    %19 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 19>> loc(#loc47)
    %20 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 19>>), !cir.ptr<!s8i> loc(#loc47)
    cir.call @printLine(%20) : (!cir.ptr<!s8i>) -> () loc(#loc78)
    %21 = cir.load %3 : !cir.ptr<!cir.ptr<!ty__stdThreadLock>>, !cir.ptr<!ty__stdThreadLock> loc(#loc79)
    cir.call @stdThreadLockDestroy(%21) : (!cir.ptr<!ty__stdThreadLock>) -> () loc(#loc80)
    cir.br ^bb11 loc(#loc60)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc81)
  ^bb12:  // 2 preds: ^bb4, ^bb11
    cir.br ^bb13 loc(#loc53)
  ^bb13:  // pred: ^bb12
    cir.return loc(#loc51)
  } loc(#loc130)
  cir.func no_proto internal private @good2() extra(#fn_attr1) {
    cir.br ^bb1 loc(#loc136)
  ^bb1:  // pred: ^bb0
    %0 = cir.const #cir.int<6> : !s32i loc(#loc86)
    cir.br ^bb2 loc(#loc84)
  ^bb2:  // pred: ^bb1
    cir.switch.flat %0 : !s32i, ^bb11 [
      6: ^bb4
    ] loc(#loc84)
  ^bb3:  // no predecessors
    cir.br ^bb4 loc(#loc87)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc137)
  ^bb5:  // pred: ^bb4
    %1 = cir.get_global @good2.goodLock : !cir.ptr<!cir.ptr<!ty__stdThreadLock>> loc(#loc1)
    %2 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc90)
    %3 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc90)
    cir.call @printLine(%3) : (!cir.ptr<!s8i>) -> () loc(#loc91)
    cir.br ^bb6 loc(#loc138)
  ^bb6:  // pred: ^bb5
    %4 = cir.call @stdThreadLockCreate(%1) : (!cir.ptr<!cir.ptr<!ty__stdThreadLock>>) -> !s32i loc(#loc94)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc94)
    %6 = cir.unary(not, %5) : !cir.bool, !cir.bool loc(#loc94)
    cir.brcond %6 ^bb7, ^bb8 loc(#loc139)
  ^bb7:  // pred: ^bb6
    %7 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 22>> loc(#loc96)
    %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 22>>), !cir.ptr<!s8i> loc(#loc96)
    cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc97)
    %9 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc98)
    %10 = cir.const #cir.int<1> : !s32i loc(#loc99)
    cir.call @exit(%10) : (!s32i) -> () extra(#fn_attr) loc(#loc98)
    cir.br ^bb8 loc(#loc93)
  ^bb8:  // 2 preds: ^bb6, ^bb7
    cir.br ^bb9 loc(#loc93)
  ^bb9:  // pred: ^bb8
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc100)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc100)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc101)
    %13 = cir.load %1 : !cir.ptr<!cir.ptr<!ty__stdThreadLock>>, !cir.ptr<!ty__stdThreadLock> loc(#loc102)
    cir.call @stdThreadLockAcquire(%13) : (!cir.ptr<!ty__stdThreadLock>) -> () loc(#loc103)
    %14 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc104)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc104)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc105)
    %16 = cir.load %1 : !cir.ptr<!cir.ptr<!ty__stdThreadLock>>, !cir.ptr<!ty__stdThreadLock> loc(#loc106)
    cir.call @stdThreadLockRelease(%16) : (!cir.ptr<!ty__stdThreadLock>) -> () loc(#loc107)
    %17 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 19>> loc(#loc108)
    %18 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s8i x 19>>), !cir.ptr<!s8i> loc(#loc108)
    cir.call @printLine(%18) : (!cir.ptr<!s8i>) -> () loc(#loc109)
    %19 = cir.load %1 : !cir.ptr<!cir.ptr<!ty__stdThreadLock>>, !cir.ptr<!ty__stdThreadLock> loc(#loc110)
    cir.call @stdThreadLockDestroy(%19) : (!cir.ptr<!ty__stdThreadLock>) -> () loc(#loc111)
    cir.br ^bb10 loc(#loc89)
  ^bb10:  // pred: ^bb9
    cir.br ^bb12 loc(#loc112)
  ^bb11:  // pred: ^bb2
    %20 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc113)
    %21 = cir.cast(array_to_ptrdecay, %20 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc113)
    cir.call @printLine(%21) : (!cir.ptr<!s8i>) -> () loc(#loc114)
    cir.br ^bb12 loc(#loc115)
  ^bb12:  // 2 preds: ^bb10, ^bb11
    cir.br ^bb13 loc(#loc85)
  ^bb13:  // pred: ^bb12
    cir.return loc(#loc83)
  } loc(#loc135)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE667_Improper_Locking/CWE667_Improper_Locking__basic_15.c":0:0)
#loc1 = loc("CWE667_Improper_Locking__basic_15.c":88:30)
#loc2 = loc("CWE667_Improper_Locking__basic_15.c":62:30)
#loc3 = loc("CWE667_Improper_Locking__basic_15.c":28:30)
#loc4 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc5 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc6 = loc("CWE667_Improper_Locking__basic_15.c":29:19)
#loc7 = loc("../../testcasesupport/std_thread.h":18:1)
#loc8 = loc("../../testcasesupport/std_thread.h":18:44)
#loc9 = loc("CWE667_Improper_Locking__basic_15.c":32:23)
#loc10 = loc("/usr/include/stdlib.h":756:1)
#loc11 = loc("/usr/include/stdlib.h":756:70)
#loc12 = loc("CWE667_Improper_Locking__basic_15.c":35:19)
#loc13 = loc("../../testcasesupport/std_thread.h":19:1)
#loc14 = loc("../../testcasesupport/std_thread.h":19:45)
#loc15 = loc("CWE667_Improper_Locking__basic_15.c":42:19)
#loc16 = loc("CWE667_Improper_Locking__basic_15.c":22:1)
#loc17 = loc("CWE667_Improper_Locking__basic_15.c":45:1)
#loc18 = loc("CWE667_Improper_Locking__basic_15.c":24:5)
#loc19 = loc("CWE667_Improper_Locking__basic_15.c":44:5)
#loc20 = loc("CWE667_Improper_Locking__basic_15.c":24:12)
#loc21 = loc("CWE667_Improper_Locking__basic_15.c":26:5)
#loc22 = loc("CWE667_Improper_Locking__basic_15.c":27:5)
#loc23 = loc("CWE667_Improper_Locking__basic_15.c":38:5)
#loc24 = loc("CWE667_Improper_Locking__basic_15.c":29:9)
#loc25 = loc("CWE667_Improper_Locking__basic_15.c":30:9)
#loc26 = loc("CWE667_Improper_Locking__basic_15.c":34:9)
#loc27 = loc("CWE667_Improper_Locking__basic_15.c":30:14)
#loc28 = loc("CWE667_Improper_Locking__basic_15.c":31:9)
#loc29 = loc("CWE667_Improper_Locking__basic_15.c":32:13)
#loc30 = loc("CWE667_Improper_Locking__basic_15.c":33:13)
#loc31 = loc("CWE667_Improper_Locking__basic_15.c":33:18)
#loc32 = loc("CWE667_Improper_Locking__basic_15.c":35:9)
#loc33 = loc("CWE667_Improper_Locking__basic_15.c":36:30)
#loc34 = loc("CWE667_Improper_Locking__basic_15.c":36:9)
#loc35 = loc("CWE667_Improper_Locking__basic_15.c":39:5)
#loc36 = loc("CWE667_Improper_Locking__basic_15.c":42:9)
#loc37 = loc("CWE667_Improper_Locking__basic_15.c":43:9)
#loc38 = loc("CWE667_Improper_Locking__basic_15.c":111:1)
#loc39 = loc("CWE667_Improper_Locking__basic_15.c":115:1)
#loc40 = loc("CWE667_Improper_Locking__basic_15.c":113:5)
#loc41 = loc("CWE667_Improper_Locking__basic_15.c":113:11)
#loc42 = loc("CWE667_Improper_Locking__basic_15.c":114:5)
#loc43 = loc("CWE667_Improper_Locking__basic_15.c":114:11)
#loc44 = loc("CWE667_Improper_Locking__basic_15.c":72:19)
#loc45 = loc("../../testcasesupport/std_thread.h":20:1)
#loc46 = loc("../../testcasesupport/std_thread.h":20:45)
#loc47 = loc("CWE667_Improper_Locking__basic_15.c":74:19)
#loc48 = loc("../../testcasesupport/std_thread.h":21:1)
#loc49 = loc("../../testcasesupport/std_thread.h":21:45)
#loc50 = loc("CWE667_Improper_Locking__basic_15.c":52:1)
#loc51 = loc("CWE667_Improper_Locking__basic_15.c":79:1)
#loc52 = loc("CWE667_Improper_Locking__basic_15.c":54:5)
#loc53 = loc("CWE667_Improper_Locking__basic_15.c":78:5)
#loc54 = loc("CWE667_Improper_Locking__basic_15.c":54:12)
#loc55 = loc("CWE667_Improper_Locking__basic_15.c":56:5)
#loc56 = loc("CWE667_Improper_Locking__basic_15.c":58:19)
#loc57 = loc("CWE667_Improper_Locking__basic_15.c":58:9)
#loc58 = loc("CWE667_Improper_Locking__basic_15.c":59:9)
#loc59 = loc("CWE667_Improper_Locking__basic_15.c":61:5)
#loc60 = loc("CWE667_Improper_Locking__basic_15.c":76:5)
#loc61 = loc("CWE667_Improper_Locking__basic_15.c":63:19)
#loc62 = loc("CWE667_Improper_Locking__basic_15.c":63:9)
#loc63 = loc("CWE667_Improper_Locking__basic_15.c":64:9)
#loc64 = loc("CWE667_Improper_Locking__basic_15.c":68:9)
#loc65 = loc("CWE667_Improper_Locking__basic_15.c":64:14)
#loc66 = loc("CWE667_Improper_Locking__basic_15.c":65:9)
#loc67 = loc("CWE667_Improper_Locking__basic_15.c":66:23)
#loc68 = loc("CWE667_Improper_Locking__basic_15.c":66:13)
#loc69 = loc("CWE667_Improper_Locking__basic_15.c":67:13)
#loc70 = loc("CWE667_Improper_Locking__basic_15.c":67:18)
#loc71 = loc("CWE667_Improper_Locking__basic_15.c":69:19)
#loc72 = loc("CWE667_Improper_Locking__basic_15.c":69:9)
#loc73 = loc("CWE667_Improper_Locking__basic_15.c":70:30)
#loc74 = loc("CWE667_Improper_Locking__basic_15.c":70:9)
#loc75 = loc("CWE667_Improper_Locking__basic_15.c":72:9)
#loc76 = loc("CWE667_Improper_Locking__basic_15.c":73:30)
#loc77 = loc("CWE667_Improper_Locking__basic_15.c":73:9)
#loc78 = loc("CWE667_Improper_Locking__basic_15.c":74:9)
#loc79 = loc("CWE667_Improper_Locking__basic_15.c":75:30)
#loc80 = loc("CWE667_Improper_Locking__basic_15.c":75:9)
#loc81 = loc("CWE667_Improper_Locking__basic_15.c":77:5)
#loc82 = loc("CWE667_Improper_Locking__basic_15.c":82:1)
#loc83 = loc("CWE667_Improper_Locking__basic_15.c":109:1)
#loc84 = loc("CWE667_Improper_Locking__basic_15.c":84:5)
#loc85 = loc("CWE667_Improper_Locking__basic_15.c":108:5)
#loc86 = loc("CWE667_Improper_Locking__basic_15.c":84:12)
#loc87 = loc("CWE667_Improper_Locking__basic_15.c":86:5)
#loc88 = loc("CWE667_Improper_Locking__basic_15.c":87:5)
#loc89 = loc("CWE667_Improper_Locking__basic_15.c":102:5)
#loc90 = loc("CWE667_Improper_Locking__basic_15.c":89:19)
#loc91 = loc("CWE667_Improper_Locking__basic_15.c":89:9)
#loc92 = loc("CWE667_Improper_Locking__basic_15.c":90:9)
#loc93 = loc("CWE667_Improper_Locking__basic_15.c":94:9)
#loc94 = loc("CWE667_Improper_Locking__basic_15.c":90:14)
#loc95 = loc("CWE667_Improper_Locking__basic_15.c":91:9)
#loc96 = loc("CWE667_Improper_Locking__basic_15.c":92:23)
#loc97 = loc("CWE667_Improper_Locking__basic_15.c":92:13)
#loc98 = loc("CWE667_Improper_Locking__basic_15.c":93:13)
#loc99 = loc("CWE667_Improper_Locking__basic_15.c":93:18)
#loc100 = loc("CWE667_Improper_Locking__basic_15.c":95:19)
#loc101 = loc("CWE667_Improper_Locking__basic_15.c":95:9)
#loc102 = loc("CWE667_Improper_Locking__basic_15.c":96:30)
#loc103 = loc("CWE667_Improper_Locking__basic_15.c":96:9)
#loc104 = loc("CWE667_Improper_Locking__basic_15.c":98:19)
#loc105 = loc("CWE667_Improper_Locking__basic_15.c":98:9)
#loc106 = loc("CWE667_Improper_Locking__basic_15.c":99:30)
#loc107 = loc("CWE667_Improper_Locking__basic_15.c":99:9)
#loc108 = loc("CWE667_Improper_Locking__basic_15.c":100:19)
#loc109 = loc("CWE667_Improper_Locking__basic_15.c":100:9)
#loc110 = loc("CWE667_Improper_Locking__basic_15.c":101:30)
#loc111 = loc("CWE667_Improper_Locking__basic_15.c":101:9)
#loc112 = loc("CWE667_Improper_Locking__basic_15.c":103:5)
#loc113 = loc("CWE667_Improper_Locking__basic_15.c":106:19)
#loc114 = loc("CWE667_Improper_Locking__basic_15.c":106:9)
#loc115 = loc("CWE667_Improper_Locking__basic_15.c":107:9)
#loc116 = loc(fused[#loc4, #loc5])
#loc117 = loc(fused[#loc7, #loc8])
#loc118 = loc(fused[#loc10, #loc11])
#loc119 = loc(fused[#loc13, #loc14])
#loc120 = loc(fused[#loc16, #loc17])
#loc121 = loc(fused[#loc18, #loc19])
#loc122 = loc(fused[#loc22, #loc23])
#loc123 = loc(fused[#loc25, #loc26])
#loc124 = loc(fused[#loc28, #loc26])
#loc125 = loc(fused[#loc38, #loc39])
#loc126 = loc(fused[#loc40, #loc41])
#loc127 = loc(fused[#loc42, #loc43])
#loc128 = loc(fused[#loc45, #loc46])
#loc129 = loc(fused[#loc48, #loc49])
#loc130 = loc(fused[#loc50, #loc51])
#loc131 = loc(fused[#loc52, #loc53])
#loc132 = loc(fused[#loc59, #loc60])
#loc133 = loc(fused[#loc63, #loc64])
#loc134 = loc(fused[#loc66, #loc64])
#loc135 = loc(fused[#loc82, #loc83])
#loc136 = loc(fused[#loc84, #loc85])
#loc137 = loc(fused[#loc88, #loc89])
#loc138 = loc(fused[#loc92, #loc93])
#loc139 = loc(fused[#loc95, #loc93])
