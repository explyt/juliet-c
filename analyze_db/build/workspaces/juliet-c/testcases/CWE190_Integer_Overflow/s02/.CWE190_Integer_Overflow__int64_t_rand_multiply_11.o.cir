!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int64_t_rand_multiply_11.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f80 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e", "dlti.endianness" = "little">} {
  cir.func no_proto private @globalReturnsTrue(...) -> !s32i loc(#loc191)
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc192)
  cir.func private @printLongLongLine(!s64i) loc(#loc193)
  cir.func no_proto @CWE190_Integer_Overflow__int64_t_rand_multiply_11_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc195)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc11)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc196)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc198)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc198)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc15)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc15)
      cir.if %5 {
        %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc18)
        %8 = cir.binop(and, %6, %7) : !s32i loc(#loc18)
        %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc18)
        %10 = cir.ternary(%9, true {
          %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
          %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc18)
          %14 = cir.const #cir.int<60> : !s32i loc(#loc18)
          %15 = cir.shift(left, %13 : !u64i, %14 : !s32i) -> !u64i loc(#loc18)
          %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
          %17 = cir.cast(integral, %16 : !s32i), !u64i loc(#loc18)
          %18 = cir.const #cir.int<45> : !s32i loc(#loc18)
          %19 = cir.shift(left, %17 : !u64i, %18 : !s32i) -> !u64i loc(#loc18)
          %20 = cir.binop(xor, %15, %19) : !u64i loc(#loc18)
          %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
          %22 = cir.cast(integral, %21 : !s32i), !u64i loc(#loc18)
          %23 = cir.const #cir.int<30> : !s32i loc(#loc18)
          %24 = cir.shift(left, %22 : !u64i, %23 : !s32i) -> !u64i loc(#loc18)
          %25 = cir.binop(xor, %20, %24) : !u64i loc(#loc18)
          %26 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
          %27 = cir.cast(integral, %26 : !s32i), !u64i loc(#loc18)
          %28 = cir.const #cir.int<15> : !s32i loc(#loc18)
          %29 = cir.shift(left, %27 : !u64i, %28 : !s32i) -> !u64i loc(#loc18)
          %30 = cir.binop(xor, %25, %29) : !u64i loc(#loc18)
          %31 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
          %32 = cir.cast(integral, %31 : !s32i), !u64i loc(#loc18)
          %33 = cir.binop(xor, %30, %32) : !u64i loc(#loc18)
          cir.yield %33 : !u64i loc(#loc18)
        }, false {
          %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
          %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc18)
          %14 = cir.const #cir.int<60> : !s32i loc(#loc18)
          %15 = cir.shift(left, %13 : !u64i, %14 : !s32i) -> !u64i loc(#loc18)
          %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
          %17 = cir.cast(integral, %16 : !s32i), !u64i loc(#loc18)
          %18 = cir.const #cir.int<45> : !s32i loc(#loc18)
          %19 = cir.shift(left, %17 : !u64i, %18 : !s32i) -> !u64i loc(#loc18)
          %20 = cir.binop(xor, %15, %19) : !u64i loc(#loc18)
          %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
          %22 = cir.cast(integral, %21 : !s32i), !u64i loc(#loc18)
          %23 = cir.const #cir.int<30> : !s32i loc(#loc18)
          %24 = cir.shift(left, %22 : !u64i, %23 : !s32i) -> !u64i loc(#loc18)
          %25 = cir.binop(xor, %20, %24) : !u64i loc(#loc18)
          %26 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
          %27 = cir.cast(integral, %26 : !s32i), !u64i loc(#loc18)
          %28 = cir.const #cir.int<15> : !s32i loc(#loc18)
          %29 = cir.shift(left, %27 : !u64i, %28 : !s32i) -> !u64i loc(#loc18)
          %30 = cir.binop(xor, %25, %29) : !u64i loc(#loc18)
          %31 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
          %32 = cir.cast(integral, %31 : !s32i), !u64i loc(#loc18)
          %33 = cir.binop(xor, %30, %32) : !u64i loc(#loc18)
          %34 = cir.unary(minus, %33) : !u64i, !u64i loc(#loc18)
          %35 = cir.const #cir.int<1> : !s32i loc(#loc18)
          %36 = cir.cast(integral, %35 : !s32i), !u64i loc(#loc18)
          %37 = cir.binop(sub, %34, %36) : !u64i loc(#loc18)
          cir.yield %37 : !u64i loc(#loc18)
        }) : (!cir.bool) -> !u64i loc(#loc18)
        %11 = cir.cast(integral, %10 : !u64i), !s64i loc(#loc18)
        cir.store %11, %0 : !s64i, !cir.ptr<!s64i> loc(#loc200)
      } loc(#loc199)
    } loc(#loc197)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc202)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc202)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc22)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc22)
      cir.if %5 {
        cir.scope {
          %6 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc27)
          %7 = cir.const #cir.int<0> : !s32i loc(#loc28)
          %8 = cir.cast(integral, %7 : !s32i), !s64i loc(#loc28)
          %9 = cir.cmp(gt, %6, %8) : !s64i, !cir.bool loc(#loc205)
          cir.if %9 {
            %10 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc207)
            %11 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc32)
            %12 = cir.const #cir.int<2> : !s32i loc(#loc31)
            %13 = cir.cast(integral, %12 : !s32i), !s64i loc(#loc31)
            %14 = cir.binop(mul, %11, %13) nsw : !s64i loc(#loc32)
            cir.store %14, %10 : !s64i, !cir.ptr<!s64i> loc(#loc207)
            %15 = cir.load %10 : !cir.ptr<!s64i>, !s64i loc(#loc33)
            cir.call @printLongLongLine(%15) : (!s64i) -> () loc(#loc34)
          } loc(#loc206)
        } loc(#loc204)
      } loc(#loc203)
    } loc(#loc201)
    cir.return loc(#loc8)
  } loc(#loc194)
  cir.func no_proto @CWE190_Integer_Overflow__int64_t_rand_multiply_11_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<()>> loc(#loc209)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc37)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<()>> loc(#loc210)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc39)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<()>> loc(#loc211)
    cir.call %2() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc41)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<()>> loc(#loc212)
    cir.call %3() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc43)
    cir.return loc(#loc36)
  } loc(#loc208)
  cir.func no_proto private @globalReturnsFalse(...) -> !s32i loc(#loc213)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc214)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc49)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc50)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc216)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc55)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc217)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc219)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc219)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc59)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc59)
      cir.if %5 {
        %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc62)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc62)
        %8 = cir.binop(and, %6, %7) : !s32i loc(#loc62)
        %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc62)
        %10 = cir.ternary(%9, true {
          %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc62)
          %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc62)
          %14 = cir.const #cir.int<60> : !s32i loc(#loc62)
          %15 = cir.shift(left, %13 : !u64i, %14 : !s32i) -> !u64i loc(#loc62)
          %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc62)
          %17 = cir.cast(integral, %16 : !s32i), !u64i loc(#loc62)
          %18 = cir.const #cir.int<45> : !s32i loc(#loc62)
          %19 = cir.shift(left, %17 : !u64i, %18 : !s32i) -> !u64i loc(#loc62)
          %20 = cir.binop(xor, %15, %19) : !u64i loc(#loc62)
          %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc62)
          %22 = cir.cast(integral, %21 : !s32i), !u64i loc(#loc62)
          %23 = cir.const #cir.int<30> : !s32i loc(#loc62)
          %24 = cir.shift(left, %22 : !u64i, %23 : !s32i) -> !u64i loc(#loc62)
          %25 = cir.binop(xor, %20, %24) : !u64i loc(#loc62)
          %26 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc62)
          %27 = cir.cast(integral, %26 : !s32i), !u64i loc(#loc62)
          %28 = cir.const #cir.int<15> : !s32i loc(#loc62)
          %29 = cir.shift(left, %27 : !u64i, %28 : !s32i) -> !u64i loc(#loc62)
          %30 = cir.binop(xor, %25, %29) : !u64i loc(#loc62)
          %31 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc62)
          %32 = cir.cast(integral, %31 : !s32i), !u64i loc(#loc62)
          %33 = cir.binop(xor, %30, %32) : !u64i loc(#loc62)
          cir.yield %33 : !u64i loc(#loc62)
        }, false {
          %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc62)
          %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc62)
          %14 = cir.const #cir.int<60> : !s32i loc(#loc62)
          %15 = cir.shift(left, %13 : !u64i, %14 : !s32i) -> !u64i loc(#loc62)
          %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc62)
          %17 = cir.cast(integral, %16 : !s32i), !u64i loc(#loc62)
          %18 = cir.const #cir.int<45> : !s32i loc(#loc62)
          %19 = cir.shift(left, %17 : !u64i, %18 : !s32i) -> !u64i loc(#loc62)
          %20 = cir.binop(xor, %15, %19) : !u64i loc(#loc62)
          %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc62)
          %22 = cir.cast(integral, %21 : !s32i), !u64i loc(#loc62)
          %23 = cir.const #cir.int<30> : !s32i loc(#loc62)
          %24 = cir.shift(left, %22 : !u64i, %23 : !s32i) -> !u64i loc(#loc62)
          %25 = cir.binop(xor, %20, %24) : !u64i loc(#loc62)
          %26 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc62)
          %27 = cir.cast(integral, %26 : !s32i), !u64i loc(#loc62)
          %28 = cir.const #cir.int<15> : !s32i loc(#loc62)
          %29 = cir.shift(left, %27 : !u64i, %28 : !s32i) -> !u64i loc(#loc62)
          %30 = cir.binop(xor, %25, %29) : !u64i loc(#loc62)
          %31 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc62)
          %32 = cir.cast(integral, %31 : !s32i), !u64i loc(#loc62)
          %33 = cir.binop(xor, %30, %32) : !u64i loc(#loc62)
          %34 = cir.unary(minus, %33) : !u64i, !u64i loc(#loc62)
          %35 = cir.const #cir.int<1> : !s32i loc(#loc62)
          %36 = cir.cast(integral, %35 : !s32i), !u64i loc(#loc62)
          %37 = cir.binop(sub, %34, %36) : !u64i loc(#loc62)
          cir.yield %37 : !u64i loc(#loc62)
        }) : (!cir.bool) -> !u64i loc(#loc62)
        %11 = cir.cast(integral, %10 : !u64i), !s64i loc(#loc62)
        cir.store %11, %0 : !s64i, !cir.ptr<!s64i> loc(#loc221)
      } loc(#loc220)
    } loc(#loc218)
    cir.scope {
      %2 = cir.get_global @globalReturnsFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc223)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc223)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc66)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc66)
      cir.if %5 {
        %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc49)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc49)
        cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc71)
      } else {
        cir.scope {
          %6 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc74)
          %7 = cir.const #cir.int<0> : !s32i loc(#loc75)
          %8 = cir.cast(integral, %7 : !s32i), !s64i loc(#loc75)
          %9 = cir.cmp(gt, %6, %8) : !s64i, !cir.bool loc(#loc226)
          cir.if %9 {
            cir.scope {
              %10 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc79)
              %11 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc80)
              %12 = cir.const #cir.int<2> : !s32i loc(#loc81)
              %13 = cir.cast(integral, %12 : !s32i), !s64i loc(#loc81)
              %14 = cir.binop(div, %11, %13) : !s64i loc(#loc229)
              %15 = cir.cmp(lt, %10, %14) : !s64i, !cir.bool loc(#loc230)
              cir.if %15 {
                %16 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc232)
                %17 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc88)
                %18 = cir.const #cir.int<2> : !s32i loc(#loc87)
                %19 = cir.cast(integral, %18 : !s32i), !s64i loc(#loc87)
                %20 = cir.binop(mul, %17, %19) nsw : !s64i loc(#loc88)
                cir.store %20, %16 : !s64i, !cir.ptr<!s64i> loc(#loc232)
                %21 = cir.load %16 : !cir.ptr<!s64i>, !s64i loc(#loc89)
                cir.call @printLongLongLine(%21) : (!s64i) -> () loc(#loc90)
              } else {
                %16 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc50)
                %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc50)
                cir.call @printLine(%17) : (!cir.ptr<!s8i>) -> () loc(#loc91)
              } loc(#loc231)
            } loc(#loc228)
          } loc(#loc227)
        } loc(#loc225)
      } loc(#loc224)
    } loc(#loc222)
    cir.return loc(#loc52)
  } loc(#loc215)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc234)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc96)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc235)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc237)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc237)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc100)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc100)
      cir.if %5 {
        %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc103)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc103)
        %8 = cir.binop(and, %6, %7) : !s32i loc(#loc103)
        %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc103)
        %10 = cir.ternary(%9, true {
          %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc103)
          %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc103)
          %14 = cir.const #cir.int<60> : !s32i loc(#loc103)
          %15 = cir.shift(left, %13 : !u64i, %14 : !s32i) -> !u64i loc(#loc103)
          %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc103)
          %17 = cir.cast(integral, %16 : !s32i), !u64i loc(#loc103)
          %18 = cir.const #cir.int<45> : !s32i loc(#loc103)
          %19 = cir.shift(left, %17 : !u64i, %18 : !s32i) -> !u64i loc(#loc103)
          %20 = cir.binop(xor, %15, %19) : !u64i loc(#loc103)
          %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc103)
          %22 = cir.cast(integral, %21 : !s32i), !u64i loc(#loc103)
          %23 = cir.const #cir.int<30> : !s32i loc(#loc103)
          %24 = cir.shift(left, %22 : !u64i, %23 : !s32i) -> !u64i loc(#loc103)
          %25 = cir.binop(xor, %20, %24) : !u64i loc(#loc103)
          %26 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc103)
          %27 = cir.cast(integral, %26 : !s32i), !u64i loc(#loc103)
          %28 = cir.const #cir.int<15> : !s32i loc(#loc103)
          %29 = cir.shift(left, %27 : !u64i, %28 : !s32i) -> !u64i loc(#loc103)
          %30 = cir.binop(xor, %25, %29) : !u64i loc(#loc103)
          %31 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc103)
          %32 = cir.cast(integral, %31 : !s32i), !u64i loc(#loc103)
          %33 = cir.binop(xor, %30, %32) : !u64i loc(#loc103)
          cir.yield %33 : !u64i loc(#loc103)
        }, false {
          %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc103)
          %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc103)
          %14 = cir.const #cir.int<60> : !s32i loc(#loc103)
          %15 = cir.shift(left, %13 : !u64i, %14 : !s32i) -> !u64i loc(#loc103)
          %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc103)
          %17 = cir.cast(integral, %16 : !s32i), !u64i loc(#loc103)
          %18 = cir.const #cir.int<45> : !s32i loc(#loc103)
          %19 = cir.shift(left, %17 : !u64i, %18 : !s32i) -> !u64i loc(#loc103)
          %20 = cir.binop(xor, %15, %19) : !u64i loc(#loc103)
          %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc103)
          %22 = cir.cast(integral, %21 : !s32i), !u64i loc(#loc103)
          %23 = cir.const #cir.int<30> : !s32i loc(#loc103)
          %24 = cir.shift(left, %22 : !u64i, %23 : !s32i) -> !u64i loc(#loc103)
          %25 = cir.binop(xor, %20, %24) : !u64i loc(#loc103)
          %26 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc103)
          %27 = cir.cast(integral, %26 : !s32i), !u64i loc(#loc103)
          %28 = cir.const #cir.int<15> : !s32i loc(#loc103)
          %29 = cir.shift(left, %27 : !u64i, %28 : !s32i) -> !u64i loc(#loc103)
          %30 = cir.binop(xor, %25, %29) : !u64i loc(#loc103)
          %31 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc103)
          %32 = cir.cast(integral, %31 : !s32i), !u64i loc(#loc103)
          %33 = cir.binop(xor, %30, %32) : !u64i loc(#loc103)
          %34 = cir.unary(minus, %33) : !u64i, !u64i loc(#loc103)
          %35 = cir.const #cir.int<1> : !s32i loc(#loc103)
          %36 = cir.cast(integral, %35 : !s32i), !u64i loc(#loc103)
          %37 = cir.binop(sub, %34, %36) : !u64i loc(#loc103)
          cir.yield %37 : !u64i loc(#loc103)
        }) : (!cir.bool) -> !u64i loc(#loc103)
        %11 = cir.cast(integral, %10 : !u64i), !s64i loc(#loc103)
        cir.store %11, %0 : !s64i, !cir.ptr<!s64i> loc(#loc239)
      } loc(#loc238)
    } loc(#loc236)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc241)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc241)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc107)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc107)
      cir.if %5 {
        cir.scope {
          %6 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc112)
          %7 = cir.const #cir.int<0> : !s32i loc(#loc113)
          %8 = cir.cast(integral, %7 : !s32i), !s64i loc(#loc113)
          %9 = cir.cmp(gt, %6, %8) : !s64i, !cir.bool loc(#loc244)
          cir.if %9 {
            cir.scope {
              %10 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc117)
              %11 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc118)
              %12 = cir.const #cir.int<2> : !s32i loc(#loc119)
              %13 = cir.cast(integral, %12 : !s32i), !s64i loc(#loc119)
              %14 = cir.binop(div, %11, %13) : !s64i loc(#loc247)
              %15 = cir.cmp(lt, %10, %14) : !s64i, !cir.bool loc(#loc248)
              cir.if %15 {
                %16 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc250)
                %17 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc126)
                %18 = cir.const #cir.int<2> : !s32i loc(#loc125)
                %19 = cir.cast(integral, %18 : !s32i), !s64i loc(#loc125)
                %20 = cir.binop(mul, %17, %19) nsw : !s64i loc(#loc126)
                cir.store %20, %16 : !s64i, !cir.ptr<!s64i> loc(#loc250)
                %21 = cir.load %16 : !cir.ptr<!s64i>, !s64i loc(#loc127)
                cir.call @printLongLongLine(%21) : (!s64i) -> () loc(#loc128)
              } else {
                %16 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc129)
                %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc129)
                cir.call @printLine(%17) : (!cir.ptr<!s8i>) -> () loc(#loc130)
              } loc(#loc249)
            } loc(#loc246)
          } loc(#loc245)
        } loc(#loc243)
      } loc(#loc242)
    } loc(#loc240)
    cir.return loc(#loc93)
  } loc(#loc233)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc252)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc135)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc253)
    cir.scope {
      %2 = cir.get_global @globalReturnsFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc255)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc255)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc139)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc139)
      cir.if %5 {
        %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc144)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc144)
        cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc145)
      } else {
        %6 = cir.const #cir.int<2> : !s32i loc(#loc146)
        %7 = cir.cast(integral, %6 : !s32i), !s64i loc(#loc146)
        cir.store %7, %0 : !s64i, !cir.ptr<!s64i> loc(#loc257)
      } loc(#loc256)
    } loc(#loc254)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc259)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc259)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc150)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc150)
      cir.if %5 {
        cir.scope {
          %6 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc155)
          %7 = cir.const #cir.int<0> : !s32i loc(#loc156)
          %8 = cir.cast(integral, %7 : !s32i), !s64i loc(#loc156)
          %9 = cir.cmp(gt, %6, %8) : !s64i, !cir.bool loc(#loc262)
          cir.if %9 {
            %10 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc264)
            %11 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc160)
            %12 = cir.const #cir.int<2> : !s32i loc(#loc159)
            %13 = cir.cast(integral, %12 : !s32i), !s64i loc(#loc159)
            %14 = cir.binop(mul, %11, %13) nsw : !s64i loc(#loc160)
            cir.store %14, %10 : !s64i, !cir.ptr<!s64i> loc(#loc264)
            %15 = cir.load %10 : !cir.ptr<!s64i>, !s64i loc(#loc161)
            cir.call @printLongLongLine(%15) : (!s64i) -> () loc(#loc162)
          } loc(#loc263)
        } loc(#loc261)
      } loc(#loc260)
    } loc(#loc258)
    cir.return loc(#loc132)
  } loc(#loc251)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc266)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc167)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc267)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc269)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc269)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc171)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc171)
      cir.if %5 {
        %6 = cir.const #cir.int<2> : !s32i loc(#loc174)
        %7 = cir.cast(integral, %6 : !s32i), !s64i loc(#loc174)
        cir.store %7, %0 : !s64i, !cir.ptr<!s64i> loc(#loc271)
      } loc(#loc270)
    } loc(#loc268)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc273)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc273)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc178)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc178)
      cir.if %5 {
        cir.scope {
          %6 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc183)
          %7 = cir.const #cir.int<0> : !s32i loc(#loc184)
          %8 = cir.cast(integral, %7 : !s32i), !s64i loc(#loc184)
          %9 = cir.cmp(gt, %6, %8) : !s64i, !cir.bool loc(#loc276)
          cir.if %9 {
            %10 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc278)
            %11 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc188)
            %12 = cir.const #cir.int<2> : !s32i loc(#loc187)
            %13 = cir.cast(integral, %12 : !s32i), !s64i loc(#loc187)
            %14 = cir.binop(mul, %11, %13) nsw : !s64i loc(#loc188)
            cir.store %14, %10 : !s64i, !cir.ptr<!s64i> loc(#loc278)
            %15 = cir.load %10 : !cir.ptr<!s64i>, !s64i loc(#loc189)
            cir.call @printLongLongLine(%15) : (!s64i) -> () loc(#loc190)
          } loc(#loc277)
        } loc(#loc275)
      } loc(#loc274)
    } loc(#loc272)
    cir.return loc(#loc164)
  } loc(#loc265)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int64_t_rand_multiply_11.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":48:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":48:23)
#loc3 = loc("/usr/include/stdlib.h":573:1)
#loc4 = loc("/usr/include/stdlib.h":573:24)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":26:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":26:49)
#loc7 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_11.c":22:1)
#loc8 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_11.c":40:1)
#loc9 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_11.c":24:5)
#loc10 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_11.c":24:13)
#loc11 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_11.c":25:12)
#loc12 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_11.c":25:5)
#loc13 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_11.c":26:5)
#loc14 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_11.c":30:5)
#loc15 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_11.c":26:8)
#loc16 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_11.c":26:26)
#loc17 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_11.c":27:5)
#loc18 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_11.c":29:25)
#loc19 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_11.c":29:9)
#loc20 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_11.c":31:5)
#loc21 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_11.c":39:5)
#loc22 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_11.c":31:8)
#loc23 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_11.c":31:26)
#loc24 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_11.c":32:5)
#loc25 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_11.c":33:9)
#loc26 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_11.c":38:9)
#loc27 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_11.c":33:12)
#loc28 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_11.c":33:19)
#loc29 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_11.c":34:9)
#loc30 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_11.c":36:13)
#loc31 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_11.c":36:37)
#loc32 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_11.c":36:30)
#loc33 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_11.c":37:31)
#loc34 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_11.c":37:13)
#loc35 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_11.c":154:1)
#loc36 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_11.c":160:1)
#loc37 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_11.c":156:5)
#loc38 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_11.c":156:14)
#loc39 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_11.c":157:5)
#loc40 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_11.c":157:14)
#loc41 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_11.c":158:5)
#loc42 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_11.c":158:14)
#loc43 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_11.c":159:5)
#loc44 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_11.c":159:14)
#loc45 = loc("../../../testcasesupport/std_testcase_io.h":50:1)
#loc46 = loc("../../../testcasesupport/std_testcase_io.h":50:24)
#loc47 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc48 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc49 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_11.c":59:19)
#loc50 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_11.c":73:27)
#loc51 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_11.c":47:1)
#loc52 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_11.c":77:1)
#loc53 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_11.c":49:5)
#loc54 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_11.c":49:13)
#loc55 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_11.c":50:12)
#loc56 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_11.c":50:5)
#loc57 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_11.c":51:5)
#loc58 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_11.c":55:5)
#loc59 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_11.c":51:8)
#loc60 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_11.c":51:26)
#loc61 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_11.c":52:5)
#loc62 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_11.c":54:25)
#loc63 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_11.c":54:9)
#loc64 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_11.c":56:5)
#loc65 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_11.c":76:5)
#loc66 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_11.c":56:8)
#loc67 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_11.c":56:27)
#loc68 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_11.c":57:5)
#loc69 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_11.c":60:5)
#loc70 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_11.c":62:5)
#loc71 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_11.c":59:9)
#loc72 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_11.c":63:9)
#loc73 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_11.c":75:9)
#loc74 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_11.c":63:12)
#loc75 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_11.c":63:19)
#loc76 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_11.c":64:9)
#loc77 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_11.c":66:13)
#loc78 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_11.c":74:13)
#loc79 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_11.c":66:17)
#loc80 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_11.c":66:25)
#loc81 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_11.c":66:35)
#loc82 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_11.c":66:36)
#loc83 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_11.c":67:13)
#loc84 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_11.c":70:13)
#loc85 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_11.c":72:13)
#loc86 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_11.c":68:17)
#loc87 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_11.c":68:41)
#loc88 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_11.c":68:34)
#loc89 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_11.c":69:35)
#loc90 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_11.c":69:17)
#loc91 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_11.c":73:17)
#loc92 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_11.c":80:1)
#loc93 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_11.c":105:1)
#loc94 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_11.c":82:5)
#loc95 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_11.c":82:13)
#loc96 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_11.c":83:12)
#loc97 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_11.c":83:5)
#loc98 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_11.c":84:5)
#loc99 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_11.c":88:5)
#loc100 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_11.c":84:8)
#loc101 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_11.c":84:26)
#loc102 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_11.c":85:5)
#loc103 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_11.c":87:25)
#loc104 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_11.c":87:9)
#loc105 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_11.c":89:5)
#loc106 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_11.c":104:5)
#loc107 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_11.c":89:8)
#loc108 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_11.c":89:26)
#loc109 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_11.c":90:5)
#loc110 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_11.c":91:9)
#loc111 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_11.c":103:9)
#loc112 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_11.c":91:12)
#loc113 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_11.c":91:19)
#loc114 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_11.c":92:9)
#loc115 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_11.c":94:13)
#loc116 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_11.c":102:13)
#loc117 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_11.c":94:17)
#loc118 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_11.c":94:25)
#loc119 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_11.c":94:35)
#loc120 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_11.c":94:36)
#loc121 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_11.c":95:13)
#loc122 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_11.c":98:13)
#loc123 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_11.c":100:13)
#loc124 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_11.c":96:17)
#loc125 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_11.c":96:41)
#loc126 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_11.c":96:34)
#loc127 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_11.c":97:35)
#loc128 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_11.c":97:17)
#loc129 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_11.c":101:27)
#loc130 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_11.c":101:17)
#loc131 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_11.c":108:1)
#loc132 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_11.c":131:1)
#loc133 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_11.c":110:5)
#loc134 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_11.c":110:13)
#loc135 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_11.c":111:12)
#loc136 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_11.c":111:5)
#loc137 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_11.c":112:5)
#loc138 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_11.c":121:5)
#loc139 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_11.c":112:8)
#loc140 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_11.c":112:27)
#loc141 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_11.c":113:5)
#loc142 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_11.c":116:5)
#loc143 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_11.c":118:5)
#loc144 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_11.c":115:19)
#loc145 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_11.c":115:9)
#loc146 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_11.c":120:16)
#loc147 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_11.c":120:9)
#loc148 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_11.c":122:5)
#loc149 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_11.c":130:5)
#loc150 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_11.c":122:8)
#loc151 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_11.c":122:26)
#loc152 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_11.c":123:5)
#loc153 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_11.c":124:9)
#loc154 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_11.c":129:9)
#loc155 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_11.c":124:12)
#loc156 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_11.c":124:19)
#loc157 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_11.c":125:9)
#loc158 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_11.c":127:13)
#loc159 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_11.c":127:37)
#loc160 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_11.c":127:30)
#loc161 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_11.c":128:31)
#loc162 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_11.c":128:13)
#loc163 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_11.c":134:1)
#loc164 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_11.c":152:1)
#loc165 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_11.c":136:5)
#loc166 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_11.c":136:13)
#loc167 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_11.c":137:12)
#loc168 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_11.c":137:5)
#loc169 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_11.c":138:5)
#loc170 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_11.c":142:5)
#loc171 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_11.c":138:8)
#loc172 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_11.c":138:26)
#loc173 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_11.c":139:5)
#loc174 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_11.c":141:16)
#loc175 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_11.c":141:9)
#loc176 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_11.c":143:5)
#loc177 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_11.c":151:5)
#loc178 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_11.c":143:8)
#loc179 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_11.c":143:26)
#loc180 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_11.c":144:5)
#loc181 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_11.c":145:9)
#loc182 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_11.c":150:9)
#loc183 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_11.c":145:12)
#loc184 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_11.c":145:19)
#loc185 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_11.c":146:9)
#loc186 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_11.c":148:13)
#loc187 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_11.c":148:37)
#loc188 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_11.c":148:30)
#loc189 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_11.c":149:31)
#loc190 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_11.c":149:13)
#loc191 = loc(fused[#loc1, #loc2])
#loc192 = loc(fused[#loc3, #loc4])
#loc193 = loc(fused[#loc5, #loc6])
#loc194 = loc(fused[#loc7, #loc8])
#loc195 = loc(fused[#loc9, #loc10])
#loc196 = loc(fused[#loc12, #loc11])
#loc197 = loc(fused[#loc13, #loc14])
#loc198 = loc(fused[#loc15, #loc16])
#loc199 = loc(fused[#loc17, #loc14])
#loc200 = loc(fused[#loc19, #loc18])
#loc201 = loc(fused[#loc20, #loc21])
#loc202 = loc(fused[#loc22, #loc23])
#loc203 = loc(fused[#loc24, #loc21])
#loc204 = loc(fused[#loc25, #loc26])
#loc205 = loc(fused[#loc27, #loc28])
#loc206 = loc(fused[#loc29, #loc26])
#loc207 = loc(fused[#loc30, #loc31])
#loc208 = loc(fused[#loc35, #loc36])
#loc209 = loc(fused[#loc37, #loc38])
#loc210 = loc(fused[#loc39, #loc40])
#loc211 = loc(fused[#loc41, #loc42])
#loc212 = loc(fused[#loc43, #loc44])
#loc213 = loc(fused[#loc45, #loc46])
#loc214 = loc(fused[#loc47, #loc48])
#loc215 = loc(fused[#loc51, #loc52])
#loc216 = loc(fused[#loc53, #loc54])
#loc217 = loc(fused[#loc56, #loc55])
#loc218 = loc(fused[#loc57, #loc58])
#loc219 = loc(fused[#loc59, #loc60])
#loc220 = loc(fused[#loc61, #loc58])
#loc221 = loc(fused[#loc63, #loc62])
#loc222 = loc(fused[#loc64, #loc65])
#loc223 = loc(fused[#loc66, #loc67])
#loc224 = loc(fused[#loc68, #loc69, #loc70, #loc65])
#loc225 = loc(fused[#loc72, #loc73])
#loc226 = loc(fused[#loc74, #loc75])
#loc227 = loc(fused[#loc76, #loc73])
#loc228 = loc(fused[#loc77, #loc78])
#loc229 = loc(fused[#loc80, #loc81])
#loc230 = loc(fused[#loc79, #loc82])
#loc231 = loc(fused[#loc83, #loc84, #loc85, #loc78])
#loc232 = loc(fused[#loc86, #loc87])
#loc233 = loc(fused[#loc92, #loc93])
#loc234 = loc(fused[#loc94, #loc95])
#loc235 = loc(fused[#loc97, #loc96])
#loc236 = loc(fused[#loc98, #loc99])
#loc237 = loc(fused[#loc100, #loc101])
#loc238 = loc(fused[#loc102, #loc99])
#loc239 = loc(fused[#loc104, #loc103])
#loc240 = loc(fused[#loc105, #loc106])
#loc241 = loc(fused[#loc107, #loc108])
#loc242 = loc(fused[#loc109, #loc106])
#loc243 = loc(fused[#loc110, #loc111])
#loc244 = loc(fused[#loc112, #loc113])
#loc245 = loc(fused[#loc114, #loc111])
#loc246 = loc(fused[#loc115, #loc116])
#loc247 = loc(fused[#loc118, #loc119])
#loc248 = loc(fused[#loc117, #loc120])
#loc249 = loc(fused[#loc121, #loc122, #loc123, #loc116])
#loc250 = loc(fused[#loc124, #loc125])
#loc251 = loc(fused[#loc131, #loc132])
#loc252 = loc(fused[#loc133, #loc134])
#loc253 = loc(fused[#loc136, #loc135])
#loc254 = loc(fused[#loc137, #loc138])
#loc255 = loc(fused[#loc139, #loc140])
#loc256 = loc(fused[#loc141, #loc142, #loc143, #loc138])
#loc257 = loc(fused[#loc147, #loc146])
#loc258 = loc(fused[#loc148, #loc149])
#loc259 = loc(fused[#loc150, #loc151])
#loc260 = loc(fused[#loc152, #loc149])
#loc261 = loc(fused[#loc153, #loc154])
#loc262 = loc(fused[#loc155, #loc156])
#loc263 = loc(fused[#loc157, #loc154])
#loc264 = loc(fused[#loc158, #loc159])
#loc265 = loc(fused[#loc163, #loc164])
#loc266 = loc(fused[#loc165, #loc166])
#loc267 = loc(fused[#loc168, #loc167])
#loc268 = loc(fused[#loc169, #loc170])
#loc269 = loc(fused[#loc171, #loc172])
#loc270 = loc(fused[#loc173, #loc170])
#loc271 = loc(fused[#loc175, #loc174])
#loc272 = loc(fused[#loc176, #loc177])
#loc273 = loc(fused[#loc178, #loc179])
#loc274 = loc(fused[#loc180, #loc177])
#loc275 = loc(fused[#loc181, #loc182])
#loc276 = loc(fused[#loc183, #loc184])
#loc277 = loc(fused[#loc185, #loc182])
#loc278 = loc(fused[#loc186, #loc187])
