!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc5 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_41.c":22:21)
#loc6 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_41.c":22:29)
#loc39 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_41.c":66:25)
#loc40 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_41.c":66:33)
#loc74 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_41.c":46:25)
#loc75 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_41.c":46:33)
#loc100 = loc(fused[#loc5, #loc6])
#loc114 = loc(fused[#loc39, #loc40])
#loc128 = loc(fused[#loc74, #loc75])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE191_Integer_Underflow/s01/CWE191_Integer_Underflow__int64_t_min_multiply_41.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f64 = dense<64> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @printLongLongLine(!s64i) loc(#loc98)
  cir.func internal private @badSink(%arg0: !s64i loc(fused[#loc5, #loc6])) extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc101)
    %1 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data", init] {alignment = 8 : i64} loc(#loc100)
    cir.store %arg0, %1 : !s64i, !cir.ptr<!s64i> loc(#loc9)
    cir.br ^bb1 loc(#loc102)
  ^bb1:  // pred: ^bb0
    %2 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc12)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc13)
    %4 = cir.cast(integral, %3 : !s32i), !s64i loc(#loc13)
    %5 = cir.cmp(lt, %2, %4) : !s64i, !cir.bool loc(#loc103)
    cir.brcond %5 ^bb2, ^bb3 loc(#loc104)
  ^bb2:  // pred: ^bb1
    %6 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc15)
    %7 = cir.const #cir.int<2> : !s32i loc(#loc8)
    %8 = cir.cast(integral, %7 : !s32i), !s64i loc(#loc8)
    %9 = cir.binop(mul, %6, %8) nsw : !s64i loc(#loc15)
    cir.store %9, %0 : !s64i, !cir.ptr<!s64i> loc(#loc101)
    %10 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc16)
    cir.call @printLongLongLine(%10) : (!s64i) -> () loc(#loc17)
    cir.br ^bb3 loc(#loc11)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc11)
  ^bb4:  // pred: ^bb3
    cir.return loc(#loc4)
  } loc(#loc99)
  cir.func no_proto @CWE191_Integer_Underflow__int64_t_min_multiply_41_bad() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc106)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc22)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc107)
    %2 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc24)
    %3 = cir.unary(minus, %2) : !s64i, !s64i loc(#loc24)
    %4 = cir.const #cir.int<1> : !s64i loc(#loc24)
    %5 = cir.binop(sub, %3, %4) nsw : !s64i loc(#loc24)
    cir.store %5, %0 : !s64i, !cir.ptr<!s64i> loc(#loc108)
    %6 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc26)
    cir.call @badSink(%6) : (!s64i) -> () loc(#loc27)
    cir.return loc(#loc19)
  } loc(#loc105)
  cir.func no_proto @CWE191_Integer_Underflow__int64_t_min_multiply_41_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc110)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc30)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc111)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc32)
    cir.return loc(#loc29)
  } loc(#loc109)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc112)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data value is too small to perform multiplication.\00" : !cir.array<!s8i x 51>> : !cir.array<!s8i x 51> {alignment = 1 : i64} loc(#loc36)
  cir.func internal private @goodB2GSink(%arg0: !s64i loc(fused[#loc39, #loc40])) extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc115)
    %1 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data", init] {alignment = 8 : i64} loc(#loc114)
    cir.store %arg0, %1 : !s64i, !cir.ptr<!s64i> loc(#loc43)
    cir.br ^bb1 loc(#loc116)
  ^bb1:  // pred: ^bb0
    %2 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc46)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc47)
    %4 = cir.cast(integral, %3 : !s32i), !s64i loc(#loc47)
    %5 = cir.cmp(lt, %2, %4) : !s64i, !cir.bool loc(#loc117)
    cir.brcond %5 ^bb2, ^bb8 loc(#loc118)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc119)
  ^bb3:  // pred: ^bb2
    %6 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc51)
    %7 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc52)
    %8 = cir.unary(minus, %7) : !s64i, !s64i loc(#loc52)
    %9 = cir.const #cir.int<1> : !s64i loc(#loc52)
    %10 = cir.binop(sub, %8, %9) nsw : !s64i loc(#loc52)
    %11 = cir.const #cir.int<2> : !s32i loc(#loc53)
    %12 = cir.cast(integral, %11 : !s32i), !s64i loc(#loc53)
    %13 = cir.binop(div, %10, %12) : !s64i loc(#loc120)
    %14 = cir.cmp(gt, %6, %13) : !s64i, !cir.bool loc(#loc121)
    cir.brcond %14 ^bb4, ^bb5 loc(#loc122)
  ^bb4:  // pred: ^bb3
    %15 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc58)
    %16 = cir.const #cir.int<2> : !s32i loc(#loc42)
    %17 = cir.cast(integral, %16 : !s32i), !s64i loc(#loc42)
    %18 = cir.binop(mul, %15, %17) nsw : !s64i loc(#loc58)
    cir.store %18, %0 : !s64i, !cir.ptr<!s64i> loc(#loc115)
    %19 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc59)
    cir.call @printLongLongLine(%19) : (!s64i) -> () loc(#loc60)
    cir.br ^bb6 loc(#loc56)
  ^bb5:  // pred: ^bb3
    %20 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 51>> loc(#loc36)
    %21 = cir.cast(array_to_ptrdecay, %20 : !cir.ptr<!cir.array<!s8i x 51>>), !cir.ptr<!s8i> loc(#loc36)
    cir.call @printLine(%21) : (!cir.ptr<!s8i>) -> () loc(#loc61)
    cir.br ^bb6 loc(#loc50)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc50)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc45)
  ^bb8:  // 2 preds: ^bb1, ^bb7
    cir.br ^bb9 loc(#loc45)
  ^bb9:  // pred: ^bb8
    cir.return loc(#loc38)
  } loc(#loc113)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc124)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc66)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc125)
    %2 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc68)
    %3 = cir.unary(minus, %2) : !s64i, !s64i loc(#loc68)
    %4 = cir.const #cir.int<1> : !s64i loc(#loc68)
    %5 = cir.binop(sub, %3, %4) nsw : !s64i loc(#loc68)
    cir.store %5, %0 : !s64i, !cir.ptr<!s64i> loc(#loc126)
    %6 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc70)
    cir.call @goodB2GSink(%6) : (!s64i) -> () loc(#loc71)
    cir.return loc(#loc63)
  } loc(#loc123)
  cir.func internal private @goodG2BSink(%arg0: !s64i loc(fused[#loc74, #loc75])) extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc129)
    %1 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data", init] {alignment = 8 : i64} loc(#loc128)
    cir.store %arg0, %1 : !s64i, !cir.ptr<!s64i> loc(#loc78)
    cir.br ^bb1 loc(#loc130)
  ^bb1:  // pred: ^bb0
    %2 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc81)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc82)
    %4 = cir.cast(integral, %3 : !s32i), !s64i loc(#loc82)
    %5 = cir.cmp(lt, %2, %4) : !s64i, !cir.bool loc(#loc131)
    cir.brcond %5 ^bb2, ^bb3 loc(#loc132)
  ^bb2:  // pred: ^bb1
    %6 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc84)
    %7 = cir.const #cir.int<2> : !s32i loc(#loc77)
    %8 = cir.cast(integral, %7 : !s32i), !s64i loc(#loc77)
    %9 = cir.binop(mul, %6, %8) nsw : !s64i loc(#loc84)
    cir.store %9, %0 : !s64i, !cir.ptr<!s64i> loc(#loc129)
    %10 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc85)
    cir.call @printLongLongLine(%10) : (!s64i) -> () loc(#loc86)
    cir.br ^bb3 loc(#loc80)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc80)
  ^bb4:  // pred: ^bb3
    cir.return loc(#loc73)
  } loc(#loc127)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc134)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc91)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc135)
    %2 = cir.const #cir.int<2> : !s32i loc(#loc93)
    %3 = cir.unary(minus, %2) : !s32i, !s32i loc(#loc94)
    %4 = cir.cast(integral, %3 : !s32i), !s64i loc(#loc94)
    cir.store %4, %0 : !s64i, !cir.ptr<!s64i> loc(#loc136)
    %5 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc96)
    cir.call @goodG2BSink(%5) : (!s64i) -> () loc(#loc97)
    cir.return loc(#loc88)
  } loc(#loc133)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE191_Integer_Underflow/s01/CWE191_Integer_Underflow__int64_t_min_multiply_41.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":26:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":26:49)
#loc3 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_41.c":22:1)
#loc4 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_41.c":30:1)
#loc7 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_41.c":27:9)
#loc8 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_41.c":27:33)
#loc9 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_41.c":23:1)
#loc10 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_41.c":24:5)
#loc11 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_41.c":29:5)
#loc12 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_41.c":24:8)
#loc13 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_41.c":24:15)
#loc14 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_41.c":25:5)
#loc15 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_41.c":27:26)
#loc16 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_41.c":28:27)
#loc17 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_41.c":28:9)
#loc18 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_41.c":32:1)
#loc19 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_41.c":39:1)
#loc20 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_41.c":34:5)
#loc21 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_41.c":34:13)
#loc22 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_41.c":35:12)
#loc23 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_41.c":35:5)
#loc24 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_41.c":37:12)
#loc25 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_41.c":37:5)
#loc26 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_41.c":38:13)
#loc27 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_41.c":38:5)
#loc28 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_41.c":92:1)
#loc29 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_41.c":96:1)
#loc30 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_41.c":94:5)
#loc31 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_41.c":94:13)
#loc32 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_41.c":95:5)
#loc33 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_41.c":95:13)
#loc34 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc35 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc36 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_41.c":78:23)
#loc37 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_41.c":66:1)
#loc38 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_41.c":81:1)
#loc41 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_41.c":73:13)
#loc42 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_41.c":73:37)
#loc43 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_41.c":67:1)
#loc44 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_41.c":68:5)
#loc45 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_41.c":80:5)
#loc46 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_41.c":68:8)
#loc47 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_41.c":68:15)
#loc48 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_41.c":69:5)
#loc49 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_41.c":71:9)
#loc50 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_41.c":79:9)
#loc51 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_41.c":71:13)
#loc52 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_41.c":71:21)
#loc53 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_41.c":71:31)
#loc54 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_41.c":71:32)
#loc55 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_41.c":72:9)
#loc56 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_41.c":75:9)
#loc57 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_41.c":77:9)
#loc58 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_41.c":73:30)
#loc59 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_41.c":74:31)
#loc60 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_41.c":74:13)
#loc61 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_41.c":78:13)
#loc62 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_41.c":83:1)
#loc63 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_41.c":90:1)
#loc64 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_41.c":85:5)
#loc65 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_41.c":85:13)
#loc66 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_41.c":86:12)
#loc67 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_41.c":86:5)
#loc68 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_41.c":88:12)
#loc69 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_41.c":88:5)
#loc70 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_41.c":89:17)
#loc71 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_41.c":89:5)
#loc72 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_41.c":46:1)
#loc73 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_41.c":54:1)
#loc76 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_41.c":51:9)
#loc77 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_41.c":51:33)
#loc78 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_41.c":47:1)
#loc79 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_41.c":48:5)
#loc80 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_41.c":53:5)
#loc81 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_41.c":48:8)
#loc82 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_41.c":48:15)
#loc83 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_41.c":49:5)
#loc84 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_41.c":51:26)
#loc85 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_41.c":52:27)
#loc86 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_41.c":52:9)
#loc87 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_41.c":56:1)
#loc88 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_41.c":63:1)
#loc89 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_41.c":58:5)
#loc90 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_41.c":58:13)
#loc91 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_41.c":59:12)
#loc92 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_41.c":59:5)
#loc93 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_41.c":61:13)
#loc94 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_41.c":61:12)
#loc95 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_41.c":61:5)
#loc96 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_41.c":62:17)
#loc97 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_41.c":62:5)
#loc98 = loc(fused[#loc1, #loc2])
#loc99 = loc(fused[#loc3, #loc4])
#loc101 = loc(fused[#loc7, #loc8])
#loc102 = loc(fused[#loc10, #loc11])
#loc103 = loc(fused[#loc12, #loc13])
#loc104 = loc(fused[#loc14, #loc11])
#loc105 = loc(fused[#loc18, #loc19])
#loc106 = loc(fused[#loc20, #loc21])
#loc107 = loc(fused[#loc23, #loc22])
#loc108 = loc(fused[#loc25, #loc24])
#loc109 = loc(fused[#loc28, #loc29])
#loc110 = loc(fused[#loc30, #loc31])
#loc111 = loc(fused[#loc32, #loc33])
#loc112 = loc(fused[#loc34, #loc35])
#loc113 = loc(fused[#loc37, #loc38])
#loc115 = loc(fused[#loc41, #loc42])
#loc116 = loc(fused[#loc44, #loc45])
#loc117 = loc(fused[#loc46, #loc47])
#loc118 = loc(fused[#loc48, #loc45])
#loc119 = loc(fused[#loc49, #loc50])
#loc120 = loc(fused[#loc52, #loc53])
#loc121 = loc(fused[#loc51, #loc54])
#loc122 = loc(fused[#loc55, #loc56, #loc57, #loc50])
#loc123 = loc(fused[#loc62, #loc63])
#loc124 = loc(fused[#loc64, #loc65])
#loc125 = loc(fused[#loc67, #loc66])
#loc126 = loc(fused[#loc69, #loc68])
#loc127 = loc(fused[#loc72, #loc73])
#loc129 = loc(fused[#loc76, #loc77])
#loc130 = loc(fused[#loc79, #loc80])
#loc131 = loc(fused[#loc81, #loc82])
#loc132 = loc(fused[#loc83, #loc80])
#loc133 = loc(fused[#loc87, #loc88])
#loc134 = loc(fused[#loc89, #loc90])
#loc135 = loc(fused[#loc92, #loc91])
#loc136 = loc(fused[#loc95, #loc93])
