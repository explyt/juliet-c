!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e">} {
  cir.func no_proto private @globalReturnsTrueOrFalse(...) -> !s32i loc(#loc428)
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc429)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc430)
  cir.func private @wmemset(!cir.ptr<!s32i>, !s32i, !u64i) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc431)
  cir.func private @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc432)
  cir.func private @calloc(!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc433)
  cir.func private @wcscpy(!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc434)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc435)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc436)
  cir.func private @wcslen(!cir.ptr<!s32i>) -> !u64i extra(#fn_attr) loc(#loc437)
  cir.func private @printWLine(!cir.ptr<!s32i>) loc(#loc438)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__CWE135_12_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc440)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc27)
    cir.store %1, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc441)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc443)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc443)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc31)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc31)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc446)
          %7 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc40)
          %8 = cir.const #cir.int<50> : !s32i loc(#loc41)
          %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc41)
          %10 = cir.const #cir.int<4> : !u64i loc(#loc447)
          %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc448)
          %12 = cir.call @malloc(%11) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc40)
          %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc449)
          cir.store %13, %6 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc446)
          cir.scope {
            %29 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc46)
            %30 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc47)
            %31 = cir.cast(bitcast, %30 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc47)
            %32 = cir.cmp(eq, %29, %31) : !cir.ptr<!s32i>, !cir.bool loc(#loc451)
            cir.if %32 {
              %33 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc49)
              %34 = cir.const #cir.int<1> : !s32i loc(#loc50)
              %35 = cir.unary(minus, %34) nsw : !s32i, !s32i loc(#loc51)
              cir.call @exit(%35) : (!s32i) -> () extra(#fn_attr) loc(#loc49)
            } loc(#loc452)
          } loc(#loc450)
          %14 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc52)
          %15 = cir.const #cir.int<65> : !s32i loc(#loc53)
          %16 = cir.const #cir.int<50> : !s32i loc(#loc54)
          %17 = cir.const #cir.int<1> : !s32i loc(#loc55)
          %18 = cir.binop(sub, %16, %17) nsw : !s32i loc(#loc54)
          %19 = cir.cast(integral, %18 : !s32i), !u64i loc(#loc54)
          %20 = cir.call @wmemset(%14, %15, %19) : (!cir.ptr<!s32i>, !s32i, !u64i) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc56)
          %21 = cir.const #cir.int<0> : !s32i loc(#loc57)
          %22 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc58)
          %23 = cir.const #cir.int<50> : !s32i loc(#loc59)
          %24 = cir.const #cir.int<1> : !s32i loc(#loc60)
          %25 = cir.binop(sub, %23, %24) nsw : !s32i loc(#loc59)
          %26 = cir.ptr_stride(%22 : !cir.ptr<!s32i>, %25 : !s32i), !cir.ptr<!s32i> loc(#loc61)
          cir.store %21, %26 : !s32i, !cir.ptr<!s32i> loc(#loc453)
          %27 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc62)
          %28 = cir.cast(bitcast, %27 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc62)
          cir.store %28, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc454)
        } loc(#loc445)
      } else {
        cir.scope {
          %6 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc456)
          %7 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc68)
          %8 = cir.const #cir.int<50> : !s32i loc(#loc69)
          %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc69)
          %10 = cir.const #cir.int<1> : !u64i loc(#loc457)
          %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc458)
          %12 = cir.call @malloc(%11) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc68)
          %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc459)
          cir.store %13, %6 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc456)
          cir.scope {
            %30 = cir.load %6 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc74)
            %31 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc75)
            %32 = cir.cast(bitcast, %31 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc75)
            %33 = cir.cmp(eq, %30, %32) : !cir.ptr<!s8i>, !cir.bool loc(#loc461)
            cir.if %33 {
              %34 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc77)
              %35 = cir.const #cir.int<1> : !s32i loc(#loc78)
              %36 = cir.unary(minus, %35) nsw : !s32i, !s32i loc(#loc79)
              cir.call @exit(%36) : (!s32i) -> () extra(#fn_attr) loc(#loc77)
            } loc(#loc462)
          } loc(#loc460)
          %14 = cir.load %6 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc80)
          %15 = cir.cast(bitcast, %14 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc80)
          %16 = cir.const #cir.int<65> : !s32i loc(#loc81)
          %17 = cir.const #cir.int<50> : !s32i loc(#loc82)
          %18 = cir.const #cir.int<1> : !s32i loc(#loc83)
          %19 = cir.binop(sub, %17, %18) nsw : !s32i loc(#loc82)
          %20 = cir.cast(integral, %19 : !s32i), !u64i loc(#loc82)
          cir.libc.memset %20 bytes from %15 set to %16 : !cir.ptr<!void>, !s32i, !u64i loc(#loc463)
          %21 = cir.const #cir.int<0> : !s32i loc(#loc86)
          %22 = cir.cast(integral, %21 : !s32i), !s8i loc(#loc86)
          %23 = cir.load %6 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc87)
          %24 = cir.const #cir.int<50> : !s32i loc(#loc88)
          %25 = cir.const #cir.int<1> : !s32i loc(#loc89)
          %26 = cir.binop(sub, %24, %25) nsw : !s32i loc(#loc88)
          %27 = cir.ptr_stride(%23 : !cir.ptr<!s8i>, %26 : !s32i), !cir.ptr<!s8i> loc(#loc90)
          cir.store %22, %27 : !s8i, !cir.ptr<!s8i> loc(#loc464)
          %28 = cir.load %6 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc91)
          %29 = cir.cast(bitcast, %28 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc91)
          cir.store %29, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc465)
        } loc(#loc455)
      } loc(#loc444)
    } loc(#loc442)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc467)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc467)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc95)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc95)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc470)
          %7 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc471)
          %8 = cir.get_global @strlen : !cir.ptr<!cir.func<(!cir.ptr<!s8i>) -> !u64i>> loc(#loc106)
          %9 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc107)
          %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc107)
          %11 = cir.call @strlen(%10) : (!cir.ptr<!s8i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc106)
          cir.store %11, %6 : !u64i, !cir.ptr<!u64i> loc(#loc470)
          %12 = cir.get_global @calloc : !cir.ptr<!cir.func<(!u64i, !u64i) -> !cir.ptr<!void>>> loc(#loc108)
          %13 = cir.load %6 : !cir.ptr<!u64i>, !u64i loc(#loc109)
          %14 = cir.const #cir.int<1> : !s32i loc(#loc110)
          %15 = cir.cast(integral, %14 : !s32i), !u64i loc(#loc110)
          %16 = cir.binop(add, %13, %15) : !u64i loc(#loc472)
          %17 = cir.const #cir.int<4> : !u64i loc(#loc473)
          %18 = cir.call @calloc(%16, %17) : (!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc108)
          cir.store %18, %7 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc471)
          cir.scope {
            %28 = cir.load %7 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc115)
            %29 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc116)
            %30 = cir.cmp(eq, %28, %29) : !cir.ptr<!void>, !cir.bool loc(#loc475)
            cir.if %30 {
              %31 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc118)
              %32 = cir.const #cir.int<1> : !s32i loc(#loc119)
              %33 = cir.unary(minus, %32) nsw : !s32i, !s32i loc(#loc120)
              cir.call @exit(%33) : (!s32i) -> () extra(#fn_attr) loc(#loc118)
            } loc(#loc476)
          } loc(#loc474)
          %19 = cir.load %7 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc121)
          %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc121)
          %21 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc122)
          %22 = cir.cast(bitcast, %21 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc122)
          %23 = cir.call @wcscpy(%20, %22) : (!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc123)
          %24 = cir.load %7 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc124)
          %25 = cir.cast(bitcast, %24 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc124)
          cir.call @printLine(%25) : (!cir.ptr<!s8i>) -> () loc(#loc125)
          %26 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc126)
          %27 = cir.load %7 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc127)
          cir.call @free(%27) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc126)
        } loc(#loc469)
      } else {
        cir.scope {
          %6 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc478)
          %7 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc479)
          %8 = cir.get_global @wcslen : !cir.ptr<!cir.func<(!cir.ptr<!s32i>) -> !u64i>> loc(#loc134)
          %9 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc135)
          %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc135)
          %11 = cir.call @wcslen(%10) : (!cir.ptr<!s32i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc134)
          cir.store %11, %6 : !u64i, !cir.ptr<!u64i> loc(#loc478)
          %12 = cir.get_global @calloc : !cir.ptr<!cir.func<(!u64i, !u64i) -> !cir.ptr<!void>>> loc(#loc136)
          %13 = cir.load %6 : !cir.ptr<!u64i>, !u64i loc(#loc137)
          %14 = cir.const #cir.int<1> : !s32i loc(#loc138)
          %15 = cir.cast(integral, %14 : !s32i), !u64i loc(#loc138)
          %16 = cir.binop(add, %13, %15) : !u64i loc(#loc480)
          %17 = cir.const #cir.int<4> : !u64i loc(#loc481)
          %18 = cir.call @calloc(%16, %17) : (!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc136)
          cir.store %18, %7 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc479)
          cir.scope {
            %28 = cir.load %7 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc143)
            %29 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc144)
            %30 = cir.cmp(eq, %28, %29) : !cir.ptr<!void>, !cir.bool loc(#loc483)
            cir.if %30 {
              %31 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc146)
              %32 = cir.const #cir.int<1> : !s32i loc(#loc147)
              %33 = cir.unary(minus, %32) nsw : !s32i, !s32i loc(#loc148)
              cir.call @exit(%33) : (!s32i) -> () extra(#fn_attr) loc(#loc146)
            } loc(#loc484)
          } loc(#loc482)
          %19 = cir.load %7 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc149)
          %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc149)
          %21 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc150)
          %22 = cir.cast(bitcast, %21 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc150)
          %23 = cir.call @wcscpy(%20, %22) : (!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc151)
          %24 = cir.load %7 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc152)
          %25 = cir.cast(bitcast, %24 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc152)
          cir.call @printWLine(%25) : (!cir.ptr<!s32i>) -> () loc(#loc153)
          %26 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc154)
          %27 = cir.load %7 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc155)
          cir.call @free(%27) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc154)
        } loc(#loc477)
      } loc(#loc468)
    } loc(#loc466)
    cir.return loc(#loc24)
  } loc(#loc439)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__CWE135_12_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc486)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc158)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc487)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc160)
    cir.return loc(#loc157)
  } loc(#loc485)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc489)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc166)
    cir.store %1, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc490)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc492)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc492)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc170)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc170)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc495)
          %7 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc179)
          %8 = cir.const #cir.int<50> : !s32i loc(#loc180)
          %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc180)
          %10 = cir.const #cir.int<4> : !u64i loc(#loc496)
          %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc497)
          %12 = cir.call @malloc(%11) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc179)
          %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc498)
          cir.store %13, %6 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc495)
          cir.scope {
            %29 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc185)
            %30 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc186)
            %31 = cir.cast(bitcast, %30 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc186)
            %32 = cir.cmp(eq, %29, %31) : !cir.ptr<!s32i>, !cir.bool loc(#loc500)
            cir.if %32 {
              %33 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc188)
              %34 = cir.const #cir.int<1> : !s32i loc(#loc189)
              %35 = cir.unary(minus, %34) nsw : !s32i, !s32i loc(#loc190)
              cir.call @exit(%35) : (!s32i) -> () extra(#fn_attr) loc(#loc188)
            } loc(#loc501)
          } loc(#loc499)
          %14 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc191)
          %15 = cir.const #cir.int<65> : !s32i loc(#loc192)
          %16 = cir.const #cir.int<50> : !s32i loc(#loc193)
          %17 = cir.const #cir.int<1> : !s32i loc(#loc194)
          %18 = cir.binop(sub, %16, %17) nsw : !s32i loc(#loc193)
          %19 = cir.cast(integral, %18 : !s32i), !u64i loc(#loc193)
          %20 = cir.call @wmemset(%14, %15, %19) : (!cir.ptr<!s32i>, !s32i, !u64i) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc195)
          %21 = cir.const #cir.int<0> : !s32i loc(#loc196)
          %22 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc197)
          %23 = cir.const #cir.int<50> : !s32i loc(#loc198)
          %24 = cir.const #cir.int<1> : !s32i loc(#loc199)
          %25 = cir.binop(sub, %23, %24) nsw : !s32i loc(#loc198)
          %26 = cir.ptr_stride(%22 : !cir.ptr<!s32i>, %25 : !s32i), !cir.ptr<!s32i> loc(#loc200)
          cir.store %21, %26 : !s32i, !cir.ptr<!s32i> loc(#loc502)
          %27 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc201)
          %28 = cir.cast(bitcast, %27 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc201)
          cir.store %28, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc503)
        } loc(#loc494)
      } else {
        cir.scope {
          %6 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc505)
          %7 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc207)
          %8 = cir.const #cir.int<50> : !s32i loc(#loc208)
          %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc208)
          %10 = cir.const #cir.int<4> : !u64i loc(#loc506)
          %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc507)
          %12 = cir.call @malloc(%11) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc207)
          %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc508)
          cir.store %13, %6 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc505)
          cir.scope {
            %29 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc213)
            %30 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc214)
            %31 = cir.cast(bitcast, %30 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc214)
            %32 = cir.cmp(eq, %29, %31) : !cir.ptr<!s32i>, !cir.bool loc(#loc510)
            cir.if %32 {
              %33 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc216)
              %34 = cir.const #cir.int<1> : !s32i loc(#loc217)
              %35 = cir.unary(minus, %34) nsw : !s32i, !s32i loc(#loc218)
              cir.call @exit(%35) : (!s32i) -> () extra(#fn_attr) loc(#loc216)
            } loc(#loc511)
          } loc(#loc509)
          %14 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc219)
          %15 = cir.const #cir.int<65> : !s32i loc(#loc220)
          %16 = cir.const #cir.int<50> : !s32i loc(#loc221)
          %17 = cir.const #cir.int<1> : !s32i loc(#loc222)
          %18 = cir.binop(sub, %16, %17) nsw : !s32i loc(#loc221)
          %19 = cir.cast(integral, %18 : !s32i), !u64i loc(#loc221)
          %20 = cir.call @wmemset(%14, %15, %19) : (!cir.ptr<!s32i>, !s32i, !u64i) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc223)
          %21 = cir.const #cir.int<0> : !s32i loc(#loc224)
          %22 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc225)
          %23 = cir.const #cir.int<50> : !s32i loc(#loc226)
          %24 = cir.const #cir.int<1> : !s32i loc(#loc227)
          %25 = cir.binop(sub, %23, %24) nsw : !s32i loc(#loc226)
          %26 = cir.ptr_stride(%22 : !cir.ptr<!s32i>, %25 : !s32i), !cir.ptr<!s32i> loc(#loc228)
          cir.store %21, %26 : !s32i, !cir.ptr<!s32i> loc(#loc512)
          %27 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc229)
          %28 = cir.cast(bitcast, %27 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc229)
          cir.store %28, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc513)
        } loc(#loc504)
      } loc(#loc493)
    } loc(#loc491)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc515)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc515)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc233)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc233)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc518)
          %7 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc519)
          %8 = cir.get_global @wcslen : !cir.ptr<!cir.func<(!cir.ptr<!s32i>) -> !u64i>> loc(#loc244)
          %9 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc245)
          %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc245)
          %11 = cir.call @wcslen(%10) : (!cir.ptr<!s32i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc244)
          cir.store %11, %6 : !u64i, !cir.ptr<!u64i> loc(#loc518)
          %12 = cir.get_global @calloc : !cir.ptr<!cir.func<(!u64i, !u64i) -> !cir.ptr<!void>>> loc(#loc246)
          %13 = cir.load %6 : !cir.ptr<!u64i>, !u64i loc(#loc247)
          %14 = cir.const #cir.int<1> : !s32i loc(#loc248)
          %15 = cir.cast(integral, %14 : !s32i), !u64i loc(#loc248)
          %16 = cir.binop(add, %13, %15) : !u64i loc(#loc520)
          %17 = cir.const #cir.int<4> : !u64i loc(#loc521)
          %18 = cir.call @calloc(%16, %17) : (!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc246)
          cir.store %18, %7 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc519)
          cir.scope {
            %28 = cir.load %7 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc253)
            %29 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc254)
            %30 = cir.cmp(eq, %28, %29) : !cir.ptr<!void>, !cir.bool loc(#loc523)
            cir.if %30 {
              %31 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc256)
              %32 = cir.const #cir.int<1> : !s32i loc(#loc257)
              %33 = cir.unary(minus, %32) nsw : !s32i, !s32i loc(#loc258)
              cir.call @exit(%33) : (!s32i) -> () extra(#fn_attr) loc(#loc256)
            } loc(#loc524)
          } loc(#loc522)
          %19 = cir.load %7 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc259)
          %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc259)
          %21 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc260)
          %22 = cir.cast(bitcast, %21 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc260)
          %23 = cir.call @wcscpy(%20, %22) : (!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc261)
          %24 = cir.load %7 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc262)
          %25 = cir.cast(bitcast, %24 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc262)
          cir.call @printWLine(%25) : (!cir.ptr<!s32i>) -> () loc(#loc263)
          %26 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc264)
          %27 = cir.load %7 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc265)
          cir.call @free(%27) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc264)
        } loc(#loc517)
      } else {
        cir.scope {
          %6 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc526)
          %7 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc527)
          %8 = cir.get_global @wcslen : !cir.ptr<!cir.func<(!cir.ptr<!s32i>) -> !u64i>> loc(#loc272)
          %9 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc273)
          %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc273)
          %11 = cir.call @wcslen(%10) : (!cir.ptr<!s32i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc272)
          cir.store %11, %6 : !u64i, !cir.ptr<!u64i> loc(#loc526)
          %12 = cir.get_global @calloc : !cir.ptr<!cir.func<(!u64i, !u64i) -> !cir.ptr<!void>>> loc(#loc274)
          %13 = cir.load %6 : !cir.ptr<!u64i>, !u64i loc(#loc275)
          %14 = cir.const #cir.int<1> : !s32i loc(#loc276)
          %15 = cir.cast(integral, %14 : !s32i), !u64i loc(#loc276)
          %16 = cir.binop(add, %13, %15) : !u64i loc(#loc528)
          %17 = cir.const #cir.int<4> : !u64i loc(#loc529)
          %18 = cir.call @calloc(%16, %17) : (!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc274)
          cir.store %18, %7 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc527)
          cir.scope {
            %28 = cir.load %7 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc281)
            %29 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc282)
            %30 = cir.cmp(eq, %28, %29) : !cir.ptr<!void>, !cir.bool loc(#loc531)
            cir.if %30 {
              %31 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc284)
              %32 = cir.const #cir.int<1> : !s32i loc(#loc285)
              %33 = cir.unary(minus, %32) nsw : !s32i, !s32i loc(#loc286)
              cir.call @exit(%33) : (!s32i) -> () extra(#fn_attr) loc(#loc284)
            } loc(#loc532)
          } loc(#loc530)
          %19 = cir.load %7 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc287)
          %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc287)
          %21 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc288)
          %22 = cir.cast(bitcast, %21 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc288)
          %23 = cir.call @wcscpy(%20, %22) : (!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc289)
          %24 = cir.load %7 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc290)
          %25 = cir.cast(bitcast, %24 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc290)
          cir.call @printWLine(%25) : (!cir.ptr<!s32i>) -> () loc(#loc291)
          %26 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc292)
          %27 = cir.load %7 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc293)
          cir.call @free(%27) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc292)
        } loc(#loc525)
      } loc(#loc516)
    } loc(#loc514)
    cir.return loc(#loc163)
  } loc(#loc488)
  cir.func private @strcpy(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc533)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc535)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc300)
    cir.store %1, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc536)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc538)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc538)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc304)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc304)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc541)
          %7 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc313)
          %8 = cir.const #cir.int<50> : !s32i loc(#loc314)
          %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc314)
          %10 = cir.const #cir.int<1> : !u64i loc(#loc542)
          %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc543)
          %12 = cir.call @malloc(%11) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc313)
          %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc544)
          cir.store %13, %6 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc541)
          cir.scope {
            %30 = cir.load %6 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc319)
            %31 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc320)
            %32 = cir.cast(bitcast, %31 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc320)
            %33 = cir.cmp(eq, %30, %32) : !cir.ptr<!s8i>, !cir.bool loc(#loc546)
            cir.if %33 {
              %34 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc322)
              %35 = cir.const #cir.int<1> : !s32i loc(#loc323)
              %36 = cir.unary(minus, %35) nsw : !s32i, !s32i loc(#loc324)
              cir.call @exit(%36) : (!s32i) -> () extra(#fn_attr) loc(#loc322)
            } loc(#loc547)
          } loc(#loc545)
          %14 = cir.load %6 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc325)
          %15 = cir.cast(bitcast, %14 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc325)
          %16 = cir.const #cir.int<65> : !s32i loc(#loc326)
          %17 = cir.const #cir.int<50> : !s32i loc(#loc327)
          %18 = cir.const #cir.int<1> : !s32i loc(#loc328)
          %19 = cir.binop(sub, %17, %18) nsw : !s32i loc(#loc327)
          %20 = cir.cast(integral, %19 : !s32i), !u64i loc(#loc327)
          cir.libc.memset %20 bytes from %15 set to %16 : !cir.ptr<!void>, !s32i, !u64i loc(#loc548)
          %21 = cir.const #cir.int<0> : !s32i loc(#loc331)
          %22 = cir.cast(integral, %21 : !s32i), !s8i loc(#loc331)
          %23 = cir.load %6 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc332)
          %24 = cir.const #cir.int<50> : !s32i loc(#loc333)
          %25 = cir.const #cir.int<1> : !s32i loc(#loc334)
          %26 = cir.binop(sub, %24, %25) nsw : !s32i loc(#loc333)
          %27 = cir.ptr_stride(%23 : !cir.ptr<!s8i>, %26 : !s32i), !cir.ptr<!s8i> loc(#loc335)
          cir.store %22, %27 : !s8i, !cir.ptr<!s8i> loc(#loc549)
          %28 = cir.load %6 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc336)
          %29 = cir.cast(bitcast, %28 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc336)
          cir.store %29, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc550)
        } loc(#loc540)
      } else {
        cir.scope {
          %6 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc552)
          %7 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc342)
          %8 = cir.const #cir.int<50> : !s32i loc(#loc343)
          %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc343)
          %10 = cir.const #cir.int<1> : !u64i loc(#loc553)
          %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc554)
          %12 = cir.call @malloc(%11) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc342)
          %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc555)
          cir.store %13, %6 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc552)
          cir.scope {
            %30 = cir.load %6 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc348)
            %31 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc349)
            %32 = cir.cast(bitcast, %31 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc349)
            %33 = cir.cmp(eq, %30, %32) : !cir.ptr<!s8i>, !cir.bool loc(#loc557)
            cir.if %33 {
              %34 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc351)
              %35 = cir.const #cir.int<1> : !s32i loc(#loc352)
              %36 = cir.unary(minus, %35) nsw : !s32i, !s32i loc(#loc353)
              cir.call @exit(%36) : (!s32i) -> () extra(#fn_attr) loc(#loc351)
            } loc(#loc558)
          } loc(#loc556)
          %14 = cir.load %6 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc354)
          %15 = cir.cast(bitcast, %14 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc354)
          %16 = cir.const #cir.int<65> : !s32i loc(#loc355)
          %17 = cir.const #cir.int<50> : !s32i loc(#loc356)
          %18 = cir.const #cir.int<1> : !s32i loc(#loc357)
          %19 = cir.binop(sub, %17, %18) nsw : !s32i loc(#loc356)
          %20 = cir.cast(integral, %19 : !s32i), !u64i loc(#loc356)
          cir.libc.memset %20 bytes from %15 set to %16 : !cir.ptr<!void>, !s32i, !u64i loc(#loc559)
          %21 = cir.const #cir.int<0> : !s32i loc(#loc360)
          %22 = cir.cast(integral, %21 : !s32i), !s8i loc(#loc360)
          %23 = cir.load %6 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc361)
          %24 = cir.const #cir.int<50> : !s32i loc(#loc362)
          %25 = cir.const #cir.int<1> : !s32i loc(#loc363)
          %26 = cir.binop(sub, %24, %25) nsw : !s32i loc(#loc362)
          %27 = cir.ptr_stride(%23 : !cir.ptr<!s8i>, %26 : !s32i), !cir.ptr<!s8i> loc(#loc364)
          cir.store %22, %27 : !s8i, !cir.ptr<!s8i> loc(#loc560)
          %28 = cir.load %6 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc365)
          %29 = cir.cast(bitcast, %28 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc365)
          cir.store %29, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc561)
        } loc(#loc551)
      } loc(#loc539)
    } loc(#loc537)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc563)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc563)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc369)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc369)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc566)
          %7 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc567)
          %8 = cir.get_global @strlen : !cir.ptr<!cir.func<(!cir.ptr<!s8i>) -> !u64i>> loc(#loc380)
          %9 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc381)
          %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc381)
          %11 = cir.call @strlen(%10) : (!cir.ptr<!s8i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc380)
          cir.store %11, %6 : !u64i, !cir.ptr<!u64i> loc(#loc566)
          %12 = cir.get_global @calloc : !cir.ptr<!cir.func<(!u64i, !u64i) -> !cir.ptr<!void>>> loc(#loc382)
          %13 = cir.load %6 : !cir.ptr<!u64i>, !u64i loc(#loc383)
          %14 = cir.const #cir.int<1> : !s32i loc(#loc384)
          %15 = cir.cast(integral, %14 : !s32i), !u64i loc(#loc384)
          %16 = cir.binop(add, %13, %15) : !u64i loc(#loc568)
          %17 = cir.const #cir.int<1> : !s32i loc(#loc385)
          %18 = cir.cast(integral, %17 : !s32i), !u64i loc(#loc385)
          %19 = cir.call @calloc(%16, %18) : (!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc382)
          cir.store %19, %7 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc567)
          cir.scope {
            %30 = cir.load %7 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc388)
            %31 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc389)
            %32 = cir.cmp(eq, %30, %31) : !cir.ptr<!void>, !cir.bool loc(#loc570)
            cir.if %32 {
              %33 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc391)
              %34 = cir.const #cir.int<1> : !s32i loc(#loc392)
              %35 = cir.unary(minus, %34) nsw : !s32i, !s32i loc(#loc393)
              cir.call @exit(%35) : (!s32i) -> () extra(#fn_attr) loc(#loc391)
            } loc(#loc571)
          } loc(#loc569)
          %20 = cir.get_global @strcpy : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i>>> loc(#loc394)
          %21 = cir.load %7 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc395)
          %22 = cir.cast(bitcast, %21 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc395)
          %23 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc396)
          %24 = cir.cast(bitcast, %23 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc396)
          %25 = cir.call @strcpy(%22, %24) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc394)
          %26 = cir.load %7 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc397)
          %27 = cir.cast(bitcast, %26 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc397)
          cir.call @printLine(%27) : (!cir.ptr<!s8i>) -> () loc(#loc398)
          %28 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc399)
          %29 = cir.load %7 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc400)
          cir.call @free(%29) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc399)
        } loc(#loc565)
      } else {
        cir.scope {
          %6 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc573)
          %7 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc574)
          %8 = cir.get_global @strlen : !cir.ptr<!cir.func<(!cir.ptr<!s8i>) -> !u64i>> loc(#loc407)
          %9 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc408)
          %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc408)
          %11 = cir.call @strlen(%10) : (!cir.ptr<!s8i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc407)
          cir.store %11, %6 : !u64i, !cir.ptr<!u64i> loc(#loc573)
          %12 = cir.get_global @calloc : !cir.ptr<!cir.func<(!u64i, !u64i) -> !cir.ptr<!void>>> loc(#loc409)
          %13 = cir.load %6 : !cir.ptr<!u64i>, !u64i loc(#loc410)
          %14 = cir.const #cir.int<1> : !s32i loc(#loc411)
          %15 = cir.cast(integral, %14 : !s32i), !u64i loc(#loc411)
          %16 = cir.binop(add, %13, %15) : !u64i loc(#loc575)
          %17 = cir.const #cir.int<1> : !s32i loc(#loc412)
          %18 = cir.cast(integral, %17 : !s32i), !u64i loc(#loc412)
          %19 = cir.call @calloc(%16, %18) : (!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc409)
          cir.store %19, %7 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc574)
          cir.scope {
            %30 = cir.load %7 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc415)
            %31 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc416)
            %32 = cir.cmp(eq, %30, %31) : !cir.ptr<!void>, !cir.bool loc(#loc577)
            cir.if %32 {
              %33 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc418)
              %34 = cir.const #cir.int<1> : !s32i loc(#loc419)
              %35 = cir.unary(minus, %34) nsw : !s32i, !s32i loc(#loc420)
              cir.call @exit(%35) : (!s32i) -> () extra(#fn_attr) loc(#loc418)
            } loc(#loc578)
          } loc(#loc576)
          %20 = cir.get_global @strcpy : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i>>> loc(#loc421)
          %21 = cir.load %7 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc422)
          %22 = cir.cast(bitcast, %21 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc422)
          %23 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc423)
          %24 = cir.cast(bitcast, %23 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc423)
          %25 = cir.call @strcpy(%22, %24) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc421)
          %26 = cir.load %7 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc424)
          %27 = cir.cast(bitcast, %26 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc424)
          cir.call @printLine(%27) : (!cir.ptr<!s8i>) -> () loc(#loc425)
          %28 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc426)
          %29 = cir.load %7 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc427)
          cir.call @free(%29) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc426)
        } loc(#loc572)
      } loc(#loc564)
    } loc(#loc562)
    cir.return loc(#loc297)
  } loc(#loc534)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":52:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":52:30)
#loc3 = loc("/usr/include/stdlib.h":672:1)
#loc4 = loc("/usr/include/stdlib.h":672:45)
#loc5 = loc("/usr/include/stdlib.h":756:1)
#loc6 = loc("/usr/include/stdlib.h":756:70)
#loc7 = loc("/usr/include/wchar.h":296:1)
#loc8 = loc("/usr/include/wchar.h":296:65)
#loc9 = loc("/usr/include/string.h":407:1)
#loc10 = loc("/usr/include/string.h":408:33)
#loc11 = loc("/usr/include/stdlib.h":675:1)
#loc12 = loc("/usr/include/stdlib.h":676:14)
#loc13 = loc("/usr/include/wchar.h":98:1)
#loc14 = loc("/usr/include/wchar.h":100:14)
#loc15 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc16 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc17 = loc("/usr/include/stdlib.h":687:1)
#loc18 = loc("/usr/include/stdlib.h":687:32)
#loc19 = loc("/usr/include/wchar.h":247:1)
#loc20 = loc("/usr/include/wchar.h":247:51)
#loc21 = loc("../../../testcasesupport/std_testcase_io.h":16:1)
#loc22 = loc("../../../testcasesupport/std_testcase_io.h":16:37)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":24:1)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":74:1)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":26:5)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":26:12)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":27:12)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":27:5)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":28:5)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":49:5)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":28:8)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":28:33)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":29:5)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":38:5)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":40:5)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":30:9)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":37:9)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":31:13)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":31:75)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":31:50)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":31:57)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":31:60)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":31:74)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":32:13)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":32:50)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":32:17)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":32:34)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":32:40)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":32:41)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":32:47)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":32:46)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":33:21)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":33:36)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":33:42)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":33:45)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":33:13)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":34:35)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":34:13)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":34:27)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":34:30)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":34:31)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":36:28)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":36:13)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":41:9)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":48:9)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":42:13)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":42:67)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":42:45)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":42:52)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":42:55)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":42:66)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":43:13)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":43:51)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":43:17)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":43:35)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":43:41)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":43:42)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":43:48)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":43:47)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":44:20)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":44:36)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":44:41)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":44:44)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":44:13)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":44:45)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":45:36)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":45:13)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":45:28)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":45:31)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":45:32)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":47:28)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":47:13)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":50:5)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":73:5)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":50:8)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":50:33)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":51:5)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":61:5)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":63:5)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":52:9)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":60:9)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":54:13)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":54:49)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":55:13)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":55:68)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":54:30)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":54:45)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":55:35)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":55:42)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":55:50)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":55:53)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":55:67)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":56:13)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":56:41)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":56:17)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":56:25)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":56:31)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":56:32)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":56:38)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":56:37)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":57:26)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":57:32)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":57:19)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":58:31)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":58:13)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":59:13)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":59:18)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":64:9)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":72:9)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":66:13)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":66:52)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":67:13)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":67:68)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":66:30)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":66:48)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":67:35)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":67:42)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":67:50)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":67:53)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":67:67)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":68:13)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":68:41)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":68:17)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":68:25)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":68:31)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":68:32)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":68:38)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":68:37)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":69:26)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":69:32)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":69:19)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":70:35)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":70:13)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":71:13)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":71:18)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":190:1)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":194:1)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":192:5)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":192:13)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":193:5)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":193:13)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":83:1)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":133:1)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":85:5)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":85:12)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":86:12)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":86:5)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":87:5)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":108:5)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":87:8)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":87:33)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":88:5)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":97:5)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":99:5)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":89:9)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":96:9)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":90:13)
#loc178 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":90:75)
#loc179 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":90:50)
#loc180 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":90:57)
#loc181 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":90:60)
#loc182 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":90:74)
#loc183 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":91:13)
#loc184 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":91:50)
#loc185 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":91:17)
#loc186 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":91:34)
#loc187 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":91:40)
#loc188 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":91:41)
#loc189 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":91:47)
#loc190 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":91:46)
#loc191 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":92:21)
#loc192 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":92:36)
#loc193 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":92:42)
#loc194 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":92:45)
#loc195 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":92:13)
#loc196 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":93:35)
#loc197 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":93:13)
#loc198 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":93:27)
#loc199 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":93:30)
#loc200 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":93:31)
#loc201 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":95:28)
#loc202 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":95:13)
#loc203 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":100:9)
#loc204 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":107:9)
#loc205 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":101:13)
#loc206 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":101:75)
#loc207 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":101:50)
#loc208 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":101:57)
#loc209 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":101:60)
#loc210 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":101:74)
#loc211 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":102:13)
#loc212 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":102:50)
#loc213 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":102:17)
#loc214 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":102:34)
#loc215 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":102:40)
#loc216 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":102:41)
#loc217 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":102:47)
#loc218 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":102:46)
#loc219 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":103:21)
#loc220 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":103:36)
#loc221 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":103:42)
#loc222 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":103:45)
#loc223 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":103:13)
#loc224 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":104:35)
#loc225 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":104:13)
#loc226 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":104:27)
#loc227 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":104:30)
#loc228 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":104:31)
#loc229 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":106:28)
#loc230 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":106:13)
#loc231 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":109:5)
#loc232 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":132:5)
#loc233 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":109:8)
#loc234 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":109:33)
#loc235 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":110:5)
#loc236 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":120:5)
#loc237 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":122:5)
#loc238 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":111:9)
#loc239 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":119:9)
#loc240 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":113:13)
#loc241 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":113:52)
#loc242 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":114:13)
#loc243 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":114:68)
#loc244 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":113:30)
#loc245 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":113:48)
#loc246 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":114:35)
#loc247 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":114:42)
#loc248 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":114:50)
#loc249 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":114:53)
#loc250 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":114:67)
#loc251 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":115:13)
#loc252 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":115:41)
#loc253 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":115:17)
#loc254 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":115:25)
#loc255 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":115:31)
#loc256 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":115:32)
#loc257 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":115:38)
#loc258 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":115:37)
#loc259 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":116:26)
#loc260 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":116:32)
#loc261 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":116:19)
#loc262 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":117:35)
#loc263 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":117:13)
#loc264 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":118:13)
#loc265 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":118:18)
#loc266 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":123:9)
#loc267 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":131:9)
#loc268 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":125:13)
#loc269 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":125:52)
#loc270 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":126:13)
#loc271 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":126:68)
#loc272 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":125:30)
#loc273 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":125:48)
#loc274 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":126:35)
#loc275 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":126:42)
#loc276 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":126:50)
#loc277 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":126:53)
#loc278 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":126:67)
#loc279 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":127:13)
#loc280 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":127:41)
#loc281 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":127:17)
#loc282 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":127:25)
#loc283 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":127:31)
#loc284 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":127:32)
#loc285 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":127:38)
#loc286 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":127:37)
#loc287 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":128:26)
#loc288 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":128:32)
#loc289 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":128:19)
#loc290 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":129:35)
#loc291 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":129:13)
#loc292 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":130:13)
#loc293 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":130:18)
#loc294 = loc("/usr/include/string.h":141:1)
#loc295 = loc("/usr/include/string.h":142:14)
#loc296 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":138:1)
#loc297 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":188:1)
#loc298 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":140:5)
#loc299 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":140:12)
#loc300 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":141:12)
#loc301 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":141:5)
#loc302 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":142:5)
#loc303 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":163:5)
#loc304 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":142:8)
#loc305 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":142:33)
#loc306 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":143:5)
#loc307 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":152:5)
#loc308 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":154:5)
#loc309 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":144:9)
#loc310 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":151:9)
#loc311 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":145:13)
#loc312 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":145:67)
#loc313 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":145:45)
#loc314 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":145:52)
#loc315 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":145:55)
#loc316 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":145:66)
#loc317 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":146:13)
#loc318 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":146:51)
#loc319 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":146:17)
#loc320 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":146:35)
#loc321 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":146:41)
#loc322 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":146:42)
#loc323 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":146:48)
#loc324 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":146:47)
#loc325 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":147:20)
#loc326 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":147:36)
#loc327 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":147:41)
#loc328 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":147:44)
#loc329 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":147:13)
#loc330 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":147:45)
#loc331 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":148:36)
#loc332 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":148:13)
#loc333 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":148:28)
#loc334 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":148:31)
#loc335 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":148:32)
#loc336 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":150:28)
#loc337 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":150:13)
#loc338 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":155:9)
#loc339 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":162:9)
#loc340 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":156:13)
#loc341 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":156:67)
#loc342 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":156:45)
#loc343 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":156:52)
#loc344 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":156:55)
#loc345 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":156:66)
#loc346 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":157:13)
#loc347 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":157:51)
#loc348 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":157:17)
#loc349 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":157:35)
#loc350 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":157:41)
#loc351 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":157:42)
#loc352 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":157:48)
#loc353 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":157:47)
#loc354 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":158:20)
#loc355 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":158:36)
#loc356 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":158:41)
#loc357 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":158:44)
#loc358 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":158:13)
#loc359 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":158:45)
#loc360 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":159:36)
#loc361 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":159:13)
#loc362 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":159:28)
#loc363 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":159:31)
#loc364 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":159:32)
#loc365 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":161:28)
#loc366 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":161:13)
#loc367 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":164:5)
#loc368 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":187:5)
#loc369 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":164:8)
#loc370 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":164:33)
#loc371 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":165:5)
#loc372 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":175:5)
#loc373 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":177:5)
#loc374 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":166:9)
#loc375 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":174:9)
#loc376 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":168:13)
#loc377 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":168:49)
#loc378 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":169:13)
#loc379 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":169:54)
#loc380 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":168:30)
#loc381 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":168:45)
#loc382 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":169:35)
#loc383 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":169:42)
#loc384 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":169:50)
#loc385 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":169:53)
#loc386 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":170:13)
#loc387 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":170:41)
#loc388 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":170:17)
#loc389 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":170:25)
#loc390 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":170:31)
#loc391 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":170:32)
#loc392 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":170:38)
#loc393 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":170:37)
#loc394 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":171:19)
#loc395 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":171:26)
#loc396 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":171:32)
#loc397 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":172:31)
#loc398 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":172:13)
#loc399 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":173:13)
#loc400 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":173:18)
#loc401 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":178:9)
#loc402 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":186:9)
#loc403 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":180:13)
#loc404 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":180:49)
#loc405 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":181:13)
#loc406 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":181:54)
#loc407 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":180:30)
#loc408 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":180:45)
#loc409 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":181:35)
#loc410 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":181:42)
#loc411 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":181:50)
#loc412 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":181:53)
#loc413 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":182:13)
#loc414 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":182:41)
#loc415 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":182:17)
#loc416 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":182:25)
#loc417 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":182:31)
#loc418 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":182:32)
#loc419 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":182:38)
#loc420 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":182:37)
#loc421 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":183:19)
#loc422 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":183:26)
#loc423 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":183:32)
#loc424 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":184:31)
#loc425 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":184:13)
#loc426 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":185:13)
#loc427 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c":185:18)
#loc428 = loc(fused[#loc1, #loc2])
#loc429 = loc(fused[#loc3, #loc4])
#loc430 = loc(fused[#loc5, #loc6])
#loc431 = loc(fused[#loc7, #loc8])
#loc432 = loc(fused[#loc9, #loc10])
#loc433 = loc(fused[#loc11, #loc12])
#loc434 = loc(fused[#loc13, #loc14])
#loc435 = loc(fused[#loc15, #loc16])
#loc436 = loc(fused[#loc17, #loc18])
#loc437 = loc(fused[#loc19, #loc20])
#loc438 = loc(fused[#loc21, #loc22])
#loc439 = loc(fused[#loc23, #loc24])
#loc440 = loc(fused[#loc25, #loc26])
#loc441 = loc(fused[#loc28, #loc27])
#loc442 = loc(fused[#loc29, #loc30])
#loc443 = loc(fused[#loc31, #loc32])
#loc444 = loc(fused[#loc33, #loc34, #loc35, #loc30])
#loc445 = loc(fused[#loc36, #loc37])
#loc446 = loc(fused[#loc38, #loc39])
#loc447 = loc(fused[#loc42, #loc43])
#loc448 = loc(fused[#loc41, #loc43])
#loc449 = loc(fused[#loc40, #loc39])
#loc450 = loc(fused[#loc44, #loc45])
#loc451 = loc(fused[#loc46, #loc47])
#loc452 = loc(fused[#loc48, #loc45])
#loc453 = loc(fused[#loc58, #loc57])
#loc454 = loc(fused[#loc63, #loc62])
#loc455 = loc(fused[#loc64, #loc65])
#loc456 = loc(fused[#loc66, #loc67])
#loc457 = loc(fused[#loc70, #loc71])
#loc458 = loc(fused[#loc69, #loc71])
#loc459 = loc(fused[#loc68, #loc67])
#loc460 = loc(fused[#loc72, #loc73])
#loc461 = loc(fused[#loc74, #loc75])
#loc462 = loc(fused[#loc76, #loc73])
#loc463 = loc(fused[#loc84, #loc85])
#loc464 = loc(fused[#loc87, #loc86])
#loc465 = loc(fused[#loc92, #loc91])
#loc466 = loc(fused[#loc93, #loc94])
#loc467 = loc(fused[#loc95, #loc96])
#loc468 = loc(fused[#loc97, #loc98, #loc99, #loc94])
#loc469 = loc(fused[#loc100, #loc101])
#loc470 = loc(fused[#loc102, #loc103])
#loc471 = loc(fused[#loc104, #loc105])
#loc472 = loc(fused[#loc109, #loc110])
#loc473 = loc(fused[#loc111, #loc112])
#loc474 = loc(fused[#loc113, #loc114])
#loc475 = loc(fused[#loc115, #loc116])
#loc476 = loc(fused[#loc117, #loc114])
#loc477 = loc(fused[#loc128, #loc129])
#loc478 = loc(fused[#loc130, #loc131])
#loc479 = loc(fused[#loc132, #loc133])
#loc480 = loc(fused[#loc137, #loc138])
#loc481 = loc(fused[#loc139, #loc140])
#loc482 = loc(fused[#loc141, #loc142])
#loc483 = loc(fused[#loc143, #loc144])
#loc484 = loc(fused[#loc145, #loc142])
#loc485 = loc(fused[#loc156, #loc157])
#loc486 = loc(fused[#loc158, #loc159])
#loc487 = loc(fused[#loc160, #loc161])
#loc488 = loc(fused[#loc162, #loc163])
#loc489 = loc(fused[#loc164, #loc165])
#loc490 = loc(fused[#loc167, #loc166])
#loc491 = loc(fused[#loc168, #loc169])
#loc492 = loc(fused[#loc170, #loc171])
#loc493 = loc(fused[#loc172, #loc173, #loc174, #loc169])
#loc494 = loc(fused[#loc175, #loc176])
#loc495 = loc(fused[#loc177, #loc178])
#loc496 = loc(fused[#loc181, #loc182])
#loc497 = loc(fused[#loc180, #loc182])
#loc498 = loc(fused[#loc179, #loc178])
#loc499 = loc(fused[#loc183, #loc184])
#loc500 = loc(fused[#loc185, #loc186])
#loc501 = loc(fused[#loc187, #loc184])
#loc502 = loc(fused[#loc197, #loc196])
#loc503 = loc(fused[#loc202, #loc201])
#loc504 = loc(fused[#loc203, #loc204])
#loc505 = loc(fused[#loc205, #loc206])
#loc506 = loc(fused[#loc209, #loc210])
#loc507 = loc(fused[#loc208, #loc210])
#loc508 = loc(fused[#loc207, #loc206])
#loc509 = loc(fused[#loc211, #loc212])
#loc510 = loc(fused[#loc213, #loc214])
#loc511 = loc(fused[#loc215, #loc212])
#loc512 = loc(fused[#loc225, #loc224])
#loc513 = loc(fused[#loc230, #loc229])
#loc514 = loc(fused[#loc231, #loc232])
#loc515 = loc(fused[#loc233, #loc234])
#loc516 = loc(fused[#loc235, #loc236, #loc237, #loc232])
#loc517 = loc(fused[#loc238, #loc239])
#loc518 = loc(fused[#loc240, #loc241])
#loc519 = loc(fused[#loc242, #loc243])
#loc520 = loc(fused[#loc247, #loc248])
#loc521 = loc(fused[#loc249, #loc250])
#loc522 = loc(fused[#loc251, #loc252])
#loc523 = loc(fused[#loc253, #loc254])
#loc524 = loc(fused[#loc255, #loc252])
#loc525 = loc(fused[#loc266, #loc267])
#loc526 = loc(fused[#loc268, #loc269])
#loc527 = loc(fused[#loc270, #loc271])
#loc528 = loc(fused[#loc275, #loc276])
#loc529 = loc(fused[#loc277, #loc278])
#loc530 = loc(fused[#loc279, #loc280])
#loc531 = loc(fused[#loc281, #loc282])
#loc532 = loc(fused[#loc283, #loc280])
#loc533 = loc(fused[#loc294, #loc295])
#loc534 = loc(fused[#loc296, #loc297])
#loc535 = loc(fused[#loc298, #loc299])
#loc536 = loc(fused[#loc301, #loc300])
#loc537 = loc(fused[#loc302, #loc303])
#loc538 = loc(fused[#loc304, #loc305])
#loc539 = loc(fused[#loc306, #loc307, #loc308, #loc303])
#loc540 = loc(fused[#loc309, #loc310])
#loc541 = loc(fused[#loc311, #loc312])
#loc542 = loc(fused[#loc315, #loc316])
#loc543 = loc(fused[#loc314, #loc316])
#loc544 = loc(fused[#loc313, #loc312])
#loc545 = loc(fused[#loc317, #loc318])
#loc546 = loc(fused[#loc319, #loc320])
#loc547 = loc(fused[#loc321, #loc318])
#loc548 = loc(fused[#loc329, #loc330])
#loc549 = loc(fused[#loc332, #loc331])
#loc550 = loc(fused[#loc337, #loc336])
#loc551 = loc(fused[#loc338, #loc339])
#loc552 = loc(fused[#loc340, #loc341])
#loc553 = loc(fused[#loc344, #loc345])
#loc554 = loc(fused[#loc343, #loc345])
#loc555 = loc(fused[#loc342, #loc341])
#loc556 = loc(fused[#loc346, #loc347])
#loc557 = loc(fused[#loc348, #loc349])
#loc558 = loc(fused[#loc350, #loc347])
#loc559 = loc(fused[#loc358, #loc359])
#loc560 = loc(fused[#loc361, #loc360])
#loc561 = loc(fused[#loc366, #loc365])
#loc562 = loc(fused[#loc367, #loc368])
#loc563 = loc(fused[#loc369, #loc370])
#loc564 = loc(fused[#loc371, #loc372, #loc373, #loc368])
#loc565 = loc(fused[#loc374, #loc375])
#loc566 = loc(fused[#loc376, #loc377])
#loc567 = loc(fused[#loc378, #loc379])
#loc568 = loc(fused[#loc383, #loc384])
#loc569 = loc(fused[#loc386, #loc387])
#loc570 = loc(fused[#loc388, #loc389])
#loc571 = loc(fused[#loc390, #loc387])
#loc572 = loc(fused[#loc401, #loc402])
#loc573 = loc(fused[#loc403, #loc404])
#loc574 = loc(fused[#loc405, #loc406])
#loc575 = loc(fused[#loc410, #loc411])
#loc576 = loc(fused[#loc413, #loc414])
#loc577 = loc(fused[#loc415, #loc416])
#loc578 = loc(fused[#loc417, #loc414])
