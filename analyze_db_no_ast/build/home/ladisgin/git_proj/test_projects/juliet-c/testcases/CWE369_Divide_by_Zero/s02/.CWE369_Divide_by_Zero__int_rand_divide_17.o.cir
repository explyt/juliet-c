!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE369_Divide_by_Zero/s02/CWE369_Divide_by_Zero__int_rand_divide_17.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @rand() -> !s32i extra(#fn_attr) loc(#loc128)
  cir.func private  @printIntLine(!s32i) loc(#loc129)
  cir.func no_proto  @CWE369_Divide_by_Zero__int_rand_divide_17_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc131)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["j"] {alignment = 4 : i64} loc(#loc132)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc133)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc12)
    %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc13)
    cir.store %4, %2 : !s32i, !cir.ptr<!s32i> loc(#loc134)
    cir.scope {
      %5 = cir.const #cir.int<0> : !s32i loc(#loc17)
      cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc136)
      cir.for : cond {
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc19)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc20)
        %8 = cir.cmp(lt, %6, %7) : !s32i, !s32i loc(#loc137)
        %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc21)
        cir.condition(%9) loc(#loc21)
      } body {
        cir.scope {
          %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc23)
          %7 = cir.const #cir.int<1> : !s32i loc(#loc23)
          %8 = cir.binop(and, %6, %7) : !s32i loc(#loc23)
          %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc23)
          %10 = cir.ternary(%9, true {
            %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc23)
            %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc23)
            %14 = cir.const #cir.int<30> : !s32i loc(#loc23)
            %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc23)
            %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc23)
            %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc23)
            %18 = cir.const #cir.int<15> : !s32i loc(#loc23)
            %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc23)
            %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc23)
            %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc23)
            %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc23)
            %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc23)
            cir.yield %23 : !u32i loc(#loc23)
          }, false {
            %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc23)
            %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc23)
            %14 = cir.const #cir.int<30> : !s32i loc(#loc23)
            %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc23)
            %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc23)
            %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc23)
            %18 = cir.const #cir.int<15> : !s32i loc(#loc23)
            %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc23)
            %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc23)
            %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc23)
            %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc23)
            %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc23)
            %24 = cir.unary(minus, %23) : !u32i, !u32i loc(#loc23)
            %25 = cir.const #cir.int<1> : !s32i loc(#loc23)
            %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc23)
            %27 = cir.binop(sub, %24, %26) : !u32i loc(#loc23)
            cir.yield %27 : !u32i loc(#loc23)
          }) : (!cir.bool) -> !u32i loc(#loc23)
          %11 = cir.cast(integral, %10 : !u32i), !s32i loc(#loc23)
          cir.store %11, %2 : !s32i, !cir.ptr<!s32i> loc(#loc139)
        } loc(#loc138)
        cir.yield loc(#loc16)
      } step {
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc25)
        %7 = cir.unary(inc, %6) : !s32i, !s32i loc(#loc26)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc140)
        cir.yield loc(#loc135)
      } loc(#loc135)
    } loc(#loc135)
    cir.scope {
      %5 = cir.const #cir.int<0> : !s32i loc(#loc29)
      cir.store %5, %1 : !s32i, !cir.ptr<!s32i> loc(#loc142)
      cir.for : cond {
        %6 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc31)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc32)
        %8 = cir.cmp(lt, %6, %7) : !s32i, !s32i loc(#loc143)
        %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc33)
        cir.condition(%9) loc(#loc33)
      } body {
        cir.scope {
          %6 = cir.const #cir.int<100> : !s32i loc(#loc35)
          %7 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc36)
          %8 = cir.binop(div, %6, %7) : !s32i loc(#loc145)
          cir.call @printIntLine(%8) : (!s32i) -> () loc(#loc37)
        } loc(#loc144)
        cir.yield loc(#loc28)
      } step {
        %6 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc38)
        %7 = cir.unary(inc, %6) : !s32i, !s32i loc(#loc39)
        cir.store %7, %1 : !s32i, !cir.ptr<!s32i> loc(#loc146)
        cir.yield loc(#loc141)
      } loc(#loc141)
    } loc(#loc141)
    cir.return loc(#loc6)
  } loc(#loc130)
  cir.func no_proto  @CWE369_Divide_by_Zero__int_rand_divide_17_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc148)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc42)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc149)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc44)
    cir.return loc(#loc41)
  } loc(#loc147)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc150)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"This would result in a divide by zero\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc48)
  cir.func no_proto internal private  @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc152)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["k"] {alignment = 4 : i64} loc(#loc153)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc154)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc56)
    %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc57)
    cir.store %4, %2 : !s32i, !cir.ptr<!s32i> loc(#loc155)
    cir.scope {
      %5 = cir.const #cir.int<0> : !s32i loc(#loc61)
      cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc157)
      cir.for : cond {
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc63)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc64)
        %8 = cir.cmp(lt, %6, %7) : !s32i, !s32i loc(#loc158)
        %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc65)
        cir.condition(%9) loc(#loc65)
      } body {
        cir.scope {
          %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc67)
          %7 = cir.const #cir.int<1> : !s32i loc(#loc67)
          %8 = cir.binop(and, %6, %7) : !s32i loc(#loc67)
          %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc67)
          %10 = cir.ternary(%9, true {
            %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc67)
            %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc67)
            %14 = cir.const #cir.int<30> : !s32i loc(#loc67)
            %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc67)
            %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc67)
            %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc67)
            %18 = cir.const #cir.int<15> : !s32i loc(#loc67)
            %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc67)
            %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc67)
            %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc67)
            %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc67)
            %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc67)
            cir.yield %23 : !u32i loc(#loc67)
          }, false {
            %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc67)
            %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc67)
            %14 = cir.const #cir.int<30> : !s32i loc(#loc67)
            %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc67)
            %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc67)
            %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc67)
            %18 = cir.const #cir.int<15> : !s32i loc(#loc67)
            %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc67)
            %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc67)
            %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc67)
            %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc67)
            %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc67)
            %24 = cir.unary(minus, %23) : !u32i, !u32i loc(#loc67)
            %25 = cir.const #cir.int<1> : !s32i loc(#loc67)
            %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc67)
            %27 = cir.binop(sub, %24, %26) : !u32i loc(#loc67)
            cir.yield %27 : !u32i loc(#loc67)
          }) : (!cir.bool) -> !u32i loc(#loc67)
          %11 = cir.cast(integral, %10 : !u32i), !s32i loc(#loc67)
          cir.store %11, %2 : !s32i, !cir.ptr<!s32i> loc(#loc160)
        } loc(#loc159)
        cir.yield loc(#loc60)
      } step {
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc69)
        %7 = cir.unary(inc, %6) : !s32i, !s32i loc(#loc70)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc161)
        cir.yield loc(#loc156)
      } loc(#loc156)
    } loc(#loc156)
    cir.scope {
      %5 = cir.const #cir.int<0> : !s32i loc(#loc73)
      cir.store %5, %1 : !s32i, !cir.ptr<!s32i> loc(#loc163)
      cir.for : cond {
        %6 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc75)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc76)
        %8 = cir.cmp(lt, %6, %7) : !s32i, !s32i loc(#loc164)
        %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc77)
        cir.condition(%9) loc(#loc77)
      } body {
        cir.scope {
          cir.scope {
            %6 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc81)
            %7 = cir.const #cir.int<0> : !s32i loc(#loc82)
            %8 = cir.cmp(ne, %6, %7) : !s32i, !s32i loc(#loc167)
            %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc83)
            cir.if %9 {
              %10 = cir.const #cir.int<100> : !s32i loc(#loc87)
              %11 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc88)
              %12 = cir.binop(div, %10, %11) : !s32i loc(#loc169)
              cir.call @printIntLine(%12) : (!s32i) -> () loc(#loc89)
            } else {
              %10 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc48)
              %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc48)
              cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc90)
            } loc(#loc168)
          } loc(#loc166)
        } loc(#loc165)
        cir.yield loc(#loc72)
      } step {
        %6 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc91)
        %7 = cir.unary(inc, %6) : !s32i, !s32i loc(#loc92)
        cir.store %7, %1 : !s32i, !cir.ptr<!s32i> loc(#loc170)
        cir.yield loc(#loc162)
      } loc(#loc162)
    } loc(#loc162)
    cir.return loc(#loc50)
  } loc(#loc151)
  cir.func no_proto internal private  @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["h"] {alignment = 4 : i64} loc(#loc172)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["j"] {alignment = 4 : i64} loc(#loc173)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc174)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc100)
    %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc101)
    cir.store %4, %2 : !s32i, !cir.ptr<!s32i> loc(#loc175)
    cir.scope {
      %5 = cir.const #cir.int<0> : !s32i loc(#loc105)
      cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc177)
      cir.for : cond {
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc107)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc108)
        %8 = cir.cmp(lt, %6, %7) : !s32i, !s32i loc(#loc178)
        %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc109)
        cir.condition(%9) loc(#loc109)
      } body {
        cir.scope {
          %6 = cir.const #cir.int<7> : !s32i loc(#loc111)
          cir.store %6, %2 : !s32i, !cir.ptr<!s32i> loc(#loc180)
        } loc(#loc179)
        cir.yield loc(#loc104)
      } step {
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc113)
        %7 = cir.unary(inc, %6) : !s32i, !s32i loc(#loc114)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc181)
        cir.yield loc(#loc176)
      } loc(#loc176)
    } loc(#loc176)
    cir.scope {
      %5 = cir.const #cir.int<0> : !s32i loc(#loc117)
      cir.store %5, %1 : !s32i, !cir.ptr<!s32i> loc(#loc183)
      cir.for : cond {
        %6 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc119)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc120)
        %8 = cir.cmp(lt, %6, %7) : !s32i, !s32i loc(#loc184)
        %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc121)
        cir.condition(%9) loc(#loc121)
      } body {
        cir.scope {
          %6 = cir.const #cir.int<100> : !s32i loc(#loc123)
          %7 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc124)
          %8 = cir.binop(div, %6, %7) : !s32i loc(#loc186)
          cir.call @printIntLine(%8) : (!s32i) -> () loc(#loc125)
        } loc(#loc185)
        cir.yield loc(#loc116)
      } step {
        %6 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc126)
        %7 = cir.unary(inc, %6) : !s32i, !s32i loc(#loc127)
        cir.store %7, %1 : !s32i, !cir.ptr<!s32i> loc(#loc187)
        cir.yield loc(#loc182)
      } loc(#loc182)
    } loc(#loc182)
    cir.return loc(#loc94)
  } loc(#loc171)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE369_Divide_by_Zero/s02/CWE369_Divide_by_Zero__int_rand_divide_17.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc5 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":22:1)
#loc6 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":38:1)
#loc7 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":24:5)
#loc8 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":24:9)
#loc9 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":24:11)
#loc10 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":25:5)
#loc11 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":25:9)
#loc12 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":27:13)
#loc13 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":27:12)
#loc14 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":27:5)
#loc15 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":28:5)
#loc16 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":32:5)
#loc17 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":28:13)
#loc18 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":28:9)
#loc19 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":28:16)
#loc20 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":28:20)
#loc21 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":28:18)
#loc22 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":29:5)
#loc23 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":31:16)
#loc24 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":31:9)
#loc25 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":28:24)
#loc26 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":28:23)
#loc27 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":33:5)
#loc28 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":37:5)
#loc29 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":33:13)
#loc30 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":33:9)
#loc31 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":33:16)
#loc32 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":33:20)
#loc33 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":33:18)
#loc34 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":34:5)
#loc35 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":36:22)
#loc36 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":36:28)
#loc37 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":36:9)
#loc38 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":33:24)
#loc39 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":33:23)
#loc40 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":89:1)
#loc41 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":93:1)
#loc42 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":91:5)
#loc43 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":91:13)
#loc44 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":92:5)
#loc45 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":92:13)
#loc46 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc47 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc48 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":65:23)
#loc49 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":45:1)
#loc50 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":68:1)
#loc51 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":47:5)
#loc52 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":47:9)
#loc53 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":47:11)
#loc54 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":48:5)
#loc55 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":48:9)
#loc56 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":50:13)
#loc57 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":50:12)
#loc58 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":50:5)
#loc59 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":51:5)
#loc60 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":55:5)
#loc61 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":51:13)
#loc62 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":51:9)
#loc63 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":51:16)
#loc64 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":51:20)
#loc65 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":51:18)
#loc66 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":52:5)
#loc67 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":54:16)
#loc68 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":54:9)
#loc69 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":51:24)
#loc70 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":51:23)
#loc71 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":56:5)
#loc72 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":67:5)
#loc73 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":56:13)
#loc74 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":56:9)
#loc75 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":56:16)
#loc76 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":56:20)
#loc77 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":56:18)
#loc78 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":57:5)
#loc79 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":59:9)
#loc80 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":66:9)
#loc81 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":59:13)
#loc82 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":59:21)
#loc83 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":59:18)
#loc84 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":60:9)
#loc85 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":62:9)
#loc86 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":64:9)
#loc87 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":61:26)
#loc88 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":61:32)
#loc89 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":61:13)
#loc90 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":65:13)
#loc91 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":56:24)
#loc92 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":56:23)
#loc93 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":71:1)
#loc94 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":87:1)
#loc95 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":73:5)
#loc96 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":73:9)
#loc97 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":73:11)
#loc98 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":74:5)
#loc99 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":74:9)
#loc100 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":76:13)
#loc101 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":76:12)
#loc102 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":76:5)
#loc103 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":77:5)
#loc104 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":81:5)
#loc105 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":77:13)
#loc106 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":77:9)
#loc107 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":77:16)
#loc108 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":77:20)
#loc109 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":77:18)
#loc110 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":78:5)
#loc111 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":80:16)
#loc112 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":80:9)
#loc113 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":77:24)
#loc114 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":77:23)
#loc115 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":82:5)
#loc116 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":86:5)
#loc117 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":82:13)
#loc118 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":82:9)
#loc119 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":82:16)
#loc120 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":82:20)
#loc121 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":82:18)
#loc122 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":83:5)
#loc123 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":85:22)
#loc124 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":85:28)
#loc125 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":85:9)
#loc126 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":82:24)
#loc127 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":82:23)
#loc128 = loc(fused[#loc1, #loc2])
#loc129 = loc(fused[#loc3, #loc4])
#loc130 = loc(fused[#loc5, #loc6])
#loc131 = loc(fused[#loc7, #loc8])
#loc132 = loc(fused[#loc7, #loc9])
#loc133 = loc(fused[#loc10, #loc11])
#loc134 = loc(fused[#loc14, #loc12])
#loc135 = loc(fused[#loc15, #loc16])
#loc136 = loc(fused[#loc18, #loc17])
#loc137 = loc(fused[#loc19, #loc20])
#loc138 = loc(fused[#loc22, #loc16])
#loc139 = loc(fused[#loc24, #loc23])
#loc140 = loc(fused[#loc26, #loc25])
#loc141 = loc(fused[#loc27, #loc28])
#loc142 = loc(fused[#loc30, #loc29])
#loc143 = loc(fused[#loc31, #loc32])
#loc144 = loc(fused[#loc34, #loc28])
#loc145 = loc(fused[#loc35, #loc36])
#loc146 = loc(fused[#loc39, #loc38])
#loc147 = loc(fused[#loc40, #loc41])
#loc148 = loc(fused[#loc42, #loc43])
#loc149 = loc(fused[#loc44, #loc45])
#loc150 = loc(fused[#loc46, #loc47])
#loc151 = loc(fused[#loc49, #loc50])
#loc152 = loc(fused[#loc51, #loc52])
#loc153 = loc(fused[#loc51, #loc53])
#loc154 = loc(fused[#loc54, #loc55])
#loc155 = loc(fused[#loc58, #loc56])
#loc156 = loc(fused[#loc59, #loc60])
#loc157 = loc(fused[#loc62, #loc61])
#loc158 = loc(fused[#loc63, #loc64])
#loc159 = loc(fused[#loc66, #loc60])
#loc160 = loc(fused[#loc68, #loc67])
#loc161 = loc(fused[#loc70, #loc69])
#loc162 = loc(fused[#loc71, #loc72])
#loc163 = loc(fused[#loc74, #loc73])
#loc164 = loc(fused[#loc75, #loc76])
#loc165 = loc(fused[#loc78, #loc72])
#loc166 = loc(fused[#loc79, #loc80])
#loc167 = loc(fused[#loc81, #loc82])
#loc168 = loc(fused[#loc84, #loc85, #loc86, #loc80])
#loc169 = loc(fused[#loc87, #loc88])
#loc170 = loc(fused[#loc92, #loc91])
#loc171 = loc(fused[#loc93, #loc94])
#loc172 = loc(fused[#loc95, #loc96])
#loc173 = loc(fused[#loc95, #loc97])
#loc174 = loc(fused[#loc98, #loc99])
#loc175 = loc(fused[#loc102, #loc100])
#loc176 = loc(fused[#loc103, #loc104])
#loc177 = loc(fused[#loc106, #loc105])
#loc178 = loc(fused[#loc107, #loc108])
#loc179 = loc(fused[#loc110, #loc104])
#loc180 = loc(fused[#loc112, #loc111])
#loc181 = loc(fused[#loc114, #loc113])
#loc182 = loc(fused[#loc115, #loc116])
#loc183 = loc(fused[#loc118, #loc117])
#loc184 = loc(fused[#loc119, #loc120])
#loc185 = loc(fused[#loc122, #loc116])
#loc186 = loc(fused[#loc123, #loc124])
#loc187 = loc(fused[#loc127, #loc126])
