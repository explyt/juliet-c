!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":30:16)
#loc82 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":69:16)
#loc97 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":82:27)
#loc136 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":108:16)
#loc148 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":116:27)
#true = #cir.bool<true> : !cir.bool
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i32 = dense<32> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc273)
  cir.func private @printIntLine(!s32i) loc(#loc274)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc275)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"ERROR: Array index is negative.\00" : !cir.array<!s8i x 32>> : !cir.array<!s8i x 32> {alignment = 1 : i64} loc(#loc7)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc277)
    %1 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc278)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc279)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc16)
    %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc17)
    cir.store %4, %2 : !s32i, !cir.ptr<!s32i> loc(#loc280)
    cir.br ^bb1 loc(#loc281)
  ^bb1:  // pred: ^bb0
    %5 = cir.const #cir.int<1> : !s32i loc(#loc21)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc21)
    cir.brcond %6 ^bb2, ^bb7 loc(#loc282)
  ^bb2:  // pred: ^bb1
    %7 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc23)
    %8 = cir.const #cir.int<1> : !s32i loc(#loc23)
    %9 = cir.binop(and, %7, %8) : !s32i loc(#loc23)
    %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc23)
    cir.brcond %10 ^bb3, ^bb4 loc(#loc23)
  ^bb3:  // pred: ^bb2
    %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc23)
    %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc23)
    %13 = cir.const #cir.int<30> : !s32i loc(#loc23)
    %14 = cir.shift(left, %12 : !u32i, %13 : !s32i) -> !u32i loc(#loc23)
    %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc23)
    %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc23)
    %17 = cir.const #cir.int<15> : !s32i loc(#loc23)
    %18 = cir.shift(left, %16 : !u32i, %17 : !s32i) -> !u32i loc(#loc23)
    %19 = cir.binop(xor, %14, %18) : !u32i loc(#loc23)
    %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc23)
    %21 = cir.cast(integral, %20 : !s32i), !u32i loc(#loc23)
    %22 = cir.binop(xor, %19, %21) : !u32i loc(#loc23)
    cir.br ^bb5(%22 : !u32i) loc(#loc23)
  ^bb4:  // pred: ^bb2
    %23 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc23)
    %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc23)
    %25 = cir.const #cir.int<30> : !s32i loc(#loc23)
    %26 = cir.shift(left, %24 : !u32i, %25 : !s32i) -> !u32i loc(#loc23)
    %27 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc23)
    %28 = cir.cast(integral, %27 : !s32i), !u32i loc(#loc23)
    %29 = cir.const #cir.int<15> : !s32i loc(#loc23)
    %30 = cir.shift(left, %28 : !u32i, %29 : !s32i) -> !u32i loc(#loc23)
    %31 = cir.binop(xor, %26, %30) : !u32i loc(#loc23)
    %32 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc23)
    %33 = cir.cast(integral, %32 : !s32i), !u32i loc(#loc23)
    %34 = cir.binop(xor, %31, %33) : !u32i loc(#loc23)
    %35 = cir.unary(minus, %34) : !u32i, !u32i loc(#loc23)
    %36 = cir.const #cir.int<1> : !s32i loc(#loc23)
    %37 = cir.cast(integral, %36 : !s32i), !u32i loc(#loc23)
    %38 = cir.binop(sub, %35, %37) : !u32i loc(#loc23)
    cir.br ^bb5(%38 : !u32i) loc(#loc23)
  ^bb5(%39: !u32i loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":30:16)):  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc23)
  ^bb6:  // pred: ^bb5
    %40 = cir.cast(integral, %39 : !u32i), !s32i loc(#loc23)
    cir.store %40, %2 : !s32i, !cir.ptr<!s32i> loc(#loc283)
    cir.br ^bb7 loc(#loc20)
  ^bb7:  // 2 preds: ^bb1, ^bb6
    cir.br ^bb8 loc(#loc20)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc284)
  ^bb9:  // pred: ^bb8
    %41 = cir.const #cir.int<1> : !s32i loc(#loc27)
    %42 = cir.cast(int_to_bool, %41 : !s32i), !cir.bool loc(#loc27)
    cir.brcond %42 ^bb10, ^bb26 loc(#loc285)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc286)
  ^bb11:  // pred: ^bb10
    %43 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc278)
    cir.store %43, %1 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc278)
    cir.br ^bb12 loc(#loc287)
  ^bb12:  // pred: ^bb11
    %44 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc33)
    %45 = cir.const #cir.int<0> : !s32i loc(#loc34)
    %46 = cir.cmp(ge, %44, %45) : !s32i, !cir.bool loc(#loc288)
    cir.brcond %46 ^bb13, ^bb22 loc(#loc289)
  ^bb13:  // pred: ^bb12
    %47 = cir.const #cir.int<1> : !s32i loc(#loc38)
    %48 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc39)
    %49 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc40)
    %50 = cir.ptr_stride(%49 : !cir.ptr<!s32i>, %48 : !s32i), !cir.ptr<!s32i> loc(#loc40)
    cir.store %47, %50 : !s32i, !cir.ptr<!s32i> loc(#loc290)
    cir.br ^bb14 loc(#loc291)
  ^bb14:  // pred: ^bb13
    %51 = cir.const #cir.int<0> : !s32i loc(#loc43)
    cir.store %51, %0 : !s32i, !cir.ptr<!s32i> loc(#loc292)
    cir.br ^bb15 loc(#loc291)
  ^bb15:  // 2 preds: ^bb14, ^bb19
    %52 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc45)
    %53 = cir.const #cir.int<10> : !s32i loc(#loc46)
    %54 = cir.cmp(lt, %52, %53) : !s32i, !cir.bool loc(#loc293)
    cir.brcond %54 ^bb16, ^bb20 loc(#loc47)
  ^bb16:  // pred: ^bb15
    cir.br ^bb17 loc(#loc294)
  ^bb17:  // pred: ^bb16
    %55 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc49)
    %56 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc50)
    %57 = cir.ptr_stride(%56 : !cir.ptr<!s32i>, %55 : !s32i), !cir.ptr<!s32i> loc(#loc50)
    %58 = cir.load %57 : !cir.ptr<!s32i>, !s32i loc(#loc50)
    cir.call @printIntLine(%58) : (!s32i) -> () loc(#loc51)
    cir.br ^bb18 loc(#loc42)
  ^bb18:  // pred: ^bb17
    cir.br ^bb19 loc(#loc42)
  ^bb19:  // pred: ^bb18
    %59 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc52)
    %60 = cir.unary(inc, %59) : !s32i, !s32i loc(#loc53)
    cir.store %60, %0 : !s32i, !cir.ptr<!s32i> loc(#loc295)
    cir.br ^bb15 loc(#loc291)
  ^bb20:  // pred: ^bb15
    cir.br ^bb21 loc(#loc42)
  ^bb21:  // pred: ^bb20
    cir.br ^bb23 loc(#loc36)
  ^bb22:  // pred: ^bb12
    %61 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc7)
    %62 = cir.cast(array_to_ptrdecay, %61 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc7)
    cir.call @printLine(%62) : (!cir.ptr<!s8i>) -> () loc(#loc54)
    cir.br ^bb23 loc(#loc32)
  ^bb23:  // 2 preds: ^bb21, ^bb22
    cir.br ^bb24 loc(#loc32)
  ^bb24:  // pred: ^bb23
    cir.br ^bb25 loc(#loc30)
  ^bb25:  // pred: ^bb24
    cir.br ^bb26 loc(#loc26)
  ^bb26:  // 2 preds: ^bb9, ^bb25
    cir.br ^bb27 loc(#loc26)
  ^bb27:  // pred: ^bb26
    cir.return loc(#loc9)
  } loc(#loc276)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc297)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc57)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc298)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc59)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc299)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc61)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc300)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc63)
    cir.return loc(#loc56)
  } loc(#loc296)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc65)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"ERROR: Array index is out-of-bounds\00" : !cir.array<!s8i x 36>> : !cir.array<!s8i x 36> {alignment = 1 : i64} loc(#loc66)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc302)
    %1 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc303)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc304)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc75)
    %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc76)
    cir.store %4, %2 : !s32i, !cir.ptr<!s32i> loc(#loc305)
    cir.br ^bb1 loc(#loc306)
  ^bb1:  // pred: ^bb0
    %5 = cir.const #cir.int<1> : !s32i loc(#loc80)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc80)
    cir.brcond %6 ^bb2, ^bb7 loc(#loc307)
  ^bb2:  // pred: ^bb1
    %7 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc82)
    %8 = cir.const #cir.int<1> : !s32i loc(#loc82)
    %9 = cir.binop(and, %7, %8) : !s32i loc(#loc82)
    %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc82)
    cir.brcond %10 ^bb3, ^bb4 loc(#loc82)
  ^bb3:  // pred: ^bb2
    %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc82)
    %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc82)
    %13 = cir.const #cir.int<30> : !s32i loc(#loc82)
    %14 = cir.shift(left, %12 : !u32i, %13 : !s32i) -> !u32i loc(#loc82)
    %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc82)
    %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc82)
    %17 = cir.const #cir.int<15> : !s32i loc(#loc82)
    %18 = cir.shift(left, %16 : !u32i, %17 : !s32i) -> !u32i loc(#loc82)
    %19 = cir.binop(xor, %14, %18) : !u32i loc(#loc82)
    %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc82)
    %21 = cir.cast(integral, %20 : !s32i), !u32i loc(#loc82)
    %22 = cir.binop(xor, %19, %21) : !u32i loc(#loc82)
    cir.br ^bb5(%22 : !u32i) loc(#loc82)
  ^bb4:  // pred: ^bb2
    %23 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc82)
    %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc82)
    %25 = cir.const #cir.int<30> : !s32i loc(#loc82)
    %26 = cir.shift(left, %24 : !u32i, %25 : !s32i) -> !u32i loc(#loc82)
    %27 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc82)
    %28 = cir.cast(integral, %27 : !s32i), !u32i loc(#loc82)
    %29 = cir.const #cir.int<15> : !s32i loc(#loc82)
    %30 = cir.shift(left, %28 : !u32i, %29 : !s32i) -> !u32i loc(#loc82)
    %31 = cir.binop(xor, %26, %30) : !u32i loc(#loc82)
    %32 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc82)
    %33 = cir.cast(integral, %32 : !s32i), !u32i loc(#loc82)
    %34 = cir.binop(xor, %31, %33) : !u32i loc(#loc82)
    %35 = cir.unary(minus, %34) : !u32i, !u32i loc(#loc82)
    %36 = cir.const #cir.int<1> : !s32i loc(#loc82)
    %37 = cir.cast(integral, %36 : !s32i), !u32i loc(#loc82)
    %38 = cir.binop(sub, %35, %37) : !u32i loc(#loc82)
    cir.br ^bb5(%38 : !u32i) loc(#loc82)
  ^bb5(%39: !u32i loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":69:16)):  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc82)
  ^bb6:  // pred: ^bb5
    %40 = cir.cast(integral, %39 : !u32i), !s32i loc(#loc82)
    cir.store %40, %2 : !s32i, !cir.ptr<!s32i> loc(#loc308)
    cir.br ^bb7 loc(#loc79)
  ^bb7:  // 2 preds: ^bb1, ^bb6
    cir.br ^bb8 loc(#loc79)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc309)
  ^bb9:  // pred: ^bb8
    %41 = cir.const #cir.int<0> : !s32i loc(#loc86)
    %42 = cir.cast(int_to_bool, %41 : !s32i), !cir.bool loc(#loc86)
    cir.brcond %42 ^bb10, ^bb11 loc(#loc310)
  ^bb10:  // pred: ^bb9
    %43 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc65)
    %44 = cir.cast(array_to_ptrdecay, %43 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc65)
    cir.call @printLine(%44) : (!cir.ptr<!s8i>) -> () loc(#loc90)
    cir.br ^bb35 loc(#loc88)
  ^bb11:  // pred: ^bb9
    cir.br ^bb12 loc(#loc311)
  ^bb12:  // pred: ^bb11
    %45 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc303)
    cir.store %45, %1 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc303)
    cir.br ^bb13 loc(#loc312)
  ^bb13:  // pred: ^bb12
    %46 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc95)
    %47 = cir.const #cir.int<0> : !s32i loc(#loc96)
    %48 = cir.cmp(ge, %46, %47) : !s32i, !cir.bool loc(#loc313)
    cir.brcond %48 ^bb14, ^bb19 loc(#loc97)
  ^bb14:  // pred: ^bb13
    %49 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc98)
    %50 = cir.const #cir.int<10> : !s32i loc(#loc99)
    %51 = cir.cmp(lt, %49, %50) : !s32i, !cir.bool loc(#loc314)
    cir.brcond %51 ^bb15, ^bb16 loc(#loc97)
  ^bb15:  // pred: ^bb14
    %52 = cir.const #true loc(#loc97)
    cir.br ^bb17(%52 : !cir.bool) loc(#loc97)
  ^bb16:  // pred: ^bb14
    %53 = cir.const #false loc(#loc97)
    cir.br ^bb17(%53 : !cir.bool) loc(#loc97)
  ^bb17(%54: !cir.bool loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":82:27)):  // 2 preds: ^bb15, ^bb16
    cir.br ^bb18 loc(#loc97)
  ^bb18:  // pred: ^bb17
    cir.br ^bb20(%54 : !cir.bool) loc(#loc97)
  ^bb19:  // pred: ^bb13
    %55 = cir.const #false loc(#loc97)
    cir.br ^bb20(%55 : !cir.bool) loc(#loc97)
  ^bb20(%56: !cir.bool loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":82:27)):  // 2 preds: ^bb18, ^bb19
    cir.br ^bb21 loc(#loc97)
  ^bb21:  // pred: ^bb20
    cir.brcond %56 ^bb22, ^bb31 loc(#loc315)
  ^bb22:  // pred: ^bb21
    %57 = cir.const #cir.int<1> : !s32i loc(#loc104)
    %58 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc105)
    %59 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc106)
    %60 = cir.ptr_stride(%59 : !cir.ptr<!s32i>, %58 : !s32i), !cir.ptr<!s32i> loc(#loc106)
    cir.store %57, %60 : !s32i, !cir.ptr<!s32i> loc(#loc316)
    cir.br ^bb23 loc(#loc317)
  ^bb23:  // pred: ^bb22
    %61 = cir.const #cir.int<0> : !s32i loc(#loc109)
    cir.store %61, %0 : !s32i, !cir.ptr<!s32i> loc(#loc318)
    cir.br ^bb24 loc(#loc317)
  ^bb24:  // 2 preds: ^bb23, ^bb28
    %62 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc111)
    %63 = cir.const #cir.int<10> : !s32i loc(#loc112)
    %64 = cir.cmp(lt, %62, %63) : !s32i, !cir.bool loc(#loc319)
    cir.brcond %64 ^bb25, ^bb29 loc(#loc113)
  ^bb25:  // pred: ^bb24
    cir.br ^bb26 loc(#loc320)
  ^bb26:  // pred: ^bb25
    %65 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc115)
    %66 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc116)
    %67 = cir.ptr_stride(%66 : !cir.ptr<!s32i>, %65 : !s32i), !cir.ptr<!s32i> loc(#loc116)
    %68 = cir.load %67 : !cir.ptr<!s32i>, !s32i loc(#loc116)
    cir.call @printIntLine(%68) : (!s32i) -> () loc(#loc117)
    cir.br ^bb27 loc(#loc108)
  ^bb27:  // pred: ^bb26
    cir.br ^bb28 loc(#loc108)
  ^bb28:  // pred: ^bb27
    %69 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc118)
    %70 = cir.unary(inc, %69) : !s32i, !s32i loc(#loc119)
    cir.store %70, %0 : !s32i, !cir.ptr<!s32i> loc(#loc321)
    cir.br ^bb24 loc(#loc317)
  ^bb29:  // pred: ^bb24
    cir.br ^bb30 loc(#loc108)
  ^bb30:  // pred: ^bb29
    cir.br ^bb32 loc(#loc102)
  ^bb31:  // pred: ^bb21
    %71 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc66)
    %72 = cir.cast(array_to_ptrdecay, %71 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc66)
    cir.call @printLine(%72) : (!cir.ptr<!s8i>) -> () loc(#loc120)
    cir.br ^bb32 loc(#loc94)
  ^bb32:  // 2 preds: ^bb30, ^bb31
    cir.br ^bb33 loc(#loc94)
  ^bb33:  // pred: ^bb32
    cir.br ^bb34 loc(#loc92)
  ^bb34:  // pred: ^bb33
    cir.br ^bb35 loc(#loc85)
  ^bb35:  // 2 preds: ^bb10, ^bb34
    cir.br ^bb36 loc(#loc85)
  ^bb36:  // pred: ^bb35
    cir.return loc(#loc68)
  } loc(#loc301)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc323)
    %1 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc324)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc325)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc129)
    %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc130)
    cir.store %4, %2 : !s32i, !cir.ptr<!s32i> loc(#loc326)
    cir.br ^bb1 loc(#loc327)
  ^bb1:  // pred: ^bb0
    %5 = cir.const #cir.int<1> : !s32i loc(#loc134)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc134)
    cir.brcond %6 ^bb2, ^bb7 loc(#loc328)
  ^bb2:  // pred: ^bb1
    %7 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc136)
    %8 = cir.const #cir.int<1> : !s32i loc(#loc136)
    %9 = cir.binop(and, %7, %8) : !s32i loc(#loc136)
    %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc136)
    cir.brcond %10 ^bb3, ^bb4 loc(#loc136)
  ^bb3:  // pred: ^bb2
    %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc136)
    %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc136)
    %13 = cir.const #cir.int<30> : !s32i loc(#loc136)
    %14 = cir.shift(left, %12 : !u32i, %13 : !s32i) -> !u32i loc(#loc136)
    %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc136)
    %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc136)
    %17 = cir.const #cir.int<15> : !s32i loc(#loc136)
    %18 = cir.shift(left, %16 : !u32i, %17 : !s32i) -> !u32i loc(#loc136)
    %19 = cir.binop(xor, %14, %18) : !u32i loc(#loc136)
    %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc136)
    %21 = cir.cast(integral, %20 : !s32i), !u32i loc(#loc136)
    %22 = cir.binop(xor, %19, %21) : !u32i loc(#loc136)
    cir.br ^bb5(%22 : !u32i) loc(#loc136)
  ^bb4:  // pred: ^bb2
    %23 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc136)
    %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc136)
    %25 = cir.const #cir.int<30> : !s32i loc(#loc136)
    %26 = cir.shift(left, %24 : !u32i, %25 : !s32i) -> !u32i loc(#loc136)
    %27 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc136)
    %28 = cir.cast(integral, %27 : !s32i), !u32i loc(#loc136)
    %29 = cir.const #cir.int<15> : !s32i loc(#loc136)
    %30 = cir.shift(left, %28 : !u32i, %29 : !s32i) -> !u32i loc(#loc136)
    %31 = cir.binop(xor, %26, %30) : !u32i loc(#loc136)
    %32 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc136)
    %33 = cir.cast(integral, %32 : !s32i), !u32i loc(#loc136)
    %34 = cir.binop(xor, %31, %33) : !u32i loc(#loc136)
    %35 = cir.unary(minus, %34) : !u32i, !u32i loc(#loc136)
    %36 = cir.const #cir.int<1> : !s32i loc(#loc136)
    %37 = cir.cast(integral, %36 : !s32i), !u32i loc(#loc136)
    %38 = cir.binop(sub, %35, %37) : !u32i loc(#loc136)
    cir.br ^bb5(%38 : !u32i) loc(#loc136)
  ^bb5(%39: !u32i loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":108:16)):  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc136)
  ^bb6:  // pred: ^bb5
    %40 = cir.cast(integral, %39 : !u32i), !s32i loc(#loc136)
    cir.store %40, %2 : !s32i, !cir.ptr<!s32i> loc(#loc329)
    cir.br ^bb7 loc(#loc133)
  ^bb7:  // 2 preds: ^bb1, ^bb6
    cir.br ^bb8 loc(#loc133)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc330)
  ^bb9:  // pred: ^bb8
    %41 = cir.const #cir.int<1> : !s32i loc(#loc140)
    %42 = cir.cast(int_to_bool, %41 : !s32i), !cir.bool loc(#loc140)
    cir.brcond %42 ^bb10, ^bb34 loc(#loc331)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc332)
  ^bb11:  // pred: ^bb10
    %43 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc324)
    cir.store %43, %1 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc324)
    cir.br ^bb12 loc(#loc333)
  ^bb12:  // pred: ^bb11
    %44 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc146)
    %45 = cir.const #cir.int<0> : !s32i loc(#loc147)
    %46 = cir.cmp(ge, %44, %45) : !s32i, !cir.bool loc(#loc334)
    cir.brcond %46 ^bb13, ^bb18 loc(#loc148)
  ^bb13:  // pred: ^bb12
    %47 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc149)
    %48 = cir.const #cir.int<10> : !s32i loc(#loc150)
    %49 = cir.cmp(lt, %47, %48) : !s32i, !cir.bool loc(#loc335)
    cir.brcond %49 ^bb14, ^bb15 loc(#loc148)
  ^bb14:  // pred: ^bb13
    %50 = cir.const #true loc(#loc148)
    cir.br ^bb16(%50 : !cir.bool) loc(#loc148)
  ^bb15:  // pred: ^bb13
    %51 = cir.const #false loc(#loc148)
    cir.br ^bb16(%51 : !cir.bool) loc(#loc148)
  ^bb16(%52: !cir.bool loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":116:27)):  // 2 preds: ^bb14, ^bb15
    cir.br ^bb17 loc(#loc148)
  ^bb17:  // pred: ^bb16
    cir.br ^bb19(%52 : !cir.bool) loc(#loc148)
  ^bb18:  // pred: ^bb12
    %53 = cir.const #false loc(#loc148)
    cir.br ^bb19(%53 : !cir.bool) loc(#loc148)
  ^bb19(%54: !cir.bool loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":116:27)):  // 2 preds: ^bb17, ^bb18
    cir.br ^bb20 loc(#loc148)
  ^bb20:  // pred: ^bb19
    cir.brcond %54 ^bb21, ^bb30 loc(#loc336)
  ^bb21:  // pred: ^bb20
    %55 = cir.const #cir.int<1> : !s32i loc(#loc155)
    %56 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc156)
    %57 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc157)
    %58 = cir.ptr_stride(%57 : !cir.ptr<!s32i>, %56 : !s32i), !cir.ptr<!s32i> loc(#loc157)
    cir.store %55, %58 : !s32i, !cir.ptr<!s32i> loc(#loc337)
    cir.br ^bb22 loc(#loc338)
  ^bb22:  // pred: ^bb21
    %59 = cir.const #cir.int<0> : !s32i loc(#loc160)
    cir.store %59, %0 : !s32i, !cir.ptr<!s32i> loc(#loc339)
    cir.br ^bb23 loc(#loc338)
  ^bb23:  // 2 preds: ^bb22, ^bb27
    %60 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc162)
    %61 = cir.const #cir.int<10> : !s32i loc(#loc163)
    %62 = cir.cmp(lt, %60, %61) : !s32i, !cir.bool loc(#loc340)
    cir.brcond %62 ^bb24, ^bb28 loc(#loc164)
  ^bb24:  // pred: ^bb23
    cir.br ^bb25 loc(#loc341)
  ^bb25:  // pred: ^bb24
    %63 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc166)
    %64 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc167)
    %65 = cir.ptr_stride(%64 : !cir.ptr<!s32i>, %63 : !s32i), !cir.ptr<!s32i> loc(#loc167)
    %66 = cir.load %65 : !cir.ptr<!s32i>, !s32i loc(#loc167)
    cir.call @printIntLine(%66) : (!s32i) -> () loc(#loc168)
    cir.br ^bb26 loc(#loc159)
  ^bb26:  // pred: ^bb25
    cir.br ^bb27 loc(#loc159)
  ^bb27:  // pred: ^bb26
    %67 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc169)
    %68 = cir.unary(inc, %67) : !s32i, !s32i loc(#loc170)
    cir.store %68, %0 : !s32i, !cir.ptr<!s32i> loc(#loc342)
    cir.br ^bb23 loc(#loc338)
  ^bb28:  // pred: ^bb23
    cir.br ^bb29 loc(#loc159)
  ^bb29:  // pred: ^bb28
    cir.br ^bb31 loc(#loc153)
  ^bb30:  // pred: ^bb20
    %69 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc171)
    %70 = cir.cast(array_to_ptrdecay, %69 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc171)
    cir.call @printLine(%70) : (!cir.ptr<!s8i>) -> () loc(#loc172)
    cir.br ^bb31 loc(#loc145)
  ^bb31:  // 2 preds: ^bb29, ^bb30
    cir.br ^bb32 loc(#loc145)
  ^bb32:  // pred: ^bb31
    cir.br ^bb33 loc(#loc143)
  ^bb33:  // pred: ^bb32
    cir.br ^bb34 loc(#loc139)
  ^bb34:  // 2 preds: ^bb9, ^bb33
    cir.br ^bb35 loc(#loc139)
  ^bb35:  // pred: ^bb34
    cir.return loc(#loc122)
  } loc(#loc322)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc344)
    %1 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc345)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc346)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc181)
    %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc182)
    cir.store %4, %2 : !s32i, !cir.ptr<!s32i> loc(#loc347)
    cir.br ^bb1 loc(#loc348)
  ^bb1:  // pred: ^bb0
    %5 = cir.const #cir.int<0> : !s32i loc(#loc186)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc186)
    cir.brcond %6 ^bb2, ^bb3 loc(#loc349)
  ^bb2:  // pred: ^bb1
    %7 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc190)
    %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc190)
    cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc191)
    cir.br ^bb4 loc(#loc188)
  ^bb3:  // pred: ^bb1
    %9 = cir.const #cir.int<7> : !s32i loc(#loc192)
    cir.store %9, %2 : !s32i, !cir.ptr<!s32i> loc(#loc350)
    cir.br ^bb4 loc(#loc185)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc185)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc351)
  ^bb6:  // pred: ^bb5
    %10 = cir.const #cir.int<1> : !s32i loc(#loc196)
    %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc196)
    cir.brcond %11 ^bb7, ^bb23 loc(#loc352)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc353)
  ^bb8:  // pred: ^bb7
    %12 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc345)
    cir.store %12, %1 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc345)
    cir.br ^bb9 loc(#loc354)
  ^bb9:  // pred: ^bb8
    %13 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc202)
    %14 = cir.const #cir.int<0> : !s32i loc(#loc203)
    %15 = cir.cmp(ge, %13, %14) : !s32i, !cir.bool loc(#loc355)
    cir.brcond %15 ^bb10, ^bb19 loc(#loc356)
  ^bb10:  // pred: ^bb9
    %16 = cir.const #cir.int<1> : !s32i loc(#loc207)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc208)
    %18 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc209)
    %19 = cir.ptr_stride(%18 : !cir.ptr<!s32i>, %17 : !s32i), !cir.ptr<!s32i> loc(#loc209)
    cir.store %16, %19 : !s32i, !cir.ptr<!s32i> loc(#loc357)
    cir.br ^bb11 loc(#loc358)
  ^bb11:  // pred: ^bb10
    %20 = cir.const #cir.int<0> : !s32i loc(#loc212)
    cir.store %20, %0 : !s32i, !cir.ptr<!s32i> loc(#loc359)
    cir.br ^bb12 loc(#loc358)
  ^bb12:  // 2 preds: ^bb11, ^bb16
    %21 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc214)
    %22 = cir.const #cir.int<10> : !s32i loc(#loc215)
    %23 = cir.cmp(lt, %21, %22) : !s32i, !cir.bool loc(#loc360)
    cir.brcond %23 ^bb13, ^bb17 loc(#loc216)
  ^bb13:  // pred: ^bb12
    cir.br ^bb14 loc(#loc361)
  ^bb14:  // pred: ^bb13
    %24 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc218)
    %25 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc219)
    %26 = cir.ptr_stride(%25 : !cir.ptr<!s32i>, %24 : !s32i), !cir.ptr<!s32i> loc(#loc219)
    %27 = cir.load %26 : !cir.ptr<!s32i>, !s32i loc(#loc219)
    cir.call @printIntLine(%27) : (!s32i) -> () loc(#loc220)
    cir.br ^bb15 loc(#loc211)
  ^bb15:  // pred: ^bb14
    cir.br ^bb16 loc(#loc211)
  ^bb16:  // pred: ^bb15
    %28 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc221)
    %29 = cir.unary(inc, %28) : !s32i, !s32i loc(#loc222)
    cir.store %29, %0 : !s32i, !cir.ptr<!s32i> loc(#loc362)
    cir.br ^bb12 loc(#loc358)
  ^bb17:  // pred: ^bb12
    cir.br ^bb18 loc(#loc211)
  ^bb18:  // pred: ^bb17
    cir.br ^bb20 loc(#loc205)
  ^bb19:  // pred: ^bb9
    %30 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc223)
    %31 = cir.cast(array_to_ptrdecay, %30 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc223)
    cir.call @printLine(%31) : (!cir.ptr<!s8i>) -> () loc(#loc224)
    cir.br ^bb20 loc(#loc201)
  ^bb20:  // 2 preds: ^bb18, ^bb19
    cir.br ^bb21 loc(#loc201)
  ^bb21:  // pred: ^bb20
    cir.br ^bb22 loc(#loc199)
  ^bb22:  // pred: ^bb21
    cir.br ^bb23 loc(#loc195)
  ^bb23:  // 2 preds: ^bb6, ^bb22
    cir.br ^bb24 loc(#loc195)
  ^bb24:  // pred: ^bb23
    cir.return loc(#loc174)
  } loc(#loc343)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc364)
    %1 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc365)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc366)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc233)
    %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc234)
    cir.store %4, %2 : !s32i, !cir.ptr<!s32i> loc(#loc367)
    cir.br ^bb1 loc(#loc368)
  ^bb1:  // pred: ^bb0
    %5 = cir.const #cir.int<1> : !s32i loc(#loc238)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc238)
    cir.brcond %6 ^bb2, ^bb3 loc(#loc369)
  ^bb2:  // pred: ^bb1
    %7 = cir.const #cir.int<7> : !s32i loc(#loc240)
    cir.store %7, %2 : !s32i, !cir.ptr<!s32i> loc(#loc370)
    cir.br ^bb3 loc(#loc237)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc237)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc371)
  ^bb5:  // pred: ^bb4
    %8 = cir.const #cir.int<1> : !s32i loc(#loc244)
    %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc244)
    cir.brcond %9 ^bb6, ^bb22 loc(#loc372)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc373)
  ^bb7:  // pred: ^bb6
    %10 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc365)
    cir.store %10, %1 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc365)
    cir.br ^bb8 loc(#loc374)
  ^bb8:  // pred: ^bb7
    %11 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc250)
    %12 = cir.const #cir.int<0> : !s32i loc(#loc251)
    %13 = cir.cmp(ge, %11, %12) : !s32i, !cir.bool loc(#loc375)
    cir.brcond %13 ^bb9, ^bb18 loc(#loc376)
  ^bb9:  // pred: ^bb8
    %14 = cir.const #cir.int<1> : !s32i loc(#loc255)
    %15 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc256)
    %16 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc257)
    %17 = cir.ptr_stride(%16 : !cir.ptr<!s32i>, %15 : !s32i), !cir.ptr<!s32i> loc(#loc257)
    cir.store %14, %17 : !s32i, !cir.ptr<!s32i> loc(#loc377)
    cir.br ^bb10 loc(#loc378)
  ^bb10:  // pred: ^bb9
    %18 = cir.const #cir.int<0> : !s32i loc(#loc260)
    cir.store %18, %0 : !s32i, !cir.ptr<!s32i> loc(#loc379)
    cir.br ^bb11 loc(#loc378)
  ^bb11:  // 2 preds: ^bb10, ^bb15
    %19 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc262)
    %20 = cir.const #cir.int<10> : !s32i loc(#loc263)
    %21 = cir.cmp(lt, %19, %20) : !s32i, !cir.bool loc(#loc380)
    cir.brcond %21 ^bb12, ^bb16 loc(#loc264)
  ^bb12:  // pred: ^bb11
    cir.br ^bb13 loc(#loc381)
  ^bb13:  // pred: ^bb12
    %22 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc266)
    %23 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc267)
    %24 = cir.ptr_stride(%23 : !cir.ptr<!s32i>, %22 : !s32i), !cir.ptr<!s32i> loc(#loc267)
    %25 = cir.load %24 : !cir.ptr<!s32i>, !s32i loc(#loc267)
    cir.call @printIntLine(%25) : (!s32i) -> () loc(#loc268)
    cir.br ^bb14 loc(#loc259)
  ^bb14:  // pred: ^bb13
    cir.br ^bb15 loc(#loc259)
  ^bb15:  // pred: ^bb14
    %26 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc269)
    %27 = cir.unary(inc, %26) : !s32i, !s32i loc(#loc270)
    cir.store %27, %0 : !s32i, !cir.ptr<!s32i> loc(#loc382)
    cir.br ^bb11 loc(#loc378)
  ^bb16:  // pred: ^bb11
    cir.br ^bb17 loc(#loc259)
  ^bb17:  // pred: ^bb16
    cir.br ^bb19 loc(#loc253)
  ^bb18:  // pred: ^bb8
    %28 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc271)
    %29 = cir.cast(array_to_ptrdecay, %28 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc271)
    cir.call @printLine(%29) : (!cir.ptr<!s8i>) -> () loc(#loc272)
    cir.br ^bb19 loc(#loc249)
  ^bb19:  // 2 preds: ^bb17, ^bb18
    cir.br ^bb20 loc(#loc249)
  ^bb20:  // pred: ^bb19
    cir.br ^bb21 loc(#loc247)
  ^bb21:  // pred: ^bb20
    cir.br ^bb22 loc(#loc243)
  ^bb22:  // 2 preds: ^bb5, ^bb21
    cir.br ^bb23 loc(#loc243)
  ^bb23:  // pred: ^bb22
    cir.return loc(#loc226)
  } loc(#loc363)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc7 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":50:27)
#loc8 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":22:1)
#loc9 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":54:1)
#loc10 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":35:13)
#loc11 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":35:17)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":36:13)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":36:34)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":24:5)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":24:9)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":26:13)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":26:12)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":26:5)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":27:5)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":31:5)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":27:8)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":28:5)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":30:9)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":32:5)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":53:5)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":32:8)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":33:5)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":34:9)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":52:9)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":39:13)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":51:13)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":39:17)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":39:25)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":40:13)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":47:13)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":49:13)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":41:32)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":41:24)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":41:17)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":43:17)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":46:17)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":43:25)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":43:21)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":43:28)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":43:32)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":43:30)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":44:17)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":45:41)
#loc50 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":45:34)
#loc51 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":45:21)
#loc52 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":43:37)
#loc53 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":43:36)
#loc54 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":50:17)
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":210:1)
#loc56 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":216:1)
#loc57 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":212:5)
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":212:14)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":213:5)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":213:14)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":214:5)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":214:14)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":215:5)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":215:14)
#loc65 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":74:19)
#loc66 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":93:27)
#loc67 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":61:1)
#loc68 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":97:1)
#loc69 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":79:13)
#loc70 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":79:17)
#loc71 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":80:13)
#loc72 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":80:34)
#loc73 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":63:5)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":63:9)
#loc75 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":65:13)
#loc76 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":65:12)
#loc77 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":65:5)
#loc78 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":66:5)
#loc79 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":70:5)
#loc80 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":66:8)
#loc81 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":67:5)
#loc83 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":69:9)
#loc84 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":71:5)
#loc85 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":96:5)
#loc86 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":71:8)
#loc87 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":72:5)
#loc88 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":75:5)
#loc89 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":77:5)
#loc90 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":74:9)
#loc91 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":78:9)
#loc92 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":95:9)
#loc93 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":82:13)
#loc94 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":94:13)
#loc95 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":82:17)
#loc96 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":82:25)
#loc98 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":82:30)
#loc99 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":82:38)
#loc100 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":82:40)
#loc101 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":83:13)
#loc102 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":90:13)
#loc103 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":92:13)
#loc104 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":84:32)
#loc105 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":84:24)
#loc106 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":84:17)
#loc107 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":86:17)
#loc108 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":89:17)
#loc109 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":86:25)
#loc110 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":86:21)
#loc111 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":86:28)
#loc112 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":86:32)
#loc113 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":86:30)
#loc114 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":87:17)
#loc115 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":88:41)
#loc116 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":88:34)
#loc117 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":88:21)
#loc118 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":86:37)
#loc119 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":86:36)
#loc120 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":93:17)
#loc121 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":100:1)
#loc122 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":131:1)
#loc123 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":113:13)
#loc124 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":113:17)
#loc125 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":114:13)
#loc126 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":114:34)
#loc127 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":102:5)
#loc128 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":102:9)
#loc129 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":104:13)
#loc130 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":104:12)
#loc131 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":104:5)
#loc132 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":105:5)
#loc133 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":109:5)
#loc134 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":105:8)
#loc135 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":106:5)
#loc137 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":108:9)
#loc138 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":110:5)
#loc139 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":130:5)
#loc140 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":110:8)
#loc141 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":111:5)
#loc142 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":112:9)
#loc143 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":129:9)
#loc144 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":116:13)
#loc145 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":128:13)
#loc146 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":116:17)
#loc147 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":116:25)
#loc149 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":116:30)
#loc150 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":116:38)
#loc151 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":116:40)
#loc152 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":117:13)
#loc153 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":124:13)
#loc154 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":126:13)
#loc155 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":118:32)
#loc156 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":118:24)
#loc157 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":118:17)
#loc158 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":120:17)
#loc159 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":123:17)
#loc160 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":120:25)
#loc161 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":120:21)
#loc162 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":120:28)
#loc163 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":120:32)
#loc164 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":120:30)
#loc165 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":121:17)
#loc166 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":122:41)
#loc167 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":122:34)
#loc168 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":122:21)
#loc169 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":120:37)
#loc170 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":120:36)
#loc171 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":127:27)
#loc172 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":127:17)
#loc173 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":134:1)
#loc174 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":172:1)
#loc175 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":153:13)
#loc176 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":153:17)
#loc177 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":154:13)
#loc178 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":154:34)
#loc179 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":136:5)
#loc180 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":136:9)
#loc181 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":138:13)
#loc182 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":138:12)
#loc183 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":138:5)
#loc184 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":139:5)
#loc185 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":149:5)
#loc186 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":139:8)
#loc187 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":140:5)
#loc188 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":143:5)
#loc189 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":145:5)
#loc190 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":142:19)
#loc191 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":142:9)
#loc192 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":148:16)
#loc193 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":148:9)
#loc194 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":150:5)
#loc195 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":171:5)
#loc196 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":150:8)
#loc197 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":151:5)
#loc198 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":152:9)
#loc199 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":170:9)
#loc200 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":157:13)
#loc201 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":169:13)
#loc202 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":157:17)
#loc203 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":157:25)
#loc204 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":158:13)
#loc205 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":165:13)
#loc206 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":167:13)
#loc207 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":159:32)
#loc208 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":159:24)
#loc209 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":159:17)
#loc210 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":161:17)
#loc211 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":164:17)
#loc212 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":161:25)
#loc213 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":161:21)
#loc214 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":161:28)
#loc215 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":161:32)
#loc216 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":161:30)
#loc217 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":162:17)
#loc218 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":163:41)
#loc219 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":163:34)
#loc220 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":163:21)
#loc221 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":161:37)
#loc222 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":161:36)
#loc223 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":168:27)
#loc224 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":168:17)
#loc225 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":175:1)
#loc226 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":208:1)
#loc227 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":189:13)
#loc228 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":189:17)
#loc229 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":190:13)
#loc230 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":190:34)
#loc231 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":177:5)
#loc232 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":177:9)
#loc233 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":179:13)
#loc234 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":179:12)
#loc235 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":179:5)
#loc236 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":180:5)
#loc237 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":185:5)
#loc238 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":180:8)
#loc239 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":181:5)
#loc240 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":184:16)
#loc241 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":184:9)
#loc242 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":186:5)
#loc243 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":207:5)
#loc244 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":186:8)
#loc245 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":187:5)
#loc246 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":188:9)
#loc247 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":206:9)
#loc248 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":193:13)
#loc249 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":205:13)
#loc250 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":193:17)
#loc251 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":193:25)
#loc252 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":194:13)
#loc253 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":201:13)
#loc254 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":203:13)
#loc255 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":195:32)
#loc256 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":195:24)
#loc257 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":195:17)
#loc258 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":197:17)
#loc259 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":200:17)
#loc260 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":197:25)
#loc261 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":197:21)
#loc262 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":197:28)
#loc263 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":197:32)
#loc264 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":197:30)
#loc265 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":198:17)
#loc266 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":199:41)
#loc267 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":199:34)
#loc268 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":199:21)
#loc269 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":197:37)
#loc270 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":197:36)
#loc271 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":204:27)
#loc272 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c":204:17)
#loc273 = loc(fused[#loc1, #loc2])
#loc274 = loc(fused[#loc3, #loc4])
#loc275 = loc(fused[#loc5, #loc6])
#loc276 = loc(fused[#loc8, #loc9])
#loc277 = loc(fused[#loc10, #loc11])
#loc278 = loc(fused[#loc12, #loc13])
#loc279 = loc(fused[#loc14, #loc15])
#loc280 = loc(fused[#loc18, #loc16])
#loc281 = loc(fused[#loc19, #loc20])
#loc282 = loc(fused[#loc22, #loc20])
#loc283 = loc(fused[#loc24, #loc23])
#loc284 = loc(fused[#loc25, #loc26])
#loc285 = loc(fused[#loc28, #loc26])
#loc286 = loc(fused[#loc29, #loc30])
#loc287 = loc(fused[#loc31, #loc32])
#loc288 = loc(fused[#loc33, #loc34])
#loc289 = loc(fused[#loc35, #loc36, #loc37, #loc32])
#loc290 = loc(fused[#loc40, #loc38])
#loc291 = loc(fused[#loc41, #loc42])
#loc292 = loc(fused[#loc44, #loc43])
#loc293 = loc(fused[#loc45, #loc46])
#loc294 = loc(fused[#loc48, #loc42])
#loc295 = loc(fused[#loc53, #loc52])
#loc296 = loc(fused[#loc55, #loc56])
#loc297 = loc(fused[#loc57, #loc58])
#loc298 = loc(fused[#loc59, #loc60])
#loc299 = loc(fused[#loc61, #loc62])
#loc300 = loc(fused[#loc63, #loc64])
#loc301 = loc(fused[#loc67, #loc68])
#loc302 = loc(fused[#loc69, #loc70])
#loc303 = loc(fused[#loc71, #loc72])
#loc304 = loc(fused[#loc73, #loc74])
#loc305 = loc(fused[#loc77, #loc75])
#loc306 = loc(fused[#loc78, #loc79])
#loc307 = loc(fused[#loc81, #loc79])
#loc308 = loc(fused[#loc83, #loc82])
#loc309 = loc(fused[#loc84, #loc85])
#loc310 = loc(fused[#loc87, #loc88, #loc89, #loc85])
#loc311 = loc(fused[#loc91, #loc92])
#loc312 = loc(fused[#loc93, #loc94])
#loc313 = loc(fused[#loc95, #loc96])
#loc314 = loc(fused[#loc98, #loc100])
#loc315 = loc(fused[#loc101, #loc102, #loc103, #loc94])
#loc316 = loc(fused[#loc106, #loc104])
#loc317 = loc(fused[#loc107, #loc108])
#loc318 = loc(fused[#loc110, #loc109])
#loc319 = loc(fused[#loc111, #loc112])
#loc320 = loc(fused[#loc114, #loc108])
#loc321 = loc(fused[#loc119, #loc118])
#loc322 = loc(fused[#loc121, #loc122])
#loc323 = loc(fused[#loc123, #loc124])
#loc324 = loc(fused[#loc125, #loc126])
#loc325 = loc(fused[#loc127, #loc128])
#loc326 = loc(fused[#loc131, #loc129])
#loc327 = loc(fused[#loc132, #loc133])
#loc328 = loc(fused[#loc135, #loc133])
#loc329 = loc(fused[#loc137, #loc136])
#loc330 = loc(fused[#loc138, #loc139])
#loc331 = loc(fused[#loc141, #loc139])
#loc332 = loc(fused[#loc142, #loc143])
#loc333 = loc(fused[#loc144, #loc145])
#loc334 = loc(fused[#loc146, #loc147])
#loc335 = loc(fused[#loc149, #loc151])
#loc336 = loc(fused[#loc152, #loc153, #loc154, #loc145])
#loc337 = loc(fused[#loc157, #loc155])
#loc338 = loc(fused[#loc158, #loc159])
#loc339 = loc(fused[#loc161, #loc160])
#loc340 = loc(fused[#loc162, #loc163])
#loc341 = loc(fused[#loc165, #loc159])
#loc342 = loc(fused[#loc170, #loc169])
#loc343 = loc(fused[#loc173, #loc174])
#loc344 = loc(fused[#loc175, #loc176])
#loc345 = loc(fused[#loc177, #loc178])
#loc346 = loc(fused[#loc179, #loc180])
#loc347 = loc(fused[#loc183, #loc181])
#loc348 = loc(fused[#loc184, #loc185])
#loc349 = loc(fused[#loc187, #loc188, #loc189, #loc185])
#loc350 = loc(fused[#loc193, #loc192])
#loc351 = loc(fused[#loc194, #loc195])
#loc352 = loc(fused[#loc197, #loc195])
#loc353 = loc(fused[#loc198, #loc199])
#loc354 = loc(fused[#loc200, #loc201])
#loc355 = loc(fused[#loc202, #loc203])
#loc356 = loc(fused[#loc204, #loc205, #loc206, #loc201])
#loc357 = loc(fused[#loc209, #loc207])
#loc358 = loc(fused[#loc210, #loc211])
#loc359 = loc(fused[#loc213, #loc212])
#loc360 = loc(fused[#loc214, #loc215])
#loc361 = loc(fused[#loc217, #loc211])
#loc362 = loc(fused[#loc222, #loc221])
#loc363 = loc(fused[#loc225, #loc226])
#loc364 = loc(fused[#loc227, #loc228])
#loc365 = loc(fused[#loc229, #loc230])
#loc366 = loc(fused[#loc231, #loc232])
#loc367 = loc(fused[#loc235, #loc233])
#loc368 = loc(fused[#loc236, #loc237])
#loc369 = loc(fused[#loc239, #loc237])
#loc370 = loc(fused[#loc241, #loc240])
#loc371 = loc(fused[#loc242, #loc243])
#loc372 = loc(fused[#loc245, #loc243])
#loc373 = loc(fused[#loc246, #loc247])
#loc374 = loc(fused[#loc248, #loc249])
#loc375 = loc(fused[#loc250, #loc251])
#loc376 = loc(fused[#loc252, #loc253, #loc254, #loc249])
#loc377 = loc(fused[#loc257, #loc255])
#loc378 = loc(fused[#loc258, #loc259])
#loc379 = loc(fused[#loc261, #loc260])
#loc380 = loc(fused[#loc262, #loc263])
#loc381 = loc(fused[#loc265, #loc259])
#loc382 = loc(fused[#loc270, #loc269])
