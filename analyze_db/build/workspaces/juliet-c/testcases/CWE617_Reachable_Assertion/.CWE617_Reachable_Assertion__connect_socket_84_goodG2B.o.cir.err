clang: warning: argument unused during compilation: '-c' [-Wunused-command-line-argument]
warning: unknown warning option '-Wno-terminate' [-Wunknown-warning-option]
NYI
UNREACHABLE executed at /workspaces/clangir/clang/lib/CIR/CodeGen/CIRGenExprScalar.cpp:686!
PLEASE submit a bug report to https://github.com/llvm/llvm-project/issues/ and include the crash backtrace, preprocessed source, and associated run script.
Stack dump:
0.	Program arguments: /workspaces/clangir/install/bin/clang -S -Xclang -emit-cir-flat -std=c++11 -Wno-terminate -std=c++11 -I ../../testcasesupport -c CWE617_Reachable_Assertion__connect_socket_84_goodG2B.cpp -o /workspaces/juliet-c/testcases/CWE617_Reachable_Assertion/.CWE617_Reachable_Assertion__connect_socket_84_goodG2B.o.cir
1.	<eof> parser at end of file
2.	CWE617_Reachable_Assertion__connect_socket_84_goodG2B.cpp:21:11: LLVM IR generation of declaration 'CWE617_Reachable_Assertion__connect_socket_84'
Stack dump without symbol names (ensure you have llvm-symbolizer in your PATH or set the environment var `LLVM_SYMBOLIZER_PATH` to point to it):
0  clang     0x000056286640db68 llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) + 40
1  clang     0x000056286640b73e llvm::sys::RunSignalHandlers() + 238
2  clang     0x000056286637c946
3  libc.so.6 0x00007fcca3e45330
4  libc.so.6 0x00007fcca3e9eb2c pthread_kill + 284
5  libc.so.6 0x00007fcca3e4527e gsignal + 30
6  libc.so.6 0x00007fcca3e288ff abort + 223
7  clang     0x0000562866382faf
8  clang     0x000056286785f152
9  clang     0x0000562867859d1f clang::CIRGen::CIRGenFunction::emitScalarExpr(clang::Expr const*) + 63
10 clang     0x000056286781b7e2 clang::CIRGen::CIRGenFunction::emitAnyExpr(clang::Expr const*, clang::CIRGen::AggValueSlot, bool) + 66
11 clang     0x00005628677f862d clang::CIRGen::CIRGenFunction::emitAnyExprToTemp(clang::Expr const*) + 397
12 clang     0x00005628677f8232 clang::CIRGen::CIRGenFunction::emitCallArg(clang::CIRGen::CallArgList&, clang::Expr const*, clang::QualType) + 546
13 clang     0x00005628677f8b0d clang::CIRGen::CIRGenFunction::emitCallArgs(clang::CIRGen::CallArgList&, clang::CIRGen::CIRGenFunction::PrototypeWrapper, llvm::iterator_range<clang::Stmt::CastIterator<clang::Expr, clang::Expr const* const, clang::Stmt const* const>>, clang::CIRGen::CIRGenFunction::AbstractCallee, unsigned int, clang::CIRGen::CIRGenFunction::EvaluationOrder) + 781
14 clang     0x000056286781d7c8 clang::CIRGen::CIRGenFunction::emitCall(clang::QualType, clang::CIRGen::CIRGenCallee const&, clang::CallExpr const*, clang::CIRGen::ReturnValueSlot, mlir::Value) + 792
15 clang     0x000056286781d134 clang::CIRGen::CIRGenFunction::emitCallExpr(clang::CallExpr const*, clang::CIRGen::ReturnValueSlot) + 548
16 clang     0x0000562867865d89
17 clang     0x00005628678718b0
18 clang     0x000056286897b133 cir::TernaryOp::build(mlir::OpBuilder&, mlir::OperationState&, mlir::Value, llvm::function_ref<void (mlir::OpBuilder&, mlir::Location)>, llvm::function_ref<void (mlir::OpBuilder&, mlir::Location)>) + 243
19 clang     0x0000562867870ebd
20 clang     0x0000562867859d1f clang::CIRGen::CIRGenFunction::emitScalarExpr(clang::Expr const*) + 63
21 clang     0x000056286781b7e2 clang::CIRGen::CIRGenFunction::emitAnyExpr(clang::Expr const*, clang::CIRGen::AggValueSlot, bool) + 66
22 clang     0x000056286781554a clang::CIRGen::CIRGenFunction::emitIgnoredExpr(clang::Expr const*) + 122
23 clang     0x000056286788c518 clang::CIRGen::CIRGenFunction::emitStmt(clang::Stmt const*, bool, llvm::ArrayRef<clang::Attr const*>) + 120
24 clang     0x000056286788cbd4 clang::CIRGen::CIRGenFunction::emitSimpleStmt(clang::Stmt const*, bool) + 356
25 clang     0x000056286788c4b0 clang::CIRGen::CIRGenFunction::emitStmt(clang::Stmt const*, bool, llvm::ArrayRef<clang::Attr const*>) + 16
26 clang     0x00005628678cf833 clang::CIRGen::CIRGenFunction::emitDestructorBody(clang::CIRGen::FunctionArgList&) + 1347
27 clang     0x000056286787668d clang::CIRGen::CIRGenFunction::generateCode(clang::GlobalDecl, cir::FuncOp, clang::CIRGen::CIRGenFunctionInfo const&) + 1117
28 clang     0x00005628678c967a clang::CIRGen::CIRGenModule::codegenCXXStructor(clang::GlobalDecl) + 218
29 clang     0x000056286788402f
30 clang     0x00005628677c9484 clang::CIRGen::CIRGenModule::emitGlobalDefinition(clang::GlobalDecl, mlir::Operation*) + 244
31 clang     0x00005628677c7968 clang::CIRGen::CIRGenModule::emitGlobal(clang::GlobalDecl) + 1656
32 clang     0x0000562867881911
33 clang     0x00005628677d216a clang::CIRGen::CIRGenModule::emitDeclContext(clang::DeclContext const*) + 58
34 clang     0x00005628677c44af cir::CIRGenerator::HandleTopLevelDecl(clang::DeclGroupRef) + 159
35 clang     0x00005628676b69e1
36 clang     0x00005628697b8ada clang::ParseAST(clang::Sema&, bool, bool) + 826
37 clang     0x0000562866ed3d36 clang::FrontendAction::Execute() + 38
38 clang     0x0000562866e3f3ad clang::CompilerInstance::ExecuteAction(clang::FrontendAction&) + 1149
39 clang     0x0000562866fbcedf clang::ExecuteCompilerInvocation(clang::CompilerInstance*) + 815
40 clang     0x00005628651dfa7a cc1_main(llvm::ArrayRef<char const*>, char const*, void*) + 6074
41 clang     0x00005628651dc06d
42 clang     0x0000562866c86339
43 clang     0x000056286637c686 llvm::CrashRecoveryContext::RunSafely(llvm::function_ref<void ()>) + 150
44 clang     0x0000562866c85892 clang::driver::CC1Command::Execute(llvm::ArrayRef<std::optional<llvm::StringRef>>, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>*, bool*) const + 242
45 clang     0x0000562866c41c27 clang::driver::Compilation::ExecuteCommand(clang::driver::Command const&, clang::driver::Command const*&, bool) const + 455
46 clang     0x0000562866c41f17 clang::driver::Compilation::ExecuteJobs(clang::driver::JobList const&, llvm::SmallVectorImpl<std::pair<int, clang::driver::Command const*>>&, bool) const + 135
47 clang     0x0000562866c61928 clang::driver::Driver::ExecuteCompilation(clang::driver::Compilation&, llvm::SmallVectorImpl<std::pair<int, clang::driver::Command const*>>&) + 904
48 clang     0x00005628651db6ba clang_main(int, char**, llvm::ToolContext const&) + 6090
49 clang     0x00005628651eb147 main + 87
50 libc.so.6 0x00007fcca3e2a1ca
51 libc.so.6 0x00007fcca3e2a28b __libc_start_main + 139
52 clang     0x00005628651d9aa5 _start + 37
clang: error: clang frontend command failed with exit code 134 (use -v to see invocation)
clang version 21.0.0git (git@github.com:llvm/clangir.git 4e7a2236d38507e994cbe5b79c888cf86427e7db)
Target: x86_64-unknown-linux-gnu
Thread model: posix
InstalledDir: /workspaces/clangir/install/bin
Build config: +assertions
clang: error: unable to execute command: Aborted (core dumped)
clang: note: diagnostic msg: Error generating preprocessed source(s).
