!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE398_Poor_Code_Quality/CWE398_Poor_Code_Quality__empty_for_16.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc52)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Hello from bad()\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc3)
  cir.func no_proto @CWE398_Poor_Code_Quality__empty_for_16_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc54)
    cir.br ^bb1 loc(#loc55)
  ^bb1:  // pred: ^bb0
    cir.br ^bb2 loc(#loc55)
  ^bb2:  // pred: ^bb1
    %1 = cir.const #cir.int<1> : !s32i loc(#loc10)
    %2 = cir.cast(int_to_bool, %1 : !s32i), !cir.bool loc(#loc10)
    cir.brcond %2 ^bb3, ^bb12 loc(#loc10)
  ^bb3:  // pred: ^bb2
    cir.br ^bb4 loc(#loc56)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc57)
  ^bb5:  // pred: ^bb4
    %3 = cir.const #cir.int<0> : !s32i loc(#loc15)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc58)
    cir.br ^bb6 loc(#loc57)
  ^bb6:  // 2 preds: ^bb5, ^bb8
    %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc17)
    %5 = cir.const #cir.int<10> : !s32i loc(#loc18)
    %6 = cir.cmp(lt, %4, %5) : !s32i, !cir.bool loc(#loc59)
    cir.brcond %6 ^bb7, ^bb9 loc(#loc19)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc14)
  ^bb8:  // pred: ^bb7
    %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc20)
    %8 = cir.unary(inc, %7) : !s32i, !s32i loc(#loc21)
    cir.store %8, %0 : !s32i, !cir.ptr<!s32i> loc(#loc60)
    cir.br ^bb6 loc(#loc57)
  ^bb9:  // pred: ^bb6
    cir.br ^bb10 loc(#loc14)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc12)
  ^bb11:  // pred: ^bb10
    %9 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc3)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc3)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc22)
    cir.br ^bb12 loc(#loc23)
  ^bb12:  // 2 preds: ^bb2, ^bb11
    cir.br ^bb13 loc(#loc9)
  ^bb13:  // pred: ^bb12
    cir.return loc(#loc5)
  } loc(#loc53)
  cir.func no_proto @CWE398_Poor_Code_Quality__empty_for_16_good() extra(#fn_attr) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<!void ()>> loc(#loc62)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc26)
    cir.return loc(#loc25)
  } loc(#loc61)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Inside the for statement\00" : !cir.array<!s8i x 25>> : !cir.array<!s8i x 25> {alignment = 1 : i64} loc(#loc28)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Hello from good()\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc29)
  cir.func no_proto internal private @good1() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc64)
    cir.br ^bb1 loc(#loc65)
  ^bb1:  // pred: ^bb0
    cir.br ^bb2 loc(#loc65)
  ^bb2:  // pred: ^bb1
    %1 = cir.const #cir.int<1> : !s32i loc(#loc36)
    %2 = cir.cast(int_to_bool, %1 : !s32i), !cir.bool loc(#loc36)
    cir.brcond %2 ^bb3, ^bb14 loc(#loc36)
  ^bb3:  // pred: ^bb2
    cir.br ^bb4 loc(#loc66)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc67)
  ^bb5:  // pred: ^bb4
    %3 = cir.const #cir.int<0> : !s32i loc(#loc41)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc68)
    cir.br ^bb6 loc(#loc67)
  ^bb6:  // 2 preds: ^bb5, ^bb10
    %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc43)
    %5 = cir.const #cir.int<10> : !s32i loc(#loc44)
    %6 = cir.cmp(lt, %4, %5) : !s32i, !cir.bool loc(#loc69)
    cir.brcond %6 ^bb7, ^bb11 loc(#loc45)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc70)
  ^bb8:  // pred: ^bb7
    %7 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 25>> loc(#loc28)
    %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 25>>), !cir.ptr<!s8i> loc(#loc28)
    cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc47)
    cir.br ^bb9 loc(#loc40)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc40)
  ^bb10:  // pred: ^bb9
    %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc48)
    %10 = cir.unary(inc, %9) : !s32i, !s32i loc(#loc49)
    cir.store %10, %0 : !s32i, !cir.ptr<!s32i> loc(#loc71)
    cir.br ^bb6 loc(#loc67)
  ^bb11:  // pred: ^bb6
    cir.br ^bb12 loc(#loc40)
  ^bb12:  // pred: ^bb11
    cir.br ^bb13 loc(#loc38)
  ^bb13:  // pred: ^bb12
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc29)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc29)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc50)
    cir.br ^bb14 loc(#loc51)
  ^bb14:  // 2 preds: ^bb2, ^bb13
    cir.br ^bb15 loc(#loc35)
  ^bb15:  // pred: ^bb14
    cir.return loc(#loc31)
  } loc(#loc63)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE398_Poor_Code_Quality/CWE398_Poor_Code_Quality__empty_for_16.c":0:0)
#loc1 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc2 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc3 = loc("CWE398_Poor_Code_Quality__empty_for_16.c":31:19)
#loc4 = loc("CWE398_Poor_Code_Quality__empty_for_16.c":20:1)
#loc5 = loc("CWE398_Poor_Code_Quality__empty_for_16.c":34:1)
#loc6 = loc("CWE398_Poor_Code_Quality__empty_for_16.c":26:13)
#loc7 = loc("CWE398_Poor_Code_Quality__empty_for_16.c":26:17)
#loc8 = loc("CWE398_Poor_Code_Quality__empty_for_16.c":22:5)
#loc9 = loc("CWE398_Poor_Code_Quality__empty_for_16.c":33:5)
#loc10 = loc("CWE398_Poor_Code_Quality__empty_for_16.c":22:11)
#loc11 = loc("CWE398_Poor_Code_Quality__empty_for_16.c":25:9)
#loc12 = loc("CWE398_Poor_Code_Quality__empty_for_16.c":30:9)
#loc13 = loc("CWE398_Poor_Code_Quality__empty_for_16.c":27:13)
#loc14 = loc("CWE398_Poor_Code_Quality__empty_for_16.c":29:13)
#loc15 = loc("CWE398_Poor_Code_Quality__empty_for_16.c":27:22)
#loc16 = loc("CWE398_Poor_Code_Quality__empty_for_16.c":27:18)
#loc17 = loc("CWE398_Poor_Code_Quality__empty_for_16.c":27:25)
#loc18 = loc("CWE398_Poor_Code_Quality__empty_for_16.c":27:29)
#loc19 = loc("CWE398_Poor_Code_Quality__empty_for_16.c":27:27)
#loc20 = loc("CWE398_Poor_Code_Quality__empty_for_16.c":27:34)
#loc21 = loc("CWE398_Poor_Code_Quality__empty_for_16.c":27:33)
#loc22 = loc("CWE398_Poor_Code_Quality__empty_for_16.c":31:9)
#loc23 = loc("CWE398_Poor_Code_Quality__empty_for_16.c":32:9)
#loc24 = loc("CWE398_Poor_Code_Quality__empty_for_16.c":58:1)
#loc25 = loc("CWE398_Poor_Code_Quality__empty_for_16.c":61:1)
#loc26 = loc("CWE398_Poor_Code_Quality__empty_for_16.c":60:5)
#loc27 = loc("CWE398_Poor_Code_Quality__empty_for_16.c":60:11)
#loc28 = loc("CWE398_Poor_Code_Quality__empty_for_16.c":50:27)
#loc29 = loc("CWE398_Poor_Code_Quality__empty_for_16.c":53:19)
#loc30 = loc("CWE398_Poor_Code_Quality__empty_for_16.c":41:1)
#loc31 = loc("CWE398_Poor_Code_Quality__empty_for_16.c":56:1)
#loc32 = loc("CWE398_Poor_Code_Quality__empty_for_16.c":47:13)
#loc33 = loc("CWE398_Poor_Code_Quality__empty_for_16.c":47:17)
#loc34 = loc("CWE398_Poor_Code_Quality__empty_for_16.c":43:5)
#loc35 = loc("CWE398_Poor_Code_Quality__empty_for_16.c":55:5)
#loc36 = loc("CWE398_Poor_Code_Quality__empty_for_16.c":43:11)
#loc37 = loc("CWE398_Poor_Code_Quality__empty_for_16.c":46:9)
#loc38 = loc("CWE398_Poor_Code_Quality__empty_for_16.c":52:9)
#loc39 = loc("CWE398_Poor_Code_Quality__empty_for_16.c":48:13)
#loc40 = loc("CWE398_Poor_Code_Quality__empty_for_16.c":51:13)
#loc41 = loc("CWE398_Poor_Code_Quality__empty_for_16.c":48:22)
#loc42 = loc("CWE398_Poor_Code_Quality__empty_for_16.c":48:18)
#loc43 = loc("CWE398_Poor_Code_Quality__empty_for_16.c":48:25)
#loc44 = loc("CWE398_Poor_Code_Quality__empty_for_16.c":48:29)
#loc45 = loc("CWE398_Poor_Code_Quality__empty_for_16.c":48:27)
#loc46 = loc("CWE398_Poor_Code_Quality__empty_for_16.c":49:13)
#loc47 = loc("CWE398_Poor_Code_Quality__empty_for_16.c":50:17)
#loc48 = loc("CWE398_Poor_Code_Quality__empty_for_16.c":48:34)
#loc49 = loc("CWE398_Poor_Code_Quality__empty_for_16.c":48:33)
#loc50 = loc("CWE398_Poor_Code_Quality__empty_for_16.c":53:9)
#loc51 = loc("CWE398_Poor_Code_Quality__empty_for_16.c":54:9)
#loc52 = loc(fused[#loc1, #loc2])
#loc53 = loc(fused[#loc4, #loc5])
#loc54 = loc(fused[#loc6, #loc7])
#loc55 = loc(fused[#loc8, #loc9])
#loc56 = loc(fused[#loc11, #loc12])
#loc57 = loc(fused[#loc13, #loc14])
#loc58 = loc(fused[#loc16, #loc15])
#loc59 = loc(fused[#loc17, #loc18])
#loc60 = loc(fused[#loc21, #loc20])
#loc61 = loc(fused[#loc24, #loc25])
#loc62 = loc(fused[#loc26, #loc27])
#loc63 = loc(fused[#loc30, #loc31])
#loc64 = loc(fused[#loc32, #loc33])
#loc65 = loc(fused[#loc34, #loc35])
#loc66 = loc(fused[#loc37, #loc38])
#loc67 = loc(fused[#loc39, #loc40])
#loc68 = loc(fused[#loc42, #loc41])
#loc69 = loc(fused[#loc43, #loc44])
#loc70 = loc(fused[#loc46, #loc40])
#loc71 = loc(fused[#loc49, #loc48])
