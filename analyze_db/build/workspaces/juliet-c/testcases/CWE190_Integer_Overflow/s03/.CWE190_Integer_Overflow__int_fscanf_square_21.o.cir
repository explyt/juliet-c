!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.record<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.record<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.record<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc12 = loc("CWE190_Integer_Overflow__int_fscanf_square_21.c":27:21)
#loc13 = loc("CWE190_Integer_Overflow__int_fscanf_square_21.c":27:25)
#loc55 = loc("CWE190_Integer_Overflow__int_fscanf_square_21.c":60:26)
#loc56 = loc("CWE190_Integer_Overflow__int_fscanf_square_21.c":60:30)
#loc101 = loc("CWE190_Integer_Overflow__int_fscanf_square_21.c":94:26)
#loc102 = loc("CWE190_Integer_Overflow__int_fscanf_square_21.c":94:30)
#loc145 = loc("CWE190_Integer_Overflow__int_fscanf_square_21.c":123:25)
#loc146 = loc("CWE190_Integer_Overflow__int_fscanf_square_21.c":123:29)
#true = #cir.bool<true> : !cir.bool
#loc176 = loc(fused[#loc12, #loc13])
#loc192 = loc(fused[#loc55, #loc56])
#loc206 = loc(fused[#loc101, #loc102])
#loc220 = loc(fused[#loc145, #loc146])
!ty__IO_FILE = !cir.record<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_fscanf_square_21.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little", "dlti.mangling_mode" = "e">} {
  cir.func private @__isoc99_fscanf(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i loc(#loc171)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc172)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"%d\00" : !cir.array<!s8i x 3>> : !cir.array<!s8i x 3> {alignment = 1 : i64} loc(#loc5)
  cir.global "private" internal dsolocal @badStatic = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc173)
  cir.func private @printIntLine(!s32i) loc(#loc174)
  cir.func internal private @badSink(%arg0: !s32i loc(fused[#loc12, #loc13])) extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc176)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc14)
    cir.scope {
      %1 = cir.get_global @badStatic : !cir.ptr<!s32i> loc(#loc173)
      %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc17)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc17)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc180)
          %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc23)
          %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc22)
          %7 = cir.binop(mul, %5, %6) nsw : !s32i loc(#loc23)
          cir.store %7, %4 : !s32i, !cir.ptr<!s32i> loc(#loc180)
          %8 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc24)
          cir.call @printIntLine(%8) : (!s32i) -> () loc(#loc25)
        } loc(#loc179)
      } loc(#loc178)
    } loc(#loc177)
    cir.return loc(#loc11)
  } loc(#loc175)
  cir.func no_proto @CWE190_Integer_Overflow__int_fscanf_square_21_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc182)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc30)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc183)
    %2 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc32)
    %3 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc172)
    %4 = cir.load %3 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc33)
    %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc5)
    %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc5)
    %7 = cir.call @__isoc99_fscanf(%4, %6, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s32i>) -> !s32i loc(#loc32)
    %8 = cir.const #cir.int<1> : !s32i loc(#loc34)
    %9 = cir.get_global @badStatic : !cir.ptr<!s32i> loc(#loc173)
    cir.store %8, %9 : !s32i, !cir.ptr<!s32i> loc(#loc184)
    %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc36)
    cir.call @badSink(%10) : (!s32i) -> () loc(#loc37)
    cir.return loc(#loc27)
  } loc(#loc181)
  cir.func no_proto @CWE190_Integer_Overflow__int_fscanf_square_21_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<()>> loc(#loc186)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc40)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<()>> loc(#loc187)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc42)
    %2 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc188)
    cir.call %2() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc44)
    cir.return loc(#loc39)
  } loc(#loc185)
  cir.global "private" internal dsolocal @goodB2G1Static = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc189)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc190)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc50)
  cir.func private @sqrt(!cir.double) -> !cir.double extra(#fn_attr1) loc(#loc51)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc52)
  cir.func internal private @goodB2G1Sink(%arg0: !s32i loc(fused[#loc55, #loc56])) extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc192)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc57)
    cir.scope {
      %1 = cir.get_global @goodB2G1Static : !cir.ptr<!s32i> loc(#loc189)
      %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc60)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc60)
      cir.if %3 {
        %4 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc50)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc50)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc64)
      } else {
        cir.scope {
          %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc67)
          %5 = cir.const #cir.int<2147483647> : !s32i loc(#loc68)
          %6 = cir.unary(minus, %5) nsw : !s32i, !s32i loc(#loc68)
          %7 = cir.const #cir.int<1> : !s32i loc(#loc68)
          %8 = cir.binop(sub, %6, %7) nsw : !s32i loc(#loc68)
          %9 = cir.cmp(gt, %4, %8) : !s32i, !cir.bool loc(#loc196)
          %10 = cir.ternary(%9, true {
            %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc70)
            %12 = cir.abs %11 poison : !s32i loc(#loc71)
            %13 = cir.cast(integral, %12 : !s32i), !s64i loc(#loc71)
            %14 = cir.get_global @sqrt : !cir.ptr<!cir.func<(!cir.double) -> !cir.double>> loc(#loc72)
            %15 = cir.const #cir.int<2147483647> : !s32i loc(#loc73)
            %16 = cir.cast(int_to_float, %15 : !s32i), !cir.double loc(#loc73)
            %17 = cir.call @sqrt(%16) : (!cir.double) -> !cir.double extra(#fn_attr1) loc(#loc72)
            %18 = cir.cast(float_to_int, %17 : !cir.double), !s64i loc(#loc72)
            %19 = cir.cmp(lt, %13, %18) : !s64i, !cir.bool loc(#loc197)
            %20 = cir.ternary(%19, true {
              %21 = cir.const #true loc(#loc69)
              cir.yield %21 : !cir.bool loc(#loc69)
            }, false {
              %21 = cir.const #false loc(#loc69)
              cir.yield %21 : !cir.bool loc(#loc69)
            }) : (!cir.bool) -> !cir.bool loc(#loc69)
            cir.yield %20 : !cir.bool loc(#loc69)
          }, false {
            %11 = cir.const #false loc(#loc69)
            cir.yield %11 : !cir.bool loc(#loc69)
          }) : (!cir.bool) -> !cir.bool loc(#loc69)
          cir.if %10 {
            %11 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc199)
            %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc80)
            %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc79)
            %14 = cir.binop(mul, %12, %13) nsw : !s32i loc(#loc80)
            cir.store %14, %11 : !s32i, !cir.ptr<!s32i> loc(#loc199)
            %15 = cir.load %11 : !cir.ptr<!s32i>, !s32i loc(#loc81)
            cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc82)
          } else {
            %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc52)
            %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc52)
            cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc83)
          } loc(#loc198)
        } loc(#loc195)
      } loc(#loc194)
    } loc(#loc193)
    cir.return loc(#loc54)
  } loc(#loc191)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc201)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc88)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc202)
    %2 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc90)
    %3 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc172)
    %4 = cir.load %3 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc91)
    %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc92)
    %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc92)
    %7 = cir.call @__isoc99_fscanf(%4, %6, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s32i>) -> !s32i loc(#loc90)
    %8 = cir.const #cir.int<0> : !s32i loc(#loc93)
    %9 = cir.get_global @goodB2G1Static : !cir.ptr<!s32i> loc(#loc189)
    cir.store %8, %9 : !s32i, !cir.ptr<!s32i> loc(#loc203)
    %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc95)
    cir.call @goodB2G1Sink(%10) : (!s32i) -> () loc(#loc96)
    cir.return loc(#loc85)
  } loc(#loc200)
  cir.global "private" internal dsolocal @goodB2G2Static = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc204)
  cir.func internal private @goodB2G2Sink(%arg0: !s32i loc(fused[#loc101, #loc102])) extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc206)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc103)
    cir.scope {
      %1 = cir.get_global @goodB2G2Static : !cir.ptr<!s32i> loc(#loc204)
      %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc106)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc106)
      cir.if %3 {
        cir.scope {
          %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc110)
          %5 = cir.const #cir.int<2147483647> : !s32i loc(#loc111)
          %6 = cir.unary(minus, %5) nsw : !s32i, !s32i loc(#loc111)
          %7 = cir.const #cir.int<1> : !s32i loc(#loc111)
          %8 = cir.binop(sub, %6, %7) nsw : !s32i loc(#loc111)
          %9 = cir.cmp(gt, %4, %8) : !s32i, !cir.bool loc(#loc210)
          %10 = cir.ternary(%9, true {
            %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc113)
            %12 = cir.abs %11 poison : !s32i loc(#loc114)
            %13 = cir.cast(integral, %12 : !s32i), !s64i loc(#loc114)
            %14 = cir.get_global @sqrt : !cir.ptr<!cir.func<(!cir.double) -> !cir.double>> loc(#loc115)
            %15 = cir.const #cir.int<2147483647> : !s32i loc(#loc116)
            %16 = cir.cast(int_to_float, %15 : !s32i), !cir.double loc(#loc116)
            %17 = cir.call @sqrt(%16) : (!cir.double) -> !cir.double extra(#fn_attr1) loc(#loc115)
            %18 = cir.cast(float_to_int, %17 : !cir.double), !s64i loc(#loc115)
            %19 = cir.cmp(lt, %13, %18) : !s64i, !cir.bool loc(#loc211)
            %20 = cir.ternary(%19, true {
              %21 = cir.const #true loc(#loc112)
              cir.yield %21 : !cir.bool loc(#loc112)
            }, false {
              %21 = cir.const #false loc(#loc112)
              cir.yield %21 : !cir.bool loc(#loc112)
            }) : (!cir.bool) -> !cir.bool loc(#loc112)
            cir.yield %20 : !cir.bool loc(#loc112)
          }, false {
            %11 = cir.const #false loc(#loc112)
            cir.yield %11 : !cir.bool loc(#loc112)
          }) : (!cir.bool) -> !cir.bool loc(#loc112)
          cir.if %10 {
            %11 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc213)
            %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc123)
            %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc122)
            %14 = cir.binop(mul, %12, %13) nsw : !s32i loc(#loc123)
            cir.store %14, %11 : !s32i, !cir.ptr<!s32i> loc(#loc213)
            %15 = cir.load %11 : !cir.ptr<!s32i>, !s32i loc(#loc124)
            cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc125)
          } else {
            %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc126)
            %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc126)
            cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc127)
          } loc(#loc212)
        } loc(#loc209)
      } loc(#loc208)
    } loc(#loc207)
    cir.return loc(#loc100)
  } loc(#loc205)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc215)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc132)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc216)
    %2 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc134)
    %3 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc172)
    %4 = cir.load %3 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc135)
    %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc136)
    %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc136)
    %7 = cir.call @__isoc99_fscanf(%4, %6, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s32i>) -> !s32i loc(#loc134)
    %8 = cir.const #cir.int<1> : !s32i loc(#loc137)
    %9 = cir.get_global @goodB2G2Static : !cir.ptr<!s32i> loc(#loc204)
    cir.store %8, %9 : !s32i, !cir.ptr<!s32i> loc(#loc217)
    %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc139)
    cir.call @goodB2G2Sink(%10) : (!s32i) -> () loc(#loc140)
    cir.return loc(#loc129)
  } loc(#loc214)
  cir.global "private" internal dsolocal @goodG2BStatic = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc218)
  cir.func internal private @goodG2BSink(%arg0: !s32i loc(fused[#loc145, #loc146])) extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc220)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc147)
    cir.scope {
      %1 = cir.get_global @goodG2BStatic : !cir.ptr<!s32i> loc(#loc218)
      %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc150)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc150)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc224)
          %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc156)
          %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc155)
          %7 = cir.binop(mul, %5, %6) nsw : !s32i loc(#loc156)
          cir.store %7, %4 : !s32i, !cir.ptr<!s32i> loc(#loc224)
          %8 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc157)
          cir.call @printIntLine(%8) : (!s32i) -> () loc(#loc158)
        } loc(#loc223)
      } loc(#loc222)
    } loc(#loc221)
    cir.return loc(#loc144)
  } loc(#loc219)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc226)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc163)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc227)
    %2 = cir.const #cir.int<2> : !s32i loc(#loc165)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc228)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc167)
    %4 = cir.get_global @goodG2BStatic : !cir.ptr<!s32i> loc(#loc218)
    cir.store %3, %4 : !s32i, !cir.ptr<!s32i> loc(#loc229)
    %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc169)
    cir.call @goodG2BSink(%5) : (!s32i) -> () loc(#loc170)
    cir.return loc(#loc160)
  } loc(#loc225)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_fscanf_square_21.c":0:0)
#loc1 = loc("/usr/include/stdio.h":463:1)
#loc2 = loc("/usr/include/stdio.h":465:33)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("CWE190_Integer_Overflow__int_fscanf_square_21.c":45:19)
#loc6 = loc("CWE190_Integer_Overflow__int_fscanf_square_21.c":25:1)
#loc7 = loc("CWE190_Integer_Overflow__int_fscanf_square_21.c":25:24)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc9 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc10 = loc("CWE190_Integer_Overflow__int_fscanf_square_21.c":27:1)
#loc11 = loc("CWE190_Integer_Overflow__int_fscanf_square_21.c":37:1)
#loc14 = loc("CWE190_Integer_Overflow__int_fscanf_square_21.c":28:1)
#loc15 = loc("CWE190_Integer_Overflow__int_fscanf_square_21.c":29:5)
#loc16 = loc("CWE190_Integer_Overflow__int_fscanf_square_21.c":36:5)
#loc17 = loc("CWE190_Integer_Overflow__int_fscanf_square_21.c":29:8)
#loc18 = loc("CWE190_Integer_Overflow__int_fscanf_square_21.c":30:5)
#loc19 = loc("CWE190_Integer_Overflow__int_fscanf_square_21.c":31:9)
#loc20 = loc("CWE190_Integer_Overflow__int_fscanf_square_21.c":35:9)
#loc21 = loc("CWE190_Integer_Overflow__int_fscanf_square_21.c":33:13)
#loc22 = loc("CWE190_Integer_Overflow__int_fscanf_square_21.c":33:33)
#loc23 = loc("CWE190_Integer_Overflow__int_fscanf_square_21.c":33:26)
#loc24 = loc("CWE190_Integer_Overflow__int_fscanf_square_21.c":34:26)
#loc25 = loc("CWE190_Integer_Overflow__int_fscanf_square_21.c":34:13)
#loc26 = loc("CWE190_Integer_Overflow__int_fscanf_square_21.c":39:1)
#loc27 = loc("CWE190_Integer_Overflow__int_fscanf_square_21.c":48:1)
#loc28 = loc("CWE190_Integer_Overflow__int_fscanf_square_21.c":41:5)
#loc29 = loc("CWE190_Integer_Overflow__int_fscanf_square_21.c":41:9)
#loc30 = loc("CWE190_Integer_Overflow__int_fscanf_square_21.c":43:12)
#loc31 = loc("CWE190_Integer_Overflow__int_fscanf_square_21.c":43:5)
#loc32 = loc("CWE190_Integer_Overflow__int_fscanf_square_21.c":45:5)
#loc33 = loc("CWE190_Integer_Overflow__int_fscanf_square_21.c":45:12)
#loc34 = loc("CWE190_Integer_Overflow__int_fscanf_square_21.c":46:17)
#loc35 = loc("CWE190_Integer_Overflow__int_fscanf_square_21.c":46:5)
#loc36 = loc("CWE190_Integer_Overflow__int_fscanf_square_21.c":47:13)
#loc37 = loc("CWE190_Integer_Overflow__int_fscanf_square_21.c":47:5)
#loc38 = loc("CWE190_Integer_Overflow__int_fscanf_square_21.c":146:1)
#loc39 = loc("CWE190_Integer_Overflow__int_fscanf_square_21.c":151:1)
#loc40 = loc("CWE190_Integer_Overflow__int_fscanf_square_21.c":148:5)
#loc41 = loc("CWE190_Integer_Overflow__int_fscanf_square_21.c":148:14)
#loc42 = loc("CWE190_Integer_Overflow__int_fscanf_square_21.c":149:5)
#loc43 = loc("CWE190_Integer_Overflow__int_fscanf_square_21.c":149:14)
#loc44 = loc("CWE190_Integer_Overflow__int_fscanf_square_21.c":150:5)
#loc45 = loc("CWE190_Integer_Overflow__int_fscanf_square_21.c":150:13)
#loc46 = loc("CWE190_Integer_Overflow__int_fscanf_square_21.c":55:1)
#loc47 = loc("CWE190_Integer_Overflow__int_fscanf_square_21.c":55:29)
#loc48 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc49 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc50 = loc("CWE190_Integer_Overflow__int_fscanf_square_21.c":65:19)
#loc51 = loc("/usr/include/x86_64-linux-gnu/bits/mathcalls.h":143:1)
#loc52 = loc("CWE190_Integer_Overflow__int_fscanf_square_21.c":77:23)
#loc53 = loc("CWE190_Integer_Overflow__int_fscanf_square_21.c":60:1)
#loc54 = loc("CWE190_Integer_Overflow__int_fscanf_square_21.c":80:1)
#loc57 = loc("CWE190_Integer_Overflow__int_fscanf_square_21.c":61:1)
#loc58 = loc("CWE190_Integer_Overflow__int_fscanf_square_21.c":62:5)
#loc59 = loc("CWE190_Integer_Overflow__int_fscanf_square_21.c":79:5)
#loc60 = loc("CWE190_Integer_Overflow__int_fscanf_square_21.c":62:8)
#loc61 = loc("CWE190_Integer_Overflow__int_fscanf_square_21.c":63:5)
#loc62 = loc("CWE190_Integer_Overflow__int_fscanf_square_21.c":66:5)
#loc63 = loc("CWE190_Integer_Overflow__int_fscanf_square_21.c":68:5)
#loc64 = loc("CWE190_Integer_Overflow__int_fscanf_square_21.c":65:9)
#loc65 = loc("CWE190_Integer_Overflow__int_fscanf_square_21.c":70:9)
#loc66 = loc("CWE190_Integer_Overflow__int_fscanf_square_21.c":78:9)
#loc67 = loc("CWE190_Integer_Overflow__int_fscanf_square_21.c":70:13)
#loc68 = loc("CWE190_Integer_Overflow__int_fscanf_square_21.c":70:20)
#loc69 = loc("CWE190_Integer_Overflow__int_fscanf_square_21.c":70:28)
#loc70 = loc("CWE190_Integer_Overflow__int_fscanf_square_21.c":70:35)
#loc71 = loc("CWE190_Integer_Overflow__int_fscanf_square_21.c":70:31)
#loc72 = loc("CWE190_Integer_Overflow__int_fscanf_square_21.c":70:49)
#loc73 = loc("CWE190_Integer_Overflow__int_fscanf_square_21.c":70:62)
#loc74 = loc("CWE190_Integer_Overflow__int_fscanf_square_21.c":70:69)
#loc75 = loc("CWE190_Integer_Overflow__int_fscanf_square_21.c":71:9)
#loc76 = loc("CWE190_Integer_Overflow__int_fscanf_square_21.c":74:9)
#loc77 = loc("CWE190_Integer_Overflow__int_fscanf_square_21.c":76:9)
#loc78 = loc("CWE190_Integer_Overflow__int_fscanf_square_21.c":72:13)
#loc79 = loc("CWE190_Integer_Overflow__int_fscanf_square_21.c":72:33)
#loc80 = loc("CWE190_Integer_Overflow__int_fscanf_square_21.c":72:26)
#loc81 = loc("CWE190_Integer_Overflow__int_fscanf_square_21.c":73:26)
#loc82 = loc("CWE190_Integer_Overflow__int_fscanf_square_21.c":73:13)
#loc83 = loc("CWE190_Integer_Overflow__int_fscanf_square_21.c":77:13)
#loc84 = loc("CWE190_Integer_Overflow__int_fscanf_square_21.c":82:1)
#loc85 = loc("CWE190_Integer_Overflow__int_fscanf_square_21.c":91:1)
#loc86 = loc("CWE190_Integer_Overflow__int_fscanf_square_21.c":84:5)
#loc87 = loc("CWE190_Integer_Overflow__int_fscanf_square_21.c":84:9)
#loc88 = loc("CWE190_Integer_Overflow__int_fscanf_square_21.c":86:12)
#loc89 = loc("CWE190_Integer_Overflow__int_fscanf_square_21.c":86:5)
#loc90 = loc("CWE190_Integer_Overflow__int_fscanf_square_21.c":88:5)
#loc91 = loc("CWE190_Integer_Overflow__int_fscanf_square_21.c":88:12)
#loc92 = loc("CWE190_Integer_Overflow__int_fscanf_square_21.c":88:19)
#loc93 = loc("CWE190_Integer_Overflow__int_fscanf_square_21.c":89:22)
#loc94 = loc("CWE190_Integer_Overflow__int_fscanf_square_21.c":89:5)
#loc95 = loc("CWE190_Integer_Overflow__int_fscanf_square_21.c":90:18)
#loc96 = loc("CWE190_Integer_Overflow__int_fscanf_square_21.c":90:5)
#loc97 = loc("CWE190_Integer_Overflow__int_fscanf_square_21.c":56:1)
#loc98 = loc("CWE190_Integer_Overflow__int_fscanf_square_21.c":56:29)
#loc99 = loc("CWE190_Integer_Overflow__int_fscanf_square_21.c":94:1)
#loc100 = loc("CWE190_Integer_Overflow__int_fscanf_square_21.c":109:1)
#loc103 = loc("CWE190_Integer_Overflow__int_fscanf_square_21.c":95:1)
#loc104 = loc("CWE190_Integer_Overflow__int_fscanf_square_21.c":96:5)
#loc105 = loc("CWE190_Integer_Overflow__int_fscanf_square_21.c":108:5)
#loc106 = loc("CWE190_Integer_Overflow__int_fscanf_square_21.c":96:8)
#loc107 = loc("CWE190_Integer_Overflow__int_fscanf_square_21.c":97:5)
#loc108 = loc("CWE190_Integer_Overflow__int_fscanf_square_21.c":99:9)
#loc109 = loc("CWE190_Integer_Overflow__int_fscanf_square_21.c":107:9)
#loc110 = loc("CWE190_Integer_Overflow__int_fscanf_square_21.c":99:13)
#loc111 = loc("CWE190_Integer_Overflow__int_fscanf_square_21.c":99:20)
#loc112 = loc("CWE190_Integer_Overflow__int_fscanf_square_21.c":99:28)
#loc113 = loc("CWE190_Integer_Overflow__int_fscanf_square_21.c":99:35)
#loc114 = loc("CWE190_Integer_Overflow__int_fscanf_square_21.c":99:31)
#loc115 = loc("CWE190_Integer_Overflow__int_fscanf_square_21.c":99:49)
#loc116 = loc("CWE190_Integer_Overflow__int_fscanf_square_21.c":99:62)
#loc117 = loc("CWE190_Integer_Overflow__int_fscanf_square_21.c":99:69)
#loc118 = loc("CWE190_Integer_Overflow__int_fscanf_square_21.c":100:9)
#loc119 = loc("CWE190_Integer_Overflow__int_fscanf_square_21.c":103:9)
#loc120 = loc("CWE190_Integer_Overflow__int_fscanf_square_21.c":105:9)
#loc121 = loc("CWE190_Integer_Overflow__int_fscanf_square_21.c":101:13)
#loc122 = loc("CWE190_Integer_Overflow__int_fscanf_square_21.c":101:33)
#loc123 = loc("CWE190_Integer_Overflow__int_fscanf_square_21.c":101:26)
#loc124 = loc("CWE190_Integer_Overflow__int_fscanf_square_21.c":102:26)
#loc125 = loc("CWE190_Integer_Overflow__int_fscanf_square_21.c":102:13)
#loc126 = loc("CWE190_Integer_Overflow__int_fscanf_square_21.c":106:23)
#loc127 = loc("CWE190_Integer_Overflow__int_fscanf_square_21.c":106:13)
#loc128 = loc("CWE190_Integer_Overflow__int_fscanf_square_21.c":111:1)
#loc129 = loc("CWE190_Integer_Overflow__int_fscanf_square_21.c":120:1)
#loc130 = loc("CWE190_Integer_Overflow__int_fscanf_square_21.c":113:5)
#loc131 = loc("CWE190_Integer_Overflow__int_fscanf_square_21.c":113:9)
#loc132 = loc("CWE190_Integer_Overflow__int_fscanf_square_21.c":115:12)
#loc133 = loc("CWE190_Integer_Overflow__int_fscanf_square_21.c":115:5)
#loc134 = loc("CWE190_Integer_Overflow__int_fscanf_square_21.c":117:5)
#loc135 = loc("CWE190_Integer_Overflow__int_fscanf_square_21.c":117:12)
#loc136 = loc("CWE190_Integer_Overflow__int_fscanf_square_21.c":117:19)
#loc137 = loc("CWE190_Integer_Overflow__int_fscanf_square_21.c":118:22)
#loc138 = loc("CWE190_Integer_Overflow__int_fscanf_square_21.c":118:5)
#loc139 = loc("CWE190_Integer_Overflow__int_fscanf_square_21.c":119:18)
#loc140 = loc("CWE190_Integer_Overflow__int_fscanf_square_21.c":119:5)
#loc141 = loc("CWE190_Integer_Overflow__int_fscanf_square_21.c":57:1)
#loc142 = loc("CWE190_Integer_Overflow__int_fscanf_square_21.c":57:28)
#loc143 = loc("CWE190_Integer_Overflow__int_fscanf_square_21.c":123:1)
#loc144 = loc("CWE190_Integer_Overflow__int_fscanf_square_21.c":133:1)
#loc147 = loc("CWE190_Integer_Overflow__int_fscanf_square_21.c":124:1)
#loc148 = loc("CWE190_Integer_Overflow__int_fscanf_square_21.c":125:5)
#loc149 = loc("CWE190_Integer_Overflow__int_fscanf_square_21.c":132:5)
#loc150 = loc("CWE190_Integer_Overflow__int_fscanf_square_21.c":125:8)
#loc151 = loc("CWE190_Integer_Overflow__int_fscanf_square_21.c":126:5)
#loc152 = loc("CWE190_Integer_Overflow__int_fscanf_square_21.c":127:9)
#loc153 = loc("CWE190_Integer_Overflow__int_fscanf_square_21.c":131:9)
#loc154 = loc("CWE190_Integer_Overflow__int_fscanf_square_21.c":129:13)
#loc155 = loc("CWE190_Integer_Overflow__int_fscanf_square_21.c":129:33)
#loc156 = loc("CWE190_Integer_Overflow__int_fscanf_square_21.c":129:26)
#loc157 = loc("CWE190_Integer_Overflow__int_fscanf_square_21.c":130:26)
#loc158 = loc("CWE190_Integer_Overflow__int_fscanf_square_21.c":130:13)
#loc159 = loc("CWE190_Integer_Overflow__int_fscanf_square_21.c":135:1)
#loc160 = loc("CWE190_Integer_Overflow__int_fscanf_square_21.c":144:1)
#loc161 = loc("CWE190_Integer_Overflow__int_fscanf_square_21.c":137:5)
#loc162 = loc("CWE190_Integer_Overflow__int_fscanf_square_21.c":137:9)
#loc163 = loc("CWE190_Integer_Overflow__int_fscanf_square_21.c":139:12)
#loc164 = loc("CWE190_Integer_Overflow__int_fscanf_square_21.c":139:5)
#loc165 = loc("CWE190_Integer_Overflow__int_fscanf_square_21.c":141:12)
#loc166 = loc("CWE190_Integer_Overflow__int_fscanf_square_21.c":141:5)
#loc167 = loc("CWE190_Integer_Overflow__int_fscanf_square_21.c":142:21)
#loc168 = loc("CWE190_Integer_Overflow__int_fscanf_square_21.c":142:5)
#loc169 = loc("CWE190_Integer_Overflow__int_fscanf_square_21.c":143:17)
#loc170 = loc("CWE190_Integer_Overflow__int_fscanf_square_21.c":143:5)
#loc171 = loc(fused[#loc1, #loc2])
#loc172 = loc(fused[#loc3, #loc4])
#loc173 = loc(fused[#loc6, #loc7])
#loc174 = loc(fused[#loc8, #loc9])
#loc175 = loc(fused[#loc10, #loc11])
#loc177 = loc(fused[#loc15, #loc16])
#loc178 = loc(fused[#loc18, #loc16])
#loc179 = loc(fused[#loc19, #loc20])
#loc180 = loc(fused[#loc21, #loc22])
#loc181 = loc(fused[#loc26, #loc27])
#loc182 = loc(fused[#loc28, #loc29])
#loc183 = loc(fused[#loc31, #loc30])
#loc184 = loc(fused[#loc35, #loc34])
#loc185 = loc(fused[#loc38, #loc39])
#loc186 = loc(fused[#loc40, #loc41])
#loc187 = loc(fused[#loc42, #loc43])
#loc188 = loc(fused[#loc44, #loc45])
#loc189 = loc(fused[#loc46, #loc47])
#loc190 = loc(fused[#loc48, #loc49])
#loc191 = loc(fused[#loc53, #loc54])
#loc193 = loc(fused[#loc58, #loc59])
#loc194 = loc(fused[#loc61, #loc62, #loc63, #loc59])
#loc195 = loc(fused[#loc65, #loc66])
#loc196 = loc(fused[#loc67, #loc68])
#loc197 = loc(fused[#loc71, #loc74])
#loc198 = loc(fused[#loc75, #loc76, #loc77, #loc66])
#loc199 = loc(fused[#loc78, #loc79])
#loc200 = loc(fused[#loc84, #loc85])
#loc201 = loc(fused[#loc86, #loc87])
#loc202 = loc(fused[#loc89, #loc88])
#loc203 = loc(fused[#loc94, #loc93])
#loc204 = loc(fused[#loc97, #loc98])
#loc205 = loc(fused[#loc99, #loc100])
#loc207 = loc(fused[#loc104, #loc105])
#loc208 = loc(fused[#loc107, #loc105])
#loc209 = loc(fused[#loc108, #loc109])
#loc210 = loc(fused[#loc110, #loc111])
#loc211 = loc(fused[#loc114, #loc117])
#loc212 = loc(fused[#loc118, #loc119, #loc120, #loc109])
#loc213 = loc(fused[#loc121, #loc122])
#loc214 = loc(fused[#loc128, #loc129])
#loc215 = loc(fused[#loc130, #loc131])
#loc216 = loc(fused[#loc133, #loc132])
#loc217 = loc(fused[#loc138, #loc137])
#loc218 = loc(fused[#loc141, #loc142])
#loc219 = loc(fused[#loc143, #loc144])
#loc221 = loc(fused[#loc148, #loc149])
#loc222 = loc(fused[#loc151, #loc149])
#loc223 = loc(fused[#loc152, #loc153])
#loc224 = loc(fused[#loc154, #loc155])
#loc225 = loc(fused[#loc159, #loc160])
#loc226 = loc(fused[#loc161, #loc162])
#loc227 = loc(fused[#loc164, #loc163])
#loc228 = loc(fused[#loc166, #loc165])
#loc229 = loc(fused[#loc168, #loc167])
