!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc7 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_21.c":24:22)
#loc8 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_21.c":24:26)
#loc14 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_21.c":29:16)
#loc52 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_21.c":57:27)
#loc53 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_21.c":57:31)
#loc90 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_21.c":87:27)
#loc91 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_21.c":87:31)
#loc124 = loc(fused[#loc7, #loc8])
#loc143 = loc(fused[#loc52, #loc53])
#loc157 = loc(fused[#loc90, #loc91])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE197_Numeric_Truncation_Error/s01/CWE197_Numeric_Truncation_Error__int_rand_to_char_21.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.global "private" internal dsolocal @badStatic = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc121)
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc122)
  cir.func internal private @badSource(%arg0: !s32i loc(fused[#loc7, #loc8])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc124)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc6)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc9)
    cir.br ^bb1 loc(#loc125)
  ^bb1:  // pred: ^bb0
    %2 = cir.get_global @badStatic : !cir.ptr<!s32i> loc(#loc121)
    %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc12)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc12)
    cir.brcond %4 ^bb2, ^bb7 loc(#loc126)
  ^bb2:  // pred: ^bb1
    %5 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc14)
    %6 = cir.const #cir.int<1> : !s32i loc(#loc14)
    %7 = cir.binop(and, %5, %6) : !s32i loc(#loc14)
    %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc14)
    cir.brcond %8 ^bb3, ^bb4 loc(#loc14)
  ^bb3:  // pred: ^bb2
    %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc14)
    %10 = cir.cast(integral, %9 : !s32i), !u32i loc(#loc14)
    %11 = cir.const #cir.int<30> : !s32i loc(#loc14)
    %12 = cir.shift(left, %10 : !u32i, %11 : !s32i) -> !u32i loc(#loc14)
    %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc14)
    %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc14)
    %15 = cir.const #cir.int<15> : !s32i loc(#loc14)
    %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc14)
    %17 = cir.binop(xor, %12, %16) : !u32i loc(#loc14)
    %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc14)
    %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc14)
    %20 = cir.binop(xor, %17, %19) : !u32i loc(#loc14)
    cir.br ^bb5(%20 : !u32i) loc(#loc14)
  ^bb4:  // pred: ^bb2
    %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc14)
    %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc14)
    %23 = cir.const #cir.int<30> : !s32i loc(#loc14)
    %24 = cir.shift(left, %22 : !u32i, %23 : !s32i) -> !u32i loc(#loc14)
    %25 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc14)
    %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc14)
    %27 = cir.const #cir.int<15> : !s32i loc(#loc14)
    %28 = cir.shift(left, %26 : !u32i, %27 : !s32i) -> !u32i loc(#loc14)
    %29 = cir.binop(xor, %24, %28) : !u32i loc(#loc14)
    %30 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc14)
    %31 = cir.cast(integral, %30 : !s32i), !u32i loc(#loc14)
    %32 = cir.binop(xor, %29, %31) : !u32i loc(#loc14)
    %33 = cir.unary(minus, %32) : !u32i, !u32i loc(#loc14)
    %34 = cir.const #cir.int<1> : !s32i loc(#loc14)
    %35 = cir.cast(integral, %34 : !s32i), !u32i loc(#loc14)
    %36 = cir.binop(sub, %33, %35) : !u32i loc(#loc14)
    cir.br ^bb5(%36 : !u32i) loc(#loc14)
  ^bb5(%37: !u32i loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_21.c":29:16)):  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc14)
  ^bb6:  // pred: ^bb5
    %38 = cir.cast(integral, %37 : !u32i), !s32i loc(#loc14)
    cir.store %38, %0 : !s32i, !cir.ptr<!s32i> loc(#loc127)
    cir.br ^bb7 loc(#loc11)
  ^bb7:  // 2 preds: ^bb1, ^bb6
    cir.br ^bb8 loc(#loc11)
  ^bb8:  // pred: ^bb7
    %39 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc16)
    cir.store %39, %1 : !s32i, !cir.ptr<!s32i> loc(#loc128)
    %40 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc128)
    cir.return %40 : !s32i loc(#loc128)
  } loc(#loc123)
  cir.func private @printHexCharLine(!s8i) loc(#loc129)
  cir.func no_proto @CWE197_Numeric_Truncation_Error__int_rand_to_char_21_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["charData", init] {alignment = 1 : i64} loc(#loc131)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc132)
    %2 = cir.const #cir.int<1> : !s32i loc(#loc26)
    %3 = cir.unary(minus, %2) : !s32i, !s32i loc(#loc27)
    cir.store %3, %1 : !s32i, !cir.ptr<!s32i> loc(#loc133)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc29)
    %5 = cir.get_global @badStatic : !cir.ptr<!s32i> loc(#loc121)
    cir.store %4, %5 : !s32i, !cir.ptr<!s32i> loc(#loc134)
    %6 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc31)
    %7 = cir.call @badSource(%6) : (!s32i) -> !s32i loc(#loc32)
    cir.store %7, %1 : !s32i, !cir.ptr<!s32i> loc(#loc135)
    cir.br ^bb1 loc(#loc136)
  ^bb1:  // pred: ^bb0
    %8 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc23)
    %9 = cir.cast(integral, %8 : !s32i), !s8i loc(#loc23)
    cir.store %9, %0 : !s8i, !cir.ptr<!s8i> loc(#loc131)
    %10 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc37)
    cir.call @printHexCharLine(%10) : (!s8i) -> () loc(#loc38)
    cir.br ^bb2 loc(#loc36)
  ^bb2:  // pred: ^bb1
    cir.return loc(#loc21)
  } loc(#loc130)
  cir.func no_proto @CWE197_Numeric_Truncation_Error__int_rand_to_char_21_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc138)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc41)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc139)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc43)
    cir.return loc(#loc40)
  } loc(#loc137)
  cir.global "private" internal dsolocal @goodG2B1Static = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc140)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc141)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc49)
  cir.func internal private @goodG2B1Source(%arg0: !s32i loc(fused[#loc52, #loc53])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc143)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc51)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc54)
    cir.br ^bb1 loc(#loc144)
  ^bb1:  // pred: ^bb0
    %2 = cir.get_global @goodG2B1Static : !cir.ptr<!s32i> loc(#loc140)
    %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc57)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc57)
    cir.brcond %4 ^bb2, ^bb3 loc(#loc145)
  ^bb2:  // pred: ^bb1
    %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc49)
    %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc49)
    cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc61)
    cir.br ^bb4 loc(#loc59)
  ^bb3:  // pred: ^bb1
    %7 = cir.const #cir.int<127> : !s32i loc(#loc62)
    %8 = cir.const #cir.int<5> : !s32i loc(#loc63)
    %9 = cir.binop(sub, %7, %8) nsw : !s32i loc(#loc62)
    cir.store %9, %0 : !s32i, !cir.ptr<!s32i> loc(#loc146)
    cir.br ^bb4 loc(#loc56)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc56)
  ^bb5:  // pred: ^bb4
    %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc65)
    cir.store %10, %1 : !s32i, !cir.ptr<!s32i> loc(#loc147)
    %11 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc147)
    cir.return %11 : !s32i loc(#loc147)
  } loc(#loc142)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["charData", init] {alignment = 1 : i64} loc(#loc149)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc150)
    %2 = cir.const #cir.int<1> : !s32i loc(#loc73)
    %3 = cir.unary(minus, %2) : !s32i, !s32i loc(#loc74)
    cir.store %3, %1 : !s32i, !cir.ptr<!s32i> loc(#loc151)
    %4 = cir.const #cir.int<0> : !s32i loc(#loc76)
    %5 = cir.get_global @goodG2B1Static : !cir.ptr<!s32i> loc(#loc140)
    cir.store %4, %5 : !s32i, !cir.ptr<!s32i> loc(#loc152)
    %6 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc78)
    %7 = cir.call @goodG2B1Source(%6) : (!s32i) -> !s32i loc(#loc79)
    cir.store %7, %1 : !s32i, !cir.ptr<!s32i> loc(#loc153)
    cir.br ^bb1 loc(#loc154)
  ^bb1:  // pred: ^bb0
    %8 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc70)
    %9 = cir.cast(integral, %8 : !s32i), !s8i loc(#loc70)
    cir.store %9, %0 : !s8i, !cir.ptr<!s8i> loc(#loc149)
    %10 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc84)
    cir.call @printHexCharLine(%10) : (!s8i) -> () loc(#loc85)
    cir.br ^bb2 loc(#loc83)
  ^bb2:  // pred: ^bb1
    cir.return loc(#loc68)
  } loc(#loc148)
  cir.global "private" internal dsolocal @goodG2B2Static = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc155)
  cir.func internal private @goodG2B2Source(%arg0: !s32i loc(fused[#loc90, #loc91])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc157)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc89)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc92)
    cir.br ^bb1 loc(#loc158)
  ^bb1:  // pred: ^bb0
    %2 = cir.get_global @goodG2B2Static : !cir.ptr<!s32i> loc(#loc155)
    %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc95)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc95)
    cir.brcond %4 ^bb2, ^bb3 loc(#loc159)
  ^bb2:  // pred: ^bb1
    %5 = cir.const #cir.int<127> : !s32i loc(#loc97)
    %6 = cir.const #cir.int<5> : !s32i loc(#loc98)
    %7 = cir.binop(sub, %5, %6) nsw : !s32i loc(#loc97)
    cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc160)
    cir.br ^bb3 loc(#loc94)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc94)
  ^bb4:  // pred: ^bb3
    %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc100)
    cir.store %8, %1 : !s32i, !cir.ptr<!s32i> loc(#loc161)
    %9 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc161)
    cir.return %9 : !s32i loc(#loc161)
  } loc(#loc156)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["charData", init] {alignment = 1 : i64} loc(#loc163)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc164)
    %2 = cir.const #cir.int<1> : !s32i loc(#loc108)
    %3 = cir.unary(minus, %2) : !s32i, !s32i loc(#loc109)
    cir.store %3, %1 : !s32i, !cir.ptr<!s32i> loc(#loc165)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc111)
    %5 = cir.get_global @goodG2B2Static : !cir.ptr<!s32i> loc(#loc155)
    cir.store %4, %5 : !s32i, !cir.ptr<!s32i> loc(#loc166)
    %6 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc113)
    %7 = cir.call @goodG2B2Source(%6) : (!s32i) -> !s32i loc(#loc114)
    cir.store %7, %1 : !s32i, !cir.ptr<!s32i> loc(#loc167)
    cir.br ^bb1 loc(#loc168)
  ^bb1:  // pred: ^bb0
    %8 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc105)
    %9 = cir.cast(integral, %8 : !s32i), !s8i loc(#loc105)
    cir.store %9, %0 : !s8i, !cir.ptr<!s8i> loc(#loc163)
    %10 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc119)
    cir.call @printHexCharLine(%10) : (!s8i) -> () loc(#loc120)
    cir.br ^bb2 loc(#loc118)
  ^bb2:  // pred: ^bb1
    cir.return loc(#loc103)
  } loc(#loc162)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE197_Numeric_Truncation_Error/s01/CWE197_Numeric_Truncation_Error__int_rand_to_char_21.c":0:0)
#loc1 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_21.c":22:1)
#loc2 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_21.c":22:24)
#loc3 = loc("/usr/include/stdlib.h":573:1)
#loc4 = loc("/usr/include/stdlib.h":573:24)
#loc5 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_21.c":24:1)
#loc6 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_21.c":32:1)
#loc9 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_21.c":25:1)
#loc10 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_21.c":26:5)
#loc11 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_21.c":30:5)
#loc12 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_21.c":26:8)
#loc13 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_21.c":27:5)
#loc15 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_21.c":29:9)
#loc16 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_21.c":31:12)
#loc17 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_21.c":31:5)
#loc18 = loc("../../../testcasesupport/std_testcase_io.h":30:1)
#loc19 = loc("../../../testcasesupport/std_testcase_io.h":30:35)
#loc20 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_21.c":34:1)
#loc21 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_21.c":46:1)
#loc22 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_21.c":43:9)
#loc23 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_21.c":43:31)
#loc24 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_21.c":36:5)
#loc25 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_21.c":36:9)
#loc26 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_21.c":38:13)
#loc27 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_21.c":38:12)
#loc28 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_21.c":38:5)
#loc29 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_21.c":39:17)
#loc30 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_21.c":39:5)
#loc31 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_21.c":40:22)
#loc32 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_21.c":40:12)
#loc33 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_21.c":40:5)
#loc34 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_21.c":40:26)
#loc35 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_21.c":41:5)
#loc36 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_21.c":45:5)
#loc37 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_21.c":44:26)
#loc38 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_21.c":44:9)
#loc39 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_21.c":111:1)
#loc40 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_21.c":115:1)
#loc41 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_21.c":113:5)
#loc42 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_21.c":113:14)
#loc43 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_21.c":114:5)
#loc44 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_21.c":114:14)
#loc45 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_21.c":53:1)
#loc46 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_21.c":53:29)
#loc47 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc48 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc49 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_21.c":62:19)
#loc50 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_21.c":57:1)
#loc51 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_21.c":70:1)
#loc54 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_21.c":58:1)
#loc55 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_21.c":59:5)
#loc56 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_21.c":68:5)
#loc57 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_21.c":59:8)
#loc58 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_21.c":60:5)
#loc59 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_21.c":63:5)
#loc60 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_21.c":65:5)
#loc61 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_21.c":62:9)
#loc62 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_21.c":67:16)
#loc63 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_21.c":67:25)
#loc64 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_21.c":67:9)
#loc65 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_21.c":69:12)
#loc66 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_21.c":69:5)
#loc67 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_21.c":72:1)
#loc68 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_21.c":84:1)
#loc69 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_21.c":81:9)
#loc70 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_21.c":81:31)
#loc71 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_21.c":74:5)
#loc72 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_21.c":74:9)
#loc73 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_21.c":76:13)
#loc74 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_21.c":76:12)
#loc75 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_21.c":76:5)
#loc76 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_21.c":77:22)
#loc77 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_21.c":77:5)
#loc78 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_21.c":78:27)
#loc79 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_21.c":78:12)
#loc80 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_21.c":78:5)
#loc81 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_21.c":78:31)
#loc82 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_21.c":79:5)
#loc83 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_21.c":83:5)
#loc84 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_21.c":82:26)
#loc85 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_21.c":82:9)
#loc86 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_21.c":54:1)
#loc87 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_21.c":54:29)
#loc88 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_21.c":87:1)
#loc89 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_21.c":95:1)
#loc92 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_21.c":88:1)
#loc93 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_21.c":89:5)
#loc94 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_21.c":93:5)
#loc95 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_21.c":89:8)
#loc96 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_21.c":90:5)
#loc97 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_21.c":92:16)
#loc98 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_21.c":92:25)
#loc99 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_21.c":92:9)
#loc100 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_21.c":94:12)
#loc101 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_21.c":94:5)
#loc102 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_21.c":97:1)
#loc103 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_21.c":109:1)
#loc104 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_21.c":106:9)
#loc105 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_21.c":106:31)
#loc106 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_21.c":99:5)
#loc107 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_21.c":99:9)
#loc108 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_21.c":101:13)
#loc109 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_21.c":101:12)
#loc110 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_21.c":101:5)
#loc111 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_21.c":102:22)
#loc112 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_21.c":102:5)
#loc113 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_21.c":103:27)
#loc114 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_21.c":103:12)
#loc115 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_21.c":103:5)
#loc116 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_21.c":103:31)
#loc117 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_21.c":104:5)
#loc118 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_21.c":108:5)
#loc119 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_21.c":107:26)
#loc120 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_21.c":107:9)
#loc121 = loc(fused[#loc1, #loc2])
#loc122 = loc(fused[#loc3, #loc4])
#loc123 = loc(fused[#loc5, #loc6])
#loc125 = loc(fused[#loc10, #loc11])
#loc126 = loc(fused[#loc13, #loc11])
#loc127 = loc(fused[#loc15, #loc14])
#loc128 = loc(fused[#loc17, #loc16])
#loc129 = loc(fused[#loc18, #loc19])
#loc130 = loc(fused[#loc20, #loc21])
#loc131 = loc(fused[#loc22, #loc23])
#loc132 = loc(fused[#loc24, #loc25])
#loc133 = loc(fused[#loc28, #loc26])
#loc134 = loc(fused[#loc30, #loc29])
#loc135 = loc(fused[#loc33, #loc34])
#loc136 = loc(fused[#loc35, #loc36])
#loc137 = loc(fused[#loc39, #loc40])
#loc138 = loc(fused[#loc41, #loc42])
#loc139 = loc(fused[#loc43, #loc44])
#loc140 = loc(fused[#loc45, #loc46])
#loc141 = loc(fused[#loc47, #loc48])
#loc142 = loc(fused[#loc50, #loc51])
#loc144 = loc(fused[#loc55, #loc56])
#loc145 = loc(fused[#loc58, #loc59, #loc60, #loc56])
#loc146 = loc(fused[#loc64, #loc63])
#loc147 = loc(fused[#loc66, #loc65])
#loc148 = loc(fused[#loc67, #loc68])
#loc149 = loc(fused[#loc69, #loc70])
#loc150 = loc(fused[#loc71, #loc72])
#loc151 = loc(fused[#loc75, #loc73])
#loc152 = loc(fused[#loc77, #loc76])
#loc153 = loc(fused[#loc80, #loc81])
#loc154 = loc(fused[#loc82, #loc83])
#loc155 = loc(fused[#loc86, #loc87])
#loc156 = loc(fused[#loc88, #loc89])
#loc158 = loc(fused[#loc93, #loc94])
#loc159 = loc(fused[#loc96, #loc94])
#loc160 = loc(fused[#loc99, #loc98])
#loc161 = loc(fused[#loc101, #loc100])
#loc162 = loc(fused[#loc102, #loc103])
#loc163 = loc(fused[#loc104, #loc105])
#loc164 = loc(fused[#loc106, #loc107])
#loc165 = loc(fused[#loc110, #loc108])
#loc166 = loc(fused[#loc112, #loc111])
#loc167 = loc(fused[#loc115, #loc116])
#loc168 = loc(fused[#loc117, #loc118])
