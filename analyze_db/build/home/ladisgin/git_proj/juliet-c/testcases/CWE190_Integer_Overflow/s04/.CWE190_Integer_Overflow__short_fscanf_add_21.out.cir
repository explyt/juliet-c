!s16i = !cir.int<s, 16>
!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.struct<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.struct<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.struct<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc12 = loc("CWE190_Integer_Overflow__short_fscanf_add_21.c":25:21)
#loc13 = loc("CWE190_Integer_Overflow__short_fscanf_add_21.c":25:27)
#loc58 = loc("CWE190_Integer_Overflow__short_fscanf_add_21.c":156:10)
#loc59 = loc("CWE190_Integer_Overflow__short_fscanf_add_21.c":156:14)
#loc60 = loc("CWE190_Integer_Overflow__short_fscanf_add_21.c":156:20)
#loc61 = loc("CWE190_Integer_Overflow__short_fscanf_add_21.c":156:32)
#loc82 = loc("CWE190_Integer_Overflow__short_fscanf_add_21.c":57:26)
#loc83 = loc("CWE190_Integer_Overflow__short_fscanf_add_21.c":57:32)
#loc122 = loc("CWE190_Integer_Overflow__short_fscanf_add_21.c":90:26)
#loc123 = loc("CWE190_Integer_Overflow__short_fscanf_add_21.c":90:32)
#loc160 = loc("CWE190_Integer_Overflow__short_fscanf_add_21.c":118:25)
#loc161 = loc("CWE190_Integer_Overflow__short_fscanf_add_21.c":118:31)
#loc191 = loc(fused[#loc12, #loc13])
#loc208 = loc(fused[#loc58, #loc59])
#loc209 = loc(fused[#loc60, #loc61])
#loc215 = loc(fused[#loc82, #loc83])
#loc228 = loc(fused[#loc122, #loc123])
#loc241 = loc(fused[#loc160, #loc161])
!ty__IO_FILE = !cir.struct<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!cir.struct<struct "_IO_FILE">>>, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_fscanf_add_21.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @__isoc99_fscanf(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i loc(#loc186)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc187)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"%hd\00" : !cir.array<!s8i x 4>> : !cir.array<!s8i x 4> {alignment = 1 : i64} loc(#loc5)
  cir.global "private" internal dsolocal @badStatic = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc188)
  cir.func private @printIntLine(!s32i) loc(#loc189)
  cir.func internal private @badSink(%arg0: !s16i loc(fused[#loc12, #loc13])) extra(#fn_attr) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc192)
    %1 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data", init] {alignment = 2 : i64} loc(#loc191)
    cir.store %arg0, %1 : !s16i, !cir.ptr<!s16i> loc(#loc16)
    cir.br ^bb1 loc(#loc193)
  ^bb1:  // pred: ^bb0
    %2 = cir.get_global @badStatic : !cir.ptr<!s32i> loc(#loc188)
    %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc19)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc19)
    cir.brcond %4 ^bb2, ^bb5 loc(#loc194)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc195)
  ^bb3:  // pred: ^bb2
    %5 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc23)
    %6 = cir.cast(integral, %5 : !s16i), !s32i loc(#loc23)
    %7 = cir.const #cir.int<1> : !s32i loc(#loc15)
    %8 = cir.binop(add, %6, %7) nsw : !s32i loc(#loc23)
    %9 = cir.cast(integral, %8 : !s32i), !s16i loc(#loc23)
    cir.store %9, %0 : !s16i, !cir.ptr<!s16i> loc(#loc192)
    %10 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc24)
    %11 = cir.cast(integral, %10 : !s16i), !s32i loc(#loc24)
    cir.call @printIntLine(%11) : (!s32i) -> () loc(#loc25)
    cir.br ^bb4 loc(#loc22)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc18)
  ^bb5:  // 2 preds: ^bb1, ^bb4
    cir.br ^bb6 loc(#loc18)
  ^bb6:  // pred: ^bb5
    cir.return loc(#loc11)
  } loc(#loc190)
  cir.func no_proto @CWE190_Integer_Overflow__short_fscanf_add_21_bad() extra(#fn_attr) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc197)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc30)
    %2 = cir.cast(integral, %1 : !s32i), !s16i loc(#loc30)
    cir.store %2, %0 : !s16i, !cir.ptr<!s16i> loc(#loc198)
    %3 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc32)
    %4 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc187)
    %5 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc33)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc5)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc5)
    %8 = cir.call @__isoc99_fscanf(%5, %7, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s16i>) -> !s32i loc(#loc32)
    %9 = cir.const #cir.int<1> : !s32i loc(#loc34)
    %10 = cir.get_global @badStatic : !cir.ptr<!s32i> loc(#loc188)
    cir.store %9, %10 : !s32i, !cir.ptr<!s32i> loc(#loc199)
    %11 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc36)
    cir.call @badSink(%11) : (!s16i) -> () loc(#loc37)
    cir.return loc(#loc27)
  } loc(#loc196)
  cir.func no_proto @CWE190_Integer_Overflow__short_fscanf_add_21_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc201)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc40)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc202)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc42)
    %2 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc203)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc44)
    cir.return loc(#loc39)
  } loc(#loc200)
  cir.func private @srand(!u32i) extra(#fn_attr1) loc(#loc204)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc205)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc206)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc52)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc53)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc54)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc55)
  cir.func @main(%arg0: !s32i loc(fused[#loc58, #loc59]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc60, #loc61])) -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc208)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc209)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc57)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc62)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc62)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc63)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc64)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc64)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr1) loc(#loc65)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc52)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc52)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc66)
    %8 = cir.get_global @CWE190_Integer_Overflow__short_fscanf_add_21_good : !cir.ptr<!cir.func<!void ()>> loc(#loc210)
    cir.call @CWE190_Integer_Overflow__short_fscanf_add_21_good() : () -> () loc(#loc67)
    %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc53)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc53)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc69)
    %11 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc54)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc54)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc70)
    %13 = cir.get_global @CWE190_Integer_Overflow__short_fscanf_add_21_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc211)
    cir.call @CWE190_Integer_Overflow__short_fscanf_add_21_bad() : () -> () loc(#loc71)
    %14 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc55)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc55)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc73)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc74)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc212)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc212)
    cir.return %17 : !s32i loc(#loc212)
  } loc(#loc207)
  cir.global "private" internal dsolocal @goodB2G1Static = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc213)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc78)
  cir.global "private" constant cir_private dsolocal @".str.6" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc79)
  cir.func internal private @goodB2G1Sink(%arg0: !s16i loc(fused[#loc82, #loc83])) extra(#fn_attr) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc216)
    %1 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data", init] {alignment = 2 : i64} loc(#loc215)
    cir.store %arg0, %1 : !s16i, !cir.ptr<!s16i> loc(#loc86)
    cir.br ^bb1 loc(#loc217)
  ^bb1:  // pred: ^bb0
    %2 = cir.get_global @goodB2G1Static : !cir.ptr<!s32i> loc(#loc213)
    %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc89)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc89)
    cir.brcond %4 ^bb2, ^bb3 loc(#loc218)
  ^bb2:  // pred: ^bb1
    %5 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc78)
    %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc78)
    cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc93)
    cir.br ^bb9 loc(#loc91)
  ^bb3:  // pred: ^bb1
    cir.br ^bb4 loc(#loc219)
  ^bb4:  // pred: ^bb3
    %7 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc96)
    %8 = cir.cast(integral, %7 : !s16i), !s32i loc(#loc96)
    %9 = cir.const #cir.int<32767> : !s32i loc(#loc97)
    %10 = cir.cmp(lt, %8, %9) : !s32i, !cir.bool loc(#loc220)
    cir.brcond %10 ^bb5, ^bb6 loc(#loc221)
  ^bb5:  // pred: ^bb4
    %11 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc101)
    %12 = cir.cast(integral, %11 : !s16i), !s32i loc(#loc101)
    %13 = cir.const #cir.int<1> : !s32i loc(#loc85)
    %14 = cir.binop(add, %12, %13) nsw : !s32i loc(#loc101)
    %15 = cir.cast(integral, %14 : !s32i), !s16i loc(#loc101)
    cir.store %15, %0 : !s16i, !cir.ptr<!s16i> loc(#loc216)
    %16 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc102)
    %17 = cir.cast(integral, %16 : !s16i), !s32i loc(#loc102)
    cir.call @printIntLine(%17) : (!s32i) -> () loc(#loc103)
    cir.br ^bb7 loc(#loc99)
  ^bb6:  // pred: ^bb4
    %18 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc79)
    %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc79)
    cir.call @printLine(%19) : (!cir.ptr<!s8i>) -> () loc(#loc104)
    cir.br ^bb7 loc(#loc95)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc95)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc88)
  ^bb9:  // 2 preds: ^bb2, ^bb8
    cir.br ^bb10 loc(#loc88)
  ^bb10:  // pred: ^bb9
    cir.return loc(#loc81)
  } loc(#loc214)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc223)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc109)
    %2 = cir.cast(integral, %1 : !s32i), !s16i loc(#loc109)
    cir.store %2, %0 : !s16i, !cir.ptr<!s16i> loc(#loc224)
    %3 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc111)
    %4 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc187)
    %5 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc112)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc113)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc113)
    %8 = cir.call @__isoc99_fscanf(%5, %7, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s16i>) -> !s32i loc(#loc111)
    %9 = cir.const #cir.int<0> : !s32i loc(#loc114)
    %10 = cir.get_global @goodB2G1Static : !cir.ptr<!s32i> loc(#loc213)
    cir.store %9, %10 : !s32i, !cir.ptr<!s32i> loc(#loc225)
    %11 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc116)
    cir.call @goodB2G1Sink(%11) : (!s16i) -> () loc(#loc117)
    cir.return loc(#loc106)
  } loc(#loc222)
  cir.global "private" internal dsolocal @goodB2G2Static = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc226)
  cir.func internal private @goodB2G2Sink(%arg0: !s16i loc(fused[#loc122, #loc123])) extra(#fn_attr) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc229)
    %1 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data", init] {alignment = 2 : i64} loc(#loc228)
    cir.store %arg0, %1 : !s16i, !cir.ptr<!s16i> loc(#loc126)
    cir.br ^bb1 loc(#loc230)
  ^bb1:  // pred: ^bb0
    %2 = cir.get_global @goodB2G2Static : !cir.ptr<!s32i> loc(#loc226)
    %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc129)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc129)
    cir.brcond %4 ^bb2, ^bb8 loc(#loc231)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc232)
  ^bb3:  // pred: ^bb2
    %5 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc133)
    %6 = cir.cast(integral, %5 : !s16i), !s32i loc(#loc133)
    %7 = cir.const #cir.int<32767> : !s32i loc(#loc134)
    %8 = cir.cmp(lt, %6, %7) : !s32i, !cir.bool loc(#loc233)
    cir.brcond %8 ^bb4, ^bb5 loc(#loc234)
  ^bb4:  // pred: ^bb3
    %9 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc138)
    %10 = cir.cast(integral, %9 : !s16i), !s32i loc(#loc138)
    %11 = cir.const #cir.int<1> : !s32i loc(#loc125)
    %12 = cir.binop(add, %10, %11) nsw : !s32i loc(#loc138)
    %13 = cir.cast(integral, %12 : !s32i), !s16i loc(#loc138)
    cir.store %13, %0 : !s16i, !cir.ptr<!s16i> loc(#loc229)
    %14 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc139)
    %15 = cir.cast(integral, %14 : !s16i), !s32i loc(#loc139)
    cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc140)
    cir.br ^bb6 loc(#loc136)
  ^bb5:  // pred: ^bb3
    %16 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc141)
    %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc141)
    cir.call @printLine(%17) : (!cir.ptr<!s8i>) -> () loc(#loc142)
    cir.br ^bb6 loc(#loc132)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc132)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc128)
  ^bb8:  // 2 preds: ^bb1, ^bb7
    cir.br ^bb9 loc(#loc128)
  ^bb9:  // pred: ^bb8
    cir.return loc(#loc121)
  } loc(#loc227)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc236)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc147)
    %2 = cir.cast(integral, %1 : !s32i), !s16i loc(#loc147)
    cir.store %2, %0 : !s16i, !cir.ptr<!s16i> loc(#loc237)
    %3 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc149)
    %4 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc187)
    %5 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc150)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc151)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc151)
    %8 = cir.call @__isoc99_fscanf(%5, %7, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s16i>) -> !s32i loc(#loc149)
    %9 = cir.const #cir.int<1> : !s32i loc(#loc152)
    %10 = cir.get_global @goodB2G2Static : !cir.ptr<!s32i> loc(#loc226)
    cir.store %9, %10 : !s32i, !cir.ptr<!s32i> loc(#loc238)
    %11 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc154)
    cir.call @goodB2G2Sink(%11) : (!s16i) -> () loc(#loc155)
    cir.return loc(#loc144)
  } loc(#loc235)
  cir.global "private" internal dsolocal @goodG2BStatic = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc239)
  cir.func internal private @goodG2BSink(%arg0: !s16i loc(fused[#loc160, #loc161])) extra(#fn_attr) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc242)
    %1 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data", init] {alignment = 2 : i64} loc(#loc241)
    cir.store %arg0, %1 : !s16i, !cir.ptr<!s16i> loc(#loc164)
    cir.br ^bb1 loc(#loc243)
  ^bb1:  // pred: ^bb0
    %2 = cir.get_global @goodG2BStatic : !cir.ptr<!s32i> loc(#loc239)
    %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc167)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc167)
    cir.brcond %4 ^bb2, ^bb5 loc(#loc244)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc245)
  ^bb3:  // pred: ^bb2
    %5 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc171)
    %6 = cir.cast(integral, %5 : !s16i), !s32i loc(#loc171)
    %7 = cir.const #cir.int<1> : !s32i loc(#loc163)
    %8 = cir.binop(add, %6, %7) nsw : !s32i loc(#loc171)
    %9 = cir.cast(integral, %8 : !s32i), !s16i loc(#loc171)
    cir.store %9, %0 : !s16i, !cir.ptr<!s16i> loc(#loc242)
    %10 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc172)
    %11 = cir.cast(integral, %10 : !s16i), !s32i loc(#loc172)
    cir.call @printIntLine(%11) : (!s32i) -> () loc(#loc173)
    cir.br ^bb4 loc(#loc170)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc166)
  ^bb5:  // 2 preds: ^bb1, ^bb4
    cir.br ^bb6 loc(#loc166)
  ^bb6:  // pred: ^bb5
    cir.return loc(#loc159)
  } loc(#loc240)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc247)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc178)
    %2 = cir.cast(integral, %1 : !s32i), !s16i loc(#loc178)
    cir.store %2, %0 : !s16i, !cir.ptr<!s16i> loc(#loc248)
    %3 = cir.const #cir.int<2> : !s32i loc(#loc180)
    %4 = cir.cast(integral, %3 : !s32i), !s16i loc(#loc180)
    cir.store %4, %0 : !s16i, !cir.ptr<!s16i> loc(#loc249)
    %5 = cir.const #cir.int<1> : !s32i loc(#loc182)
    %6 = cir.get_global @goodG2BStatic : !cir.ptr<!s32i> loc(#loc239)
    cir.store %5, %6 : !s32i, !cir.ptr<!s32i> loc(#loc250)
    %7 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc184)
    cir.call @goodG2BSink(%7) : (!s16i) -> () loc(#loc185)
    cir.return loc(#loc175)
  } loc(#loc246)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_fscanf_add_21.c":0:0)
#loc1 = loc("/usr/include/stdio.h":463:1)
#loc2 = loc("/usr/include/stdio.h":465:33)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("CWE190_Integer_Overflow__short_fscanf_add_21.c":42:20)
#loc6 = loc("CWE190_Integer_Overflow__short_fscanf_add_21.c":23:1)
#loc7 = loc("CWE190_Integer_Overflow__short_fscanf_add_21.c":23:24)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc9 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc10 = loc("CWE190_Integer_Overflow__short_fscanf_add_21.c":25:1)
#loc11 = loc("CWE190_Integer_Overflow__short_fscanf_add_21.c":35:1)
#loc14 = loc("CWE190_Integer_Overflow__short_fscanf_add_21.c":31:13)
#loc15 = loc("CWE190_Integer_Overflow__short_fscanf_add_21.c":31:35)
#loc16 = loc("CWE190_Integer_Overflow__short_fscanf_add_21.c":26:1)
#loc17 = loc("CWE190_Integer_Overflow__short_fscanf_add_21.c":27:5)
#loc18 = loc("CWE190_Integer_Overflow__short_fscanf_add_21.c":34:5)
#loc19 = loc("CWE190_Integer_Overflow__short_fscanf_add_21.c":27:8)
#loc20 = loc("CWE190_Integer_Overflow__short_fscanf_add_21.c":28:5)
#loc21 = loc("CWE190_Integer_Overflow__short_fscanf_add_21.c":29:9)
#loc22 = loc("CWE190_Integer_Overflow__short_fscanf_add_21.c":33:9)
#loc23 = loc("CWE190_Integer_Overflow__short_fscanf_add_21.c":31:28)
#loc24 = loc("CWE190_Integer_Overflow__short_fscanf_add_21.c":32:26)
#loc25 = loc("CWE190_Integer_Overflow__short_fscanf_add_21.c":32:13)
#loc26 = loc("CWE190_Integer_Overflow__short_fscanf_add_21.c":37:1)
#loc27 = loc("CWE190_Integer_Overflow__short_fscanf_add_21.c":45:1)
#loc28 = loc("CWE190_Integer_Overflow__short_fscanf_add_21.c":39:5)
#loc29 = loc("CWE190_Integer_Overflow__short_fscanf_add_21.c":39:11)
#loc30 = loc("CWE190_Integer_Overflow__short_fscanf_add_21.c":40:12)
#loc31 = loc("CWE190_Integer_Overflow__short_fscanf_add_21.c":40:5)
#loc32 = loc("CWE190_Integer_Overflow__short_fscanf_add_21.c":42:5)
#loc33 = loc("CWE190_Integer_Overflow__short_fscanf_add_21.c":42:13)
#loc34 = loc("CWE190_Integer_Overflow__short_fscanf_add_21.c":43:17)
#loc35 = loc("CWE190_Integer_Overflow__short_fscanf_add_21.c":43:5)
#loc36 = loc("CWE190_Integer_Overflow__short_fscanf_add_21.c":44:13)
#loc37 = loc("CWE190_Integer_Overflow__short_fscanf_add_21.c":44:5)
#loc38 = loc("CWE190_Integer_Overflow__short_fscanf_add_21.c":140:1)
#loc39 = loc("CWE190_Integer_Overflow__short_fscanf_add_21.c":145:1)
#loc40 = loc("CWE190_Integer_Overflow__short_fscanf_add_21.c":142:5)
#loc41 = loc("CWE190_Integer_Overflow__short_fscanf_add_21.c":142:14)
#loc42 = loc("CWE190_Integer_Overflow__short_fscanf_add_21.c":143:5)
#loc43 = loc("CWE190_Integer_Overflow__short_fscanf_add_21.c":143:14)
#loc44 = loc("CWE190_Integer_Overflow__short_fscanf_add_21.c":144:5)
#loc45 = loc("CWE190_Integer_Overflow__short_fscanf_add_21.c":144:13)
#loc46 = loc("/usr/include/stdlib.h":575:1)
#loc47 = loc("/usr/include/stdlib.h":575:41)
#loc48 = loc("/usr/include/time.h":76:1)
#loc49 = loc("/usr/include/time.h":76:38)
#loc50 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc51 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc52 = loc("CWE190_Integer_Overflow__short_fscanf_add_21.c":161:15)
#loc53 = loc("CWE190_Integer_Overflow__short_fscanf_add_21.c":163:15)
#loc54 = loc("CWE190_Integer_Overflow__short_fscanf_add_21.c":166:15)
#loc55 = loc("CWE190_Integer_Overflow__short_fscanf_add_21.c":168:15)
#loc56 = loc("CWE190_Integer_Overflow__short_fscanf_add_21.c":156:1)
#loc57 = loc("CWE190_Integer_Overflow__short_fscanf_add_21.c":171:1)
#loc62 = loc("CWE190_Integer_Overflow__short_fscanf_add_21.c":157:1)
#loc63 = loc("CWE190_Integer_Overflow__short_fscanf_add_21.c":159:27)
#loc64 = loc("CWE190_Integer_Overflow__short_fscanf_add_21.c":159:22)
#loc65 = loc("CWE190_Integer_Overflow__short_fscanf_add_21.c":159:5)
#loc66 = loc("CWE190_Integer_Overflow__short_fscanf_add_21.c":161:5)
#loc67 = loc("CWE190_Integer_Overflow__short_fscanf_add_21.c":162:5)
#loc68 = loc("CWE190_Integer_Overflow__short_fscanf_add_21.c":162:55)
#loc69 = loc("CWE190_Integer_Overflow__short_fscanf_add_21.c":163:5)
#loc70 = loc("CWE190_Integer_Overflow__short_fscanf_add_21.c":166:5)
#loc71 = loc("CWE190_Integer_Overflow__short_fscanf_add_21.c":167:5)
#loc72 = loc("CWE190_Integer_Overflow__short_fscanf_add_21.c":167:54)
#loc73 = loc("CWE190_Integer_Overflow__short_fscanf_add_21.c":168:5)
#loc74 = loc("CWE190_Integer_Overflow__short_fscanf_add_21.c":170:12)
#loc75 = loc("CWE190_Integer_Overflow__short_fscanf_add_21.c":170:5)
#loc76 = loc("CWE190_Integer_Overflow__short_fscanf_add_21.c":52:1)
#loc77 = loc("CWE190_Integer_Overflow__short_fscanf_add_21.c":52:29)
#loc78 = loc("CWE190_Integer_Overflow__short_fscanf_add_21.c":62:19)
#loc79 = loc("CWE190_Integer_Overflow__short_fscanf_add_21.c":74:23)
#loc80 = loc("CWE190_Integer_Overflow__short_fscanf_add_21.c":57:1)
#loc81 = loc("CWE190_Integer_Overflow__short_fscanf_add_21.c":77:1)
#loc84 = loc("CWE190_Integer_Overflow__short_fscanf_add_21.c":69:13)
#loc85 = loc("CWE190_Integer_Overflow__short_fscanf_add_21.c":69:35)
#loc86 = loc("CWE190_Integer_Overflow__short_fscanf_add_21.c":58:1)
#loc87 = loc("CWE190_Integer_Overflow__short_fscanf_add_21.c":59:5)
#loc88 = loc("CWE190_Integer_Overflow__short_fscanf_add_21.c":76:5)
#loc89 = loc("CWE190_Integer_Overflow__short_fscanf_add_21.c":59:8)
#loc90 = loc("CWE190_Integer_Overflow__short_fscanf_add_21.c":60:5)
#loc91 = loc("CWE190_Integer_Overflow__short_fscanf_add_21.c":63:5)
#loc92 = loc("CWE190_Integer_Overflow__short_fscanf_add_21.c":65:5)
#loc93 = loc("CWE190_Integer_Overflow__short_fscanf_add_21.c":62:9)
#loc94 = loc("CWE190_Integer_Overflow__short_fscanf_add_21.c":67:9)
#loc95 = loc("CWE190_Integer_Overflow__short_fscanf_add_21.c":75:9)
#loc96 = loc("CWE190_Integer_Overflow__short_fscanf_add_21.c":67:13)
#loc97 = loc("CWE190_Integer_Overflow__short_fscanf_add_21.c":67:20)
#loc98 = loc("CWE190_Integer_Overflow__short_fscanf_add_21.c":68:9)
#loc99 = loc("CWE190_Integer_Overflow__short_fscanf_add_21.c":71:9)
#loc100 = loc("CWE190_Integer_Overflow__short_fscanf_add_21.c":73:9)
#loc101 = loc("CWE190_Integer_Overflow__short_fscanf_add_21.c":69:28)
#loc102 = loc("CWE190_Integer_Overflow__short_fscanf_add_21.c":70:26)
#loc103 = loc("CWE190_Integer_Overflow__short_fscanf_add_21.c":70:13)
#loc104 = loc("CWE190_Integer_Overflow__short_fscanf_add_21.c":74:13)
#loc105 = loc("CWE190_Integer_Overflow__short_fscanf_add_21.c":79:1)
#loc106 = loc("CWE190_Integer_Overflow__short_fscanf_add_21.c":87:1)
#loc107 = loc("CWE190_Integer_Overflow__short_fscanf_add_21.c":81:5)
#loc108 = loc("CWE190_Integer_Overflow__short_fscanf_add_21.c":81:11)
#loc109 = loc("CWE190_Integer_Overflow__short_fscanf_add_21.c":82:12)
#loc110 = loc("CWE190_Integer_Overflow__short_fscanf_add_21.c":82:5)
#loc111 = loc("CWE190_Integer_Overflow__short_fscanf_add_21.c":84:5)
#loc112 = loc("CWE190_Integer_Overflow__short_fscanf_add_21.c":84:13)
#loc113 = loc("CWE190_Integer_Overflow__short_fscanf_add_21.c":84:20)
#loc114 = loc("CWE190_Integer_Overflow__short_fscanf_add_21.c":85:22)
#loc115 = loc("CWE190_Integer_Overflow__short_fscanf_add_21.c":85:5)
#loc116 = loc("CWE190_Integer_Overflow__short_fscanf_add_21.c":86:18)
#loc117 = loc("CWE190_Integer_Overflow__short_fscanf_add_21.c":86:5)
#loc118 = loc("CWE190_Integer_Overflow__short_fscanf_add_21.c":53:1)
#loc119 = loc("CWE190_Integer_Overflow__short_fscanf_add_21.c":53:29)
#loc120 = loc("CWE190_Integer_Overflow__short_fscanf_add_21.c":90:1)
#loc121 = loc("CWE190_Integer_Overflow__short_fscanf_add_21.c":105:1)
#loc124 = loc("CWE190_Integer_Overflow__short_fscanf_add_21.c":97:13)
#loc125 = loc("CWE190_Integer_Overflow__short_fscanf_add_21.c":97:35)
#loc126 = loc("CWE190_Integer_Overflow__short_fscanf_add_21.c":91:1)
#loc127 = loc("CWE190_Integer_Overflow__short_fscanf_add_21.c":92:5)
#loc128 = loc("CWE190_Integer_Overflow__short_fscanf_add_21.c":104:5)
#loc129 = loc("CWE190_Integer_Overflow__short_fscanf_add_21.c":92:8)
#loc130 = loc("CWE190_Integer_Overflow__short_fscanf_add_21.c":93:5)
#loc131 = loc("CWE190_Integer_Overflow__short_fscanf_add_21.c":95:9)
#loc132 = loc("CWE190_Integer_Overflow__short_fscanf_add_21.c":103:9)
#loc133 = loc("CWE190_Integer_Overflow__short_fscanf_add_21.c":95:13)
#loc134 = loc("CWE190_Integer_Overflow__short_fscanf_add_21.c":95:20)
#loc135 = loc("CWE190_Integer_Overflow__short_fscanf_add_21.c":96:9)
#loc136 = loc("CWE190_Integer_Overflow__short_fscanf_add_21.c":99:9)
#loc137 = loc("CWE190_Integer_Overflow__short_fscanf_add_21.c":101:9)
#loc138 = loc("CWE190_Integer_Overflow__short_fscanf_add_21.c":97:28)
#loc139 = loc("CWE190_Integer_Overflow__short_fscanf_add_21.c":98:26)
#loc140 = loc("CWE190_Integer_Overflow__short_fscanf_add_21.c":98:13)
#loc141 = loc("CWE190_Integer_Overflow__short_fscanf_add_21.c":102:23)
#loc142 = loc("CWE190_Integer_Overflow__short_fscanf_add_21.c":102:13)
#loc143 = loc("CWE190_Integer_Overflow__short_fscanf_add_21.c":107:1)
#loc144 = loc("CWE190_Integer_Overflow__short_fscanf_add_21.c":115:1)
#loc145 = loc("CWE190_Integer_Overflow__short_fscanf_add_21.c":109:5)
#loc146 = loc("CWE190_Integer_Overflow__short_fscanf_add_21.c":109:11)
#loc147 = loc("CWE190_Integer_Overflow__short_fscanf_add_21.c":110:12)
#loc148 = loc("CWE190_Integer_Overflow__short_fscanf_add_21.c":110:5)
#loc149 = loc("CWE190_Integer_Overflow__short_fscanf_add_21.c":112:5)
#loc150 = loc("CWE190_Integer_Overflow__short_fscanf_add_21.c":112:13)
#loc151 = loc("CWE190_Integer_Overflow__short_fscanf_add_21.c":112:20)
#loc152 = loc("CWE190_Integer_Overflow__short_fscanf_add_21.c":113:22)
#loc153 = loc("CWE190_Integer_Overflow__short_fscanf_add_21.c":113:5)
#loc154 = loc("CWE190_Integer_Overflow__short_fscanf_add_21.c":114:18)
#loc155 = loc("CWE190_Integer_Overflow__short_fscanf_add_21.c":114:5)
#loc156 = loc("CWE190_Integer_Overflow__short_fscanf_add_21.c":54:1)
#loc157 = loc("CWE190_Integer_Overflow__short_fscanf_add_21.c":54:28)
#loc158 = loc("CWE190_Integer_Overflow__short_fscanf_add_21.c":118:1)
#loc159 = loc("CWE190_Integer_Overflow__short_fscanf_add_21.c":128:1)
#loc162 = loc("CWE190_Integer_Overflow__short_fscanf_add_21.c":124:13)
#loc163 = loc("CWE190_Integer_Overflow__short_fscanf_add_21.c":124:35)
#loc164 = loc("CWE190_Integer_Overflow__short_fscanf_add_21.c":119:1)
#loc165 = loc("CWE190_Integer_Overflow__short_fscanf_add_21.c":120:5)
#loc166 = loc("CWE190_Integer_Overflow__short_fscanf_add_21.c":127:5)
#loc167 = loc("CWE190_Integer_Overflow__short_fscanf_add_21.c":120:8)
#loc168 = loc("CWE190_Integer_Overflow__short_fscanf_add_21.c":121:5)
#loc169 = loc("CWE190_Integer_Overflow__short_fscanf_add_21.c":122:9)
#loc170 = loc("CWE190_Integer_Overflow__short_fscanf_add_21.c":126:9)
#loc171 = loc("CWE190_Integer_Overflow__short_fscanf_add_21.c":124:28)
#loc172 = loc("CWE190_Integer_Overflow__short_fscanf_add_21.c":125:26)
#loc173 = loc("CWE190_Integer_Overflow__short_fscanf_add_21.c":125:13)
#loc174 = loc("CWE190_Integer_Overflow__short_fscanf_add_21.c":130:1)
#loc175 = loc("CWE190_Integer_Overflow__short_fscanf_add_21.c":138:1)
#loc176 = loc("CWE190_Integer_Overflow__short_fscanf_add_21.c":132:5)
#loc177 = loc("CWE190_Integer_Overflow__short_fscanf_add_21.c":132:11)
#loc178 = loc("CWE190_Integer_Overflow__short_fscanf_add_21.c":133:12)
#loc179 = loc("CWE190_Integer_Overflow__short_fscanf_add_21.c":133:5)
#loc180 = loc("CWE190_Integer_Overflow__short_fscanf_add_21.c":135:12)
#loc181 = loc("CWE190_Integer_Overflow__short_fscanf_add_21.c":135:5)
#loc182 = loc("CWE190_Integer_Overflow__short_fscanf_add_21.c":136:21)
#loc183 = loc("CWE190_Integer_Overflow__short_fscanf_add_21.c":136:5)
#loc184 = loc("CWE190_Integer_Overflow__short_fscanf_add_21.c":137:17)
#loc185 = loc("CWE190_Integer_Overflow__short_fscanf_add_21.c":137:5)
#loc186 = loc(fused[#loc1, #loc2])
#loc187 = loc(fused[#loc3, #loc4])
#loc188 = loc(fused[#loc6, #loc7])
#loc189 = loc(fused[#loc8, #loc9])
#loc190 = loc(fused[#loc10, #loc11])
#loc192 = loc(fused[#loc14, #loc15])
#loc193 = loc(fused[#loc17, #loc18])
#loc194 = loc(fused[#loc20, #loc18])
#loc195 = loc(fused[#loc21, #loc22])
#loc196 = loc(fused[#loc26, #loc27])
#loc197 = loc(fused[#loc28, #loc29])
#loc198 = loc(fused[#loc31, #loc30])
#loc199 = loc(fused[#loc35, #loc34])
#loc200 = loc(fused[#loc38, #loc39])
#loc201 = loc(fused[#loc40, #loc41])
#loc202 = loc(fused[#loc42, #loc43])
#loc203 = loc(fused[#loc44, #loc45])
#loc204 = loc(fused[#loc46, #loc47])
#loc205 = loc(fused[#loc48, #loc49])
#loc206 = loc(fused[#loc50, #loc51])
#loc207 = loc(fused[#loc56, #loc57])
#loc210 = loc(fused[#loc67, #loc68])
#loc211 = loc(fused[#loc71, #loc72])
#loc212 = loc(fused[#loc75, #loc74])
#loc213 = loc(fused[#loc76, #loc77])
#loc214 = loc(fused[#loc80, #loc81])
#loc216 = loc(fused[#loc84, #loc85])
#loc217 = loc(fused[#loc87, #loc88])
#loc218 = loc(fused[#loc90, #loc91, #loc92, #loc88])
#loc219 = loc(fused[#loc94, #loc95])
#loc220 = loc(fused[#loc96, #loc97])
#loc221 = loc(fused[#loc98, #loc99, #loc100, #loc95])
#loc222 = loc(fused[#loc105, #loc106])
#loc223 = loc(fused[#loc107, #loc108])
#loc224 = loc(fused[#loc110, #loc109])
#loc225 = loc(fused[#loc115, #loc114])
#loc226 = loc(fused[#loc118, #loc119])
#loc227 = loc(fused[#loc120, #loc121])
#loc229 = loc(fused[#loc124, #loc125])
#loc230 = loc(fused[#loc127, #loc128])
#loc231 = loc(fused[#loc130, #loc128])
#loc232 = loc(fused[#loc131, #loc132])
#loc233 = loc(fused[#loc133, #loc134])
#loc234 = loc(fused[#loc135, #loc136, #loc137, #loc132])
#loc235 = loc(fused[#loc143, #loc144])
#loc236 = loc(fused[#loc145, #loc146])
#loc237 = loc(fused[#loc148, #loc147])
#loc238 = loc(fused[#loc153, #loc152])
#loc239 = loc(fused[#loc156, #loc157])
#loc240 = loc(fused[#loc158, #loc159])
#loc242 = loc(fused[#loc162, #loc163])
#loc243 = loc(fused[#loc165, #loc166])
#loc244 = loc(fused[#loc168, #loc166])
#loc245 = loc(fused[#loc169, #loc170])
#loc246 = loc(fused[#loc174, #loc175])
#loc247 = loc(fused[#loc176, #loc177])
#loc248 = loc(fused[#loc179, #loc178])
#loc249 = loc(fused[#loc181, #loc180])
#loc250 = loc(fused[#loc183, #loc182])
