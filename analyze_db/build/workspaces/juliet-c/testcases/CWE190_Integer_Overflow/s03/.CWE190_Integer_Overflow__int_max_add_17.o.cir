!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_max_add_17.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @printIntLine(!s32i) loc(#loc132)
  cir.func no_proto @CWE190_Integer_Overflow__int_max_add_17_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc134)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["j"] {alignment = 4 : i64} loc(#loc135)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc136)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc10)
    cir.store %3, %2 : !s32i, !cir.ptr<!s32i> loc(#loc137)
    cir.scope {
      %4 = cir.const #cir.int<0> : !s32i loc(#loc14)
      cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc139)
      cir.for : cond {
        %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc16)
        %6 = cir.const #cir.int<1> : !s32i loc(#loc17)
        %7 = cir.cmp(lt, %5, %6) : !s32i, !cir.bool loc(#loc140)
        cir.condition(%7) loc(#loc18)
      } body {
        cir.scope {
          %5 = cir.const #cir.int<2147483647> : !s32i loc(#loc20)
          cir.store %5, %2 : !s32i, !cir.ptr<!s32i> loc(#loc142)
        } loc(#loc141)
        cir.yield loc(#loc13)
      } step {
        %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc22)
        %6 = cir.unary(inc, %5) nsw : !s32i, !s32i loc(#loc23)
        cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc143)
        cir.yield loc(#loc138)
      } loc(#loc138)
    } loc(#loc138)
    cir.scope {
      %4 = cir.const #cir.int<0> : !s32i loc(#loc26)
      cir.store %4, %1 : !s32i, !cir.ptr<!s32i> loc(#loc145)
      cir.for : cond {
        %5 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc28)
        %6 = cir.const #cir.int<1> : !s32i loc(#loc29)
        %7 = cir.cmp(lt, %5, %6) : !s32i, !cir.bool loc(#loc146)
        cir.condition(%7) loc(#loc30)
      } body {
        cir.scope {
          cir.scope {
            %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc149)
            %6 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc36)
            %7 = cir.const #cir.int<1> : !s32i loc(#loc35)
            %8 = cir.binop(add, %6, %7) nsw : !s32i loc(#loc36)
            cir.store %8, %5 : !s32i, !cir.ptr<!s32i> loc(#loc149)
            %9 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc37)
            cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc38)
          } loc(#loc148)
        } loc(#loc147)
        cir.yield loc(#loc25)
      } step {
        %5 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc39)
        %6 = cir.unary(inc, %5) nsw : !s32i, !s32i loc(#loc40)
        cir.store %6, %1 : !s32i, !cir.ptr<!s32i> loc(#loc150)
        cir.yield loc(#loc144)
      } loc(#loc144)
    } loc(#loc144)
    cir.return loc(#loc4)
  } loc(#loc133)
  cir.func no_proto @CWE190_Integer_Overflow__int_max_add_17_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc152)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc43)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc153)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc45)
    cir.return loc(#loc42)
  } loc(#loc151)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc154)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc49)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc156)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["k"] {alignment = 4 : i64} loc(#loc157)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc158)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc57)
    cir.store %3, %2 : !s32i, !cir.ptr<!s32i> loc(#loc159)
    cir.scope {
      %4 = cir.const #cir.int<0> : !s32i loc(#loc61)
      cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc161)
      cir.for : cond {
        %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc63)
        %6 = cir.const #cir.int<1> : !s32i loc(#loc64)
        %7 = cir.cmp(lt, %5, %6) : !s32i, !cir.bool loc(#loc162)
        cir.condition(%7) loc(#loc65)
      } body {
        cir.scope {
          %5 = cir.const #cir.int<2147483647> : !s32i loc(#loc67)
          cir.store %5, %2 : !s32i, !cir.ptr<!s32i> loc(#loc164)
        } loc(#loc163)
        cir.yield loc(#loc60)
      } step {
        %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc69)
        %6 = cir.unary(inc, %5) nsw : !s32i, !s32i loc(#loc70)
        cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc165)
        cir.yield loc(#loc160)
      } loc(#loc160)
    } loc(#loc160)
    cir.scope {
      %4 = cir.const #cir.int<0> : !s32i loc(#loc73)
      cir.store %4, %1 : !s32i, !cir.ptr<!s32i> loc(#loc167)
      cir.for : cond {
        %5 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc75)
        %6 = cir.const #cir.int<1> : !s32i loc(#loc76)
        %7 = cir.cmp(lt, %5, %6) : !s32i, !cir.bool loc(#loc168)
        cir.condition(%7) loc(#loc77)
      } body {
        cir.scope {
          cir.scope {
            %5 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc81)
            %6 = cir.const #cir.int<2147483647> : !s32i loc(#loc82)
            %7 = cir.cmp(lt, %5, %6) : !s32i, !cir.bool loc(#loc171)
            cir.if %7 {
              %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc173)
              %9 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc88)
              %10 = cir.const #cir.int<1> : !s32i loc(#loc87)
              %11 = cir.binop(add, %9, %10) nsw : !s32i loc(#loc88)
              cir.store %11, %8 : !s32i, !cir.ptr<!s32i> loc(#loc173)
              %12 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc89)
              cir.call @printIntLine(%12) : (!s32i) -> () loc(#loc90)
            } else {
              %8 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc49)
              %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc49)
              cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc91)
            } loc(#loc172)
          } loc(#loc170)
        } loc(#loc169)
        cir.yield loc(#loc72)
      } step {
        %5 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc92)
        %6 = cir.unary(inc, %5) nsw : !s32i, !s32i loc(#loc93)
        cir.store %6, %1 : !s32i, !cir.ptr<!s32i> loc(#loc174)
        cir.yield loc(#loc166)
      } loc(#loc166)
    } loc(#loc166)
    cir.return loc(#loc51)
  } loc(#loc155)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["h"] {alignment = 4 : i64} loc(#loc176)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["j"] {alignment = 4 : i64} loc(#loc177)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc178)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc101)
    cir.store %3, %2 : !s32i, !cir.ptr<!s32i> loc(#loc179)
    cir.scope {
      %4 = cir.const #cir.int<0> : !s32i loc(#loc105)
      cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc181)
      cir.for : cond {
        %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc107)
        %6 = cir.const #cir.int<1> : !s32i loc(#loc108)
        %7 = cir.cmp(lt, %5, %6) : !s32i, !cir.bool loc(#loc182)
        cir.condition(%7) loc(#loc109)
      } body {
        cir.scope {
          %5 = cir.const #cir.int<2> : !s32i loc(#loc111)
          cir.store %5, %2 : !s32i, !cir.ptr<!s32i> loc(#loc184)
        } loc(#loc183)
        cir.yield loc(#loc104)
      } step {
        %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc113)
        %6 = cir.unary(inc, %5) nsw : !s32i, !s32i loc(#loc114)
        cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc185)
        cir.yield loc(#loc180)
      } loc(#loc180)
    } loc(#loc180)
    cir.scope {
      %4 = cir.const #cir.int<0> : !s32i loc(#loc117)
      cir.store %4, %1 : !s32i, !cir.ptr<!s32i> loc(#loc187)
      cir.for : cond {
        %5 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc119)
        %6 = cir.const #cir.int<1> : !s32i loc(#loc120)
        %7 = cir.cmp(lt, %5, %6) : !s32i, !cir.bool loc(#loc188)
        cir.condition(%7) loc(#loc121)
      } body {
        cir.scope {
          cir.scope {
            %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc191)
            %6 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc127)
            %7 = cir.const #cir.int<1> : !s32i loc(#loc126)
            %8 = cir.binop(add, %6, %7) nsw : !s32i loc(#loc127)
            cir.store %8, %5 : !s32i, !cir.ptr<!s32i> loc(#loc191)
            %9 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc128)
            cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc129)
          } loc(#loc190)
        } loc(#loc189)
        cir.yield loc(#loc116)
      } step {
        %5 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc130)
        %6 = cir.unary(inc, %5) nsw : !s32i, !s32i loc(#loc131)
        cir.store %6, %1 : !s32i, !cir.ptr<!s32i> loc(#loc192)
        cir.yield loc(#loc186)
      } loc(#loc186)
    } loc(#loc186)
    cir.return loc(#loc95)
  } loc(#loc175)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_max_add_17.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("CWE190_Integer_Overflow__int_max_add_17.c":22:1)
#loc4 = loc("CWE190_Integer_Overflow__int_max_add_17.c":41:1)
#loc5 = loc("CWE190_Integer_Overflow__int_max_add_17.c":24:5)
#loc6 = loc("CWE190_Integer_Overflow__int_max_add_17.c":24:9)
#loc7 = loc("CWE190_Integer_Overflow__int_max_add_17.c":24:11)
#loc8 = loc("CWE190_Integer_Overflow__int_max_add_17.c":25:5)
#loc9 = loc("CWE190_Integer_Overflow__int_max_add_17.c":25:9)
#loc10 = loc("CWE190_Integer_Overflow__int_max_add_17.c":27:12)
#loc11 = loc("CWE190_Integer_Overflow__int_max_add_17.c":27:5)
#loc12 = loc("CWE190_Integer_Overflow__int_max_add_17.c":28:5)
#loc13 = loc("CWE190_Integer_Overflow__int_max_add_17.c":32:5)
#loc14 = loc("CWE190_Integer_Overflow__int_max_add_17.c":28:13)
#loc15 = loc("CWE190_Integer_Overflow__int_max_add_17.c":28:9)
#loc16 = loc("CWE190_Integer_Overflow__int_max_add_17.c":28:16)
#loc17 = loc("CWE190_Integer_Overflow__int_max_add_17.c":28:20)
#loc18 = loc("CWE190_Integer_Overflow__int_max_add_17.c":28:18)
#loc19 = loc("CWE190_Integer_Overflow__int_max_add_17.c":29:5)
#loc20 = loc("CWE190_Integer_Overflow__int_max_add_17.c":31:16)
#loc21 = loc("CWE190_Integer_Overflow__int_max_add_17.c":31:9)
#loc22 = loc("CWE190_Integer_Overflow__int_max_add_17.c":28:24)
#loc23 = loc("CWE190_Integer_Overflow__int_max_add_17.c":28:23)
#loc24 = loc("CWE190_Integer_Overflow__int_max_add_17.c":33:5)
#loc25 = loc("CWE190_Integer_Overflow__int_max_add_17.c":40:5)
#loc26 = loc("CWE190_Integer_Overflow__int_max_add_17.c":33:13)
#loc27 = loc("CWE190_Integer_Overflow__int_max_add_17.c":33:9)
#loc28 = loc("CWE190_Integer_Overflow__int_max_add_17.c":33:16)
#loc29 = loc("CWE190_Integer_Overflow__int_max_add_17.c":33:20)
#loc30 = loc("CWE190_Integer_Overflow__int_max_add_17.c":33:18)
#loc31 = loc("CWE190_Integer_Overflow__int_max_add_17.c":34:5)
#loc32 = loc("CWE190_Integer_Overflow__int_max_add_17.c":35:9)
#loc33 = loc("CWE190_Integer_Overflow__int_max_add_17.c":39:9)
#loc34 = loc("CWE190_Integer_Overflow__int_max_add_17.c":37:13)
#loc35 = loc("CWE190_Integer_Overflow__int_max_add_17.c":37:33)
#loc36 = loc("CWE190_Integer_Overflow__int_max_add_17.c":37:26)
#loc37 = loc("CWE190_Integer_Overflow__int_max_add_17.c":38:26)
#loc38 = loc("CWE190_Integer_Overflow__int_max_add_17.c":38:13)
#loc39 = loc("CWE190_Integer_Overflow__int_max_add_17.c":33:24)
#loc40 = loc("CWE190_Integer_Overflow__int_max_add_17.c":33:23)
#loc41 = loc("CWE190_Integer_Overflow__int_max_add_17.c":96:1)
#loc42 = loc("CWE190_Integer_Overflow__int_max_add_17.c":100:1)
#loc43 = loc("CWE190_Integer_Overflow__int_max_add_17.c":98:5)
#loc44 = loc("CWE190_Integer_Overflow__int_max_add_17.c":98:13)
#loc45 = loc("CWE190_Integer_Overflow__int_max_add_17.c":99:5)
#loc46 = loc("CWE190_Integer_Overflow__int_max_add_17.c":99:13)
#loc47 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc48 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc49 = loc("CWE190_Integer_Overflow__int_max_add_17.c":69:23)
#loc50 = loc("CWE190_Integer_Overflow__int_max_add_17.c":48:1)
#loc51 = loc("CWE190_Integer_Overflow__int_max_add_17.c":72:1)
#loc52 = loc("CWE190_Integer_Overflow__int_max_add_17.c":50:5)
#loc53 = loc("CWE190_Integer_Overflow__int_max_add_17.c":50:9)
#loc54 = loc("CWE190_Integer_Overflow__int_max_add_17.c":50:11)
#loc55 = loc("CWE190_Integer_Overflow__int_max_add_17.c":51:5)
#loc56 = loc("CWE190_Integer_Overflow__int_max_add_17.c":51:9)
#loc57 = loc("CWE190_Integer_Overflow__int_max_add_17.c":53:12)
#loc58 = loc("CWE190_Integer_Overflow__int_max_add_17.c":53:5)
#loc59 = loc("CWE190_Integer_Overflow__int_max_add_17.c":54:5)
#loc60 = loc("CWE190_Integer_Overflow__int_max_add_17.c":58:5)
#loc61 = loc("CWE190_Integer_Overflow__int_max_add_17.c":54:13)
#loc62 = loc("CWE190_Integer_Overflow__int_max_add_17.c":54:9)
#loc63 = loc("CWE190_Integer_Overflow__int_max_add_17.c":54:16)
#loc64 = loc("CWE190_Integer_Overflow__int_max_add_17.c":54:20)
#loc65 = loc("CWE190_Integer_Overflow__int_max_add_17.c":54:18)
#loc66 = loc("CWE190_Integer_Overflow__int_max_add_17.c":55:5)
#loc67 = loc("CWE190_Integer_Overflow__int_max_add_17.c":57:16)
#loc68 = loc("CWE190_Integer_Overflow__int_max_add_17.c":57:9)
#loc69 = loc("CWE190_Integer_Overflow__int_max_add_17.c":54:24)
#loc70 = loc("CWE190_Integer_Overflow__int_max_add_17.c":54:23)
#loc71 = loc("CWE190_Integer_Overflow__int_max_add_17.c":59:5)
#loc72 = loc("CWE190_Integer_Overflow__int_max_add_17.c":71:5)
#loc73 = loc("CWE190_Integer_Overflow__int_max_add_17.c":59:13)
#loc74 = loc("CWE190_Integer_Overflow__int_max_add_17.c":59:9)
#loc75 = loc("CWE190_Integer_Overflow__int_max_add_17.c":59:16)
#loc76 = loc("CWE190_Integer_Overflow__int_max_add_17.c":59:20)
#loc77 = loc("CWE190_Integer_Overflow__int_max_add_17.c":59:18)
#loc78 = loc("CWE190_Integer_Overflow__int_max_add_17.c":60:5)
#loc79 = loc("CWE190_Integer_Overflow__int_max_add_17.c":62:9)
#loc80 = loc("CWE190_Integer_Overflow__int_max_add_17.c":70:9)
#loc81 = loc("CWE190_Integer_Overflow__int_max_add_17.c":62:13)
#loc82 = loc("CWE190_Integer_Overflow__int_max_add_17.c":62:20)
#loc83 = loc("CWE190_Integer_Overflow__int_max_add_17.c":63:9)
#loc84 = loc("CWE190_Integer_Overflow__int_max_add_17.c":66:9)
#loc85 = loc("CWE190_Integer_Overflow__int_max_add_17.c":68:9)
#loc86 = loc("CWE190_Integer_Overflow__int_max_add_17.c":64:13)
#loc87 = loc("CWE190_Integer_Overflow__int_max_add_17.c":64:33)
#loc88 = loc("CWE190_Integer_Overflow__int_max_add_17.c":64:26)
#loc89 = loc("CWE190_Integer_Overflow__int_max_add_17.c":65:26)
#loc90 = loc("CWE190_Integer_Overflow__int_max_add_17.c":65:13)
#loc91 = loc("CWE190_Integer_Overflow__int_max_add_17.c":69:13)
#loc92 = loc("CWE190_Integer_Overflow__int_max_add_17.c":59:24)
#loc93 = loc("CWE190_Integer_Overflow__int_max_add_17.c":59:23)
#loc94 = loc("CWE190_Integer_Overflow__int_max_add_17.c":75:1)
#loc95 = loc("CWE190_Integer_Overflow__int_max_add_17.c":94:1)
#loc96 = loc("CWE190_Integer_Overflow__int_max_add_17.c":77:5)
#loc97 = loc("CWE190_Integer_Overflow__int_max_add_17.c":77:9)
#loc98 = loc("CWE190_Integer_Overflow__int_max_add_17.c":77:11)
#loc99 = loc("CWE190_Integer_Overflow__int_max_add_17.c":78:5)
#loc100 = loc("CWE190_Integer_Overflow__int_max_add_17.c":78:9)
#loc101 = loc("CWE190_Integer_Overflow__int_max_add_17.c":80:12)
#loc102 = loc("CWE190_Integer_Overflow__int_max_add_17.c":80:5)
#loc103 = loc("CWE190_Integer_Overflow__int_max_add_17.c":81:5)
#loc104 = loc("CWE190_Integer_Overflow__int_max_add_17.c":85:5)
#loc105 = loc("CWE190_Integer_Overflow__int_max_add_17.c":81:13)
#loc106 = loc("CWE190_Integer_Overflow__int_max_add_17.c":81:9)
#loc107 = loc("CWE190_Integer_Overflow__int_max_add_17.c":81:16)
#loc108 = loc("CWE190_Integer_Overflow__int_max_add_17.c":81:20)
#loc109 = loc("CWE190_Integer_Overflow__int_max_add_17.c":81:18)
#loc110 = loc("CWE190_Integer_Overflow__int_max_add_17.c":82:5)
#loc111 = loc("CWE190_Integer_Overflow__int_max_add_17.c":84:16)
#loc112 = loc("CWE190_Integer_Overflow__int_max_add_17.c":84:9)
#loc113 = loc("CWE190_Integer_Overflow__int_max_add_17.c":81:24)
#loc114 = loc("CWE190_Integer_Overflow__int_max_add_17.c":81:23)
#loc115 = loc("CWE190_Integer_Overflow__int_max_add_17.c":86:5)
#loc116 = loc("CWE190_Integer_Overflow__int_max_add_17.c":93:5)
#loc117 = loc("CWE190_Integer_Overflow__int_max_add_17.c":86:13)
#loc118 = loc("CWE190_Integer_Overflow__int_max_add_17.c":86:9)
#loc119 = loc("CWE190_Integer_Overflow__int_max_add_17.c":86:16)
#loc120 = loc("CWE190_Integer_Overflow__int_max_add_17.c":86:20)
#loc121 = loc("CWE190_Integer_Overflow__int_max_add_17.c":86:18)
#loc122 = loc("CWE190_Integer_Overflow__int_max_add_17.c":87:5)
#loc123 = loc("CWE190_Integer_Overflow__int_max_add_17.c":88:9)
#loc124 = loc("CWE190_Integer_Overflow__int_max_add_17.c":92:9)
#loc125 = loc("CWE190_Integer_Overflow__int_max_add_17.c":90:13)
#loc126 = loc("CWE190_Integer_Overflow__int_max_add_17.c":90:33)
#loc127 = loc("CWE190_Integer_Overflow__int_max_add_17.c":90:26)
#loc128 = loc("CWE190_Integer_Overflow__int_max_add_17.c":91:26)
#loc129 = loc("CWE190_Integer_Overflow__int_max_add_17.c":91:13)
#loc130 = loc("CWE190_Integer_Overflow__int_max_add_17.c":86:24)
#loc131 = loc("CWE190_Integer_Overflow__int_max_add_17.c":86:23)
#loc132 = loc(fused[#loc1, #loc2])
#loc133 = loc(fused[#loc3, #loc4])
#loc134 = loc(fused[#loc5, #loc6])
#loc135 = loc(fused[#loc5, #loc7])
#loc136 = loc(fused[#loc8, #loc9])
#loc137 = loc(fused[#loc11, #loc10])
#loc138 = loc(fused[#loc12, #loc13])
#loc139 = loc(fused[#loc15, #loc14])
#loc140 = loc(fused[#loc16, #loc17])
#loc141 = loc(fused[#loc19, #loc13])
#loc142 = loc(fused[#loc21, #loc20])
#loc143 = loc(fused[#loc23, #loc22])
#loc144 = loc(fused[#loc24, #loc25])
#loc145 = loc(fused[#loc27, #loc26])
#loc146 = loc(fused[#loc28, #loc29])
#loc147 = loc(fused[#loc31, #loc25])
#loc148 = loc(fused[#loc32, #loc33])
#loc149 = loc(fused[#loc34, #loc35])
#loc150 = loc(fused[#loc40, #loc39])
#loc151 = loc(fused[#loc41, #loc42])
#loc152 = loc(fused[#loc43, #loc44])
#loc153 = loc(fused[#loc45, #loc46])
#loc154 = loc(fused[#loc47, #loc48])
#loc155 = loc(fused[#loc50, #loc51])
#loc156 = loc(fused[#loc52, #loc53])
#loc157 = loc(fused[#loc52, #loc54])
#loc158 = loc(fused[#loc55, #loc56])
#loc159 = loc(fused[#loc58, #loc57])
#loc160 = loc(fused[#loc59, #loc60])
#loc161 = loc(fused[#loc62, #loc61])
#loc162 = loc(fused[#loc63, #loc64])
#loc163 = loc(fused[#loc66, #loc60])
#loc164 = loc(fused[#loc68, #loc67])
#loc165 = loc(fused[#loc70, #loc69])
#loc166 = loc(fused[#loc71, #loc72])
#loc167 = loc(fused[#loc74, #loc73])
#loc168 = loc(fused[#loc75, #loc76])
#loc169 = loc(fused[#loc78, #loc72])
#loc170 = loc(fused[#loc79, #loc80])
#loc171 = loc(fused[#loc81, #loc82])
#loc172 = loc(fused[#loc83, #loc84, #loc85, #loc80])
#loc173 = loc(fused[#loc86, #loc87])
#loc174 = loc(fused[#loc93, #loc92])
#loc175 = loc(fused[#loc94, #loc95])
#loc176 = loc(fused[#loc96, #loc97])
#loc177 = loc(fused[#loc96, #loc98])
#loc178 = loc(fused[#loc99, #loc100])
#loc179 = loc(fused[#loc102, #loc101])
#loc180 = loc(fused[#loc103, #loc104])
#loc181 = loc(fused[#loc106, #loc105])
#loc182 = loc(fused[#loc107, #loc108])
#loc183 = loc(fused[#loc110, #loc104])
#loc184 = loc(fused[#loc112, #loc111])
#loc185 = loc(fused[#loc114, #loc113])
#loc186 = loc(fused[#loc115, #loc116])
#loc187 = loc(fused[#loc118, #loc117])
#loc188 = loc(fused[#loc119, #loc120])
#loc189 = loc(fused[#loc122, #loc116])
#loc190 = loc(fused[#loc123, #loc124])
#loc191 = loc(fused[#loc125, #loc126])
#loc192 = loc(fused[#loc131, #loc130])
