!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.record<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.record<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.record<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#true = #cir.bool<true> : !cir.bool
!ty__IO_FILE = !cir.record<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.global "private" internal dsolocal @staticTrue = #cir.int<1> : !s32i {alignment = 4 : i64} loc(#loc438)
  cir.func private @__isoc99_fscanf(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i loc(#loc439)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc440)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"%d\00" : !cir.array<!s8i x 3>> : !cir.array<!s8i x 3> {alignment = 1 : i64} loc(#loc7)
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc441)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc442)
  cir.func private @printIntLine(!s32i) loc(#loc443)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc444)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"ERROR: Array index is negative.\00" : !cir.array<!s8i x 32>> : !cir.array<!s8i x 32> {alignment = 1 : i64} loc(#loc16)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc445)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc447)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc23)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc24)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc448)
    cir.scope {
      %3 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc438)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc28)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc28)
      cir.if %5 {
        %6 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc30)
        %7 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc440)
        %8 = cir.load %7 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc31)
        %9 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc7)
        %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc7)
        %11 = cir.call @__isoc99_fscanf(%8, %10, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s32i>) -> !s32i loc(#loc30)
      } loc(#loc450)
    } loc(#loc449)
    cir.scope {
      %3 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc438)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc34)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc34)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc454)
          %7 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc455)
          %8 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc42)
          %9 = cir.const #cir.int<10> : !s32i loc(#loc43)
          %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc43)
          %11 = cir.const #cir.int<4> : !u64i loc(#loc456)
          %12 = cir.binop(mul, %10, %11) : !u64i loc(#loc457)
          %13 = cir.call @malloc(%12) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc42)
          %14 = cir.cast(bitcast, %13 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc458)
          cir.store %14, %7 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc455)
          cir.scope {
            %18 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc48)
            %19 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc49)
            %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc49)
            %21 = cir.cmp(eq, %18, %20) : !cir.ptr<!s32i>, !cir.bool loc(#loc460)
            cir.if %21 {
              %22 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc51)
              %23 = cir.const #cir.int<1> : !s32i loc(#loc52)
              %24 = cir.unary(minus, %23) nsw : !s32i, !s32i loc(#loc53)
              cir.call @exit(%24) : (!s32i) -> () extra(#fn_attr) loc(#loc51)
            } loc(#loc461)
          } loc(#loc459)
          cir.scope {
            %18 = cir.const #cir.int<0> : !s32i loc(#loc56)
            cir.store %18, %6 : !s32i, !cir.ptr<!s32i> loc(#loc463)
            cir.for : cond {
              %19 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc58)
              %20 = cir.const #cir.int<10> : !s32i loc(#loc59)
              %21 = cir.cmp(lt, %19, %20) : !s32i, !cir.bool loc(#loc464)
              cir.condition(%21) loc(#loc60)
            } body {
              cir.scope {
                %19 = cir.const #cir.int<0> : !s32i loc(#loc62)
                %20 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc63)
                %21 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc64)
                %22 = cir.ptr_stride(%20 : !cir.ptr<!s32i>, %21 : !s32i), !cir.ptr<!s32i> loc(#loc65)
                cir.store %19, %22 : !s32i, !cir.ptr<!s32i> loc(#loc466)
              } loc(#loc465)
              cir.yield loc(#loc55)
            } step {
              %19 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc66)
              %20 = cir.unary(inc, %19) nsw : !s32i, !s32i loc(#loc67)
              cir.store %20, %6 : !s32i, !cir.ptr<!s32i> loc(#loc467)
              cir.yield loc(#loc462)
            } loc(#loc462)
          } loc(#loc462)
          cir.scope {
            %18 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc70)
            %19 = cir.const #cir.int<0> : !s32i loc(#loc71)
            %20 = cir.cmp(ge, %18, %19) : !s32i, !cir.bool loc(#loc469)
            cir.if %20 {
              %21 = cir.const #cir.int<1> : !s32i loc(#loc75)
              %22 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc76)
              %23 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc77)
              %24 = cir.ptr_stride(%22 : !cir.ptr<!s32i>, %23 : !s32i), !cir.ptr<!s32i> loc(#loc78)
              cir.store %21, %24 : !s32i, !cir.ptr<!s32i> loc(#loc471)
              cir.scope {
                %25 = cir.const #cir.int<0> : !s32i loc(#loc81)
                cir.store %25, %6 : !s32i, !cir.ptr<!s32i> loc(#loc473)
                cir.for : cond {
                  %26 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc83)
                  %27 = cir.const #cir.int<10> : !s32i loc(#loc84)
                  %28 = cir.cmp(lt, %26, %27) : !s32i, !cir.bool loc(#loc474)
                  cir.condition(%28) loc(#loc85)
                } body {
                  cir.scope {
                    %26 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc87)
                    %27 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc88)
                    %28 = cir.ptr_stride(%26 : !cir.ptr<!s32i>, %27 : !s32i), !cir.ptr<!s32i> loc(#loc89)
                    %29 = cir.load %28 : !cir.ptr<!s32i>, !s32i loc(#loc87)
                    cir.call @printIntLine(%29) : (!s32i) -> () loc(#loc90)
                  } loc(#loc475)
                  cir.yield loc(#loc80)
                } step {
                  %26 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc91)
                  %27 = cir.unary(inc, %26) nsw : !s32i, !s32i loc(#loc92)
                  cir.store %27, %6 : !s32i, !cir.ptr<!s32i> loc(#loc476)
                  cir.yield loc(#loc472)
                } loc(#loc472)
              } loc(#loc472)
            } else {
              %21 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc16)
              %22 = cir.cast(array_to_ptrdecay, %21 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc16)
              cir.call @printLine(%22) : (!cir.ptr<!s8i>) -> () loc(#loc93)
            } loc(#loc470)
          } loc(#loc468)
          %15 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc94)
          %16 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc95)
          %17 = cir.cast(bitcast, %16 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc95)
          cir.call @free(%17) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc94)
        } loc(#loc453)
      } loc(#loc452)
    } loc(#loc451)
    cir.return loc(#loc20)
  } loc(#loc446)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<()>> loc(#loc478)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc98)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<()>> loc(#loc479)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc100)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<()>> loc(#loc480)
    cir.call %2() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc102)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<()>> loc(#loc481)
    cir.call %3() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc104)
    cir.return loc(#loc97)
  } loc(#loc477)
  cir.global "private" internal dsolocal @staticFalse = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc482)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc108)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"ERROR: Array index is out-of-bounds\00" : !cir.array<!s8i x 36>> : !cir.array<!s8i x 36> {alignment = 1 : i64} loc(#loc109)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc484)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc114)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc115)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc485)
    cir.scope {
      %3 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc438)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc119)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc119)
      cir.if %5 {
        %6 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc121)
        %7 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc440)
        %8 = cir.load %7 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc122)
        %9 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc123)
        %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc123)
        %11 = cir.call @__isoc99_fscanf(%8, %10, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s32i>) -> !s32i loc(#loc121)
      } loc(#loc487)
    } loc(#loc486)
    cir.scope {
      %3 = cir.get_global @staticFalse : !cir.ptr<!s32i> loc(#loc482)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc126)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc126)
      cir.if %5 {
        %6 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc108)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc108)
        cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc130)
      } else {
        cir.scope {
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc491)
          %7 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc492)
          %8 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc137)
          %9 = cir.const #cir.int<10> : !s32i loc(#loc138)
          %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc138)
          %11 = cir.const #cir.int<4> : !u64i loc(#loc493)
          %12 = cir.binop(mul, %10, %11) : !u64i loc(#loc494)
          %13 = cir.call @malloc(%12) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc137)
          %14 = cir.cast(bitcast, %13 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc495)
          cir.store %14, %7 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc492)
          cir.scope {
            %18 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc143)
            %19 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc144)
            %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc144)
            %21 = cir.cmp(eq, %18, %20) : !cir.ptr<!s32i>, !cir.bool loc(#loc497)
            cir.if %21 {
              %22 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc146)
              %23 = cir.const #cir.int<1> : !s32i loc(#loc147)
              %24 = cir.unary(minus, %23) nsw : !s32i, !s32i loc(#loc148)
              cir.call @exit(%24) : (!s32i) -> () extra(#fn_attr) loc(#loc146)
            } loc(#loc498)
          } loc(#loc496)
          cir.scope {
            %18 = cir.const #cir.int<0> : !s32i loc(#loc151)
            cir.store %18, %6 : !s32i, !cir.ptr<!s32i> loc(#loc500)
            cir.for : cond {
              %19 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc153)
              %20 = cir.const #cir.int<10> : !s32i loc(#loc154)
              %21 = cir.cmp(lt, %19, %20) : !s32i, !cir.bool loc(#loc501)
              cir.condition(%21) loc(#loc155)
            } body {
              cir.scope {
                %19 = cir.const #cir.int<0> : !s32i loc(#loc157)
                %20 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc158)
                %21 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc159)
                %22 = cir.ptr_stride(%20 : !cir.ptr<!s32i>, %21 : !s32i), !cir.ptr<!s32i> loc(#loc160)
                cir.store %19, %22 : !s32i, !cir.ptr<!s32i> loc(#loc503)
              } loc(#loc502)
              cir.yield loc(#loc150)
            } step {
              %19 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc161)
              %20 = cir.unary(inc, %19) nsw : !s32i, !s32i loc(#loc162)
              cir.store %20, %6 : !s32i, !cir.ptr<!s32i> loc(#loc504)
              cir.yield loc(#loc499)
            } loc(#loc499)
          } loc(#loc499)
          cir.scope {
            %18 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc165)
            %19 = cir.const #cir.int<0> : !s32i loc(#loc166)
            %20 = cir.cmp(ge, %18, %19) : !s32i, !cir.bool loc(#loc506)
            %21 = cir.ternary(%20, true {
              %22 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc168)
              %23 = cir.const #cir.int<10> : !s32i loc(#loc169)
              %24 = cir.cmp(lt, %22, %23) : !s32i, !cir.bool loc(#loc507)
              %25 = cir.ternary(%24, true {
                %26 = cir.const #true loc(#loc167)
                cir.yield %26 : !cir.bool loc(#loc167)
              }, false {
                %26 = cir.const #false loc(#loc167)
                cir.yield %26 : !cir.bool loc(#loc167)
              }) : (!cir.bool) -> !cir.bool loc(#loc167)
              cir.yield %25 : !cir.bool loc(#loc167)
            }, false {
              %22 = cir.const #false loc(#loc167)
              cir.yield %22 : !cir.bool loc(#loc167)
            }) : (!cir.bool) -> !cir.bool loc(#loc167)
            cir.if %21 {
              %22 = cir.const #cir.int<1> : !s32i loc(#loc174)
              %23 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc175)
              %24 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc176)
              %25 = cir.ptr_stride(%23 : !cir.ptr<!s32i>, %24 : !s32i), !cir.ptr<!s32i> loc(#loc177)
              cir.store %22, %25 : !s32i, !cir.ptr<!s32i> loc(#loc509)
              cir.scope {
                %26 = cir.const #cir.int<0> : !s32i loc(#loc180)
                cir.store %26, %6 : !s32i, !cir.ptr<!s32i> loc(#loc511)
                cir.for : cond {
                  %27 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc182)
                  %28 = cir.const #cir.int<10> : !s32i loc(#loc183)
                  %29 = cir.cmp(lt, %27, %28) : !s32i, !cir.bool loc(#loc512)
                  cir.condition(%29) loc(#loc184)
                } body {
                  cir.scope {
                    %27 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc186)
                    %28 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc187)
                    %29 = cir.ptr_stride(%27 : !cir.ptr<!s32i>, %28 : !s32i), !cir.ptr<!s32i> loc(#loc188)
                    %30 = cir.load %29 : !cir.ptr<!s32i>, !s32i loc(#loc186)
                    cir.call @printIntLine(%30) : (!s32i) -> () loc(#loc189)
                  } loc(#loc513)
                  cir.yield loc(#loc179)
                } step {
                  %27 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc190)
                  %28 = cir.unary(inc, %27) nsw : !s32i, !s32i loc(#loc191)
                  cir.store %28, %6 : !s32i, !cir.ptr<!s32i> loc(#loc514)
                  cir.yield loc(#loc510)
                } loc(#loc510)
              } loc(#loc510)
            } else {
              %22 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc109)
              %23 = cir.cast(array_to_ptrdecay, %22 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc109)
              cir.call @printLine(%23) : (!cir.ptr<!s8i>) -> () loc(#loc192)
            } loc(#loc508)
          } loc(#loc505)
          %15 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc193)
          %16 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc194)
          %17 = cir.cast(bitcast, %16 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc194)
          cir.call @free(%17) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc193)
        } loc(#loc490)
      } loc(#loc489)
    } loc(#loc488)
    cir.return loc(#loc111)
  } loc(#loc483)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc516)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc199)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc200)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc517)
    cir.scope {
      %3 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc438)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc204)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc204)
      cir.if %5 {
        %6 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc206)
        %7 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc440)
        %8 = cir.load %7 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc207)
        %9 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc208)
        %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc208)
        %11 = cir.call @__isoc99_fscanf(%8, %10, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s32i>) -> !s32i loc(#loc206)
      } loc(#loc519)
    } loc(#loc518)
    cir.scope {
      %3 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc438)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc211)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc211)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc523)
          %7 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc524)
          %8 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc219)
          %9 = cir.const #cir.int<10> : !s32i loc(#loc220)
          %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc220)
          %11 = cir.const #cir.int<4> : !u64i loc(#loc525)
          %12 = cir.binop(mul, %10, %11) : !u64i loc(#loc526)
          %13 = cir.call @malloc(%12) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc219)
          %14 = cir.cast(bitcast, %13 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc527)
          cir.store %14, %7 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc524)
          cir.scope {
            %18 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc225)
            %19 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc226)
            %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc226)
            %21 = cir.cmp(eq, %18, %20) : !cir.ptr<!s32i>, !cir.bool loc(#loc529)
            cir.if %21 {
              %22 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc228)
              %23 = cir.const #cir.int<1> : !s32i loc(#loc229)
              %24 = cir.unary(minus, %23) nsw : !s32i, !s32i loc(#loc230)
              cir.call @exit(%24) : (!s32i) -> () extra(#fn_attr) loc(#loc228)
            } loc(#loc530)
          } loc(#loc528)
          cir.scope {
            %18 = cir.const #cir.int<0> : !s32i loc(#loc233)
            cir.store %18, %6 : !s32i, !cir.ptr<!s32i> loc(#loc532)
            cir.for : cond {
              %19 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc235)
              %20 = cir.const #cir.int<10> : !s32i loc(#loc236)
              %21 = cir.cmp(lt, %19, %20) : !s32i, !cir.bool loc(#loc533)
              cir.condition(%21) loc(#loc237)
            } body {
              cir.scope {
                %19 = cir.const #cir.int<0> : !s32i loc(#loc239)
                %20 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc240)
                %21 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc241)
                %22 = cir.ptr_stride(%20 : !cir.ptr<!s32i>, %21 : !s32i), !cir.ptr<!s32i> loc(#loc242)
                cir.store %19, %22 : !s32i, !cir.ptr<!s32i> loc(#loc535)
              } loc(#loc534)
              cir.yield loc(#loc232)
            } step {
              %19 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc243)
              %20 = cir.unary(inc, %19) nsw : !s32i, !s32i loc(#loc244)
              cir.store %20, %6 : !s32i, !cir.ptr<!s32i> loc(#loc536)
              cir.yield loc(#loc531)
            } loc(#loc531)
          } loc(#loc531)
          cir.scope {
            %18 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc247)
            %19 = cir.const #cir.int<0> : !s32i loc(#loc248)
            %20 = cir.cmp(ge, %18, %19) : !s32i, !cir.bool loc(#loc538)
            %21 = cir.ternary(%20, true {
              %22 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc250)
              %23 = cir.const #cir.int<10> : !s32i loc(#loc251)
              %24 = cir.cmp(lt, %22, %23) : !s32i, !cir.bool loc(#loc539)
              %25 = cir.ternary(%24, true {
                %26 = cir.const #true loc(#loc249)
                cir.yield %26 : !cir.bool loc(#loc249)
              }, false {
                %26 = cir.const #false loc(#loc249)
                cir.yield %26 : !cir.bool loc(#loc249)
              }) : (!cir.bool) -> !cir.bool loc(#loc249)
              cir.yield %25 : !cir.bool loc(#loc249)
            }, false {
              %22 = cir.const #false loc(#loc249)
              cir.yield %22 : !cir.bool loc(#loc249)
            }) : (!cir.bool) -> !cir.bool loc(#loc249)
            cir.if %21 {
              %22 = cir.const #cir.int<1> : !s32i loc(#loc256)
              %23 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc257)
              %24 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc258)
              %25 = cir.ptr_stride(%23 : !cir.ptr<!s32i>, %24 : !s32i), !cir.ptr<!s32i> loc(#loc259)
              cir.store %22, %25 : !s32i, !cir.ptr<!s32i> loc(#loc541)
              cir.scope {
                %26 = cir.const #cir.int<0> : !s32i loc(#loc262)
                cir.store %26, %6 : !s32i, !cir.ptr<!s32i> loc(#loc543)
                cir.for : cond {
                  %27 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc264)
                  %28 = cir.const #cir.int<10> : !s32i loc(#loc265)
                  %29 = cir.cmp(lt, %27, %28) : !s32i, !cir.bool loc(#loc544)
                  cir.condition(%29) loc(#loc266)
                } body {
                  cir.scope {
                    %27 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc268)
                    %28 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc269)
                    %29 = cir.ptr_stride(%27 : !cir.ptr<!s32i>, %28 : !s32i), !cir.ptr<!s32i> loc(#loc270)
                    %30 = cir.load %29 : !cir.ptr<!s32i>, !s32i loc(#loc268)
                    cir.call @printIntLine(%30) : (!s32i) -> () loc(#loc271)
                  } loc(#loc545)
                  cir.yield loc(#loc261)
                } step {
                  %27 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc272)
                  %28 = cir.unary(inc, %27) nsw : !s32i, !s32i loc(#loc273)
                  cir.store %28, %6 : !s32i, !cir.ptr<!s32i> loc(#loc546)
                  cir.yield loc(#loc542)
                } loc(#loc542)
              } loc(#loc542)
            } else {
              %22 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc274)
              %23 = cir.cast(array_to_ptrdecay, %22 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc274)
              cir.call @printLine(%23) : (!cir.ptr<!s8i>) -> () loc(#loc275)
            } loc(#loc540)
          } loc(#loc537)
          %15 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc276)
          %16 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc277)
          %17 = cir.cast(bitcast, %16 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc277)
          cir.call @free(%17) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc276)
        } loc(#loc522)
      } loc(#loc521)
    } loc(#loc520)
    cir.return loc(#loc196)
  } loc(#loc515)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc548)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc282)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc283)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc549)
    cir.scope {
      %3 = cir.get_global @staticFalse : !cir.ptr<!s32i> loc(#loc482)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc287)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc287)
      cir.if %5 {
        %6 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc291)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc291)
        cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc292)
      } else {
        %6 = cir.const #cir.int<7> : !s32i loc(#loc293)
        cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc552)
      } loc(#loc551)
    } loc(#loc550)
    cir.scope {
      %3 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc438)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc297)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc297)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc556)
          %7 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc557)
          %8 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc305)
          %9 = cir.const #cir.int<10> : !s32i loc(#loc306)
          %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc306)
          %11 = cir.const #cir.int<4> : !u64i loc(#loc558)
          %12 = cir.binop(mul, %10, %11) : !u64i loc(#loc559)
          %13 = cir.call @malloc(%12) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc305)
          %14 = cir.cast(bitcast, %13 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc560)
          cir.store %14, %7 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc557)
          cir.scope {
            %18 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc311)
            %19 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc312)
            %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc312)
            %21 = cir.cmp(eq, %18, %20) : !cir.ptr<!s32i>, !cir.bool loc(#loc562)
            cir.if %21 {
              %22 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc314)
              %23 = cir.const #cir.int<1> : !s32i loc(#loc315)
              %24 = cir.unary(minus, %23) nsw : !s32i, !s32i loc(#loc316)
              cir.call @exit(%24) : (!s32i) -> () extra(#fn_attr) loc(#loc314)
            } loc(#loc563)
          } loc(#loc561)
          cir.scope {
            %18 = cir.const #cir.int<0> : !s32i loc(#loc319)
            cir.store %18, %6 : !s32i, !cir.ptr<!s32i> loc(#loc565)
            cir.for : cond {
              %19 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc321)
              %20 = cir.const #cir.int<10> : !s32i loc(#loc322)
              %21 = cir.cmp(lt, %19, %20) : !s32i, !cir.bool loc(#loc566)
              cir.condition(%21) loc(#loc323)
            } body {
              cir.scope {
                %19 = cir.const #cir.int<0> : !s32i loc(#loc325)
                %20 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc326)
                %21 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc327)
                %22 = cir.ptr_stride(%20 : !cir.ptr<!s32i>, %21 : !s32i), !cir.ptr<!s32i> loc(#loc328)
                cir.store %19, %22 : !s32i, !cir.ptr<!s32i> loc(#loc568)
              } loc(#loc567)
              cir.yield loc(#loc318)
            } step {
              %19 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc329)
              %20 = cir.unary(inc, %19) nsw : !s32i, !s32i loc(#loc330)
              cir.store %20, %6 : !s32i, !cir.ptr<!s32i> loc(#loc569)
              cir.yield loc(#loc564)
            } loc(#loc564)
          } loc(#loc564)
          cir.scope {
            %18 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc333)
            %19 = cir.const #cir.int<0> : !s32i loc(#loc334)
            %20 = cir.cmp(ge, %18, %19) : !s32i, !cir.bool loc(#loc571)
            cir.if %20 {
              %21 = cir.const #cir.int<1> : !s32i loc(#loc338)
              %22 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc339)
              %23 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc340)
              %24 = cir.ptr_stride(%22 : !cir.ptr<!s32i>, %23 : !s32i), !cir.ptr<!s32i> loc(#loc341)
              cir.store %21, %24 : !s32i, !cir.ptr<!s32i> loc(#loc573)
              cir.scope {
                %25 = cir.const #cir.int<0> : !s32i loc(#loc344)
                cir.store %25, %6 : !s32i, !cir.ptr<!s32i> loc(#loc575)
                cir.for : cond {
                  %26 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc346)
                  %27 = cir.const #cir.int<10> : !s32i loc(#loc347)
                  %28 = cir.cmp(lt, %26, %27) : !s32i, !cir.bool loc(#loc576)
                  cir.condition(%28) loc(#loc348)
                } body {
                  cir.scope {
                    %26 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc350)
                    %27 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc351)
                    %28 = cir.ptr_stride(%26 : !cir.ptr<!s32i>, %27 : !s32i), !cir.ptr<!s32i> loc(#loc352)
                    %29 = cir.load %28 : !cir.ptr<!s32i>, !s32i loc(#loc350)
                    cir.call @printIntLine(%29) : (!s32i) -> () loc(#loc353)
                  } loc(#loc577)
                  cir.yield loc(#loc343)
                } step {
                  %26 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc354)
                  %27 = cir.unary(inc, %26) nsw : !s32i, !s32i loc(#loc355)
                  cir.store %27, %6 : !s32i, !cir.ptr<!s32i> loc(#loc578)
                  cir.yield loc(#loc574)
                } loc(#loc574)
              } loc(#loc574)
            } else {
              %21 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc356)
              %22 = cir.cast(array_to_ptrdecay, %21 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc356)
              cir.call @printLine(%22) : (!cir.ptr<!s8i>) -> () loc(#loc357)
            } loc(#loc572)
          } loc(#loc570)
          %15 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc358)
          %16 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc359)
          %17 = cir.cast(bitcast, %16 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc359)
          cir.call @free(%17) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc358)
        } loc(#loc555)
      } loc(#loc554)
    } loc(#loc553)
    cir.return loc(#loc279)
  } loc(#loc547)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc580)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc364)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc365)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc581)
    cir.scope {
      %3 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc438)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc369)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc369)
      cir.if %5 {
        %6 = cir.const #cir.int<7> : !s32i loc(#loc371)
        cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc584)
      } loc(#loc583)
    } loc(#loc582)
    cir.scope {
      %3 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc438)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc375)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc375)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc588)
          %7 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc589)
          %8 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc383)
          %9 = cir.const #cir.int<10> : !s32i loc(#loc384)
          %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc384)
          %11 = cir.const #cir.int<4> : !u64i loc(#loc590)
          %12 = cir.binop(mul, %10, %11) : !u64i loc(#loc591)
          %13 = cir.call @malloc(%12) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc383)
          %14 = cir.cast(bitcast, %13 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc592)
          cir.store %14, %7 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc589)
          cir.scope {
            %18 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc389)
            %19 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc390)
            %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc390)
            %21 = cir.cmp(eq, %18, %20) : !cir.ptr<!s32i>, !cir.bool loc(#loc594)
            cir.if %21 {
              %22 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc392)
              %23 = cir.const #cir.int<1> : !s32i loc(#loc393)
              %24 = cir.unary(minus, %23) nsw : !s32i, !s32i loc(#loc394)
              cir.call @exit(%24) : (!s32i) -> () extra(#fn_attr) loc(#loc392)
            } loc(#loc595)
          } loc(#loc593)
          cir.scope {
            %18 = cir.const #cir.int<0> : !s32i loc(#loc397)
            cir.store %18, %6 : !s32i, !cir.ptr<!s32i> loc(#loc597)
            cir.for : cond {
              %19 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc399)
              %20 = cir.const #cir.int<10> : !s32i loc(#loc400)
              %21 = cir.cmp(lt, %19, %20) : !s32i, !cir.bool loc(#loc598)
              cir.condition(%21) loc(#loc401)
            } body {
              cir.scope {
                %19 = cir.const #cir.int<0> : !s32i loc(#loc403)
                %20 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc404)
                %21 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc405)
                %22 = cir.ptr_stride(%20 : !cir.ptr<!s32i>, %21 : !s32i), !cir.ptr<!s32i> loc(#loc406)
                cir.store %19, %22 : !s32i, !cir.ptr<!s32i> loc(#loc600)
              } loc(#loc599)
              cir.yield loc(#loc396)
            } step {
              %19 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc407)
              %20 = cir.unary(inc, %19) nsw : !s32i, !s32i loc(#loc408)
              cir.store %20, %6 : !s32i, !cir.ptr<!s32i> loc(#loc601)
              cir.yield loc(#loc596)
            } loc(#loc596)
          } loc(#loc596)
          cir.scope {
            %18 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc411)
            %19 = cir.const #cir.int<0> : !s32i loc(#loc412)
            %20 = cir.cmp(ge, %18, %19) : !s32i, !cir.bool loc(#loc603)
            cir.if %20 {
              %21 = cir.const #cir.int<1> : !s32i loc(#loc416)
              %22 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc417)
              %23 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc418)
              %24 = cir.ptr_stride(%22 : !cir.ptr<!s32i>, %23 : !s32i), !cir.ptr<!s32i> loc(#loc419)
              cir.store %21, %24 : !s32i, !cir.ptr<!s32i> loc(#loc605)
              cir.scope {
                %25 = cir.const #cir.int<0> : !s32i loc(#loc422)
                cir.store %25, %6 : !s32i, !cir.ptr<!s32i> loc(#loc607)
                cir.for : cond {
                  %26 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc424)
                  %27 = cir.const #cir.int<10> : !s32i loc(#loc425)
                  %28 = cir.cmp(lt, %26, %27) : !s32i, !cir.bool loc(#loc608)
                  cir.condition(%28) loc(#loc426)
                } body {
                  cir.scope {
                    %26 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc428)
                    %27 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc429)
                    %28 = cir.ptr_stride(%26 : !cir.ptr<!s32i>, %27 : !s32i), !cir.ptr<!s32i> loc(#loc430)
                    %29 = cir.load %28 : !cir.ptr<!s32i>, !s32i loc(#loc428)
                    cir.call @printIntLine(%29) : (!s32i) -> () loc(#loc431)
                  } loc(#loc609)
                  cir.yield loc(#loc421)
                } step {
                  %26 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc432)
                  %27 = cir.unary(inc, %26) nsw : !s32i, !s32i loc(#loc433)
                  cir.store %27, %6 : !s32i, !cir.ptr<!s32i> loc(#loc610)
                  cir.yield loc(#loc606)
                } loc(#loc606)
              } loc(#loc606)
            } else {
              %21 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc434)
              %22 = cir.cast(array_to_ptrdecay, %21 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc434)
              cir.call @printLine(%22) : (!cir.ptr<!s8i>) -> () loc(#loc435)
            } loc(#loc604)
          } loc(#loc602)
          %15 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc436)
          %16 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc437)
          %17 = cir.cast(bitcast, %16 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc437)
          cir.call @free(%17) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc436)
        } loc(#loc587)
      } loc(#loc586)
    } loc(#loc585)
    cir.return loc(#loc361)
  } loc(#loc579)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":0:0)
#loc1 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":23:1)
#loc2 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":23:25)
#loc3 = loc("/usr/include/stdio.h":463:1)
#loc4 = loc("/usr/include/stdio.h":465:33)
#loc5 = loc("/usr/include/stdio.h":149:1)
#loc6 = loc("/usr/include/stdio.h":149:14)
#loc7 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":36:23)
#loc8 = loc("/usr/include/stdlib.h":672:1)
#loc9 = loc("/usr/include/stdlib.h":672:45)
#loc10 = loc("/usr/include/stdlib.h":756:1)
#loc11 = loc("/usr/include/stdlib.h":756:70)
#loc12 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc13 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc14 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc15 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":62:27)
#loc17 = loc("/usr/include/stdlib.h":687:1)
#loc18 = loc("/usr/include/stdlib.h":687:32)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":28:1)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":67:1)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":30:5)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":30:9)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":32:13)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":32:12)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":32:5)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":33:5)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":37:5)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":33:8)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":34:5)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":36:9)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":36:16)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":38:5)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":66:5)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":38:8)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":39:5)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":40:9)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":65:9)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":41:13)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":41:17)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":42:13)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":42:58)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":42:35)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":42:42)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":42:47)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":42:57)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":43:13)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":43:43)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":43:17)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":43:27)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":43:33)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":43:34)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":43:40)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":43:39)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":45:13)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":48:13)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":45:22)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":45:18)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":45:25)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":45:29)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":45:27)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":46:13)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":47:29)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":47:17)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":47:24)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":47:25)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":45:34)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":45:33)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":51:13)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":63:13)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":51:17)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":51:25)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":52:13)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":59:13)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":61:13)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":53:32)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":53:17)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":53:24)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":53:28)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":55:17)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":58:17)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":55:25)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":55:21)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":55:28)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":55:32)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":55:30)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":56:17)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":57:34)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":57:41)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":57:42)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":57:21)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":55:37)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":55:36)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":62:17)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":64:13)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":64:18)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":251:1)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":257:1)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":253:5)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":253:14)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":254:5)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":254:14)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":255:5)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":255:14)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":256:5)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":256:14)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":24:1)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":24:26)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":87:19)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":112:27)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":74:1)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":117:1)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":76:5)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":76:9)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":78:13)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":78:12)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":78:5)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":79:5)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":83:5)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":79:8)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":80:5)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":82:9)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":82:16)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":82:23)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":84:5)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":116:5)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":84:8)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":85:5)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":88:5)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":90:5)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":87:9)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":91:9)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":115:9)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":92:13)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":92:17)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":93:13)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":93:58)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":93:35)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":93:42)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":93:47)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":93:57)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":94:13)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":94:43)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":94:17)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":94:27)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":94:33)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":94:34)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":94:40)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":94:39)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":96:13)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":99:13)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":96:22)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":96:18)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":96:25)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":96:29)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":96:27)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":97:13)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":98:29)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":98:17)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":98:24)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":98:25)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":96:34)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":96:33)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":101:13)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":113:13)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":101:17)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":101:25)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":101:27)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":101:30)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":101:38)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":101:40)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":102:13)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":109:13)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":111:13)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":103:32)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":103:17)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":103:24)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":103:28)
#loc178 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":105:17)
#loc179 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":108:17)
#loc180 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":105:25)
#loc181 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":105:21)
#loc182 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":105:28)
#loc183 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":105:32)
#loc184 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":105:30)
#loc185 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":106:17)
#loc186 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":107:34)
#loc187 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":107:41)
#loc188 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":107:42)
#loc189 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":107:21)
#loc190 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":105:37)
#loc191 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":105:36)
#loc192 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":112:17)
#loc193 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":114:13)
#loc194 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":114:18)
#loc195 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":120:1)
#loc196 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":158:1)
#loc197 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":122:5)
#loc198 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":122:9)
#loc199 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":124:13)
#loc200 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":124:12)
#loc201 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":124:5)
#loc202 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":125:5)
#loc203 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":129:5)
#loc204 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":125:8)
#loc205 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":126:5)
#loc206 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":128:9)
#loc207 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":128:16)
#loc208 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":128:23)
#loc209 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":130:5)
#loc210 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":157:5)
#loc211 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":130:8)
#loc212 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":131:5)
#loc213 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":132:9)
#loc214 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":156:9)
#loc215 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":133:13)
#loc216 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":133:17)
#loc217 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":134:13)
#loc218 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":134:58)
#loc219 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":134:35)
#loc220 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":134:42)
#loc221 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":134:47)
#loc222 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":134:57)
#loc223 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":135:13)
#loc224 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":135:43)
#loc225 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":135:17)
#loc226 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":135:27)
#loc227 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":135:33)
#loc228 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":135:34)
#loc229 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":135:40)
#loc230 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":135:39)
#loc231 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":137:13)
#loc232 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":140:13)
#loc233 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":137:22)
#loc234 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":137:18)
#loc235 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":137:25)
#loc236 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":137:29)
#loc237 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":137:27)
#loc238 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":138:13)
#loc239 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":139:29)
#loc240 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":139:17)
#loc241 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":139:24)
#loc242 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":139:25)
#loc243 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":137:34)
#loc244 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":137:33)
#loc245 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":142:13)
#loc246 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":154:13)
#loc247 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":142:17)
#loc248 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":142:25)
#loc249 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":142:27)
#loc250 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":142:30)
#loc251 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":142:38)
#loc252 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":142:40)
#loc253 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":143:13)
#loc254 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":150:13)
#loc255 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":152:13)
#loc256 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":144:32)
#loc257 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":144:17)
#loc258 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":144:24)
#loc259 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":144:28)
#loc260 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":146:17)
#loc261 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":149:17)
#loc262 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":146:25)
#loc263 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":146:21)
#loc264 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":146:28)
#loc265 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":146:32)
#loc266 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":146:30)
#loc267 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":147:17)
#loc268 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":148:34)
#loc269 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":148:41)
#loc270 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":148:42)
#loc271 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":148:21)
#loc272 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":146:37)
#loc273 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":146:36)
#loc274 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":153:27)
#loc275 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":153:17)
#loc276 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":155:13)
#loc277 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":155:18)
#loc278 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":161:1)
#loc279 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":206:1)
#loc280 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":163:5)
#loc281 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":163:9)
#loc282 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":165:13)
#loc283 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":165:12)
#loc284 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":165:5)
#loc285 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":166:5)
#loc286 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":176:5)
#loc287 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":166:8)
#loc288 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":167:5)
#loc289 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":170:5)
#loc290 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":172:5)
#loc291 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":169:19)
#loc292 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":169:9)
#loc293 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":175:16)
#loc294 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":175:9)
#loc295 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":177:5)
#loc296 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":205:5)
#loc297 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":177:8)
#loc298 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":178:5)
#loc299 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":179:9)
#loc300 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":204:9)
#loc301 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":180:13)
#loc302 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":180:17)
#loc303 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":181:13)
#loc304 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":181:58)
#loc305 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":181:35)
#loc306 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":181:42)
#loc307 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":181:47)
#loc308 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":181:57)
#loc309 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":182:13)
#loc310 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":182:43)
#loc311 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":182:17)
#loc312 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":182:27)
#loc313 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":182:33)
#loc314 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":182:34)
#loc315 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":182:40)
#loc316 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":182:39)
#loc317 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":184:13)
#loc318 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":187:13)
#loc319 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":184:22)
#loc320 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":184:18)
#loc321 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":184:25)
#loc322 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":184:29)
#loc323 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":184:27)
#loc324 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":185:13)
#loc325 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":186:29)
#loc326 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":186:17)
#loc327 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":186:24)
#loc328 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":186:25)
#loc329 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":184:34)
#loc330 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":184:33)
#loc331 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":190:13)
#loc332 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":202:13)
#loc333 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":190:17)
#loc334 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":190:25)
#loc335 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":191:13)
#loc336 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":198:13)
#loc337 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":200:13)
#loc338 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":192:32)
#loc339 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":192:17)
#loc340 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":192:24)
#loc341 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":192:28)
#loc342 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":194:17)
#loc343 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":197:17)
#loc344 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":194:25)
#loc345 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":194:21)
#loc346 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":194:28)
#loc347 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":194:32)
#loc348 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":194:30)
#loc349 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":195:17)
#loc350 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":196:34)
#loc351 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":196:41)
#loc352 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":196:42)
#loc353 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":196:21)
#loc354 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":194:37)
#loc355 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":194:36)
#loc356 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":201:27)
#loc357 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":201:17)
#loc358 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":203:13)
#loc359 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":203:18)
#loc360 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":209:1)
#loc361 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":249:1)
#loc362 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":211:5)
#loc363 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":211:9)
#loc364 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":213:13)
#loc365 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":213:12)
#loc366 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":213:5)
#loc367 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":214:5)
#loc368 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":219:5)
#loc369 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":214:8)
#loc370 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":215:5)
#loc371 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":218:16)
#loc372 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":218:9)
#loc373 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":220:5)
#loc374 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":248:5)
#loc375 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":220:8)
#loc376 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":221:5)
#loc377 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":222:9)
#loc378 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":247:9)
#loc379 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":223:13)
#loc380 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":223:17)
#loc381 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":224:13)
#loc382 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":224:58)
#loc383 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":224:35)
#loc384 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":224:42)
#loc385 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":224:47)
#loc386 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":224:57)
#loc387 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":225:13)
#loc388 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":225:43)
#loc389 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":225:17)
#loc390 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":225:27)
#loc391 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":225:33)
#loc392 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":225:34)
#loc393 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":225:40)
#loc394 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":225:39)
#loc395 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":227:13)
#loc396 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":230:13)
#loc397 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":227:22)
#loc398 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":227:18)
#loc399 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":227:25)
#loc400 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":227:29)
#loc401 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":227:27)
#loc402 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":228:13)
#loc403 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":229:29)
#loc404 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":229:17)
#loc405 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":229:24)
#loc406 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":229:25)
#loc407 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":227:34)
#loc408 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":227:33)
#loc409 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":233:13)
#loc410 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":245:13)
#loc411 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":233:17)
#loc412 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":233:25)
#loc413 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":234:13)
#loc414 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":241:13)
#loc415 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":243:13)
#loc416 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":235:32)
#loc417 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":235:17)
#loc418 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":235:24)
#loc419 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":235:28)
#loc420 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":237:17)
#loc421 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":240:17)
#loc422 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":237:25)
#loc423 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":237:21)
#loc424 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":237:28)
#loc425 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":237:32)
#loc426 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":237:30)
#loc427 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":238:17)
#loc428 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":239:34)
#loc429 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":239:41)
#loc430 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":239:42)
#loc431 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":239:21)
#loc432 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":237:37)
#loc433 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":237:36)
#loc434 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":244:27)
#loc435 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":244:17)
#loc436 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":246:13)
#loc437 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c":246:18)
#loc438 = loc(fused[#loc1, #loc2])
#loc439 = loc(fused[#loc3, #loc4])
#loc440 = loc(fused[#loc5, #loc6])
#loc441 = loc(fused[#loc8, #loc9])
#loc442 = loc(fused[#loc10, #loc11])
#loc443 = loc(fused[#loc12, #loc13])
#loc444 = loc(fused[#loc14, #loc15])
#loc445 = loc(fused[#loc17, #loc18])
#loc446 = loc(fused[#loc19, #loc20])
#loc447 = loc(fused[#loc21, #loc22])
#loc448 = loc(fused[#loc25, #loc23])
#loc449 = loc(fused[#loc26, #loc27])
#loc450 = loc(fused[#loc29, #loc27])
#loc451 = loc(fused[#loc32, #loc33])
#loc452 = loc(fused[#loc35, #loc33])
#loc453 = loc(fused[#loc36, #loc37])
#loc454 = loc(fused[#loc38, #loc39])
#loc455 = loc(fused[#loc40, #loc41])
#loc456 = loc(fused[#loc44, #loc45])
#loc457 = loc(fused[#loc43, #loc45])
#loc458 = loc(fused[#loc42, #loc41])
#loc459 = loc(fused[#loc46, #loc47])
#loc460 = loc(fused[#loc48, #loc49])
#loc461 = loc(fused[#loc50, #loc47])
#loc462 = loc(fused[#loc54, #loc55])
#loc463 = loc(fused[#loc57, #loc56])
#loc464 = loc(fused[#loc58, #loc59])
#loc465 = loc(fused[#loc61, #loc55])
#loc466 = loc(fused[#loc63, #loc62])
#loc467 = loc(fused[#loc67, #loc66])
#loc468 = loc(fused[#loc68, #loc69])
#loc469 = loc(fused[#loc70, #loc71])
#loc470 = loc(fused[#loc72, #loc73, #loc74, #loc69])
#loc471 = loc(fused[#loc76, #loc75])
#loc472 = loc(fused[#loc79, #loc80])
#loc473 = loc(fused[#loc82, #loc81])
#loc474 = loc(fused[#loc83, #loc84])
#loc475 = loc(fused[#loc86, #loc80])
#loc476 = loc(fused[#loc92, #loc91])
#loc477 = loc(fused[#loc96, #loc97])
#loc478 = loc(fused[#loc98, #loc99])
#loc479 = loc(fused[#loc100, #loc101])
#loc480 = loc(fused[#loc102, #loc103])
#loc481 = loc(fused[#loc104, #loc105])
#loc482 = loc(fused[#loc106, #loc107])
#loc483 = loc(fused[#loc110, #loc111])
#loc484 = loc(fused[#loc112, #loc113])
#loc485 = loc(fused[#loc116, #loc114])
#loc486 = loc(fused[#loc117, #loc118])
#loc487 = loc(fused[#loc120, #loc118])
#loc488 = loc(fused[#loc124, #loc125])
#loc489 = loc(fused[#loc127, #loc128, #loc129, #loc125])
#loc490 = loc(fused[#loc131, #loc132])
#loc491 = loc(fused[#loc133, #loc134])
#loc492 = loc(fused[#loc135, #loc136])
#loc493 = loc(fused[#loc139, #loc140])
#loc494 = loc(fused[#loc138, #loc140])
#loc495 = loc(fused[#loc137, #loc136])
#loc496 = loc(fused[#loc141, #loc142])
#loc497 = loc(fused[#loc143, #loc144])
#loc498 = loc(fused[#loc145, #loc142])
#loc499 = loc(fused[#loc149, #loc150])
#loc500 = loc(fused[#loc152, #loc151])
#loc501 = loc(fused[#loc153, #loc154])
#loc502 = loc(fused[#loc156, #loc150])
#loc503 = loc(fused[#loc158, #loc157])
#loc504 = loc(fused[#loc162, #loc161])
#loc505 = loc(fused[#loc163, #loc164])
#loc506 = loc(fused[#loc165, #loc166])
#loc507 = loc(fused[#loc168, #loc170])
#loc508 = loc(fused[#loc171, #loc172, #loc173, #loc164])
#loc509 = loc(fused[#loc175, #loc174])
#loc510 = loc(fused[#loc178, #loc179])
#loc511 = loc(fused[#loc181, #loc180])
#loc512 = loc(fused[#loc182, #loc183])
#loc513 = loc(fused[#loc185, #loc179])
#loc514 = loc(fused[#loc191, #loc190])
#loc515 = loc(fused[#loc195, #loc196])
#loc516 = loc(fused[#loc197, #loc198])
#loc517 = loc(fused[#loc201, #loc199])
#loc518 = loc(fused[#loc202, #loc203])
#loc519 = loc(fused[#loc205, #loc203])
#loc520 = loc(fused[#loc209, #loc210])
#loc521 = loc(fused[#loc212, #loc210])
#loc522 = loc(fused[#loc213, #loc214])
#loc523 = loc(fused[#loc215, #loc216])
#loc524 = loc(fused[#loc217, #loc218])
#loc525 = loc(fused[#loc221, #loc222])
#loc526 = loc(fused[#loc220, #loc222])
#loc527 = loc(fused[#loc219, #loc218])
#loc528 = loc(fused[#loc223, #loc224])
#loc529 = loc(fused[#loc225, #loc226])
#loc530 = loc(fused[#loc227, #loc224])
#loc531 = loc(fused[#loc231, #loc232])
#loc532 = loc(fused[#loc234, #loc233])
#loc533 = loc(fused[#loc235, #loc236])
#loc534 = loc(fused[#loc238, #loc232])
#loc535 = loc(fused[#loc240, #loc239])
#loc536 = loc(fused[#loc244, #loc243])
#loc537 = loc(fused[#loc245, #loc246])
#loc538 = loc(fused[#loc247, #loc248])
#loc539 = loc(fused[#loc250, #loc252])
#loc540 = loc(fused[#loc253, #loc254, #loc255, #loc246])
#loc541 = loc(fused[#loc257, #loc256])
#loc542 = loc(fused[#loc260, #loc261])
#loc543 = loc(fused[#loc263, #loc262])
#loc544 = loc(fused[#loc264, #loc265])
#loc545 = loc(fused[#loc267, #loc261])
#loc546 = loc(fused[#loc273, #loc272])
#loc547 = loc(fused[#loc278, #loc279])
#loc548 = loc(fused[#loc280, #loc281])
#loc549 = loc(fused[#loc284, #loc282])
#loc550 = loc(fused[#loc285, #loc286])
#loc551 = loc(fused[#loc288, #loc289, #loc290, #loc286])
#loc552 = loc(fused[#loc294, #loc293])
#loc553 = loc(fused[#loc295, #loc296])
#loc554 = loc(fused[#loc298, #loc296])
#loc555 = loc(fused[#loc299, #loc300])
#loc556 = loc(fused[#loc301, #loc302])
#loc557 = loc(fused[#loc303, #loc304])
#loc558 = loc(fused[#loc307, #loc308])
#loc559 = loc(fused[#loc306, #loc308])
#loc560 = loc(fused[#loc305, #loc304])
#loc561 = loc(fused[#loc309, #loc310])
#loc562 = loc(fused[#loc311, #loc312])
#loc563 = loc(fused[#loc313, #loc310])
#loc564 = loc(fused[#loc317, #loc318])
#loc565 = loc(fused[#loc320, #loc319])
#loc566 = loc(fused[#loc321, #loc322])
#loc567 = loc(fused[#loc324, #loc318])
#loc568 = loc(fused[#loc326, #loc325])
#loc569 = loc(fused[#loc330, #loc329])
#loc570 = loc(fused[#loc331, #loc332])
#loc571 = loc(fused[#loc333, #loc334])
#loc572 = loc(fused[#loc335, #loc336, #loc337, #loc332])
#loc573 = loc(fused[#loc339, #loc338])
#loc574 = loc(fused[#loc342, #loc343])
#loc575 = loc(fused[#loc345, #loc344])
#loc576 = loc(fused[#loc346, #loc347])
#loc577 = loc(fused[#loc349, #loc343])
#loc578 = loc(fused[#loc355, #loc354])
#loc579 = loc(fused[#loc360, #loc361])
#loc580 = loc(fused[#loc362, #loc363])
#loc581 = loc(fused[#loc366, #loc364])
#loc582 = loc(fused[#loc367, #loc368])
#loc583 = loc(fused[#loc370, #loc368])
#loc584 = loc(fused[#loc372, #loc371])
#loc585 = loc(fused[#loc373, #loc374])
#loc586 = loc(fused[#loc376, #loc374])
#loc587 = loc(fused[#loc377, #loc378])
#loc588 = loc(fused[#loc379, #loc380])
#loc589 = loc(fused[#loc381, #loc382])
#loc590 = loc(fused[#loc385, #loc386])
#loc591 = loc(fused[#loc384, #loc386])
#loc592 = loc(fused[#loc383, #loc382])
#loc593 = loc(fused[#loc387, #loc388])
#loc594 = loc(fused[#loc389, #loc390])
#loc595 = loc(fused[#loc391, #loc388])
#loc596 = loc(fused[#loc395, #loc396])
#loc597 = loc(fused[#loc398, #loc397])
#loc598 = loc(fused[#loc399, #loc400])
#loc599 = loc(fused[#loc402, #loc396])
#loc600 = loc(fused[#loc404, #loc403])
#loc601 = loc(fused[#loc408, #loc407])
#loc602 = loc(fused[#loc409, #loc410])
#loc603 = loc(fused[#loc411, #loc412])
#loc604 = loc(fused[#loc413, #loc414, #loc415, #loc410])
#loc605 = loc(fused[#loc417, #loc416])
#loc606 = loc(fused[#loc420, #loc421])
#loc607 = loc(fused[#loc423, #loc422])
#loc608 = loc(fused[#loc424, #loc425])
#loc609 = loc(fused[#loc427, #loc421])
#loc610 = loc(fused[#loc433, #loc432])
