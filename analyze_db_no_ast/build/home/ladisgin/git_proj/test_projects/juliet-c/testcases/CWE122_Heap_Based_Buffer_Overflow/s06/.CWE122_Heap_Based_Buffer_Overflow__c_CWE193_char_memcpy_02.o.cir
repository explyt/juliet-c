!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_02.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc154)
  cir.func private  @exit(!s32i) extra(#fn_attr) loc(#loc155)
  cir.func private  @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc156)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc157)
  cir.func private  @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc158)
  cir.func no_proto  @CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_02_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc160)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc15)
    cir.store %1, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc161)
    cir.scope {
      %2 = cir.const #cir.int<1> : !s32i loc(#loc19)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc19)
      cir.if %3 {
        %4 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc21)
        %5 = cir.const #cir.int<10> : !s32i loc(#loc22)
        %6 = cir.cast(integral, %5 : !s32i), !u64i loc(#loc22)
        %7 = cir.const #cir.int<1> : !u64i loc(#loc164)
        %8 = cir.binop(mul, %6, %7) : !u64i loc(#loc165)
        %9 = cir.call @malloc(%8) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc21)
        %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc166)
        cir.store %10, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc167)
        cir.scope {
          %11 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc29)
          %12 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc30)
          %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc30)
          %14 = cir.cmp(eq, %11, %13) : !cir.ptr<!s8i>, !s32i loc(#loc169)
          %15 = cir.cast(int_to_bool, %14 : !s32i), !cir.bool loc(#loc31)
          cir.if %15 {
            %16 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc33)
            %17 = cir.const #cir.int<1> : !s32i loc(#loc34)
            %18 = cir.unary(minus, %17) : !s32i, !s32i loc(#loc35)
            cir.call @exit(%18) : (!s32i) -> () extra(#fn_attr) loc(#loc33)
          } loc(#loc170)
        } loc(#loc168)
      } loc(#loc163)
    } loc(#loc162)
    cir.scope {
      %2 = cir.alloca !cir.array<!s8i x 11>, !cir.ptr<!cir.array<!s8i x 11>>, ["source"] {alignment = 1 : i64} loc(#loc172)
      %3 = cir.const #cir.const_array<"AAAAAAAAAA\00" : !cir.array<!s8i x 11>> : !cir.array<!s8i x 11> loc(#loc172)
      cir.store %3, %2 : !cir.array<!s8i x 11>, !cir.ptr<!cir.array<!s8i x 11>> loc(#loc172)
      %4 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc40)
      %5 = cir.cast(bitcast, %4 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc40)
      %6 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 11>>), !cir.ptr<!s8i> loc(#loc41)
      %7 = cir.cast(bitcast, %6 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc41)
      %8 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc42)
      %9 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 11>>), !cir.ptr<!s8i> loc(#loc43)
      %10 = cir.call @strlen(%9) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc42)
      %11 = cir.const #cir.int<1> : !s32i loc(#loc44)
      %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc44)
      %13 = cir.binop(add, %10, %12) : !u64i loc(#loc173)
      %14 = cir.const #cir.int<1> : !u64i loc(#loc174)
      %15 = cir.binop(mul, %13, %14) : !u64i loc(#loc175)
      cir.libc.memcpy %15 bytes from %7 to %5 : !u64i, !cir.ptr<!void> -> !cir.ptr<!void> loc(#loc176)
      %16 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc50)
      cir.call @printLine(%16) : (!cir.ptr<!s8i>) -> () loc(#loc51)
      %17 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc52)
      %18 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc53)
      %19 = cir.cast(bitcast, %18 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc53)
      cir.call @free(%19) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc52)
    } loc(#loc171)
    cir.return loc(#loc12)
  } loc(#loc159)
  cir.func no_proto  @CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_02_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc178)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc56)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc179)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc58)
    cir.return loc(#loc55)
  } loc(#loc177)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc60)
  cir.func no_proto internal private  @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc181)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc65)
    cir.store %1, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc182)
    cir.scope {
      %2 = cir.const #cir.int<0> : !s32i loc(#loc69)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc69)
      cir.if %3 {
        %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc60)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc60)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc73)
      } else {
        %4 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc74)
        %5 = cir.const #cir.int<10> : !s32i loc(#loc75)
        %6 = cir.const #cir.int<1> : !s32i loc(#loc76)
        %7 = cir.binop(add, %5, %6) nsw : !s32i loc(#loc75)
        %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc75)
        %9 = cir.const #cir.int<1> : !u64i loc(#loc185)
        %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc186)
        %11 = cir.call @malloc(%10) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc74)
        %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc187)
        cir.store %12, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc188)
        cir.scope {
          %13 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc84)
          %14 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc85)
          %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc85)
          %16 = cir.cmp(eq, %13, %15) : !cir.ptr<!s8i>, !s32i loc(#loc190)
          %17 = cir.cast(int_to_bool, %16 : !s32i), !cir.bool loc(#loc86)
          cir.if %17 {
            %18 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc88)
            %19 = cir.const #cir.int<1> : !s32i loc(#loc89)
            %20 = cir.unary(minus, %19) : !s32i, !s32i loc(#loc90)
            cir.call @exit(%20) : (!s32i) -> () extra(#fn_attr) loc(#loc88)
          } loc(#loc191)
        } loc(#loc189)
      } loc(#loc184)
    } loc(#loc183)
    cir.scope {
      %2 = cir.alloca !cir.array<!s8i x 11>, !cir.ptr<!cir.array<!s8i x 11>>, ["source"] {alignment = 1 : i64} loc(#loc193)
      %3 = cir.const #cir.const_array<"AAAAAAAAAA\00" : !cir.array<!s8i x 11>> : !cir.array<!s8i x 11> loc(#loc193)
      cir.store %3, %2 : !cir.array<!s8i x 11>, !cir.ptr<!cir.array<!s8i x 11>> loc(#loc193)
      %4 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc95)
      %5 = cir.cast(bitcast, %4 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc95)
      %6 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 11>>), !cir.ptr<!s8i> loc(#loc96)
      %7 = cir.cast(bitcast, %6 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc96)
      %8 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc97)
      %9 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 11>>), !cir.ptr<!s8i> loc(#loc98)
      %10 = cir.call @strlen(%9) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc97)
      %11 = cir.const #cir.int<1> : !s32i loc(#loc99)
      %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc99)
      %13 = cir.binop(add, %10, %12) : !u64i loc(#loc194)
      %14 = cir.const #cir.int<1> : !u64i loc(#loc195)
      %15 = cir.binop(mul, %13, %14) : !u64i loc(#loc196)
      cir.libc.memcpy %15 bytes from %7 to %5 : !u64i, !cir.ptr<!void> -> !cir.ptr<!void> loc(#loc197)
      %16 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc105)
      cir.call @printLine(%16) : (!cir.ptr<!s8i>) -> () loc(#loc106)
      %17 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc107)
      %18 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc108)
      %19 = cir.cast(bitcast, %18 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc108)
      cir.call @free(%19) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc107)
    } loc(#loc192)
    cir.return loc(#loc62)
  } loc(#loc180)
  cir.func no_proto internal private  @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc199)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc113)
    cir.store %1, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc200)
    cir.scope {
      %2 = cir.const #cir.int<1> : !s32i loc(#loc117)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc117)
      cir.if %3 {
        %4 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc119)
        %5 = cir.const #cir.int<10> : !s32i loc(#loc120)
        %6 = cir.const #cir.int<1> : !s32i loc(#loc121)
        %7 = cir.binop(add, %5, %6) nsw : !s32i loc(#loc120)
        %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc120)
        %9 = cir.const #cir.int<1> : !u64i loc(#loc203)
        %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc204)
        %11 = cir.call @malloc(%10) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc119)
        %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc205)
        cir.store %12, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc206)
        cir.scope {
          %13 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc129)
          %14 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc130)
          %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc130)
          %16 = cir.cmp(eq, %13, %15) : !cir.ptr<!s8i>, !s32i loc(#loc208)
          %17 = cir.cast(int_to_bool, %16 : !s32i), !cir.bool loc(#loc131)
          cir.if %17 {
            %18 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc133)
            %19 = cir.const #cir.int<1> : !s32i loc(#loc134)
            %20 = cir.unary(minus, %19) : !s32i, !s32i loc(#loc135)
            cir.call @exit(%20) : (!s32i) -> () extra(#fn_attr) loc(#loc133)
          } loc(#loc209)
        } loc(#loc207)
      } loc(#loc202)
    } loc(#loc201)
    cir.scope {
      %2 = cir.alloca !cir.array<!s8i x 11>, !cir.ptr<!cir.array<!s8i x 11>>, ["source"] {alignment = 1 : i64} loc(#loc211)
      %3 = cir.const #cir.const_array<"AAAAAAAAAA\00" : !cir.array<!s8i x 11>> : !cir.array<!s8i x 11> loc(#loc211)
      cir.store %3, %2 : !cir.array<!s8i x 11>, !cir.ptr<!cir.array<!s8i x 11>> loc(#loc211)
      %4 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc140)
      %5 = cir.cast(bitcast, %4 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc140)
      %6 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 11>>), !cir.ptr<!s8i> loc(#loc141)
      %7 = cir.cast(bitcast, %6 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc141)
      %8 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc142)
      %9 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 11>>), !cir.ptr<!s8i> loc(#loc143)
      %10 = cir.call @strlen(%9) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc142)
      %11 = cir.const #cir.int<1> : !s32i loc(#loc144)
      %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc144)
      %13 = cir.binop(add, %10, %12) : !u64i loc(#loc212)
      %14 = cir.const #cir.int<1> : !u64i loc(#loc213)
      %15 = cir.binop(mul, %13, %14) : !u64i loc(#loc214)
      cir.libc.memcpy %15 bytes from %7 to %5 : !u64i, !cir.ptr<!void> -> !cir.ptr<!void> loc(#loc215)
      %16 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc150)
      cir.call @printLine(%16) : (!cir.ptr<!s8i>) -> () loc(#loc151)
      %17 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc152)
      %18 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc153)
      %19 = cir.cast(bitcast, %18 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc153)
      cir.call @free(%19) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc152)
    } loc(#loc210)
    cir.return loc(#loc110)
  } loc(#loc198)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_02.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("/usr/include/string.h":407:1)
#loc6 = loc("/usr/include/string.h":408:33)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("/usr/include/stdlib.h":687:1)
#loc10 = loc("/usr/include/stdlib.h":687:32)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_02.c":28:1)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_02.c":46:1)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_02.c":30:5)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_02.c":30:12)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_02.c":31:12)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_02.c":31:5)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_02.c":32:5)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_02.c":37:5)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_02.c":32:8)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_02.c":33:5)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_02.c":35:24)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_02.c":35:31)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_02.c":35:34)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_02.c":35:45)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_02.c":35:46)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_02.c":35:9)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_02.c":36:9)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_02.c":36:37)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_02.c":36:13)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_02.c":36:21)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_02.c":36:18)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_02.c":36:27)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_02.c":36:28)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_02.c":36:34)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_02.c":36:33)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_02.c":38:5)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_02.c":45:5)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_02.c":39:9)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_02.c":39:29)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_02.c":42:16)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_02.c":42:22)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_02.c":42:31)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_02.c":42:38)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_02.c":42:48)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_02.c":42:53)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_02.c":42:64)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_02.c":42:30)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_02.c":42:9)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_02.c":42:65)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_02.c":43:19)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_02.c":43:9)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_02.c":44:9)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_02.c":44:14)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_02.c":99:1)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_02.c":103:1)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_02.c":101:5)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_02.c":101:14)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_02.c":102:5)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_02.c":102:14)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_02.c":60:19)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_02.c":53:1)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_02.c":76:1)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_02.c":55:5)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_02.c":55:12)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_02.c":56:12)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_02.c":56:5)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_02.c":57:5)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_02.c":67:5)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_02.c":57:8)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_02.c":58:5)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_02.c":61:5)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_02.c":63:5)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_02.c":60:9)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_02.c":65:24)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_02.c":65:32)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_02.c":65:35)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_02.c":65:38)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_02.c":65:49)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_02.c":65:31)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_02.c":65:50)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_02.c":65:9)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_02.c":66:9)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_02.c":66:37)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_02.c":66:13)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_02.c":66:21)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_02.c":66:18)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_02.c":66:27)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_02.c":66:28)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_02.c":66:34)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_02.c":66:33)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_02.c":68:5)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_02.c":75:5)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_02.c":69:9)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_02.c":69:29)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_02.c":72:16)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_02.c":72:22)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_02.c":72:31)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_02.c":72:38)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_02.c":72:48)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_02.c":72:53)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_02.c":72:64)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_02.c":72:30)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_02.c":72:9)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_02.c":72:65)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_02.c":73:19)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_02.c":73:9)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_02.c":74:9)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_02.c":74:14)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_02.c":79:1)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_02.c":97:1)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_02.c":81:5)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_02.c":81:12)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_02.c":82:12)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_02.c":82:5)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_02.c":83:5)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_02.c":88:5)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_02.c":83:8)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_02.c":84:5)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_02.c":86:24)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_02.c":86:32)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_02.c":86:35)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_02.c":86:38)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_02.c":86:49)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_02.c":86:31)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_02.c":86:50)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_02.c":86:9)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_02.c":87:9)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_02.c":87:37)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_02.c":87:13)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_02.c":87:21)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_02.c":87:18)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_02.c":87:27)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_02.c":87:28)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_02.c":87:34)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_02.c":87:33)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_02.c":89:5)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_02.c":96:5)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_02.c":90:9)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_02.c":90:29)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_02.c":93:16)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_02.c":93:22)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_02.c":93:31)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_02.c":93:38)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_02.c":93:48)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_02.c":93:53)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_02.c":93:64)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_02.c":93:30)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_02.c":93:9)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_02.c":93:65)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_02.c":94:19)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_02.c":94:9)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_02.c":95:9)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_02.c":95:14)
#loc154 = loc(fused[#loc1, #loc2])
#loc155 = loc(fused[#loc3, #loc4])
#loc156 = loc(fused[#loc5, #loc6])
#loc157 = loc(fused[#loc7, #loc8])
#loc158 = loc(fused[#loc9, #loc10])
#loc159 = loc(fused[#loc11, #loc12])
#loc160 = loc(fused[#loc13, #loc14])
#loc161 = loc(fused[#loc16, #loc15])
#loc162 = loc(fused[#loc17, #loc18])
#loc163 = loc(fused[#loc20, #loc18])
#loc164 = loc(fused[#loc23, #loc24])
#loc165 = loc(fused[#loc22, #loc24])
#loc166 = loc(fused[#loc21, #loc25])
#loc167 = loc(fused[#loc26, #loc25])
#loc168 = loc(fused[#loc27, #loc28])
#loc169 = loc(fused[#loc29, #loc30])
#loc170 = loc(fused[#loc32, #loc28])
#loc171 = loc(fused[#loc36, #loc37])
#loc172 = loc(fused[#loc38, #loc39])
#loc173 = loc(fused[#loc42, #loc44])
#loc174 = loc(fused[#loc45, #loc46])
#loc175 = loc(fused[#loc47, #loc46])
#loc176 = loc(fused[#loc48, #loc49])
#loc177 = loc(fused[#loc54, #loc55])
#loc178 = loc(fused[#loc56, #loc57])
#loc179 = loc(fused[#loc58, #loc59])
#loc180 = loc(fused[#loc61, #loc62])
#loc181 = loc(fused[#loc63, #loc64])
#loc182 = loc(fused[#loc66, #loc65])
#loc183 = loc(fused[#loc67, #loc68])
#loc184 = loc(fused[#loc70, #loc71, #loc72, #loc68])
#loc185 = loc(fused[#loc77, #loc78])
#loc186 = loc(fused[#loc79, #loc78])
#loc187 = loc(fused[#loc74, #loc80])
#loc188 = loc(fused[#loc81, #loc80])
#loc189 = loc(fused[#loc82, #loc83])
#loc190 = loc(fused[#loc84, #loc85])
#loc191 = loc(fused[#loc87, #loc83])
#loc192 = loc(fused[#loc91, #loc92])
#loc193 = loc(fused[#loc93, #loc94])
#loc194 = loc(fused[#loc97, #loc99])
#loc195 = loc(fused[#loc100, #loc101])
#loc196 = loc(fused[#loc102, #loc101])
#loc197 = loc(fused[#loc103, #loc104])
#loc198 = loc(fused[#loc109, #loc110])
#loc199 = loc(fused[#loc111, #loc112])
#loc200 = loc(fused[#loc114, #loc113])
#loc201 = loc(fused[#loc115, #loc116])
#loc202 = loc(fused[#loc118, #loc116])
#loc203 = loc(fused[#loc122, #loc123])
#loc204 = loc(fused[#loc124, #loc123])
#loc205 = loc(fused[#loc119, #loc125])
#loc206 = loc(fused[#loc126, #loc125])
#loc207 = loc(fused[#loc127, #loc128])
#loc208 = loc(fused[#loc129, #loc130])
#loc209 = loc(fused[#loc132, #loc128])
#loc210 = loc(fused[#loc136, #loc137])
#loc211 = loc(fused[#loc138, #loc139])
#loc212 = loc(fused[#loc142, #loc144])
#loc213 = loc(fused[#loc145, #loc146])
#loc214 = loc(fused[#loc147, #loc146])
#loc215 = loc(fused[#loc148, #loc149])
