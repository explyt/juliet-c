!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
module @"/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_square_16.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i32 = dense<32> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @printUnsignedLine(!u32i) loc(#loc97)
  cir.func no_proto @CWE190_Integer_Overflow__unsigned_int_max_square_16_bad() extra(#fn_attr) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc99)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc7)
    %2 = cir.cast(integral, %1 : !s32i), !u32i loc(#loc7)
    cir.store %2, %0 : !u32i, !cir.ptr<!u32i> loc(#loc100)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc11)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc11)
        cir.condition(%4) loc(#loc11)
      } do {
        cir.scope {
          %3 = cir.const #cir.int<2147483647> : !s32i loc(#loc13)
          %4 = cir.cast(integral, %3 : !s32i), !u32i loc(#loc13)
          %5 = cir.const #cir.int<2> : !u32i loc(#loc13)
          %6 = cir.binop(mul, %4, %5) : !u32i loc(#loc13)
          %7 = cir.const #cir.int<1> : !u32i loc(#loc13)
          %8 = cir.binop(add, %6, %7) : !u32i loc(#loc13)
          cir.store %8, %0 : !u32i, !cir.ptr<!u32i> loc(#loc103)
          cir.break loc(#loc15)
        } loc(#loc102)
        cir.yield loc(#loc10)
      } loc(#loc101)
    } loc(#loc101)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc18)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc18)
        cir.condition(%4) loc(#loc18)
      } do {
        cir.scope {
          cir.scope {
            %3 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc107)
            %4 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc24)
            %5 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc23)
            %6 = cir.binop(mul, %4, %5) : !u32i loc(#loc108)
            cir.store %6, %3 : !u32i, !cir.ptr<!u32i> loc(#loc107)
            %7 = cir.load %3 : !cir.ptr<!u32i>, !u32i loc(#loc25)
            cir.call @printUnsignedLine(%7) : (!u32i) -> () loc(#loc26)
          } loc(#loc106)
          cir.break loc(#loc27)
        } loc(#loc105)
        cir.yield loc(#loc17)
      } loc(#loc104)
    } loc(#loc104)
    cir.return loc(#loc4)
  } loc(#loc98)
  cir.func no_proto @CWE190_Integer_Overflow__unsigned_int_max_square_16_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc110)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc30)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc111)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc32)
    cir.return loc(#loc29)
  } loc(#loc109)
  cir.func private @sqrt(!cir.double) -> !cir.double extra(#fn_attr1) loc(#loc34)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc112)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc37)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc114)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc42)
    %2 = cir.cast(integral, %1 : !s32i), !u32i loc(#loc42)
    cir.store %2, %0 : !u32i, !cir.ptr<!u32i> loc(#loc115)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc46)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc46)
        cir.condition(%4) loc(#loc46)
      } do {
        cir.scope {
          %3 = cir.const #cir.int<2147483647> : !s32i loc(#loc48)
          %4 = cir.cast(integral, %3 : !s32i), !u32i loc(#loc48)
          %5 = cir.const #cir.int<2> : !u32i loc(#loc48)
          %6 = cir.binop(mul, %4, %5) : !u32i loc(#loc48)
          %7 = cir.const #cir.int<1> : !u32i loc(#loc48)
          %8 = cir.binop(add, %6, %7) : !u32i loc(#loc48)
          cir.store %8, %0 : !u32i, !cir.ptr<!u32i> loc(#loc118)
          cir.break loc(#loc50)
        } loc(#loc117)
        cir.yield loc(#loc45)
      } loc(#loc116)
    } loc(#loc116)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc53)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc53)
        cir.condition(%4) loc(#loc53)
      } do {
        cir.scope {
          cir.scope {
            %3 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc57)
            %4 = cir.cast(integral, %3 : !u32i), !s64i loc(#loc57)
            %5 = cir.cast(integral, %4 : !s64i), !s32i loc(#loc57)
            %6 = cir.abs %5 poison : !s32i loc(#loc58)
            %7 = cir.cast(integral, %6 : !s32i), !s64i loc(#loc58)
            %8 = cir.get_global @sqrt : !cir.ptr<!cir.func<(!cir.double) -> !cir.double>> loc(#loc59)
            %9 = cir.const #cir.int<2147483647> : !s32i loc(#loc60)
            %10 = cir.cast(integral, %9 : !s32i), !u32i loc(#loc60)
            %11 = cir.const #cir.int<2> : !u32i loc(#loc60)
            %12 = cir.binop(mul, %10, %11) : !u32i loc(#loc60)
            %13 = cir.const #cir.int<1> : !u32i loc(#loc60)
            %14 = cir.binop(add, %12, %13) : !u32i loc(#loc60)
            %15 = cir.cast(int_to_float, %14 : !u32i), !cir.double loc(#loc60)
            %16 = cir.call @sqrt(%15) : (!cir.double) -> !cir.double extra(#fn_attr1) loc(#loc59)
            %17 = cir.cast(float_to_int, %16 : !cir.double), !s64i loc(#loc59)
            %18 = cir.cmp(lt, %7, %17) : !s64i, !cir.bool loc(#loc122)
            cir.if %18 {
              %19 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc124)
              %20 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc67)
              %21 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc66)
              %22 = cir.binop(mul, %20, %21) : !u32i loc(#loc125)
              cir.store %22, %19 : !u32i, !cir.ptr<!u32i> loc(#loc124)
              %23 = cir.load %19 : !cir.ptr<!u32i>, !u32i loc(#loc68)
              cir.call @printUnsignedLine(%23) : (!u32i) -> () loc(#loc69)
            } else {
              %19 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc37)
              %20 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc37)
              cir.call @printLine(%20) : (!cir.ptr<!s8i>) -> () loc(#loc70)
            } loc(#loc123)
          } loc(#loc121)
          cir.break loc(#loc71)
        } loc(#loc120)
        cir.yield loc(#loc52)
      } loc(#loc119)
    } loc(#loc119)
    cir.return loc(#loc39)
  } loc(#loc113)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc127)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc76)
    %2 = cir.cast(integral, %1 : !s32i), !u32i loc(#loc76)
    cir.store %2, %0 : !u32i, !cir.ptr<!u32i> loc(#loc128)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc80)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc80)
        cir.condition(%4) loc(#loc80)
      } do {
        cir.scope {
          %3 = cir.const #cir.int<2> : !s32i loc(#loc82)
          %4 = cir.cast(integral, %3 : !s32i), !u32i loc(#loc82)
          cir.store %4, %0 : !u32i, !cir.ptr<!u32i> loc(#loc131)
          cir.break loc(#loc84)
        } loc(#loc130)
        cir.yield loc(#loc79)
      } loc(#loc129)
    } loc(#loc129)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc87)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc87)
        cir.condition(%4) loc(#loc87)
      } do {
        cir.scope {
          cir.scope {
            %3 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc135)
            %4 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc93)
            %5 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc92)
            %6 = cir.binop(mul, %4, %5) : !u32i loc(#loc136)
            cir.store %6, %3 : !u32i, !cir.ptr<!u32i> loc(#loc135)
            %7 = cir.load %3 : !cir.ptr<!u32i>, !u32i loc(#loc94)
            cir.call @printUnsignedLine(%7) : (!u32i) -> () loc(#loc95)
          } loc(#loc134)
          cir.break loc(#loc96)
        } loc(#loc133)
        cir.yield loc(#loc86)
      } loc(#loc132)
    } loc(#loc132)
    cir.return loc(#loc73)
  } loc(#loc126)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_square_16.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":34:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":34:47)
#loc3 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_16.c":24:1)
#loc4 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_16.c":43:1)
#loc5 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_16.c":26:5)
#loc6 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_16.c":26:18)
#loc7 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_16.c":27:12)
#loc8 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_16.c":27:5)
#loc9 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_16.c":28:5)
#loc10 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_16.c":33:5)
#loc11 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_16.c":28:11)
#loc12 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_16.c":29:5)
#loc13 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_16.c":31:16)
#loc14 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_16.c":31:9)
#loc15 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_16.c":32:9)
#loc16 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_16.c":34:5)
#loc17 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_16.c":42:5)
#loc18 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_16.c":34:11)
#loc19 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_16.c":35:5)
#loc20 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_16.c":36:9)
#loc21 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_16.c":40:9)
#loc22 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_16.c":38:13)
#loc23 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_16.c":38:42)
#loc24 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_16.c":38:35)
#loc25 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_16.c":39:31)
#loc26 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_16.c":39:13)
#loc27 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_16.c":41:9)
#loc28 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_16.c":98:1)
#loc29 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_16.c":102:1)
#loc30 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_16.c":100:5)
#loc31 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_16.c":100:13)
#loc32 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_16.c":101:5)
#loc33 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_16.c":101:13)
#loc34 = loc("/usr/include/x86_64-linux-gnu/bits/mathcalls.h":143:1)
#loc35 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc36 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc37 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_16.c":70:23)
#loc38 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_16.c":50:1)
#loc39 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_16.c":74:1)
#loc40 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_16.c":52:5)
#loc41 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_16.c":52:18)
#loc42 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_16.c":53:12)
#loc43 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_16.c":53:5)
#loc44 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_16.c":54:5)
#loc45 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_16.c":59:5)
#loc46 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_16.c":54:11)
#loc47 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_16.c":55:5)
#loc48 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_16.c":57:16)
#loc49 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_16.c":57:9)
#loc50 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_16.c":58:9)
#loc51 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_16.c":60:5)
#loc52 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_16.c":73:5)
#loc53 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_16.c":60:11)
#loc54 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_16.c":61:5)
#loc55 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_16.c":63:9)
#loc56 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_16.c":71:9)
#loc57 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_16.c":63:23)
#loc58 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_16.c":63:13)
#loc59 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_16.c":63:37)
#loc60 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_16.c":63:50)
#loc61 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_16.c":63:58)
#loc62 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_16.c":64:9)
#loc63 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_16.c":67:9)
#loc64 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_16.c":69:9)
#loc65 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_16.c":65:13)
#loc66 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_16.c":65:42)
#loc67 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_16.c":65:35)
#loc68 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_16.c":66:31)
#loc69 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_16.c":66:13)
#loc70 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_16.c":70:13)
#loc71 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_16.c":72:9)
#loc72 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_16.c":77:1)
#loc73 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_16.c":96:1)
#loc74 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_16.c":79:5)
#loc75 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_16.c":79:18)
#loc76 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_16.c":80:12)
#loc77 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_16.c":80:5)
#loc78 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_16.c":81:5)
#loc79 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_16.c":86:5)
#loc80 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_16.c":81:11)
#loc81 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_16.c":82:5)
#loc82 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_16.c":84:16)
#loc83 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_16.c":84:9)
#loc84 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_16.c":85:9)
#loc85 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_16.c":87:5)
#loc86 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_16.c":95:5)
#loc87 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_16.c":87:11)
#loc88 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_16.c":88:5)
#loc89 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_16.c":89:9)
#loc90 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_16.c":93:9)
#loc91 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_16.c":91:13)
#loc92 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_16.c":91:42)
#loc93 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_16.c":91:35)
#loc94 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_16.c":92:31)
#loc95 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_16.c":92:13)
#loc96 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_16.c":94:9)
#loc97 = loc(fused[#loc1, #loc2])
#loc98 = loc(fused[#loc3, #loc4])
#loc99 = loc(fused[#loc5, #loc6])
#loc100 = loc(fused[#loc8, #loc7])
#loc101 = loc(fused[#loc9, #loc10])
#loc102 = loc(fused[#loc12, #loc10])
#loc103 = loc(fused[#loc14, #loc13])
#loc104 = loc(fused[#loc16, #loc17])
#loc105 = loc(fused[#loc19, #loc17])
#loc106 = loc(fused[#loc20, #loc21])
#loc107 = loc(fused[#loc22, #loc23])
#loc108 = loc(fused[#loc24, #loc23])
#loc109 = loc(fused[#loc28, #loc29])
#loc110 = loc(fused[#loc30, #loc31])
#loc111 = loc(fused[#loc32, #loc33])
#loc112 = loc(fused[#loc35, #loc36])
#loc113 = loc(fused[#loc38, #loc39])
#loc114 = loc(fused[#loc40, #loc41])
#loc115 = loc(fused[#loc43, #loc42])
#loc116 = loc(fused[#loc44, #loc45])
#loc117 = loc(fused[#loc47, #loc45])
#loc118 = loc(fused[#loc49, #loc48])
#loc119 = loc(fused[#loc51, #loc52])
#loc120 = loc(fused[#loc54, #loc52])
#loc121 = loc(fused[#loc55, #loc56])
#loc122 = loc(fused[#loc58, #loc61])
#loc123 = loc(fused[#loc62, #loc63, #loc64, #loc56])
#loc124 = loc(fused[#loc65, #loc66])
#loc125 = loc(fused[#loc67, #loc66])
#loc126 = loc(fused[#loc72, #loc73])
#loc127 = loc(fused[#loc74, #loc75])
#loc128 = loc(fused[#loc77, #loc76])
#loc129 = loc(fused[#loc78, #loc79])
#loc130 = loc(fused[#loc81, #loc79])
#loc131 = loc(fused[#loc83, #loc82])
#loc132 = loc(fused[#loc85, #loc86])
#loc133 = loc(fused[#loc88, #loc86])
#loc134 = loc(fused[#loc89, #loc90])
#loc135 = loc(fused[#loc91, #loc92])
#loc136 = loc(fused[#loc93, #loc92])
