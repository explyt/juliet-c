!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc27 = loc("CWE190_Integer_Overflow__int64_t_rand_add_12.c":29:25)
#loc70 = loc("CWE190_Integer_Overflow__int64_t_rand_add_12.c":158:10)
#loc71 = loc("CWE190_Integer_Overflow__int64_t_rand_add_12.c":158:14)
#loc72 = loc("CWE190_Integer_Overflow__int64_t_rand_add_12.c":158:20)
#loc73 = loc("CWE190_Integer_Overflow__int64_t_rand_add_12.c":158:32)
#loc105 = loc("CWE190_Integer_Overflow__int64_t_rand_add_12.c":73:25)
#loc107 = loc("CWE190_Integer_Overflow__int64_t_rand_add_12.c":78:25)
#loc205 = loc(fused[#loc70, #loc71])
#loc206 = loc(fused[#loc72, #loc73])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int64_t_rand_add_12.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i32 = dense<32> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func no_proto private @globalReturnsTrueOrFalse(...) -> !s32i loc(#loc178)
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc179)
  cir.func private @printLongLongLine(!s64i) loc(#loc180)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc181)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc9)
  cir.func no_proto @CWE190_Integer_Overflow__int64_t_rand_add_12_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc183)
    %1 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc184)
    %2 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc185)
    %3 = cir.const #cir.int<0> : !s64i loc(#loc18)
    cir.store %3, %2 : !s64i, !cir.ptr<!s64i> loc(#loc186)
    cir.br ^bb1 loc(#loc187)
  ^bb1:  // pred: ^bb0
    %4 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc188)
    %5 = cir.cast(bitcast, %4 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc188)
    %6 = cir.call %5() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc22)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc22)
    cir.brcond %7 ^bb2, ^bb7 loc(#loc189)
  ^bb2:  // pred: ^bb1
    %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc27)
    %9 = cir.const #cir.int<1> : !s32i loc(#loc27)
    %10 = cir.binop(and, %8, %9) : !s32i loc(#loc27)
    %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc27)
    cir.brcond %11 ^bb3, ^bb4 loc(#loc27)
  ^bb3:  // pred: ^bb2
    %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc27)
    %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc27)
    %14 = cir.const #cir.int<60> : !s32i loc(#loc27)
    %15 = cir.shift(left, %13 : !u64i, %14 : !s32i) -> !u64i loc(#loc27)
    %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc27)
    %17 = cir.cast(integral, %16 : !s32i), !u64i loc(#loc27)
    %18 = cir.const #cir.int<45> : !s32i loc(#loc27)
    %19 = cir.shift(left, %17 : !u64i, %18 : !s32i) -> !u64i loc(#loc27)
    %20 = cir.binop(xor, %15, %19) : !u64i loc(#loc27)
    %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc27)
    %22 = cir.cast(integral, %21 : !s32i), !u64i loc(#loc27)
    %23 = cir.const #cir.int<30> : !s32i loc(#loc27)
    %24 = cir.shift(left, %22 : !u64i, %23 : !s32i) -> !u64i loc(#loc27)
    %25 = cir.binop(xor, %20, %24) : !u64i loc(#loc27)
    %26 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc27)
    %27 = cir.cast(integral, %26 : !s32i), !u64i loc(#loc27)
    %28 = cir.const #cir.int<15> : !s32i loc(#loc27)
    %29 = cir.shift(left, %27 : !u64i, %28 : !s32i) -> !u64i loc(#loc27)
    %30 = cir.binop(xor, %25, %29) : !u64i loc(#loc27)
    %31 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc27)
    %32 = cir.cast(integral, %31 : !s32i), !u64i loc(#loc27)
    %33 = cir.binop(xor, %30, %32) : !u64i loc(#loc27)
    cir.br ^bb5(%33 : !u64i) loc(#loc27)
  ^bb4:  // pred: ^bb2
    %34 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc27)
    %35 = cir.cast(integral, %34 : !s32i), !u64i loc(#loc27)
    %36 = cir.const #cir.int<60> : !s32i loc(#loc27)
    %37 = cir.shift(left, %35 : !u64i, %36 : !s32i) -> !u64i loc(#loc27)
    %38 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc27)
    %39 = cir.cast(integral, %38 : !s32i), !u64i loc(#loc27)
    %40 = cir.const #cir.int<45> : !s32i loc(#loc27)
    %41 = cir.shift(left, %39 : !u64i, %40 : !s32i) -> !u64i loc(#loc27)
    %42 = cir.binop(xor, %37, %41) : !u64i loc(#loc27)
    %43 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc27)
    %44 = cir.cast(integral, %43 : !s32i), !u64i loc(#loc27)
    %45 = cir.const #cir.int<30> : !s32i loc(#loc27)
    %46 = cir.shift(left, %44 : !u64i, %45 : !s32i) -> !u64i loc(#loc27)
    %47 = cir.binop(xor, %42, %46) : !u64i loc(#loc27)
    %48 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc27)
    %49 = cir.cast(integral, %48 : !s32i), !u64i loc(#loc27)
    %50 = cir.const #cir.int<15> : !s32i loc(#loc27)
    %51 = cir.shift(left, %49 : !u64i, %50 : !s32i) -> !u64i loc(#loc27)
    %52 = cir.binop(xor, %47, %51) : !u64i loc(#loc27)
    %53 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc27)
    %54 = cir.cast(integral, %53 : !s32i), !u64i loc(#loc27)
    %55 = cir.binop(xor, %52, %54) : !u64i loc(#loc27)
    %56 = cir.unary(minus, %55) : !u64i, !u64i loc(#loc27)
    %57 = cir.const #cir.int<1> : !s32i loc(#loc27)
    %58 = cir.cast(integral, %57 : !s32i), !u64i loc(#loc27)
    %59 = cir.binop(sub, %56, %58) : !u64i loc(#loc27)
    cir.br ^bb5(%59 : !u64i) loc(#loc27)
  ^bb5(%60: !u64i loc("CWE190_Integer_Overflow__int64_t_rand_add_12.c":29:25)):  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc27)
  ^bb6:  // pred: ^bb5
    %61 = cir.cast(integral, %60 : !u64i), !s64i loc(#loc27)
    cir.store %61, %2 : !s64i, !cir.ptr<!s64i> loc(#loc190)
    cir.br ^bb8 loc(#loc25)
  ^bb7:  // pred: ^bb1
    %62 = cir.const #cir.int<2> : !s32i loc(#loc29)
    %63 = cir.cast(integral, %62 : !s32i), !s64i loc(#loc29)
    cir.store %63, %2 : !s64i, !cir.ptr<!s64i> loc(#loc191)
    cir.br ^bb8 loc(#loc21)
  ^bb8:  // 2 preds: ^bb6, ^bb7
    cir.br ^bb9 loc(#loc21)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc192)
  ^bb10:  // pred: ^bb9
    %64 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc193)
    %65 = cir.cast(bitcast, %64 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc193)
    %66 = cir.call %65() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc33)
    %67 = cir.cast(int_to_bool, %66 : !s32i), !cir.bool loc(#loc33)
    cir.brcond %67 ^bb11, ^bb14 loc(#loc194)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc195)
  ^bb12:  // pred: ^bb11
    %68 = cir.load %2 : !cir.ptr<!s64i>, !s64i loc(#loc40)
    %69 = cir.const #cir.int<1> : !s32i loc(#loc13)
    %70 = cir.cast(integral, %69 : !s32i), !s64i loc(#loc13)
    %71 = cir.binop(add, %68, %70) nsw : !s64i loc(#loc40)
    cir.store %71, %0 : !s64i, !cir.ptr<!s64i> loc(#loc183)
    %72 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc41)
    cir.call @printLongLongLine(%72) : (!s64i) -> () loc(#loc42)
    cir.br ^bb13 loc(#loc39)
  ^bb13:  // pred: ^bb12
    cir.br ^bb20 loc(#loc36)
  ^bb14:  // pred: ^bb10
    cir.br ^bb15 loc(#loc196)
  ^bb15:  // pred: ^bb14
    %73 = cir.load %2 : !cir.ptr<!s64i>, !s64i loc(#loc45)
    %74 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc46)
    %75 = cir.cmp(lt, %73, %74) : !s64i, !cir.bool loc(#loc197)
    cir.brcond %75 ^bb16, ^bb17 loc(#loc198)
  ^bb16:  // pred: ^bb15
    %76 = cir.load %2 : !cir.ptr<!s64i>, !s64i loc(#loc50)
    %77 = cir.const #cir.int<1> : !s32i loc(#loc15)
    %78 = cir.cast(integral, %77 : !s32i), !s64i loc(#loc15)
    %79 = cir.binop(add, %76, %78) nsw : !s64i loc(#loc50)
    cir.store %79, %1 : !s64i, !cir.ptr<!s64i> loc(#loc184)
    %80 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc51)
    cir.call @printLongLongLine(%80) : (!s64i) -> () loc(#loc52)
    cir.br ^bb18 loc(#loc48)
  ^bb17:  // pred: ^bb15
    %81 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc9)
    %82 = cir.cast(array_to_ptrdecay, %81 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc9)
    cir.call @printLine(%82) : (!cir.ptr<!s8i>) -> () loc(#loc53)
    cir.br ^bb18 loc(#loc44)
  ^bb18:  // 2 preds: ^bb16, ^bb17
    cir.br ^bb19 loc(#loc44)
  ^bb19:  // pred: ^bb18
    cir.br ^bb20 loc(#loc32)
  ^bb20:  // 2 preds: ^bb13, ^bb19
    cir.br ^bb21 loc(#loc32)
  ^bb21:  // pred: ^bb20
    cir.return loc(#loc11)
  } loc(#loc182)
  cir.func no_proto @CWE190_Integer_Overflow__int64_t_rand_add_12_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc200)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc56)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc201)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc58)
    cir.return loc(#loc55)
  } loc(#loc199)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc202)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc203)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc64)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc65)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc66)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc67)
  cir.func @main(%arg0: !s32i loc(fused[#loc70, #loc71]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc72, #loc73])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc205)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc206)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc69)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc74)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc74)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc75)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc76)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc76)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc77)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc64)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc64)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc78)
    %8 = cir.get_global @CWE190_Integer_Overflow__int64_t_rand_add_12_good : !cir.ptr<!cir.func<!void ()>> loc(#loc207)
    cir.call @CWE190_Integer_Overflow__int64_t_rand_add_12_good() : () -> () loc(#loc79)
    %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc65)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc65)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc81)
    %11 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc66)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc66)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc82)
    %13 = cir.get_global @CWE190_Integer_Overflow__int64_t_rand_add_12_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc208)
    cir.call @CWE190_Integer_Overflow__int64_t_rand_add_12_bad() : () -> () loc(#loc83)
    %14 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc67)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc67)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc85)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc86)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc209)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc209)
    cir.return %17 : !s32i loc(#loc209)
  } loc(#loc204)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc211)
    %1 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc212)
    %2 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc213)
    %3 = cir.const #cir.int<0> : !s64i loc(#loc96)
    cir.store %3, %2 : !s64i, !cir.ptr<!s64i> loc(#loc214)
    cir.br ^bb1 loc(#loc215)
  ^bb1:  // pred: ^bb0
    %4 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc216)
    %5 = cir.cast(bitcast, %4 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc216)
    %6 = cir.call %5() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc100)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc100)
    cir.brcond %7 ^bb2, ^bb7 loc(#loc217)
  ^bb2:  // pred: ^bb1
    %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc105)
    %9 = cir.const #cir.int<1> : !s32i loc(#loc105)
    %10 = cir.binop(and, %8, %9) : !s32i loc(#loc105)
    %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc105)
    cir.brcond %11 ^bb3, ^bb4 loc(#loc105)
  ^bb3:  // pred: ^bb2
    %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc105)
    %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc105)
    %14 = cir.const #cir.int<60> : !s32i loc(#loc105)
    %15 = cir.shift(left, %13 : !u64i, %14 : !s32i) -> !u64i loc(#loc105)
    %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc105)
    %17 = cir.cast(integral, %16 : !s32i), !u64i loc(#loc105)
    %18 = cir.const #cir.int<45> : !s32i loc(#loc105)
    %19 = cir.shift(left, %17 : !u64i, %18 : !s32i) -> !u64i loc(#loc105)
    %20 = cir.binop(xor, %15, %19) : !u64i loc(#loc105)
    %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc105)
    %22 = cir.cast(integral, %21 : !s32i), !u64i loc(#loc105)
    %23 = cir.const #cir.int<30> : !s32i loc(#loc105)
    %24 = cir.shift(left, %22 : !u64i, %23 : !s32i) -> !u64i loc(#loc105)
    %25 = cir.binop(xor, %20, %24) : !u64i loc(#loc105)
    %26 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc105)
    %27 = cir.cast(integral, %26 : !s32i), !u64i loc(#loc105)
    %28 = cir.const #cir.int<15> : !s32i loc(#loc105)
    %29 = cir.shift(left, %27 : !u64i, %28 : !s32i) -> !u64i loc(#loc105)
    %30 = cir.binop(xor, %25, %29) : !u64i loc(#loc105)
    %31 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc105)
    %32 = cir.cast(integral, %31 : !s32i), !u64i loc(#loc105)
    %33 = cir.binop(xor, %30, %32) : !u64i loc(#loc105)
    cir.br ^bb5(%33 : !u64i) loc(#loc105)
  ^bb4:  // pred: ^bb2
    %34 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc105)
    %35 = cir.cast(integral, %34 : !s32i), !u64i loc(#loc105)
    %36 = cir.const #cir.int<60> : !s32i loc(#loc105)
    %37 = cir.shift(left, %35 : !u64i, %36 : !s32i) -> !u64i loc(#loc105)
    %38 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc105)
    %39 = cir.cast(integral, %38 : !s32i), !u64i loc(#loc105)
    %40 = cir.const #cir.int<45> : !s32i loc(#loc105)
    %41 = cir.shift(left, %39 : !u64i, %40 : !s32i) -> !u64i loc(#loc105)
    %42 = cir.binop(xor, %37, %41) : !u64i loc(#loc105)
    %43 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc105)
    %44 = cir.cast(integral, %43 : !s32i), !u64i loc(#loc105)
    %45 = cir.const #cir.int<30> : !s32i loc(#loc105)
    %46 = cir.shift(left, %44 : !u64i, %45 : !s32i) -> !u64i loc(#loc105)
    %47 = cir.binop(xor, %42, %46) : !u64i loc(#loc105)
    %48 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc105)
    %49 = cir.cast(integral, %48 : !s32i), !u64i loc(#loc105)
    %50 = cir.const #cir.int<15> : !s32i loc(#loc105)
    %51 = cir.shift(left, %49 : !u64i, %50 : !s32i) -> !u64i loc(#loc105)
    %52 = cir.binop(xor, %47, %51) : !u64i loc(#loc105)
    %53 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc105)
    %54 = cir.cast(integral, %53 : !s32i), !u64i loc(#loc105)
    %55 = cir.binop(xor, %52, %54) : !u64i loc(#loc105)
    %56 = cir.unary(minus, %55) : !u64i, !u64i loc(#loc105)
    %57 = cir.const #cir.int<1> : !s32i loc(#loc105)
    %58 = cir.cast(integral, %57 : !s32i), !u64i loc(#loc105)
    %59 = cir.binop(sub, %56, %58) : !u64i loc(#loc105)
    cir.br ^bb5(%59 : !u64i) loc(#loc105)
  ^bb5(%60: !u64i loc("CWE190_Integer_Overflow__int64_t_rand_add_12.c":73:25)):  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc105)
  ^bb6:  // pred: ^bb5
    %61 = cir.cast(integral, %60 : !u64i), !s64i loc(#loc105)
    cir.store %61, %2 : !s64i, !cir.ptr<!s64i> loc(#loc218)
    cir.br ^bb12 loc(#loc103)
  ^bb7:  // pred: ^bb1
    %62 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc107)
    %63 = cir.const #cir.int<1> : !s32i loc(#loc107)
    %64 = cir.binop(and, %62, %63) : !s32i loc(#loc107)
    %65 = cir.cast(int_to_bool, %64 : !s32i), !cir.bool loc(#loc107)
    cir.brcond %65 ^bb8, ^bb9 loc(#loc107)
  ^bb8:  // pred: ^bb7
    %66 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc107)
    %67 = cir.cast(integral, %66 : !s32i), !u64i loc(#loc107)
    %68 = cir.const #cir.int<60> : !s32i loc(#loc107)
    %69 = cir.shift(left, %67 : !u64i, %68 : !s32i) -> !u64i loc(#loc107)
    %70 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc107)
    %71 = cir.cast(integral, %70 : !s32i), !u64i loc(#loc107)
    %72 = cir.const #cir.int<45> : !s32i loc(#loc107)
    %73 = cir.shift(left, %71 : !u64i, %72 : !s32i) -> !u64i loc(#loc107)
    %74 = cir.binop(xor, %69, %73) : !u64i loc(#loc107)
    %75 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc107)
    %76 = cir.cast(integral, %75 : !s32i), !u64i loc(#loc107)
    %77 = cir.const #cir.int<30> : !s32i loc(#loc107)
    %78 = cir.shift(left, %76 : !u64i, %77 : !s32i) -> !u64i loc(#loc107)
    %79 = cir.binop(xor, %74, %78) : !u64i loc(#loc107)
    %80 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc107)
    %81 = cir.cast(integral, %80 : !s32i), !u64i loc(#loc107)
    %82 = cir.const #cir.int<15> : !s32i loc(#loc107)
    %83 = cir.shift(left, %81 : !u64i, %82 : !s32i) -> !u64i loc(#loc107)
    %84 = cir.binop(xor, %79, %83) : !u64i loc(#loc107)
    %85 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc107)
    %86 = cir.cast(integral, %85 : !s32i), !u64i loc(#loc107)
    %87 = cir.binop(xor, %84, %86) : !u64i loc(#loc107)
    cir.br ^bb10(%87 : !u64i) loc(#loc107)
  ^bb9:  // pred: ^bb7
    %88 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc107)
    %89 = cir.cast(integral, %88 : !s32i), !u64i loc(#loc107)
    %90 = cir.const #cir.int<60> : !s32i loc(#loc107)
    %91 = cir.shift(left, %89 : !u64i, %90 : !s32i) -> !u64i loc(#loc107)
    %92 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc107)
    %93 = cir.cast(integral, %92 : !s32i), !u64i loc(#loc107)
    %94 = cir.const #cir.int<45> : !s32i loc(#loc107)
    %95 = cir.shift(left, %93 : !u64i, %94 : !s32i) -> !u64i loc(#loc107)
    %96 = cir.binop(xor, %91, %95) : !u64i loc(#loc107)
    %97 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc107)
    %98 = cir.cast(integral, %97 : !s32i), !u64i loc(#loc107)
    %99 = cir.const #cir.int<30> : !s32i loc(#loc107)
    %100 = cir.shift(left, %98 : !u64i, %99 : !s32i) -> !u64i loc(#loc107)
    %101 = cir.binop(xor, %96, %100) : !u64i loc(#loc107)
    %102 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc107)
    %103 = cir.cast(integral, %102 : !s32i), !u64i loc(#loc107)
    %104 = cir.const #cir.int<15> : !s32i loc(#loc107)
    %105 = cir.shift(left, %103 : !u64i, %104 : !s32i) -> !u64i loc(#loc107)
    %106 = cir.binop(xor, %101, %105) : !u64i loc(#loc107)
    %107 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc107)
    %108 = cir.cast(integral, %107 : !s32i), !u64i loc(#loc107)
    %109 = cir.binop(xor, %106, %108) : !u64i loc(#loc107)
    %110 = cir.unary(minus, %109) : !u64i, !u64i loc(#loc107)
    %111 = cir.const #cir.int<1> : !s32i loc(#loc107)
    %112 = cir.cast(integral, %111 : !s32i), !u64i loc(#loc107)
    %113 = cir.binop(sub, %110, %112) : !u64i loc(#loc107)
    cir.br ^bb10(%113 : !u64i) loc(#loc107)
  ^bb10(%114: !u64i loc("CWE190_Integer_Overflow__int64_t_rand_add_12.c":78:25)):  // 2 preds: ^bb8, ^bb9
    cir.br ^bb11 loc(#loc107)
  ^bb11:  // pred: ^bb10
    %115 = cir.cast(integral, %114 : !u64i), !s64i loc(#loc107)
    cir.store %115, %2 : !s64i, !cir.ptr<!s64i> loc(#loc219)
    cir.br ^bb12 loc(#loc99)
  ^bb12:  // 2 preds: ^bb6, ^bb11
    cir.br ^bb13 loc(#loc99)
  ^bb13:  // pred: ^bb12
    cir.br ^bb14 loc(#loc220)
  ^bb14:  // pred: ^bb13
    %116 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc221)
    %117 = cir.cast(bitcast, %116 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc221)
    %118 = cir.call %117() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc111)
    %119 = cir.cast(int_to_bool, %118 : !s32i), !cir.bool loc(#loc111)
    cir.brcond %119 ^bb15, ^bb21 loc(#loc222)
  ^bb15:  // pred: ^bb14
    cir.br ^bb16 loc(#loc223)
  ^bb16:  // pred: ^bb15
    %120 = cir.load %2 : !cir.ptr<!s64i>, !s64i loc(#loc118)
    %121 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc119)
    %122 = cir.cmp(lt, %120, %121) : !s64i, !cir.bool loc(#loc224)
    cir.brcond %122 ^bb17, ^bb18 loc(#loc225)
  ^bb17:  // pred: ^bb16
    %123 = cir.load %2 : !cir.ptr<!s64i>, !s64i loc(#loc123)
    %124 = cir.const #cir.int<1> : !s32i loc(#loc91)
    %125 = cir.cast(integral, %124 : !s32i), !s64i loc(#loc91)
    %126 = cir.binop(add, %123, %125) nsw : !s64i loc(#loc123)
    cir.store %126, %0 : !s64i, !cir.ptr<!s64i> loc(#loc211)
    %127 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc124)
    cir.call @printLongLongLine(%127) : (!s64i) -> () loc(#loc125)
    cir.br ^bb19 loc(#loc121)
  ^bb18:  // pred: ^bb16
    %128 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc126)
    %129 = cir.cast(array_to_ptrdecay, %128 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc126)
    cir.call @printLine(%129) : (!cir.ptr<!s8i>) -> () loc(#loc127)
    cir.br ^bb19 loc(#loc117)
  ^bb19:  // 2 preds: ^bb17, ^bb18
    cir.br ^bb20 loc(#loc117)
  ^bb20:  // pred: ^bb19
    cir.br ^bb27 loc(#loc114)
  ^bb21:  // pred: ^bb14
    cir.br ^bb22 loc(#loc226)
  ^bb22:  // pred: ^bb21
    %130 = cir.load %2 : !cir.ptr<!s64i>, !s64i loc(#loc130)
    %131 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc131)
    %132 = cir.cmp(lt, %130, %131) : !s64i, !cir.bool loc(#loc227)
    cir.brcond %132 ^bb23, ^bb24 loc(#loc228)
  ^bb23:  // pred: ^bb22
    %133 = cir.load %2 : !cir.ptr<!s64i>, !s64i loc(#loc135)
    %134 = cir.const #cir.int<1> : !s32i loc(#loc93)
    %135 = cir.cast(integral, %134 : !s32i), !s64i loc(#loc93)
    %136 = cir.binop(add, %133, %135) nsw : !s64i loc(#loc135)
    cir.store %136, %1 : !s64i, !cir.ptr<!s64i> loc(#loc212)
    %137 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc136)
    cir.call @printLongLongLine(%137) : (!s64i) -> () loc(#loc137)
    cir.br ^bb25 loc(#loc133)
  ^bb24:  // pred: ^bb22
    %138 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc138)
    %139 = cir.cast(array_to_ptrdecay, %138 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc138)
    cir.call @printLine(%139) : (!cir.ptr<!s8i>) -> () loc(#loc139)
    cir.br ^bb25 loc(#loc129)
  ^bb25:  // 2 preds: ^bb23, ^bb24
    cir.br ^bb26 loc(#loc129)
  ^bb26:  // pred: ^bb25
    cir.br ^bb27 loc(#loc110)
  ^bb27:  // 2 preds: ^bb20, ^bb26
    cir.br ^bb28 loc(#loc110)
  ^bb28:  // pred: ^bb27
    cir.return loc(#loc89)
  } loc(#loc210)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc230)
    %1 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc231)
    %2 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc232)
    %3 = cir.const #cir.int<0> : !s64i loc(#loc148)
    cir.store %3, %2 : !s64i, !cir.ptr<!s64i> loc(#loc233)
    cir.br ^bb1 loc(#loc234)
  ^bb1:  // pred: ^bb0
    %4 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc235)
    %5 = cir.cast(bitcast, %4 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc235)
    %6 = cir.call %5() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc152)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc152)
    cir.brcond %7 ^bb2, ^bb3 loc(#loc236)
  ^bb2:  // pred: ^bb1
    %8 = cir.const #cir.int<2> : !s32i loc(#loc157)
    %9 = cir.cast(integral, %8 : !s32i), !s64i loc(#loc157)
    cir.store %9, %2 : !s64i, !cir.ptr<!s64i> loc(#loc237)
    cir.br ^bb4 loc(#loc155)
  ^bb3:  // pred: ^bb1
    %10 = cir.const #cir.int<2> : !s32i loc(#loc159)
    %11 = cir.cast(integral, %10 : !s32i), !s64i loc(#loc159)
    cir.store %11, %2 : !s64i, !cir.ptr<!s64i> loc(#loc238)
    cir.br ^bb4 loc(#loc151)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc151)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc239)
  ^bb6:  // pred: ^bb5
    %12 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc240)
    %13 = cir.cast(bitcast, %12 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc240)
    %14 = cir.call %13() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc163)
    %15 = cir.cast(int_to_bool, %14 : !s32i), !cir.bool loc(#loc163)
    cir.brcond %15 ^bb7, ^bb10 loc(#loc241)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc242)
  ^bb8:  // pred: ^bb7
    %16 = cir.load %2 : !cir.ptr<!s64i>, !s64i loc(#loc170)
    %17 = cir.const #cir.int<1> : !s32i loc(#loc143)
    %18 = cir.cast(integral, %17 : !s32i), !s64i loc(#loc143)
    %19 = cir.binop(add, %16, %18) nsw : !s64i loc(#loc170)
    cir.store %19, %0 : !s64i, !cir.ptr<!s64i> loc(#loc230)
    %20 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc171)
    cir.call @printLongLongLine(%20) : (!s64i) -> () loc(#loc172)
    cir.br ^bb9 loc(#loc169)
  ^bb9:  // pred: ^bb8
    cir.br ^bb13 loc(#loc166)
  ^bb10:  // pred: ^bb6
    cir.br ^bb11 loc(#loc243)
  ^bb11:  // pred: ^bb10
    %21 = cir.load %2 : !cir.ptr<!s64i>, !s64i loc(#loc175)
    %22 = cir.const #cir.int<1> : !s32i loc(#loc145)
    %23 = cir.cast(integral, %22 : !s32i), !s64i loc(#loc145)
    %24 = cir.binop(add, %21, %23) nsw : !s64i loc(#loc175)
    cir.store %24, %1 : !s64i, !cir.ptr<!s64i> loc(#loc231)
    %25 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc176)
    cir.call @printLongLongLine(%25) : (!s64i) -> () loc(#loc177)
    cir.br ^bb12 loc(#loc174)
  ^bb12:  // pred: ^bb11
    cir.br ^bb13 loc(#loc162)
  ^bb13:  // 2 preds: ^bb9, ^bb12
    cir.br ^bb14 loc(#loc162)
  ^bb14:  // pred: ^bb13
    cir.return loc(#loc141)
  } loc(#loc229)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int64_t_rand_add_12.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":52:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":52:30)
#loc3 = loc("/usr/include/stdlib.h":573:1)
#loc4 = loc("/usr/include/stdlib.h":573:24)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":26:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":26:49)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("CWE190_Integer_Overflow__int64_t_rand_add_12.c":54:23)
#loc10 = loc("CWE190_Integer_Overflow__int64_t_rand_add_12.c":22:1)
#loc11 = loc("CWE190_Integer_Overflow__int64_t_rand_add_12.c":57:1)
#loc12 = loc("CWE190_Integer_Overflow__int64_t_rand_add_12.c":40:13)
#loc13 = loc("CWE190_Integer_Overflow__int64_t_rand_add_12.c":40:37)
#loc14 = loc("CWE190_Integer_Overflow__int64_t_rand_add_12.c":49:13)
#loc15 = loc("CWE190_Integer_Overflow__int64_t_rand_add_12.c":49:37)
#loc16 = loc("CWE190_Integer_Overflow__int64_t_rand_add_12.c":24:5)
#loc17 = loc("CWE190_Integer_Overflow__int64_t_rand_add_12.c":24:13)
#loc18 = loc("CWE190_Integer_Overflow__int64_t_rand_add_12.c":25:12)
#loc19 = loc("CWE190_Integer_Overflow__int64_t_rand_add_12.c":25:5)
#loc20 = loc("CWE190_Integer_Overflow__int64_t_rand_add_12.c":26:5)
#loc21 = loc("CWE190_Integer_Overflow__int64_t_rand_add_12.c":35:5)
#loc22 = loc("CWE190_Integer_Overflow__int64_t_rand_add_12.c":26:8)
#loc23 = loc("CWE190_Integer_Overflow__int64_t_rand_add_12.c":26:33)
#loc24 = loc("CWE190_Integer_Overflow__int64_t_rand_add_12.c":27:5)
#loc25 = loc("CWE190_Integer_Overflow__int64_t_rand_add_12.c":30:5)
#loc26 = loc("CWE190_Integer_Overflow__int64_t_rand_add_12.c":32:5)
#loc28 = loc("CWE190_Integer_Overflow__int64_t_rand_add_12.c":29:9)
#loc29 = loc("CWE190_Integer_Overflow__int64_t_rand_add_12.c":34:16)
#loc30 = loc("CWE190_Integer_Overflow__int64_t_rand_add_12.c":34:9)
#loc31 = loc("CWE190_Integer_Overflow__int64_t_rand_add_12.c":36:5)
#loc32 = loc("CWE190_Integer_Overflow__int64_t_rand_add_12.c":56:5)
#loc33 = loc("CWE190_Integer_Overflow__int64_t_rand_add_12.c":36:8)
#loc34 = loc("CWE190_Integer_Overflow__int64_t_rand_add_12.c":36:33)
#loc35 = loc("CWE190_Integer_Overflow__int64_t_rand_add_12.c":37:5)
#loc36 = loc("CWE190_Integer_Overflow__int64_t_rand_add_12.c":43:5)
#loc37 = loc("CWE190_Integer_Overflow__int64_t_rand_add_12.c":45:5)
#loc38 = loc("CWE190_Integer_Overflow__int64_t_rand_add_12.c":38:9)
#loc39 = loc("CWE190_Integer_Overflow__int64_t_rand_add_12.c":42:9)
#loc40 = loc("CWE190_Integer_Overflow__int64_t_rand_add_12.c":40:30)
#loc41 = loc("CWE190_Integer_Overflow__int64_t_rand_add_12.c":41:31)
#loc42 = loc("CWE190_Integer_Overflow__int64_t_rand_add_12.c":41:13)
#loc43 = loc("CWE190_Integer_Overflow__int64_t_rand_add_12.c":47:9)
#loc44 = loc("CWE190_Integer_Overflow__int64_t_rand_add_12.c":55:9)
#loc45 = loc("CWE190_Integer_Overflow__int64_t_rand_add_12.c":47:13)
#loc46 = loc("CWE190_Integer_Overflow__int64_t_rand_add_12.c":47:20)
#loc47 = loc("CWE190_Integer_Overflow__int64_t_rand_add_12.c":48:9)
#loc48 = loc("CWE190_Integer_Overflow__int64_t_rand_add_12.c":51:9)
#loc49 = loc("CWE190_Integer_Overflow__int64_t_rand_add_12.c":53:9)
#loc50 = loc("CWE190_Integer_Overflow__int64_t_rand_add_12.c":49:30)
#loc51 = loc("CWE190_Integer_Overflow__int64_t_rand_add_12.c":50:31)
#loc52 = loc("CWE190_Integer_Overflow__int64_t_rand_add_12.c":50:13)
#loc53 = loc("CWE190_Integer_Overflow__int64_t_rand_add_12.c":54:13)
#loc54 = loc("CWE190_Integer_Overflow__int64_t_rand_add_12.c":143:1)
#loc55 = loc("CWE190_Integer_Overflow__int64_t_rand_add_12.c":147:1)
#loc56 = loc("CWE190_Integer_Overflow__int64_t_rand_add_12.c":145:5)
#loc57 = loc("CWE190_Integer_Overflow__int64_t_rand_add_12.c":145:13)
#loc58 = loc("CWE190_Integer_Overflow__int64_t_rand_add_12.c":146:5)
#loc59 = loc("CWE190_Integer_Overflow__int64_t_rand_add_12.c":146:13)
#loc60 = loc("/usr/include/stdlib.h":575:1)
#loc61 = loc("/usr/include/stdlib.h":575:41)
#loc62 = loc("/usr/include/time.h":76:1)
#loc63 = loc("/usr/include/time.h":76:38)
#loc64 = loc("CWE190_Integer_Overflow__int64_t_rand_add_12.c":163:15)
#loc65 = loc("CWE190_Integer_Overflow__int64_t_rand_add_12.c":165:15)
#loc66 = loc("CWE190_Integer_Overflow__int64_t_rand_add_12.c":168:15)
#loc67 = loc("CWE190_Integer_Overflow__int64_t_rand_add_12.c":170:15)
#loc68 = loc("CWE190_Integer_Overflow__int64_t_rand_add_12.c":158:1)
#loc69 = loc("CWE190_Integer_Overflow__int64_t_rand_add_12.c":173:1)
#loc74 = loc("CWE190_Integer_Overflow__int64_t_rand_add_12.c":159:1)
#loc75 = loc("CWE190_Integer_Overflow__int64_t_rand_add_12.c":161:27)
#loc76 = loc("CWE190_Integer_Overflow__int64_t_rand_add_12.c":161:22)
#loc77 = loc("CWE190_Integer_Overflow__int64_t_rand_add_12.c":161:5)
#loc78 = loc("CWE190_Integer_Overflow__int64_t_rand_add_12.c":163:5)
#loc79 = loc("CWE190_Integer_Overflow__int64_t_rand_add_12.c":164:5)
#loc80 = loc("CWE190_Integer_Overflow__int64_t_rand_add_12.c":164:55)
#loc81 = loc("CWE190_Integer_Overflow__int64_t_rand_add_12.c":165:5)
#loc82 = loc("CWE190_Integer_Overflow__int64_t_rand_add_12.c":168:5)
#loc83 = loc("CWE190_Integer_Overflow__int64_t_rand_add_12.c":169:5)
#loc84 = loc("CWE190_Integer_Overflow__int64_t_rand_add_12.c":169:54)
#loc85 = loc("CWE190_Integer_Overflow__int64_t_rand_add_12.c":170:5)
#loc86 = loc("CWE190_Integer_Overflow__int64_t_rand_add_12.c":172:12)
#loc87 = loc("CWE190_Integer_Overflow__int64_t_rand_add_12.c":172:5)
#loc88 = loc("CWE190_Integer_Overflow__int64_t_rand_add_12.c":66:1)
#loc89 = loc("CWE190_Integer_Overflow__int64_t_rand_add_12.c":106:1)
#loc90 = loc("CWE190_Integer_Overflow__int64_t_rand_add_12.c":85:13)
#loc91 = loc("CWE190_Integer_Overflow__int64_t_rand_add_12.c":85:37)
#loc92 = loc("CWE190_Integer_Overflow__int64_t_rand_add_12.c":98:13)
#loc93 = loc("CWE190_Integer_Overflow__int64_t_rand_add_12.c":98:37)
#loc94 = loc("CWE190_Integer_Overflow__int64_t_rand_add_12.c":68:5)
#loc95 = loc("CWE190_Integer_Overflow__int64_t_rand_add_12.c":68:13)
#loc96 = loc("CWE190_Integer_Overflow__int64_t_rand_add_12.c":69:12)
#loc97 = loc("CWE190_Integer_Overflow__int64_t_rand_add_12.c":69:5)
#loc98 = loc("CWE190_Integer_Overflow__int64_t_rand_add_12.c":70:5)
#loc99 = loc("CWE190_Integer_Overflow__int64_t_rand_add_12.c":79:5)
#loc100 = loc("CWE190_Integer_Overflow__int64_t_rand_add_12.c":70:8)
#loc101 = loc("CWE190_Integer_Overflow__int64_t_rand_add_12.c":70:33)
#loc102 = loc("CWE190_Integer_Overflow__int64_t_rand_add_12.c":71:5)
#loc103 = loc("CWE190_Integer_Overflow__int64_t_rand_add_12.c":74:5)
#loc104 = loc("CWE190_Integer_Overflow__int64_t_rand_add_12.c":76:5)
#loc106 = loc("CWE190_Integer_Overflow__int64_t_rand_add_12.c":73:9)
#loc108 = loc("CWE190_Integer_Overflow__int64_t_rand_add_12.c":78:9)
#loc109 = loc("CWE190_Integer_Overflow__int64_t_rand_add_12.c":80:5)
#loc110 = loc("CWE190_Integer_Overflow__int64_t_rand_add_12.c":105:5)
#loc111 = loc("CWE190_Integer_Overflow__int64_t_rand_add_12.c":80:8)
#loc112 = loc("CWE190_Integer_Overflow__int64_t_rand_add_12.c":80:33)
#loc113 = loc("CWE190_Integer_Overflow__int64_t_rand_add_12.c":81:5)
#loc114 = loc("CWE190_Integer_Overflow__int64_t_rand_add_12.c":92:5)
#loc115 = loc("CWE190_Integer_Overflow__int64_t_rand_add_12.c":94:5)
#loc116 = loc("CWE190_Integer_Overflow__int64_t_rand_add_12.c":83:9)
#loc117 = loc("CWE190_Integer_Overflow__int64_t_rand_add_12.c":91:9)
#loc118 = loc("CWE190_Integer_Overflow__int64_t_rand_add_12.c":83:13)
#loc119 = loc("CWE190_Integer_Overflow__int64_t_rand_add_12.c":83:20)
#loc120 = loc("CWE190_Integer_Overflow__int64_t_rand_add_12.c":84:9)
#loc121 = loc("CWE190_Integer_Overflow__int64_t_rand_add_12.c":87:9)
#loc122 = loc("CWE190_Integer_Overflow__int64_t_rand_add_12.c":89:9)
#loc123 = loc("CWE190_Integer_Overflow__int64_t_rand_add_12.c":85:30)
#loc124 = loc("CWE190_Integer_Overflow__int64_t_rand_add_12.c":86:31)
#loc125 = loc("CWE190_Integer_Overflow__int64_t_rand_add_12.c":86:13)
#loc126 = loc("CWE190_Integer_Overflow__int64_t_rand_add_12.c":90:23)
#loc127 = loc("CWE190_Integer_Overflow__int64_t_rand_add_12.c":90:13)
#loc128 = loc("CWE190_Integer_Overflow__int64_t_rand_add_12.c":96:9)
#loc129 = loc("CWE190_Integer_Overflow__int64_t_rand_add_12.c":104:9)
#loc130 = loc("CWE190_Integer_Overflow__int64_t_rand_add_12.c":96:13)
#loc131 = loc("CWE190_Integer_Overflow__int64_t_rand_add_12.c":96:20)
#loc132 = loc("CWE190_Integer_Overflow__int64_t_rand_add_12.c":97:9)
#loc133 = loc("CWE190_Integer_Overflow__int64_t_rand_add_12.c":100:9)
#loc134 = loc("CWE190_Integer_Overflow__int64_t_rand_add_12.c":102:9)
#loc135 = loc("CWE190_Integer_Overflow__int64_t_rand_add_12.c":98:30)
#loc136 = loc("CWE190_Integer_Overflow__int64_t_rand_add_12.c":99:31)
#loc137 = loc("CWE190_Integer_Overflow__int64_t_rand_add_12.c":99:13)
#loc138 = loc("CWE190_Integer_Overflow__int64_t_rand_add_12.c":103:23)
#loc139 = loc("CWE190_Integer_Overflow__int64_t_rand_add_12.c":103:13)
#loc140 = loc("CWE190_Integer_Overflow__int64_t_rand_add_12.c":111:1)
#loc141 = loc("CWE190_Integer_Overflow__int64_t_rand_add_12.c":141:1)
#loc142 = loc("CWE190_Integer_Overflow__int64_t_rand_add_12.c":129:13)
#loc143 = loc("CWE190_Integer_Overflow__int64_t_rand_add_12.c":129:37)
#loc144 = loc("CWE190_Integer_Overflow__int64_t_rand_add_12.c":137:13)
#loc145 = loc("CWE190_Integer_Overflow__int64_t_rand_add_12.c":137:37)
#loc146 = loc("CWE190_Integer_Overflow__int64_t_rand_add_12.c":113:5)
#loc147 = loc("CWE190_Integer_Overflow__int64_t_rand_add_12.c":113:13)
#loc148 = loc("CWE190_Integer_Overflow__int64_t_rand_add_12.c":114:12)
#loc149 = loc("CWE190_Integer_Overflow__int64_t_rand_add_12.c":114:5)
#loc150 = loc("CWE190_Integer_Overflow__int64_t_rand_add_12.c":115:5)
#loc151 = loc("CWE190_Integer_Overflow__int64_t_rand_add_12.c":124:5)
#loc152 = loc("CWE190_Integer_Overflow__int64_t_rand_add_12.c":115:8)
#loc153 = loc("CWE190_Integer_Overflow__int64_t_rand_add_12.c":115:33)
#loc154 = loc("CWE190_Integer_Overflow__int64_t_rand_add_12.c":116:5)
#loc155 = loc("CWE190_Integer_Overflow__int64_t_rand_add_12.c":119:5)
#loc156 = loc("CWE190_Integer_Overflow__int64_t_rand_add_12.c":121:5)
#loc157 = loc("CWE190_Integer_Overflow__int64_t_rand_add_12.c":118:16)
#loc158 = loc("CWE190_Integer_Overflow__int64_t_rand_add_12.c":118:9)
#loc159 = loc("CWE190_Integer_Overflow__int64_t_rand_add_12.c":123:16)
#loc160 = loc("CWE190_Integer_Overflow__int64_t_rand_add_12.c":123:9)
#loc161 = loc("CWE190_Integer_Overflow__int64_t_rand_add_12.c":125:5)
#loc162 = loc("CWE190_Integer_Overflow__int64_t_rand_add_12.c":140:5)
#loc163 = loc("CWE190_Integer_Overflow__int64_t_rand_add_12.c":125:8)
#loc164 = loc("CWE190_Integer_Overflow__int64_t_rand_add_12.c":125:33)
#loc165 = loc("CWE190_Integer_Overflow__int64_t_rand_add_12.c":126:5)
#loc166 = loc("CWE190_Integer_Overflow__int64_t_rand_add_12.c":132:5)
#loc167 = loc("CWE190_Integer_Overflow__int64_t_rand_add_12.c":134:5)
#loc168 = loc("CWE190_Integer_Overflow__int64_t_rand_add_12.c":127:9)
#loc169 = loc("CWE190_Integer_Overflow__int64_t_rand_add_12.c":131:9)
#loc170 = loc("CWE190_Integer_Overflow__int64_t_rand_add_12.c":129:30)
#loc171 = loc("CWE190_Integer_Overflow__int64_t_rand_add_12.c":130:31)
#loc172 = loc("CWE190_Integer_Overflow__int64_t_rand_add_12.c":130:13)
#loc173 = loc("CWE190_Integer_Overflow__int64_t_rand_add_12.c":135:9)
#loc174 = loc("CWE190_Integer_Overflow__int64_t_rand_add_12.c":139:9)
#loc175 = loc("CWE190_Integer_Overflow__int64_t_rand_add_12.c":137:30)
#loc176 = loc("CWE190_Integer_Overflow__int64_t_rand_add_12.c":138:31)
#loc177 = loc("CWE190_Integer_Overflow__int64_t_rand_add_12.c":138:13)
#loc178 = loc(fused[#loc1, #loc2])
#loc179 = loc(fused[#loc3, #loc4])
#loc180 = loc(fused[#loc5, #loc6])
#loc181 = loc(fused[#loc7, #loc8])
#loc182 = loc(fused[#loc10, #loc11])
#loc183 = loc(fused[#loc12, #loc13])
#loc184 = loc(fused[#loc14, #loc15])
#loc185 = loc(fused[#loc16, #loc17])
#loc186 = loc(fused[#loc19, #loc18])
#loc187 = loc(fused[#loc20, #loc21])
#loc188 = loc(fused[#loc22, #loc23])
#loc189 = loc(fused[#loc24, #loc25, #loc26, #loc21])
#loc190 = loc(fused[#loc28, #loc27])
#loc191 = loc(fused[#loc30, #loc29])
#loc192 = loc(fused[#loc31, #loc32])
#loc193 = loc(fused[#loc33, #loc34])
#loc194 = loc(fused[#loc35, #loc36, #loc37, #loc32])
#loc195 = loc(fused[#loc38, #loc39])
#loc196 = loc(fused[#loc43, #loc44])
#loc197 = loc(fused[#loc45, #loc46])
#loc198 = loc(fused[#loc47, #loc48, #loc49, #loc44])
#loc199 = loc(fused[#loc54, #loc55])
#loc200 = loc(fused[#loc56, #loc57])
#loc201 = loc(fused[#loc58, #loc59])
#loc202 = loc(fused[#loc60, #loc61])
#loc203 = loc(fused[#loc62, #loc63])
#loc204 = loc(fused[#loc68, #loc69])
#loc207 = loc(fused[#loc79, #loc80])
#loc208 = loc(fused[#loc83, #loc84])
#loc209 = loc(fused[#loc87, #loc86])
#loc210 = loc(fused[#loc88, #loc89])
#loc211 = loc(fused[#loc90, #loc91])
#loc212 = loc(fused[#loc92, #loc93])
#loc213 = loc(fused[#loc94, #loc95])
#loc214 = loc(fused[#loc97, #loc96])
#loc215 = loc(fused[#loc98, #loc99])
#loc216 = loc(fused[#loc100, #loc101])
#loc217 = loc(fused[#loc102, #loc103, #loc104, #loc99])
#loc218 = loc(fused[#loc106, #loc105])
#loc219 = loc(fused[#loc108, #loc107])
#loc220 = loc(fused[#loc109, #loc110])
#loc221 = loc(fused[#loc111, #loc112])
#loc222 = loc(fused[#loc113, #loc114, #loc115, #loc110])
#loc223 = loc(fused[#loc116, #loc117])
#loc224 = loc(fused[#loc118, #loc119])
#loc225 = loc(fused[#loc120, #loc121, #loc122, #loc117])
#loc226 = loc(fused[#loc128, #loc129])
#loc227 = loc(fused[#loc130, #loc131])
#loc228 = loc(fused[#loc132, #loc133, #loc134, #loc129])
#loc229 = loc(fused[#loc140, #loc141])
#loc230 = loc(fused[#loc142, #loc143])
#loc231 = loc(fused[#loc144, #loc145])
#loc232 = loc(fused[#loc146, #loc147])
#loc233 = loc(fused[#loc149, #loc148])
#loc234 = loc(fused[#loc150, #loc151])
#loc235 = loc(fused[#loc152, #loc153])
#loc236 = loc(fused[#loc154, #loc155, #loc156, #loc151])
#loc237 = loc(fused[#loc158, #loc157])
#loc238 = loc(fused[#loc160, #loc159])
#loc239 = loc(fused[#loc161, #loc162])
#loc240 = loc(fused[#loc163, #loc164])
#loc241 = loc(fused[#loc165, #loc166, #loc167, #loc162])
#loc242 = loc(fused[#loc168, #loc169])
#loc243 = loc(fused[#loc173, #loc174])
