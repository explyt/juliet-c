!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE398_Poor_Code_Quality/CWE398_Poor_Code_Quality__equals_15.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e", "dlti.endianness" = "little">} {
  cir.func private @printIntLine(!s32i) loc(#loc73)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc74)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc5)
  cir.func no_proto @CWE398_Poor_Code_Quality__equals_15_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["intOne", init] {alignment = 4 : i64} loc(#loc76)
    cir.br ^bb1 loc(#loc77)
  ^bb1:  // pred: ^bb0
    %1 = cir.const #cir.int<6> : !s32i loc(#loc12)
    cir.br ^bb2 loc(#loc10)
  ^bb2:  // pred: ^bb1
    cir.switch.flat %1 : !s32i, ^bb7 [
      6: ^bb4
    ] loc(#loc10)
  ^bb3:  // no predecessors
    cir.br ^bb4 loc(#loc13)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc78)
  ^bb5:  // pred: ^bb4
    %2 = cir.const #cir.int<1> : !s32i loc(#loc9)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc76)
    %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc16)
    cir.call @printIntLine(%3) : (!s32i) -> () loc(#loc17)
    %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc18)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc79)
    %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc20)
    cir.call @printIntLine(%5) : (!s32i) -> () loc(#loc21)
    cir.br ^bb6 loc(#loc15)
  ^bb6:  // pred: ^bb5
    cir.br ^bb8 loc(#loc22)
  ^bb7:  // pred: ^bb2
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc5)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc5)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc23)
    cir.br ^bb8 loc(#loc24)
  ^bb8:  // 2 preds: ^bb6, ^bb7
    cir.br ^bb9 loc(#loc11)
  ^bb9:  // pred: ^bb8
    cir.return loc(#loc7)
  } loc(#loc75)
  cir.func no_proto @CWE398_Poor_Code_Quality__equals_15_good() extra(#fn_attr) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<()>> loc(#loc81)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc27)
    %1 = cir.get_global @good2 : !cir.ptr<!cir.func<()>> loc(#loc82)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc29)
    cir.return loc(#loc26)
  } loc(#loc80)
  cir.func no_proto internal private @good1() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["intOne", init] {alignment = 4 : i64} loc(#loc84)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["intFive", init] {alignment = 4 : i64} loc(#loc85)
    cir.br ^bb1 loc(#loc86)
  ^bb1:  // pred: ^bb0
    %2 = cir.const #cir.int<5> : !s32i loc(#loc38)
    cir.br ^bb2 loc(#loc36)
  ^bb2:  // pred: ^bb1
    cir.switch.flat %2 : !s32i, ^bb5 [
      6: ^bb4
    ] loc(#loc36)
  ^bb3:  // no predecessors
    cir.br ^bb4 loc(#loc39)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc40)
    %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc40)
    cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc41)
    cir.br ^bb8 loc(#loc42)
  ^bb5:  // pred: ^bb2
    cir.br ^bb6 loc(#loc87)
  ^bb6:  // pred: ^bb5
    %5 = cir.const #cir.int<1> : !s32i loc(#loc34)
    cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc84)
    %6 = cir.const #cir.int<5> : !s32i loc(#loc35)
    cir.store %6, %1 : !s32i, !cir.ptr<!s32i> loc(#loc85)
    %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc45)
    cir.call @printIntLine(%7) : (!s32i) -> () loc(#loc46)
    %8 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc47)
    cir.store %8, %0 : !s32i, !cir.ptr<!s32i> loc(#loc88)
    %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc49)
    cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc50)
    cir.br ^bb7 loc(#loc44)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc51)
  ^bb8:  // 2 preds: ^bb4, ^bb7
    cir.br ^bb9 loc(#loc37)
  ^bb9:  // pred: ^bb8
    cir.return loc(#loc32)
  } loc(#loc83)
  cir.func no_proto internal private @good2() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["intOne", init] {alignment = 4 : i64} loc(#loc90)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["intFive", init] {alignment = 4 : i64} loc(#loc91)
    cir.br ^bb1 loc(#loc92)
  ^bb1:  // pred: ^bb0
    %2 = cir.const #cir.int<6> : !s32i loc(#loc59)
    cir.br ^bb2 loc(#loc57)
  ^bb2:  // pred: ^bb1
    cir.switch.flat %2 : !s32i, ^bb7 [
      6: ^bb4
    ] loc(#loc57)
  ^bb3:  // no predecessors
    cir.br ^bb4 loc(#loc60)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc93)
  ^bb5:  // pred: ^bb4
    %3 = cir.const #cir.int<1> : !s32i loc(#loc55)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc90)
    %4 = cir.const #cir.int<5> : !s32i loc(#loc56)
    cir.store %4, %1 : !s32i, !cir.ptr<!s32i> loc(#loc91)
    %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc63)
    cir.call @printIntLine(%5) : (!s32i) -> () loc(#loc64)
    %6 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc65)
    cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc94)
    %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc67)
    cir.call @printIntLine(%7) : (!s32i) -> () loc(#loc68)
    cir.br ^bb6 loc(#loc62)
  ^bb6:  // pred: ^bb5
    cir.br ^bb8 loc(#loc69)
  ^bb7:  // pred: ^bb2
    %8 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc70)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc70)
    cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc71)
    cir.br ^bb8 loc(#loc72)
  ^bb8:  // 2 preds: ^bb6, ^bb7
    cir.br ^bb9 loc(#loc58)
  ^bb9:  // pred: ^bb8
    cir.return loc(#loc53)
  } loc(#loc89)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE398_Poor_Code_Quality/CWE398_Poor_Code_Quality__equals_15.c":0:0)
#loc1 = loc("../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc4 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc5 = loc("CWE398_Poor_Code_Quality__equals_15.c":35:19)
#loc6 = loc("CWE398_Poor_Code_Quality__equals_15.c":20:1)
#loc7 = loc("CWE398_Poor_Code_Quality__equals_15.c":38:1)
#loc8 = loc("CWE398_Poor_Code_Quality__equals_15.c":26:9)
#loc9 = loc("CWE398_Poor_Code_Quality__equals_15.c":26:22)
#loc10 = loc("CWE398_Poor_Code_Quality__equals_15.c":22:5)
#loc11 = loc("CWE398_Poor_Code_Quality__equals_15.c":37:5)
#loc12 = loc("CWE398_Poor_Code_Quality__equals_15.c":22:12)
#loc13 = loc("CWE398_Poor_Code_Quality__equals_15.c":24:5)
#loc14 = loc("CWE398_Poor_Code_Quality__equals_15.c":25:5)
#loc15 = loc("CWE398_Poor_Code_Quality__equals_15.c":31:5)
#loc16 = loc("CWE398_Poor_Code_Quality__equals_15.c":27:22)
#loc17 = loc("CWE398_Poor_Code_Quality__equals_15.c":27:9)
#loc18 = loc("CWE398_Poor_Code_Quality__equals_15.c":29:18)
#loc19 = loc("CWE398_Poor_Code_Quality__equals_15.c":29:9)
#loc20 = loc("CWE398_Poor_Code_Quality__equals_15.c":30:22)
#loc21 = loc("CWE398_Poor_Code_Quality__equals_15.c":30:9)
#loc22 = loc("CWE398_Poor_Code_Quality__equals_15.c":32:5)
#loc23 = loc("CWE398_Poor_Code_Quality__equals_15.c":35:9)
#loc24 = loc("CWE398_Poor_Code_Quality__equals_15.c":36:9)
#loc25 = loc("CWE398_Poor_Code_Quality__equals_15.c":86:1)
#loc26 = loc("CWE398_Poor_Code_Quality__equals_15.c":90:1)
#loc27 = loc("CWE398_Poor_Code_Quality__equals_15.c":88:5)
#loc28 = loc("CWE398_Poor_Code_Quality__equals_15.c":88:11)
#loc29 = loc("CWE398_Poor_Code_Quality__equals_15.c":89:5)
#loc30 = loc("CWE398_Poor_Code_Quality__equals_15.c":89:11)
#loc31 = loc("CWE398_Poor_Code_Quality__equals_15.c":45:1)
#loc32 = loc("CWE398_Poor_Code_Quality__equals_15.c":63:1)
#loc33 = loc("CWE398_Poor_Code_Quality__equals_15.c":55:9)
#loc34 = loc("CWE398_Poor_Code_Quality__equals_15.c":55:22)
#loc35 = loc("CWE398_Poor_Code_Quality__equals_15.c":55:35)
#loc36 = loc("CWE398_Poor_Code_Quality__equals_15.c":47:5)
#loc37 = loc("CWE398_Poor_Code_Quality__equals_15.c":62:5)
#loc38 = loc("CWE398_Poor_Code_Quality__equals_15.c":47:12)
#loc39 = loc("CWE398_Poor_Code_Quality__equals_15.c":49:5)
#loc40 = loc("CWE398_Poor_Code_Quality__equals_15.c":51:19)
#loc41 = loc("CWE398_Poor_Code_Quality__equals_15.c":51:9)
#loc42 = loc("CWE398_Poor_Code_Quality__equals_15.c":52:9)
#loc43 = loc("CWE398_Poor_Code_Quality__equals_15.c":54:5)
#loc44 = loc("CWE398_Poor_Code_Quality__equals_15.c":60:5)
#loc45 = loc("CWE398_Poor_Code_Quality__equals_15.c":56:22)
#loc46 = loc("CWE398_Poor_Code_Quality__equals_15.c":56:9)
#loc47 = loc("CWE398_Poor_Code_Quality__equals_15.c":58:18)
#loc48 = loc("CWE398_Poor_Code_Quality__equals_15.c":58:9)
#loc49 = loc("CWE398_Poor_Code_Quality__equals_15.c":59:22)
#loc50 = loc("CWE398_Poor_Code_Quality__equals_15.c":59:9)
#loc51 = loc("CWE398_Poor_Code_Quality__equals_15.c":61:5)
#loc52 = loc("CWE398_Poor_Code_Quality__equals_15.c":66:1)
#loc53 = loc("CWE398_Poor_Code_Quality__equals_15.c":84:1)
#loc54 = loc("CWE398_Poor_Code_Quality__equals_15.c":72:9)
#loc55 = loc("CWE398_Poor_Code_Quality__equals_15.c":72:22)
#loc56 = loc("CWE398_Poor_Code_Quality__equals_15.c":72:35)
#loc57 = loc("CWE398_Poor_Code_Quality__equals_15.c":68:5)
#loc58 = loc("CWE398_Poor_Code_Quality__equals_15.c":83:5)
#loc59 = loc("CWE398_Poor_Code_Quality__equals_15.c":68:12)
#loc60 = loc("CWE398_Poor_Code_Quality__equals_15.c":70:5)
#loc61 = loc("CWE398_Poor_Code_Quality__equals_15.c":71:5)
#loc62 = loc("CWE398_Poor_Code_Quality__equals_15.c":77:5)
#loc63 = loc("CWE398_Poor_Code_Quality__equals_15.c":73:22)
#loc64 = loc("CWE398_Poor_Code_Quality__equals_15.c":73:9)
#loc65 = loc("CWE398_Poor_Code_Quality__equals_15.c":75:18)
#loc66 = loc("CWE398_Poor_Code_Quality__equals_15.c":75:9)
#loc67 = loc("CWE398_Poor_Code_Quality__equals_15.c":76:22)
#loc68 = loc("CWE398_Poor_Code_Quality__equals_15.c":76:9)
#loc69 = loc("CWE398_Poor_Code_Quality__equals_15.c":78:5)
#loc70 = loc("CWE398_Poor_Code_Quality__equals_15.c":81:19)
#loc71 = loc("CWE398_Poor_Code_Quality__equals_15.c":81:9)
#loc72 = loc("CWE398_Poor_Code_Quality__equals_15.c":82:9)
#loc73 = loc(fused[#loc1, #loc2])
#loc74 = loc(fused[#loc3, #loc4])
#loc75 = loc(fused[#loc6, #loc7])
#loc76 = loc(fused[#loc8, #loc9])
#loc77 = loc(fused[#loc10, #loc11])
#loc78 = loc(fused[#loc14, #loc15])
#loc79 = loc(fused[#loc19, #loc18])
#loc80 = loc(fused[#loc25, #loc26])
#loc81 = loc(fused[#loc27, #loc28])
#loc82 = loc(fused[#loc29, #loc30])
#loc83 = loc(fused[#loc31, #loc32])
#loc84 = loc(fused[#loc33, #loc34])
#loc85 = loc(fused[#loc33, #loc35])
#loc86 = loc(fused[#loc36, #loc37])
#loc87 = loc(fused[#loc43, #loc44])
#loc88 = loc(fused[#loc48, #loc47])
#loc89 = loc(fused[#loc52, #loc53])
#loc90 = loc(fused[#loc54, #loc55])
#loc91 = loc(fused[#loc54, #loc56])
#loc92 = loc(fused[#loc57, #loc58])
#loc93 = loc(fused[#loc61, #loc62])
#loc94 = loc(fused[#loc66, #loc65])
