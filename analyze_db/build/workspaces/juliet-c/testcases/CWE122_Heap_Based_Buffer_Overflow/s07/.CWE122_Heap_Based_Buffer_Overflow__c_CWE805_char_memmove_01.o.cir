!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_01.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc121)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc122)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc123)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc124)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_01_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc126)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc13)
    cir.store %1, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc127)
    %2 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc15)
    %3 = cir.const #cir.int<50> : !s32i loc(#loc16)
    %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc16)
    %5 = cir.const #cir.int<1> : !u64i loc(#loc128)
    %6 = cir.binop(mul, %4, %5) : !u64i loc(#loc129)
    %7 = cir.call @malloc(%6) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc15)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc130)
    cir.store %8, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc131)
    cir.scope {
      %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc23)
      %15 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc24)
      %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc24)
      %17 = cir.cmp(eq, %14, %16) : !cir.ptr<!s8i>, !cir.bool loc(#loc133)
      cir.if %17 {
        %18 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc26)
        %19 = cir.const #cir.int<1> : !s32i loc(#loc27)
        %20 = cir.unary(minus, %19) nsw : !s32i, !s32i loc(#loc28)
        cir.call @exit(%20) : (!s32i) -> () extra(#fn_attr) loc(#loc26)
      } loc(#loc134)
    } loc(#loc132)
    %9 = cir.const #cir.int<0> : !s32i loc(#loc29)
    %10 = cir.cast(integral, %9 : !s32i), !s8i loc(#loc29)
    %11 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc30)
    %12 = cir.const #cir.int<0> : !s32i loc(#loc31)
    %13 = cir.ptr_stride(%11 : !cir.ptr<!s8i>, %12 : !s32i), !cir.ptr<!s8i> loc(#loc32)
    cir.store %10, %13 : !s8i, !cir.ptr<!s8i> loc(#loc135)
    cir.scope {
      %14 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc137)
      %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc37)
      %16 = cir.cast(bitcast, %15 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc37)
      %17 = cir.const #cir.int<67> : !s32i loc(#loc38)
      %18 = cir.const #cir.int<100> : !s32i loc(#loc39)
      %19 = cir.const #cir.int<1> : !s32i loc(#loc40)
      %20 = cir.binop(sub, %18, %19) nsw : !s32i loc(#loc39)
      %21 = cir.cast(integral, %20 : !s32i), !u64i loc(#loc39)
      cir.libc.memset %21 bytes from %16 set to %17 : !cir.ptr<!void>, !s32i, !u64i loc(#loc138)
      %22 = cir.const #cir.int<0> : !s32i loc(#loc43)
      %23 = cir.cast(integral, %22 : !s32i), !s8i loc(#loc43)
      %24 = cir.const #cir.int<100> : !s32i loc(#loc44)
      %25 = cir.const #cir.int<1> : !s32i loc(#loc45)
      %26 = cir.binop(sub, %24, %25) nsw : !s32i loc(#loc44)
      %27 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc46)
      %28 = cir.ptr_stride(%27 : !cir.ptr<!s8i>, %26 : !s32i), !cir.ptr<!s8i> loc(#loc46)
      cir.store %23, %28 : !s8i, !cir.ptr<!s8i> loc(#loc139)
      %29 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc47)
      %30 = cir.cast(bitcast, %29 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc47)
      %31 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc48)
      %32 = cir.cast(bitcast, %31 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc48)
      %33 = cir.const #cir.int<100> : !s32i loc(#loc49)
      %34 = cir.cast(integral, %33 : !s32i), !u64i loc(#loc49)
      %35 = cir.const #cir.int<1> : !u64i loc(#loc140)
      %36 = cir.binop(mul, %34, %35) : !u64i loc(#loc141)
      cir.libc.memmove %36 bytes from %32 to %30 : !cir.ptr<!void>, !u64i loc(#loc142)
      %37 = cir.const #cir.int<0> : !s32i loc(#loc54)
      %38 = cir.cast(integral, %37 : !s32i), !s8i loc(#loc54)
      %39 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc55)
      %40 = cir.const #cir.int<100> : !s32i loc(#loc56)
      %41 = cir.const #cir.int<1> : !s32i loc(#loc57)
      %42 = cir.binop(sub, %40, %41) nsw : !s32i loc(#loc56)
      %43 = cir.ptr_stride(%39 : !cir.ptr<!s8i>, %42 : !s32i), !cir.ptr<!s8i> loc(#loc58)
      cir.store %38, %43 : !s8i, !cir.ptr<!s8i> loc(#loc143)
      %44 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc59)
      cir.call @printLine(%44) : (!cir.ptr<!s8i>) -> () loc(#loc60)
      %45 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc61)
      %46 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc62)
      %47 = cir.cast(bitcast, %46 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc62)
      cir.call @free(%47) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc61)
    } loc(#loc136)
    cir.return loc(#loc10)
  } loc(#loc125)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_01_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc145)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc65)
    cir.return loc(#loc64)
  } loc(#loc144)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc147)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc71)
    cir.store %1, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc148)
    %2 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc73)
    %3 = cir.const #cir.int<100> : !s32i loc(#loc74)
    %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc74)
    %5 = cir.const #cir.int<1> : !u64i loc(#loc149)
    %6 = cir.binop(mul, %4, %5) : !u64i loc(#loc150)
    %7 = cir.call @malloc(%6) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc73)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc151)
    cir.store %8, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc152)
    cir.scope {
      %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc81)
      %15 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc82)
      %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc82)
      %17 = cir.cmp(eq, %14, %16) : !cir.ptr<!s8i>, !cir.bool loc(#loc154)
      cir.if %17 {
        %18 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc84)
        %19 = cir.const #cir.int<1> : !s32i loc(#loc85)
        %20 = cir.unary(minus, %19) nsw : !s32i, !s32i loc(#loc86)
        cir.call @exit(%20) : (!s32i) -> () extra(#fn_attr) loc(#loc84)
      } loc(#loc155)
    } loc(#loc153)
    %9 = cir.const #cir.int<0> : !s32i loc(#loc87)
    %10 = cir.cast(integral, %9 : !s32i), !s8i loc(#loc87)
    %11 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc88)
    %12 = cir.const #cir.int<0> : !s32i loc(#loc89)
    %13 = cir.ptr_stride(%11 : !cir.ptr<!s8i>, %12 : !s32i), !cir.ptr<!s8i> loc(#loc90)
    cir.store %10, %13 : !s8i, !cir.ptr<!s8i> loc(#loc156)
    cir.scope {
      %14 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc158)
      %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc95)
      %16 = cir.cast(bitcast, %15 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc95)
      %17 = cir.const #cir.int<67> : !s32i loc(#loc96)
      %18 = cir.const #cir.int<100> : !s32i loc(#loc97)
      %19 = cir.const #cir.int<1> : !s32i loc(#loc98)
      %20 = cir.binop(sub, %18, %19) nsw : !s32i loc(#loc97)
      %21 = cir.cast(integral, %20 : !s32i), !u64i loc(#loc97)
      cir.libc.memset %21 bytes from %16 set to %17 : !cir.ptr<!void>, !s32i, !u64i loc(#loc159)
      %22 = cir.const #cir.int<0> : !s32i loc(#loc101)
      %23 = cir.cast(integral, %22 : !s32i), !s8i loc(#loc101)
      %24 = cir.const #cir.int<100> : !s32i loc(#loc102)
      %25 = cir.const #cir.int<1> : !s32i loc(#loc103)
      %26 = cir.binop(sub, %24, %25) nsw : !s32i loc(#loc102)
      %27 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc104)
      %28 = cir.ptr_stride(%27 : !cir.ptr<!s8i>, %26 : !s32i), !cir.ptr<!s8i> loc(#loc104)
      cir.store %23, %28 : !s8i, !cir.ptr<!s8i> loc(#loc160)
      %29 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc105)
      %30 = cir.cast(bitcast, %29 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc105)
      %31 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc106)
      %32 = cir.cast(bitcast, %31 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc106)
      %33 = cir.const #cir.int<100> : !s32i loc(#loc107)
      %34 = cir.cast(integral, %33 : !s32i), !u64i loc(#loc107)
      %35 = cir.const #cir.int<1> : !u64i loc(#loc161)
      %36 = cir.binop(mul, %34, %35) : !u64i loc(#loc162)
      cir.libc.memmove %36 bytes from %32 to %30 : !cir.ptr<!void>, !u64i loc(#loc163)
      %37 = cir.const #cir.int<0> : !s32i loc(#loc112)
      %38 = cir.cast(integral, %37 : !s32i), !s8i loc(#loc112)
      %39 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc113)
      %40 = cir.const #cir.int<100> : !s32i loc(#loc114)
      %41 = cir.const #cir.int<1> : !s32i loc(#loc115)
      %42 = cir.binop(sub, %40, %41) nsw : !s32i loc(#loc114)
      %43 = cir.ptr_stride(%39 : !cir.ptr<!s8i>, %42 : !s32i), !cir.ptr<!s8i> loc(#loc116)
      cir.store %38, %43 : !s8i, !cir.ptr<!s8i> loc(#loc164)
      %44 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc117)
      cir.call @printLine(%44) : (!cir.ptr<!s8i>) -> () loc(#loc118)
      %45 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc119)
      %46 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc120)
      %47 = cir.cast(bitcast, %46 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc120)
      cir.call @free(%47) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc119)
    } loc(#loc157)
    cir.return loc(#loc68)
  } loc(#loc146)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_01.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc7 = loc("/usr/include/stdlib.h":687:1)
#loc8 = loc("/usr/include/stdlib.h":687:32)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_01.c":23:1)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_01.c":41:1)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_01.c":25:5)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_01.c":25:12)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_01.c":26:12)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_01.c":26:5)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_01.c":28:20)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_01.c":28:27)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_01.c":28:30)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_01.c":28:41)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_01.c":28:42)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_01.c":28:5)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_01.c":29:5)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_01.c":29:33)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_01.c":29:9)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_01.c":29:17)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_01.c":29:23)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_01.c":29:24)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_01.c":29:30)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_01.c":29:29)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_01.c":30:15)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_01.c":30:5)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_01.c":30:10)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_01.c":30:11)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_01.c":31:5)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_01.c":40:5)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_01.c":32:9)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_01.c":32:24)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_01.c":33:16)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_01.c":33:24)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_01.c":33:29)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_01.c":33:33)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_01.c":33:9)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_01.c":33:34)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_01.c":34:25)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_01.c":34:16)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_01.c":34:20)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_01.c":34:9)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_01.c":36:17)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_01.c":36:23)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_01.c":36:31)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_01.c":36:35)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_01.c":36:46)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_01.c":36:9)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_01.c":36:47)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_01.c":37:23)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_01.c":37:9)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_01.c":37:14)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_01.c":37:18)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_01.c":37:19)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_01.c":38:19)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_01.c":38:9)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_01.c":39:9)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_01.c":39:14)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_01.c":68:1)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_01.c":71:1)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_01.c":70:5)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_01.c":70:13)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_01.c":48:1)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_01.c":66:1)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_01.c":50:5)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_01.c":50:12)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_01.c":51:12)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_01.c":51:5)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_01.c":53:20)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_01.c":53:27)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_01.c":53:31)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_01.c":53:42)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_01.c":53:43)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_01.c":53:5)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_01.c":54:5)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_01.c":54:33)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_01.c":54:9)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_01.c":54:17)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_01.c":54:23)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_01.c":54:24)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_01.c":54:30)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_01.c":54:29)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_01.c":55:15)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_01.c":55:5)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_01.c":55:10)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_01.c":55:11)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_01.c":56:5)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_01.c":65:5)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_01.c":57:9)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_01.c":57:24)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_01.c":58:16)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_01.c":58:24)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_01.c":58:29)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_01.c":58:33)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_01.c":58:9)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_01.c":58:34)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_01.c":59:25)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_01.c":59:16)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_01.c":59:20)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_01.c":59:9)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_01.c":61:17)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_01.c":61:23)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_01.c":61:31)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_01.c":61:35)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_01.c":61:46)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_01.c":61:9)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_01.c":61:47)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_01.c":62:23)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_01.c":62:9)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_01.c":62:14)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_01.c":62:18)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_01.c":62:19)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_01.c":63:19)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_01.c":63:9)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_01.c":64:9)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_01.c":64:14)
#loc121 = loc(fused[#loc1, #loc2])
#loc122 = loc(fused[#loc3, #loc4])
#loc123 = loc(fused[#loc5, #loc6])
#loc124 = loc(fused[#loc7, #loc8])
#loc125 = loc(fused[#loc9, #loc10])
#loc126 = loc(fused[#loc11, #loc12])
#loc127 = loc(fused[#loc14, #loc13])
#loc128 = loc(fused[#loc17, #loc18])
#loc129 = loc(fused[#loc16, #loc18])
#loc130 = loc(fused[#loc15, #loc19])
#loc131 = loc(fused[#loc20, #loc19])
#loc132 = loc(fused[#loc21, #loc22])
#loc133 = loc(fused[#loc23, #loc24])
#loc134 = loc(fused[#loc25, #loc22])
#loc135 = loc(fused[#loc30, #loc29])
#loc136 = loc(fused[#loc33, #loc34])
#loc137 = loc(fused[#loc35, #loc36])
#loc138 = loc(fused[#loc41, #loc42])
#loc139 = loc(fused[#loc46, #loc43])
#loc140 = loc(fused[#loc50, #loc51])
#loc141 = loc(fused[#loc49, #loc51])
#loc142 = loc(fused[#loc52, #loc53])
#loc143 = loc(fused[#loc55, #loc54])
#loc144 = loc(fused[#loc63, #loc64])
#loc145 = loc(fused[#loc65, #loc66])
#loc146 = loc(fused[#loc67, #loc68])
#loc147 = loc(fused[#loc69, #loc70])
#loc148 = loc(fused[#loc72, #loc71])
#loc149 = loc(fused[#loc75, #loc76])
#loc150 = loc(fused[#loc74, #loc76])
#loc151 = loc(fused[#loc73, #loc77])
#loc152 = loc(fused[#loc78, #loc77])
#loc153 = loc(fused[#loc79, #loc80])
#loc154 = loc(fused[#loc81, #loc82])
#loc155 = loc(fused[#loc83, #loc80])
#loc156 = loc(fused[#loc88, #loc87])
#loc157 = loc(fused[#loc91, #loc92])
#loc158 = loc(fused[#loc93, #loc94])
#loc159 = loc(fused[#loc99, #loc100])
#loc160 = loc(fused[#loc104, #loc101])
#loc161 = loc(fused[#loc108, #loc109])
#loc162 = loc(fused[#loc107, #loc109])
#loc163 = loc(fused[#loc110, #loc111])
#loc164 = loc(fused[#loc113, #loc112])
