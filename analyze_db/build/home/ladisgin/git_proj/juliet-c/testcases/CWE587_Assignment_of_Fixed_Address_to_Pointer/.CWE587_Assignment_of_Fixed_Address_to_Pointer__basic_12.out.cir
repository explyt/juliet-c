!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc46 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_12.c":82:10)
#loc47 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_12.c":82:14)
#loc48 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_12.c":82:20)
#loc49 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_12.c":82:32)
#loc108 = loc(fused[#loc46, #loc47])
#loc109 = loc(fused[#loc48, #loc49])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE587_Assignment_of_Fixed_Address_to_Pointer/CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_12.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func no_proto private @globalReturnsTrueOrFalse(...) -> !s32i loc(#loc91)
  cir.func private @printHexCharLine(!s8i) loc(#loc92)
  cir.func no_proto @CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_12_bad() extra(#fn_attr) {
    cir.scope {
      %0 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc95)
      %1 = cir.cast(bitcast, %0 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc95)
      %2 = cir.call %1() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc9)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc9)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["charPointer", init] {alignment = 8 : i64} loc(#loc98)
          %5 = cir.const #cir.int<4194304> : !s32i loc(#loc17)
          %6 = cir.cast(integral, %5 : !s32i), !u64i loc(#loc17)
          %7 = cir.cast(int_to_ptr, %6 : !u64i), !cir.ptr<!s8i> loc(#loc17)
          cir.store %7, %4 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc98)
          %8 = cir.load deref %4 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc18)
          %9 = cir.load %8 : !cir.ptr<!s8i>, !s8i loc(#loc19)
          cir.call @printHexCharLine(%9) : (!s8i) -> () loc(#loc20)
        } loc(#loc97)
      } else {
        cir.scope {
          %4 = cir.alloca !s8i, !cir.ptr<!s8i>, ["charStack", init] {alignment = 1 : i64} loc(#loc100)
          %5 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["charPointer", init] {alignment = 8 : i64} loc(#loc101)
          %6 = cir.const #cir.int<97> : !s32i loc(#loc24)
          %7 = cir.cast(integral, %6 : !s32i), !s8i loc(#loc24)
          cir.store %7, %4 : !s8i, !cir.ptr<!s8i> loc(#loc100)
          cir.store %4, %5 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc101)
          %8 = cir.load deref %5 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc27)
          %9 = cir.load %8 : !cir.ptr<!s8i>, !s8i loc(#loc28)
          cir.call @printHexCharLine(%9) : (!s8i) -> () loc(#loc29)
        } loc(#loc99)
      } loc(#loc96)
    } loc(#loc94)
    cir.return loc(#loc6)
  } loc(#loc93)
  cir.func no_proto @CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_12_good() extra(#fn_attr) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<!void ()>> loc(#loc103)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc32)
    cir.return loc(#loc31)
  } loc(#loc102)
  cir.func private @srand(!u32i) extra(#fn_attr1) loc(#loc104)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc105)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc106)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc40)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc41)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc42)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc43)
  cir.func @main(%arg0: !s32i loc(fused[#loc46, #loc47]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc48, #loc49])) -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc108)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc109)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc45)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc50)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc50)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc51)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc52)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc52)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr1) loc(#loc53)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc40)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc40)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc54)
    %8 = cir.get_global @CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_12_good : !cir.ptr<!cir.func<!void ()>> loc(#loc110)
    cir.call @CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_12_good() : () -> () loc(#loc55)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc41)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc41)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc57)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc42)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc42)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc58)
    %13 = cir.get_global @CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_12_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc111)
    cir.call @CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_12_bad() : () -> () loc(#loc59)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc43)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc43)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc61)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc62)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc112)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc112)
    cir.return %17 : !s32i loc(#loc112)
  } loc(#loc107)
  cir.func no_proto internal private @good1() extra(#fn_attr) {
    cir.scope {
      %0 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc115)
      %1 = cir.cast(bitcast, %0 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc115)
      %2 = cir.call %1() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc68)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc68)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !s8i, !cir.ptr<!s8i>, ["charStack", init] {alignment = 1 : i64} loc(#loc118)
          %5 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["charPointer", init] {alignment = 8 : i64} loc(#loc119)
          %6 = cir.const #cir.int<97> : !s32i loc(#loc76)
          %7 = cir.cast(integral, %6 : !s32i), !s8i loc(#loc76)
          cir.store %7, %4 : !s8i, !cir.ptr<!s8i> loc(#loc118)
          cir.store %4, %5 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc119)
          %8 = cir.load deref %5 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc79)
          %9 = cir.load %8 : !cir.ptr<!s8i>, !s8i loc(#loc80)
          cir.call @printHexCharLine(%9) : (!s8i) -> () loc(#loc81)
        } loc(#loc117)
      } else {
        cir.scope {
          %4 = cir.alloca !s8i, !cir.ptr<!s8i>, ["charStack", init] {alignment = 1 : i64} loc(#loc121)
          %5 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["charPointer", init] {alignment = 8 : i64} loc(#loc122)
          %6 = cir.const #cir.int<97> : !s32i loc(#loc85)
          %7 = cir.cast(integral, %6 : !s32i), !s8i loc(#loc85)
          cir.store %7, %4 : !s8i, !cir.ptr<!s8i> loc(#loc121)
          cir.store %4, %5 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc122)
          %8 = cir.load deref %5 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc88)
          %9 = cir.load %8 : !cir.ptr<!s8i>, !s8i loc(#loc89)
          cir.call @printHexCharLine(%9) : (!s8i) -> () loc(#loc90)
        } loc(#loc120)
      } loc(#loc116)
    } loc(#loc114)
    cir.return loc(#loc65)
  } loc(#loc113)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE587_Assignment_of_Fixed_Address_to_Pointer/CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_12.c":0:0)
#loc1 = loc("../../testcasesupport/std_testcase_io.h":52:1)
#loc2 = loc("../../testcasesupport/std_testcase_io.h":52:30)
#loc3 = loc("../../testcasesupport/std_testcase_io.h":30:1)
#loc4 = loc("../../testcasesupport/std_testcase_io.h":30:35)
#loc5 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_12.c":20:1)
#loc6 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_12.c":39:1)
#loc7 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_12.c":22:5)
#loc8 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_12.c":38:5)
#loc9 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_12.c":22:8)
#loc10 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_12.c":22:33)
#loc11 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_12.c":23:5)
#loc12 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_12.c":29:5)
#loc13 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_12.c":31:5)
#loc14 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_12.c":24:9)
#loc15 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_12.c":28:9)
#loc16 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_12.c":26:13)
#loc17 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_12.c":26:40)
#loc18 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_12.c":27:31)
#loc19 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_12.c":27:30)
#loc20 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_12.c":27:13)
#loc21 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_12.c":32:9)
#loc22 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_12.c":37:9)
#loc23 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_12.c":34:13)
#loc24 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_12.c":34:30)
#loc25 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_12.c":35:13)
#loc26 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_12.c":35:34)
#loc27 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_12.c":36:31)
#loc28 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_12.c":36:30)
#loc29 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_12.c":36:13)
#loc30 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_12.c":68:1)
#loc31 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_12.c":71:1)
#loc32 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_12.c":70:5)
#loc33 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_12.c":70:11)
#loc34 = loc("/usr/include/stdlib.h":575:1)
#loc35 = loc("/usr/include/stdlib.h":575:41)
#loc36 = loc("/usr/include/time.h":76:1)
#loc37 = loc("/usr/include/time.h":76:38)
#loc38 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc39 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc40 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_12.c":87:15)
#loc41 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_12.c":89:15)
#loc42 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_12.c":92:15)
#loc43 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_12.c":94:15)
#loc44 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_12.c":82:1)
#loc45 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_12.c":97:1)
#loc50 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_12.c":83:1)
#loc51 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_12.c":85:27)
#loc52 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_12.c":85:22)
#loc53 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_12.c":85:5)
#loc54 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_12.c":87:5)
#loc55 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_12.c":88:5)
#loc56 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_12.c":88:66)
#loc57 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_12.c":89:5)
#loc58 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_12.c":92:5)
#loc59 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_12.c":93:5)
#loc60 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_12.c":93:65)
#loc61 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_12.c":94:5)
#loc62 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_12.c":96:12)
#loc63 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_12.c":96:5)
#loc64 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_12.c":46:1)
#loc65 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_12.c":66:1)
#loc66 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_12.c":48:5)
#loc67 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_12.c":65:5)
#loc68 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_12.c":48:8)
#loc69 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_12.c":48:33)
#loc70 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_12.c":49:5)
#loc71 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_12.c":56:5)
#loc72 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_12.c":58:5)
#loc73 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_12.c":50:9)
#loc74 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_12.c":55:9)
#loc75 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_12.c":52:13)
#loc76 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_12.c":52:30)
#loc77 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_12.c":53:13)
#loc78 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_12.c":53:34)
#loc79 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_12.c":54:31)
#loc80 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_12.c":54:30)
#loc81 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_12.c":54:13)
#loc82 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_12.c":59:9)
#loc83 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_12.c":64:9)
#loc84 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_12.c":61:13)
#loc85 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_12.c":61:30)
#loc86 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_12.c":62:13)
#loc87 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_12.c":62:34)
#loc88 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_12.c":63:31)
#loc89 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_12.c":63:30)
#loc90 = loc("CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_12.c":63:13)
#loc91 = loc(fused[#loc1, #loc2])
#loc92 = loc(fused[#loc3, #loc4])
#loc93 = loc(fused[#loc5, #loc6])
#loc94 = loc(fused[#loc7, #loc8])
#loc95 = loc(fused[#loc9, #loc10])
#loc96 = loc(fused[#loc11, #loc12, #loc13, #loc8])
#loc97 = loc(fused[#loc14, #loc15])
#loc98 = loc(fused[#loc16, #loc17])
#loc99 = loc(fused[#loc21, #loc22])
#loc100 = loc(fused[#loc23, #loc24])
#loc101 = loc(fused[#loc25, #loc26])
#loc102 = loc(fused[#loc30, #loc31])
#loc103 = loc(fused[#loc32, #loc33])
#loc104 = loc(fused[#loc34, #loc35])
#loc105 = loc(fused[#loc36, #loc37])
#loc106 = loc(fused[#loc38, #loc39])
#loc107 = loc(fused[#loc44, #loc45])
#loc110 = loc(fused[#loc55, #loc56])
#loc111 = loc(fused[#loc59, #loc60])
#loc112 = loc(fused[#loc63, #loc62])
#loc113 = loc(fused[#loc64, #loc65])
#loc114 = loc(fused[#loc66, #loc67])
#loc115 = loc(fused[#loc68, #loc69])
#loc116 = loc(fused[#loc70, #loc71, #loc72, #loc67])
#loc117 = loc(fused[#loc73, #loc74])
#loc118 = loc(fused[#loc75, #loc76])
#loc119 = loc(fused[#loc77, #loc78])
#loc120 = loc(fused[#loc82, #loc83])
#loc121 = loc(fused[#loc84, #loc85])
#loc122 = loc(fused[#loc86, #loc87])
