!s32i = !cir.int<s, 32>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE680_Integer_Overflow_to_Buffer_Overflow/CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_64a.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, "dlti.mangling_mode" = "e", "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc35)
  cir.func private @CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_64b_badSink(!cir.ptr<!void>) loc(#loc36)
  cir.func no_proto @CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_64_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc38)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc9)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc10)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc39)
    %3 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc12)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc12)
    %5 = cir.binop(and, %3, %4) : !s32i loc(#loc12)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc12)
    %7 = cir.ternary(%6, true {
      %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc12)
      %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc12)
      %12 = cir.const #cir.int<30> : !s32i loc(#loc12)
      %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc12)
      %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc12)
      %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc12)
      %16 = cir.const #cir.int<15> : !s32i loc(#loc12)
      %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc12)
      %18 = cir.binop(xor, %13, %17) : !u32i loc(#loc12)
      %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc12)
      %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc12)
      %21 = cir.binop(xor, %18, %20) : !u32i loc(#loc12)
      cir.yield %21 : !u32i loc(#loc12)
    }, false {
      %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc12)
      %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc12)
      %12 = cir.const #cir.int<30> : !s32i loc(#loc12)
      %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc12)
      %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc12)
      %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc12)
      %16 = cir.const #cir.int<15> : !s32i loc(#loc12)
      %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc12)
      %18 = cir.binop(xor, %13, %17) : !u32i loc(#loc12)
      %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc12)
      %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc12)
      %21 = cir.binop(xor, %18, %20) : !u32i loc(#loc12)
      %22 = cir.unary(minus, %21) : !u32i, !u32i loc(#loc12)
      %23 = cir.const #cir.int<1> : !s32i loc(#loc12)
      %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc12)
      %25 = cir.binop(sub, %22, %24) : !u32i loc(#loc12)
      cir.yield %25 : !u32i loc(#loc12)
    }) : (!cir.bool) -> !u32i loc(#loc12)
    %8 = cir.cast(integral, %7 : !u32i), !s32i loc(#loc12)
    cir.store %8, %0 : !s32i, !cir.ptr<!s32i> loc(#loc40)
    %9 = cir.cast(bitcast, %0 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc41)
    cir.call @CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_64b_badSink(%9) : (!cir.ptr<!void>) -> () loc(#loc16)
    cir.return loc(#loc6)
  } loc(#loc37)
  cir.func no_proto @CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_64_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc43)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc19)
    cir.return loc(#loc18)
  } loc(#loc42)
  cir.func private @CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_64b_goodG2BSink(!cir.ptr<!void>) loc(#loc44)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc46)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc27)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc28)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc47)
    %3 = cir.const #cir.int<20> : !s32i loc(#loc30)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc48)
    %4 = cir.cast(bitcast, %0 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc49)
    cir.call @CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_64b_goodG2BSink(%4) : (!cir.ptr<!void>) -> () loc(#loc34)
    cir.return loc(#loc24)
  } loc(#loc45)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE680_Integer_Overflow_to_Buffer_Overflow/CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_64a.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_64a.c":22:1)
#loc4 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_64a.c":22:92)
#loc5 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_64a.c":24:1)
#loc6 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_64a.c":32:1)
#loc7 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_64a.c":26:5)
#loc8 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_64a.c":26:9)
#loc9 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_64a.c":28:13)
#loc10 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_64a.c":28:12)
#loc11 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_64a.c":28:5)
#loc12 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_64a.c":30:12)
#loc13 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_64a.c":30:5)
#loc14 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_64a.c":31:73)
#loc15 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_64a.c":31:74)
#loc16 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_64a.c":31:5)
#loc17 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_64a.c":51:1)
#loc18 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_64a.c":54:1)
#loc19 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_64a.c":53:5)
#loc20 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_64a.c":53:13)
#loc21 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_64a.c":39:1)
#loc22 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_64a.c":39:96)
#loc23 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_64a.c":41:1)
#loc24 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_64a.c":49:1)
#loc25 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_64a.c":43:5)
#loc26 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_64a.c":43:9)
#loc27 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_64a.c":45:13)
#loc28 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_64a.c":45:12)
#loc29 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_64a.c":45:5)
#loc30 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_64a.c":47:12)
#loc31 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_64a.c":47:5)
#loc32 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_64a.c":48:77)
#loc33 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_64a.c":48:78)
#loc34 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_64a.c":48:5)
#loc35 = loc(fused[#loc1, #loc2])
#loc36 = loc(fused[#loc3, #loc4])
#loc37 = loc(fused[#loc5, #loc6])
#loc38 = loc(fused[#loc7, #loc8])
#loc39 = loc(fused[#loc11, #loc9])
#loc40 = loc(fused[#loc13, #loc12])
#loc41 = loc(fused[#loc14, #loc15])
#loc42 = loc(fused[#loc17, #loc18])
#loc43 = loc(fused[#loc19, #loc20])
#loc44 = loc(fused[#loc21, #loc22])
#loc45 = loc(fused[#loc23, #loc24])
#loc46 = loc(fused[#loc25, #loc26])
#loc47 = loc(fused[#loc29, #loc27])
#loc48 = loc(fused[#loc31, #loc30])
#loc49 = loc(fused[#loc32, #loc33])
