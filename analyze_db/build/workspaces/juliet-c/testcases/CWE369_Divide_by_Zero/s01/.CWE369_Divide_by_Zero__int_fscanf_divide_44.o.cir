!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.record<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.record<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.record<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc5 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_44.c":22:21)
#loc6 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_44.c":22:25)
#loc37 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_44.c":46:25)
#loc38 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_44.c":46:29)
#loc61 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_44.c":64:25)
#loc62 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_44.c":64:29)
#loc91 = loc(fused[#loc5, #loc6])
#loc103 = loc(fused[#loc37, #loc38])
#loc112 = loc(fused[#loc61, #loc62])
!ty__IO_FILE = !cir.record<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/workspaces/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__int_fscanf_divide_44.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<272> = dense<64> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @printIntLine(!s32i) loc(#loc89)
  cir.func internal private @badSink(%arg0: !s32i loc(fused[#loc5, #loc6])) extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc91)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc7)
    %1 = cir.const #cir.int<100> : !s32i loc(#loc8)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc9)
    %3 = cir.binop(div, %1, %2) : !s32i loc(#loc92)
    cir.call @printIntLine(%3) : (!s32i) -> () loc(#loc10)
    cir.return loc(#loc4)
  } loc(#loc90)
  cir.func private @__isoc99_fscanf(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i loc(#loc93)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc94)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"%d\00" : !cir.array<!s8i x 3>> : !cir.array<!s8i x 3> {alignment = 1 : i64} loc(#loc15)
  cir.func no_proto @CWE369_Divide_by_Zero__int_fscanf_divide_44_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc96)
    %1 = cir.alloca !cir.ptr<!cir.func<(!s32i)>>, !cir.ptr<!cir.ptr<!cir.func<(!s32i)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc97)
    %2 = cir.get_global @badSink : !cir.ptr<!cir.func<(!s32i)>> loc(#loc21)
    cir.store %2, %1 : !cir.ptr<!cir.func<(!s32i)>>, !cir.ptr<!cir.ptr<!cir.func<(!s32i)>>> loc(#loc97)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc22)
    %4 = cir.unary(minus, %3) nsw : !s32i, !s32i loc(#loc23)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc98)
    %5 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc25)
    %6 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc94)
    %7 = cir.load %6 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc26)
    %8 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc15)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc15)
    %10 = cir.call @__isoc99_fscanf(%7, %9, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s32i>) -> !s32i loc(#loc25)
    %11 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<(!s32i)>>>, !cir.ptr<!cir.func<(!s32i)>> loc(#loc27)
    %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc28)
    cir.call %11(%12) : (!cir.ptr<!cir.func<(!s32i)>>, !s32i) -> () loc(#loc27)
    cir.return loc(#loc17)
  } loc(#loc95)
  cir.func no_proto @CWE369_Divide_by_Zero__int_fscanf_divide_44_good() extra(#fn_attr) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc100)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc31)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc101)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc33)
    cir.return loc(#loc30)
  } loc(#loc99)
  cir.func internal private @goodG2BSink(%arg0: !s32i loc(fused[#loc37, #loc38])) extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc103)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc39)
    %1 = cir.const #cir.int<100> : !s32i loc(#loc40)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc41)
    %3 = cir.binop(div, %1, %2) : !s32i loc(#loc104)
    cir.call @printIntLine(%3) : (!s32i) -> () loc(#loc42)
    cir.return loc(#loc36)
  } loc(#loc102)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc106)
    %1 = cir.alloca !cir.ptr<!cir.func<(!s32i)>>, !cir.ptr<!cir.ptr<!cir.func<(!s32i)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc107)
    %2 = cir.get_global @goodG2BSink : !cir.ptr<!cir.func<(!s32i)>> loc(#loc48)
    cir.store %2, %1 : !cir.ptr<!cir.func<(!s32i)>>, !cir.ptr<!cir.ptr<!cir.func<(!s32i)>>> loc(#loc107)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc49)
    %4 = cir.unary(minus, %3) nsw : !s32i, !s32i loc(#loc50)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc108)
    %5 = cir.const #cir.int<7> : !s32i loc(#loc52)
    cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc109)
    %6 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<(!s32i)>>>, !cir.ptr<!cir.func<(!s32i)>> loc(#loc54)
    %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc55)
    cir.call %6(%7) : (!cir.ptr<!cir.func<(!s32i)>>, !s32i) -> () loc(#loc54)
    cir.return loc(#loc44)
  } loc(#loc105)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc110)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"This would result in a divide by zero\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc58)
  cir.func internal private @goodB2GSink(%arg0: !s32i loc(fused[#loc61, #loc62])) extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc112)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc63)
    cir.scope {
      %1 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc66)
      %2 = cir.const #cir.int<0> : !s32i loc(#loc67)
      %3 = cir.cmp(ne, %1, %2) : !s32i, !cir.bool loc(#loc114)
      cir.if %3 {
        %4 = cir.const #cir.int<100> : !s32i loc(#loc71)
        %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc72)
        %6 = cir.binop(div, %4, %5) : !s32i loc(#loc116)
        cir.call @printIntLine(%6) : (!s32i) -> () loc(#loc73)
      } else {
        %4 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc58)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc58)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc74)
      } loc(#loc115)
    } loc(#loc113)
    cir.return loc(#loc60)
  } loc(#loc111)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc118)
    %1 = cir.alloca !cir.ptr<!cir.func<(!s32i)>>, !cir.ptr<!cir.ptr<!cir.func<(!s32i)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc119)
    %2 = cir.get_global @goodB2GSink : !cir.ptr<!cir.func<(!s32i)>> loc(#loc80)
    cir.store %2, %1 : !cir.ptr<!cir.func<(!s32i)>>, !cir.ptr<!cir.ptr<!cir.func<(!s32i)>>> loc(#loc119)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc81)
    %4 = cir.unary(minus, %3) nsw : !s32i, !s32i loc(#loc82)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc120)
    %5 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc84)
    %6 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc94)
    %7 = cir.load %6 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc85)
    %8 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc86)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc86)
    %10 = cir.call @__isoc99_fscanf(%7, %9, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s32i>) -> !s32i loc(#loc84)
    %11 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<(!s32i)>>>, !cir.ptr<!cir.func<(!s32i)>> loc(#loc87)
    %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc88)
    cir.call %11(%12) : (!cir.ptr<!cir.func<(!s32i)>>, !s32i) -> () loc(#loc87)
    cir.return loc(#loc76)
  } loc(#loc117)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__int_fscanf_divide_44.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_44.c":22:1)
#loc4 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_44.c":26:1)
#loc7 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_44.c":23:1)
#loc8 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_44.c":25:18)
#loc9 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_44.c":25:24)
#loc10 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_44.c":25:5)
#loc11 = loc("/usr/include/stdio.h":463:1)
#loc12 = loc("/usr/include/stdio.h":465:33)
#loc13 = loc("/usr/include/stdio.h":149:1)
#loc14 = loc("/usr/include/stdio.h":149:14)
#loc15 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_44.c":36:19)
#loc16 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_44.c":28:1)
#loc17 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_44.c":39:1)
#loc18 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_44.c":30:5)
#loc19 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_44.c":30:9)
#loc20 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_44.c":32:5)
#loc21 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_44.c":32:29)
#loc22 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_44.c":34:13)
#loc23 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_44.c":34:12)
#loc24 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_44.c":34:5)
#loc25 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_44.c":36:5)
#loc26 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_44.c":36:12)
#loc27 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_44.c":38:5)
#loc28 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_44.c":38:13)
#loc29 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_44.c":88:1)
#loc30 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_44.c":92:1)
#loc31 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_44.c":90:5)
#loc32 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_44.c":90:13)
#loc33 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_44.c":91:5)
#loc34 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_44.c":91:13)
#loc35 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_44.c":46:1)
#loc36 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_44.c":50:1)
#loc39 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_44.c":47:1)
#loc40 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_44.c":49:18)
#loc41 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_44.c":49:24)
#loc42 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_44.c":49:5)
#loc43 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_44.c":52:1)
#loc44 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_44.c":61:1)
#loc45 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_44.c":54:5)
#loc46 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_44.c":54:9)
#loc47 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_44.c":55:5)
#loc48 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_44.c":55:29)
#loc49 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_44.c":57:13)
#loc50 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_44.c":57:12)
#loc51 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_44.c":57:5)
#loc52 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_44.c":59:12)
#loc53 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_44.c":59:5)
#loc54 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_44.c":60:5)
#loc55 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_44.c":60:13)
#loc56 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc57 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc58 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_44.c":73:19)
#loc59 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_44.c":64:1)
#loc60 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_44.c":75:1)
#loc63 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_44.c":65:1)
#loc64 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_44.c":67:5)
#loc65 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_44.c":74:5)
#loc66 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_44.c":67:9)
#loc67 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_44.c":67:17)
#loc68 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_44.c":68:5)
#loc69 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_44.c":70:5)
#loc70 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_44.c":72:5)
#loc71 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_44.c":69:22)
#loc72 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_44.c":69:28)
#loc73 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_44.c":69:9)
#loc74 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_44.c":73:9)
#loc75 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_44.c":77:1)
#loc76 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_44.c":86:1)
#loc77 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_44.c":79:5)
#loc78 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_44.c":79:9)
#loc79 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_44.c":80:5)
#loc80 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_44.c":80:29)
#loc81 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_44.c":82:13)
#loc82 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_44.c":82:12)
#loc83 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_44.c":82:5)
#loc84 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_44.c":84:5)
#loc85 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_44.c":84:12)
#loc86 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_44.c":84:19)
#loc87 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_44.c":85:5)
#loc88 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_44.c":85:13)
#loc89 = loc(fused[#loc1, #loc2])
#loc90 = loc(fused[#loc3, #loc4])
#loc92 = loc(fused[#loc8, #loc9])
#loc93 = loc(fused[#loc11, #loc12])
#loc94 = loc(fused[#loc13, #loc14])
#loc95 = loc(fused[#loc16, #loc17])
#loc96 = loc(fused[#loc18, #loc19])
#loc97 = loc(fused[#loc20, #loc21])
#loc98 = loc(fused[#loc24, #loc22])
#loc99 = loc(fused[#loc29, #loc30])
#loc100 = loc(fused[#loc31, #loc32])
#loc101 = loc(fused[#loc33, #loc34])
#loc102 = loc(fused[#loc35, #loc36])
#loc104 = loc(fused[#loc40, #loc41])
#loc105 = loc(fused[#loc43, #loc44])
#loc106 = loc(fused[#loc45, #loc46])
#loc107 = loc(fused[#loc47, #loc48])
#loc108 = loc(fused[#loc51, #loc49])
#loc109 = loc(fused[#loc53, #loc52])
#loc110 = loc(fused[#loc56, #loc57])
#loc111 = loc(fused[#loc59, #loc60])
#loc113 = loc(fused[#loc64, #loc65])
#loc114 = loc(fused[#loc66, #loc67])
#loc115 = loc(fused[#loc68, #loc69, #loc70, #loc65])
#loc116 = loc(fused[#loc71, #loc72])
#loc117 = loc(fused[#loc75, #loc76])
#loc118 = loc(fused[#loc77, #loc78])
#loc119 = loc(fused[#loc79, #loc80])
#loc120 = loc(fused[#loc83, #loc81])
