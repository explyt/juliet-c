!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#true = #cir.bool<true> : !cir.bool
!ty_in_addr = !cir.record<struct "in_addr" {!u32i} #cir.record.decl.ast>
!ty_sockaddr = !cir.record<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.record<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/workspaces/juliet-c/testcases/CWE23_Relative_Path_Traversal/s01/CWE23_Relative_Path_Traversal__char_connect_socket_open_16.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.global "private" constant cir_private @__const._ZN58CWE23_Relative_Path_Traversal__char_connect_socket_open_16L7goodG2BEv.dataBuffer = #cir.const_array<"/tmp/" : !cir.array<!s8i x 5>, trailing_zeros> : !cir.array<!s8i x 4096> loc(#loc219)
  cir.global "private" constant cir_private @__const._ZN58CWE23_Relative_Path_Traversal__char_connect_socket_open_163badEv.dataBuffer = #cir.const_array<"/tmp/" : !cir.array<!s8i x 5>, trailing_zeros> : !cir.array<!s8i x 4096> loc(#loc220)
  cir.func private @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc221)
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc222)
  cir.func private @inet_addr(!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc223)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"127.0.0.1\00" : !cir.array<!s8i x 10>> : !cir.array<!s8i x 10> {alignment = 1 : i64} loc(#loc11)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc224)
  cir.func private @connect(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc225)
  cir.func private @recv(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc226)
  cir.func private @strchr(!cir.ptr<!s8i>, !s32i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc227)
  cir.func private @close(!s32i) -> !s32i loc(#loc228)
  cir.func private @open(!cir.ptr<!s8i>, !s32i, ...) -> !s32i loc(#loc229)
  cir.func @_ZN58CWE23_Relative_Path_Traversal__char_connect_socket_open_163badEv() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc231)
    %1 = cir.alloca !cir.array<!s8i x 4096>, !cir.ptr<!cir.array<!s8i x 4096>>, ["dataBuffer"] {alignment = 16 : i64} loc(#loc220)
    %2 = cir.get_global @__const._ZN58CWE23_Relative_Path_Traversal__char_connect_socket_open_163badEv.dataBuffer : !cir.ptr<!cir.array<!s8i x 4096>> loc(#loc220)
    cir.copy %2 to %1 : !cir.ptr<!cir.array<!s8i x 4096>> loc(#loc220)
    %3 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 4096>>), !cir.ptr<!s8i> loc(#loc28)
    cir.store %3, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc232)
    cir.scope {
      cir.while {
        %4 = cir.const #cir.int<1> : !s32i loc(#loc32)
        %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc32)
        cir.condition(%5) loc(#loc32)
      } do {
        cir.scope {
          cir.scope {
            %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc236)
            %5 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc237)
            %6 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["replace"] {alignment = 8 : i64} loc(#loc238)
            %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["connectSocket", init] {alignment = 4 : i64} loc(#loc239)
            %8 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc240)
            %9 = cir.const #cir.int<1> : !s32i loc(#loc43)
            %10 = cir.unary(minus, %9) nsw : !s32i, !s32i loc(#loc43)
            cir.store %10, %7 : !s32i, !cir.ptr<!s32i> loc(#loc239)
            %11 = cir.get_global @strlen : !cir.ptr<!cir.func<(!cir.ptr<!s8i>) -> !u64i>> loc(#loc46)
            %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc47)
            %13 = cir.call @strlen(%12) : (!cir.ptr<!s8i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc46)
            cir.store %13, %8 : !u64i, !cir.ptr<!u64i> loc(#loc240)
            cir.scope {
              cir.do {
                cir.scope {
                  %14 = cir.const #cir.int<2> : !s32i loc(#loc52)
                  %15 = cir.const #cir.int<1> : !u32i loc(#loc53)
                  %16 = cir.cast(integral, %15 : !u32i), !s32i loc(#loc53)
                  %17 = cir.const #cir.int<6> : !u32i loc(#loc54)
                  %18 = cir.cast(integral, %17 : !u32i), !s32i loc(#loc54)
                  %19 = cir.call @socket(%14, %16, %18) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc55)
                  cir.store %19, %7 : !s32i, !cir.ptr<!s32i> loc(#loc243)
                  cir.scope {
                    %69 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc60)
                    %70 = cir.const #cir.int<1> : !s32i loc(#loc61)
                    %71 = cir.unary(minus, %70) nsw : !s32i, !s32i loc(#loc61)
                    %72 = cir.cmp(eq, %69, %71) : !s32i, !cir.bool loc(#loc245)
                    cir.if %72 {
                      cir.break loc(#loc63)
                    } loc(#loc246)
                  } loc(#loc244)
                  %20 = cir.cast(bitcast, %5 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc247)
                  %21 = cir.const #cir.int<0> : !s32i loc(#loc66)
                  %22 = cir.const #cir.int<16> : !u64i loc(#loc248)
                  cir.libc.memset %22 bytes from %20 set to %21 : !cir.ptr<!void>, !s32i, !u64i loc(#loc249)
                  %23 = cir.const #cir.int<2> : !s32i loc(#loc71)
                  %24 = cir.cast(integral, %23 : !s32i), !u16i loc(#loc71)
                  %25 = cir.get_member %5[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc72)
                  cir.store %24, %25 : !u16i, !cir.ptr<!u16i> loc(#loc250)
                  %26 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 10>> loc(#loc11)
                  %27 = cir.cast(array_to_ptrdecay, %26 : !cir.ptr<!cir.array<!s8i x 10>>), !cir.ptr<!s8i> loc(#loc11)
                  %28 = cir.call @inet_addr(%27) : (!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc74)
                  %29 = cir.get_member %5[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc75)
                  %30 = cir.get_member %29[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc76)
                  cir.store %28, %30 : !u32i, !cir.ptr<!u32i> loc(#loc251)
                  %31 = cir.const #cir.int<27015> : !s32i loc(#loc79)
                  %32 = cir.cast(integral, %31 : !s32i), !u16i loc(#loc79)
                  %33 = cir.call @htons(%32) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc80)
                  %34 = cir.get_member %5[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc81)
                  cir.store %33, %34 : !u16i, !cir.ptr<!u16i> loc(#loc252)
                  cir.scope {
                    %69 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc86)
                    %70 = cir.cast(bitcast, %5 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc254)
                    %71 = cir.const #cir.int<16> : !u64i loc(#loc255)
                    %72 = cir.cast(integral, %71 : !u64i), !u32i loc(#loc255)
                    %73 = cir.call @connect(%69, %70, %72) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc91)
                    %74 = cir.const #cir.int<1> : !s32i loc(#loc92)
                    %75 = cir.unary(minus, %74) nsw : !s32i, !s32i loc(#loc92)
                    %76 = cir.cmp(eq, %73, %75) : !s32i, !cir.bool loc(#loc256)
                    cir.if %76 {
                      cir.break loc(#loc94)
                    } loc(#loc257)
                  } loc(#loc253)
                  %35 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc95)
                  %36 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc96)
                  %37 = cir.load %8 : !cir.ptr<!u64i>, !u64i loc(#loc97)
                  %38 = cir.ptr_stride(%36 : !cir.ptr<!s8i>, %37 : !u64i), !cir.ptr<!s8i> loc(#loc98)
                  %39 = cir.cast(bitcast, %38 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc258)
                  %40 = cir.const #cir.int<1> : !u64i loc(#loc259)
                  %41 = cir.const #cir.int<4096> : !s32i loc(#loc103)
                  %42 = cir.cast(integral, %41 : !s32i), !u64i loc(#loc103)
                  %43 = cir.load %8 : !cir.ptr<!u64i>, !u64i loc(#loc104)
                  %44 = cir.binop(sub, %42, %43) : !u64i loc(#loc260)
                  %45 = cir.const #cir.int<1> : !s32i loc(#loc105)
                  %46 = cir.cast(integral, %45 : !s32i), !u64i loc(#loc105)
                  %47 = cir.binop(sub, %44, %46) : !u64i loc(#loc261)
                  %48 = cir.binop(mul, %40, %47) : !u64i loc(#loc262)
                  %49 = cir.const #cir.int<0> : !s32i loc(#loc107)
                  %50 = cir.call @recv(%35, %39, %48, %49) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc108)
                  %51 = cir.cast(integral, %50 : !s64i), !s32i loc(#loc108)
                  cir.store %51, %4 : !s32i, !cir.ptr<!s32i> loc(#loc263)
                  cir.scope {
                    %69 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc113)
                    %70 = cir.const #cir.int<1> : !s32i loc(#loc114)
                    %71 = cir.unary(minus, %70) nsw : !s32i, !s32i loc(#loc114)
                    %72 = cir.cmp(eq, %69, %71) : !s32i, !cir.bool loc(#loc265)
                    %73 = cir.ternary(%72, true {
                      %74 = cir.const #true loc(#loc115)
                      cir.yield %74 : !cir.bool loc(#loc115)
                    }, false {
                      %74 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc116)
                      %75 = cir.const #cir.int<0> : !s32i loc(#loc117)
                      %76 = cir.cmp(eq, %74, %75) : !s32i, !cir.bool loc(#loc266)
                      %77 = cir.ternary(%76, true {
                        %78 = cir.const #true loc(#loc115)
                        cir.yield %78 : !cir.bool loc(#loc115)
                      }, false {
                        %78 = cir.const #false loc(#loc115)
                        cir.yield %78 : !cir.bool loc(#loc115)
                      }) : (!cir.bool) -> !cir.bool loc(#loc115)
                      cir.yield %77 : !cir.bool loc(#loc115)
                    }) : (!cir.bool) -> !cir.bool loc(#loc115)
                    cir.if %73 {
                      cir.break loc(#loc119)
                    } loc(#loc267)
                  } loc(#loc264)
                  %52 = cir.const #cir.int<0> : !s8i loc(#loc120)
                  %53 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc121)
                  %54 = cir.load %8 : !cir.ptr<!u64i>, !u64i loc(#loc122)
                  %55 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc123)
                  %56 = cir.cast(integral, %55 : !s32i), !u64i loc(#loc123)
                  %57 = cir.const #cir.int<1> : !u64i loc(#loc268)
                  %58 = cir.binop(div, %56, %57) : !u64i loc(#loc269)
                  %59 = cir.binop(add, %54, %58) : !u64i loc(#loc270)
                  %60 = cir.ptr_stride(%53 : !cir.ptr<!s8i>, %59 : !u64i), !cir.ptr<!s8i> loc(#loc126)
                  cir.store %52, %60 : !s8i, !cir.ptr<!s8i> loc(#loc271)
                  %61 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc127)
                  %62 = cir.const #cir.int<13> : !s8i loc(#loc128)
                  %63 = cir.cast(integral, %62 : !s8i), !s32i loc(#loc128)
                  %64 = cir.call @strchr(%61, %63) : (!cir.ptr<!s8i>, !s32i) -> !cir.ptr<!s8i> side_effect(pure) extra(#fn_attr) loc(#loc129)
                  cir.store %64, %6 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc272)
                  cir.scope {
                    %69 = cir.load %6 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc134)
                    %70 = cir.cast(ptr_to_bool, %69 : !cir.ptr<!s8i>), !cir.bool loc(#loc134)
                    cir.if %70 {
                      %71 = cir.const #cir.int<0> : !s8i loc(#loc136)
                      %72 = cir.load deref %6 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc137)
                      cir.store %71, %72 : !s8i, !cir.ptr<!s8i> loc(#loc275)
                    } loc(#loc274)
                  } loc(#loc273)
                  %65 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc139)
                  %66 = cir.const #cir.int<10> : !s8i loc(#loc140)
                  %67 = cir.cast(integral, %66 : !s8i), !s32i loc(#loc140)
                  %68 = cir.call @strchr(%65, %67) : (!cir.ptr<!s8i>, !s32i) -> !cir.ptr<!s8i> side_effect(pure) extra(#fn_attr) loc(#loc141)
                  cir.store %68, %6 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc276)
                  cir.scope {
                    %69 = cir.load %6 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc146)
                    %70 = cir.cast(ptr_to_bool, %69 : !cir.ptr<!s8i>), !cir.bool loc(#loc146)
                    cir.if %70 {
                      %71 = cir.const #cir.int<0> : !s8i loc(#loc148)
                      %72 = cir.load deref %6 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc149)
                      cir.store %71, %72 : !s8i, !cir.ptr<!s8i> loc(#loc279)
                    } loc(#loc278)
                  } loc(#loc277)
                } loc(#loc242)
                cir.yield loc(#loc49)
              } while {
                %14 = cir.const #cir.int<0> : !s32i loc(#loc151)
                %15 = cir.cast(int_to_bool, %14 : !s32i), !cir.bool loc(#loc151)
                cir.condition(%15) loc(#loc151)
              } loc(#loc241)
            } loc(#loc241)
            cir.scope {
              %14 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc154)
              %15 = cir.const #cir.int<1> : !s32i loc(#loc155)
              %16 = cir.unary(minus, %15) nsw : !s32i, !s32i loc(#loc155)
              %17 = cir.cmp(ne, %14, %16) : !s32i, !cir.bool loc(#loc281)
              cir.if %17 {
                %18 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc157)
                %19 = cir.call @close(%18) : (!s32i) -> !s32i loc(#loc158)
              } loc(#loc282)
            } loc(#loc280)
          } loc(#loc235)
          cir.break loc(#loc159)
        } loc(#loc234)
        cir.yield loc(#loc31)
      } loc(#loc233)
    } loc(#loc233)
    cir.scope {
      %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["fileDesc"] {alignment = 4 : i64} loc(#loc284)
      %5 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc164)
      %6 = cir.const #cir.int<2> : !s32i loc(#loc165)
      %7 = cir.const #cir.int<64> : !s32i loc(#loc166)
      %8 = cir.binop(or, %6, %7) : !s32i loc(#loc285)
      %9 = cir.const #cir.int<256> : !s32i loc(#loc167)
      %10 = cir.const #cir.int<128> : !s32i loc(#loc168)
      %11 = cir.binop(or, %9, %10) : !s32i loc(#loc286)
      %12 = cir.call @open(%5, %8, %11) : (!cir.ptr<!s8i>, !s32i, !s32i) -> !s32i loc(#loc169)
      cir.store %12, %4 : !s32i, !cir.ptr<!s32i> loc(#loc287)
      cir.scope {
        %13 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc174)
        %14 = cir.const #cir.int<1> : !s32i loc(#loc175)
        %15 = cir.unary(minus, %14) nsw : !s32i, !s32i loc(#loc176)
        %16 = cir.cmp(ne, %13, %15) : !s32i, !cir.bool loc(#loc289)
        cir.if %16 {
          %17 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc178)
          %18 = cir.call @close(%17) : (!s32i) -> !s32i loc(#loc179)
        } loc(#loc290)
      } loc(#loc288)
    } loc(#loc283)
    cir.return loc(#loc25)
  } loc(#loc230)
  cir.func private @strcat(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc291)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"file.txt\00" : !cir.array<!s8i x 9>> : !cir.array<!s8i x 9> {alignment = 1 : i64} loc(#loc182)
  cir.func internal private @_ZN58CWE23_Relative_Path_Traversal__char_connect_socket_open_16L7goodG2BEv() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc293)
    %1 = cir.alloca !cir.array<!s8i x 4096>, !cir.ptr<!cir.array<!s8i x 4096>>, ["dataBuffer"] {alignment = 16 : i64} loc(#loc219)
    %2 = cir.get_global @__const._ZN58CWE23_Relative_Path_Traversal__char_connect_socket_open_16L7goodG2BEv.dataBuffer : !cir.ptr<!cir.array<!s8i x 4096>> loc(#loc219)
    cir.copy %2 to %1 : !cir.ptr<!cir.array<!s8i x 4096>> loc(#loc219)
    %3 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 4096>>), !cir.ptr<!s8i> loc(#loc187)
    cir.store %3, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc294)
    cir.scope {
      cir.while {
        %4 = cir.const #cir.int<1> : !s32i loc(#loc191)
        %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc191)
        cir.condition(%5) loc(#loc191)
      } do {
        cir.scope {
          %4 = cir.get_global @strcat : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i>>> loc(#loc193)
          %5 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc194)
          %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc182)
          %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc182)
          %8 = cir.call @strcat(%5, %7) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc193)
          cir.break loc(#loc195)
        } loc(#loc296)
        cir.yield loc(#loc190)
      } loc(#loc295)
    } loc(#loc295)
    cir.scope {
      %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["fileDesc"] {alignment = 4 : i64} loc(#loc298)
      %5 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc200)
      %6 = cir.const #cir.int<2> : !s32i loc(#loc201)
      %7 = cir.const #cir.int<64> : !s32i loc(#loc202)
      %8 = cir.binop(or, %6, %7) : !s32i loc(#loc299)
      %9 = cir.const #cir.int<256> : !s32i loc(#loc203)
      %10 = cir.const #cir.int<128> : !s32i loc(#loc204)
      %11 = cir.binop(or, %9, %10) : !s32i loc(#loc300)
      %12 = cir.call @open(%5, %8, %11) : (!cir.ptr<!s8i>, !s32i, !s32i) -> !s32i loc(#loc205)
      cir.store %12, %4 : !s32i, !cir.ptr<!s32i> loc(#loc301)
      cir.scope {
        %13 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc210)
        %14 = cir.const #cir.int<1> : !s32i loc(#loc211)
        %15 = cir.unary(minus, %14) nsw : !s32i, !s32i loc(#loc212)
        %16 = cir.cmp(ne, %13, %15) : !s32i, !cir.bool loc(#loc303)
        cir.if %16 {
          %17 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc214)
          %18 = cir.call @close(%17) : (!s32i) -> !s32i loc(#loc215)
        } loc(#loc304)
      } loc(#loc302)
    } loc(#loc297)
    cir.return loc(#loc184)
  } loc(#loc292)
  cir.func @_ZN58CWE23_Relative_Path_Traversal__char_connect_socket_open_164goodEv() extra(#fn_attr1) {
    cir.call @_ZN58CWE23_Relative_Path_Traversal__char_connect_socket_open_16L7goodG2BEv() : () -> () loc(#loc218)
    cir.return loc(#loc217)
  } loc(#loc305)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE23_Relative_Path_Traversal/s01/CWE23_Relative_Path_Traversal__char_connect_socket_open_16.cpp":0:0)
#loc1 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_16.cpp":155:5)
#loc2 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_16.cpp":155:37)
#loc3 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_16.cpp":63:5)
#loc4 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_16.cpp":63:37)
#loc5 = loc("/usr/include/string.h":407:1)
#loc6 = loc("/usr/include/string.h":408:33)
#loc7 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:1)
#loc8 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:62)
#loc9 = loc("/usr/include/arpa/inet.h":34:1)
#loc10 = loc("/usr/include/arpa/inet.h":34:47)
#loc11 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_16.cpp":94:53)
#loc12 = loc("/usr/include/netinet/in.h":402:1)
#loc13 = loc("/usr/include/netinet/in.h":403:40)
#loc14 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":126:1)
#loc15 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":126:75)
#loc16 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":145:1)
#loc17 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":145:68)
#loc18 = loc("/usr/include/string.h":226:1)
#loc19 = loc("/usr/include/string.h":227:50)
#loc20 = loc("/usr/include/unistd.h":358:1)
#loc21 = loc("/usr/include/unistd.h":358:27)
#loc22 = loc("/usr/include/fcntl.h":209:1)
#loc23 = loc("/usr/include/fcntl.h":209:56)
#loc24 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_16.cpp":60:1)
#loc25 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_16.cpp":145:1)
#loc26 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_16.cpp":62:5)
#loc27 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_16.cpp":62:12)
#loc28 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_16.cpp":64:12)
#loc29 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_16.cpp":64:5)
#loc30 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_16.cpp":65:5)
#loc31 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_16.cpp":135:5)
#loc32 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_16.cpp":65:11)
#loc33 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_16.cpp":66:5)
#loc34 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_16.cpp":67:9)
#loc35 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_16.cpp":133:9)
#loc36 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_16.cpp":72:13)
#loc37 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_16.cpp":72:17)
#loc38 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_16.cpp":73:13)
#loc39 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_16.cpp":73:32)
#loc40 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_16.cpp":74:13)
#loc41 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_16.cpp":74:19)
#loc42 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_16.cpp":75:13)
#loc43 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_16.cpp":75:36)
#loc44 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_16.cpp":76:13)
#loc45 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_16.cpp":76:41)
#loc46 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_16.cpp":76:30)
#loc47 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_16.cpp":76:37)
#loc48 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_16.cpp":77:13)
#loc49 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_16.cpp":122:21)
#loc50 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_16.cpp":78:13)
#loc51 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_16.cpp":121:13)
#loc52 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_16.cpp":87:40)
#loc53 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_16.cpp":87:49)
#loc54 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_16.cpp":87:62)
#loc55 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_16.cpp":87:33)
#loc56 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_16.cpp":87:17)
#loc57 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_16.cpp":87:73)
#loc58 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_16.cpp":88:17)
#loc59 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_16.cpp":91:17)
#loc60 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_16.cpp":88:21)
#loc61 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_16.cpp":88:38)
#loc62 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_16.cpp":89:17)
#loc63 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_16.cpp":90:21)
#loc64 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_16.cpp":92:24)
#loc65 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_16.cpp":92:25)
#loc66 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_16.cpp":92:34)
#loc67 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_16.cpp":92:37)
#loc68 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_16.cpp":92:51)
#loc69 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_16.cpp":92:17)
#loc70 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_16.cpp":92:52)
#loc71 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_16.cpp":93:38)
#loc72 = loc("/usr/include/netinet/in.h":249:5)
#loc73 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_16.cpp":93:17)
#loc74 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_16.cpp":94:43)
#loc75 = loc("/usr/include/netinet/in.h":251:20)
#loc76 = loc("/usr/include/netinet/in.h":33:15)
#loc77 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_16.cpp":94:17)
#loc78 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_16.cpp":94:63)
#loc79 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_16.cpp":95:42)
#loc80 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_16.cpp":95:36)
#loc81 = loc("/usr/include/netinet/in.h":250:15)
#loc82 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_16.cpp":95:17)
#loc83 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_16.cpp":95:50)
#loc84 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_16.cpp":96:17)
#loc85 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_16.cpp":99:17)
#loc86 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_16.cpp":96:29)
#loc87 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_16.cpp":96:62)
#loc88 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_16.cpp":96:63)
#loc89 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_16.cpp":96:72)
#loc90 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_16.cpp":96:86)
#loc91 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_16.cpp":96:21)
#loc92 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_16.cpp":96:92)
#loc93 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_16.cpp":97:17)
#loc94 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_16.cpp":98:21)
#loc95 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_16.cpp":103:35)
#loc96 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_16.cpp":103:59)
#loc97 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_16.cpp":103:66)
#loc98 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_16.cpp":103:64)
#loc99 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_16.cpp":103:50)
#loc100 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_16.cpp":103:73)
#loc101 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_16.cpp":103:76)
#loc102 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_16.cpp":103:87)
#loc103 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_16.cpp":103:92)
#loc104 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_16.cpp":103:107)
#loc105 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_16.cpp":103:117)
#loc106 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_16.cpp":103:118)
#loc107 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_16.cpp":103:121)
#loc108 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_16.cpp":103:30)
#loc109 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_16.cpp":103:17)
#loc110 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_16.cpp":103:122)
#loc111 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_16.cpp":104:17)
#loc112 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_16.cpp":107:17)
#loc113 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_16.cpp":104:21)
#loc114 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_16.cpp":104:35)
#loc115 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_16.cpp":104:48)
#loc116 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_16.cpp":104:51)
#loc117 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_16.cpp":104:65)
#loc118 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_16.cpp":105:17)
#loc119 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_16.cpp":106:21)
#loc120 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_16.cpp":109:61)
#loc121 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_16.cpp":109:17)
#loc122 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_16.cpp":109:22)
#loc123 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_16.cpp":109:32)
#loc124 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_16.cpp":109:45)
#loc125 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_16.cpp":109:56)
#loc126 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_16.cpp":109:57)
#loc127 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_16.cpp":111:34)
#loc128 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_16.cpp":111:40)
#loc129 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_16.cpp":111:27)
#loc130 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_16.cpp":111:17)
#loc131 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_16.cpp":111:44)
#loc132 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_16.cpp":112:17)
#loc133 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_16.cpp":115:17)
#loc134 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_16.cpp":112:21)
#loc135 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_16.cpp":113:17)
#loc136 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_16.cpp":114:32)
#loc137 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_16.cpp":114:22)
#loc138 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_16.cpp":114:21)
#loc139 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_16.cpp":116:34)
#loc140 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_16.cpp":116:40)
#loc141 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_16.cpp":116:27)
#loc142 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_16.cpp":116:17)
#loc143 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_16.cpp":116:44)
#loc144 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_16.cpp":117:17)
#loc145 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_16.cpp":120:17)
#loc146 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_16.cpp":117:21)
#loc147 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_16.cpp":118:17)
#loc148 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_16.cpp":119:32)
#loc149 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_16.cpp":119:22)
#loc150 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_16.cpp":119:21)
#loc151 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_16.cpp":122:20)
#loc152 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_16.cpp":123:13)
#loc153 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_16.cpp":126:13)
#loc154 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_16.cpp":123:17)
#loc155 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_16.cpp":123:34)
#loc156 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_16.cpp":124:13)
#loc157 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_16.cpp":125:30)
#loc158 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_16.cpp":125:17)
#loc159 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_16.cpp":134:9)
#loc160 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_16.cpp":136:5)
#loc161 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_16.cpp":144:5)
#loc162 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_16.cpp":137:9)
#loc163 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_16.cpp":137:13)
#loc164 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_16.cpp":139:25)
#loc165 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_16.cpp":139:31)
#loc166 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_16.cpp":139:38)
#loc167 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_16.cpp":139:47)
#loc168 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_16.cpp":139:55)
#loc169 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_16.cpp":139:20)
#loc170 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_16.cpp":139:9)
#loc171 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_16.cpp":139:63)
#loc172 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_16.cpp":140:9)
#loc173 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_16.cpp":143:9)
#loc174 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_16.cpp":140:13)
#loc175 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_16.cpp":140:26)
#loc176 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_16.cpp":140:25)
#loc177 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_16.cpp":141:9)
#loc178 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_16.cpp":142:19)
#loc179 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_16.cpp":142:13)
#loc180 = loc("/usr/include/string.h":149:1)
#loc181 = loc("/usr/include/string.h":150:14)
#loc182 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_16.cpp":160:22)
#loc183 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_16.cpp":152:1)
#loc184 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_16.cpp":172:1)
#loc185 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_16.cpp":154:5)
#loc186 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_16.cpp":154:12)
#loc187 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_16.cpp":156:12)
#loc188 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_16.cpp":156:5)
#loc189 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_16.cpp":157:5)
#loc190 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_16.cpp":162:5)
#loc191 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_16.cpp":157:11)
#loc192 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_16.cpp":158:5)
#loc193 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_16.cpp":160:9)
#loc194 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_16.cpp":160:16)
#loc195 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_16.cpp":161:9)
#loc196 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_16.cpp":163:5)
#loc197 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_16.cpp":171:5)
#loc198 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_16.cpp":164:9)
#loc199 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_16.cpp":164:13)
#loc200 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_16.cpp":166:25)
#loc201 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_16.cpp":166:31)
#loc202 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_16.cpp":166:38)
#loc203 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_16.cpp":166:47)
#loc204 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_16.cpp":166:55)
#loc205 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_16.cpp":166:20)
#loc206 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_16.cpp":166:9)
#loc207 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_16.cpp":166:63)
#loc208 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_16.cpp":167:9)
#loc209 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_16.cpp":170:9)
#loc210 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_16.cpp":167:13)
#loc211 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_16.cpp":167:26)
#loc212 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_16.cpp":167:25)
#loc213 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_16.cpp":168:9)
#loc214 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_16.cpp":169:19)
#loc215 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_16.cpp":169:13)
#loc216 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_16.cpp":174:1)
#loc217 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_16.cpp":177:1)
#loc218 = loc("CWE23_Relative_Path_Traversal__char_connect_socket_open_16.cpp":176:5)
#loc219 = loc(fused[#loc1, #loc2])
#loc220 = loc(fused[#loc3, #loc4])
#loc221 = loc(fused[#loc5, #loc6])
#loc222 = loc(fused[#loc7, #loc8])
#loc223 = loc(fused[#loc9, #loc10])
#loc224 = loc(fused[#loc12, #loc13])
#loc225 = loc(fused[#loc14, #loc15])
#loc226 = loc(fused[#loc16, #loc17])
#loc227 = loc(fused[#loc18, #loc19])
#loc228 = loc(fused[#loc20, #loc21])
#loc229 = loc(fused[#loc22, #loc23])
#loc230 = loc(fused[#loc24, #loc25])
#loc231 = loc(fused[#loc26, #loc27])
#loc232 = loc(fused[#loc29, #loc28])
#loc233 = loc(fused[#loc30, #loc31])
#loc234 = loc(fused[#loc33, #loc31])
#loc235 = loc(fused[#loc34, #loc35])
#loc236 = loc(fused[#loc36, #loc37])
#loc237 = loc(fused[#loc38, #loc39])
#loc238 = loc(fused[#loc40, #loc41])
#loc239 = loc(fused[#loc42, #loc43])
#loc240 = loc(fused[#loc44, #loc45])
#loc241 = loc(fused[#loc48, #loc49])
#loc242 = loc(fused[#loc50, #loc51])
#loc243 = loc(fused[#loc56, #loc57])
#loc244 = loc(fused[#loc58, #loc59])
#loc245 = loc(fused[#loc60, #loc61])
#loc246 = loc(fused[#loc62, #loc59])
#loc247 = loc(fused[#loc64, #loc65])
#loc248 = loc(fused[#loc67, #loc68])
#loc249 = loc(fused[#loc69, #loc70])
#loc250 = loc(fused[#loc73, #loc71])
#loc251 = loc(fused[#loc77, #loc78])
#loc252 = loc(fused[#loc82, #loc83])
#loc253 = loc(fused[#loc84, #loc85])
#loc254 = loc(fused[#loc87, #loc88])
#loc255 = loc(fused[#loc89, #loc90])
#loc256 = loc(fused[#loc91, #loc92])
#loc257 = loc(fused[#loc93, #loc85])
#loc258 = loc(fused[#loc99, #loc100])
#loc259 = loc(fused[#loc101, #loc102])
#loc260 = loc(fused[#loc103, #loc104])
#loc261 = loc(fused[#loc103, #loc105])
#loc262 = loc(fused[#loc101, #loc106])
#loc263 = loc(fused[#loc109, #loc110])
#loc264 = loc(fused[#loc111, #loc112])
#loc265 = loc(fused[#loc113, #loc114])
#loc266 = loc(fused[#loc116, #loc117])
#loc267 = loc(fused[#loc118, #loc112])
#loc268 = loc(fused[#loc124, #loc125])
#loc269 = loc(fused[#loc123, #loc125])
#loc270 = loc(fused[#loc122, #loc125])
#loc271 = loc(fused[#loc121, #loc120])
#loc272 = loc(fused[#loc130, #loc131])
#loc273 = loc(fused[#loc132, #loc133])
#loc274 = loc(fused[#loc135, #loc133])
#loc275 = loc(fused[#loc138, #loc136])
#loc276 = loc(fused[#loc142, #loc143])
#loc277 = loc(fused[#loc144, #loc145])
#loc278 = loc(fused[#loc147, #loc145])
#loc279 = loc(fused[#loc150, #loc148])
#loc280 = loc(fused[#loc152, #loc153])
#loc281 = loc(fused[#loc154, #loc155])
#loc282 = loc(fused[#loc156, #loc153])
#loc283 = loc(fused[#loc160, #loc161])
#loc284 = loc(fused[#loc162, #loc163])
#loc285 = loc(fused[#loc165, #loc166])
#loc286 = loc(fused[#loc167, #loc168])
#loc287 = loc(fused[#loc170, #loc171])
#loc288 = loc(fused[#loc172, #loc173])
#loc289 = loc(fused[#loc174, #loc175])
#loc290 = loc(fused[#loc177, #loc173])
#loc291 = loc(fused[#loc180, #loc181])
#loc292 = loc(fused[#loc183, #loc184])
#loc293 = loc(fused[#loc185, #loc186])
#loc294 = loc(fused[#loc188, #loc187])
#loc295 = loc(fused[#loc189, #loc190])
#loc296 = loc(fused[#loc192, #loc190])
#loc297 = loc(fused[#loc196, #loc197])
#loc298 = loc(fused[#loc198, #loc199])
#loc299 = loc(fused[#loc201, #loc202])
#loc300 = loc(fused[#loc203, #loc204])
#loc301 = loc(fused[#loc206, #loc207])
#loc302 = loc(fused[#loc208, #loc209])
#loc303 = loc(fused[#loc210, #loc211])
#loc304 = loc(fused[#loc213, #loc209])
#loc305 = loc(fused[#loc216, #loc217])
