!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":135:10)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":135:14)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":135:20)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":135:32)
#loc293 = loc(fused[#loc95, #loc96])
#loc294 = loc(fused[#loc97, #loc98])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i32 = dense<32> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc257)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc258)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc259)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc260)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc262)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc13)
    cir.store %1, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc263)
    cir.scope {
      %2 = cir.const #cir.int<5> : !s32i loc(#loc17)
      %3 = cir.const #cir.int<5> : !s32i loc(#loc18)
      %4 = cir.cmp(eq, %2, %3) : !s32i, !cir.bool loc(#loc265)
      cir.if %4 {
        %5 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc20)
        %6 = cir.const #cir.int<50> : !s32i loc(#loc21)
        %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc21)
        %8 = cir.const #cir.int<1> : !u64i loc(#loc267)
        %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc268)
        %10 = cir.call @malloc(%9) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc20)
        %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc269)
        cir.store %11, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc270)
        cir.scope {
          %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc28)
          %18 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc29)
          %19 = cir.cast(bitcast, %18 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc29)
          %20 = cir.cmp(eq, %17, %19) : !cir.ptr<!s8i>, !cir.bool loc(#loc272)
          cir.if %20 {
            %21 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc31)
            %22 = cir.const #cir.int<1> : !s32i loc(#loc32)
            %23 = cir.unary(minus, %22) : !s32i, !s32i loc(#loc33)
            cir.call @exit(%23) : (!s32i) -> () extra(#fn_attr) loc(#loc31)
          } loc(#loc273)
        } loc(#loc271)
        %12 = cir.const #cir.int<0> : !s32i loc(#loc34)
        %13 = cir.cast(integral, %12 : !s32i), !s8i loc(#loc34)
        %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc35)
        %15 = cir.const #cir.int<0> : !s32i loc(#loc36)
        %16 = cir.ptr_stride(%14 : !cir.ptr<!s8i>, %15 : !s32i), !cir.ptr<!s8i> loc(#loc37)
        cir.store %13, %16 : !s8i, !cir.ptr<!s8i> loc(#loc274)
      } loc(#loc266)
    } loc(#loc264)
    cir.scope {
      %2 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc276)
      %3 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc277)
      %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc44)
      %5 = cir.cast(bitcast, %4 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc44)
      %6 = cir.const #cir.int<67> : !s32i loc(#loc45)
      %7 = cir.const #cir.int<100> : !s32i loc(#loc46)
      %8 = cir.const #cir.int<1> : !s32i loc(#loc47)
      %9 = cir.binop(sub, %7, %8) nsw : !s32i loc(#loc46)
      %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc46)
      cir.libc.memset %10 bytes from %5 set to %6 : !cir.ptr<!void>, !s32i, !u64i loc(#loc278)
      %11 = cir.const #cir.int<0> : !s32i loc(#loc50)
      %12 = cir.cast(integral, %11 : !s32i), !s8i loc(#loc50)
      %13 = cir.const #cir.int<100> : !s32i loc(#loc51)
      %14 = cir.const #cir.int<1> : !s32i loc(#loc52)
      %15 = cir.binop(sub, %13, %14) nsw : !s32i loc(#loc51)
      %16 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc53)
      %17 = cir.ptr_stride(%16 : !cir.ptr<!s8i>, %15 : !s32i), !cir.ptr<!s8i> loc(#loc53)
      cir.store %12, %17 : !s8i, !cir.ptr<!s8i> loc(#loc279)
      cir.scope {
        %29 = cir.const #cir.int<0> : !s32i loc(#loc56)
        %30 = cir.cast(integral, %29 : !s32i), !u64i loc(#loc56)
        cir.store %30, %2 : !u64i, !cir.ptr<!u64i> loc(#loc281)
        cir.for : cond {
          %31 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc58)
          %32 = cir.const #cir.int<100> : !s32i loc(#loc59)
          %33 = cir.cast(integral, %32 : !s32i), !u64i loc(#loc59)
          %34 = cir.cmp(lt, %31, %33) : !u64i, !cir.bool loc(#loc282)
          cir.condition(%34) loc(#loc60)
        } body {
          cir.scope {
            %31 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc62)
            %32 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc63)
            %33 = cir.ptr_stride(%32 : !cir.ptr<!s8i>, %31 : !u64i), !cir.ptr<!s8i> loc(#loc63)
            %34 = cir.load %33 : !cir.ptr<!s8i>, !s8i loc(#loc63)
            %35 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc64)
            %36 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc65)
            %37 = cir.ptr_stride(%35 : !cir.ptr<!s8i>, %36 : !u64i), !cir.ptr<!s8i> loc(#loc66)
            cir.store %34, %37 : !s8i, !cir.ptr<!s8i> loc(#loc284)
          } loc(#loc283)
          cir.yield loc(#loc55)
        } step {
          %31 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc68)
          %32 = cir.unary(inc, %31) : !u64i, !u64i loc(#loc69)
          cir.store %32, %2 : !u64i, !cir.ptr<!u64i> loc(#loc285)
          cir.yield loc(#loc280)
        } loc(#loc280)
      } loc(#loc280)
      %18 = cir.const #cir.int<0> : !s32i loc(#loc70)
      %19 = cir.cast(integral, %18 : !s32i), !s8i loc(#loc70)
      %20 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc71)
      %21 = cir.const #cir.int<100> : !s32i loc(#loc72)
      %22 = cir.const #cir.int<1> : !s32i loc(#loc73)
      %23 = cir.binop(sub, %21, %22) nsw : !s32i loc(#loc72)
      %24 = cir.ptr_stride(%20 : !cir.ptr<!s8i>, %23 : !s32i), !cir.ptr<!s8i> loc(#loc74)
      cir.store %19, %24 : !s8i, !cir.ptr<!s8i> loc(#loc286)
      %25 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc75)
      cir.call @printLine(%25) : (!cir.ptr<!s8i>) -> () loc(#loc76)
      %26 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc77)
      %27 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc78)
      %28 = cir.cast(bitcast, %27 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc78)
      cir.call @free(%28) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc77)
    } loc(#loc275)
    cir.return loc(#loc10)
  } loc(#loc261)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc288)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc81)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc289)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc83)
    cir.return loc(#loc80)
  } loc(#loc287)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc290)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc291)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc89)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc90)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc91)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc92)
  cir.func @main(%arg0: !s32i loc(fused[#loc95, #loc96]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc97, #loc98])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc293)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc294)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc94)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc99)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc99)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc100)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc101)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc101)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc102)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc89)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc89)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc103)
    %8 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06_good : !cir.ptr<!cir.func<!void ()>> loc(#loc295)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06_good() : () -> () loc(#loc104)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc90)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc90)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc106)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc91)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc91)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc107)
    %13 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc296)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06_bad() : () -> () loc(#loc108)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc92)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc92)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc110)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc111)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc297)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc297)
    cir.return %17 : !s32i loc(#loc297)
  } loc(#loc292)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc113)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc299)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc118)
    cir.store %1, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc300)
    cir.scope {
      %2 = cir.const #cir.int<5> : !s32i loc(#loc122)
      %3 = cir.const #cir.int<5> : !s32i loc(#loc123)
      %4 = cir.cmp(ne, %2, %3) : !s32i, !cir.bool loc(#loc302)
      cir.if %4 {
        %5 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc113)
        %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc113)
        cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc127)
      } else {
        %5 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc128)
        %6 = cir.const #cir.int<100> : !s32i loc(#loc129)
        %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc129)
        %8 = cir.const #cir.int<1> : !u64i loc(#loc304)
        %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc305)
        %10 = cir.call @malloc(%9) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc128)
        %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc306)
        cir.store %11, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc307)
        cir.scope {
          %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc136)
          %18 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc137)
          %19 = cir.cast(bitcast, %18 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc137)
          %20 = cir.cmp(eq, %17, %19) : !cir.ptr<!s8i>, !cir.bool loc(#loc309)
          cir.if %20 {
            %21 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc139)
            %22 = cir.const #cir.int<1> : !s32i loc(#loc140)
            %23 = cir.unary(minus, %22) : !s32i, !s32i loc(#loc141)
            cir.call @exit(%23) : (!s32i) -> () extra(#fn_attr) loc(#loc139)
          } loc(#loc310)
        } loc(#loc308)
        %12 = cir.const #cir.int<0> : !s32i loc(#loc142)
        %13 = cir.cast(integral, %12 : !s32i), !s8i loc(#loc142)
        %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc143)
        %15 = cir.const #cir.int<0> : !s32i loc(#loc144)
        %16 = cir.ptr_stride(%14 : !cir.ptr<!s8i>, %15 : !s32i), !cir.ptr<!s8i> loc(#loc145)
        cir.store %13, %16 : !s8i, !cir.ptr<!s8i> loc(#loc311)
      } loc(#loc303)
    } loc(#loc301)
    cir.scope {
      %2 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc313)
      %3 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc314)
      %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc152)
      %5 = cir.cast(bitcast, %4 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc152)
      %6 = cir.const #cir.int<67> : !s32i loc(#loc153)
      %7 = cir.const #cir.int<100> : !s32i loc(#loc154)
      %8 = cir.const #cir.int<1> : !s32i loc(#loc155)
      %9 = cir.binop(sub, %7, %8) nsw : !s32i loc(#loc154)
      %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc154)
      cir.libc.memset %10 bytes from %5 set to %6 : !cir.ptr<!void>, !s32i, !u64i loc(#loc315)
      %11 = cir.const #cir.int<0> : !s32i loc(#loc158)
      %12 = cir.cast(integral, %11 : !s32i), !s8i loc(#loc158)
      %13 = cir.const #cir.int<100> : !s32i loc(#loc159)
      %14 = cir.const #cir.int<1> : !s32i loc(#loc160)
      %15 = cir.binop(sub, %13, %14) nsw : !s32i loc(#loc159)
      %16 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc161)
      %17 = cir.ptr_stride(%16 : !cir.ptr<!s8i>, %15 : !s32i), !cir.ptr<!s8i> loc(#loc161)
      cir.store %12, %17 : !s8i, !cir.ptr<!s8i> loc(#loc316)
      cir.scope {
        %29 = cir.const #cir.int<0> : !s32i loc(#loc164)
        %30 = cir.cast(integral, %29 : !s32i), !u64i loc(#loc164)
        cir.store %30, %2 : !u64i, !cir.ptr<!u64i> loc(#loc318)
        cir.for : cond {
          %31 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc166)
          %32 = cir.const #cir.int<100> : !s32i loc(#loc167)
          %33 = cir.cast(integral, %32 : !s32i), !u64i loc(#loc167)
          %34 = cir.cmp(lt, %31, %33) : !u64i, !cir.bool loc(#loc319)
          cir.condition(%34) loc(#loc168)
        } body {
          cir.scope {
            %31 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc170)
            %32 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc171)
            %33 = cir.ptr_stride(%32 : !cir.ptr<!s8i>, %31 : !u64i), !cir.ptr<!s8i> loc(#loc171)
            %34 = cir.load %33 : !cir.ptr<!s8i>, !s8i loc(#loc171)
            %35 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc172)
            %36 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc173)
            %37 = cir.ptr_stride(%35 : !cir.ptr<!s8i>, %36 : !u64i), !cir.ptr<!s8i> loc(#loc174)
            cir.store %34, %37 : !s8i, !cir.ptr<!s8i> loc(#loc321)
          } loc(#loc320)
          cir.yield loc(#loc163)
        } step {
          %31 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc176)
          %32 = cir.unary(inc, %31) : !u64i, !u64i loc(#loc177)
          cir.store %32, %2 : !u64i, !cir.ptr<!u64i> loc(#loc322)
          cir.yield loc(#loc317)
        } loc(#loc317)
      } loc(#loc317)
      %18 = cir.const #cir.int<0> : !s32i loc(#loc178)
      %19 = cir.cast(integral, %18 : !s32i), !s8i loc(#loc178)
      %20 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc179)
      %21 = cir.const #cir.int<100> : !s32i loc(#loc180)
      %22 = cir.const #cir.int<1> : !s32i loc(#loc181)
      %23 = cir.binop(sub, %21, %22) nsw : !s32i loc(#loc180)
      %24 = cir.ptr_stride(%20 : !cir.ptr<!s8i>, %23 : !s32i), !cir.ptr<!s8i> loc(#loc182)
      cir.store %19, %24 : !s8i, !cir.ptr<!s8i> loc(#loc323)
      %25 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc183)
      cir.call @printLine(%25) : (!cir.ptr<!s8i>) -> () loc(#loc184)
      %26 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc185)
      %27 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc186)
      %28 = cir.cast(bitcast, %27 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc186)
      cir.call @free(%28) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc185)
    } loc(#loc312)
    cir.return loc(#loc115)
  } loc(#loc298)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc325)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc191)
    cir.store %1, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc326)
    cir.scope {
      %2 = cir.const #cir.int<5> : !s32i loc(#loc195)
      %3 = cir.const #cir.int<5> : !s32i loc(#loc196)
      %4 = cir.cmp(eq, %2, %3) : !s32i, !cir.bool loc(#loc328)
      cir.if %4 {
        %5 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc198)
        %6 = cir.const #cir.int<100> : !s32i loc(#loc199)
        %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc199)
        %8 = cir.const #cir.int<1> : !u64i loc(#loc330)
        %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc331)
        %10 = cir.call @malloc(%9) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc198)
        %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc332)
        cir.store %11, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc333)
        cir.scope {
          %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc206)
          %18 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc207)
          %19 = cir.cast(bitcast, %18 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc207)
          %20 = cir.cmp(eq, %17, %19) : !cir.ptr<!s8i>, !cir.bool loc(#loc335)
          cir.if %20 {
            %21 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc209)
            %22 = cir.const #cir.int<1> : !s32i loc(#loc210)
            %23 = cir.unary(minus, %22) : !s32i, !s32i loc(#loc211)
            cir.call @exit(%23) : (!s32i) -> () extra(#fn_attr) loc(#loc209)
          } loc(#loc336)
        } loc(#loc334)
        %12 = cir.const #cir.int<0> : !s32i loc(#loc212)
        %13 = cir.cast(integral, %12 : !s32i), !s8i loc(#loc212)
        %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc213)
        %15 = cir.const #cir.int<0> : !s32i loc(#loc214)
        %16 = cir.ptr_stride(%14 : !cir.ptr<!s8i>, %15 : !s32i), !cir.ptr<!s8i> loc(#loc215)
        cir.store %13, %16 : !s8i, !cir.ptr<!s8i> loc(#loc337)
      } loc(#loc329)
    } loc(#loc327)
    cir.scope {
      %2 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc339)
      %3 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc340)
      %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc222)
      %5 = cir.cast(bitcast, %4 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc222)
      %6 = cir.const #cir.int<67> : !s32i loc(#loc223)
      %7 = cir.const #cir.int<100> : !s32i loc(#loc224)
      %8 = cir.const #cir.int<1> : !s32i loc(#loc225)
      %9 = cir.binop(sub, %7, %8) nsw : !s32i loc(#loc224)
      %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc224)
      cir.libc.memset %10 bytes from %5 set to %6 : !cir.ptr<!void>, !s32i, !u64i loc(#loc341)
      %11 = cir.const #cir.int<0> : !s32i loc(#loc228)
      %12 = cir.cast(integral, %11 : !s32i), !s8i loc(#loc228)
      %13 = cir.const #cir.int<100> : !s32i loc(#loc229)
      %14 = cir.const #cir.int<1> : !s32i loc(#loc230)
      %15 = cir.binop(sub, %13, %14) nsw : !s32i loc(#loc229)
      %16 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc231)
      %17 = cir.ptr_stride(%16 : !cir.ptr<!s8i>, %15 : !s32i), !cir.ptr<!s8i> loc(#loc231)
      cir.store %12, %17 : !s8i, !cir.ptr<!s8i> loc(#loc342)
      cir.scope {
        %29 = cir.const #cir.int<0> : !s32i loc(#loc234)
        %30 = cir.cast(integral, %29 : !s32i), !u64i loc(#loc234)
        cir.store %30, %2 : !u64i, !cir.ptr<!u64i> loc(#loc344)
        cir.for : cond {
          %31 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc236)
          %32 = cir.const #cir.int<100> : !s32i loc(#loc237)
          %33 = cir.cast(integral, %32 : !s32i), !u64i loc(#loc237)
          %34 = cir.cmp(lt, %31, %33) : !u64i, !cir.bool loc(#loc345)
          cir.condition(%34) loc(#loc238)
        } body {
          cir.scope {
            %31 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc240)
            %32 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc241)
            %33 = cir.ptr_stride(%32 : !cir.ptr<!s8i>, %31 : !u64i), !cir.ptr<!s8i> loc(#loc241)
            %34 = cir.load %33 : !cir.ptr<!s8i>, !s8i loc(#loc241)
            %35 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc242)
            %36 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc243)
            %37 = cir.ptr_stride(%35 : !cir.ptr<!s8i>, %36 : !u64i), !cir.ptr<!s8i> loc(#loc244)
            cir.store %34, %37 : !s8i, !cir.ptr<!s8i> loc(#loc347)
          } loc(#loc346)
          cir.yield loc(#loc233)
        } step {
          %31 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc246)
          %32 = cir.unary(inc, %31) : !u64i, !u64i loc(#loc247)
          cir.store %32, %2 : !u64i, !cir.ptr<!u64i> loc(#loc348)
          cir.yield loc(#loc343)
        } loc(#loc343)
      } loc(#loc343)
      %18 = cir.const #cir.int<0> : !s32i loc(#loc248)
      %19 = cir.cast(integral, %18 : !s32i), !s8i loc(#loc248)
      %20 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc249)
      %21 = cir.const #cir.int<100> : !s32i loc(#loc250)
      %22 = cir.const #cir.int<1> : !s32i loc(#loc251)
      %23 = cir.binop(sub, %21, %22) nsw : !s32i loc(#loc250)
      %24 = cir.ptr_stride(%20 : !cir.ptr<!s8i>, %23 : !s32i), !cir.ptr<!s8i> loc(#loc252)
      cir.store %19, %24 : !s8i, !cir.ptr<!s8i> loc(#loc349)
      %25 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc253)
      cir.call @printLine(%25) : (!cir.ptr<!s8i>) -> () loc(#loc254)
      %26 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc255)
      %27 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc256)
      %28 = cir.cast(bitcast, %27 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc256)
      cir.call @free(%28) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc255)
    } loc(#loc338)
    cir.return loc(#loc188)
  } loc(#loc324)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc7 = loc("/usr/include/stdlib.h":687:1)
#loc8 = loc("/usr/include/stdlib.h":687:32)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":27:1)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":52:1)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":29:5)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":29:12)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":30:12)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":30:5)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":31:5)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":37:5)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":31:8)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":31:27)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":32:5)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":34:24)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":34:31)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":34:34)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":34:45)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":34:46)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":34:9)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":35:9)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":35:37)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":35:13)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":35:21)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":35:27)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":35:28)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":35:34)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":35:33)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":36:19)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":36:9)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":36:14)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":36:15)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":38:5)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":51:5)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":39:9)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":39:16)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":40:9)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":40:24)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":41:16)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":41:24)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":41:29)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":41:33)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":41:9)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":41:34)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":42:25)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":42:16)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":42:20)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":42:9)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":44:9)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":47:9)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":44:18)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":44:14)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":44:21)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":44:25)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":44:23)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":45:9)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":46:30)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":46:23)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":46:13)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":46:18)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":46:19)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":46:31)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":44:31)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":44:30)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":48:23)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":48:9)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":48:14)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":48:18)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":48:19)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":49:19)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":49:9)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":50:9)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":50:14)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":119:1)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":123:1)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":121:5)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":121:14)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":122:5)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":122:14)
#loc85 = loc("/usr/include/stdlib.h":575:1)
#loc86 = loc("/usr/include/stdlib.h":575:41)
#loc87 = loc("/usr/include/time.h":76:1)
#loc88 = loc("/usr/include/time.h":76:38)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":140:15)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":142:15)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":145:15)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":147:15)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":135:1)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":150:1)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":136:1)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":138:27)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":138:22)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":138:5)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":140:5)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":141:5)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":141:67)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":142:5)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":145:5)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":146:5)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":146:66)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":147:5)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":149:12)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":149:5)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":66:19)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":59:1)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":89:1)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":61:5)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":61:12)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":62:12)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":62:5)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":63:5)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":74:5)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":63:8)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":63:27)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":64:5)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":67:5)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":69:5)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":66:9)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":71:24)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":71:31)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":71:35)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":71:46)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":71:47)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":71:9)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":72:9)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":72:37)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":72:13)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":72:21)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":72:27)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":72:28)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":72:34)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":72:33)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":73:19)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":73:9)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":73:14)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":73:15)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":75:5)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":88:5)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":76:9)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":76:16)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":77:9)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":77:24)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":78:16)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":78:24)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":78:29)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":78:33)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":78:9)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":78:34)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":79:25)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":79:16)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":79:20)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":79:9)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":81:9)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":84:9)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":81:18)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":81:14)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":81:21)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":81:25)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":81:23)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":82:9)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":83:30)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":83:23)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":83:13)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":83:18)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":83:19)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":83:31)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":81:31)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":81:30)
#loc178 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":85:23)
#loc179 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":85:9)
#loc180 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":85:14)
#loc181 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":85:18)
#loc182 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":85:19)
#loc183 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":86:19)
#loc184 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":86:9)
#loc185 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":87:9)
#loc186 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":87:14)
#loc187 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":92:1)
#loc188 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":117:1)
#loc189 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":94:5)
#loc190 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":94:12)
#loc191 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":95:12)
#loc192 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":95:5)
#loc193 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":96:5)
#loc194 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":102:5)
#loc195 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":96:8)
#loc196 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":96:27)
#loc197 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":97:5)
#loc198 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":99:24)
#loc199 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":99:31)
#loc200 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":99:35)
#loc201 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":99:46)
#loc202 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":99:47)
#loc203 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":99:9)
#loc204 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":100:9)
#loc205 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":100:37)
#loc206 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":100:13)
#loc207 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":100:21)
#loc208 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":100:27)
#loc209 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":100:28)
#loc210 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":100:34)
#loc211 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":100:33)
#loc212 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":101:19)
#loc213 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":101:9)
#loc214 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":101:14)
#loc215 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":101:15)
#loc216 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":103:5)
#loc217 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":116:5)
#loc218 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":104:9)
#loc219 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":104:16)
#loc220 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":105:9)
#loc221 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":105:24)
#loc222 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":106:16)
#loc223 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":106:24)
#loc224 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":106:29)
#loc225 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":106:33)
#loc226 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":106:9)
#loc227 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":106:34)
#loc228 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":107:25)
#loc229 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":107:16)
#loc230 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":107:20)
#loc231 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":107:9)
#loc232 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":109:9)
#loc233 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":112:9)
#loc234 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":109:18)
#loc235 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":109:14)
#loc236 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":109:21)
#loc237 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":109:25)
#loc238 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":109:23)
#loc239 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":110:9)
#loc240 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":111:30)
#loc241 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":111:23)
#loc242 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":111:13)
#loc243 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":111:18)
#loc244 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":111:19)
#loc245 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":111:31)
#loc246 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":109:31)
#loc247 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":109:30)
#loc248 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":113:23)
#loc249 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":113:9)
#loc250 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":113:14)
#loc251 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":113:18)
#loc252 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":113:19)
#loc253 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":114:19)
#loc254 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":114:9)
#loc255 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":115:9)
#loc256 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c":115:14)
#loc257 = loc(fused[#loc1, #loc2])
#loc258 = loc(fused[#loc3, #loc4])
#loc259 = loc(fused[#loc5, #loc6])
#loc260 = loc(fused[#loc7, #loc8])
#loc261 = loc(fused[#loc9, #loc10])
#loc262 = loc(fused[#loc11, #loc12])
#loc263 = loc(fused[#loc14, #loc13])
#loc264 = loc(fused[#loc15, #loc16])
#loc265 = loc(fused[#loc17, #loc18])
#loc266 = loc(fused[#loc19, #loc16])
#loc267 = loc(fused[#loc22, #loc23])
#loc268 = loc(fused[#loc21, #loc23])
#loc269 = loc(fused[#loc20, #loc24])
#loc270 = loc(fused[#loc25, #loc24])
#loc271 = loc(fused[#loc26, #loc27])
#loc272 = loc(fused[#loc28, #loc29])
#loc273 = loc(fused[#loc30, #loc27])
#loc274 = loc(fused[#loc35, #loc34])
#loc275 = loc(fused[#loc38, #loc39])
#loc276 = loc(fused[#loc40, #loc41])
#loc277 = loc(fused[#loc42, #loc43])
#loc278 = loc(fused[#loc48, #loc49])
#loc279 = loc(fused[#loc53, #loc50])
#loc280 = loc(fused[#loc54, #loc55])
#loc281 = loc(fused[#loc57, #loc56])
#loc282 = loc(fused[#loc58, #loc59])
#loc283 = loc(fused[#loc61, #loc55])
#loc284 = loc(fused[#loc64, #loc67])
#loc285 = loc(fused[#loc69, #loc68])
#loc286 = loc(fused[#loc71, #loc70])
#loc287 = loc(fused[#loc79, #loc80])
#loc288 = loc(fused[#loc81, #loc82])
#loc289 = loc(fused[#loc83, #loc84])
#loc290 = loc(fused[#loc85, #loc86])
#loc291 = loc(fused[#loc87, #loc88])
#loc292 = loc(fused[#loc93, #loc94])
#loc295 = loc(fused[#loc104, #loc105])
#loc296 = loc(fused[#loc108, #loc109])
#loc297 = loc(fused[#loc112, #loc111])
#loc298 = loc(fused[#loc114, #loc115])
#loc299 = loc(fused[#loc116, #loc117])
#loc300 = loc(fused[#loc119, #loc118])
#loc301 = loc(fused[#loc120, #loc121])
#loc302 = loc(fused[#loc122, #loc123])
#loc303 = loc(fused[#loc124, #loc125, #loc126, #loc121])
#loc304 = loc(fused[#loc130, #loc131])
#loc305 = loc(fused[#loc129, #loc131])
#loc306 = loc(fused[#loc128, #loc132])
#loc307 = loc(fused[#loc133, #loc132])
#loc308 = loc(fused[#loc134, #loc135])
#loc309 = loc(fused[#loc136, #loc137])
#loc310 = loc(fused[#loc138, #loc135])
#loc311 = loc(fused[#loc143, #loc142])
#loc312 = loc(fused[#loc146, #loc147])
#loc313 = loc(fused[#loc148, #loc149])
#loc314 = loc(fused[#loc150, #loc151])
#loc315 = loc(fused[#loc156, #loc157])
#loc316 = loc(fused[#loc161, #loc158])
#loc317 = loc(fused[#loc162, #loc163])
#loc318 = loc(fused[#loc165, #loc164])
#loc319 = loc(fused[#loc166, #loc167])
#loc320 = loc(fused[#loc169, #loc163])
#loc321 = loc(fused[#loc172, #loc175])
#loc322 = loc(fused[#loc177, #loc176])
#loc323 = loc(fused[#loc179, #loc178])
#loc324 = loc(fused[#loc187, #loc188])
#loc325 = loc(fused[#loc189, #loc190])
#loc326 = loc(fused[#loc192, #loc191])
#loc327 = loc(fused[#loc193, #loc194])
#loc328 = loc(fused[#loc195, #loc196])
#loc329 = loc(fused[#loc197, #loc194])
#loc330 = loc(fused[#loc200, #loc201])
#loc331 = loc(fused[#loc199, #loc201])
#loc332 = loc(fused[#loc198, #loc202])
#loc333 = loc(fused[#loc203, #loc202])
#loc334 = loc(fused[#loc204, #loc205])
#loc335 = loc(fused[#loc206, #loc207])
#loc336 = loc(fused[#loc208, #loc205])
#loc337 = loc(fused[#loc213, #loc212])
#loc338 = loc(fused[#loc216, #loc217])
#loc339 = loc(fused[#loc218, #loc219])
#loc340 = loc(fused[#loc220, #loc221])
#loc341 = loc(fused[#loc226, #loc227])
#loc342 = loc(fused[#loc231, #loc228])
#loc343 = loc(fused[#loc232, #loc233])
#loc344 = loc(fused[#loc235, #loc234])
#loc345 = loc(fused[#loc236, #loc237])
#loc346 = loc(fused[#loc239, #loc233])
#loc347 = loc(fused[#loc242, #loc245])
#loc348 = loc(fused[#loc247, #loc246])
#loc349 = loc(fused[#loc249, #loc248])
