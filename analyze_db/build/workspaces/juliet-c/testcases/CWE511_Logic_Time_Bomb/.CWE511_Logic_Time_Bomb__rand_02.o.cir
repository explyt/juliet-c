!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE511_Logic_Time_Bomb/CWE511_Logic_Time_Bomb__rand_02.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<271> = dense<32> : vector<4xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, "dlti.endianness" = "little", "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc69)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc70)
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc71)
  cir.func private @unlink(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc72)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"important_file.txt\00" : !cir.array<!s8i x 19>> : !cir.array<!s8i x 19> {alignment = 1 : i64} loc(#loc9)
  cir.func no_proto @CWE511_Logic_Time_Bomb__rand_02_bad() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.const #cir.int<1> : !s32i loc(#loc14)
      %1 = cir.cast(int_to_bool, %0 : !s32i), !cir.bool loc(#loc14)
      cir.if %1 {
        %2 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc16)
        %3 = cir.call @time(%2) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc17)
        %4 = cir.cast(integral, %3 : !s64i), !u32i loc(#loc17)
        cir.call @srand(%4) : (!u32i) -> () extra(#fn_attr) loc(#loc18)
        cir.scope {
          %5 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc21)
          %6 = cir.const #cir.int<20000> : !s32i loc(#loc22)
          %7 = cir.cmp(eq, %5, %6) : !s32i, !cir.bool loc(#loc77)
          cir.if %7 {
            %8 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 19>> loc(#loc9)
            %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 19>>), !cir.ptr<!s8i> loc(#loc9)
            %10 = cir.call @unlink(%9) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc24)
          } loc(#loc78)
        } loc(#loc76)
      } loc(#loc75)
    } loc(#loc74)
    cir.return loc(#loc11)
  } loc(#loc73)
  cir.func no_proto @CWE511_Logic_Time_Bomb__rand_02_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<()>> loc(#loc80)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc27)
    %1 = cir.get_global @good2 : !cir.ptr<!cir.func<()>> loc(#loc81)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc29)
    cir.return loc(#loc26)
  } loc(#loc79)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc82)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc33)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Happy New Year!\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc34)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.const #cir.int<0> : !s32i loc(#loc39)
      %1 = cir.cast(int_to_bool, %0 : !s32i), !cir.bool loc(#loc39)
      cir.if %1 {
        %2 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc33)
        %3 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc33)
        cir.call @printLine(%3) : (!cir.ptr<!s8i>) -> () loc(#loc43)
      } else {
        %2 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc44)
        %3 = cir.call @time(%2) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc45)
        %4 = cir.cast(integral, %3 : !s64i), !u32i loc(#loc45)
        cir.call @srand(%4) : (!u32i) -> () extra(#fn_attr) loc(#loc46)
        cir.scope {
          %5 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc49)
          %6 = cir.const #cir.int<20000> : !s32i loc(#loc50)
          %7 = cir.cmp(eq, %5, %6) : !s32i, !cir.bool loc(#loc87)
          cir.if %7 {
            %8 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc34)
            %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc34)
            cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc52)
          } loc(#loc88)
        } loc(#loc86)
      } loc(#loc85)
    } loc(#loc84)
    cir.return loc(#loc36)
  } loc(#loc83)
  cir.func no_proto internal private @good2() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.const #cir.int<1> : !s32i loc(#loc57)
      %1 = cir.cast(int_to_bool, %0 : !s32i), !cir.bool loc(#loc57)
      cir.if %1 {
        %2 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc59)
        %3 = cir.call @time(%2) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc60)
        %4 = cir.cast(integral, %3 : !s64i), !u32i loc(#loc60)
        cir.call @srand(%4) : (!u32i) -> () extra(#fn_attr) loc(#loc61)
        cir.scope {
          %5 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc64)
          %6 = cir.const #cir.int<20000> : !s32i loc(#loc65)
          %7 = cir.cmp(eq, %5, %6) : !s32i, !cir.bool loc(#loc93)
          cir.if %7 {
            %8 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc67)
            %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc67)
            cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc68)
          } loc(#loc94)
        } loc(#loc92)
      } loc(#loc91)
    } loc(#loc90)
    cir.return loc(#loc54)
  } loc(#loc89)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE511_Logic_Time_Bomb/CWE511_Logic_Time_Bomb__rand_02.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":575:1)
#loc2 = loc("/usr/include/stdlib.h":575:41)
#loc3 = loc("/usr/include/time.h":76:1)
#loc4 = loc("/usr/include/time.h":76:38)
#loc5 = loc("/usr/include/stdlib.h":573:1)
#loc6 = loc("/usr/include/stdlib.h":573:24)
#loc7 = loc("/usr/include/unistd.h":858:1)
#loc8 = loc("/usr/include/unistd.h":858:48)
#loc9 = loc("CWE511_Logic_Time_Bomb__rand_02.c":37:20)
#loc10 = loc("CWE511_Logic_Time_Bomb__rand_02.c":29:1)
#loc11 = loc("CWE511_Logic_Time_Bomb__rand_02.c":40:1)
#loc12 = loc("CWE511_Logic_Time_Bomb__rand_02.c":31:5)
#loc13 = loc("CWE511_Logic_Time_Bomb__rand_02.c":39:5)
#loc14 = loc("CWE511_Logic_Time_Bomb__rand_02.c":31:8)
#loc15 = loc("CWE511_Logic_Time_Bomb__rand_02.c":32:5)
#loc16 = loc("CWE511_Logic_Time_Bomb__rand_02.c":33:30)
#loc17 = loc("CWE511_Logic_Time_Bomb__rand_02.c":33:25)
#loc18 = loc("CWE511_Logic_Time_Bomb__rand_02.c":33:9)
#loc19 = loc("CWE511_Logic_Time_Bomb__rand_02.c":35:9)
#loc20 = loc("CWE511_Logic_Time_Bomb__rand_02.c":38:9)
#loc21 = loc("CWE511_Logic_Time_Bomb__rand_02.c":35:13)
#loc22 = loc("CWE511_Logic_Time_Bomb__rand_02.c":35:23)
#loc23 = loc("CWE511_Logic_Time_Bomb__rand_02.c":36:9)
#loc24 = loc("CWE511_Logic_Time_Bomb__rand_02.c":37:13)
#loc25 = loc("CWE511_Logic_Time_Bomb__rand_02.c":79:1)
#loc26 = loc("CWE511_Logic_Time_Bomb__rand_02.c":83:1)
#loc27 = loc("CWE511_Logic_Time_Bomb__rand_02.c":81:5)
#loc28 = loc("CWE511_Logic_Time_Bomb__rand_02.c":81:11)
#loc29 = loc("CWE511_Logic_Time_Bomb__rand_02.c":82:5)
#loc30 = loc("CWE511_Logic_Time_Bomb__rand_02.c":82:11)
#loc31 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc32 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc33 = loc("CWE511_Logic_Time_Bomb__rand_02.c":52:19)
#loc34 = loc("CWE511_Logic_Time_Bomb__rand_02.c":60:23)
#loc35 = loc("CWE511_Logic_Time_Bomb__rand_02.c":47:1)
#loc36 = loc("CWE511_Logic_Time_Bomb__rand_02.c":63:1)
#loc37 = loc("CWE511_Logic_Time_Bomb__rand_02.c":49:5)
#loc38 = loc("CWE511_Logic_Time_Bomb__rand_02.c":62:5)
#loc39 = loc("CWE511_Logic_Time_Bomb__rand_02.c":49:8)
#loc40 = loc("CWE511_Logic_Time_Bomb__rand_02.c":50:5)
#loc41 = loc("CWE511_Logic_Time_Bomb__rand_02.c":53:5)
#loc42 = loc("CWE511_Logic_Time_Bomb__rand_02.c":55:5)
#loc43 = loc("CWE511_Logic_Time_Bomb__rand_02.c":52:9)
#loc44 = loc("CWE511_Logic_Time_Bomb__rand_02.c":56:30)
#loc45 = loc("CWE511_Logic_Time_Bomb__rand_02.c":56:25)
#loc46 = loc("CWE511_Logic_Time_Bomb__rand_02.c":56:9)
#loc47 = loc("CWE511_Logic_Time_Bomb__rand_02.c":58:9)
#loc48 = loc("CWE511_Logic_Time_Bomb__rand_02.c":61:9)
#loc49 = loc("CWE511_Logic_Time_Bomb__rand_02.c":58:13)
#loc50 = loc("CWE511_Logic_Time_Bomb__rand_02.c":58:23)
#loc51 = loc("CWE511_Logic_Time_Bomb__rand_02.c":59:9)
#loc52 = loc("CWE511_Logic_Time_Bomb__rand_02.c":60:13)
#loc53 = loc("CWE511_Logic_Time_Bomb__rand_02.c":66:1)
#loc54 = loc("CWE511_Logic_Time_Bomb__rand_02.c":77:1)
#loc55 = loc("CWE511_Logic_Time_Bomb__rand_02.c":68:5)
#loc56 = loc("CWE511_Logic_Time_Bomb__rand_02.c":76:5)
#loc57 = loc("CWE511_Logic_Time_Bomb__rand_02.c":68:8)
#loc58 = loc("CWE511_Logic_Time_Bomb__rand_02.c":69:5)
#loc59 = loc("CWE511_Logic_Time_Bomb__rand_02.c":70:30)
#loc60 = loc("CWE511_Logic_Time_Bomb__rand_02.c":70:25)
#loc61 = loc("CWE511_Logic_Time_Bomb__rand_02.c":70:9)
#loc62 = loc("CWE511_Logic_Time_Bomb__rand_02.c":72:9)
#loc63 = loc("CWE511_Logic_Time_Bomb__rand_02.c":75:9)
#loc64 = loc("CWE511_Logic_Time_Bomb__rand_02.c":72:13)
#loc65 = loc("CWE511_Logic_Time_Bomb__rand_02.c":72:23)
#loc66 = loc("CWE511_Logic_Time_Bomb__rand_02.c":73:9)
#loc67 = loc("CWE511_Logic_Time_Bomb__rand_02.c":74:23)
#loc68 = loc("CWE511_Logic_Time_Bomb__rand_02.c":74:13)
#loc69 = loc(fused[#loc1, #loc2])
#loc70 = loc(fused[#loc3, #loc4])
#loc71 = loc(fused[#loc5, #loc6])
#loc72 = loc(fused[#loc7, #loc8])
#loc73 = loc(fused[#loc10, #loc11])
#loc74 = loc(fused[#loc12, #loc13])
#loc75 = loc(fused[#loc15, #loc13])
#loc76 = loc(fused[#loc19, #loc20])
#loc77 = loc(fused[#loc21, #loc22])
#loc78 = loc(fused[#loc23, #loc20])
#loc79 = loc(fused[#loc25, #loc26])
#loc80 = loc(fused[#loc27, #loc28])
#loc81 = loc(fused[#loc29, #loc30])
#loc82 = loc(fused[#loc31, #loc32])
#loc83 = loc(fused[#loc35, #loc36])
#loc84 = loc(fused[#loc37, #loc38])
#loc85 = loc(fused[#loc40, #loc41, #loc42, #loc38])
#loc86 = loc(fused[#loc47, #loc48])
#loc87 = loc(fused[#loc49, #loc50])
#loc88 = loc(fused[#loc51, #loc48])
#loc89 = loc(fused[#loc53, #loc54])
#loc90 = loc(fused[#loc55, #loc56])
#loc91 = loc(fused[#loc58, #loc56])
#loc92 = loc(fused[#loc62, #loc63])
#loc93 = loc(fused[#loc64, #loc65])
#loc94 = loc(fused[#loc66, #loc63])
