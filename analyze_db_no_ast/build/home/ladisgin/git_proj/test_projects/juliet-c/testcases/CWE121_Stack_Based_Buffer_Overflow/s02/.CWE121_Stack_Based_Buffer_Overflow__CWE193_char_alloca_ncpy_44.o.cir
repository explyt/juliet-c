!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc9 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_44.c":28:21)
#loc10 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_44.c":28:28)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_44.c":59:25)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_44.c":59:32)
#loc85 = loc(fused[#loc9, #loc10])
#loc99 = loc(fused[#loc48, #loc49])
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s02/CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_44.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @strncpy(!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc81)
  cir.func private  @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc82)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc83)
  cir.func internal private  @badSink(%arg0: !cir.ptr<!s8i> loc(fused[#loc9, #loc10])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc85)
    cir.store %arg0, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc11)
    cir.scope {
      %1 = cir.alloca !cir.array<!s8i x 11>, !cir.ptr<!cir.array<!s8i x 11>>, ["source"] {alignment = 1 : i64} loc(#loc87)
      %2 = cir.const #cir.const_array<"AAAAAAAAAA\00" : !cir.array<!s8i x 11>> : !cir.array<!s8i x 11> loc(#loc87)
      cir.store %2, %1 : !cir.array<!s8i x 11>, !cir.ptr<!cir.array<!s8i x 11>> loc(#loc87)
      %3 = cir.get_global @strncpy : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i)>> loc(#loc16)
      %4 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc17)
      %5 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 11>>), !cir.ptr<!s8i> loc(#loc18)
      %6 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc19)
      %7 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 11>>), !cir.ptr<!s8i> loc(#loc20)
      %8 = cir.call @strlen(%7) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc19)
      %9 = cir.const #cir.int<1> : !s32i loc(#loc21)
      %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc21)
      %11 = cir.binop(add, %8, %10) : !u64i loc(#loc88)
      %12 = cir.call @strncpy(%4, %5, %11) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc16)
      %13 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc22)
      cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc23)
    } loc(#loc86)
    cir.return loc(#loc8)
  } loc(#loc84)
  cir.func no_proto  @CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_44_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc90)
    %1 = cir.alloca !cir.ptr<!cir.func<!void (!cir.ptr<!s8i>)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!cir.ptr<!s8i>)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc91)
    %2 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc92)
    %3 = cir.get_global @badSink : !cir.ptr<!cir.func<!void (!cir.ptr<!s8i>)>> loc(#loc29)
    cir.store %3, %1 : !cir.ptr<!cir.func<!void (!cir.ptr<!s8i>)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!cir.ptr<!s8i>)>>> loc(#loc91)
    %4 = cir.const #cir.int<10> : !s32i loc(#loc31)
    %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc31)
    %6 = cir.const #cir.int<1> : !u64i loc(#loc31)
    %7 = cir.binop(mul, %5, %6) : !u64i loc(#loc31)
    %8 = cir.alloca !u8i, !cir.ptr<!u8i>, %7 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc31)
    %9 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc93)
    %10 = cir.cast(bitcast, %8 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc31)
    %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc31)
    cir.store %11, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc92)
    %12 = cir.const #cir.int<10> : !s32i loc(#loc33)
    %13 = cir.const #cir.int<1> : !s32i loc(#loc33)
    %14 = cir.binop(add, %12, %13) nsw : !s32i loc(#loc33)
    %15 = cir.cast(integral, %14 : !s32i), !u64i loc(#loc33)
    %16 = cir.const #cir.int<1> : !u64i loc(#loc33)
    %17 = cir.binop(mul, %15, %16) : !u64i loc(#loc33)
    %18 = cir.alloca !u8i, !cir.ptr<!u8i>, %17 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc33)
    %19 = cir.cast(bitcast, %18 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc33)
    %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc33)
    cir.store %20, %9 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc93)
    %21 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc34)
    cir.store %21, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc94)
    %22 = cir.const #cir.int<0> : !s32i loc(#loc36)
    %23 = cir.cast(integral, %22 : !s32i), !s8i loc(#loc36)
    %24 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc37)
    %25 = cir.const #cir.int<0> : !s32i loc(#loc38)
    %26 = cir.ptr_stride(%24 : !cir.ptr<!s8i>, %25 : !s32i), !cir.ptr<!s8i> loc(#loc39)
    cir.store %23, %26 : !s8i, !cir.ptr<!s8i> loc(#loc95)
    %27 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<!void (!cir.ptr<!s8i>)>>>, !cir.ptr<!cir.func<!void (!cir.ptr<!s8i>)>> loc(#loc40)
    %28 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc41)
    cir.call %27(%28) : (!cir.ptr<!cir.func<!void (!cir.ptr<!s8i>)>>, !cir.ptr<!s8i>) -> () loc(#loc40)
    cir.return loc(#loc25)
  } loc(#loc89)
  cir.func no_proto  @CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_44_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc97)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc44)
    cir.return loc(#loc43)
  } loc(#loc96)
  cir.func internal private  @goodG2BSink(%arg0: !cir.ptr<!s8i> loc(fused[#loc48, #loc49])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc99)
    cir.store %arg0, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc50)
    cir.scope {
      %1 = cir.alloca !cir.array<!s8i x 11>, !cir.ptr<!cir.array<!s8i x 11>>, ["source"] {alignment = 1 : i64} loc(#loc101)
      %2 = cir.const #cir.const_array<"AAAAAAAAAA\00" : !cir.array<!s8i x 11>> : !cir.array<!s8i x 11> loc(#loc101)
      cir.store %2, %1 : !cir.array<!s8i x 11>, !cir.ptr<!cir.array<!s8i x 11>> loc(#loc101)
      %3 = cir.get_global @strncpy : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i)>> loc(#loc55)
      %4 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc56)
      %5 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 11>>), !cir.ptr<!s8i> loc(#loc57)
      %6 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc58)
      %7 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 11>>), !cir.ptr<!s8i> loc(#loc59)
      %8 = cir.call @strlen(%7) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc58)
      %9 = cir.const #cir.int<1> : !s32i loc(#loc60)
      %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc60)
      %11 = cir.binop(add, %8, %10) : !u64i loc(#loc102)
      %12 = cir.call @strncpy(%4, %5, %11) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc55)
      %13 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc61)
      cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc62)
    } loc(#loc100)
    cir.return loc(#loc47)
  } loc(#loc98)
  cir.func no_proto internal private  @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc104)
    %1 = cir.alloca !cir.ptr<!cir.func<!void (!cir.ptr<!s8i>)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!cir.ptr<!s8i>)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc105)
    %2 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc106)
    %3 = cir.get_global @goodG2BSink : !cir.ptr<!cir.func<!void (!cir.ptr<!s8i>)>> loc(#loc68)
    cir.store %3, %1 : !cir.ptr<!cir.func<!void (!cir.ptr<!s8i>)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!cir.ptr<!s8i>)>>> loc(#loc105)
    %4 = cir.const #cir.int<10> : !s32i loc(#loc70)
    %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc70)
    %6 = cir.const #cir.int<1> : !u64i loc(#loc70)
    %7 = cir.binop(mul, %5, %6) : !u64i loc(#loc70)
    %8 = cir.alloca !u8i, !cir.ptr<!u8i>, %7 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc70)
    %9 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc107)
    %10 = cir.cast(bitcast, %8 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc70)
    %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc70)
    cir.store %11, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc106)
    %12 = cir.const #cir.int<10> : !s32i loc(#loc72)
    %13 = cir.const #cir.int<1> : !s32i loc(#loc72)
    %14 = cir.binop(add, %12, %13) nsw : !s32i loc(#loc72)
    %15 = cir.cast(integral, %14 : !s32i), !u64i loc(#loc72)
    %16 = cir.const #cir.int<1> : !u64i loc(#loc72)
    %17 = cir.binop(mul, %15, %16) : !u64i loc(#loc72)
    %18 = cir.alloca !u8i, !cir.ptr<!u8i>, %17 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc72)
    %19 = cir.cast(bitcast, %18 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc72)
    %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc72)
    cir.store %20, %9 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc107)
    %21 = cir.load %9 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc73)
    cir.store %21, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc108)
    %22 = cir.const #cir.int<0> : !s32i loc(#loc75)
    %23 = cir.cast(integral, %22 : !s32i), !s8i loc(#loc75)
    %24 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc76)
    %25 = cir.const #cir.int<0> : !s32i loc(#loc77)
    %26 = cir.ptr_stride(%24 : !cir.ptr<!s8i>, %25 : !s32i), !cir.ptr<!s8i> loc(#loc78)
    cir.store %23, %26 : !s8i, !cir.ptr<!s8i> loc(#loc109)
    %27 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<!void (!cir.ptr<!s8i>)>>>, !cir.ptr<!cir.func<!void (!cir.ptr<!s8i>)>> loc(#loc79)
    %28 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc80)
    cir.call %27(%28) : (!cir.ptr<!cir.func<!void (!cir.ptr<!s8i>)>>, !cir.ptr<!s8i>) -> () loc(#loc79)
    cir.return loc(#loc64)
  } loc(#loc103)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s02/CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_44.c":0:0)
#loc1 = loc("/usr/include/string.h":144:1)
#loc2 = loc("/usr/include/string.h":146:14)
#loc3 = loc("/usr/include/string.h":407:1)
#loc4 = loc("/usr/include/string.h":408:33)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc7 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_44.c":28:1)
#loc8 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_44.c":37:1)
#loc11 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_44.c":29:1)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_44.c":30:5)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_44.c":36:5)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_44.c":31:9)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_44.c":31:29)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_44.c":34:9)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_44.c":34:17)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_44.c":34:23)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_44.c":34:31)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_44.c":34:38)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_44.c":34:48)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_44.c":35:19)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_44.c":35:9)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_44.c":39:1)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_44.c":52:1)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_44.c":41:5)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_44.c":41:12)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_44.c":43:5)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_44.c":43:32)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_44.c":44:5)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_44.c":44:36)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_44.c":45:5)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_44.c":45:37)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_44.c":48:12)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_44.c":48:5)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_44.c":49:15)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_44.c":49:5)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_44.c":49:10)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_44.c":49:11)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_44.c":51:5)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_44.c":51:13)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_44.c":83:1)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_44.c":86:1)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_44.c":85:5)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_44.c":85:13)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_44.c":59:1)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_44.c":68:1)
#loc50 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_44.c":60:1)
#loc51 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_44.c":61:5)
#loc52 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_44.c":67:5)
#loc53 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_44.c":62:9)
#loc54 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_44.c":62:29)
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_44.c":65:9)
#loc56 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_44.c":65:17)
#loc57 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_44.c":65:23)
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_44.c":65:31)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_44.c":65:38)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_44.c":65:48)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_44.c":66:19)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_44.c":66:9)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_44.c":70:1)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_44.c":81:1)
#loc65 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_44.c":72:5)
#loc66 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_44.c":72:12)
#loc67 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_44.c":73:5)
#loc68 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_44.c":73:32)
#loc69 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_44.c":74:5)
#loc70 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_44.c":74:36)
#loc71 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_44.c":75:5)
#loc72 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_44.c":75:37)
#loc73 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_44.c":78:12)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_44.c":78:5)
#loc75 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_44.c":79:15)
#loc76 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_44.c":79:5)
#loc77 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_44.c":79:10)
#loc78 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_44.c":79:11)
#loc79 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_44.c":80:5)
#loc80 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_44.c":80:13)
#loc81 = loc(fused[#loc1, #loc2])
#loc82 = loc(fused[#loc3, #loc4])
#loc83 = loc(fused[#loc5, #loc6])
#loc84 = loc(fused[#loc7, #loc8])
#loc86 = loc(fused[#loc12, #loc13])
#loc87 = loc(fused[#loc14, #loc15])
#loc88 = loc(fused[#loc19, #loc21])
#loc89 = loc(fused[#loc24, #loc25])
#loc90 = loc(fused[#loc26, #loc27])
#loc91 = loc(fused[#loc28, #loc29])
#loc92 = loc(fused[#loc30, #loc31])
#loc93 = loc(fused[#loc32, #loc33])
#loc94 = loc(fused[#loc35, #loc34])
#loc95 = loc(fused[#loc37, #loc36])
#loc96 = loc(fused[#loc42, #loc43])
#loc97 = loc(fused[#loc44, #loc45])
#loc98 = loc(fused[#loc46, #loc47])
#loc100 = loc(fused[#loc51, #loc52])
#loc101 = loc(fused[#loc53, #loc54])
#loc102 = loc(fused[#loc58, #loc60])
#loc103 = loc(fused[#loc63, #loc64])
#loc104 = loc(fused[#loc65, #loc66])
#loc105 = loc(fused[#loc67, #loc68])
#loc106 = loc(fused[#loc69, #loc70])
#loc107 = loc(fused[#loc71, #loc72])
#loc108 = loc(fused[#loc74, #loc73])
#loc109 = loc(fused[#loc76, #loc75])
