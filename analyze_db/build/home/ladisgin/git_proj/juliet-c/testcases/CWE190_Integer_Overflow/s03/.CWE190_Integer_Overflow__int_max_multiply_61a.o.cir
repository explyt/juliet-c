!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_max_multiply_61a.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i32 = dense<32> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @CWE190_Integer_Overflow__int_max_multiply_61b_badSource(!s32i) -> !s32i loc(#loc88)
  cir.func private @printIntLine(!s32i) loc(#loc89)
  cir.func no_proto @CWE190_Integer_Overflow__int_max_multiply_61_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc91)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc92)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc11)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc93)
    %3 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc13)
    %4 = cir.call @CWE190_Integer_Overflow__int_max_multiply_61b_badSource(%3) : (!s32i) -> !s32i loc(#loc14)
    cir.store %4, %1 : !s32i, !cir.ptr<!s32i> loc(#loc94)
    cir.br ^bb1 loc(#loc95)
  ^bb1:  // pred: ^bb0
    %5 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc19)
    %6 = cir.const #cir.int<0> : !s32i loc(#loc20)
    %7 = cir.cmp(gt, %5, %6) : !s32i, !cir.bool loc(#loc96)
    cir.brcond %7 ^bb2, ^bb3 loc(#loc97)
  ^bb2:  // pred: ^bb1
    %8 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc22)
    %9 = cir.const #cir.int<2> : !s32i loc(#loc8)
    %10 = cir.binop(mul, %8, %9) nsw : !s32i loc(#loc22)
    cir.store %10, %0 : !s32i, !cir.ptr<!s32i> loc(#loc91)
    %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc23)
    cir.call @printIntLine(%11) : (!s32i) -> () loc(#loc24)
    cir.br ^bb3 loc(#loc18)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc18)
  ^bb4:  // pred: ^bb3
    cir.return loc(#loc6)
  } loc(#loc90)
  cir.func no_proto @CWE190_Integer_Overflow__int_max_multiply_61_good() extra(#fn_attr) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc99)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc27)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc100)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc29)
    cir.return loc(#loc26)
  } loc(#loc98)
  cir.func private @CWE190_Integer_Overflow__int_max_multiply_61b_goodG2BSource(!s32i) -> !s32i loc(#loc101)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc103)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc104)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc39)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc105)
    %3 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc41)
    %4 = cir.call @CWE190_Integer_Overflow__int_max_multiply_61b_goodG2BSource(%3) : (!s32i) -> !s32i loc(#loc42)
    cir.store %4, %1 : !s32i, !cir.ptr<!s32i> loc(#loc106)
    cir.br ^bb1 loc(#loc107)
  ^bb1:  // pred: ^bb0
    %5 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc47)
    %6 = cir.const #cir.int<0> : !s32i loc(#loc48)
    %7 = cir.cmp(gt, %5, %6) : !s32i, !cir.bool loc(#loc108)
    cir.brcond %7 ^bb2, ^bb3 loc(#loc109)
  ^bb2:  // pred: ^bb1
    %8 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc50)
    %9 = cir.const #cir.int<2> : !s32i loc(#loc36)
    %10 = cir.binop(mul, %8, %9) nsw : !s32i loc(#loc50)
    cir.store %10, %0 : !s32i, !cir.ptr<!s32i> loc(#loc103)
    %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc51)
    cir.call @printIntLine(%11) : (!s32i) -> () loc(#loc52)
    cir.br ^bb3 loc(#loc46)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc46)
  ^bb4:  // pred: ^bb3
    cir.return loc(#loc34)
  } loc(#loc102)
  cir.func private @CWE190_Integer_Overflow__int_max_multiply_61b_goodB2GSource(!s32i) -> !s32i loc(#loc110)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc111)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc57)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc113)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc114)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc64)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc115)
    %3 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc66)
    %4 = cir.call @CWE190_Integer_Overflow__int_max_multiply_61b_goodB2GSource(%3) : (!s32i) -> !s32i loc(#loc67)
    cir.store %4, %1 : !s32i, !cir.ptr<!s32i> loc(#loc116)
    cir.br ^bb1 loc(#loc117)
  ^bb1:  // pred: ^bb0
    %5 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc72)
    %6 = cir.const #cir.int<0> : !s32i loc(#loc73)
    %7 = cir.cmp(gt, %5, %6) : !s32i, !cir.bool loc(#loc118)
    cir.brcond %7 ^bb2, ^bb8 loc(#loc119)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc120)
  ^bb3:  // pred: ^bb2
    %8 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc77)
    %9 = cir.const #cir.int<2147483647> : !s32i loc(#loc78)
    %10 = cir.const #cir.int<2> : !s32i loc(#loc79)
    %11 = cir.binop(div, %9, %10) : !s32i loc(#loc121)
    %12 = cir.cmp(lt, %8, %11) : !s32i, !cir.bool loc(#loc122)
    cir.brcond %12 ^bb4, ^bb5 loc(#loc123)
  ^bb4:  // pred: ^bb3
    %13 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc84)
    %14 = cir.const #cir.int<2> : !s32i loc(#loc61)
    %15 = cir.binop(mul, %13, %14) nsw : !s32i loc(#loc84)
    cir.store %15, %0 : !s32i, !cir.ptr<!s32i> loc(#loc113)
    %16 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc85)
    cir.call @printIntLine(%16) : (!s32i) -> () loc(#loc86)
    cir.br ^bb6 loc(#loc82)
  ^bb5:  // pred: ^bb3
    %17 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc57)
    %18 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc57)
    cir.call @printLine(%18) : (!cir.ptr<!s8i>) -> () loc(#loc87)
    cir.br ^bb6 loc(#loc76)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc76)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc71)
  ^bb8:  // 2 preds: ^bb1, ^bb7
    cir.br ^bb9 loc(#loc71)
  ^bb9:  // pred: ^bb8
    cir.return loc(#loc59)
  } loc(#loc112)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_max_multiply_61a.c":0:0)
#loc1 = loc("CWE190_Integer_Overflow__int_max_multiply_61a.c":23:1)
#loc2 = loc("CWE190_Integer_Overflow__int_max_multiply_61a.c":23:69)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc5 = loc("CWE190_Integer_Overflow__int_max_multiply_61a.c":25:1)
#loc6 = loc("CWE190_Integer_Overflow__int_max_multiply_61a.c":37:1)
#loc7 = loc("CWE190_Integer_Overflow__int_max_multiply_61a.c":34:9)
#loc8 = loc("CWE190_Integer_Overflow__int_max_multiply_61a.c":34:29)
#loc9 = loc("CWE190_Integer_Overflow__int_max_multiply_61a.c":27:5)
#loc10 = loc("CWE190_Integer_Overflow__int_max_multiply_61a.c":27:9)
#loc11 = loc("CWE190_Integer_Overflow__int_max_multiply_61a.c":29:12)
#loc12 = loc("CWE190_Integer_Overflow__int_max_multiply_61a.c":29:5)
#loc13 = loc("CWE190_Integer_Overflow__int_max_multiply_61a.c":30:68)
#loc14 = loc("CWE190_Integer_Overflow__int_max_multiply_61a.c":30:12)
#loc15 = loc("CWE190_Integer_Overflow__int_max_multiply_61a.c":30:5)
#loc16 = loc("CWE190_Integer_Overflow__int_max_multiply_61a.c":30:72)
#loc17 = loc("CWE190_Integer_Overflow__int_max_multiply_61a.c":31:5)
#loc18 = loc("CWE190_Integer_Overflow__int_max_multiply_61a.c":36:5)
#loc19 = loc("CWE190_Integer_Overflow__int_max_multiply_61a.c":31:8)
#loc20 = loc("CWE190_Integer_Overflow__int_max_multiply_61a.c":31:15)
#loc21 = loc("CWE190_Integer_Overflow__int_max_multiply_61a.c":32:5)
#loc22 = loc("CWE190_Integer_Overflow__int_max_multiply_61a.c":34:22)
#loc23 = loc("CWE190_Integer_Overflow__int_max_multiply_61a.c":35:22)
#loc24 = loc("CWE190_Integer_Overflow__int_max_multiply_61a.c":35:9)
#loc25 = loc("CWE190_Integer_Overflow__int_max_multiply_61a.c":84:1)
#loc26 = loc("CWE190_Integer_Overflow__int_max_multiply_61a.c":88:1)
#loc27 = loc("CWE190_Integer_Overflow__int_max_multiply_61a.c":86:5)
#loc28 = loc("CWE190_Integer_Overflow__int_max_multiply_61a.c":86:13)
#loc29 = loc("CWE190_Integer_Overflow__int_max_multiply_61a.c":87:5)
#loc30 = loc("CWE190_Integer_Overflow__int_max_multiply_61a.c":87:13)
#loc31 = loc("CWE190_Integer_Overflow__int_max_multiply_61a.c":44:1)
#loc32 = loc("CWE190_Integer_Overflow__int_max_multiply_61a.c":44:73)
#loc33 = loc("CWE190_Integer_Overflow__int_max_multiply_61a.c":46:1)
#loc34 = loc("CWE190_Integer_Overflow__int_max_multiply_61a.c":58:1)
#loc35 = loc("CWE190_Integer_Overflow__int_max_multiply_61a.c":55:9)
#loc36 = loc("CWE190_Integer_Overflow__int_max_multiply_61a.c":55:29)
#loc37 = loc("CWE190_Integer_Overflow__int_max_multiply_61a.c":48:5)
#loc38 = loc("CWE190_Integer_Overflow__int_max_multiply_61a.c":48:9)
#loc39 = loc("CWE190_Integer_Overflow__int_max_multiply_61a.c":50:12)
#loc40 = loc("CWE190_Integer_Overflow__int_max_multiply_61a.c":50:5)
#loc41 = loc("CWE190_Integer_Overflow__int_max_multiply_61a.c":51:72)
#loc42 = loc("CWE190_Integer_Overflow__int_max_multiply_61a.c":51:12)
#loc43 = loc("CWE190_Integer_Overflow__int_max_multiply_61a.c":51:5)
#loc44 = loc("CWE190_Integer_Overflow__int_max_multiply_61a.c":51:76)
#loc45 = loc("CWE190_Integer_Overflow__int_max_multiply_61a.c":52:5)
#loc46 = loc("CWE190_Integer_Overflow__int_max_multiply_61a.c":57:5)
#loc47 = loc("CWE190_Integer_Overflow__int_max_multiply_61a.c":52:8)
#loc48 = loc("CWE190_Integer_Overflow__int_max_multiply_61a.c":52:15)
#loc49 = loc("CWE190_Integer_Overflow__int_max_multiply_61a.c":53:5)
#loc50 = loc("CWE190_Integer_Overflow__int_max_multiply_61a.c":55:22)
#loc51 = loc("CWE190_Integer_Overflow__int_max_multiply_61a.c":56:22)
#loc52 = loc("CWE190_Integer_Overflow__int_max_multiply_61a.c":56:9)
#loc53 = loc("CWE190_Integer_Overflow__int_max_multiply_61a.c":61:1)
#loc54 = loc("CWE190_Integer_Overflow__int_max_multiply_61a.c":61:73)
#loc55 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc56 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc57 = loc("CWE190_Integer_Overflow__int_max_multiply_61a.c":79:23)
#loc58 = loc("CWE190_Integer_Overflow__int_max_multiply_61a.c":63:1)
#loc59 = loc("CWE190_Integer_Overflow__int_max_multiply_61a.c":82:1)
#loc60 = loc("CWE190_Integer_Overflow__int_max_multiply_61a.c":74:13)
#loc61 = loc("CWE190_Integer_Overflow__int_max_multiply_61a.c":74:33)
#loc62 = loc("CWE190_Integer_Overflow__int_max_multiply_61a.c":65:5)
#loc63 = loc("CWE190_Integer_Overflow__int_max_multiply_61a.c":65:9)
#loc64 = loc("CWE190_Integer_Overflow__int_max_multiply_61a.c":67:12)
#loc65 = loc("CWE190_Integer_Overflow__int_max_multiply_61a.c":67:5)
#loc66 = loc("CWE190_Integer_Overflow__int_max_multiply_61a.c":68:72)
#loc67 = loc("CWE190_Integer_Overflow__int_max_multiply_61a.c":68:12)
#loc68 = loc("CWE190_Integer_Overflow__int_max_multiply_61a.c":68:5)
#loc69 = loc("CWE190_Integer_Overflow__int_max_multiply_61a.c":68:76)
#loc70 = loc("CWE190_Integer_Overflow__int_max_multiply_61a.c":69:5)
#loc71 = loc("CWE190_Integer_Overflow__int_max_multiply_61a.c":81:5)
#loc72 = loc("CWE190_Integer_Overflow__int_max_multiply_61a.c":69:8)
#loc73 = loc("CWE190_Integer_Overflow__int_max_multiply_61a.c":69:15)
#loc74 = loc("CWE190_Integer_Overflow__int_max_multiply_61a.c":70:5)
#loc75 = loc("CWE190_Integer_Overflow__int_max_multiply_61a.c":72:9)
#loc76 = loc("CWE190_Integer_Overflow__int_max_multiply_61a.c":80:9)
#loc77 = loc("CWE190_Integer_Overflow__int_max_multiply_61a.c":72:13)
#loc78 = loc("CWE190_Integer_Overflow__int_max_multiply_61a.c":72:21)
#loc79 = loc("CWE190_Integer_Overflow__int_max_multiply_61a.c":72:29)
#loc80 = loc("CWE190_Integer_Overflow__int_max_multiply_61a.c":72:30)
#loc81 = loc("CWE190_Integer_Overflow__int_max_multiply_61a.c":73:9)
#loc82 = loc("CWE190_Integer_Overflow__int_max_multiply_61a.c":76:9)
#loc83 = loc("CWE190_Integer_Overflow__int_max_multiply_61a.c":78:9)
#loc84 = loc("CWE190_Integer_Overflow__int_max_multiply_61a.c":74:26)
#loc85 = loc("CWE190_Integer_Overflow__int_max_multiply_61a.c":75:26)
#loc86 = loc("CWE190_Integer_Overflow__int_max_multiply_61a.c":75:13)
#loc87 = loc("CWE190_Integer_Overflow__int_max_multiply_61a.c":79:13)
#loc88 = loc(fused[#loc1, #loc2])
#loc89 = loc(fused[#loc3, #loc4])
#loc90 = loc(fused[#loc5, #loc6])
#loc91 = loc(fused[#loc7, #loc8])
#loc92 = loc(fused[#loc9, #loc10])
#loc93 = loc(fused[#loc12, #loc11])
#loc94 = loc(fused[#loc15, #loc16])
#loc95 = loc(fused[#loc17, #loc18])
#loc96 = loc(fused[#loc19, #loc20])
#loc97 = loc(fused[#loc21, #loc18])
#loc98 = loc(fused[#loc25, #loc26])
#loc99 = loc(fused[#loc27, #loc28])
#loc100 = loc(fused[#loc29, #loc30])
#loc101 = loc(fused[#loc31, #loc32])
#loc102 = loc(fused[#loc33, #loc34])
#loc103 = loc(fused[#loc35, #loc36])
#loc104 = loc(fused[#loc37, #loc38])
#loc105 = loc(fused[#loc40, #loc39])
#loc106 = loc(fused[#loc43, #loc44])
#loc107 = loc(fused[#loc45, #loc46])
#loc108 = loc(fused[#loc47, #loc48])
#loc109 = loc(fused[#loc49, #loc46])
#loc110 = loc(fused[#loc53, #loc54])
#loc111 = loc(fused[#loc55, #loc56])
#loc112 = loc(fused[#loc58, #loc59])
#loc113 = loc(fused[#loc60, #loc61])
#loc114 = loc(fused[#loc62, #loc63])
#loc115 = loc(fused[#loc65, #loc64])
#loc116 = loc(fused[#loc68, #loc69])
#loc117 = loc(fused[#loc70, #loc71])
#loc118 = loc(fused[#loc72, #loc73])
#loc119 = loc(fused[#loc74, #loc71])
#loc120 = loc(fused[#loc75, #loc76])
#loc121 = loc(fused[#loc78, #loc79])
#loc122 = loc(fused[#loc77, #loc80])
#loc123 = loc(fused[#loc81, #loc82, #loc83, #loc76])
