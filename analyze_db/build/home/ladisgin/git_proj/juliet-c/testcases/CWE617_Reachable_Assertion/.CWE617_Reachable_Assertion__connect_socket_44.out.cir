!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc6 = loc("CWE617_Reachable_Assertion__connect_socket_44.c":47:21)
#loc7 = loc("CWE617_Reachable_Assertion__connect_socket_44.c":47:25)
#loc138 = loc("CWE617_Reachable_Assertion__connect_socket_44.c":156:10)
#loc139 = loc("CWE617_Reachable_Assertion__connect_socket_44.c":156:14)
#loc140 = loc("CWE617_Reachable_Assertion__connect_socket_44.c":156:20)
#loc141 = loc("CWE617_Reachable_Assertion__connect_socket_44.c":156:32)
#loc159 = loc("CWE617_Reachable_Assertion__connect_socket_44.c":125:25)
#loc160 = loc("CWE617_Reachable_Assertion__connect_socket_44.c":125:29)
#true = #cir.bool<true> : !cir.bool
!ty_in_addr = !cir.struct<struct "in_addr" {!u32i} #cir.record.decl.ast>
#loc178 = loc(fused[#loc6, #loc7])
#loc228 = loc(fused[#loc138, #loc139])
#loc229 = loc(fused[#loc140, #loc141])
#loc234 = loc(fused[#loc159, #loc160])
!ty_sockaddr = !cir.struct<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.struct<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE617_Reachable_Assertion/CWE617_Reachable_Assertion__connect_socket_44.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @__assert_fail(!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) extra(#fn_attr) loc(#loc176)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"data > ASSERT_VALUE\00" : !cir.array<!s8i x 20>> : !cir.array<!s8i x 20> {alignment = 1 : i64} loc(#loc3)
  cir.global "private" constant cir_private dsolocal @".str.6" = #cir.const_array<"CWE617_Reachable_Assertion__connect_socket_44.c\00" : !cir.array<!s8i x 48>> : !cir.array<!s8i x 48> {alignment = 1 : i64} loc(#loc3)
  cir.global "private" constant cir_private dsolocal @".str.7" = #cir.const_array<"void badSink(int)\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc3)
  cir.func internal private @badSink(%arg0: !s32i loc(fused[#loc6, #loc7])) extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc178)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc8)
    %1 = cir.const #cir.int<4> : !u64i loc(#loc3)
    cir.scope {
      cir.scope {
        %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc3)
        %3 = cir.const #cir.int<5> : !s32i loc(#loc3)
        %4 = cir.cmp(gt, %2, %3) : !s32i, !cir.bool loc(#loc3)
        cir.if %4 {
        } else {
          %5 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 20>> loc(#loc3)
          %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc3)
          %7 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 48>> loc(#loc3)
          %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 48>>), !cir.ptr<!s8i> loc(#loc3)
          %9 = cir.const #cir.int<50> : !s32i loc(#loc3)
          %10 = cir.cast(integral, %9 : !s32i), !u32i loc(#loc3)
          %11 = cir.get_global @".str.7" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc3)
          %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc3)
          cir.call @__assert_fail(%6, %8, %10, %12) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) -> () extra(#fn_attr) loc(#loc3)
        } loc(#loc3)
      } loc(#loc3)
    } loc(#loc3)
    cir.return loc(#loc5)
  } loc(#loc177)
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc179)
  cir.func private @inet_addr(!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc180)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"127.0.0.1\00" : !cir.array<!s8i x 10>> : !cir.array<!s8i x 10> {alignment = 1 : i64} loc(#loc13)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc181)
  cir.func private @connect(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc182)
  cir.func private @recv(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc183)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc184)
  cir.func private @close(!s32i) -> !s32i loc(#loc185)
  cir.func no_proto @CWE617_Reachable_Assertion__connect_socket_44_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc187)
    %1 = cir.alloca !cir.ptr<!cir.func<!void (!s32i)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!s32i)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc188)
    %2 = cir.get_global @badSink : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc29)
    cir.store %2, %1 : !cir.ptr<!cir.func<!void (!s32i)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!s32i)>>> loc(#loc188)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc30)
    %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc31)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc189)
    cir.scope {
      %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc191)
      %8 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc192)
      %9 = cir.alloca !s32i, !cir.ptr<!s32i>, ["connectSocket", init] {alignment = 4 : i64} loc(#loc193)
      %10 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc194)
      %11 = cir.const #cir.int<1> : !s32i loc(#loc40)
      %12 = cir.unary(minus, %11) : !s32i, !s32i loc(#loc40)
      cir.store %12, %9 : !s32i, !cir.ptr<!s32i> loc(#loc193)
      cir.scope {
        cir.do {
          %13 = cir.const #cir.int<2> : !s32i loc(#loc45)
          %14 = cir.const #cir.int<1> : !s32i loc(#loc46)
          %15 = cir.const #cir.int<6> : !s32i loc(#loc47)
          %16 = cir.call @socket(%13, %14, %15) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc48)
          cir.store %16, %9 : !s32i, !cir.ptr<!s32i> loc(#loc196)
          cir.scope {
            %55 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc53)
            %56 = cir.const #cir.int<1> : !s32i loc(#loc54)
            %57 = cir.unary(minus, %56) : !s32i, !s32i loc(#loc54)
            %58 = cir.cmp(eq, %55, %57) : !s32i, !cir.bool loc(#loc198)
            cir.if %58 {
              cir.break loc(#loc56)
            } loc(#loc199)
          } loc(#loc197)
          %17 = cir.cast(bitcast, %8 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc200)
          %18 = cir.const #cir.int<0> : !s32i loc(#loc59)
          %19 = cir.const #cir.int<16> : !u64i loc(#loc201)
          cir.libc.memset %19 bytes from %17 set to %18 : !cir.ptr<!void>, !s32i, !u64i loc(#loc202)
          %20 = cir.const #cir.int<2> : !s32i loc(#loc64)
          %21 = cir.cast(integral, %20 : !s32i), !u16i loc(#loc64)
          %22 = cir.get_member %8[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc65)
          cir.store %21, %22 : !u16i, !cir.ptr<!u16i> loc(#loc203)
          %23 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 10>> loc(#loc13)
          %24 = cir.cast(array_to_ptrdecay, %23 : !cir.ptr<!cir.array<!s8i x 10>>), !cir.ptr<!s8i> loc(#loc13)
          %25 = cir.call @inet_addr(%24) : (!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc67)
          %26 = cir.get_member %8[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc68)
          %27 = cir.get_member %26[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc69)
          cir.store %25, %27 : !u32i, !cir.ptr<!u32i> loc(#loc204)
          %28 = cir.const #cir.int<27015> : !s32i loc(#loc72)
          %29 = cir.cast(integral, %28 : !s32i), !u16i loc(#loc72)
          %30 = cir.call @htons(%29) : (!u16i) -> !u16i extra(#fn_attr) loc(#loc73)
          %31 = cir.get_member %8[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc74)
          cir.store %30, %31 : !u16i, !cir.ptr<!u16i> loc(#loc205)
          cir.scope {
            %55 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc79)
            %56 = cir.cast(bitcast, %8 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc207)
            %57 = cir.const #cir.int<16> : !u64i loc(#loc208)
            %58 = cir.cast(integral, %57 : !u64i), !u32i loc(#loc208)
            %59 = cir.call @connect(%55, %56, %58) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc84)
            %60 = cir.const #cir.int<1> : !s32i loc(#loc85)
            %61 = cir.unary(minus, %60) : !s32i, !s32i loc(#loc85)
            %62 = cir.cmp(eq, %59, %61) : !s32i, !cir.bool loc(#loc209)
            cir.if %62 {
              cir.break loc(#loc87)
            } loc(#loc210)
          } loc(#loc206)
          %32 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc88)
          %33 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc89)
          %34 = cir.cast(bitcast, %33 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc89)
          %35 = cir.const #cir.int<3> : !s32i loc(#loc90)
          %36 = cir.cast(integral, %35 : !s32i), !u64i loc(#loc90)
          %37 = cir.const #cir.int<4> : !u64i loc(#loc90)
          %38 = cir.binop(mul, %36, %37) : !u64i loc(#loc90)
          %39 = cir.const #cir.int<2> : !s32i loc(#loc90)
          %40 = cir.cast(integral, %39 : !s32i), !u64i loc(#loc90)
          %41 = cir.binop(add, %38, %40) : !u64i loc(#loc90)
          %42 = cir.const #cir.int<1> : !s32i loc(#loc91)
          %43 = cir.cast(integral, %42 : !s32i), !u64i loc(#loc91)
          %44 = cir.binop(sub, %41, %43) : !u64i loc(#loc211)
          %45 = cir.const #cir.int<0> : !s32i loc(#loc92)
          %46 = cir.call @recv(%32, %34, %44, %45) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc93)
          %47 = cir.cast(integral, %46 : !s64i), !s32i loc(#loc93)
          cir.store %47, %7 : !s32i, !cir.ptr<!s32i> loc(#loc212)
          cir.scope {
            %55 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc98)
            %56 = cir.const #cir.int<1> : !s32i loc(#loc99)
            %57 = cir.unary(minus, %56) : !s32i, !s32i loc(#loc99)
            %58 = cir.cmp(eq, %55, %57) : !s32i, !cir.bool loc(#loc214)
            %59 = cir.ternary(%58, true {
              %60 = cir.const #true loc(#loc100)
              cir.yield %60 : !cir.bool loc(#loc100)
            }, false {
              %60 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc101)
              %61 = cir.const #cir.int<0> : !s32i loc(#loc102)
              %62 = cir.cmp(eq, %60, %61) : !s32i, !cir.bool loc(#loc215)
              %63 = cir.ternary(%62, true {
                %64 = cir.const #true loc(#loc100)
                cir.yield %64 : !cir.bool loc(#loc100)
              }, false {
                %64 = cir.const #false loc(#loc100)
                cir.yield %64 : !cir.bool loc(#loc100)
              }) : (!cir.bool) -> !cir.bool loc(#loc100)
              cir.yield %63 : !cir.bool loc(#loc100)
            }) : (!cir.bool) -> !cir.bool loc(#loc100)
            cir.if %59 {
              cir.break loc(#loc104)
            } loc(#loc216)
          } loc(#loc213)
          %48 = cir.const #cir.int<0> : !s32i loc(#loc105)
          %49 = cir.cast(integral, %48 : !s32i), !s8i loc(#loc105)
          %50 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc106)
          %51 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc107)
          %52 = cir.ptr_stride(%51 : !cir.ptr<!s8i>, %50 : !s32i), !cir.ptr<!s8i> loc(#loc107)
          cir.store %49, %52 : !s8i, !cir.ptr<!s8i> loc(#loc217)
          %53 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc108)
          %54 = cir.call @atoi(%53) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc109)
          cir.store %54, %0 : !s32i, !cir.ptr<!s32i> loc(#loc218)
          cir.yield loc(#loc44)
        } while {
          %13 = cir.const #cir.int<0> : !s32i loc(#loc112)
          %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc112)
          cir.condition(%14) loc(#loc112)
        } loc(#loc195)
      } loc(#loc195)
      cir.scope {
        %13 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc115)
        %14 = cir.const #cir.int<1> : !s32i loc(#loc116)
        %15 = cir.unary(minus, %14) : !s32i, !s32i loc(#loc116)
        %16 = cir.cmp(ne, %13, %15) : !s32i, !cir.bool loc(#loc220)
        cir.if %16 {
          %17 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc118)
          %18 = cir.call @close(%17) : (!s32i) -> !s32i loc(#loc119)
        } loc(#loc221)
      } loc(#loc219)
    } loc(#loc190)
    %5 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<!void (!s32i)>>>, !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc120)
    %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc121)
    cir.call %5(%6) : (!cir.ptr<!cir.func<!void (!s32i)>>, !s32i) -> () loc(#loc120)
    cir.return loc(#loc25)
  } loc(#loc186)
  cir.func no_proto @CWE617_Reachable_Assertion__connect_socket_44_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc223)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc124)
    cir.return loc(#loc123)
  } loc(#loc222)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc224)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc225)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc226)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc132)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc133)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc134)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc135)
  cir.func @main(%arg0: !s32i loc(fused[#loc138, #loc139]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc140, #loc141])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc228)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc229)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc137)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc142)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc142)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc143)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc144)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc144)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc145)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc132)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc132)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc146)
    %8 = cir.get_global @CWE617_Reachable_Assertion__connect_socket_44_good : !cir.ptr<!cir.func<!void ()>> loc(#loc230)
    cir.call @CWE617_Reachable_Assertion__connect_socket_44_good() : () -> () loc(#loc147)
    %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc133)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc133)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc149)
    %11 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc134)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc134)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc150)
    %13 = cir.get_global @CWE617_Reachable_Assertion__connect_socket_44_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc231)
    cir.call @CWE617_Reachable_Assertion__connect_socket_44_bad() : () -> () loc(#loc151)
    %14 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc135)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc135)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc153)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc154)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc232)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc232)
    cir.return %17 : !s32i loc(#loc232)
  } loc(#loc227)
  cir.global "private" constant cir_private dsolocal @".str.8" = #cir.const_array<"void goodG2BSink(int)\00" : !cir.array<!s8i x 22>> : !cir.array<!s8i x 22> {alignment = 1 : i64} loc(#loc156)
  cir.func internal private @goodG2BSink(%arg0: !s32i loc(fused[#loc159, #loc160])) extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc234)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc161)
    %1 = cir.const #cir.int<4> : !u64i loc(#loc156)
    cir.scope {
      cir.scope {
        %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc156)
        %3 = cir.const #cir.int<5> : !s32i loc(#loc156)
        %4 = cir.cmp(gt, %2, %3) : !s32i, !cir.bool loc(#loc156)
        cir.if %4 {
        } else {
          %5 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 20>> loc(#loc156)
          %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc156)
          %7 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 48>> loc(#loc156)
          %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 48>>), !cir.ptr<!s8i> loc(#loc156)
          %9 = cir.const #cir.int<128> : !s32i loc(#loc156)
          %10 = cir.cast(integral, %9 : !s32i), !u32i loc(#loc156)
          %11 = cir.get_global @".str.8" : !cir.ptr<!cir.array<!s8i x 22>> loc(#loc156)
          %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 22>>), !cir.ptr<!s8i> loc(#loc156)
          cir.call @__assert_fail(%6, %8, %10, %12) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) -> () extra(#fn_attr) loc(#loc156)
        } loc(#loc156)
      } loc(#loc156)
    } loc(#loc156)
    cir.return loc(#loc158)
  } loc(#loc233)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc236)
    %1 = cir.alloca !cir.ptr<!cir.func<!void (!s32i)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!s32i)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc237)
    %2 = cir.get_global @goodG2BSink : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc167)
    cir.store %2, %1 : !cir.ptr<!cir.func<!void (!s32i)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!s32i)>>> loc(#loc237)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc168)
    %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc169)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc238)
    %5 = cir.const #cir.int<5> : !s32i loc(#loc171)
    %6 = cir.const #cir.int<1> : !s32i loc(#loc172)
    %7 = cir.binop(add, %5, %6) nsw : !s32i loc(#loc171)
    cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc239)
    %8 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<!void (!s32i)>>>, !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc174)
    %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc175)
    cir.call %8(%9) : (!cir.ptr<!cir.func<!void (!s32i)>>, !s32i) -> () loc(#loc174)
    cir.return loc(#loc163)
  } loc(#loc235)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE617_Reachable_Assertion/CWE617_Reachable_Assertion__connect_socket_44.c":0:0)
#loc1 = loc("/usr/include/assert.h":67:1)
#loc2 = loc("/usr/include/assert.h":69:43)
#loc3 = loc("CWE617_Reachable_Assertion__connect_socket_44.c":50:5)
#loc4 = loc("CWE617_Reachable_Assertion__connect_socket_44.c":47:1)
#loc5 = loc("CWE617_Reachable_Assertion__connect_socket_44.c":51:1)
#loc8 = loc("CWE617_Reachable_Assertion__connect_socket_44.c":48:1)
#loc9 = loc("/usr/include/sys/socket.h":102:1)
#loc10 = loc("/usr/include/sys/socket.h":102:62)
#loc11 = loc("/usr/include/arpa/inet.h":34:1)
#loc12 = loc("/usr/include/arpa/inet.h":34:47)
#loc13 = loc("CWE617_Reachable_Assertion__connect_socket_44.c":86:49)
#loc14 = loc("/usr/include/netinet/in.h":404:1)
#loc15 = loc("/usr/include/netinet/in.h":405:40)
#loc16 = loc("/usr/include/sys/socket.h":126:1)
#loc17 = loc("/usr/include/sys/socket.h":126:75)
#loc18 = loc("/usr/include/sys/socket.h":145:1)
#loc19 = loc("/usr/include/sys/socket.h":145:68)
#loc20 = loc("/usr/include/stdlib.h":105:1)
#loc21 = loc("/usr/include/stdlib.h":106:33)
#loc22 = loc("/usr/include/unistd.h":358:1)
#loc23 = loc("/usr/include/unistd.h":358:27)
#loc24 = loc("CWE617_Reachable_Assertion__connect_socket_44.c":53:1)
#loc25 = loc("CWE617_Reachable_Assertion__connect_socket_44.c":118:1)
#loc26 = loc("CWE617_Reachable_Assertion__connect_socket_44.c":55:5)
#loc27 = loc("CWE617_Reachable_Assertion__connect_socket_44.c":55:9)
#loc28 = loc("CWE617_Reachable_Assertion__connect_socket_44.c":57:5)
#loc29 = loc("CWE617_Reachable_Assertion__connect_socket_44.c":57:29)
#loc30 = loc("CWE617_Reachable_Assertion__connect_socket_44.c":59:13)
#loc31 = loc("CWE617_Reachable_Assertion__connect_socket_44.c":59:12)
#loc32 = loc("CWE617_Reachable_Assertion__connect_socket_44.c":59:5)
#loc33 = loc("CWE617_Reachable_Assertion__connect_socket_44.c":60:5)
#loc34 = loc("CWE617_Reachable_Assertion__connect_socket_44.c":115:5)
#loc35 = loc("CWE617_Reachable_Assertion__connect_socket_44.c":65:9)
#loc36 = loc("CWE617_Reachable_Assertion__connect_socket_44.c":65:13)
#loc37 = loc("CWE617_Reachable_Assertion__connect_socket_44.c":66:9)
#loc38 = loc("CWE617_Reachable_Assertion__connect_socket_44.c":66:28)
#loc39 = loc("CWE617_Reachable_Assertion__connect_socket_44.c":67:9)
#loc40 = loc("CWE617_Reachable_Assertion__connect_socket_44.c":67:32)
#loc41 = loc("CWE617_Reachable_Assertion__connect_socket_44.c":68:9)
#loc42 = loc("CWE617_Reachable_Assertion__connect_socket_44.c":68:41)
#loc43 = loc("CWE617_Reachable_Assertion__connect_socket_44.c":69:9)
#loc44 = loc("CWE617_Reachable_Assertion__connect_socket_44.c":104:17)
#loc45 = loc("CWE617_Reachable_Assertion__connect_socket_44.c":79:36)
#loc46 = loc("CWE617_Reachable_Assertion__connect_socket_44.c":79:45)
#loc47 = loc("CWE617_Reachable_Assertion__connect_socket_44.c":79:58)
#loc48 = loc("CWE617_Reachable_Assertion__connect_socket_44.c":79:29)
#loc49 = loc("CWE617_Reachable_Assertion__connect_socket_44.c":79:13)
#loc50 = loc("CWE617_Reachable_Assertion__connect_socket_44.c":79:69)
#loc51 = loc("CWE617_Reachable_Assertion__connect_socket_44.c":80:13)
#loc52 = loc("CWE617_Reachable_Assertion__connect_socket_44.c":83:13)
#loc53 = loc("CWE617_Reachable_Assertion__connect_socket_44.c":80:17)
#loc54 = loc("CWE617_Reachable_Assertion__connect_socket_44.c":80:34)
#loc55 = loc("CWE617_Reachable_Assertion__connect_socket_44.c":81:13)
#loc56 = loc("CWE617_Reachable_Assertion__connect_socket_44.c":82:17)
#loc57 = loc("CWE617_Reachable_Assertion__connect_socket_44.c":84:20)
#loc58 = loc("CWE617_Reachable_Assertion__connect_socket_44.c":84:21)
#loc59 = loc("CWE617_Reachable_Assertion__connect_socket_44.c":84:30)
#loc60 = loc("CWE617_Reachable_Assertion__connect_socket_44.c":84:33)
#loc61 = loc("CWE617_Reachable_Assertion__connect_socket_44.c":84:47)
#loc62 = loc("CWE617_Reachable_Assertion__connect_socket_44.c":84:13)
#loc63 = loc("CWE617_Reachable_Assertion__connect_socket_44.c":84:48)
#loc64 = loc("CWE617_Reachable_Assertion__connect_socket_44.c":85:34)
#loc65 = loc("/usr/include/netinet/in.h":249:5)
#loc66 = loc("CWE617_Reachable_Assertion__connect_socket_44.c":85:13)
#loc67 = loc("CWE617_Reachable_Assertion__connect_socket_44.c":86:39)
#loc68 = loc("/usr/include/netinet/in.h":251:20)
#loc69 = loc("/usr/include/netinet/in.h":33:15)
#loc70 = loc("CWE617_Reachable_Assertion__connect_socket_44.c":86:13)
#loc71 = loc("CWE617_Reachable_Assertion__connect_socket_44.c":86:59)
#loc72 = loc("CWE617_Reachable_Assertion__connect_socket_44.c":87:38)
#loc73 = loc("CWE617_Reachable_Assertion__connect_socket_44.c":87:32)
#loc74 = loc("/usr/include/netinet/in.h":250:15)
#loc75 = loc("CWE617_Reachable_Assertion__connect_socket_44.c":87:13)
#loc76 = loc("CWE617_Reachable_Assertion__connect_socket_44.c":87:46)
#loc77 = loc("CWE617_Reachable_Assertion__connect_socket_44.c":88:13)
#loc78 = loc("CWE617_Reachable_Assertion__connect_socket_44.c":91:13)
#loc79 = loc("CWE617_Reachable_Assertion__connect_socket_44.c":88:25)
#loc80 = loc("CWE617_Reachable_Assertion__connect_socket_44.c":88:58)
#loc81 = loc("CWE617_Reachable_Assertion__connect_socket_44.c":88:59)
#loc82 = loc("CWE617_Reachable_Assertion__connect_socket_44.c":88:68)
#loc83 = loc("CWE617_Reachable_Assertion__connect_socket_44.c":88:82)
#loc84 = loc("CWE617_Reachable_Assertion__connect_socket_44.c":88:17)
#loc85 = loc("CWE617_Reachable_Assertion__connect_socket_44.c":88:88)
#loc86 = loc("CWE617_Reachable_Assertion__connect_socket_44.c":89:13)
#loc87 = loc("CWE617_Reachable_Assertion__connect_socket_44.c":90:17)
#loc88 = loc("CWE617_Reachable_Assertion__connect_socket_44.c":94:31)
#loc89 = loc("CWE617_Reachable_Assertion__connect_socket_44.c":94:46)
#loc90 = loc("CWE617_Reachable_Assertion__connect_socket_44.c":94:59)
#loc91 = loc("CWE617_Reachable_Assertion__connect_socket_44.c":94:77)
#loc92 = loc("CWE617_Reachable_Assertion__connect_socket_44.c":94:80)
#loc93 = loc("CWE617_Reachable_Assertion__connect_socket_44.c":94:26)
#loc94 = loc("CWE617_Reachable_Assertion__connect_socket_44.c":94:13)
#loc95 = loc("CWE617_Reachable_Assertion__connect_socket_44.c":94:81)
#loc96 = loc("CWE617_Reachable_Assertion__connect_socket_44.c":95:13)
#loc97 = loc("CWE617_Reachable_Assertion__connect_socket_44.c":98:13)
#loc98 = loc("CWE617_Reachable_Assertion__connect_socket_44.c":95:17)
#loc99 = loc("CWE617_Reachable_Assertion__connect_socket_44.c":95:31)
#loc100 = loc("CWE617_Reachable_Assertion__connect_socket_44.c":95:44)
#loc101 = loc("CWE617_Reachable_Assertion__connect_socket_44.c":95:47)
#loc102 = loc("CWE617_Reachable_Assertion__connect_socket_44.c":95:61)
#loc103 = loc("CWE617_Reachable_Assertion__connect_socket_44.c":96:13)
#loc104 = loc("CWE617_Reachable_Assertion__connect_socket_44.c":97:17)
#loc105 = loc("CWE617_Reachable_Assertion__connect_socket_44.c":100:39)
#loc106 = loc("CWE617_Reachable_Assertion__connect_socket_44.c":100:25)
#loc107 = loc("CWE617_Reachable_Assertion__connect_socket_44.c":100:13)
#loc108 = loc("CWE617_Reachable_Assertion__connect_socket_44.c":102:25)
#loc109 = loc("CWE617_Reachable_Assertion__connect_socket_44.c":102:20)
#loc110 = loc("CWE617_Reachable_Assertion__connect_socket_44.c":102:13)
#loc111 = loc("CWE617_Reachable_Assertion__connect_socket_44.c":102:36)
#loc112 = loc("CWE617_Reachable_Assertion__connect_socket_44.c":104:16)
#loc113 = loc("CWE617_Reachable_Assertion__connect_socket_44.c":105:9)
#loc114 = loc("CWE617_Reachable_Assertion__connect_socket_44.c":108:9)
#loc115 = loc("CWE617_Reachable_Assertion__connect_socket_44.c":105:13)
#loc116 = loc("CWE617_Reachable_Assertion__connect_socket_44.c":105:30)
#loc117 = loc("CWE617_Reachable_Assertion__connect_socket_44.c":106:9)
#loc118 = loc("CWE617_Reachable_Assertion__connect_socket_44.c":107:26)
#loc119 = loc("CWE617_Reachable_Assertion__connect_socket_44.c":107:13)
#loc120 = loc("CWE617_Reachable_Assertion__connect_socket_44.c":117:5)
#loc121 = loc("CWE617_Reachable_Assertion__connect_socket_44.c":117:13)
#loc122 = loc("CWE617_Reachable_Assertion__connect_socket_44.c":142:1)
#loc123 = loc("CWE617_Reachable_Assertion__connect_socket_44.c":145:1)
#loc124 = loc("CWE617_Reachable_Assertion__connect_socket_44.c":144:5)
#loc125 = loc("CWE617_Reachable_Assertion__connect_socket_44.c":144:13)
#loc126 = loc("/usr/include/stdlib.h":575:1)
#loc127 = loc("/usr/include/stdlib.h":575:41)
#loc128 = loc("/usr/include/time.h":76:1)
#loc129 = loc("/usr/include/time.h":76:38)
#loc130 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc131 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc132 = loc("CWE617_Reachable_Assertion__connect_socket_44.c":161:15)
#loc133 = loc("CWE617_Reachable_Assertion__connect_socket_44.c":163:15)
#loc134 = loc("CWE617_Reachable_Assertion__connect_socket_44.c":166:15)
#loc135 = loc("CWE617_Reachable_Assertion__connect_socket_44.c":168:15)
#loc136 = loc("CWE617_Reachable_Assertion__connect_socket_44.c":156:1)
#loc137 = loc("CWE617_Reachable_Assertion__connect_socket_44.c":171:1)
#loc142 = loc("CWE617_Reachable_Assertion__connect_socket_44.c":157:1)
#loc143 = loc("CWE617_Reachable_Assertion__connect_socket_44.c":159:27)
#loc144 = loc("CWE617_Reachable_Assertion__connect_socket_44.c":159:22)
#loc145 = loc("CWE617_Reachable_Assertion__connect_socket_44.c":159:5)
#loc146 = loc("CWE617_Reachable_Assertion__connect_socket_44.c":161:5)
#loc147 = loc("CWE617_Reachable_Assertion__connect_socket_44.c":162:5)
#loc148 = loc("CWE617_Reachable_Assertion__connect_socket_44.c":162:56)
#loc149 = loc("CWE617_Reachable_Assertion__connect_socket_44.c":163:5)
#loc150 = loc("CWE617_Reachable_Assertion__connect_socket_44.c":166:5)
#loc151 = loc("CWE617_Reachable_Assertion__connect_socket_44.c":167:5)
#loc152 = loc("CWE617_Reachable_Assertion__connect_socket_44.c":167:55)
#loc153 = loc("CWE617_Reachable_Assertion__connect_socket_44.c":168:5)
#loc154 = loc("CWE617_Reachable_Assertion__connect_socket_44.c":170:12)
#loc155 = loc("CWE617_Reachable_Assertion__connect_socket_44.c":170:5)
#loc156 = loc("CWE617_Reachable_Assertion__connect_socket_44.c":128:5)
#loc157 = loc("CWE617_Reachable_Assertion__connect_socket_44.c":125:1)
#loc158 = loc("CWE617_Reachable_Assertion__connect_socket_44.c":129:1)
#loc161 = loc("CWE617_Reachable_Assertion__connect_socket_44.c":126:1)
#loc162 = loc("CWE617_Reachable_Assertion__connect_socket_44.c":131:1)
#loc163 = loc("CWE617_Reachable_Assertion__connect_socket_44.c":140:1)
#loc164 = loc("CWE617_Reachable_Assertion__connect_socket_44.c":133:5)
#loc165 = loc("CWE617_Reachable_Assertion__connect_socket_44.c":133:9)
#loc166 = loc("CWE617_Reachable_Assertion__connect_socket_44.c":134:5)
#loc167 = loc("CWE617_Reachable_Assertion__connect_socket_44.c":134:29)
#loc168 = loc("CWE617_Reachable_Assertion__connect_socket_44.c":136:13)
#loc169 = loc("CWE617_Reachable_Assertion__connect_socket_44.c":136:12)
#loc170 = loc("CWE617_Reachable_Assertion__connect_socket_44.c":136:5)
#loc171 = loc("CWE617_Reachable_Assertion__connect_socket_44.c":138:12)
#loc172 = loc("CWE617_Reachable_Assertion__connect_socket_44.c":138:25)
#loc173 = loc("CWE617_Reachable_Assertion__connect_socket_44.c":138:5)
#loc174 = loc("CWE617_Reachable_Assertion__connect_socket_44.c":139:5)
#loc175 = loc("CWE617_Reachable_Assertion__connect_socket_44.c":139:13)
#loc176 = loc(fused[#loc1, #loc2])
#loc177 = loc(fused[#loc4, #loc5])
#loc179 = loc(fused[#loc9, #loc10])
#loc180 = loc(fused[#loc11, #loc12])
#loc181 = loc(fused[#loc14, #loc15])
#loc182 = loc(fused[#loc16, #loc17])
#loc183 = loc(fused[#loc18, #loc19])
#loc184 = loc(fused[#loc20, #loc21])
#loc185 = loc(fused[#loc22, #loc23])
#loc186 = loc(fused[#loc24, #loc25])
#loc187 = loc(fused[#loc26, #loc27])
#loc188 = loc(fused[#loc28, #loc29])
#loc189 = loc(fused[#loc32, #loc30])
#loc190 = loc(fused[#loc33, #loc34])
#loc191 = loc(fused[#loc35, #loc36])
#loc192 = loc(fused[#loc37, #loc38])
#loc193 = loc(fused[#loc39, #loc40])
#loc194 = loc(fused[#loc41, #loc42])
#loc195 = loc(fused[#loc43, #loc44])
#loc196 = loc(fused[#loc49, #loc50])
#loc197 = loc(fused[#loc51, #loc52])
#loc198 = loc(fused[#loc53, #loc54])
#loc199 = loc(fused[#loc55, #loc52])
#loc200 = loc(fused[#loc57, #loc58])
#loc201 = loc(fused[#loc60, #loc61])
#loc202 = loc(fused[#loc62, #loc63])
#loc203 = loc(fused[#loc66, #loc64])
#loc204 = loc(fused[#loc70, #loc71])
#loc205 = loc(fused[#loc75, #loc76])
#loc206 = loc(fused[#loc77, #loc78])
#loc207 = loc(fused[#loc80, #loc81])
#loc208 = loc(fused[#loc82, #loc83])
#loc209 = loc(fused[#loc84, #loc85])
#loc210 = loc(fused[#loc86, #loc78])
#loc211 = loc(fused[#loc90, #loc91])
#loc212 = loc(fused[#loc94, #loc95])
#loc213 = loc(fused[#loc96, #loc97])
#loc214 = loc(fused[#loc98, #loc99])
#loc215 = loc(fused[#loc101, #loc102])
#loc216 = loc(fused[#loc103, #loc97])
#loc217 = loc(fused[#loc107, #loc105])
#loc218 = loc(fused[#loc110, #loc111])
#loc219 = loc(fused[#loc113, #loc114])
#loc220 = loc(fused[#loc115, #loc116])
#loc221 = loc(fused[#loc117, #loc114])
#loc222 = loc(fused[#loc122, #loc123])
#loc223 = loc(fused[#loc124, #loc125])
#loc224 = loc(fused[#loc126, #loc127])
#loc225 = loc(fused[#loc128, #loc129])
#loc226 = loc(fused[#loc130, #loc131])
#loc227 = loc(fused[#loc136, #loc137])
#loc230 = loc(fused[#loc147, #loc148])
#loc231 = loc(fused[#loc151, #loc152])
#loc232 = loc(fused[#loc155, #loc154])
#loc233 = loc(fused[#loc157, #loc158])
#loc235 = loc(fused[#loc162, #loc163])
#loc236 = loc(fused[#loc164, #loc165])
#loc237 = loc(fused[#loc166, #loc167])
#loc238 = loc(fused[#loc170, #loc168])
#loc239 = loc(fused[#loc173, #loc172])
