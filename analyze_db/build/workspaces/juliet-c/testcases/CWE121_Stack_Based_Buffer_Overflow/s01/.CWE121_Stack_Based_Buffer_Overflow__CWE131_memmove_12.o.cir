!s32i = !cir.int<s, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_12.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func no_proto private @globalReturnsTrueOrFalse(...) -> !s32i loc(#loc73)
  cir.func private @printIntLine(!s32i) loc(#loc74)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_12_bad() extra(#fn_attr) {
    %0 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc76)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc77)
    %2 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc11)
    cir.store %2, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc78)
    cir.br ^bb1 loc(#loc79)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc80)
    %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc80)
    %5 = cir.call %4() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc15)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc15)
    cir.brcond %6 ^bb2, ^bb3 loc(#loc81)
  ^bb2:  // pred: ^bb1
    %7 = cir.const #cir.int<10> : !s32i loc(#loc20)
    %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc20)
    %9 = cir.alloca !u8i, !cir.ptr<!u8i>, %8 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc20)
    %10 = cir.cast(bitcast, %9 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc20)
    %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc20)
    cir.store %11, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc82)
    cir.br ^bb4 loc(#loc18)
  ^bb3:  // pred: ^bb1
    %12 = cir.const #cir.int<10> : !s32i loc(#loc22)
    %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc22)
    %14 = cir.const #cir.int<4> : !u64i loc(#loc22)
    %15 = cir.binop(mul, %13, %14) : !u64i loc(#loc22)
    %16 = cir.alloca !u8i, !cir.ptr<!u8i>, %15 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc22)
    %17 = cir.cast(bitcast, %16 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc22)
    %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc22)
    cir.store %18, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc83)
    cir.br ^bb4 loc(#loc14)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc14)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc84)
  ^bb6:  // pred: ^bb5
    %19 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc76)
    cir.store %19, %0 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc76)
    %20 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc26)
    %21 = cir.cast(bitcast, %20 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc26)
    %22 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc27)
    %23 = cir.cast(bitcast, %22 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc27)
    %24 = cir.const #cir.int<10> : !s32i loc(#loc28)
    %25 = cir.cast(integral, %24 : !s32i), !u64i loc(#loc28)
    %26 = cir.const #cir.int<4> : !u64i loc(#loc85)
    %27 = cir.binop(mul, %25, %26) : !u64i loc(#loc86)
    cir.libc.memmove %27 bytes from %23 to %21 : !cir.ptr<!void>, !u64i loc(#loc87)
    %28 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc33)
    %29 = cir.const #cir.int<0> : !s32i loc(#loc34)
    %30 = cir.ptr_stride(%28 : !cir.ptr<!s32i>, %29 : !s32i), !cir.ptr<!s32i> loc(#loc35)
    %31 = cir.load %30 : !cir.ptr<!s32i>, !s32i loc(#loc33)
    cir.call @printIntLine(%31) : (!s32i) -> () loc(#loc36)
    cir.br ^bb7 loc(#loc25)
  ^bb7:  // pred: ^bb6
    cir.return loc(#loc6)
  } loc(#loc75)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_12_good() extra(#fn_attr) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc89)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc39)
    cir.return loc(#loc38)
  } loc(#loc88)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc91)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc92)
    %2 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc47)
    cir.store %2, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc93)
    cir.br ^bb1 loc(#loc94)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc95)
    %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc95)
    %5 = cir.call %4() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc51)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc51)
    cir.brcond %6 ^bb2, ^bb3 loc(#loc96)
  ^bb2:  // pred: ^bb1
    %7 = cir.const #cir.int<10> : !s32i loc(#loc56)
    %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc56)
    %9 = cir.const #cir.int<4> : !u64i loc(#loc56)
    %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc56)
    %11 = cir.alloca !u8i, !cir.ptr<!u8i>, %10 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc56)
    %12 = cir.cast(bitcast, %11 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc56)
    %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc56)
    cir.store %13, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc97)
    cir.br ^bb4 loc(#loc54)
  ^bb3:  // pred: ^bb1
    %14 = cir.const #cir.int<10> : !s32i loc(#loc58)
    %15 = cir.cast(integral, %14 : !s32i), !u64i loc(#loc58)
    %16 = cir.const #cir.int<4> : !u64i loc(#loc58)
    %17 = cir.binop(mul, %15, %16) : !u64i loc(#loc58)
    %18 = cir.alloca !u8i, !cir.ptr<!u8i>, %17 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc58)
    %19 = cir.cast(bitcast, %18 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc58)
    %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc58)
    cir.store %20, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc98)
    cir.br ^bb4 loc(#loc50)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc50)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc99)
  ^bb6:  // pred: ^bb5
    %21 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc91)
    cir.store %21, %0 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc91)
    %22 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc62)
    %23 = cir.cast(bitcast, %22 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc62)
    %24 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc63)
    %25 = cir.cast(bitcast, %24 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc63)
    %26 = cir.const #cir.int<10> : !s32i loc(#loc64)
    %27 = cir.cast(integral, %26 : !s32i), !u64i loc(#loc64)
    %28 = cir.const #cir.int<4> : !u64i loc(#loc100)
    %29 = cir.binop(mul, %27, %28) : !u64i loc(#loc101)
    cir.libc.memmove %29 bytes from %25 to %23 : !cir.ptr<!void>, !u64i loc(#loc102)
    %30 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc69)
    %31 = cir.const #cir.int<0> : !s32i loc(#loc70)
    %32 = cir.ptr_stride(%30 : !cir.ptr<!s32i>, %31 : !s32i), !cir.ptr<!s32i> loc(#loc71)
    %33 = cir.load %32 : !cir.ptr<!s32i>, !s32i loc(#loc69)
    cir.call @printIntLine(%33) : (!s32i) -> () loc(#loc72)
    cir.br ^bb7 loc(#loc61)
  ^bb7:  // pred: ^bb6
    cir.return loc(#loc42)
  } loc(#loc90)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_12.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":52:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":52:30)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc5 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_12.c":21:1)
#loc6 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_12.c":41:1)
#loc7 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_12.c":36:9)
#loc8 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_12.c":36:28)
#loc9 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_12.c":23:5)
#loc10 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_12.c":23:11)
#loc11 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_12.c":24:12)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_12.c":24:5)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_12.c":25:5)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_12.c":34:5)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_12.c":25:8)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_12.c":25:33)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_12.c":26:5)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_12.c":29:5)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_12.c":31:5)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_12.c":28:23)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_12.c":28:9)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_12.c":33:23)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_12.c":33:9)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_12.c":35:5)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_12.c":40:5)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_12.c":38:17)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_12.c":38:23)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_12.c":38:31)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_12.c":38:34)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_12.c":38:44)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_12.c":38:9)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_12.c":38:45)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_12.c":39:22)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_12.c":39:27)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_12.c":39:28)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_12.c":39:9)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_12.c":71:1)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_12.c":74:1)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_12.c":73:5)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_12.c":73:13)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_12.c":49:1)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_12.c":69:1)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_12.c":64:9)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_12.c":64:28)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_12.c":51:5)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_12.c":51:11)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_12.c":52:12)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_12.c":52:5)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_12.c":53:5)
#loc50 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_12.c":62:5)
#loc51 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_12.c":53:8)
#loc52 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_12.c":53:33)
#loc53 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_12.c":54:5)
#loc54 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_12.c":57:5)
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_12.c":59:5)
#loc56 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_12.c":56:23)
#loc57 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_12.c":56:9)
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_12.c":61:23)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_12.c":61:9)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_12.c":63:5)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_12.c":68:5)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_12.c":66:17)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_12.c":66:23)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_12.c":66:31)
#loc65 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_12.c":66:34)
#loc66 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_12.c":66:44)
#loc67 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_12.c":66:9)
#loc68 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_12.c":66:45)
#loc69 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_12.c":67:22)
#loc70 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_12.c":67:27)
#loc71 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_12.c":67:28)
#loc72 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_12.c":67:9)
#loc73 = loc(fused[#loc1, #loc2])
#loc74 = loc(fused[#loc3, #loc4])
#loc75 = loc(fused[#loc5, #loc6])
#loc76 = loc(fused[#loc7, #loc8])
#loc77 = loc(fused[#loc9, #loc10])
#loc78 = loc(fused[#loc12, #loc11])
#loc79 = loc(fused[#loc13, #loc14])
#loc80 = loc(fused[#loc15, #loc16])
#loc81 = loc(fused[#loc17, #loc18, #loc19, #loc14])
#loc82 = loc(fused[#loc21, #loc20])
#loc83 = loc(fused[#loc23, #loc22])
#loc84 = loc(fused[#loc24, #loc25])
#loc85 = loc(fused[#loc29, #loc30])
#loc86 = loc(fused[#loc28, #loc30])
#loc87 = loc(fused[#loc31, #loc32])
#loc88 = loc(fused[#loc37, #loc38])
#loc89 = loc(fused[#loc39, #loc40])
#loc90 = loc(fused[#loc41, #loc42])
#loc91 = loc(fused[#loc43, #loc44])
#loc92 = loc(fused[#loc45, #loc46])
#loc93 = loc(fused[#loc48, #loc47])
#loc94 = loc(fused[#loc49, #loc50])
#loc95 = loc(fused[#loc51, #loc52])
#loc96 = loc(fused[#loc53, #loc54, #loc55, #loc50])
#loc97 = loc(fused[#loc57, #loc56])
#loc98 = loc(fused[#loc59, #loc58])
#loc99 = loc(fused[#loc60, #loc61])
#loc100 = loc(fused[#loc65, #loc66])
#loc101 = loc(fused[#loc64, #loc66])
#loc102 = loc(fused[#loc67, #loc68])
