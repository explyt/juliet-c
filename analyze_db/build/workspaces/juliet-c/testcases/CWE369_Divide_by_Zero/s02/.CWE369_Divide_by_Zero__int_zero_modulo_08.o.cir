!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE369_Divide_by_Zero/s02/CWE369_Divide_by_Zero__int_zero_modulo_08.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @printIntLine(!s32i) loc(#loc159)
  cir.func no_proto @CWE369_Divide_by_Zero__int_zero_modulo_08_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc161)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc7)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc8)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc162)
    cir.scope {
      %3 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<() -> !s32i>> loc(#loc164)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc12)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc12)
      cir.if %5 {
        %6 = cir.const #cir.int<0> : !s32i loc(#loc15)
        cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc166)
      } loc(#loc165)
    } loc(#loc163)
    cir.scope {
      %3 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<() -> !s32i>> loc(#loc168)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc19)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc19)
      cir.if %5 {
        %6 = cir.const #cir.int<100> : !s32i loc(#loc22)
        %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc23)
        %8 = cir.binop(rem, %6, %7) : !s32i loc(#loc170)
        cir.call @printIntLine(%8) : (!s32i) -> () loc(#loc24)
      } loc(#loc169)
    } loc(#loc167)
    cir.return loc(#loc4)
  } loc(#loc160)
  cir.func no_proto @CWE369_Divide_by_Zero__int_zero_modulo_08_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<()>> loc(#loc172)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc27)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<()>> loc(#loc173)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc29)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<()>> loc(#loc174)
    cir.call %2() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc31)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<()>> loc(#loc175)
    cir.call %3() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc33)
    cir.return loc(#loc26)
  } loc(#loc171)
  cir.func no_proto internal private @staticReturnsTrue() -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc36)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc37)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc177)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc177)
    cir.return %2 : !s32i loc(#loc177)
  } loc(#loc176)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc178)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc41)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"This would result in a divide by zero\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc42)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc180)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc47)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc48)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc181)
    cir.scope {
      %3 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<() -> !s32i>> loc(#loc183)
      %4 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc52)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc52)
      cir.if %5 {
        %6 = cir.const #cir.int<0> : !s32i loc(#loc55)
        cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc185)
      } loc(#loc184)
    } loc(#loc182)
    cir.scope {
      %3 = cir.get_global @staticReturnsFalse : !cir.ptr<!cir.func<() -> !s32i>> loc(#loc187)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc59)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc59)
      cir.if %5 {
        %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc41)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc41)
        cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc64)
      } else {
        cir.scope {
          %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc67)
          %7 = cir.const #cir.int<0> : !s32i loc(#loc68)
          %8 = cir.cmp(ne, %6, %7) : !s32i, !cir.bool loc(#loc190)
          cir.if %8 {
            %9 = cir.const #cir.int<100> : !s32i loc(#loc72)
            %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc73)
            %11 = cir.binop(rem, %9, %10) : !s32i loc(#loc192)
            cir.call @printIntLine(%11) : (!s32i) -> () loc(#loc74)
          } else {
            %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc42)
            %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc42)
            cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc75)
          } loc(#loc191)
        } loc(#loc189)
      } loc(#loc188)
    } loc(#loc186)
    cir.return loc(#loc44)
  } loc(#loc179)
  cir.func no_proto internal private @staticReturnsFalse() -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc77)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc78)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc194)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc194)
    cir.return %2 : !s32i loc(#loc194)
  } loc(#loc193)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc196)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc84)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc85)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc197)
    cir.scope {
      %3 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<() -> !s32i>> loc(#loc199)
      %4 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc89)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc89)
      cir.if %5 {
        %6 = cir.const #cir.int<0> : !s32i loc(#loc92)
        cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc201)
      } loc(#loc200)
    } loc(#loc198)
    cir.scope {
      %3 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<() -> !s32i>> loc(#loc203)
      %4 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc96)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc96)
      cir.if %5 {
        cir.scope {
          %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc101)
          %7 = cir.const #cir.int<0> : !s32i loc(#loc102)
          %8 = cir.cmp(ne, %6, %7) : !s32i, !cir.bool loc(#loc206)
          cir.if %8 {
            %9 = cir.const #cir.int<100> : !s32i loc(#loc106)
            %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc107)
            %11 = cir.binop(rem, %9, %10) : !s32i loc(#loc208)
            cir.call @printIntLine(%11) : (!s32i) -> () loc(#loc108)
          } else {
            %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc109)
            %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc109)
            cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc110)
          } loc(#loc207)
        } loc(#loc205)
      } loc(#loc204)
    } loc(#loc202)
    cir.return loc(#loc81)
  } loc(#loc195)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc210)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc115)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc116)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc211)
    cir.scope {
      %3 = cir.get_global @staticReturnsFalse : !cir.ptr<!cir.func<() -> !s32i>> loc(#loc213)
      %4 = cir.call @staticReturnsFalse() : () -> !s32i loc(#loc120)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc120)
      cir.if %5 {
        %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc125)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc125)
        cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc126)
      } else {
        %6 = cir.const #cir.int<7> : !s32i loc(#loc127)
        cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc215)
      } loc(#loc214)
    } loc(#loc212)
    cir.scope {
      %3 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<() -> !s32i>> loc(#loc217)
      %4 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc131)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc131)
      cir.if %5 {
        %6 = cir.const #cir.int<100> : !s32i loc(#loc134)
        %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc135)
        %8 = cir.binop(rem, %6, %7) : !s32i loc(#loc219)
        cir.call @printIntLine(%8) : (!s32i) -> () loc(#loc136)
      } loc(#loc218)
    } loc(#loc216)
    cir.return loc(#loc112)
  } loc(#loc209)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc221)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc141)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc142)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc222)
    cir.scope {
      %3 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<() -> !s32i>> loc(#loc224)
      %4 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc146)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc146)
      cir.if %5 {
        %6 = cir.const #cir.int<7> : !s32i loc(#loc149)
        cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc226)
      } loc(#loc225)
    } loc(#loc223)
    cir.scope {
      %3 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<() -> !s32i>> loc(#loc228)
      %4 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc153)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc153)
      cir.if %5 {
        %6 = cir.const #cir.int<100> : !s32i loc(#loc156)
        %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc157)
        %8 = cir.binop(rem, %6, %7) : !s32i loc(#loc230)
        cir.call @printIntLine(%8) : (!s32i) -> () loc(#loc158)
      } loc(#loc229)
    } loc(#loc227)
    cir.return loc(#loc138)
  } loc(#loc220)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE369_Divide_by_Zero/s02/CWE369_Divide_by_Zero__int_zero_modulo_08.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("CWE369_Divide_by_Zero__int_zero_modulo_08.c":35:1)
#loc4 = loc("CWE369_Divide_by_Zero__int_zero_modulo_08.c":50:1)
#loc5 = loc("CWE369_Divide_by_Zero__int_zero_modulo_08.c":37:5)
#loc6 = loc("CWE369_Divide_by_Zero__int_zero_modulo_08.c":37:9)
#loc7 = loc("CWE369_Divide_by_Zero__int_zero_modulo_08.c":39:13)
#loc8 = loc("CWE369_Divide_by_Zero__int_zero_modulo_08.c":39:12)
#loc9 = loc("CWE369_Divide_by_Zero__int_zero_modulo_08.c":39:5)
#loc10 = loc("CWE369_Divide_by_Zero__int_zero_modulo_08.c":40:5)
#loc11 = loc("CWE369_Divide_by_Zero__int_zero_modulo_08.c":44:5)
#loc12 = loc("CWE369_Divide_by_Zero__int_zero_modulo_08.c":40:8)
#loc13 = loc("CWE369_Divide_by_Zero__int_zero_modulo_08.c":40:26)
#loc14 = loc("CWE369_Divide_by_Zero__int_zero_modulo_08.c":41:5)
#loc15 = loc("CWE369_Divide_by_Zero__int_zero_modulo_08.c":43:16)
#loc16 = loc("CWE369_Divide_by_Zero__int_zero_modulo_08.c":43:9)
#loc17 = loc("CWE369_Divide_by_Zero__int_zero_modulo_08.c":45:5)
#loc18 = loc("CWE369_Divide_by_Zero__int_zero_modulo_08.c":49:5)
#loc19 = loc("CWE369_Divide_by_Zero__int_zero_modulo_08.c":45:8)
#loc20 = loc("CWE369_Divide_by_Zero__int_zero_modulo_08.c":45:26)
#loc21 = loc("CWE369_Divide_by_Zero__int_zero_modulo_08.c":46:5)
#loc22 = loc("CWE369_Divide_by_Zero__int_zero_modulo_08.c":48:22)
#loc23 = loc("CWE369_Divide_by_Zero__int_zero_modulo_08.c":48:28)
#loc24 = loc("CWE369_Divide_by_Zero__int_zero_modulo_08.c":48:9)
#loc25 = loc("CWE369_Divide_by_Zero__int_zero_modulo_08.c":152:1)
#loc26 = loc("CWE369_Divide_by_Zero__int_zero_modulo_08.c":158:1)
#loc27 = loc("CWE369_Divide_by_Zero__int_zero_modulo_08.c":154:5)
#loc28 = loc("CWE369_Divide_by_Zero__int_zero_modulo_08.c":154:14)
#loc29 = loc("CWE369_Divide_by_Zero__int_zero_modulo_08.c":155:5)
#loc30 = loc("CWE369_Divide_by_Zero__int_zero_modulo_08.c":155:14)
#loc31 = loc("CWE369_Divide_by_Zero__int_zero_modulo_08.c":156:5)
#loc32 = loc("CWE369_Divide_by_Zero__int_zero_modulo_08.c":156:14)
#loc33 = loc("CWE369_Divide_by_Zero__int_zero_modulo_08.c":157:5)
#loc34 = loc("CWE369_Divide_by_Zero__int_zero_modulo_08.c":157:14)
#loc35 = loc("CWE369_Divide_by_Zero__int_zero_modulo_08.c":23:1)
#loc36 = loc("CWE369_Divide_by_Zero__int_zero_modulo_08.c":26:1)
#loc37 = loc("CWE369_Divide_by_Zero__int_zero_modulo_08.c":25:12)
#loc38 = loc("CWE369_Divide_by_Zero__int_zero_modulo_08.c":25:5)
#loc39 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc40 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc41 = loc("CWE369_Divide_by_Zero__int_zero_modulo_08.c":70:19)
#loc42 = loc("CWE369_Divide_by_Zero__int_zero_modulo_08.c":81:23)
#loc43 = loc("CWE369_Divide_by_Zero__int_zero_modulo_08.c":57:1)
#loc44 = loc("CWE369_Divide_by_Zero__int_zero_modulo_08.c":84:1)
#loc45 = loc("CWE369_Divide_by_Zero__int_zero_modulo_08.c":59:5)
#loc46 = loc("CWE369_Divide_by_Zero__int_zero_modulo_08.c":59:9)
#loc47 = loc("CWE369_Divide_by_Zero__int_zero_modulo_08.c":61:13)
#loc48 = loc("CWE369_Divide_by_Zero__int_zero_modulo_08.c":61:12)
#loc49 = loc("CWE369_Divide_by_Zero__int_zero_modulo_08.c":61:5)
#loc50 = loc("CWE369_Divide_by_Zero__int_zero_modulo_08.c":62:5)
#loc51 = loc("CWE369_Divide_by_Zero__int_zero_modulo_08.c":66:5)
#loc52 = loc("CWE369_Divide_by_Zero__int_zero_modulo_08.c":62:8)
#loc53 = loc("CWE369_Divide_by_Zero__int_zero_modulo_08.c":62:26)
#loc54 = loc("CWE369_Divide_by_Zero__int_zero_modulo_08.c":63:5)
#loc55 = loc("CWE369_Divide_by_Zero__int_zero_modulo_08.c":65:16)
#loc56 = loc("CWE369_Divide_by_Zero__int_zero_modulo_08.c":65:9)
#loc57 = loc("CWE369_Divide_by_Zero__int_zero_modulo_08.c":67:5)
#loc58 = loc("CWE369_Divide_by_Zero__int_zero_modulo_08.c":83:5)
#loc59 = loc("CWE369_Divide_by_Zero__int_zero_modulo_08.c":67:8)
#loc60 = loc("CWE369_Divide_by_Zero__int_zero_modulo_08.c":67:27)
#loc61 = loc("CWE369_Divide_by_Zero__int_zero_modulo_08.c":68:5)
#loc62 = loc("CWE369_Divide_by_Zero__int_zero_modulo_08.c":71:5)
#loc63 = loc("CWE369_Divide_by_Zero__int_zero_modulo_08.c":73:5)
#loc64 = loc("CWE369_Divide_by_Zero__int_zero_modulo_08.c":70:9)
#loc65 = loc("CWE369_Divide_by_Zero__int_zero_modulo_08.c":75:9)
#loc66 = loc("CWE369_Divide_by_Zero__int_zero_modulo_08.c":82:9)
#loc67 = loc("CWE369_Divide_by_Zero__int_zero_modulo_08.c":75:13)
#loc68 = loc("CWE369_Divide_by_Zero__int_zero_modulo_08.c":75:21)
#loc69 = loc("CWE369_Divide_by_Zero__int_zero_modulo_08.c":76:9)
#loc70 = loc("CWE369_Divide_by_Zero__int_zero_modulo_08.c":78:9)
#loc71 = loc("CWE369_Divide_by_Zero__int_zero_modulo_08.c":80:9)
#loc72 = loc("CWE369_Divide_by_Zero__int_zero_modulo_08.c":77:26)
#loc73 = loc("CWE369_Divide_by_Zero__int_zero_modulo_08.c":77:32)
#loc74 = loc("CWE369_Divide_by_Zero__int_zero_modulo_08.c":77:13)
#loc75 = loc("CWE369_Divide_by_Zero__int_zero_modulo_08.c":81:13)
#loc76 = loc("CWE369_Divide_by_Zero__int_zero_modulo_08.c":28:1)
#loc77 = loc("CWE369_Divide_by_Zero__int_zero_modulo_08.c":31:1)
#loc78 = loc("CWE369_Divide_by_Zero__int_zero_modulo_08.c":30:12)
#loc79 = loc("CWE369_Divide_by_Zero__int_zero_modulo_08.c":30:5)
#loc80 = loc("CWE369_Divide_by_Zero__int_zero_modulo_08.c":87:1)
#loc81 = loc("CWE369_Divide_by_Zero__int_zero_modulo_08.c":109:1)
#loc82 = loc("CWE369_Divide_by_Zero__int_zero_modulo_08.c":89:5)
#loc83 = loc("CWE369_Divide_by_Zero__int_zero_modulo_08.c":89:9)
#loc84 = loc("CWE369_Divide_by_Zero__int_zero_modulo_08.c":91:13)
#loc85 = loc("CWE369_Divide_by_Zero__int_zero_modulo_08.c":91:12)
#loc86 = loc("CWE369_Divide_by_Zero__int_zero_modulo_08.c":91:5)
#loc87 = loc("CWE369_Divide_by_Zero__int_zero_modulo_08.c":92:5)
#loc88 = loc("CWE369_Divide_by_Zero__int_zero_modulo_08.c":96:5)
#loc89 = loc("CWE369_Divide_by_Zero__int_zero_modulo_08.c":92:8)
#loc90 = loc("CWE369_Divide_by_Zero__int_zero_modulo_08.c":92:26)
#loc91 = loc("CWE369_Divide_by_Zero__int_zero_modulo_08.c":93:5)
#loc92 = loc("CWE369_Divide_by_Zero__int_zero_modulo_08.c":95:16)
#loc93 = loc("CWE369_Divide_by_Zero__int_zero_modulo_08.c":95:9)
#loc94 = loc("CWE369_Divide_by_Zero__int_zero_modulo_08.c":97:5)
#loc95 = loc("CWE369_Divide_by_Zero__int_zero_modulo_08.c":108:5)
#loc96 = loc("CWE369_Divide_by_Zero__int_zero_modulo_08.c":97:8)
#loc97 = loc("CWE369_Divide_by_Zero__int_zero_modulo_08.c":97:26)
#loc98 = loc("CWE369_Divide_by_Zero__int_zero_modulo_08.c":98:5)
#loc99 = loc("CWE369_Divide_by_Zero__int_zero_modulo_08.c":100:9)
#loc100 = loc("CWE369_Divide_by_Zero__int_zero_modulo_08.c":107:9)
#loc101 = loc("CWE369_Divide_by_Zero__int_zero_modulo_08.c":100:13)
#loc102 = loc("CWE369_Divide_by_Zero__int_zero_modulo_08.c":100:21)
#loc103 = loc("CWE369_Divide_by_Zero__int_zero_modulo_08.c":101:9)
#loc104 = loc("CWE369_Divide_by_Zero__int_zero_modulo_08.c":103:9)
#loc105 = loc("CWE369_Divide_by_Zero__int_zero_modulo_08.c":105:9)
#loc106 = loc("CWE369_Divide_by_Zero__int_zero_modulo_08.c":102:26)
#loc107 = loc("CWE369_Divide_by_Zero__int_zero_modulo_08.c":102:32)
#loc108 = loc("CWE369_Divide_by_Zero__int_zero_modulo_08.c":102:13)
#loc109 = loc("CWE369_Divide_by_Zero__int_zero_modulo_08.c":106:23)
#loc110 = loc("CWE369_Divide_by_Zero__int_zero_modulo_08.c":106:13)
#loc111 = loc("CWE369_Divide_by_Zero__int_zero_modulo_08.c":112:1)
#loc112 = loc("CWE369_Divide_by_Zero__int_zero_modulo_08.c":132:1)
#loc113 = loc("CWE369_Divide_by_Zero__int_zero_modulo_08.c":114:5)
#loc114 = loc("CWE369_Divide_by_Zero__int_zero_modulo_08.c":114:9)
#loc115 = loc("CWE369_Divide_by_Zero__int_zero_modulo_08.c":116:13)
#loc116 = loc("CWE369_Divide_by_Zero__int_zero_modulo_08.c":116:12)
#loc117 = loc("CWE369_Divide_by_Zero__int_zero_modulo_08.c":116:5)
#loc118 = loc("CWE369_Divide_by_Zero__int_zero_modulo_08.c":117:5)
#loc119 = loc("CWE369_Divide_by_Zero__int_zero_modulo_08.c":126:5)
#loc120 = loc("CWE369_Divide_by_Zero__int_zero_modulo_08.c":117:8)
#loc121 = loc("CWE369_Divide_by_Zero__int_zero_modulo_08.c":117:27)
#loc122 = loc("CWE369_Divide_by_Zero__int_zero_modulo_08.c":118:5)
#loc123 = loc("CWE369_Divide_by_Zero__int_zero_modulo_08.c":121:5)
#loc124 = loc("CWE369_Divide_by_Zero__int_zero_modulo_08.c":123:5)
#loc125 = loc("CWE369_Divide_by_Zero__int_zero_modulo_08.c":120:19)
#loc126 = loc("CWE369_Divide_by_Zero__int_zero_modulo_08.c":120:9)
#loc127 = loc("CWE369_Divide_by_Zero__int_zero_modulo_08.c":125:16)
#loc128 = loc("CWE369_Divide_by_Zero__int_zero_modulo_08.c":125:9)
#loc129 = loc("CWE369_Divide_by_Zero__int_zero_modulo_08.c":127:5)
#loc130 = loc("CWE369_Divide_by_Zero__int_zero_modulo_08.c":131:5)
#loc131 = loc("CWE369_Divide_by_Zero__int_zero_modulo_08.c":127:8)
#loc132 = loc("CWE369_Divide_by_Zero__int_zero_modulo_08.c":127:26)
#loc133 = loc("CWE369_Divide_by_Zero__int_zero_modulo_08.c":128:5)
#loc134 = loc("CWE369_Divide_by_Zero__int_zero_modulo_08.c":130:22)
#loc135 = loc("CWE369_Divide_by_Zero__int_zero_modulo_08.c":130:28)
#loc136 = loc("CWE369_Divide_by_Zero__int_zero_modulo_08.c":130:9)
#loc137 = loc("CWE369_Divide_by_Zero__int_zero_modulo_08.c":135:1)
#loc138 = loc("CWE369_Divide_by_Zero__int_zero_modulo_08.c":150:1)
#loc139 = loc("CWE369_Divide_by_Zero__int_zero_modulo_08.c":137:5)
#loc140 = loc("CWE369_Divide_by_Zero__int_zero_modulo_08.c":137:9)
#loc141 = loc("CWE369_Divide_by_Zero__int_zero_modulo_08.c":139:13)
#loc142 = loc("CWE369_Divide_by_Zero__int_zero_modulo_08.c":139:12)
#loc143 = loc("CWE369_Divide_by_Zero__int_zero_modulo_08.c":139:5)
#loc144 = loc("CWE369_Divide_by_Zero__int_zero_modulo_08.c":140:5)
#loc145 = loc("CWE369_Divide_by_Zero__int_zero_modulo_08.c":144:5)
#loc146 = loc("CWE369_Divide_by_Zero__int_zero_modulo_08.c":140:8)
#loc147 = loc("CWE369_Divide_by_Zero__int_zero_modulo_08.c":140:26)
#loc148 = loc("CWE369_Divide_by_Zero__int_zero_modulo_08.c":141:5)
#loc149 = loc("CWE369_Divide_by_Zero__int_zero_modulo_08.c":143:16)
#loc150 = loc("CWE369_Divide_by_Zero__int_zero_modulo_08.c":143:9)
#loc151 = loc("CWE369_Divide_by_Zero__int_zero_modulo_08.c":145:5)
#loc152 = loc("CWE369_Divide_by_Zero__int_zero_modulo_08.c":149:5)
#loc153 = loc("CWE369_Divide_by_Zero__int_zero_modulo_08.c":145:8)
#loc154 = loc("CWE369_Divide_by_Zero__int_zero_modulo_08.c":145:26)
#loc155 = loc("CWE369_Divide_by_Zero__int_zero_modulo_08.c":146:5)
#loc156 = loc("CWE369_Divide_by_Zero__int_zero_modulo_08.c":148:22)
#loc157 = loc("CWE369_Divide_by_Zero__int_zero_modulo_08.c":148:28)
#loc158 = loc("CWE369_Divide_by_Zero__int_zero_modulo_08.c":148:9)
#loc159 = loc(fused[#loc1, #loc2])
#loc160 = loc(fused[#loc3, #loc4])
#loc161 = loc(fused[#loc5, #loc6])
#loc162 = loc(fused[#loc9, #loc7])
#loc163 = loc(fused[#loc10, #loc11])
#loc164 = loc(fused[#loc12, #loc13])
#loc165 = loc(fused[#loc14, #loc11])
#loc166 = loc(fused[#loc16, #loc15])
#loc167 = loc(fused[#loc17, #loc18])
#loc168 = loc(fused[#loc19, #loc20])
#loc169 = loc(fused[#loc21, #loc18])
#loc170 = loc(fused[#loc22, #loc23])
#loc171 = loc(fused[#loc25, #loc26])
#loc172 = loc(fused[#loc27, #loc28])
#loc173 = loc(fused[#loc29, #loc30])
#loc174 = loc(fused[#loc31, #loc32])
#loc175 = loc(fused[#loc33, #loc34])
#loc176 = loc(fused[#loc35, #loc36])
#loc177 = loc(fused[#loc38, #loc37])
#loc178 = loc(fused[#loc39, #loc40])
#loc179 = loc(fused[#loc43, #loc44])
#loc180 = loc(fused[#loc45, #loc46])
#loc181 = loc(fused[#loc49, #loc47])
#loc182 = loc(fused[#loc50, #loc51])
#loc183 = loc(fused[#loc52, #loc53])
#loc184 = loc(fused[#loc54, #loc51])
#loc185 = loc(fused[#loc56, #loc55])
#loc186 = loc(fused[#loc57, #loc58])
#loc187 = loc(fused[#loc59, #loc60])
#loc188 = loc(fused[#loc61, #loc62, #loc63, #loc58])
#loc189 = loc(fused[#loc65, #loc66])
#loc190 = loc(fused[#loc67, #loc68])
#loc191 = loc(fused[#loc69, #loc70, #loc71, #loc66])
#loc192 = loc(fused[#loc72, #loc73])
#loc193 = loc(fused[#loc76, #loc77])
#loc194 = loc(fused[#loc79, #loc78])
#loc195 = loc(fused[#loc80, #loc81])
#loc196 = loc(fused[#loc82, #loc83])
#loc197 = loc(fused[#loc86, #loc84])
#loc198 = loc(fused[#loc87, #loc88])
#loc199 = loc(fused[#loc89, #loc90])
#loc200 = loc(fused[#loc91, #loc88])
#loc201 = loc(fused[#loc93, #loc92])
#loc202 = loc(fused[#loc94, #loc95])
#loc203 = loc(fused[#loc96, #loc97])
#loc204 = loc(fused[#loc98, #loc95])
#loc205 = loc(fused[#loc99, #loc100])
#loc206 = loc(fused[#loc101, #loc102])
#loc207 = loc(fused[#loc103, #loc104, #loc105, #loc100])
#loc208 = loc(fused[#loc106, #loc107])
#loc209 = loc(fused[#loc111, #loc112])
#loc210 = loc(fused[#loc113, #loc114])
#loc211 = loc(fused[#loc117, #loc115])
#loc212 = loc(fused[#loc118, #loc119])
#loc213 = loc(fused[#loc120, #loc121])
#loc214 = loc(fused[#loc122, #loc123, #loc124, #loc119])
#loc215 = loc(fused[#loc128, #loc127])
#loc216 = loc(fused[#loc129, #loc130])
#loc217 = loc(fused[#loc131, #loc132])
#loc218 = loc(fused[#loc133, #loc130])
#loc219 = loc(fused[#loc134, #loc135])
#loc220 = loc(fused[#loc137, #loc138])
#loc221 = loc(fused[#loc139, #loc140])
#loc222 = loc(fused[#loc143, #loc141])
#loc223 = loc(fused[#loc144, #loc145])
#loc224 = loc(fused[#loc146, #loc147])
#loc225 = loc(fused[#loc148, #loc145])
#loc226 = loc(fused[#loc150, #loc149])
#loc227 = loc(fused[#loc151, #loc152])
#loc228 = loc(fused[#loc153, #loc154])
#loc229 = loc(fused[#loc155, #loc152])
#loc230 = loc(fused[#loc156, #loc157])
