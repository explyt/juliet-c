!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE252_Unchecked_Return_Value/CWE252_Unchecked_Return_Value__char_snprintf_15.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @snprintf(!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, ...) -> !s32i extra(#fn_attr) loc(#loc94)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"%s\0A\00" : !cir.array<!s8i x 4>> : !cir.array<!s8i x 4> {alignment = 1 : i64} loc(#loc3)
  cir.global "private"  constant internal dsolocal @".str1" = #cir.const_array<"string\00" : !cir.array<!s8i x 7>> : !cir.array<!s8i x 7> {alignment = 1 : i64} loc(#loc4)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc95)
  cir.global "private"  constant internal dsolocal @".str2" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc7)
  cir.func no_proto  @CWE252_Unchecked_Return_Value__char_snprintf_15_bad() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.const #cir.int<6> : !s32i loc(#loc12)
      cir.switch (%0 : !s32i) [
      case (equal, 6) {
        cir.scope {
          %1 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["dataBuffer"] {alignment = 16 : i64} loc(#loc99)
          %2 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc100)
          %3 = cir.const #cir.zero : !cir.array<!s8i x 100> loc(#loc99)
          cir.store %3, %1 : !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>> loc(#loc99)
          %4 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc18)
          cir.store %4, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc100)
          %5 = cir.get_global @snprintf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, ...)>> loc(#loc19)
          %6 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc20)
          %7 = cir.const #cir.int<100> : !s32i loc(#loc21)
          %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc21)
          %9 = cir.const #cir.int<6> : !u64i loc(#loc101)
          %10 = cir.binop(sub, %8, %9) : !u64i loc(#loc102)
          %11 = cir.const #cir.int<1> : !s32i loc(#loc24)
          %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc24)
          %13 = cir.binop(sub, %10, %12) : !u64i loc(#loc103)
          %14 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc3)
          %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc3)
          %16 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 7>> loc(#loc4)
          %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 7>>), !cir.ptr<!s8i> loc(#loc4)
          %18 = cir.call @snprintf(%6, %13, %15, %17) : (!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc19)
        } loc(#loc98)
        cir.break loc(#loc25)
      },
      case (default) {
        %1 = cir.get_global @".str2" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc7)
        %2 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc7)
        cir.call @printLine(%2) : (!cir.ptr<!s8i>) -> () loc(#loc26)
        cir.break loc(#loc27)
      }
      ] loc(#loc10)
    } loc(#loc97)
    cir.return loc(#loc9)
  } loc(#loc96)
  cir.func no_proto  @CWE252_Unchecked_Return_Value__char_snprintf_15_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<!void ()>> loc(#loc105)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc30)
    %1 = cir.get_global @good2 : !cir.ptr<!cir.func<!void ()>> loc(#loc106)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc32)
    cir.return loc(#loc29)
  } loc(#loc104)
  cir.global "private"  constant internal dsolocal @".str3" = #cir.const_array<"snprintf failed!\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc34)
  cir.func no_proto internal private  @good1() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.const #cir.int<5> : !s32i loc(#loc39)
      cir.switch (%0 : !s32i) [
      case (equal, 6) {
        %1 = cir.get_global @".str2" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc40)
        %2 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc40)
        cir.call @printLine(%2) : (!cir.ptr<!s8i>) -> () loc(#loc41)
        cir.break loc(#loc42)
      },
      case (default) {
        cir.scope {
          %1 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["dataBuffer"] {alignment = 16 : i64} loc(#loc110)
          %2 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc111)
          %3 = cir.const #cir.zero : !cir.array<!s8i x 100> loc(#loc110)
          cir.store %3, %1 : !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>> loc(#loc110)
          %4 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc48)
          cir.store %4, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc111)
          cir.scope {
            %5 = cir.get_global @snprintf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, ...)>> loc(#loc51)
            %6 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc52)
            %7 = cir.const #cir.int<100> : !s32i loc(#loc53)
            %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc53)
            %9 = cir.const #cir.int<6> : !u64i loc(#loc113)
            %10 = cir.binop(sub, %8, %9) : !u64i loc(#loc114)
            %11 = cir.const #cir.int<1> : !s32i loc(#loc56)
            %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc56)
            %13 = cir.binop(sub, %10, %12) : !u64i loc(#loc115)
            %14 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc57)
            %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc57)
            %16 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 7>> loc(#loc58)
            %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 7>>), !cir.ptr<!s8i> loc(#loc58)
            %18 = cir.call @snprintf(%6, %13, %15, %17) : (!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc51)
            %19 = cir.const #cir.int<0> : !s32i loc(#loc59)
            %20 = cir.cmp(lt, %18, %19) : !s32i, !s32i loc(#loc116)
            %21 = cir.cast(int_to_bool, %20 : !s32i), !cir.bool loc(#loc60)
            cir.if %21 {
              %22 = cir.get_global @".str3" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc34)
              %23 = cir.cast(array_to_ptrdecay, %22 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc34)
              cir.call @printLine(%23) : (!cir.ptr<!s8i>) -> () loc(#loc62)
            } loc(#loc117)
          } loc(#loc112)
        } loc(#loc109)
        cir.break loc(#loc63)
      }
      ] loc(#loc37)
    } loc(#loc108)
    cir.return loc(#loc36)
  } loc(#loc107)
  cir.func no_proto internal private  @good2() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.const #cir.int<6> : !s32i loc(#loc68)
      cir.switch (%0 : !s32i) [
      case (equal, 6) {
        cir.scope {
          %1 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["dataBuffer"] {alignment = 16 : i64} loc(#loc121)
          %2 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc122)
          %3 = cir.const #cir.zero : !cir.array<!s8i x 100> loc(#loc121)
          cir.store %3, %1 : !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>> loc(#loc121)
          %4 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc74)
          cir.store %4, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc122)
          cir.scope {
            %5 = cir.get_global @snprintf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, ...)>> loc(#loc77)
            %6 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc78)
            %7 = cir.const #cir.int<100> : !s32i loc(#loc79)
            %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc79)
            %9 = cir.const #cir.int<6> : !u64i loc(#loc124)
            %10 = cir.binop(sub, %8, %9) : !u64i loc(#loc125)
            %11 = cir.const #cir.int<1> : !s32i loc(#loc82)
            %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc82)
            %13 = cir.binop(sub, %10, %12) : !u64i loc(#loc126)
            %14 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc83)
            %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc83)
            %16 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 7>> loc(#loc84)
            %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 7>>), !cir.ptr<!s8i> loc(#loc84)
            %18 = cir.call @snprintf(%6, %13, %15, %17) : (!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc77)
            %19 = cir.const #cir.int<0> : !s32i loc(#loc85)
            %20 = cir.cmp(lt, %18, %19) : !s32i, !s32i loc(#loc127)
            %21 = cir.cast(int_to_bool, %20 : !s32i), !cir.bool loc(#loc86)
            cir.if %21 {
              %22 = cir.get_global @".str3" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc88)
              %23 = cir.cast(array_to_ptrdecay, %22 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc88)
              cir.call @printLine(%23) : (!cir.ptr<!s8i>) -> () loc(#loc89)
            } loc(#loc128)
          } loc(#loc123)
        } loc(#loc120)
        cir.break loc(#loc90)
      },
      case (default) {
        %1 = cir.get_global @".str2" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc91)
        %2 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc91)
        cir.call @printLine(%2) : (!cir.ptr<!s8i>) -> () loc(#loc92)
        cir.break loc(#loc93)
      }
      ] loc(#loc66)
    } loc(#loc119)
    cir.return loc(#loc65)
  } loc(#loc118)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE252_Unchecked_Return_Value/CWE252_Unchecked_Return_Value__char_snprintf_15.c":0:0)
#loc1 = loc("/usr/include/stdio.h":385:1)
#loc2 = loc("/usr/include/stdio.h":387:62)
#loc3 = loc("CWE252_Unchecked_Return_Value__char_snprintf_15.c":43:42)
#loc4 = loc("CWE252_Unchecked_Return_Value__char_snprintf_15.c":43:50)
#loc5 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc6 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc7 = loc("CWE252_Unchecked_Return_Value__char_snprintf_15.c":48:19)
#loc8 = loc("CWE252_Unchecked_Return_Value__char_snprintf_15.c":32:1)
#loc9 = loc("CWE252_Unchecked_Return_Value__char_snprintf_15.c":51:1)
#loc10 = loc("CWE252_Unchecked_Return_Value__char_snprintf_15.c":34:5)
#loc11 = loc("CWE252_Unchecked_Return_Value__char_snprintf_15.c":50:5)
#loc12 = loc("CWE252_Unchecked_Return_Value__char_snprintf_15.c":34:12)
#loc13 = loc("CWE252_Unchecked_Return_Value__char_snprintf_15.c":37:5)
#loc14 = loc("CWE252_Unchecked_Return_Value__char_snprintf_15.c":44:5)
#loc15 = loc("CWE252_Unchecked_Return_Value__char_snprintf_15.c":40:9)
#loc16 = loc("CWE252_Unchecked_Return_Value__char_snprintf_15.c":40:32)
#loc17 = loc("CWE252_Unchecked_Return_Value__char_snprintf_15.c":41:9)
#loc18 = loc("CWE252_Unchecked_Return_Value__char_snprintf_15.c":41:23)
#loc19 = loc("CWE252_Unchecked_Return_Value__char_snprintf_15.c":43:9)
#loc20 = loc("CWE252_Unchecked_Return_Value__char_snprintf_15.c":43:18)
#loc21 = loc("CWE252_Unchecked_Return_Value__char_snprintf_15.c":43:23)
#loc22 = loc("CWE252_Unchecked_Return_Value__char_snprintf_15.c":43:27)
#loc23 = loc("CWE252_Unchecked_Return_Value__char_snprintf_15.c":43:37)
#loc24 = loc("CWE252_Unchecked_Return_Value__char_snprintf_15.c":43:39)
#loc25 = loc("CWE252_Unchecked_Return_Value__char_snprintf_15.c":45:5)
#loc26 = loc("CWE252_Unchecked_Return_Value__char_snprintf_15.c":48:9)
#loc27 = loc("CWE252_Unchecked_Return_Value__char_snprintf_15.c":49:9)
#loc28 = loc("CWE252_Unchecked_Return_Value__char_snprintf_15.c":107:1)
#loc29 = loc("CWE252_Unchecked_Return_Value__char_snprintf_15.c":111:1)
#loc30 = loc("CWE252_Unchecked_Return_Value__char_snprintf_15.c":109:5)
#loc31 = loc("CWE252_Unchecked_Return_Value__char_snprintf_15.c":109:11)
#loc32 = loc("CWE252_Unchecked_Return_Value__char_snprintf_15.c":110:5)
#loc33 = loc("CWE252_Unchecked_Return_Value__char_snprintf_15.c":110:11)
#loc34 = loc("CWE252_Unchecked_Return_Value__char_snprintf_15.c":75:23)
#loc35 = loc("CWE252_Unchecked_Return_Value__char_snprintf_15.c":58:1)
#loc36 = loc("CWE252_Unchecked_Return_Value__char_snprintf_15.c":80:1)
#loc37 = loc("CWE252_Unchecked_Return_Value__char_snprintf_15.c":60:5)
#loc38 = loc("CWE252_Unchecked_Return_Value__char_snprintf_15.c":79:5)
#loc39 = loc("CWE252_Unchecked_Return_Value__char_snprintf_15.c":60:12)
#loc40 = loc("CWE252_Unchecked_Return_Value__char_snprintf_15.c":64:19)
#loc41 = loc("CWE252_Unchecked_Return_Value__char_snprintf_15.c":64:9)
#loc42 = loc("CWE252_Unchecked_Return_Value__char_snprintf_15.c":65:9)
#loc43 = loc("CWE252_Unchecked_Return_Value__char_snprintf_15.c":67:5)
#loc44 = loc("CWE252_Unchecked_Return_Value__char_snprintf_15.c":77:5)
#loc45 = loc("CWE252_Unchecked_Return_Value__char_snprintf_15.c":70:9)
#loc46 = loc("CWE252_Unchecked_Return_Value__char_snprintf_15.c":70:32)
#loc47 = loc("CWE252_Unchecked_Return_Value__char_snprintf_15.c":71:9)
#loc48 = loc("CWE252_Unchecked_Return_Value__char_snprintf_15.c":71:23)
#loc49 = loc("CWE252_Unchecked_Return_Value__char_snprintf_15.c":73:9)
#loc50 = loc("CWE252_Unchecked_Return_Value__char_snprintf_15.c":76:9)
#loc51 = loc("CWE252_Unchecked_Return_Value__char_snprintf_15.c":73:13)
#loc52 = loc("CWE252_Unchecked_Return_Value__char_snprintf_15.c":73:22)
#loc53 = loc("CWE252_Unchecked_Return_Value__char_snprintf_15.c":73:27)
#loc54 = loc("CWE252_Unchecked_Return_Value__char_snprintf_15.c":73:31)
#loc55 = loc("CWE252_Unchecked_Return_Value__char_snprintf_15.c":73:41)
#loc56 = loc("CWE252_Unchecked_Return_Value__char_snprintf_15.c":73:43)
#loc57 = loc("CWE252_Unchecked_Return_Value__char_snprintf_15.c":73:46)
#loc58 = loc("CWE252_Unchecked_Return_Value__char_snprintf_15.c":73:54)
#loc59 = loc("CWE252_Unchecked_Return_Value__char_snprintf_15.c":73:61)
#loc60 = loc("CWE252_Unchecked_Return_Value__char_snprintf_15.c":73:59)
#loc61 = loc("CWE252_Unchecked_Return_Value__char_snprintf_15.c":74:9)
#loc62 = loc("CWE252_Unchecked_Return_Value__char_snprintf_15.c":75:13)
#loc63 = loc("CWE252_Unchecked_Return_Value__char_snprintf_15.c":78:5)
#loc64 = loc("CWE252_Unchecked_Return_Value__char_snprintf_15.c":83:1)
#loc65 = loc("CWE252_Unchecked_Return_Value__char_snprintf_15.c":105:1)
#loc66 = loc("CWE252_Unchecked_Return_Value__char_snprintf_15.c":85:5)
#loc67 = loc("CWE252_Unchecked_Return_Value__char_snprintf_15.c":104:5)
#loc68 = loc("CWE252_Unchecked_Return_Value__char_snprintf_15.c":85:12)
#loc69 = loc("CWE252_Unchecked_Return_Value__char_snprintf_15.c":88:5)
#loc70 = loc("CWE252_Unchecked_Return_Value__char_snprintf_15.c":98:5)
#loc71 = loc("CWE252_Unchecked_Return_Value__char_snprintf_15.c":91:9)
#loc72 = loc("CWE252_Unchecked_Return_Value__char_snprintf_15.c":91:32)
#loc73 = loc("CWE252_Unchecked_Return_Value__char_snprintf_15.c":92:9)
#loc74 = loc("CWE252_Unchecked_Return_Value__char_snprintf_15.c":92:23)
#loc75 = loc("CWE252_Unchecked_Return_Value__char_snprintf_15.c":94:9)
#loc76 = loc("CWE252_Unchecked_Return_Value__char_snprintf_15.c":97:9)
#loc77 = loc("CWE252_Unchecked_Return_Value__char_snprintf_15.c":94:13)
#loc78 = loc("CWE252_Unchecked_Return_Value__char_snprintf_15.c":94:22)
#loc79 = loc("CWE252_Unchecked_Return_Value__char_snprintf_15.c":94:27)
#loc80 = loc("CWE252_Unchecked_Return_Value__char_snprintf_15.c":94:31)
#loc81 = loc("CWE252_Unchecked_Return_Value__char_snprintf_15.c":94:41)
#loc82 = loc("CWE252_Unchecked_Return_Value__char_snprintf_15.c":94:43)
#loc83 = loc("CWE252_Unchecked_Return_Value__char_snprintf_15.c":94:46)
#loc84 = loc("CWE252_Unchecked_Return_Value__char_snprintf_15.c":94:54)
#loc85 = loc("CWE252_Unchecked_Return_Value__char_snprintf_15.c":94:61)
#loc86 = loc("CWE252_Unchecked_Return_Value__char_snprintf_15.c":94:59)
#loc87 = loc("CWE252_Unchecked_Return_Value__char_snprintf_15.c":95:9)
#loc88 = loc("CWE252_Unchecked_Return_Value__char_snprintf_15.c":96:23)
#loc89 = loc("CWE252_Unchecked_Return_Value__char_snprintf_15.c":96:13)
#loc90 = loc("CWE252_Unchecked_Return_Value__char_snprintf_15.c":99:5)
#loc91 = loc("CWE252_Unchecked_Return_Value__char_snprintf_15.c":102:19)
#loc92 = loc("CWE252_Unchecked_Return_Value__char_snprintf_15.c":102:9)
#loc93 = loc("CWE252_Unchecked_Return_Value__char_snprintf_15.c":103:9)
#loc94 = loc(fused[#loc1, #loc2])
#loc95 = loc(fused[#loc5, #loc6])
#loc96 = loc(fused[#loc8, #loc9])
#loc97 = loc(fused[#loc10, #loc11])
#loc98 = loc(fused[#loc13, #loc14])
#loc99 = loc(fused[#loc15, #loc16])
#loc100 = loc(fused[#loc17, #loc18])
#loc101 = loc(fused[#loc22, #loc23])
#loc102 = loc(fused[#loc21, #loc23])
#loc103 = loc(fused[#loc21, #loc24])
#loc104 = loc(fused[#loc28, #loc29])
#loc105 = loc(fused[#loc30, #loc31])
#loc106 = loc(fused[#loc32, #loc33])
#loc107 = loc(fused[#loc35, #loc36])
#loc108 = loc(fused[#loc37, #loc38])
#loc109 = loc(fused[#loc43, #loc44])
#loc110 = loc(fused[#loc45, #loc46])
#loc111 = loc(fused[#loc47, #loc48])
#loc112 = loc(fused[#loc49, #loc50])
#loc113 = loc(fused[#loc54, #loc55])
#loc114 = loc(fused[#loc53, #loc55])
#loc115 = loc(fused[#loc53, #loc56])
#loc116 = loc(fused[#loc51, #loc59])
#loc117 = loc(fused[#loc61, #loc50])
#loc118 = loc(fused[#loc64, #loc65])
#loc119 = loc(fused[#loc66, #loc67])
#loc120 = loc(fused[#loc69, #loc70])
#loc121 = loc(fused[#loc71, #loc72])
#loc122 = loc(fused[#loc73, #loc74])
#loc123 = loc(fused[#loc75, #loc76])
#loc124 = loc(fused[#loc80, #loc81])
#loc125 = loc(fused[#loc79, #loc81])
#loc126 = loc(fused[#loc79, #loc82])
#loc127 = loc(fused[#loc77, #loc85])
#loc128 = loc(fused[#loc87, #loc76])
