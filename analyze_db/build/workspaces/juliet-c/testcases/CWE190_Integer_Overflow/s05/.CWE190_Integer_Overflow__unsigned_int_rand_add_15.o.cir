!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_rand_add_15.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr = dense<64> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little", "dlti.mangling_mode" = "e">} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc196)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc197)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc5)
  cir.func private @printUnsignedLine(!u32i) loc(#loc198)
  cir.func no_proto @CWE190_Integer_Overflow__unsigned_int_rand_add_15_bad() extra(#fn_attr1) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc200)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc12)
    %2 = cir.cast(integral, %1 : !s32i), !u32i loc(#loc12)
    cir.store %2, %0 : !u32i, !cir.ptr<!u32i> loc(#loc201)
    cir.scope {
      %3 = cir.const #cir.int<6> : !s32i loc(#loc16)
      cir.switch (%3 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %4 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
          %5 = cir.const #cir.int<1> : !s32i loc(#loc18)
          %6 = cir.binop(and, %4, %5) : !s32i loc(#loc18)
          %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc18)
          %8 = cir.ternary(%7, true {
            %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
            %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc18)
            %13 = cir.const #cir.int<30> : !s32i loc(#loc18)
            %14 = cir.shift(left, %12 : !u32i, %13 : !s32i) -> !u32i loc(#loc18)
            %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
            %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc18)
            %17 = cir.const #cir.int<15> : !s32i loc(#loc18)
            %18 = cir.shift(left, %16 : !u32i, %17 : !s32i) -> !u32i loc(#loc18)
            %19 = cir.binop(xor, %14, %18) : !u32i loc(#loc18)
            %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
            %21 = cir.cast(integral, %20 : !s32i), !u32i loc(#loc18)
            %22 = cir.binop(xor, %19, %21) : !u32i loc(#loc18)
            cir.yield %22 : !u32i loc(#loc18)
          }, false {
            %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
            %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc18)
            %13 = cir.const #cir.int<30> : !s32i loc(#loc18)
            %14 = cir.shift(left, %12 : !u32i, %13 : !s32i) -> !u32i loc(#loc18)
            %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
            %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc18)
            %17 = cir.const #cir.int<15> : !s32i loc(#loc18)
            %18 = cir.shift(left, %16 : !u32i, %17 : !s32i) -> !u32i loc(#loc18)
            %19 = cir.binop(xor, %14, %18) : !u32i loc(#loc18)
            %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
            %21 = cir.cast(integral, %20 : !s32i), !u32i loc(#loc18)
            %22 = cir.binop(xor, %19, %21) : !u32i loc(#loc18)
            %23 = cir.unary(minus, %22) : !u32i, !u32i loc(#loc18)
            %24 = cir.const #cir.int<1> : !s32i loc(#loc18)
            %25 = cir.cast(integral, %24 : !s32i), !u32i loc(#loc18)
            %26 = cir.binop(sub, %23, %25) : !u32i loc(#loc18)
            cir.yield %26 : !u32i loc(#loc18)
          }) : (!cir.bool) -> !u32i loc(#loc18)
          %9 = cir.cast(integral, %8 : !u32i), !s32i loc(#loc18)
          %10 = cir.cast(integral, %9 : !s32i), !u32i loc(#loc18)
          cir.store %10, %0 : !u32i, !cir.ptr<!u32i> loc(#loc203)
          cir.break loc(#loc20)
        } loc(#loc17)
        cir.case(default, []) {
          %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc5)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc5)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc22)
          cir.break loc(#loc23)
        } loc(#loc21)
        cir.yield loc(#loc14)
      } loc(#loc14)
    } loc(#loc202)
    cir.scope {
      %3 = cir.const #cir.int<7> : !s32i loc(#loc26)
      cir.switch (%3 : !s32i) {
        cir.case(equal, [#cir.int<7> : !s32i]) {
          cir.scope {
            %4 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc206)
            %5 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc32)
            %6 = cir.const #cir.int<1> : !s32i loc(#loc31)
            %7 = cir.cast(integral, %6 : !s32i), !u32i loc(#loc31)
            %8 = cir.binop(add, %5, %7) : !u32i loc(#loc207)
            cir.store %8, %4 : !u32i, !cir.ptr<!u32i> loc(#loc206)
            %9 = cir.load %4 : !cir.ptr<!u32i>, !u32i loc(#loc33)
            cir.call @printUnsignedLine(%9) : (!u32i) -> () loc(#loc34)
          } loc(#loc205)
          cir.break loc(#loc35)
        } loc(#loc27)
        cir.case(default, []) {
          %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc37)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc37)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc38)
          cir.break loc(#loc39)
        } loc(#loc36)
        cir.yield loc(#loc24)
      } loc(#loc24)
    } loc(#loc204)
    cir.return loc(#loc9)
  } loc(#loc199)
  cir.func no_proto @CWE190_Integer_Overflow__unsigned_int_rand_add_15_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<()>> loc(#loc209)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc42)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<()>> loc(#loc210)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc44)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<()>> loc(#loc211)
    cir.call %2() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc46)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<()>> loc(#loc212)
    cir.call %3() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc48)
    cir.return loc(#loc41)
  } loc(#loc208)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc50)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc214)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc55)
    %2 = cir.cast(integral, %1 : !s32i), !u32i loc(#loc55)
    cir.store %2, %0 : !u32i, !cir.ptr<!u32i> loc(#loc215)
    cir.scope {
      %3 = cir.const #cir.int<6> : !s32i loc(#loc59)
      cir.switch (%3 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %4 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc61)
          %5 = cir.const #cir.int<1> : !s32i loc(#loc61)
          %6 = cir.binop(and, %4, %5) : !s32i loc(#loc61)
          %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc61)
          %8 = cir.ternary(%7, true {
            %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc61)
            %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc61)
            %13 = cir.const #cir.int<30> : !s32i loc(#loc61)
            %14 = cir.shift(left, %12 : !u32i, %13 : !s32i) -> !u32i loc(#loc61)
            %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc61)
            %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc61)
            %17 = cir.const #cir.int<15> : !s32i loc(#loc61)
            %18 = cir.shift(left, %16 : !u32i, %17 : !s32i) -> !u32i loc(#loc61)
            %19 = cir.binop(xor, %14, %18) : !u32i loc(#loc61)
            %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc61)
            %21 = cir.cast(integral, %20 : !s32i), !u32i loc(#loc61)
            %22 = cir.binop(xor, %19, %21) : !u32i loc(#loc61)
            cir.yield %22 : !u32i loc(#loc61)
          }, false {
            %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc61)
            %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc61)
            %13 = cir.const #cir.int<30> : !s32i loc(#loc61)
            %14 = cir.shift(left, %12 : !u32i, %13 : !s32i) -> !u32i loc(#loc61)
            %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc61)
            %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc61)
            %17 = cir.const #cir.int<15> : !s32i loc(#loc61)
            %18 = cir.shift(left, %16 : !u32i, %17 : !s32i) -> !u32i loc(#loc61)
            %19 = cir.binop(xor, %14, %18) : !u32i loc(#loc61)
            %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc61)
            %21 = cir.cast(integral, %20 : !s32i), !u32i loc(#loc61)
            %22 = cir.binop(xor, %19, %21) : !u32i loc(#loc61)
            %23 = cir.unary(minus, %22) : !u32i, !u32i loc(#loc61)
            %24 = cir.const #cir.int<1> : !s32i loc(#loc61)
            %25 = cir.cast(integral, %24 : !s32i), !u32i loc(#loc61)
            %26 = cir.binop(sub, %23, %25) : !u32i loc(#loc61)
            cir.yield %26 : !u32i loc(#loc61)
          }) : (!cir.bool) -> !u32i loc(#loc61)
          %9 = cir.cast(integral, %8 : !u32i), !s32i loc(#loc61)
          %10 = cir.cast(integral, %9 : !s32i), !u32i loc(#loc61)
          cir.store %10, %0 : !u32i, !cir.ptr<!u32i> loc(#loc217)
          cir.break loc(#loc63)
        } loc(#loc60)
        cir.case(default, []) {
          %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc65)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc65)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc66)
          cir.break loc(#loc67)
        } loc(#loc64)
        cir.yield loc(#loc57)
      } loc(#loc57)
    } loc(#loc216)
    cir.scope {
      %3 = cir.const #cir.int<8> : !s32i loc(#loc70)
      cir.switch (%3 : !s32i) {
        cir.case(equal, [#cir.int<7> : !s32i]) {
          %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc72)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc72)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc73)
          cir.break loc(#loc74)
        } loc(#loc71)
        cir.case(default, []) {
          cir.scope {
            %4 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc78)
            %5 = cir.const #cir.int<2147483647> : !s32i loc(#loc79)
            %6 = cir.cast(integral, %5 : !s32i), !u32i loc(#loc79)
            %7 = cir.const #cir.int<2> : !u32i loc(#loc79)
            %8 = cir.binop(mul, %6, %7) : !u32i loc(#loc79)
            %9 = cir.const #cir.int<1> : !u32i loc(#loc79)
            %10 = cir.binop(add, %8, %9) : !u32i loc(#loc79)
            %11 = cir.cmp(lt, %4, %10) : !u32i, !cir.bool loc(#loc220)
            cir.if %11 {
              %12 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc222)
              %13 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc85)
              %14 = cir.const #cir.int<1> : !s32i loc(#loc84)
              %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc84)
              %16 = cir.binop(add, %13, %15) : !u32i loc(#loc223)
              cir.store %16, %12 : !u32i, !cir.ptr<!u32i> loc(#loc222)
              %17 = cir.load %12 : !cir.ptr<!u32i>, !u32i loc(#loc86)
              cir.call @printUnsignedLine(%17) : (!u32i) -> () loc(#loc87)
            } else {
              %12 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc50)
              %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc50)
              cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc88)
            } loc(#loc221)
          } loc(#loc219)
          cir.break loc(#loc89)
        } loc(#loc75)
        cir.yield loc(#loc68)
      } loc(#loc68)
    } loc(#loc218)
    cir.return loc(#loc52)
  } loc(#loc213)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc225)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc94)
    %2 = cir.cast(integral, %1 : !s32i), !u32i loc(#loc94)
    cir.store %2, %0 : !u32i, !cir.ptr<!u32i> loc(#loc226)
    cir.scope {
      %3 = cir.const #cir.int<6> : !s32i loc(#loc98)
      cir.switch (%3 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %4 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc100)
          %5 = cir.const #cir.int<1> : !s32i loc(#loc100)
          %6 = cir.binop(and, %4, %5) : !s32i loc(#loc100)
          %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc100)
          %8 = cir.ternary(%7, true {
            %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc100)
            %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc100)
            %13 = cir.const #cir.int<30> : !s32i loc(#loc100)
            %14 = cir.shift(left, %12 : !u32i, %13 : !s32i) -> !u32i loc(#loc100)
            %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc100)
            %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc100)
            %17 = cir.const #cir.int<15> : !s32i loc(#loc100)
            %18 = cir.shift(left, %16 : !u32i, %17 : !s32i) -> !u32i loc(#loc100)
            %19 = cir.binop(xor, %14, %18) : !u32i loc(#loc100)
            %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc100)
            %21 = cir.cast(integral, %20 : !s32i), !u32i loc(#loc100)
            %22 = cir.binop(xor, %19, %21) : !u32i loc(#loc100)
            cir.yield %22 : !u32i loc(#loc100)
          }, false {
            %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc100)
            %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc100)
            %13 = cir.const #cir.int<30> : !s32i loc(#loc100)
            %14 = cir.shift(left, %12 : !u32i, %13 : !s32i) -> !u32i loc(#loc100)
            %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc100)
            %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc100)
            %17 = cir.const #cir.int<15> : !s32i loc(#loc100)
            %18 = cir.shift(left, %16 : !u32i, %17 : !s32i) -> !u32i loc(#loc100)
            %19 = cir.binop(xor, %14, %18) : !u32i loc(#loc100)
            %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc100)
            %21 = cir.cast(integral, %20 : !s32i), !u32i loc(#loc100)
            %22 = cir.binop(xor, %19, %21) : !u32i loc(#loc100)
            %23 = cir.unary(minus, %22) : !u32i, !u32i loc(#loc100)
            %24 = cir.const #cir.int<1> : !s32i loc(#loc100)
            %25 = cir.cast(integral, %24 : !s32i), !u32i loc(#loc100)
            %26 = cir.binop(sub, %23, %25) : !u32i loc(#loc100)
            cir.yield %26 : !u32i loc(#loc100)
          }) : (!cir.bool) -> !u32i loc(#loc100)
          %9 = cir.cast(integral, %8 : !u32i), !s32i loc(#loc100)
          %10 = cir.cast(integral, %9 : !s32i), !u32i loc(#loc100)
          cir.store %10, %0 : !u32i, !cir.ptr<!u32i> loc(#loc228)
          cir.break loc(#loc102)
        } loc(#loc99)
        cir.case(default, []) {
          %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc104)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc104)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc105)
          cir.break loc(#loc106)
        } loc(#loc103)
        cir.yield loc(#loc96)
      } loc(#loc96)
    } loc(#loc227)
    cir.scope {
      %3 = cir.const #cir.int<7> : !s32i loc(#loc109)
      cir.switch (%3 : !s32i) {
        cir.case(equal, [#cir.int<7> : !s32i]) {
          cir.scope {
            %4 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc113)
            %5 = cir.const #cir.int<2147483647> : !s32i loc(#loc114)
            %6 = cir.cast(integral, %5 : !s32i), !u32i loc(#loc114)
            %7 = cir.const #cir.int<2> : !u32i loc(#loc114)
            %8 = cir.binop(mul, %6, %7) : !u32i loc(#loc114)
            %9 = cir.const #cir.int<1> : !u32i loc(#loc114)
            %10 = cir.binop(add, %8, %9) : !u32i loc(#loc114)
            %11 = cir.cmp(lt, %4, %10) : !u32i, !cir.bool loc(#loc231)
            cir.if %11 {
              %12 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc233)
              %13 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc120)
              %14 = cir.const #cir.int<1> : !s32i loc(#loc119)
              %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc119)
              %16 = cir.binop(add, %13, %15) : !u32i loc(#loc234)
              cir.store %16, %12 : !u32i, !cir.ptr<!u32i> loc(#loc233)
              %17 = cir.load %12 : !cir.ptr<!u32i>, !u32i loc(#loc121)
              cir.call @printUnsignedLine(%17) : (!u32i) -> () loc(#loc122)
            } else {
              %12 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc123)
              %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc123)
              cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc124)
            } loc(#loc232)
          } loc(#loc230)
          cir.break loc(#loc125)
        } loc(#loc110)
        cir.case(default, []) {
          %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc127)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc127)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc128)
          cir.break loc(#loc129)
        } loc(#loc126)
        cir.yield loc(#loc107)
      } loc(#loc107)
    } loc(#loc229)
    cir.return loc(#loc91)
  } loc(#loc224)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc236)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc134)
    %2 = cir.cast(integral, %1 : !s32i), !u32i loc(#loc134)
    cir.store %2, %0 : !u32i, !cir.ptr<!u32i> loc(#loc237)
    cir.scope {
      %3 = cir.const #cir.int<5> : !s32i loc(#loc138)
      cir.switch (%3 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc140)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc140)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc141)
          cir.break loc(#loc142)
        } loc(#loc139)
        cir.case(default, []) {
          %4 = cir.const #cir.int<2> : !s32i loc(#loc144)
          %5 = cir.cast(integral, %4 : !s32i), !u32i loc(#loc144)
          cir.store %5, %0 : !u32i, !cir.ptr<!u32i> loc(#loc239)
          cir.break loc(#loc146)
        } loc(#loc143)
        cir.yield loc(#loc136)
      } loc(#loc136)
    } loc(#loc238)
    cir.scope {
      %3 = cir.const #cir.int<7> : !s32i loc(#loc149)
      cir.switch (%3 : !s32i) {
        cir.case(equal, [#cir.int<7> : !s32i]) {
          cir.scope {
            %4 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc242)
            %5 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc155)
            %6 = cir.const #cir.int<1> : !s32i loc(#loc154)
            %7 = cir.cast(integral, %6 : !s32i), !u32i loc(#loc154)
            %8 = cir.binop(add, %5, %7) : !u32i loc(#loc243)
            cir.store %8, %4 : !u32i, !cir.ptr<!u32i> loc(#loc242)
            %9 = cir.load %4 : !cir.ptr<!u32i>, !u32i loc(#loc156)
            cir.call @printUnsignedLine(%9) : (!u32i) -> () loc(#loc157)
          } loc(#loc241)
          cir.break loc(#loc158)
        } loc(#loc150)
        cir.case(default, []) {
          %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc160)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc160)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc161)
          cir.break loc(#loc162)
        } loc(#loc159)
        cir.yield loc(#loc147)
      } loc(#loc147)
    } loc(#loc240)
    cir.return loc(#loc131)
  } loc(#loc235)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc245)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc167)
    %2 = cir.cast(integral, %1 : !s32i), !u32i loc(#loc167)
    cir.store %2, %0 : !u32i, !cir.ptr<!u32i> loc(#loc246)
    cir.scope {
      %3 = cir.const #cir.int<6> : !s32i loc(#loc171)
      cir.switch (%3 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %4 = cir.const #cir.int<2> : !s32i loc(#loc173)
          %5 = cir.cast(integral, %4 : !s32i), !u32i loc(#loc173)
          cir.store %5, %0 : !u32i, !cir.ptr<!u32i> loc(#loc248)
          cir.break loc(#loc175)
        } loc(#loc172)
        cir.case(default, []) {
          %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc177)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc177)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc178)
          cir.break loc(#loc179)
        } loc(#loc176)
        cir.yield loc(#loc169)
      } loc(#loc169)
    } loc(#loc247)
    cir.scope {
      %3 = cir.const #cir.int<7> : !s32i loc(#loc182)
      cir.switch (%3 : !s32i) {
        cir.case(equal, [#cir.int<7> : !s32i]) {
          cir.scope {
            %4 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc251)
            %5 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc188)
            %6 = cir.const #cir.int<1> : !s32i loc(#loc187)
            %7 = cir.cast(integral, %6 : !s32i), !u32i loc(#loc187)
            %8 = cir.binop(add, %5, %7) : !u32i loc(#loc252)
            cir.store %8, %4 : !u32i, !cir.ptr<!u32i> loc(#loc251)
            %9 = cir.load %4 : !cir.ptr<!u32i>, !u32i loc(#loc189)
            cir.call @printUnsignedLine(%9) : (!u32i) -> () loc(#loc190)
          } loc(#loc250)
          cir.break loc(#loc191)
        } loc(#loc183)
        cir.case(default, []) {
          %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc193)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc193)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc194)
          cir.break loc(#loc195)
        } loc(#loc192)
        cir.yield loc(#loc180)
      } loc(#loc180)
    } loc(#loc249)
    cir.return loc(#loc164)
  } loc(#loc244)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc5 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":34:19)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":34:1)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":34:47)
#loc8 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":22:1)
#loc9 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":51:1)
#loc10 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":24:5)
#loc11 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":24:18)
#loc12 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":25:12)
#loc13 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":25:5)
#loc14 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":26:5)
#loc15 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":36:5)
#loc16 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":26:12)
#loc17 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":28:5)
#loc18 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":30:30)
#loc19 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":30:9)
#loc20 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":31:9)
#loc21 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":32:5)
#loc22 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":34:9)
#loc23 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":35:9)
#loc24 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":37:5)
#loc25 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":50:5)
#loc26 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":37:12)
#loc27 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":39:5)
#loc28 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":40:5)
#loc29 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":44:5)
#loc30 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":42:9)
#loc31 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":42:38)
#loc32 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":42:31)
#loc33 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":43:27)
#loc34 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":43:9)
#loc35 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":45:5)
#loc36 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":46:5)
#loc37 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":48:19)
#loc38 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":48:9)
#loc39 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":49:9)
#loc40 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":195:1)
#loc41 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":201:1)
#loc42 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":197:5)
#loc43 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":197:14)
#loc44 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":198:5)
#loc45 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":198:14)
#loc46 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":199:5)
#loc47 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":199:14)
#loc48 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":200:5)
#loc49 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":200:14)
#loc50 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":88:23)
#loc51 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":58:1)
#loc52 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":92:1)
#loc53 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":60:5)
#loc54 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":60:18)
#loc55 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":61:12)
#loc56 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":61:5)
#loc57 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":62:5)
#loc58 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":72:5)
#loc59 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":62:12)
#loc60 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":64:5)
#loc61 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":66:30)
#loc62 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":66:9)
#loc63 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":67:9)
#loc64 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":68:5)
#loc65 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":70:19)
#loc66 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":70:9)
#loc67 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":71:9)
#loc68 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":73:5)
#loc69 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":91:5)
#loc70 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":73:12)
#loc71 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":75:5)
#loc72 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":77:19)
#loc73 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":77:9)
#loc74 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":78:9)
#loc75 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":79:5)
#loc76 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":81:9)
#loc77 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":89:9)
#loc78 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":81:13)
#loc79 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":81:20)
#loc80 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":82:9)
#loc81 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":85:9)
#loc82 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":87:9)
#loc83 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":83:13)
#loc84 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":83:42)
#loc85 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":83:35)
#loc86 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":84:31)
#loc87 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":84:13)
#loc88 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":88:13)
#loc89 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":90:9)
#loc90 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":95:1)
#loc91 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":129:1)
#loc92 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":97:5)
#loc93 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":97:18)
#loc94 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":98:12)
#loc95 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":98:5)
#loc96 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":99:5)
#loc97 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":109:5)
#loc98 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":99:12)
#loc99 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":101:5)
#loc100 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":103:30)
#loc101 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":103:9)
#loc102 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":104:9)
#loc103 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":105:5)
#loc104 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":107:19)
#loc105 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":107:9)
#loc106 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":108:9)
#loc107 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":110:5)
#loc108 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":128:5)
#loc109 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":110:12)
#loc110 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":112:5)
#loc111 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":114:9)
#loc112 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":122:9)
#loc113 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":114:13)
#loc114 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":114:20)
#loc115 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":115:9)
#loc116 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":118:9)
#loc117 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":120:9)
#loc118 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":116:13)
#loc119 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":116:42)
#loc120 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":116:35)
#loc121 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":117:31)
#loc122 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":117:13)
#loc123 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":121:23)
#loc124 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":121:13)
#loc125 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":123:9)
#loc126 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":124:5)
#loc127 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":126:19)
#loc128 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":126:9)
#loc129 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":127:9)
#loc130 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":132:1)
#loc131 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":161:1)
#loc132 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":134:5)
#loc133 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":134:18)
#loc134 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":135:12)
#loc135 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":135:5)
#loc136 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":136:5)
#loc137 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":146:5)
#loc138 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":136:12)
#loc139 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":138:5)
#loc140 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":140:19)
#loc141 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":140:9)
#loc142 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":141:9)
#loc143 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":142:5)
#loc144 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":144:16)
#loc145 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":144:9)
#loc146 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":145:9)
#loc147 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":147:5)
#loc148 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":160:5)
#loc149 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":147:12)
#loc150 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":149:5)
#loc151 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":150:5)
#loc152 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":154:5)
#loc153 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":152:9)
#loc154 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":152:38)
#loc155 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":152:31)
#loc156 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":153:27)
#loc157 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":153:9)
#loc158 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":155:5)
#loc159 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":156:5)
#loc160 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":158:19)
#loc161 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":158:9)
#loc162 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":159:9)
#loc163 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":164:1)
#loc164 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":193:1)
#loc165 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":166:5)
#loc166 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":166:18)
#loc167 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":167:12)
#loc168 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":167:5)
#loc169 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":168:5)
#loc170 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":178:5)
#loc171 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":168:12)
#loc172 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":170:5)
#loc173 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":172:16)
#loc174 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":172:9)
#loc175 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":173:9)
#loc176 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":174:5)
#loc177 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":176:19)
#loc178 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":176:9)
#loc179 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":177:9)
#loc180 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":179:5)
#loc181 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":192:5)
#loc182 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":179:12)
#loc183 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":181:5)
#loc184 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":182:5)
#loc185 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":186:5)
#loc186 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":184:9)
#loc187 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":184:38)
#loc188 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":184:31)
#loc189 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":185:27)
#loc190 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":185:9)
#loc191 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":187:5)
#loc192 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":188:5)
#loc193 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":190:19)
#loc194 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":190:9)
#loc195 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_15.c":191:9)
#loc196 = loc(fused[#loc1, #loc2])
#loc197 = loc(fused[#loc3, #loc4])
#loc198 = loc(fused[#loc6, #loc7])
#loc199 = loc(fused[#loc8, #loc9])
#loc200 = loc(fused[#loc10, #loc11])
#loc201 = loc(fused[#loc13, #loc12])
#loc202 = loc(fused[#loc14, #loc15])
#loc203 = loc(fused[#loc19, #loc18])
#loc204 = loc(fused[#loc24, #loc25])
#loc205 = loc(fused[#loc28, #loc29])
#loc206 = loc(fused[#loc30, #loc31])
#loc207 = loc(fused[#loc32, #loc31])
#loc208 = loc(fused[#loc40, #loc41])
#loc209 = loc(fused[#loc42, #loc43])
#loc210 = loc(fused[#loc44, #loc45])
#loc211 = loc(fused[#loc46, #loc47])
#loc212 = loc(fused[#loc48, #loc49])
#loc213 = loc(fused[#loc51, #loc52])
#loc214 = loc(fused[#loc53, #loc54])
#loc215 = loc(fused[#loc56, #loc55])
#loc216 = loc(fused[#loc57, #loc58])
#loc217 = loc(fused[#loc62, #loc61])
#loc218 = loc(fused[#loc68, #loc69])
#loc219 = loc(fused[#loc76, #loc77])
#loc220 = loc(fused[#loc78, #loc79])
#loc221 = loc(fused[#loc80, #loc81, #loc82, #loc77])
#loc222 = loc(fused[#loc83, #loc84])
#loc223 = loc(fused[#loc85, #loc84])
#loc224 = loc(fused[#loc90, #loc91])
#loc225 = loc(fused[#loc92, #loc93])
#loc226 = loc(fused[#loc95, #loc94])
#loc227 = loc(fused[#loc96, #loc97])
#loc228 = loc(fused[#loc101, #loc100])
#loc229 = loc(fused[#loc107, #loc108])
#loc230 = loc(fused[#loc111, #loc112])
#loc231 = loc(fused[#loc113, #loc114])
#loc232 = loc(fused[#loc115, #loc116, #loc117, #loc112])
#loc233 = loc(fused[#loc118, #loc119])
#loc234 = loc(fused[#loc120, #loc119])
#loc235 = loc(fused[#loc130, #loc131])
#loc236 = loc(fused[#loc132, #loc133])
#loc237 = loc(fused[#loc135, #loc134])
#loc238 = loc(fused[#loc136, #loc137])
#loc239 = loc(fused[#loc145, #loc144])
#loc240 = loc(fused[#loc147, #loc148])
#loc241 = loc(fused[#loc151, #loc152])
#loc242 = loc(fused[#loc153, #loc154])
#loc243 = loc(fused[#loc155, #loc154])
#loc244 = loc(fused[#loc163, #loc164])
#loc245 = loc(fused[#loc165, #loc166])
#loc246 = loc(fused[#loc168, #loc167])
#loc247 = loc(fused[#loc169, #loc170])
#loc248 = loc(fused[#loc174, #loc173])
#loc249 = loc(fused[#loc180, #loc181])
#loc250 = loc(fused[#loc184, #loc185])
#loc251 = loc(fused[#loc186, #loc187])
#loc252 = loc(fused[#loc188, #loc187])
