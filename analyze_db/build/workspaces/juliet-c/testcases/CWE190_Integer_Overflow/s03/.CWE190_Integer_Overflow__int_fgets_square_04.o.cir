!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.record<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.record<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.record<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#true = #cir.bool<true> : !cir.bool
!ty__IO_FILE = !cir.record<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_fgets_square_04.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e", "dlti.endianness" = "little">} {
  cir.func private @fgets(!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc225)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc226)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc227)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc228)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"fgets() failed.\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc9)
  cir.func private @printIntLine(!s32i) loc(#loc229)
  cir.func no_proto @CWE190_Integer_Overflow__int_fgets_square_04_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc231)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc16)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc232)
    cir.scope {
      %2 = cir.const #cir.int<1> : !s32i loc(#loc20)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc20)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc236)
          %5 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc236)
          cir.store %5, %4 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc236)
          cir.scope {
            %6 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc28)
            %7 = cir.const #cir.int<3> : !s32i loc(#loc29)
            %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc29)
            %9 = cir.const #cir.int<4> : !u64i loc(#loc29)
            %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc29)
            %11 = cir.const #cir.int<2> : !s32i loc(#loc29)
            %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc29)
            %13 = cir.binop(add, %10, %12) : !u64i loc(#loc29)
            %14 = cir.cast(integral, %13 : !u64i), !s32i loc(#loc29)
            %15 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc226)
            %16 = cir.load %15 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc30)
            %17 = cir.call @fgets(%6, %14, %16) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc31)
            %18 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc32)
            %19 = cir.cast(bitcast, %18 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc32)
            %20 = cir.cmp(ne, %17, %19) : !cir.ptr<!s8i>, !cir.bool loc(#loc238)
            cir.if %20 {
              %21 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc36)
              %22 = cir.call @atoi(%21) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc37)
              cir.store %22, %0 : !s32i, !cir.ptr<!s32i> loc(#loc240)
            } else {
              %21 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc9)
              %22 = cir.cast(array_to_ptrdecay, %21 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc9)
              cir.call @printLine(%22) : (!cir.ptr<!s8i>) -> () loc(#loc40)
            } loc(#loc239)
          } loc(#loc237)
        } loc(#loc235)
      } loc(#loc234)
    } loc(#loc233)
    cir.scope {
      %2 = cir.const #cir.int<1> : !s32i loc(#loc43)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc43)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc244)
          %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc49)
          %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc48)
          %7 = cir.binop(mul, %5, %6) nsw : !s32i loc(#loc49)
          cir.store %7, %4 : !s32i, !cir.ptr<!s32i> loc(#loc244)
          %8 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc50)
          cir.call @printIntLine(%8) : (!s32i) -> () loc(#loc51)
        } loc(#loc243)
      } loc(#loc242)
    } loc(#loc241)
    cir.return loc(#loc13)
  } loc(#loc230)
  cir.func no_proto @CWE190_Integer_Overflow__int_fgets_square_04_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<()>> loc(#loc246)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc54)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<()>> loc(#loc247)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc56)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<()>> loc(#loc248)
    cir.call %2() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc58)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<()>> loc(#loc249)
    cir.call %3() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc60)
    cir.return loc(#loc53)
  } loc(#loc245)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc62)
  cir.func private @sqrt(!cir.double) -> !cir.double extra(#fn_attr) loc(#loc63)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc64)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc251)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc69)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc252)
    cir.scope {
      %2 = cir.const #cir.int<1> : !s32i loc(#loc73)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc73)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc256)
          %5 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc256)
          cir.store %5, %4 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc256)
          cir.scope {
            %6 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc81)
            %7 = cir.const #cir.int<3> : !s32i loc(#loc82)
            %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc82)
            %9 = cir.const #cir.int<4> : !u64i loc(#loc82)
            %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc82)
            %11 = cir.const #cir.int<2> : !s32i loc(#loc82)
            %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc82)
            %13 = cir.binop(add, %10, %12) : !u64i loc(#loc82)
            %14 = cir.cast(integral, %13 : !u64i), !s32i loc(#loc82)
            %15 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc226)
            %16 = cir.load %15 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc83)
            %17 = cir.call @fgets(%6, %14, %16) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc84)
            %18 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc85)
            %19 = cir.cast(bitcast, %18 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc85)
            %20 = cir.cmp(ne, %17, %19) : !cir.ptr<!s8i>, !cir.bool loc(#loc258)
            cir.if %20 {
              %21 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc89)
              %22 = cir.call @atoi(%21) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc90)
              cir.store %22, %0 : !s32i, !cir.ptr<!s32i> loc(#loc260)
            } else {
              %21 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc93)
              %22 = cir.cast(array_to_ptrdecay, %21 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc93)
              cir.call @printLine(%22) : (!cir.ptr<!s8i>) -> () loc(#loc94)
            } loc(#loc259)
          } loc(#loc257)
        } loc(#loc255)
      } loc(#loc254)
    } loc(#loc253)
    cir.scope {
      %2 = cir.const #cir.int<0> : !s32i loc(#loc97)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc97)
      cir.if %3 {
        %4 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc62)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc62)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc101)
      } else {
        cir.scope {
          %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc104)
          %5 = cir.const #cir.int<2147483647> : !s32i loc(#loc105)
          %6 = cir.unary(minus, %5) nsw : !s32i, !s32i loc(#loc105)
          %7 = cir.const #cir.int<1> : !s32i loc(#loc105)
          %8 = cir.binop(sub, %6, %7) nsw : !s32i loc(#loc105)
          %9 = cir.cmp(gt, %4, %8) : !s32i, !cir.bool loc(#loc264)
          %10 = cir.ternary(%9, true {
            %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc107)
            %12 = cir.abs %11 poison : !s32i loc(#loc108)
            %13 = cir.cast(integral, %12 : !s32i), !s64i loc(#loc108)
            %14 = cir.get_global @sqrt : !cir.ptr<!cir.func<(!cir.double) -> !cir.double>> loc(#loc109)
            %15 = cir.const #cir.int<2147483647> : !s32i loc(#loc110)
            %16 = cir.cast(int_to_float, %15 : !s32i), !cir.double loc(#loc110)
            %17 = cir.call @sqrt(%16) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc109)
            %18 = cir.cast(float_to_int, %17 : !cir.double), !s64i loc(#loc109)
            %19 = cir.cmp(lt, %13, %18) : !s64i, !cir.bool loc(#loc265)
            %20 = cir.ternary(%19, true {
              %21 = cir.const #true loc(#loc106)
              cir.yield %21 : !cir.bool loc(#loc106)
            }, false {
              %21 = cir.const #false loc(#loc106)
              cir.yield %21 : !cir.bool loc(#loc106)
            }) : (!cir.bool) -> !cir.bool loc(#loc106)
            cir.yield %20 : !cir.bool loc(#loc106)
          }, false {
            %11 = cir.const #false loc(#loc106)
            cir.yield %11 : !cir.bool loc(#loc106)
          }) : (!cir.bool) -> !cir.bool loc(#loc106)
          cir.if %10 {
            %11 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc267)
            %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc117)
            %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc116)
            %14 = cir.binop(mul, %12, %13) nsw : !s32i loc(#loc117)
            cir.store %14, %11 : !s32i, !cir.ptr<!s32i> loc(#loc267)
            %15 = cir.load %11 : !cir.ptr<!s32i>, !s32i loc(#loc118)
            cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc119)
          } else {
            %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc64)
            %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc64)
            cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc120)
          } loc(#loc266)
        } loc(#loc263)
      } loc(#loc262)
    } loc(#loc261)
    cir.return loc(#loc66)
  } loc(#loc250)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc269)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc125)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc270)
    cir.scope {
      %2 = cir.const #cir.int<1> : !s32i loc(#loc129)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc129)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc274)
          %5 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc274)
          cir.store %5, %4 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc274)
          cir.scope {
            %6 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc137)
            %7 = cir.const #cir.int<3> : !s32i loc(#loc138)
            %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc138)
            %9 = cir.const #cir.int<4> : !u64i loc(#loc138)
            %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc138)
            %11 = cir.const #cir.int<2> : !s32i loc(#loc138)
            %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc138)
            %13 = cir.binop(add, %10, %12) : !u64i loc(#loc138)
            %14 = cir.cast(integral, %13 : !u64i), !s32i loc(#loc138)
            %15 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc226)
            %16 = cir.load %15 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc139)
            %17 = cir.call @fgets(%6, %14, %16) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc140)
            %18 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc141)
            %19 = cir.cast(bitcast, %18 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc141)
            %20 = cir.cmp(ne, %17, %19) : !cir.ptr<!s8i>, !cir.bool loc(#loc276)
            cir.if %20 {
              %21 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc145)
              %22 = cir.call @atoi(%21) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc146)
              cir.store %22, %0 : !s32i, !cir.ptr<!s32i> loc(#loc278)
            } else {
              %21 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc149)
              %22 = cir.cast(array_to_ptrdecay, %21 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc149)
              cir.call @printLine(%22) : (!cir.ptr<!s8i>) -> () loc(#loc150)
            } loc(#loc277)
          } loc(#loc275)
        } loc(#loc273)
      } loc(#loc272)
    } loc(#loc271)
    cir.scope {
      %2 = cir.const #cir.int<1> : !s32i loc(#loc153)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc153)
      cir.if %3 {
        cir.scope {
          %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc157)
          %5 = cir.const #cir.int<2147483647> : !s32i loc(#loc158)
          %6 = cir.unary(minus, %5) nsw : !s32i, !s32i loc(#loc158)
          %7 = cir.const #cir.int<1> : !s32i loc(#loc158)
          %8 = cir.binop(sub, %6, %7) nsw : !s32i loc(#loc158)
          %9 = cir.cmp(gt, %4, %8) : !s32i, !cir.bool loc(#loc282)
          %10 = cir.ternary(%9, true {
            %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc160)
            %12 = cir.abs %11 poison : !s32i loc(#loc161)
            %13 = cir.cast(integral, %12 : !s32i), !s64i loc(#loc161)
            %14 = cir.get_global @sqrt : !cir.ptr<!cir.func<(!cir.double) -> !cir.double>> loc(#loc162)
            %15 = cir.const #cir.int<2147483647> : !s32i loc(#loc163)
            %16 = cir.cast(int_to_float, %15 : !s32i), !cir.double loc(#loc163)
            %17 = cir.call @sqrt(%16) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc162)
            %18 = cir.cast(float_to_int, %17 : !cir.double), !s64i loc(#loc162)
            %19 = cir.cmp(lt, %13, %18) : !s64i, !cir.bool loc(#loc283)
            %20 = cir.ternary(%19, true {
              %21 = cir.const #true loc(#loc159)
              cir.yield %21 : !cir.bool loc(#loc159)
            }, false {
              %21 = cir.const #false loc(#loc159)
              cir.yield %21 : !cir.bool loc(#loc159)
            }) : (!cir.bool) -> !cir.bool loc(#loc159)
            cir.yield %20 : !cir.bool loc(#loc159)
          }, false {
            %11 = cir.const #false loc(#loc159)
            cir.yield %11 : !cir.bool loc(#loc159)
          }) : (!cir.bool) -> !cir.bool loc(#loc159)
          cir.if %10 {
            %11 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc285)
            %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc170)
            %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc169)
            %14 = cir.binop(mul, %12, %13) nsw : !s32i loc(#loc170)
            cir.store %14, %11 : !s32i, !cir.ptr<!s32i> loc(#loc285)
            %15 = cir.load %11 : !cir.ptr<!s32i>, !s32i loc(#loc171)
            cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc172)
          } else {
            %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc173)
            %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc173)
            cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc174)
          } loc(#loc284)
        } loc(#loc281)
      } loc(#loc280)
    } loc(#loc279)
    cir.return loc(#loc122)
  } loc(#loc268)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc287)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc179)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc288)
    cir.scope {
      %2 = cir.const #cir.int<0> : !s32i loc(#loc183)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc183)
      cir.if %3 {
        %4 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc187)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc187)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc188)
      } else {
        %4 = cir.const #cir.int<2> : !s32i loc(#loc189)
        cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc291)
      } loc(#loc290)
    } loc(#loc289)
    cir.scope {
      %2 = cir.const #cir.int<1> : !s32i loc(#loc193)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc193)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc295)
          %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc199)
          %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc198)
          %7 = cir.binop(mul, %5, %6) nsw : !s32i loc(#loc199)
          cir.store %7, %4 : !s32i, !cir.ptr<!s32i> loc(#loc295)
          %8 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc200)
          cir.call @printIntLine(%8) : (!s32i) -> () loc(#loc201)
        } loc(#loc294)
      } loc(#loc293)
    } loc(#loc292)
    cir.return loc(#loc176)
  } loc(#loc286)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc297)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc206)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc298)
    cir.scope {
      %2 = cir.const #cir.int<1> : !s32i loc(#loc210)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc210)
      cir.if %3 {
        %4 = cir.const #cir.int<2> : !s32i loc(#loc212)
        cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc301)
      } loc(#loc300)
    } loc(#loc299)
    cir.scope {
      %2 = cir.const #cir.int<1> : !s32i loc(#loc216)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc216)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc305)
          %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc222)
          %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc221)
          %7 = cir.binop(mul, %5, %6) nsw : !s32i loc(#loc222)
          cir.store %7, %4 : !s32i, !cir.ptr<!s32i> loc(#loc305)
          %8 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc223)
          cir.call @printIntLine(%8) : (!s32i) -> () loc(#loc224)
        } loc(#loc304)
      } loc(#loc303)
    } loc(#loc302)
    cir.return loc(#loc203)
  } loc(#loc296)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_fgets_square_04.c":0:0)
#loc1 = loc("/usr/include/stdio.h":654:1)
#loc2 = loc("/usr/include/stdio.h":655:59)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("/usr/include/stdlib.h":105:1)
#loc6 = loc("/usr/include/stdlib.h":106:33)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":49:27)
#loc10 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc11 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc12 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":32:1)
#loc13 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":61:1)
#loc14 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":34:5)
#loc15 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":34:9)
#loc16 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":36:12)
#loc17 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":36:5)
#loc18 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":37:5)
#loc19 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":52:5)
#loc20 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":37:8)
#loc21 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":38:5)
#loc22 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":39:9)
#loc23 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":51:9)
#loc24 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":40:13)
#loc25 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":40:49)
#loc26 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":42:13)
#loc27 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":50:13)
#loc28 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":42:23)
#loc29 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":42:36)
#loc30 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":42:53)
#loc31 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":42:17)
#loc32 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":42:63)
#loc33 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":43:13)
#loc34 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":46:13)
#loc35 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":48:13)
#loc36 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":45:29)
#loc37 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":45:24)
#loc38 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":45:17)
#loc39 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":45:40)
#loc40 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":49:17)
#loc41 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":53:5)
#loc42 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":60:5)
#loc43 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":53:8)
#loc44 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":54:5)
#loc45 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":55:9)
#loc46 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":59:9)
#loc47 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":57:13)
#loc48 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":57:33)
#loc49 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":57:26)
#loc50 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":58:26)
#loc51 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":58:13)
#loc52 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":193:1)
#loc53 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":199:1)
#loc54 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":195:5)
#loc55 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":195:14)
#loc56 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":196:5)
#loc57 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":196:14)
#loc58 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":197:5)
#loc59 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":197:14)
#loc60 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":198:5)
#loc61 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":198:14)
#loc62 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":92:19)
#loc63 = loc("/usr/include/x86_64-linux-gnu/bits/mathcalls.h":143:1)
#loc64 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":104:23)
#loc65 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":68:1)
#loc66 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":107:1)
#loc67 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":70:5)
#loc68 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":70:9)
#loc69 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":72:12)
#loc70 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":72:5)
#loc71 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":73:5)
#loc72 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":88:5)
#loc73 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":73:8)
#loc74 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":74:5)
#loc75 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":75:9)
#loc76 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":87:9)
#loc77 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":76:13)
#loc78 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":76:49)
#loc79 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":78:13)
#loc80 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":86:13)
#loc81 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":78:23)
#loc82 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":78:36)
#loc83 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":78:53)
#loc84 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":78:17)
#loc85 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":78:63)
#loc86 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":79:13)
#loc87 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":82:13)
#loc88 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":84:13)
#loc89 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":81:29)
#loc90 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":81:24)
#loc91 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":81:17)
#loc92 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":81:40)
#loc93 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":85:27)
#loc94 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":85:17)
#loc95 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":89:5)
#loc96 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":106:5)
#loc97 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":89:8)
#loc98 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":90:5)
#loc99 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":93:5)
#loc100 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":95:5)
#loc101 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":92:9)
#loc102 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":97:9)
#loc103 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":105:9)
#loc104 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":97:13)
#loc105 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":97:20)
#loc106 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":97:28)
#loc107 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":97:35)
#loc108 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":97:31)
#loc109 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":97:49)
#loc110 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":97:62)
#loc111 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":97:69)
#loc112 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":98:9)
#loc113 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":101:9)
#loc114 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":103:9)
#loc115 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":99:13)
#loc116 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":99:33)
#loc117 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":99:26)
#loc118 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":100:26)
#loc119 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":100:13)
#loc120 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":104:13)
#loc121 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":110:1)
#loc122 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":144:1)
#loc123 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":112:5)
#loc124 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":112:9)
#loc125 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":114:12)
#loc126 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":114:5)
#loc127 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":115:5)
#loc128 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":130:5)
#loc129 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":115:8)
#loc130 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":116:5)
#loc131 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":117:9)
#loc132 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":129:9)
#loc133 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":118:13)
#loc134 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":118:49)
#loc135 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":120:13)
#loc136 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":128:13)
#loc137 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":120:23)
#loc138 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":120:36)
#loc139 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":120:53)
#loc140 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":120:17)
#loc141 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":120:63)
#loc142 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":121:13)
#loc143 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":124:13)
#loc144 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":126:13)
#loc145 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":123:29)
#loc146 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":123:24)
#loc147 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":123:17)
#loc148 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":123:40)
#loc149 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":127:27)
#loc150 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":127:17)
#loc151 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":131:5)
#loc152 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":143:5)
#loc153 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":131:8)
#loc154 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":132:5)
#loc155 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":134:9)
#loc156 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":142:9)
#loc157 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":134:13)
#loc158 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":134:20)
#loc159 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":134:28)
#loc160 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":134:35)
#loc161 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":134:31)
#loc162 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":134:49)
#loc163 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":134:62)
#loc164 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":134:69)
#loc165 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":135:9)
#loc166 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":138:9)
#loc167 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":140:9)
#loc168 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":136:13)
#loc169 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":136:33)
#loc170 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":136:26)
#loc171 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":137:26)
#loc172 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":137:13)
#loc173 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":141:23)
#loc174 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":141:13)
#loc175 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":147:1)
#loc176 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":170:1)
#loc177 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":149:5)
#loc178 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":149:9)
#loc179 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":151:12)
#loc180 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":151:5)
#loc181 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":152:5)
#loc182 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":161:5)
#loc183 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":152:8)
#loc184 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":153:5)
#loc185 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":156:5)
#loc186 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":158:5)
#loc187 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":155:19)
#loc188 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":155:9)
#loc189 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":160:16)
#loc190 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":160:9)
#loc191 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":162:5)
#loc192 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":169:5)
#loc193 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":162:8)
#loc194 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":163:5)
#loc195 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":164:9)
#loc196 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":168:9)
#loc197 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":166:13)
#loc198 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":166:33)
#loc199 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":166:26)
#loc200 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":167:26)
#loc201 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":167:13)
#loc202 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":173:1)
#loc203 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":191:1)
#loc204 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":175:5)
#loc205 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":175:9)
#loc206 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":177:12)
#loc207 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":177:5)
#loc208 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":178:5)
#loc209 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":182:5)
#loc210 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":178:8)
#loc211 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":179:5)
#loc212 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":181:16)
#loc213 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":181:9)
#loc214 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":183:5)
#loc215 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":190:5)
#loc216 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":183:8)
#loc217 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":184:5)
#loc218 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":185:9)
#loc219 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":189:9)
#loc220 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":187:13)
#loc221 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":187:33)
#loc222 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":187:26)
#loc223 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":188:26)
#loc224 = loc("CWE190_Integer_Overflow__int_fgets_square_04.c":188:13)
#loc225 = loc(fused[#loc1, #loc2])
#loc226 = loc(fused[#loc3, #loc4])
#loc227 = loc(fused[#loc5, #loc6])
#loc228 = loc(fused[#loc7, #loc8])
#loc229 = loc(fused[#loc10, #loc11])
#loc230 = loc(fused[#loc12, #loc13])
#loc231 = loc(fused[#loc14, #loc15])
#loc232 = loc(fused[#loc17, #loc16])
#loc233 = loc(fused[#loc18, #loc19])
#loc234 = loc(fused[#loc21, #loc19])
#loc235 = loc(fused[#loc22, #loc23])
#loc236 = loc(fused[#loc24, #loc25])
#loc237 = loc(fused[#loc26, #loc27])
#loc238 = loc(fused[#loc31, #loc32])
#loc239 = loc(fused[#loc33, #loc34, #loc35, #loc27])
#loc240 = loc(fused[#loc38, #loc39])
#loc241 = loc(fused[#loc41, #loc42])
#loc242 = loc(fused[#loc44, #loc42])
#loc243 = loc(fused[#loc45, #loc46])
#loc244 = loc(fused[#loc47, #loc48])
#loc245 = loc(fused[#loc52, #loc53])
#loc246 = loc(fused[#loc54, #loc55])
#loc247 = loc(fused[#loc56, #loc57])
#loc248 = loc(fused[#loc58, #loc59])
#loc249 = loc(fused[#loc60, #loc61])
#loc250 = loc(fused[#loc65, #loc66])
#loc251 = loc(fused[#loc67, #loc68])
#loc252 = loc(fused[#loc70, #loc69])
#loc253 = loc(fused[#loc71, #loc72])
#loc254 = loc(fused[#loc74, #loc72])
#loc255 = loc(fused[#loc75, #loc76])
#loc256 = loc(fused[#loc77, #loc78])
#loc257 = loc(fused[#loc79, #loc80])
#loc258 = loc(fused[#loc84, #loc85])
#loc259 = loc(fused[#loc86, #loc87, #loc88, #loc80])
#loc260 = loc(fused[#loc91, #loc92])
#loc261 = loc(fused[#loc95, #loc96])
#loc262 = loc(fused[#loc98, #loc99, #loc100, #loc96])
#loc263 = loc(fused[#loc102, #loc103])
#loc264 = loc(fused[#loc104, #loc105])
#loc265 = loc(fused[#loc108, #loc111])
#loc266 = loc(fused[#loc112, #loc113, #loc114, #loc103])
#loc267 = loc(fused[#loc115, #loc116])
#loc268 = loc(fused[#loc121, #loc122])
#loc269 = loc(fused[#loc123, #loc124])
#loc270 = loc(fused[#loc126, #loc125])
#loc271 = loc(fused[#loc127, #loc128])
#loc272 = loc(fused[#loc130, #loc128])
#loc273 = loc(fused[#loc131, #loc132])
#loc274 = loc(fused[#loc133, #loc134])
#loc275 = loc(fused[#loc135, #loc136])
#loc276 = loc(fused[#loc140, #loc141])
#loc277 = loc(fused[#loc142, #loc143, #loc144, #loc136])
#loc278 = loc(fused[#loc147, #loc148])
#loc279 = loc(fused[#loc151, #loc152])
#loc280 = loc(fused[#loc154, #loc152])
#loc281 = loc(fused[#loc155, #loc156])
#loc282 = loc(fused[#loc157, #loc158])
#loc283 = loc(fused[#loc161, #loc164])
#loc284 = loc(fused[#loc165, #loc166, #loc167, #loc156])
#loc285 = loc(fused[#loc168, #loc169])
#loc286 = loc(fused[#loc175, #loc176])
#loc287 = loc(fused[#loc177, #loc178])
#loc288 = loc(fused[#loc180, #loc179])
#loc289 = loc(fused[#loc181, #loc182])
#loc290 = loc(fused[#loc184, #loc185, #loc186, #loc182])
#loc291 = loc(fused[#loc190, #loc189])
#loc292 = loc(fused[#loc191, #loc192])
#loc293 = loc(fused[#loc194, #loc192])
#loc294 = loc(fused[#loc195, #loc196])
#loc295 = loc(fused[#loc197, #loc198])
#loc296 = loc(fused[#loc202, #loc203])
#loc297 = loc(fused[#loc204, #loc205])
#loc298 = loc(fused[#loc207, #loc206])
#loc299 = loc(fused[#loc208, #loc209])
#loc300 = loc(fused[#loc211, #loc209])
#loc301 = loc(fused[#loc213, #loc212])
#loc302 = loc(fused[#loc214, #loc215])
#loc303 = loc(fused[#loc217, #loc215])
#loc304 = loc(fused[#loc218, #loc219])
#loc305 = loc(fused[#loc220, #loc221])
