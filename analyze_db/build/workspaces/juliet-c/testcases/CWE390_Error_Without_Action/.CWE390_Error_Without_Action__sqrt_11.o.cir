!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE390_Error_Without_Action/CWE390_Error_Without_Action__sqrt_11.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f80 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little", "dlti.mangling_mode" = "e">} {
  cir.func no_proto private @globalReturnsTrue(...) -> !s32i loc(#loc107)
  cir.func private @__errno_location() -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc108)
  cir.func private @sqrt(!cir.double) -> !cir.double extra(#fn_attr) loc(#loc5)
  cir.func private @printDoubleLine(!cir.double) loc(#loc109)
  cir.func no_proto @CWE390_Error_Without_Action__sqrt_11_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.double, !cir.ptr<!cir.double>, ["doubleNumber"] {alignment = 8 : i64} loc(#loc111)
    cir.br ^bb1 loc(#loc112)
  ^bb1:  // pred: ^bb0
    %1 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc113)
    %2 = cir.cast(bitcast, %1 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc113)
    %3 = cir.call %2() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc14)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc14)
    cir.brcond %4 ^bb2, ^bb9 loc(#loc114)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc115)
  ^bb3:  // pred: ^bb2
    %5 = cir.const #cir.int<0> : !s32i loc(#loc19)
    %6 = cir.call @__errno_location() : () -> !cir.ptr<!s32i> side_effect(const) extra(#fn_attr) loc(#loc20)
    cir.store %5, %6 : !s32i, !cir.ptr<!s32i> loc(#loc116)
    %7 = cir.get_global @sqrt : !cir.ptr<!cir.func<(!cir.double) -> !cir.double>> loc(#loc21)
    %8 = cir.const #cir.int<1> : !s32i loc(#loc22)
    %9 = cir.unary(minus, %8) nsw : !s32i, !s32i loc(#loc23)
    %10 = cir.cast(int_to_float, %9 : !s32i), !cir.double loc(#loc23)
    %11 = cir.call @sqrt(%10) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc21)
    cir.store %11, %0 : !cir.double, !cir.ptr<!cir.double> loc(#loc117)
    cir.br ^bb4 loc(#loc118)
  ^bb4:  // pred: ^bb3
    %12 = cir.call @__errno_location() : () -> !cir.ptr<!s32i> side_effect(const) extra(#fn_attr) loc(#loc28)
    %13 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc28)
    %14 = cir.const #cir.int<33> : !s32i loc(#loc29)
    %15 = cir.cmp(eq, %13, %14) : !s32i, !cir.bool loc(#loc119)
    cir.brcond %15 ^bb5, ^bb6 loc(#loc120)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc27)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc27)
  ^bb7:  // pred: ^bb6
    %16 = cir.load %0 : !cir.ptr<!cir.double>, !cir.double loc(#loc31)
    cir.call @printDoubleLine(%16) : (!cir.double) -> () loc(#loc32)
    cir.br ^bb8 loc(#loc18)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc13)
  ^bb9:  // 2 preds: ^bb1, ^bb8
    cir.br ^bb10 loc(#loc13)
  ^bb10:  // pred: ^bb9
    cir.return loc(#loc9)
  } loc(#loc110)
  cir.func no_proto @CWE390_Error_Without_Action__sqrt_11_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<()>> loc(#loc122)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc35)
    %1 = cir.get_global @good2 : !cir.ptr<!cir.func<()>> loc(#loc123)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc37)
    cir.return loc(#loc34)
  } loc(#loc121)
  cir.func no_proto private @globalReturnsFalse(...) -> !s32i loc(#loc124)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc125)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc43)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"sqrt() failed\00" : !cir.array<!s8i x 14>> : !cir.array<!s8i x 14> {alignment = 1 : i64} loc(#loc44)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc126)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.double, !cir.ptr<!cir.double>, ["doubleNumber"] {alignment = 8 : i64} loc(#loc128)
    cir.br ^bb1 loc(#loc129)
  ^bb1:  // pred: ^bb0
    %1 = cir.get_global @globalReturnsFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc130)
    %2 = cir.cast(bitcast, %1 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc130)
    %3 = cir.call %2() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc53)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc53)
    cir.brcond %4 ^bb2, ^bb3 loc(#loc131)
  ^bb2:  // pred: ^bb1
    %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc43)
    %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc43)
    cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc58)
    cir.br ^bb10 loc(#loc56)
  ^bb3:  // pred: ^bb1
    cir.br ^bb4 loc(#loc132)
  ^bb4:  // pred: ^bb3
    %7 = cir.const #cir.int<0> : !s32i loc(#loc61)
    %8 = cir.call @__errno_location() : () -> !cir.ptr<!s32i> side_effect(const) extra(#fn_attr) loc(#loc62)
    cir.store %7, %8 : !s32i, !cir.ptr<!s32i> loc(#loc133)
    %9 = cir.get_global @sqrt : !cir.ptr<!cir.func<(!cir.double) -> !cir.double>> loc(#loc63)
    %10 = cir.const #cir.int<1> : !s32i loc(#loc64)
    %11 = cir.unary(minus, %10) nsw : !s32i, !s32i loc(#loc65)
    %12 = cir.cast(int_to_float, %11 : !s32i), !cir.double loc(#loc65)
    %13 = cir.call @sqrt(%12) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc63)
    cir.store %13, %0 : !cir.double, !cir.ptr<!cir.double> loc(#loc134)
    cir.br ^bb5 loc(#loc135)
  ^bb5:  // pred: ^bb4
    %14 = cir.call @__errno_location() : () -> !cir.ptr<!s32i> side_effect(const) extra(#fn_attr) loc(#loc70)
    %15 = cir.load %14 : !cir.ptr<!s32i>, !s32i loc(#loc70)
    %16 = cir.const #cir.int<33> : !s32i loc(#loc71)
    %17 = cir.cmp(eq, %15, %16) : !s32i, !cir.bool loc(#loc136)
    cir.brcond %17 ^bb6, ^bb7 loc(#loc137)
  ^bb6:  // pred: ^bb5
    %18 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 14>> loc(#loc44)
    %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc44)
    cir.call @printLine(%19) : (!cir.ptr<!s8i>) -> () loc(#loc73)
    %20 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc74)
    %21 = cir.const #cir.int<1> : !s32i loc(#loc75)
    cir.call @exit(%21) : (!s32i) -> () extra(#fn_attr) loc(#loc74)
    cir.br ^bb7 loc(#loc69)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc69)
  ^bb8:  // pred: ^bb7
    %22 = cir.load %0 : !cir.ptr<!cir.double>, !cir.double loc(#loc76)
    cir.call @printDoubleLine(%22) : (!cir.double) -> () loc(#loc77)
    cir.br ^bb9 loc(#loc60)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc52)
  ^bb10:  // 2 preds: ^bb2, ^bb9
    cir.br ^bb11 loc(#loc52)
  ^bb11:  // pred: ^bb10
    cir.return loc(#loc48)
  } loc(#loc127)
  cir.func no_proto internal private @good2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.double, !cir.ptr<!cir.double>, ["doubleNumber"] {alignment = 8 : i64} loc(#loc139)
    cir.br ^bb1 loc(#loc140)
  ^bb1:  // pred: ^bb0
    %1 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc141)
    %2 = cir.cast(bitcast, %1 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc141)
    %3 = cir.call %2() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc84)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc84)
    cir.brcond %4 ^bb2, ^bb9 loc(#loc142)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc143)
  ^bb3:  // pred: ^bb2
    %5 = cir.const #cir.int<0> : !s32i loc(#loc89)
    %6 = cir.call @__errno_location() : () -> !cir.ptr<!s32i> side_effect(const) extra(#fn_attr) loc(#loc90)
    cir.store %5, %6 : !s32i, !cir.ptr<!s32i> loc(#loc144)
    %7 = cir.get_global @sqrt : !cir.ptr<!cir.func<(!cir.double) -> !cir.double>> loc(#loc91)
    %8 = cir.const #cir.int<1> : !s32i loc(#loc92)
    %9 = cir.unary(minus, %8) nsw : !s32i, !s32i loc(#loc93)
    %10 = cir.cast(int_to_float, %9 : !s32i), !cir.double loc(#loc93)
    %11 = cir.call @sqrt(%10) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc91)
    cir.store %11, %0 : !cir.double, !cir.ptr<!cir.double> loc(#loc145)
    cir.br ^bb4 loc(#loc146)
  ^bb4:  // pred: ^bb3
    %12 = cir.call @__errno_location() : () -> !cir.ptr<!s32i> side_effect(const) extra(#fn_attr) loc(#loc98)
    %13 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc98)
    %14 = cir.const #cir.int<33> : !s32i loc(#loc99)
    %15 = cir.cmp(eq, %13, %14) : !s32i, !cir.bool loc(#loc147)
    cir.brcond %15 ^bb5, ^bb6 loc(#loc148)
  ^bb5:  // pred: ^bb4
    %16 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 14>> loc(#loc101)
    %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc101)
    cir.call @printLine(%17) : (!cir.ptr<!s8i>) -> () loc(#loc102)
    %18 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc103)
    %19 = cir.const #cir.int<1> : !s32i loc(#loc104)
    cir.call @exit(%19) : (!s32i) -> () extra(#fn_attr) loc(#loc103)
    cir.br ^bb6 loc(#loc97)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc97)
  ^bb7:  // pred: ^bb6
    %20 = cir.load %0 : !cir.ptr<!cir.double>, !cir.double loc(#loc105)
    cir.call @printDoubleLine(%20) : (!cir.double) -> () loc(#loc106)
    cir.br ^bb8 loc(#loc88)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc83)
  ^bb9:  // 2 preds: ^bb1, ^bb8
    cir.br ^bb10 loc(#loc83)
  ^bb10:  // pred: ^bb9
    cir.return loc(#loc79)
  } loc(#loc138)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE390_Error_Without_Action/CWE390_Error_Without_Action__sqrt_11.c":0:0)
#loc1 = loc("../../testcasesupport/std_testcase_io.h":48:1)
#loc2 = loc("../../testcasesupport/std_testcase_io.h":48:23)
#loc3 = loc("/usr/include/errno.h":37:1)
#loc4 = loc("/usr/include/errno.h":37:45)
#loc5 = loc("/usr/include/x86_64-linux-gnu/bits/mathcalls.h":143:1)
#loc6 = loc("../../testcasesupport/std_testcase_io.h":38:1)
#loc7 = loc("../../testcasesupport/std_testcase_io.h":38:41)
#loc8 = loc("CWE390_Error_Without_Action__sqrt_11.c":23:1)
#loc9 = loc("CWE390_Error_Without_Action__sqrt_11.c":39:1)
#loc10 = loc("CWE390_Error_Without_Action__sqrt_11.c":28:13)
#loc11 = loc("CWE390_Error_Without_Action__sqrt_11.c":28:20)
#loc12 = loc("CWE390_Error_Without_Action__sqrt_11.c":25:5)
#loc13 = loc("CWE390_Error_Without_Action__sqrt_11.c":38:5)
#loc14 = loc("CWE390_Error_Without_Action__sqrt_11.c":25:8)
#loc15 = loc("CWE390_Error_Without_Action__sqrt_11.c":25:26)
#loc16 = loc("CWE390_Error_Without_Action__sqrt_11.c":26:5)
#loc17 = loc("CWE390_Error_Without_Action__sqrt_11.c":27:9)
#loc18 = loc("CWE390_Error_Without_Action__sqrt_11.c":37:9)
#loc19 = loc("CWE390_Error_Without_Action__sqrt_11.c":29:21)
#loc20 = loc("CWE390_Error_Without_Action__sqrt_11.c":29:13)
#loc21 = loc("CWE390_Error_Without_Action__sqrt_11.c":30:36)
#loc22 = loc("CWE390_Error_Without_Action__sqrt_11.c":30:50)
#loc23 = loc("CWE390_Error_Without_Action__sqrt_11.c":30:49)
#loc24 = loc("CWE390_Error_Without_Action__sqrt_11.c":30:13)
#loc25 = loc("CWE390_Error_Without_Action__sqrt_11.c":30:51)
#loc26 = loc("CWE390_Error_Without_Action__sqrt_11.c":32:13)
#loc27 = loc("CWE390_Error_Without_Action__sqrt_11.c":35:13)
#loc28 = loc("CWE390_Error_Without_Action__sqrt_11.c":32:17)
#loc29 = loc("CWE390_Error_Without_Action__sqrt_11.c":32:26)
#loc30 = loc("CWE390_Error_Without_Action__sqrt_11.c":33:13)
#loc31 = loc("CWE390_Error_Without_Action__sqrt_11.c":36:29)
#loc32 = loc("CWE390_Error_Without_Action__sqrt_11.c":36:13)
#loc33 = loc("CWE390_Error_Without_Action__sqrt_11.c":90:1)
#loc34 = loc("CWE390_Error_Without_Action__sqrt_11.c":94:1)
#loc35 = loc("CWE390_Error_Without_Action__sqrt_11.c":92:5)
#loc36 = loc("CWE390_Error_Without_Action__sqrt_11.c":92:11)
#loc37 = loc("CWE390_Error_Without_Action__sqrt_11.c":93:5)
#loc38 = loc("CWE390_Error_Without_Action__sqrt_11.c":93:11)
#loc39 = loc("../../testcasesupport/std_testcase_io.h":50:1)
#loc40 = loc("../../testcasesupport/std_testcase_io.h":50:24)
#loc41 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc42 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc43 = loc("CWE390_Error_Without_Action__sqrt_11.c":51:19)
#loc44 = loc("CWE390_Error_Without_Action__sqrt_11.c":62:27)
#loc45 = loc("/usr/include/stdlib.h":756:1)
#loc46 = loc("/usr/include/stdlib.h":756:70)
#loc47 = loc("CWE390_Error_Without_Action__sqrt_11.c":46:1)
#loc48 = loc("CWE390_Error_Without_Action__sqrt_11.c":68:1)
#loc49 = loc("CWE390_Error_Without_Action__sqrt_11.c":56:13)
#loc50 = loc("CWE390_Error_Without_Action__sqrt_11.c":56:20)
#loc51 = loc("CWE390_Error_Without_Action__sqrt_11.c":48:5)
#loc52 = loc("CWE390_Error_Without_Action__sqrt_11.c":67:5)
#loc53 = loc("CWE390_Error_Without_Action__sqrt_11.c":48:8)
#loc54 = loc("CWE390_Error_Without_Action__sqrt_11.c":48:27)
#loc55 = loc("CWE390_Error_Without_Action__sqrt_11.c":49:5)
#loc56 = loc("CWE390_Error_Without_Action__sqrt_11.c":52:5)
#loc57 = loc("CWE390_Error_Without_Action__sqrt_11.c":54:5)
#loc58 = loc("CWE390_Error_Without_Action__sqrt_11.c":51:9)
#loc59 = loc("CWE390_Error_Without_Action__sqrt_11.c":55:9)
#loc60 = loc("CWE390_Error_Without_Action__sqrt_11.c":66:9)
#loc61 = loc("CWE390_Error_Without_Action__sqrt_11.c":57:21)
#loc62 = loc("CWE390_Error_Without_Action__sqrt_11.c":57:13)
#loc63 = loc("CWE390_Error_Without_Action__sqrt_11.c":58:36)
#loc64 = loc("CWE390_Error_Without_Action__sqrt_11.c":58:50)
#loc65 = loc("CWE390_Error_Without_Action__sqrt_11.c":58:49)
#loc66 = loc("CWE390_Error_Without_Action__sqrt_11.c":58:13)
#loc67 = loc("CWE390_Error_Without_Action__sqrt_11.c":58:51)
#loc68 = loc("CWE390_Error_Without_Action__sqrt_11.c":60:13)
#loc69 = loc("CWE390_Error_Without_Action__sqrt_11.c":64:13)
#loc70 = loc("CWE390_Error_Without_Action__sqrt_11.c":60:17)
#loc71 = loc("CWE390_Error_Without_Action__sqrt_11.c":60:26)
#loc72 = loc("CWE390_Error_Without_Action__sqrt_11.c":61:13)
#loc73 = loc("CWE390_Error_Without_Action__sqrt_11.c":62:17)
#loc74 = loc("CWE390_Error_Without_Action__sqrt_11.c":63:17)
#loc75 = loc("CWE390_Error_Without_Action__sqrt_11.c":63:22)
#loc76 = loc("CWE390_Error_Without_Action__sqrt_11.c":65:29)
#loc77 = loc("CWE390_Error_Without_Action__sqrt_11.c":65:13)
#loc78 = loc("CWE390_Error_Without_Action__sqrt_11.c":71:1)
#loc79 = loc("CWE390_Error_Without_Action__sqrt_11.c":88:1)
#loc80 = loc("CWE390_Error_Without_Action__sqrt_11.c":76:13)
#loc81 = loc("CWE390_Error_Without_Action__sqrt_11.c":76:20)
#loc82 = loc("CWE390_Error_Without_Action__sqrt_11.c":73:5)
#loc83 = loc("CWE390_Error_Without_Action__sqrt_11.c":87:5)
#loc84 = loc("CWE390_Error_Without_Action__sqrt_11.c":73:8)
#loc85 = loc("CWE390_Error_Without_Action__sqrt_11.c":73:26)
#loc86 = loc("CWE390_Error_Without_Action__sqrt_11.c":74:5)
#loc87 = loc("CWE390_Error_Without_Action__sqrt_11.c":75:9)
#loc88 = loc("CWE390_Error_Without_Action__sqrt_11.c":86:9)
#loc89 = loc("CWE390_Error_Without_Action__sqrt_11.c":77:21)
#loc90 = loc("CWE390_Error_Without_Action__sqrt_11.c":77:13)
#loc91 = loc("CWE390_Error_Without_Action__sqrt_11.c":78:36)
#loc92 = loc("CWE390_Error_Without_Action__sqrt_11.c":78:50)
#loc93 = loc("CWE390_Error_Without_Action__sqrt_11.c":78:49)
#loc94 = loc("CWE390_Error_Without_Action__sqrt_11.c":78:13)
#loc95 = loc("CWE390_Error_Without_Action__sqrt_11.c":78:51)
#loc96 = loc("CWE390_Error_Without_Action__sqrt_11.c":80:13)
#loc97 = loc("CWE390_Error_Without_Action__sqrt_11.c":84:13)
#loc98 = loc("CWE390_Error_Without_Action__sqrt_11.c":80:17)
#loc99 = loc("CWE390_Error_Without_Action__sqrt_11.c":80:26)
#loc100 = loc("CWE390_Error_Without_Action__sqrt_11.c":81:13)
#loc101 = loc("CWE390_Error_Without_Action__sqrt_11.c":82:27)
#loc102 = loc("CWE390_Error_Without_Action__sqrt_11.c":82:17)
#loc103 = loc("CWE390_Error_Without_Action__sqrt_11.c":83:17)
#loc104 = loc("CWE390_Error_Without_Action__sqrt_11.c":83:22)
#loc105 = loc("CWE390_Error_Without_Action__sqrt_11.c":85:29)
#loc106 = loc("CWE390_Error_Without_Action__sqrt_11.c":85:13)
#loc107 = loc(fused[#loc1, #loc2])
#loc108 = loc(fused[#loc3, #loc4])
#loc109 = loc(fused[#loc6, #loc7])
#loc110 = loc(fused[#loc8, #loc9])
#loc111 = loc(fused[#loc10, #loc11])
#loc112 = loc(fused[#loc12, #loc13])
#loc113 = loc(fused[#loc14, #loc15])
#loc114 = loc(fused[#loc16, #loc13])
#loc115 = loc(fused[#loc17, #loc18])
#loc116 = loc(fused[#loc20, #loc19])
#loc117 = loc(fused[#loc24, #loc25])
#loc118 = loc(fused[#loc26, #loc27])
#loc119 = loc(fused[#loc28, #loc29])
#loc120 = loc(fused[#loc30, #loc27])
#loc121 = loc(fused[#loc33, #loc34])
#loc122 = loc(fused[#loc35, #loc36])
#loc123 = loc(fused[#loc37, #loc38])
#loc124 = loc(fused[#loc39, #loc40])
#loc125 = loc(fused[#loc41, #loc42])
#loc126 = loc(fused[#loc45, #loc46])
#loc127 = loc(fused[#loc47, #loc48])
#loc128 = loc(fused[#loc49, #loc50])
#loc129 = loc(fused[#loc51, #loc52])
#loc130 = loc(fused[#loc53, #loc54])
#loc131 = loc(fused[#loc55, #loc56, #loc57, #loc52])
#loc132 = loc(fused[#loc59, #loc60])
#loc133 = loc(fused[#loc62, #loc61])
#loc134 = loc(fused[#loc66, #loc67])
#loc135 = loc(fused[#loc68, #loc69])
#loc136 = loc(fused[#loc70, #loc71])
#loc137 = loc(fused[#loc72, #loc69])
#loc138 = loc(fused[#loc78, #loc79])
#loc139 = loc(fused[#loc80, #loc81])
#loc140 = loc(fused[#loc82, #loc83])
#loc141 = loc(fused[#loc84, #loc85])
#loc142 = loc(fused[#loc86, #loc83])
#loc143 = loc(fused[#loc87, #loc88])
#loc144 = loc(fused[#loc90, #loc89])
#loc145 = loc(fused[#loc94, #loc95])
#loc146 = loc(fused[#loc96, #loc97])
#loc147 = loc(fused[#loc98, #loc99])
#loc148 = loc(fused[#loc100, #loc97])
