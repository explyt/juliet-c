!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc10 = loc("CWE400_Resource_Exhaustion__rand_sleep_41.c":30:21)
#loc11 = loc("CWE400_Resource_Exhaustion__rand_sleep_41.c":30:25)
#loc37 = loc("CWE400_Resource_Exhaustion__rand_sleep_41.c":70:25)
#loc38 = loc("CWE400_Resource_Exhaustion__rand_sleep_41.c":70:29)
#loc67 = loc("CWE400_Resource_Exhaustion__rand_sleep_41.c":52:25)
#loc68 = loc("CWE400_Resource_Exhaustion__rand_sleep_41.c":52:29)
#true = #cir.bool<true> : !cir.bool
#loc89 = loc(fused[#loc10, #loc11])
#loc98 = loc(fused[#loc37, #loc38])
#loc108 = loc(fused[#loc67, #loc68])
module @"/workspaces/juliet-c/testcases/CWE400_Resource_Exhaustion/s02/CWE400_Resource_Exhaustion__rand_sleep_41.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc85)
  cir.func private @usleep(!u32i) -> !s32i loc(#loc86)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc87)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Sleep time possibly too long\00" : !cir.array<!s8i x 29>> : !cir.array<!s8i x 29> {alignment = 1 : i64} loc(#loc7)
  cir.func internal private @badSink(%arg0: !s32i loc(fused[#loc10, #loc11])) extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count", init] {alignment = 4 : i64} loc(#loc89)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc12)
    %1 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc13)
    %2 = cir.cast(integral, %1 : !s32i), !u32i loc(#loc13)
    %3 = cir.call @usleep(%2) : (!u32i) -> !s32i loc(#loc14)
    %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 29>> loc(#loc7)
    %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 29>>), !cir.ptr<!s8i> loc(#loc7)
    cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc15)
    cir.return loc(#loc9)
  } loc(#loc88)
  cir.func no_proto @CWE400_Resource_Exhaustion__rand_sleep_41_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count"] {alignment = 4 : i64} loc(#loc91)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc20)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc21)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc92)
    %3 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc23)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc23)
    %5 = cir.binop(and, %3, %4) : !s32i loc(#loc23)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc23)
    %7 = cir.ternary(%6, true {
      %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc23)
      %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc23)
      %12 = cir.const #cir.int<30> : !s32i loc(#loc23)
      %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc23)
      %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc23)
      %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc23)
      %16 = cir.const #cir.int<15> : !s32i loc(#loc23)
      %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc23)
      %18 = cir.binop(xor, %13, %17) : !u32i loc(#loc23)
      %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc23)
      %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc23)
      %21 = cir.binop(xor, %18, %20) : !u32i loc(#loc23)
      cir.yield %21 : !u32i loc(#loc23)
    }, false {
      %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc23)
      %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc23)
      %12 = cir.const #cir.int<30> : !s32i loc(#loc23)
      %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc23)
      %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc23)
      %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc23)
      %16 = cir.const #cir.int<15> : !s32i loc(#loc23)
      %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc23)
      %18 = cir.binop(xor, %13, %17) : !u32i loc(#loc23)
      %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc23)
      %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc23)
      %21 = cir.binop(xor, %18, %20) : !u32i loc(#loc23)
      %22 = cir.unary(minus, %21) : !u32i, !u32i loc(#loc23)
      %23 = cir.const #cir.int<1> : !s32i loc(#loc23)
      %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc23)
      %25 = cir.binop(sub, %22, %24) : !u32i loc(#loc23)
      cir.yield %25 : !u32i loc(#loc23)
    }) : (!cir.bool) -> !u32i loc(#loc23)
    %8 = cir.cast(integral, %7 : !u32i), !s32i loc(#loc23)
    cir.store %8, %0 : !s32i, !cir.ptr<!s32i> loc(#loc93)
    %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc25)
    cir.call @badSink(%9) : (!s32i) -> () loc(#loc26)
    cir.return loc(#loc17)
  } loc(#loc90)
  cir.func no_proto @CWE400_Resource_Exhaustion__rand_sleep_41_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc95)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc29)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc96)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc31)
    cir.return loc(#loc28)
  } loc(#loc94)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Sleep time OK\00" : !cir.array<!s8i x 14>> : !cir.array<!s8i x 14> {alignment = 1 : i64} loc(#loc33)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Sleep time too long\00" : !cir.array<!s8i x 20>> : !cir.array<!s8i x 20> {alignment = 1 : i64} loc(#loc34)
  cir.func internal private @goodB2GSink(%arg0: !s32i loc(fused[#loc37, #loc38])) extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count", init] {alignment = 4 : i64} loc(#loc98)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc39)
    cir.scope {
      %1 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc42)
      %2 = cir.const #cir.int<0> : !s32i loc(#loc43)
      %3 = cir.cmp(gt, %1, %2) : !s32i, !cir.bool loc(#loc100)
      %4 = cir.ternary(%3, true {
        %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc45)
        %6 = cir.const #cir.int<2000> : !s32i loc(#loc46)
        %7 = cir.cmp(le, %5, %6) : !s32i, !cir.bool loc(#loc101)
        %8 = cir.ternary(%7, true {
          %9 = cir.const #true loc(#loc44)
          cir.yield %9 : !cir.bool loc(#loc44)
        }, false {
          %9 = cir.const #false loc(#loc44)
          cir.yield %9 : !cir.bool loc(#loc44)
        }) : (!cir.bool) -> !cir.bool loc(#loc44)
        cir.yield %8 : !cir.bool loc(#loc44)
      }, false {
        %5 = cir.const #false loc(#loc44)
        cir.yield %5 : !cir.bool loc(#loc44)
      }) : (!cir.bool) -> !cir.bool loc(#loc44)
      cir.if %4 {
        %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc50)
        %6 = cir.cast(integral, %5 : !s32i), !u32i loc(#loc50)
        %7 = cir.call @usleep(%6) : (!u32i) -> !s32i loc(#loc51)
        %8 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 14>> loc(#loc33)
        %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc33)
        cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc52)
      } else {
        %5 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 20>> loc(#loc34)
        %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc34)
        cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc53)
      } loc(#loc102)
    } loc(#loc99)
    cir.return loc(#loc36)
  } loc(#loc97)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count"] {alignment = 4 : i64} loc(#loc104)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc58)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc59)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc105)
    %3 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc61)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc61)
    %5 = cir.binop(and, %3, %4) : !s32i loc(#loc61)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc61)
    %7 = cir.ternary(%6, true {
      %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc61)
      %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc61)
      %12 = cir.const #cir.int<30> : !s32i loc(#loc61)
      %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc61)
      %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc61)
      %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc61)
      %16 = cir.const #cir.int<15> : !s32i loc(#loc61)
      %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc61)
      %18 = cir.binop(xor, %13, %17) : !u32i loc(#loc61)
      %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc61)
      %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc61)
      %21 = cir.binop(xor, %18, %20) : !u32i loc(#loc61)
      cir.yield %21 : !u32i loc(#loc61)
    }, false {
      %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc61)
      %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc61)
      %12 = cir.const #cir.int<30> : !s32i loc(#loc61)
      %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc61)
      %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc61)
      %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc61)
      %16 = cir.const #cir.int<15> : !s32i loc(#loc61)
      %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc61)
      %18 = cir.binop(xor, %13, %17) : !u32i loc(#loc61)
      %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc61)
      %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc61)
      %21 = cir.binop(xor, %18, %20) : !u32i loc(#loc61)
      %22 = cir.unary(minus, %21) : !u32i, !u32i loc(#loc61)
      %23 = cir.const #cir.int<1> : !s32i loc(#loc61)
      %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc61)
      %25 = cir.binop(sub, %22, %24) : !u32i loc(#loc61)
      cir.yield %25 : !u32i loc(#loc61)
    }) : (!cir.bool) -> !u32i loc(#loc61)
    %8 = cir.cast(integral, %7 : !u32i), !s32i loc(#loc61)
    cir.store %8, %0 : !s32i, !cir.ptr<!s32i> loc(#loc106)
    %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc63)
    cir.call @goodB2GSink(%9) : (!s32i) -> () loc(#loc64)
    cir.return loc(#loc55)
  } loc(#loc103)
  cir.func internal private @goodG2BSink(%arg0: !s32i loc(fused[#loc67, #loc68])) extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count", init] {alignment = 4 : i64} loc(#loc108)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc69)
    %1 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc70)
    %2 = cir.cast(integral, %1 : !s32i), !u32i loc(#loc70)
    %3 = cir.call @usleep(%2) : (!u32i) -> !s32i loc(#loc71)
    %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 29>> loc(#loc72)
    %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 29>>), !cir.ptr<!s8i> loc(#loc72)
    cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc73)
    cir.return loc(#loc66)
  } loc(#loc107)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count"] {alignment = 4 : i64} loc(#loc110)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc78)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc79)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc111)
    %3 = cir.const #cir.int<20> : !s32i loc(#loc81)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc112)
    %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc83)
    cir.call @goodG2BSink(%4) : (!s32i) -> () loc(#loc84)
    cir.return loc(#loc75)
  } loc(#loc109)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE400_Resource_Exhaustion/s02/CWE400_Resource_Exhaustion__rand_sleep_41.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("/usr/include/unistd.h":480:1)
#loc4 = loc("/usr/include/unistd.h":480:43)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc7 = loc("CWE400_Resource_Exhaustion__rand_sleep_41.c":34:15)
#loc8 = loc("CWE400_Resource_Exhaustion__rand_sleep_41.c":30:1)
#loc9 = loc("CWE400_Resource_Exhaustion__rand_sleep_41.c":35:1)
#loc12 = loc("CWE400_Resource_Exhaustion__rand_sleep_41.c":31:1)
#loc13 = loc("CWE400_Resource_Exhaustion__rand_sleep_41.c":33:11)
#loc14 = loc("CWE400_Resource_Exhaustion__rand_sleep_41.c":33:5)
#loc15 = loc("CWE400_Resource_Exhaustion__rand_sleep_41.c":34:5)
#loc16 = loc("CWE400_Resource_Exhaustion__rand_sleep_41.c":37:1)
#loc17 = loc("CWE400_Resource_Exhaustion__rand_sleep_41.c":45:1)
#loc18 = loc("CWE400_Resource_Exhaustion__rand_sleep_41.c":39:5)
#loc19 = loc("CWE400_Resource_Exhaustion__rand_sleep_41.c":39:9)
#loc20 = loc("CWE400_Resource_Exhaustion__rand_sleep_41.c":41:14)
#loc21 = loc("CWE400_Resource_Exhaustion__rand_sleep_41.c":41:13)
#loc22 = loc("CWE400_Resource_Exhaustion__rand_sleep_41.c":41:5)
#loc23 = loc("CWE400_Resource_Exhaustion__rand_sleep_41.c":43:13)
#loc24 = loc("CWE400_Resource_Exhaustion__rand_sleep_41.c":43:5)
#loc25 = loc("CWE400_Resource_Exhaustion__rand_sleep_41.c":44:13)
#loc26 = loc("CWE400_Resource_Exhaustion__rand_sleep_41.c":44:5)
#loc27 = loc("CWE400_Resource_Exhaustion__rand_sleep_41.c":94:1)
#loc28 = loc("CWE400_Resource_Exhaustion__rand_sleep_41.c":98:1)
#loc29 = loc("CWE400_Resource_Exhaustion__rand_sleep_41.c":96:5)
#loc30 = loc("CWE400_Resource_Exhaustion__rand_sleep_41.c":96:13)
#loc31 = loc("CWE400_Resource_Exhaustion__rand_sleep_41.c":97:5)
#loc32 = loc("CWE400_Resource_Exhaustion__rand_sleep_41.c":97:13)
#loc33 = loc("CWE400_Resource_Exhaustion__rand_sleep_41.c":76:19)
#loc34 = loc("CWE400_Resource_Exhaustion__rand_sleep_41.c":80:19)
#loc35 = loc("CWE400_Resource_Exhaustion__rand_sleep_41.c":70:1)
#loc36 = loc("CWE400_Resource_Exhaustion__rand_sleep_41.c":82:1)
#loc39 = loc("CWE400_Resource_Exhaustion__rand_sleep_41.c":71:1)
#loc40 = loc("CWE400_Resource_Exhaustion__rand_sleep_41.c":73:5)
#loc41 = loc("CWE400_Resource_Exhaustion__rand_sleep_41.c":81:5)
#loc42 = loc("CWE400_Resource_Exhaustion__rand_sleep_41.c":73:9)
#loc43 = loc("CWE400_Resource_Exhaustion__rand_sleep_41.c":73:17)
#loc44 = loc("CWE400_Resource_Exhaustion__rand_sleep_41.c":73:19)
#loc45 = loc("CWE400_Resource_Exhaustion__rand_sleep_41.c":73:22)
#loc46 = loc("CWE400_Resource_Exhaustion__rand_sleep_41.c":73:31)
#loc47 = loc("CWE400_Resource_Exhaustion__rand_sleep_41.c":74:5)
#loc48 = loc("CWE400_Resource_Exhaustion__rand_sleep_41.c":77:5)
#loc49 = loc("CWE400_Resource_Exhaustion__rand_sleep_41.c":79:5)
#loc50 = loc("CWE400_Resource_Exhaustion__rand_sleep_41.c":75:15)
#loc51 = loc("CWE400_Resource_Exhaustion__rand_sleep_41.c":75:9)
#loc52 = loc("CWE400_Resource_Exhaustion__rand_sleep_41.c":76:9)
#loc53 = loc("CWE400_Resource_Exhaustion__rand_sleep_41.c":80:9)
#loc54 = loc("CWE400_Resource_Exhaustion__rand_sleep_41.c":84:1)
#loc55 = loc("CWE400_Resource_Exhaustion__rand_sleep_41.c":92:1)
#loc56 = loc("CWE400_Resource_Exhaustion__rand_sleep_41.c":86:5)
#loc57 = loc("CWE400_Resource_Exhaustion__rand_sleep_41.c":86:9)
#loc58 = loc("CWE400_Resource_Exhaustion__rand_sleep_41.c":88:14)
#loc59 = loc("CWE400_Resource_Exhaustion__rand_sleep_41.c":88:13)
#loc60 = loc("CWE400_Resource_Exhaustion__rand_sleep_41.c":88:5)
#loc61 = loc("CWE400_Resource_Exhaustion__rand_sleep_41.c":90:13)
#loc62 = loc("CWE400_Resource_Exhaustion__rand_sleep_41.c":90:5)
#loc63 = loc("CWE400_Resource_Exhaustion__rand_sleep_41.c":91:17)
#loc64 = loc("CWE400_Resource_Exhaustion__rand_sleep_41.c":91:5)
#loc65 = loc("CWE400_Resource_Exhaustion__rand_sleep_41.c":52:1)
#loc66 = loc("CWE400_Resource_Exhaustion__rand_sleep_41.c":57:1)
#loc69 = loc("CWE400_Resource_Exhaustion__rand_sleep_41.c":53:1)
#loc70 = loc("CWE400_Resource_Exhaustion__rand_sleep_41.c":55:11)
#loc71 = loc("CWE400_Resource_Exhaustion__rand_sleep_41.c":55:5)
#loc72 = loc("CWE400_Resource_Exhaustion__rand_sleep_41.c":56:15)
#loc73 = loc("CWE400_Resource_Exhaustion__rand_sleep_41.c":56:5)
#loc74 = loc("CWE400_Resource_Exhaustion__rand_sleep_41.c":59:1)
#loc75 = loc("CWE400_Resource_Exhaustion__rand_sleep_41.c":67:1)
#loc76 = loc("CWE400_Resource_Exhaustion__rand_sleep_41.c":61:5)
#loc77 = loc("CWE400_Resource_Exhaustion__rand_sleep_41.c":61:9)
#loc78 = loc("CWE400_Resource_Exhaustion__rand_sleep_41.c":63:14)
#loc79 = loc("CWE400_Resource_Exhaustion__rand_sleep_41.c":63:13)
#loc80 = loc("CWE400_Resource_Exhaustion__rand_sleep_41.c":63:5)
#loc81 = loc("CWE400_Resource_Exhaustion__rand_sleep_41.c":65:13)
#loc82 = loc("CWE400_Resource_Exhaustion__rand_sleep_41.c":65:5)
#loc83 = loc("CWE400_Resource_Exhaustion__rand_sleep_41.c":66:17)
#loc84 = loc("CWE400_Resource_Exhaustion__rand_sleep_41.c":66:5)
#loc85 = loc(fused[#loc1, #loc2])
#loc86 = loc(fused[#loc3, #loc4])
#loc87 = loc(fused[#loc5, #loc6])
#loc88 = loc(fused[#loc8, #loc9])
#loc90 = loc(fused[#loc16, #loc17])
#loc91 = loc(fused[#loc18, #loc19])
#loc92 = loc(fused[#loc22, #loc20])
#loc93 = loc(fused[#loc24, #loc23])
#loc94 = loc(fused[#loc27, #loc28])
#loc95 = loc(fused[#loc29, #loc30])
#loc96 = loc(fused[#loc31, #loc32])
#loc97 = loc(fused[#loc35, #loc36])
#loc99 = loc(fused[#loc40, #loc41])
#loc100 = loc(fused[#loc42, #loc43])
#loc101 = loc(fused[#loc45, #loc46])
#loc102 = loc(fused[#loc47, #loc48, #loc49, #loc41])
#loc103 = loc(fused[#loc54, #loc55])
#loc104 = loc(fused[#loc56, #loc57])
#loc105 = loc(fused[#loc60, #loc58])
#loc106 = loc(fused[#loc62, #loc61])
#loc107 = loc(fused[#loc65, #loc66])
#loc109 = loc(fused[#loc74, #loc75])
#loc110 = loc(fused[#loc76, #loc77])
#loc111 = loc(fused[#loc80, #loc78])
#loc112 = loc(fused[#loc82, #loc81])
