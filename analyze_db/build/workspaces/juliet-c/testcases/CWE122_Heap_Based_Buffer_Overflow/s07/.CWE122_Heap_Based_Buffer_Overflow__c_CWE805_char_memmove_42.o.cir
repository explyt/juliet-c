!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc7 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_42.c":23:25)
#loc8 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_42.c":23:32)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_42.c":53:29)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_42.c":53:36)
#loc146 = loc(fused[#loc7, #loc8])
#loc173 = loc(fused[#loc80, #loc81])
module @"/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_42.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little", "dlti.mangling_mode" = "e">} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc143)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc144)
  cir.func internal private @badSource(%arg0: !cir.ptr<!s8i> loc(fused[#loc7, #loc8])) -> !cir.ptr<!s8i> extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc146)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["__retval"] {alignment = 8 : i64} loc(#loc6)
    cir.store %arg0, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc9)
    %2 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc10)
    %3 = cir.const #cir.int<50> : !s32i loc(#loc11)
    %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc11)
    %5 = cir.const #cir.int<1> : !u64i loc(#loc147)
    %6 = cir.binop(mul, %4, %5) : !u64i loc(#loc148)
    %7 = cir.call @malloc(%6) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc10)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc149)
    cir.store %8, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc150)
    cir.scope {
      %16 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc18)
      %17 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc19)
      %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc19)
      %19 = cir.cmp(eq, %16, %18) : !cir.ptr<!s8i>, !cir.bool loc(#loc152)
      cir.if %19 {
        %20 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc21)
        %21 = cir.const #cir.int<1> : !s32i loc(#loc22)
        %22 = cir.unary(minus, %21) nsw : !s32i, !s32i loc(#loc23)
        cir.call @exit(%22) : (!s32i) -> () extra(#fn_attr) loc(#loc21)
      } loc(#loc153)
    } loc(#loc151)
    %9 = cir.const #cir.int<0> : !s32i loc(#loc24)
    %10 = cir.cast(integral, %9 : !s32i), !s8i loc(#loc24)
    %11 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc25)
    %12 = cir.const #cir.int<0> : !s32i loc(#loc26)
    %13 = cir.ptr_stride(%11 : !cir.ptr<!s8i>, %12 : !s32i), !cir.ptr<!s8i> loc(#loc27)
    cir.store %10, %13 : !s8i, !cir.ptr<!s8i> loc(#loc154)
    %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc28)
    cir.store %14, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc155)
    %15 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc155)
    cir.return %15 : !cir.ptr<!s8i> loc(#loc155)
  } loc(#loc145)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc156)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc157)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_42_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc159)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc38)
    cir.store %1, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc160)
    %2 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc40)
    %3 = cir.call @badSource(%2) : (!cir.ptr<!s8i>) -> !cir.ptr<!s8i> loc(#loc41)
    cir.store %3, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc161)
    cir.scope {
      %4 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc163)
      %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc48)
      %6 = cir.cast(bitcast, %5 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc48)
      %7 = cir.const #cir.int<67> : !s32i loc(#loc49)
      %8 = cir.const #cir.int<100> : !s32i loc(#loc50)
      %9 = cir.const #cir.int<1> : !s32i loc(#loc51)
      %10 = cir.binop(sub, %8, %9) nsw : !s32i loc(#loc50)
      %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc50)
      cir.libc.memset %11 bytes from %6 set to %7 : !cir.ptr<!void>, !s32i, !u64i loc(#loc164)
      %12 = cir.const #cir.int<0> : !s32i loc(#loc54)
      %13 = cir.cast(integral, %12 : !s32i), !s8i loc(#loc54)
      %14 = cir.const #cir.int<100> : !s32i loc(#loc55)
      %15 = cir.const #cir.int<1> : !s32i loc(#loc56)
      %16 = cir.binop(sub, %14, %15) nsw : !s32i loc(#loc55)
      %17 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc57)
      %18 = cir.ptr_stride(%17 : !cir.ptr<!s8i>, %16 : !s32i), !cir.ptr<!s8i> loc(#loc57)
      cir.store %13, %18 : !s8i, !cir.ptr<!s8i> loc(#loc165)
      %19 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc58)
      %20 = cir.cast(bitcast, %19 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc58)
      %21 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc59)
      %22 = cir.cast(bitcast, %21 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc59)
      %23 = cir.const #cir.int<100> : !s32i loc(#loc60)
      %24 = cir.cast(integral, %23 : !s32i), !u64i loc(#loc60)
      %25 = cir.const #cir.int<1> : !u64i loc(#loc166)
      %26 = cir.binop(mul, %24, %25) : !u64i loc(#loc167)
      cir.libc.memmove %26 bytes from %22 to %20 : !cir.ptr<!void>, !u64i loc(#loc168)
      %27 = cir.const #cir.int<0> : !s32i loc(#loc65)
      %28 = cir.cast(integral, %27 : !s32i), !s8i loc(#loc65)
      %29 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc66)
      %30 = cir.const #cir.int<100> : !s32i loc(#loc67)
      %31 = cir.const #cir.int<1> : !s32i loc(#loc68)
      %32 = cir.binop(sub, %30, %31) nsw : !s32i loc(#loc67)
      %33 = cir.ptr_stride(%29 : !cir.ptr<!s8i>, %32 : !s32i), !cir.ptr<!s8i> loc(#loc69)
      cir.store %28, %33 : !s8i, !cir.ptr<!s8i> loc(#loc169)
      %34 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc70)
      cir.call @printLine(%34) : (!cir.ptr<!s8i>) -> () loc(#loc71)
      %35 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc72)
      %36 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc73)
      %37 = cir.cast(bitcast, %36 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc73)
      cir.call @free(%37) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc72)
    } loc(#loc162)
    cir.return loc(#loc35)
  } loc(#loc158)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_42_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc171)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc76)
    cir.return loc(#loc75)
  } loc(#loc170)
  cir.func internal private @goodG2BSource(%arg0: !cir.ptr<!s8i> loc(fused[#loc80, #loc81])) -> !cir.ptr<!s8i> extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc173)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["__retval"] {alignment = 8 : i64} loc(#loc79)
    cir.store %arg0, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc82)
    %2 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc83)
    %3 = cir.const #cir.int<100> : !s32i loc(#loc84)
    %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc84)
    %5 = cir.const #cir.int<1> : !u64i loc(#loc174)
    %6 = cir.binop(mul, %4, %5) : !u64i loc(#loc175)
    %7 = cir.call @malloc(%6) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc83)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc176)
    cir.store %8, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc177)
    cir.scope {
      %16 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc91)
      %17 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc92)
      %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc92)
      %19 = cir.cmp(eq, %16, %18) : !cir.ptr<!s8i>, !cir.bool loc(#loc179)
      cir.if %19 {
        %20 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc94)
        %21 = cir.const #cir.int<1> : !s32i loc(#loc95)
        %22 = cir.unary(minus, %21) nsw : !s32i, !s32i loc(#loc96)
        cir.call @exit(%22) : (!s32i) -> () extra(#fn_attr) loc(#loc94)
      } loc(#loc180)
    } loc(#loc178)
    %9 = cir.const #cir.int<0> : !s32i loc(#loc97)
    %10 = cir.cast(integral, %9 : !s32i), !s8i loc(#loc97)
    %11 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc98)
    %12 = cir.const #cir.int<0> : !s32i loc(#loc99)
    %13 = cir.ptr_stride(%11 : !cir.ptr<!s8i>, %12 : !s32i), !cir.ptr<!s8i> loc(#loc100)
    cir.store %10, %13 : !s8i, !cir.ptr<!s8i> loc(#loc181)
    %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc101)
    cir.store %14, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc182)
    %15 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc182)
    cir.return %15 : !cir.ptr<!s8i> loc(#loc182)
  } loc(#loc172)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc184)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc107)
    cir.store %1, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc185)
    %2 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc109)
    %3 = cir.call @goodG2BSource(%2) : (!cir.ptr<!s8i>) -> !cir.ptr<!s8i> loc(#loc110)
    cir.store %3, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc186)
    cir.scope {
      %4 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc188)
      %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc117)
      %6 = cir.cast(bitcast, %5 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc117)
      %7 = cir.const #cir.int<67> : !s32i loc(#loc118)
      %8 = cir.const #cir.int<100> : !s32i loc(#loc119)
      %9 = cir.const #cir.int<1> : !s32i loc(#loc120)
      %10 = cir.binop(sub, %8, %9) nsw : !s32i loc(#loc119)
      %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc119)
      cir.libc.memset %11 bytes from %6 set to %7 : !cir.ptr<!void>, !s32i, !u64i loc(#loc189)
      %12 = cir.const #cir.int<0> : !s32i loc(#loc123)
      %13 = cir.cast(integral, %12 : !s32i), !s8i loc(#loc123)
      %14 = cir.const #cir.int<100> : !s32i loc(#loc124)
      %15 = cir.const #cir.int<1> : !s32i loc(#loc125)
      %16 = cir.binop(sub, %14, %15) nsw : !s32i loc(#loc124)
      %17 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc126)
      %18 = cir.ptr_stride(%17 : !cir.ptr<!s8i>, %16 : !s32i), !cir.ptr<!s8i> loc(#loc126)
      cir.store %13, %18 : !s8i, !cir.ptr<!s8i> loc(#loc190)
      %19 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc127)
      %20 = cir.cast(bitcast, %19 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc127)
      %21 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc128)
      %22 = cir.cast(bitcast, %21 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc128)
      %23 = cir.const #cir.int<100> : !s32i loc(#loc129)
      %24 = cir.cast(integral, %23 : !s32i), !u64i loc(#loc129)
      %25 = cir.const #cir.int<1> : !u64i loc(#loc191)
      %26 = cir.binop(mul, %24, %25) : !u64i loc(#loc192)
      cir.libc.memmove %26 bytes from %22 to %20 : !cir.ptr<!void>, !u64i loc(#loc193)
      %27 = cir.const #cir.int<0> : !s32i loc(#loc134)
      %28 = cir.cast(integral, %27 : !s32i), !s8i loc(#loc134)
      %29 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc135)
      %30 = cir.const #cir.int<100> : !s32i loc(#loc136)
      %31 = cir.const #cir.int<1> : !s32i loc(#loc137)
      %32 = cir.binop(sub, %30, %31) nsw : !s32i loc(#loc136)
      %33 = cir.ptr_stride(%29 : !cir.ptr<!s8i>, %32 : !s32i), !cir.ptr<!s8i> loc(#loc138)
      cir.store %28, %33 : !s8i, !cir.ptr<!s8i> loc(#loc194)
      %34 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc139)
      cir.call @printLine(%34) : (!cir.ptr<!s8i>) -> () loc(#loc140)
      %35 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc141)
      %36 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc142)
      %37 = cir.cast(bitcast, %36 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc142)
      cir.call @free(%37) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc141)
    } loc(#loc187)
    cir.return loc(#loc104)
  } loc(#loc183)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_42.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_42.c":23:1)
#loc6 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_42.c":30:1)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_42.c":24:1)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_42.c":26:20)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_42.c":26:27)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_42.c":26:30)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_42.c":26:41)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_42.c":26:42)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_42.c":26:5)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_42.c":27:5)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_42.c":27:33)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_42.c":27:9)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_42.c":27:17)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_42.c":27:23)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_42.c":27:24)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_42.c":27:30)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_42.c":27:29)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_42.c":28:15)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_42.c":28:5)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_42.c":28:10)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_42.c":28:11)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_42.c":29:12)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_42.c":29:5)
#loc30 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc31 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc32 = loc("/usr/include/stdlib.h":687:1)
#loc33 = loc("/usr/include/stdlib.h":687:32)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_42.c":32:1)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_42.c":47:1)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_42.c":34:5)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_42.c":34:12)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_42.c":35:12)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_42.c":35:5)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_42.c":36:22)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_42.c":36:12)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_42.c":36:5)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_42.c":36:26)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_42.c":37:5)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_42.c":46:5)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_42.c":38:9)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_42.c":38:24)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_42.c":39:16)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_42.c":39:24)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_42.c":39:29)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_42.c":39:33)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_42.c":39:9)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_42.c":39:34)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_42.c":40:25)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_42.c":40:16)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_42.c":40:20)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_42.c":40:9)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_42.c":42:17)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_42.c":42:23)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_42.c":42:31)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_42.c":42:35)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_42.c":42:46)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_42.c":42:9)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_42.c":42:47)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_42.c":43:23)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_42.c":43:9)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_42.c":43:14)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_42.c":43:18)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_42.c":43:19)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_42.c":44:19)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_42.c":44:9)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_42.c":45:9)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_42.c":45:14)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_42.c":80:1)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_42.c":83:1)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_42.c":82:5)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_42.c":82:13)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_42.c":53:1)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_42.c":60:1)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_42.c":54:1)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_42.c":56:20)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_42.c":56:27)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_42.c":56:31)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_42.c":56:42)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_42.c":56:43)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_42.c":56:5)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_42.c":57:5)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_42.c":57:33)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_42.c":57:9)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_42.c":57:17)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_42.c":57:23)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_42.c":57:24)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_42.c":57:30)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_42.c":57:29)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_42.c":58:15)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_42.c":58:5)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_42.c":58:10)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_42.c":58:11)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_42.c":59:12)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_42.c":59:5)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_42.c":63:1)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_42.c":78:1)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_42.c":65:5)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_42.c":65:12)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_42.c":66:12)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_42.c":66:5)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_42.c":67:26)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_42.c":67:12)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_42.c":67:5)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_42.c":67:30)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_42.c":68:5)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_42.c":77:5)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_42.c":69:9)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_42.c":69:24)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_42.c":70:16)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_42.c":70:24)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_42.c":70:29)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_42.c":70:33)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_42.c":70:9)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_42.c":70:34)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_42.c":71:25)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_42.c":71:16)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_42.c":71:20)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_42.c":71:9)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_42.c":73:17)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_42.c":73:23)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_42.c":73:31)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_42.c":73:35)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_42.c":73:46)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_42.c":73:9)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_42.c":73:47)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_42.c":74:23)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_42.c":74:9)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_42.c":74:14)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_42.c":74:18)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_42.c":74:19)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_42.c":75:19)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_42.c":75:9)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_42.c":76:9)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_42.c":76:14)
#loc143 = loc(fused[#loc1, #loc2])
#loc144 = loc(fused[#loc3, #loc4])
#loc145 = loc(fused[#loc5, #loc6])
#loc147 = loc(fused[#loc12, #loc13])
#loc148 = loc(fused[#loc11, #loc13])
#loc149 = loc(fused[#loc10, #loc14])
#loc150 = loc(fused[#loc15, #loc14])
#loc151 = loc(fused[#loc16, #loc17])
#loc152 = loc(fused[#loc18, #loc19])
#loc153 = loc(fused[#loc20, #loc17])
#loc154 = loc(fused[#loc25, #loc24])
#loc155 = loc(fused[#loc29, #loc28])
#loc156 = loc(fused[#loc30, #loc31])
#loc157 = loc(fused[#loc32, #loc33])
#loc158 = loc(fused[#loc34, #loc35])
#loc159 = loc(fused[#loc36, #loc37])
#loc160 = loc(fused[#loc39, #loc38])
#loc161 = loc(fused[#loc42, #loc43])
#loc162 = loc(fused[#loc44, #loc45])
#loc163 = loc(fused[#loc46, #loc47])
#loc164 = loc(fused[#loc52, #loc53])
#loc165 = loc(fused[#loc57, #loc54])
#loc166 = loc(fused[#loc61, #loc62])
#loc167 = loc(fused[#loc60, #loc62])
#loc168 = loc(fused[#loc63, #loc64])
#loc169 = loc(fused[#loc66, #loc65])
#loc170 = loc(fused[#loc74, #loc75])
#loc171 = loc(fused[#loc76, #loc77])
#loc172 = loc(fused[#loc78, #loc79])
#loc174 = loc(fused[#loc85, #loc86])
#loc175 = loc(fused[#loc84, #loc86])
#loc176 = loc(fused[#loc83, #loc87])
#loc177 = loc(fused[#loc88, #loc87])
#loc178 = loc(fused[#loc89, #loc90])
#loc179 = loc(fused[#loc91, #loc92])
#loc180 = loc(fused[#loc93, #loc90])
#loc181 = loc(fused[#loc98, #loc97])
#loc182 = loc(fused[#loc102, #loc101])
#loc183 = loc(fused[#loc103, #loc104])
#loc184 = loc(fused[#loc105, #loc106])
#loc185 = loc(fused[#loc108, #loc107])
#loc186 = loc(fused[#loc111, #loc112])
#loc187 = loc(fused[#loc113, #loc114])
#loc188 = loc(fused[#loc115, #loc116])
#loc189 = loc(fused[#loc121, #loc122])
#loc190 = loc(fused[#loc126, #loc123])
#loc191 = loc(fused[#loc130, #loc131])
#loc192 = loc(fused[#loc129, #loc131])
#loc193 = loc(fused[#loc132, #loc133])
#loc194 = loc(fused[#loc135, #loc134])
