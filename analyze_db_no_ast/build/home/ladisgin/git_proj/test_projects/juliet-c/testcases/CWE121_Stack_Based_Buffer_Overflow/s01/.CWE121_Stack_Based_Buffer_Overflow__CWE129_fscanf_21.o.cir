!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.struct<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.struct<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.struct<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":25:21)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":25:25)
#loc80 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":72:26)
#loc81 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":72:30)
#loc144 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":114:26)
#loc145 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":114:30)
#loc206 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":151:25)
#loc207 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":151:29)
#true = #cir.bool<true> : !cir.bool
#loc264 = loc(fused[#loc15, #loc16])
#loc289 = loc(fused[#loc80, #loc81])
#loc311 = loc(fused[#loc144, #loc145])
#loc333 = loc(fused[#loc206, #loc207])
!ty__IO_FILE = !cir.struct<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @__isoc99_fscanf(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i loc(#loc258)
  cir.global "private"  external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc259)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"%d\00" : !cir.array<!s8i x 3>> : !cir.array<!s8i x 3> {alignment = 1 : i64} loc(#loc5)
  cir.global "private"  internal dsolocal @badStatic = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc260)
  cir.func private  @printIntLine(!s32i) loc(#loc261)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc262)
  cir.global "private"  constant internal dsolocal @".str1" = #cir.const_array<"ERROR: Array index is negative.\00" : !cir.array<!s8i x 32>> : !cir.array<!s8i x 32> {alignment = 1 : i64} loc(#loc12)
  cir.func internal private  @badSink(%arg0: !s32i loc(fused[#loc15, #loc16])) extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc264)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc17)
    cir.scope {
      %1 = cir.get_global @badStatic : !cir.ptr<!s32i> loc(#loc260)
      %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc20)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc20)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc268)
          %5 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc269)
          %6 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc269)
          cir.store %6, %5 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc269)
          cir.scope {
            %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc30)
            %8 = cir.const #cir.int<0> : !s32i loc(#loc31)
            %9 = cir.cmp(ge, %7, %8) : !s32i, !s32i loc(#loc271)
            %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc32)
            cir.if %10 {
              %11 = cir.const #cir.int<1> : !s32i loc(#loc36)
              %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc37)
              %13 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc38)
              %14 = cir.ptr_stride(%13 : !cir.ptr<!s32i>, %12 : !s32i), !cir.ptr<!s32i> loc(#loc38)
              cir.store %11, %14 : !s32i, !cir.ptr<!s32i> loc(#loc273)
              cir.scope {
                %15 = cir.const #cir.int<0> : !s32i loc(#loc41)
                cir.store %15, %4 : !s32i, !cir.ptr<!s32i> loc(#loc275)
                cir.for : cond {
                  %16 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc43)
                  %17 = cir.const #cir.int<10> : !s32i loc(#loc44)
                  %18 = cir.cmp(lt, %16, %17) : !s32i, !s32i loc(#loc276)
                  %19 = cir.cast(int_to_bool, %18 : !s32i), !cir.bool loc(#loc45)
                  cir.condition(%19) loc(#loc45)
                } body {
                  cir.scope {
                    %16 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc47)
                    %17 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc48)
                    %18 = cir.ptr_stride(%17 : !cir.ptr<!s32i>, %16 : !s32i), !cir.ptr<!s32i> loc(#loc48)
                    %19 = cir.load %18 : !cir.ptr<!s32i>, !s32i loc(#loc48)
                    cir.call @printIntLine(%19) : (!s32i) -> () loc(#loc49)
                  } loc(#loc277)
                  cir.yield loc(#loc40)
                } step {
                  %16 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc50)
                  %17 = cir.unary(inc, %16) : !s32i, !s32i loc(#loc51)
                  cir.store %17, %4 : !s32i, !cir.ptr<!s32i> loc(#loc278)
                  cir.yield loc(#loc274)
                } loc(#loc274)
              } loc(#loc274)
            } else {
              %11 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc12)
              %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc12)
              cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc52)
            } loc(#loc272)
          } loc(#loc270)
        } loc(#loc267)
      } loc(#loc266)
    } loc(#loc265)
    cir.return loc(#loc14)
  } loc(#loc263)
  cir.func no_proto  @CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc280)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc57)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc58)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc281)
    %3 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc60)
    %4 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc259)
    %5 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc61)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc5)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc5)
    %8 = cir.call @__isoc99_fscanf(%5, %7, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s32i>) -> !s32i loc(#loc60)
    %9 = cir.const #cir.int<1> : !s32i loc(#loc62)
    %10 = cir.get_global @badStatic : !cir.ptr<!s32i> loc(#loc260)
    cir.store %9, %10 : !s32i, !cir.ptr<!s32i> loc(#loc282)
    %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc64)
    cir.call @badSink(%11) : (!s32i) -> () loc(#loc65)
    cir.return loc(#loc54)
  } loc(#loc279)
  cir.func no_proto  @CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc284)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc68)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc285)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc70)
    %2 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc286)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc72)
    cir.return loc(#loc67)
  } loc(#loc283)
  cir.global "private"  internal dsolocal @goodB2G1Static = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc287)
  cir.global "private"  constant internal dsolocal @".str2" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc76)
  cir.global "private"  constant internal dsolocal @".str3" = #cir.const_array<"ERROR: Array index is out-of-bounds\00" : !cir.array<!s8i x 36>> : !cir.array<!s8i x 36> {alignment = 1 : i64} loc(#loc77)
  cir.func internal private  @goodB2G1Sink(%arg0: !s32i loc(fused[#loc80, #loc81])) extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc289)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc82)
    cir.scope {
      %1 = cir.get_global @goodB2G1Static : !cir.ptr<!s32i> loc(#loc287)
      %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc85)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc85)
      cir.if %3 {
        %4 = cir.get_global @".str2" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc76)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc76)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc89)
      } else {
        cir.scope {
          %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc293)
          %5 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc294)
          %6 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc294)
          cir.store %6, %5 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc294)
          cir.scope {
            %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc98)
            %8 = cir.const #cir.int<0> : !s32i loc(#loc99)
            %9 = cir.cmp(ge, %7, %8) : !s32i, !s32i loc(#loc296)
            %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc100)
            %11 = cir.ternary(%10, true {
              %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc102)
              %13 = cir.const #cir.int<10> : !s32i loc(#loc103)
              %14 = cir.cmp(lt, %12, %13) : !s32i, !s32i loc(#loc297)
              %15 = cir.cast(int_to_bool, %14 : !s32i), !cir.bool loc(#loc105)
              %16 = cir.ternary(%15, true {
                %17 = cir.const #true loc(#loc101)
                cir.yield %17 : !cir.bool loc(#loc101)
              }, false {
                %17 = cir.const #false loc(#loc101)
                cir.yield %17 : !cir.bool loc(#loc101)
              }) : (!cir.bool) -> !cir.bool loc(#loc101)
              cir.yield %16 : !cir.bool loc(#loc101)
            }, false {
              %12 = cir.const #false loc(#loc101)
              cir.yield %12 : !cir.bool loc(#loc101)
            }) : (!cir.bool) -> !cir.bool loc(#loc101)
            cir.if %11 {
              %12 = cir.const #cir.int<1> : !s32i loc(#loc109)
              %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc110)
              %14 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc111)
              %15 = cir.ptr_stride(%14 : !cir.ptr<!s32i>, %13 : !s32i), !cir.ptr<!s32i> loc(#loc111)
              cir.store %12, %15 : !s32i, !cir.ptr<!s32i> loc(#loc299)
              cir.scope {
                %16 = cir.const #cir.int<0> : !s32i loc(#loc114)
                cir.store %16, %4 : !s32i, !cir.ptr<!s32i> loc(#loc301)
                cir.for : cond {
                  %17 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc116)
                  %18 = cir.const #cir.int<10> : !s32i loc(#loc117)
                  %19 = cir.cmp(lt, %17, %18) : !s32i, !s32i loc(#loc302)
                  %20 = cir.cast(int_to_bool, %19 : !s32i), !cir.bool loc(#loc118)
                  cir.condition(%20) loc(#loc118)
                } body {
                  cir.scope {
                    %17 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc120)
                    %18 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc121)
                    %19 = cir.ptr_stride(%18 : !cir.ptr<!s32i>, %17 : !s32i), !cir.ptr<!s32i> loc(#loc121)
                    %20 = cir.load %19 : !cir.ptr<!s32i>, !s32i loc(#loc121)
                    cir.call @printIntLine(%20) : (!s32i) -> () loc(#loc122)
                  } loc(#loc303)
                  cir.yield loc(#loc113)
                } step {
                  %17 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc123)
                  %18 = cir.unary(inc, %17) : !s32i, !s32i loc(#loc124)
                  cir.store %18, %4 : !s32i, !cir.ptr<!s32i> loc(#loc304)
                  cir.yield loc(#loc300)
                } loc(#loc300)
              } loc(#loc300)
            } else {
              %12 = cir.get_global @".str3" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc77)
              %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc77)
              cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc125)
            } loc(#loc298)
          } loc(#loc295)
        } loc(#loc292)
      } loc(#loc291)
    } loc(#loc290)
    cir.return loc(#loc79)
  } loc(#loc288)
  cir.func no_proto internal private  @goodB2G1() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc306)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc130)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc131)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc307)
    %3 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc133)
    %4 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc259)
    %5 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc134)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc135)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc135)
    %8 = cir.call @__isoc99_fscanf(%5, %7, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s32i>) -> !s32i loc(#loc133)
    %9 = cir.const #cir.int<0> : !s32i loc(#loc136)
    %10 = cir.get_global @goodB2G1Static : !cir.ptr<!s32i> loc(#loc287)
    cir.store %9, %10 : !s32i, !cir.ptr<!s32i> loc(#loc308)
    %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc138)
    cir.call @goodB2G1Sink(%11) : (!s32i) -> () loc(#loc139)
    cir.return loc(#loc127)
  } loc(#loc305)
  cir.global "private"  internal dsolocal @goodB2G2Static = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc309)
  cir.func internal private  @goodB2G2Sink(%arg0: !s32i loc(fused[#loc144, #loc145])) extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc311)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc146)
    cir.scope {
      %1 = cir.get_global @goodB2G2Static : !cir.ptr<!s32i> loc(#loc309)
      %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc149)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc149)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc315)
          %5 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc316)
          %6 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc316)
          cir.store %6, %5 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc316)
          cir.scope {
            %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc159)
            %8 = cir.const #cir.int<0> : !s32i loc(#loc160)
            %9 = cir.cmp(ge, %7, %8) : !s32i, !s32i loc(#loc318)
            %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc161)
            %11 = cir.ternary(%10, true {
              %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc163)
              %13 = cir.const #cir.int<10> : !s32i loc(#loc164)
              %14 = cir.cmp(lt, %12, %13) : !s32i, !s32i loc(#loc319)
              %15 = cir.cast(int_to_bool, %14 : !s32i), !cir.bool loc(#loc166)
              %16 = cir.ternary(%15, true {
                %17 = cir.const #true loc(#loc162)
                cir.yield %17 : !cir.bool loc(#loc162)
              }, false {
                %17 = cir.const #false loc(#loc162)
                cir.yield %17 : !cir.bool loc(#loc162)
              }) : (!cir.bool) -> !cir.bool loc(#loc162)
              cir.yield %16 : !cir.bool loc(#loc162)
            }, false {
              %12 = cir.const #false loc(#loc162)
              cir.yield %12 : !cir.bool loc(#loc162)
            }) : (!cir.bool) -> !cir.bool loc(#loc162)
            cir.if %11 {
              %12 = cir.const #cir.int<1> : !s32i loc(#loc170)
              %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc171)
              %14 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc172)
              %15 = cir.ptr_stride(%14 : !cir.ptr<!s32i>, %13 : !s32i), !cir.ptr<!s32i> loc(#loc172)
              cir.store %12, %15 : !s32i, !cir.ptr<!s32i> loc(#loc321)
              cir.scope {
                %16 = cir.const #cir.int<0> : !s32i loc(#loc175)
                cir.store %16, %4 : !s32i, !cir.ptr<!s32i> loc(#loc323)
                cir.for : cond {
                  %17 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc177)
                  %18 = cir.const #cir.int<10> : !s32i loc(#loc178)
                  %19 = cir.cmp(lt, %17, %18) : !s32i, !s32i loc(#loc324)
                  %20 = cir.cast(int_to_bool, %19 : !s32i), !cir.bool loc(#loc179)
                  cir.condition(%20) loc(#loc179)
                } body {
                  cir.scope {
                    %17 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc181)
                    %18 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc182)
                    %19 = cir.ptr_stride(%18 : !cir.ptr<!s32i>, %17 : !s32i), !cir.ptr<!s32i> loc(#loc182)
                    %20 = cir.load %19 : !cir.ptr<!s32i>, !s32i loc(#loc182)
                    cir.call @printIntLine(%20) : (!s32i) -> () loc(#loc183)
                  } loc(#loc325)
                  cir.yield loc(#loc174)
                } step {
                  %17 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc184)
                  %18 = cir.unary(inc, %17) : !s32i, !s32i loc(#loc185)
                  cir.store %18, %4 : !s32i, !cir.ptr<!s32i> loc(#loc326)
                  cir.yield loc(#loc322)
                } loc(#loc322)
              } loc(#loc322)
            } else {
              %12 = cir.get_global @".str3" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc186)
              %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc186)
              cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc187)
            } loc(#loc320)
          } loc(#loc317)
        } loc(#loc314)
      } loc(#loc313)
    } loc(#loc312)
    cir.return loc(#loc143)
  } loc(#loc310)
  cir.func no_proto internal private  @goodB2G2() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc328)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc192)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc193)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc329)
    %3 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc195)
    %4 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc259)
    %5 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc196)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc197)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc197)
    %8 = cir.call @__isoc99_fscanf(%5, %7, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s32i>) -> !s32i loc(#loc195)
    %9 = cir.const #cir.int<1> : !s32i loc(#loc198)
    %10 = cir.get_global @goodB2G2Static : !cir.ptr<!s32i> loc(#loc309)
    cir.store %9, %10 : !s32i, !cir.ptr<!s32i> loc(#loc330)
    %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc200)
    cir.call @goodB2G2Sink(%11) : (!s32i) -> () loc(#loc201)
    cir.return loc(#loc189)
  } loc(#loc327)
  cir.global "private"  internal dsolocal @goodG2BStatic = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc331)
  cir.func internal private  @goodG2BSink(%arg0: !s32i loc(fused[#loc206, #loc207])) extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc333)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc208)
    cir.scope {
      %1 = cir.get_global @goodG2BStatic : !cir.ptr<!s32i> loc(#loc331)
      %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc211)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc211)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc337)
          %5 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc338)
          %6 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc338)
          cir.store %6, %5 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc338)
          cir.scope {
            %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc221)
            %8 = cir.const #cir.int<0> : !s32i loc(#loc222)
            %9 = cir.cmp(ge, %7, %8) : !s32i, !s32i loc(#loc340)
            %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc223)
            cir.if %10 {
              %11 = cir.const #cir.int<1> : !s32i loc(#loc227)
              %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc228)
              %13 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc229)
              %14 = cir.ptr_stride(%13 : !cir.ptr<!s32i>, %12 : !s32i), !cir.ptr<!s32i> loc(#loc229)
              cir.store %11, %14 : !s32i, !cir.ptr<!s32i> loc(#loc342)
              cir.scope {
                %15 = cir.const #cir.int<0> : !s32i loc(#loc232)
                cir.store %15, %4 : !s32i, !cir.ptr<!s32i> loc(#loc344)
                cir.for : cond {
                  %16 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc234)
                  %17 = cir.const #cir.int<10> : !s32i loc(#loc235)
                  %18 = cir.cmp(lt, %16, %17) : !s32i, !s32i loc(#loc345)
                  %19 = cir.cast(int_to_bool, %18 : !s32i), !cir.bool loc(#loc236)
                  cir.condition(%19) loc(#loc236)
                } body {
                  cir.scope {
                    %16 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc238)
                    %17 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc239)
                    %18 = cir.ptr_stride(%17 : !cir.ptr<!s32i>, %16 : !s32i), !cir.ptr<!s32i> loc(#loc239)
                    %19 = cir.load %18 : !cir.ptr<!s32i>, !s32i loc(#loc239)
                    cir.call @printIntLine(%19) : (!s32i) -> () loc(#loc240)
                  } loc(#loc346)
                  cir.yield loc(#loc231)
                } step {
                  %16 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc241)
                  %17 = cir.unary(inc, %16) : !s32i, !s32i loc(#loc242)
                  cir.store %17, %4 : !s32i, !cir.ptr<!s32i> loc(#loc347)
                  cir.yield loc(#loc343)
                } loc(#loc343)
              } loc(#loc343)
            } else {
              %11 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc243)
              %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc243)
              cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc244)
            } loc(#loc341)
          } loc(#loc339)
        } loc(#loc336)
      } loc(#loc335)
    } loc(#loc334)
    cir.return loc(#loc205)
  } loc(#loc332)
  cir.func no_proto internal private  @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc349)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc249)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc250)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc350)
    %3 = cir.const #cir.int<7> : !s32i loc(#loc252)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc351)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc254)
    %5 = cir.get_global @goodG2BStatic : !cir.ptr<!s32i> loc(#loc331)
    cir.store %4, %5 : !s32i, !cir.ptr<!s32i> loc(#loc352)
    %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc256)
    cir.call @goodG2BSink(%6) : (!s32i) -> () loc(#loc257)
    cir.return loc(#loc246)
  } loc(#loc348)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":0:0)
#loc1 = loc("/usr/include/stdio.h":463:1)
#loc2 = loc("/usr/include/stdio.h":465:33)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":57:19)
#loc6 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":23:1)
#loc7 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":23:24)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc9 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc10 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc11 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":45:27)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":25:1)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":49:1)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":26:1)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":27:5)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":48:5)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":27:8)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":28:5)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":29:9)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":47:9)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":30:13)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":30:17)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":31:13)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":31:34)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":34:13)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":46:13)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":34:17)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":34:25)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":34:22)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":35:13)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":42:13)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":44:13)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":36:32)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":36:24)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":36:17)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":38:17)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":41:17)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":38:25)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":38:21)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":38:28)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":38:32)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":38:30)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":39:17)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":40:41)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":40:34)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":40:21)
#loc50 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":38:37)
#loc51 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":38:36)
#loc52 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":45:17)
#loc53 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":51:1)
#loc54 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":60:1)
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":53:5)
#loc56 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":53:9)
#loc57 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":55:13)
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":55:12)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":55:5)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":57:5)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":57:12)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":58:17)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":58:5)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":59:13)
#loc65 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":59:5)
#loc66 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":189:1)
#loc67 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":194:1)
#loc68 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":191:5)
#loc69 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":191:14)
#loc70 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":192:5)
#loc71 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":192:14)
#loc72 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":193:5)
#loc73 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":193:13)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":67:1)
#loc75 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":67:29)
#loc76 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":77:19)
#loc77 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":96:27)
#loc78 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":72:1)
#loc79 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":100:1)
#loc82 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":73:1)
#loc83 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":74:5)
#loc84 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":99:5)
#loc85 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":74:8)
#loc86 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":75:5)
#loc87 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":78:5)
#loc88 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":80:5)
#loc89 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":77:9)
#loc90 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":81:9)
#loc91 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":98:9)
#loc92 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":82:13)
#loc93 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":82:17)
#loc94 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":83:13)
#loc95 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":83:34)
#loc96 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":85:13)
#loc97 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":97:13)
#loc98 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":85:17)
#loc99 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":85:25)
#loc100 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":85:22)
#loc101 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":85:27)
#loc102 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":85:30)
#loc103 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":85:38)
#loc104 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":85:40)
#loc105 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":85:35)
#loc106 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":86:13)
#loc107 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":93:13)
#loc108 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":95:13)
#loc109 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":87:32)
#loc110 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":87:24)
#loc111 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":87:17)
#loc112 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":89:17)
#loc113 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":92:17)
#loc114 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":89:25)
#loc115 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":89:21)
#loc116 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":89:28)
#loc117 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":89:32)
#loc118 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":89:30)
#loc119 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":90:17)
#loc120 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":91:41)
#loc121 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":91:34)
#loc122 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":91:21)
#loc123 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":89:37)
#loc124 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":89:36)
#loc125 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":96:17)
#loc126 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":102:1)
#loc127 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":111:1)
#loc128 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":104:5)
#loc129 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":104:9)
#loc130 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":106:13)
#loc131 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":106:12)
#loc132 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":106:5)
#loc133 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":108:5)
#loc134 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":108:12)
#loc135 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":108:19)
#loc136 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":109:22)
#loc137 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":109:5)
#loc138 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":110:18)
#loc139 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":110:5)
#loc140 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":68:1)
#loc141 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":68:29)
#loc142 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":114:1)
#loc143 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":137:1)
#loc146 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":115:1)
#loc147 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":116:5)
#loc148 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":136:5)
#loc149 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":116:8)
#loc150 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":117:5)
#loc151 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":118:9)
#loc152 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":135:9)
#loc153 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":119:13)
#loc154 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":119:17)
#loc155 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":120:13)
#loc156 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":120:34)
#loc157 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":122:13)
#loc158 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":134:13)
#loc159 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":122:17)
#loc160 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":122:25)
#loc161 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":122:22)
#loc162 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":122:27)
#loc163 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":122:30)
#loc164 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":122:38)
#loc165 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":122:40)
#loc166 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":122:35)
#loc167 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":123:13)
#loc168 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":130:13)
#loc169 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":132:13)
#loc170 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":124:32)
#loc171 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":124:24)
#loc172 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":124:17)
#loc173 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":126:17)
#loc174 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":129:17)
#loc175 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":126:25)
#loc176 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":126:21)
#loc177 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":126:28)
#loc178 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":126:32)
#loc179 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":126:30)
#loc180 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":127:17)
#loc181 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":128:41)
#loc182 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":128:34)
#loc183 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":128:21)
#loc184 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":126:37)
#loc185 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":126:36)
#loc186 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":133:27)
#loc187 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":133:17)
#loc188 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":139:1)
#loc189 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":148:1)
#loc190 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":141:5)
#loc191 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":141:9)
#loc192 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":143:13)
#loc193 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":143:12)
#loc194 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":143:5)
#loc195 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":145:5)
#loc196 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":145:12)
#loc197 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":145:19)
#loc198 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":146:22)
#loc199 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":146:5)
#loc200 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":147:18)
#loc201 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":147:5)
#loc202 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":69:1)
#loc203 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":69:28)
#loc204 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":151:1)
#loc205 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":175:1)
#loc208 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":152:1)
#loc209 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":153:5)
#loc210 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":174:5)
#loc211 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":153:8)
#loc212 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":154:5)
#loc213 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":155:9)
#loc214 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":173:9)
#loc215 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":156:13)
#loc216 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":156:17)
#loc217 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":157:13)
#loc218 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":157:34)
#loc219 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":160:13)
#loc220 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":172:13)
#loc221 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":160:17)
#loc222 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":160:25)
#loc223 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":160:22)
#loc224 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":161:13)
#loc225 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":168:13)
#loc226 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":170:13)
#loc227 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":162:32)
#loc228 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":162:24)
#loc229 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":162:17)
#loc230 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":164:17)
#loc231 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":167:17)
#loc232 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":164:25)
#loc233 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":164:21)
#loc234 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":164:28)
#loc235 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":164:32)
#loc236 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":164:30)
#loc237 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":165:17)
#loc238 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":166:41)
#loc239 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":166:34)
#loc240 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":166:21)
#loc241 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":164:37)
#loc242 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":164:36)
#loc243 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":171:27)
#loc244 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":171:17)
#loc245 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":177:1)
#loc246 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":187:1)
#loc247 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":179:5)
#loc248 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":179:9)
#loc249 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":181:13)
#loc250 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":181:12)
#loc251 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":181:5)
#loc252 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":184:12)
#loc253 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":184:5)
#loc254 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":185:21)
#loc255 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":185:5)
#loc256 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":186:17)
#loc257 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c":186:5)
#loc258 = loc(fused[#loc1, #loc2])
#loc259 = loc(fused[#loc3, #loc4])
#loc260 = loc(fused[#loc6, #loc7])
#loc261 = loc(fused[#loc8, #loc9])
#loc262 = loc(fused[#loc10, #loc11])
#loc263 = loc(fused[#loc13, #loc14])
#loc265 = loc(fused[#loc18, #loc19])
#loc266 = loc(fused[#loc21, #loc19])
#loc267 = loc(fused[#loc22, #loc23])
#loc268 = loc(fused[#loc24, #loc25])
#loc269 = loc(fused[#loc26, #loc27])
#loc270 = loc(fused[#loc28, #loc29])
#loc271 = loc(fused[#loc30, #loc31])
#loc272 = loc(fused[#loc33, #loc34, #loc35, #loc29])
#loc273 = loc(fused[#loc38, #loc36])
#loc274 = loc(fused[#loc39, #loc40])
#loc275 = loc(fused[#loc42, #loc41])
#loc276 = loc(fused[#loc43, #loc44])
#loc277 = loc(fused[#loc46, #loc40])
#loc278 = loc(fused[#loc51, #loc50])
#loc279 = loc(fused[#loc53, #loc54])
#loc280 = loc(fused[#loc55, #loc56])
#loc281 = loc(fused[#loc59, #loc57])
#loc282 = loc(fused[#loc63, #loc62])
#loc283 = loc(fused[#loc66, #loc67])
#loc284 = loc(fused[#loc68, #loc69])
#loc285 = loc(fused[#loc70, #loc71])
#loc286 = loc(fused[#loc72, #loc73])
#loc287 = loc(fused[#loc74, #loc75])
#loc288 = loc(fused[#loc78, #loc79])
#loc290 = loc(fused[#loc83, #loc84])
#loc291 = loc(fused[#loc86, #loc87, #loc88, #loc84])
#loc292 = loc(fused[#loc90, #loc91])
#loc293 = loc(fused[#loc92, #loc93])
#loc294 = loc(fused[#loc94, #loc95])
#loc295 = loc(fused[#loc96, #loc97])
#loc296 = loc(fused[#loc98, #loc99])
#loc297 = loc(fused[#loc102, #loc104])
#loc298 = loc(fused[#loc106, #loc107, #loc108, #loc97])
#loc299 = loc(fused[#loc111, #loc109])
#loc300 = loc(fused[#loc112, #loc113])
#loc301 = loc(fused[#loc115, #loc114])
#loc302 = loc(fused[#loc116, #loc117])
#loc303 = loc(fused[#loc119, #loc113])
#loc304 = loc(fused[#loc124, #loc123])
#loc305 = loc(fused[#loc126, #loc127])
#loc306 = loc(fused[#loc128, #loc129])
#loc307 = loc(fused[#loc132, #loc130])
#loc308 = loc(fused[#loc137, #loc136])
#loc309 = loc(fused[#loc140, #loc141])
#loc310 = loc(fused[#loc142, #loc143])
#loc312 = loc(fused[#loc147, #loc148])
#loc313 = loc(fused[#loc150, #loc148])
#loc314 = loc(fused[#loc151, #loc152])
#loc315 = loc(fused[#loc153, #loc154])
#loc316 = loc(fused[#loc155, #loc156])
#loc317 = loc(fused[#loc157, #loc158])
#loc318 = loc(fused[#loc159, #loc160])
#loc319 = loc(fused[#loc163, #loc165])
#loc320 = loc(fused[#loc167, #loc168, #loc169, #loc158])
#loc321 = loc(fused[#loc172, #loc170])
#loc322 = loc(fused[#loc173, #loc174])
#loc323 = loc(fused[#loc176, #loc175])
#loc324 = loc(fused[#loc177, #loc178])
#loc325 = loc(fused[#loc180, #loc174])
#loc326 = loc(fused[#loc185, #loc184])
#loc327 = loc(fused[#loc188, #loc189])
#loc328 = loc(fused[#loc190, #loc191])
#loc329 = loc(fused[#loc194, #loc192])
#loc330 = loc(fused[#loc199, #loc198])
#loc331 = loc(fused[#loc202, #loc203])
#loc332 = loc(fused[#loc204, #loc205])
#loc334 = loc(fused[#loc209, #loc210])
#loc335 = loc(fused[#loc212, #loc210])
#loc336 = loc(fused[#loc213, #loc214])
#loc337 = loc(fused[#loc215, #loc216])
#loc338 = loc(fused[#loc217, #loc218])
#loc339 = loc(fused[#loc219, #loc220])
#loc340 = loc(fused[#loc221, #loc222])
#loc341 = loc(fused[#loc224, #loc225, #loc226, #loc220])
#loc342 = loc(fused[#loc229, #loc227])
#loc343 = loc(fused[#loc230, #loc231])
#loc344 = loc(fused[#loc233, #loc232])
#loc345 = loc(fused[#loc234, #loc235])
#loc346 = loc(fused[#loc237, #loc231])
#loc347 = loc(fused[#loc242, #loc241])
#loc348 = loc(fused[#loc245, #loc246])
#loc349 = loc(fused[#loc247, #loc248])
#loc350 = loc(fused[#loc251, #loc249])
#loc351 = loc(fused[#loc253, #loc252])
#loc352 = loc(fused[#loc255, #loc254])
