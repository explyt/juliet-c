!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.struct<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.struct<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.struct<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
!ty__IO_FILE = !cir.struct<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int_fgets_add_15.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @fgets(!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc239)
  cir.global "private"  external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc240)
  cir.func private  @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc241)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc242)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"fgets() failed.\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc9)
  cir.global "private"  constant internal dsolocal @".str1" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc10)
  cir.func private  @printIntLine(!s32i) loc(#loc243)
  cir.func no_proto  @CWE190_Integer_Overflow__int_fgets_add_15_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc245)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc17)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc246)
    cir.scope {
      %2 = cir.const #cir.int<6> : !s32i loc(#loc21)
      cir.switch (%2 : !s32i) [
      case (equal, 6) {
        cir.scope {
          %3 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc249)
          %4 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc249)
          cir.store %4, %3 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc249)
          cir.scope {
            %5 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc28)
            %6 = cir.const #cir.int<3> : !s32i loc(#loc29)
            %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc29)
            %8 = cir.const #cir.int<4> : !u64i loc(#loc29)
            %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc29)
            %10 = cir.const #cir.int<2> : !s32i loc(#loc29)
            %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc29)
            %12 = cir.binop(add, %9, %11) : !u64i loc(#loc29)
            %13 = cir.cast(integral, %12 : !u64i), !s32i loc(#loc29)
            %14 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc240)
            %15 = cir.load %14 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc30)
            %16 = cir.call @fgets(%5, %13, %15) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc31)
            %17 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc32)
            %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc32)
            %19 = cir.cmp(ne, %16, %18) : !cir.ptr<!s8i>, !s32i loc(#loc251)
            %20 = cir.cast(int_to_bool, %19 : !s32i), !cir.bool loc(#loc33)
            cir.if %20 {
              %21 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc37)
              %22 = cir.call @atoi(%21) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc38)
              cir.store %22, %0 : !s32i, !cir.ptr<!s32i> loc(#loc253)
            } else {
              %21 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc9)
              %22 = cir.cast(array_to_ptrdecay, %21 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc9)
              cir.call @printLine(%22) : (!cir.ptr<!s8i>) -> () loc(#loc41)
            } loc(#loc252)
          } loc(#loc250)
        } loc(#loc248)
        cir.break loc(#loc42)
      },
      case (default) {
        %3 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc10)
        %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc10)
        cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc43)
        cir.break loc(#loc44)
      }
      ] loc(#loc19)
    } loc(#loc247)
    cir.scope {
      %2 = cir.const #cir.int<7> : !s32i loc(#loc47)
      cir.switch (%2 : !s32i) [
      case (equal, 7) {
        cir.scope {
          %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc256)
          %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc52)
          %5 = cir.const #cir.int<1> : !s32i loc(#loc51)
          %6 = cir.binop(add, %4, %5) nsw : !s32i loc(#loc52)
          cir.store %6, %3 : !s32i, !cir.ptr<!s32i> loc(#loc256)
          %7 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc53)
          cir.call @printIntLine(%7) : (!s32i) -> () loc(#loc54)
        } loc(#loc255)
        cir.break loc(#loc55)
      },
      case (default) {
        %3 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc56)
        %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc56)
        cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc57)
        cir.break loc(#loc58)
      }
      ] loc(#loc45)
    } loc(#loc254)
    cir.return loc(#loc14)
  } loc(#loc244)
  cir.func no_proto  @CWE190_Integer_Overflow__int_fgets_add_15_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc258)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc61)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc259)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc63)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc260)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc65)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc261)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc67)
    cir.return loc(#loc60)
  } loc(#loc257)
  cir.global "private"  constant internal dsolocal @".str2" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc69)
  cir.func no_proto internal private  @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc263)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc74)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc264)
    cir.scope {
      %2 = cir.const #cir.int<6> : !s32i loc(#loc78)
      cir.switch (%2 : !s32i) [
      case (equal, 6) {
        cir.scope {
          %3 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc267)
          %4 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc267)
          cir.store %4, %3 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc267)
          cir.scope {
            %5 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc85)
            %6 = cir.const #cir.int<3> : !s32i loc(#loc86)
            %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc86)
            %8 = cir.const #cir.int<4> : !u64i loc(#loc86)
            %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc86)
            %10 = cir.const #cir.int<2> : !s32i loc(#loc86)
            %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc86)
            %12 = cir.binop(add, %9, %11) : !u64i loc(#loc86)
            %13 = cir.cast(integral, %12 : !u64i), !s32i loc(#loc86)
            %14 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc240)
            %15 = cir.load %14 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc87)
            %16 = cir.call @fgets(%5, %13, %15) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc88)
            %17 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc89)
            %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc89)
            %19 = cir.cmp(ne, %16, %18) : !cir.ptr<!s8i>, !s32i loc(#loc269)
            %20 = cir.cast(int_to_bool, %19 : !s32i), !cir.bool loc(#loc90)
            cir.if %20 {
              %21 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc94)
              %22 = cir.call @atoi(%21) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc95)
              cir.store %22, %0 : !s32i, !cir.ptr<!s32i> loc(#loc271)
            } else {
              %21 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc98)
              %22 = cir.cast(array_to_ptrdecay, %21 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc98)
              cir.call @printLine(%22) : (!cir.ptr<!s8i>) -> () loc(#loc99)
            } loc(#loc270)
          } loc(#loc268)
        } loc(#loc266)
        cir.break loc(#loc100)
      },
      case (default) {
        %3 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc101)
        %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc101)
        cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc102)
        cir.break loc(#loc103)
      }
      ] loc(#loc76)
    } loc(#loc265)
    cir.scope {
      %2 = cir.const #cir.int<8> : !s32i loc(#loc106)
      cir.switch (%2 : !s32i) [
      case (equal, 7) {
        %3 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc107)
        %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc107)
        cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc108)
        cir.break loc(#loc109)
      },
      case (default) {
        cir.scope {
          %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc112)
          %4 = cir.const #cir.int<2147483647> : !s32i loc(#loc113)
          %5 = cir.cmp(lt, %3, %4) : !s32i, !s32i loc(#loc274)
          %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc114)
          cir.if %6 {
            %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc276)
            %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc120)
            %9 = cir.const #cir.int<1> : !s32i loc(#loc119)
            %10 = cir.binop(add, %8, %9) nsw : !s32i loc(#loc120)
            cir.store %10, %7 : !s32i, !cir.ptr<!s32i> loc(#loc276)
            %11 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc121)
            cir.call @printIntLine(%11) : (!s32i) -> () loc(#loc122)
          } else {
            %7 = cir.get_global @".str2" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc69)
            %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc69)
            cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc123)
          } loc(#loc275)
        } loc(#loc273)
        cir.break loc(#loc124)
      }
      ] loc(#loc104)
    } loc(#loc272)
    cir.return loc(#loc71)
  } loc(#loc262)
  cir.func no_proto internal private  @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc278)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc129)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc279)
    cir.scope {
      %2 = cir.const #cir.int<6> : !s32i loc(#loc133)
      cir.switch (%2 : !s32i) [
      case (equal, 6) {
        cir.scope {
          %3 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc282)
          %4 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc282)
          cir.store %4, %3 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc282)
          cir.scope {
            %5 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc140)
            %6 = cir.const #cir.int<3> : !s32i loc(#loc141)
            %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc141)
            %8 = cir.const #cir.int<4> : !u64i loc(#loc141)
            %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc141)
            %10 = cir.const #cir.int<2> : !s32i loc(#loc141)
            %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc141)
            %12 = cir.binop(add, %9, %11) : !u64i loc(#loc141)
            %13 = cir.cast(integral, %12 : !u64i), !s32i loc(#loc141)
            %14 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc240)
            %15 = cir.load %14 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc142)
            %16 = cir.call @fgets(%5, %13, %15) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc143)
            %17 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc144)
            %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc144)
            %19 = cir.cmp(ne, %16, %18) : !cir.ptr<!s8i>, !s32i loc(#loc284)
            %20 = cir.cast(int_to_bool, %19 : !s32i), !cir.bool loc(#loc145)
            cir.if %20 {
              %21 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc149)
              %22 = cir.call @atoi(%21) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc150)
              cir.store %22, %0 : !s32i, !cir.ptr<!s32i> loc(#loc286)
            } else {
              %21 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc153)
              %22 = cir.cast(array_to_ptrdecay, %21 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc153)
              cir.call @printLine(%22) : (!cir.ptr<!s8i>) -> () loc(#loc154)
            } loc(#loc285)
          } loc(#loc283)
        } loc(#loc281)
        cir.break loc(#loc155)
      },
      case (default) {
        %3 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc156)
        %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc156)
        cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc157)
        cir.break loc(#loc158)
      }
      ] loc(#loc131)
    } loc(#loc280)
    cir.scope {
      %2 = cir.const #cir.int<7> : !s32i loc(#loc161)
      cir.switch (%2 : !s32i) [
      case (equal, 7) {
        cir.scope {
          %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc164)
          %4 = cir.const #cir.int<2147483647> : !s32i loc(#loc165)
          %5 = cir.cmp(lt, %3, %4) : !s32i, !s32i loc(#loc289)
          %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc166)
          cir.if %6 {
            %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc291)
            %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc172)
            %9 = cir.const #cir.int<1> : !s32i loc(#loc171)
            %10 = cir.binop(add, %8, %9) nsw : !s32i loc(#loc172)
            cir.store %10, %7 : !s32i, !cir.ptr<!s32i> loc(#loc291)
            %11 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc173)
            cir.call @printIntLine(%11) : (!s32i) -> () loc(#loc174)
          } else {
            %7 = cir.get_global @".str2" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc175)
            %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc175)
            cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc176)
          } loc(#loc290)
        } loc(#loc288)
        cir.break loc(#loc177)
      },
      case (default) {
        %3 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc178)
        %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc178)
        cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc179)
        cir.break loc(#loc180)
      }
      ] loc(#loc159)
    } loc(#loc287)
    cir.return loc(#loc126)
  } loc(#loc277)
  cir.func no_proto internal private  @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc293)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc185)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc294)
    cir.scope {
      %2 = cir.const #cir.int<5> : !s32i loc(#loc189)
      cir.switch (%2 : !s32i) [
      case (equal, 6) {
        %3 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc190)
        %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc190)
        cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc191)
        cir.break loc(#loc192)
      },
      case (default) {
        %3 = cir.const #cir.int<2> : !s32i loc(#loc193)
        cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc296)
        cir.break loc(#loc195)
      }
      ] loc(#loc187)
    } loc(#loc295)
    cir.scope {
      %2 = cir.const #cir.int<7> : !s32i loc(#loc198)
      cir.switch (%2 : !s32i) [
      case (equal, 7) {
        cir.scope {
          %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc299)
          %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc203)
          %5 = cir.const #cir.int<1> : !s32i loc(#loc202)
          %6 = cir.binop(add, %4, %5) nsw : !s32i loc(#loc203)
          cir.store %6, %3 : !s32i, !cir.ptr<!s32i> loc(#loc299)
          %7 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc204)
          cir.call @printIntLine(%7) : (!s32i) -> () loc(#loc205)
        } loc(#loc298)
        cir.break loc(#loc206)
      },
      case (default) {
        %3 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc207)
        %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc207)
        cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc208)
        cir.break loc(#loc209)
      }
      ] loc(#loc196)
    } loc(#loc297)
    cir.return loc(#loc182)
  } loc(#loc292)
  cir.func no_proto internal private  @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc301)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc214)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc302)
    cir.scope {
      %2 = cir.const #cir.int<6> : !s32i loc(#loc218)
      cir.switch (%2 : !s32i) [
      case (equal, 6) {
        %3 = cir.const #cir.int<2> : !s32i loc(#loc219)
        cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc304)
        cir.break loc(#loc221)
      },
      case (default) {
        %3 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc222)
        %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc222)
        cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc223)
        cir.break loc(#loc224)
      }
      ] loc(#loc216)
    } loc(#loc303)
    cir.scope {
      %2 = cir.const #cir.int<7> : !s32i loc(#loc227)
      cir.switch (%2 : !s32i) [
      case (equal, 7) {
        cir.scope {
          %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc307)
          %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc232)
          %5 = cir.const #cir.int<1> : !s32i loc(#loc231)
          %6 = cir.binop(add, %4, %5) nsw : !s32i loc(#loc232)
          cir.store %6, %3 : !s32i, !cir.ptr<!s32i> loc(#loc307)
          %7 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc233)
          cir.call @printIntLine(%7) : (!s32i) -> () loc(#loc234)
        } loc(#loc306)
        cir.break loc(#loc235)
      },
      case (default) {
        %3 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc236)
        %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc236)
        cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc237)
        cir.break loc(#loc238)
      }
      ] loc(#loc225)
    } loc(#loc305)
    cir.return loc(#loc211)
  } loc(#loc300)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int_fgets_add_15.c":0:0)
#loc1 = loc("/usr/include/stdio.h":654:1)
#loc2 = loc("/usr/include/stdio.h":655:59)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("/usr/include/stdlib.h":105:1)
#loc6 = loc("/usr/include/stdlib.h":106:33)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":42:23)
#loc10 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":48:19)
#loc11 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc12 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc13 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":24:1)
#loc14 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":65:1)
#loc15 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":26:5)
#loc16 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":26:9)
#loc17 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":28:12)
#loc18 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":28:5)
#loc19 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":29:5)
#loc20 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":50:5)
#loc21 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":29:12)
#loc22 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":32:5)
#loc23 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":44:5)
#loc24 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":33:9)
#loc25 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":33:45)
#loc26 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":35:9)
#loc27 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":43:9)
#loc28 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":35:19)
#loc29 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":35:32)
#loc30 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":35:49)
#loc31 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":35:13)
#loc32 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":35:59)
#loc33 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":35:56)
#loc34 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":36:9)
#loc35 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":39:9)
#loc36 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":41:9)
#loc37 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":38:25)
#loc38 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":38:20)
#loc39 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":38:13)
#loc40 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":38:36)
#loc41 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":42:13)
#loc42 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":45:5)
#loc43 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":48:9)
#loc44 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":49:9)
#loc45 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":51:5)
#loc46 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":64:5)
#loc47 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":51:12)
#loc48 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":54:5)
#loc49 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":58:5)
#loc50 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":56:9)
#loc51 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":56:29)
#loc52 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":56:22)
#loc53 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":57:22)
#loc54 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":57:9)
#loc55 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":59:5)
#loc56 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":62:19)
#loc57 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":62:9)
#loc58 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":63:9)
#loc59 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":235:1)
#loc60 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":241:1)
#loc61 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":237:5)
#loc62 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":237:14)
#loc63 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":238:5)
#loc64 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":238:14)
#loc65 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":239:5)
#loc66 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":239:14)
#loc67 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":240:5)
#loc68 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":240:14)
#loc69 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":114:23)
#loc70 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":72:1)
#loc71 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":118:1)
#loc72 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":74:5)
#loc73 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":74:9)
#loc74 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":76:12)
#loc75 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":76:5)
#loc76 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":77:5)
#loc77 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":98:5)
#loc78 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":77:12)
#loc79 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":80:5)
#loc80 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":92:5)
#loc81 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":81:9)
#loc82 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":81:45)
#loc83 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":83:9)
#loc84 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":91:9)
#loc85 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":83:19)
#loc86 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":83:32)
#loc87 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":83:49)
#loc88 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":83:13)
#loc89 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":83:59)
#loc90 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":83:56)
#loc91 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":84:9)
#loc92 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":87:9)
#loc93 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":89:9)
#loc94 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":86:25)
#loc95 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":86:20)
#loc96 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":86:13)
#loc97 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":86:36)
#loc98 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":90:23)
#loc99 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":90:13)
#loc100 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":93:5)
#loc101 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":96:19)
#loc102 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":96:9)
#loc103 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":97:9)
#loc104 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":99:5)
#loc105 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":117:5)
#loc106 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":99:12)
#loc107 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":103:19)
#loc108 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":103:9)
#loc109 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":104:9)
#loc110 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":107:9)
#loc111 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":115:9)
#loc112 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":107:13)
#loc113 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":107:20)
#loc114 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":107:18)
#loc115 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":108:9)
#loc116 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":111:9)
#loc117 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":113:9)
#loc118 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":109:13)
#loc119 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":109:33)
#loc120 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":109:26)
#loc121 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":110:26)
#loc122 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":110:13)
#loc123 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":114:13)
#loc124 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":116:9)
#loc125 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":121:1)
#loc126 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":167:1)
#loc127 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":123:5)
#loc128 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":123:9)
#loc129 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":125:12)
#loc130 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":125:5)
#loc131 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":126:5)
#loc132 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":147:5)
#loc133 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":126:12)
#loc134 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":129:5)
#loc135 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":141:5)
#loc136 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":130:9)
#loc137 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":130:45)
#loc138 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":132:9)
#loc139 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":140:9)
#loc140 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":132:19)
#loc141 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":132:32)
#loc142 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":132:49)
#loc143 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":132:13)
#loc144 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":132:59)
#loc145 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":132:56)
#loc146 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":133:9)
#loc147 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":136:9)
#loc148 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":138:9)
#loc149 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":135:25)
#loc150 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":135:20)
#loc151 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":135:13)
#loc152 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":135:36)
#loc153 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":139:23)
#loc154 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":139:13)
#loc155 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":142:5)
#loc156 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":145:19)
#loc157 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":145:9)
#loc158 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":146:9)
#loc159 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":148:5)
#loc160 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":166:5)
#loc161 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":148:12)
#loc162 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":152:9)
#loc163 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":160:9)
#loc164 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":152:13)
#loc165 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":152:20)
#loc166 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":152:18)
#loc167 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":153:9)
#loc168 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":156:9)
#loc169 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":158:9)
#loc170 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":154:13)
#loc171 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":154:33)
#loc172 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":154:26)
#loc173 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":155:26)
#loc174 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":155:13)
#loc175 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":159:23)
#loc176 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":159:13)
#loc177 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":161:9)
#loc178 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":164:19)
#loc179 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":164:9)
#loc180 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":165:9)
#loc181 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":170:1)
#loc182 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":200:1)
#loc183 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":172:5)
#loc184 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":172:9)
#loc185 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":174:12)
#loc186 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":174:5)
#loc187 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":175:5)
#loc188 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":185:5)
#loc189 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":175:12)
#loc190 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":179:19)
#loc191 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":179:9)
#loc192 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":180:9)
#loc193 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":183:16)
#loc194 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":183:9)
#loc195 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":184:9)
#loc196 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":186:5)
#loc197 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":199:5)
#loc198 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":186:12)
#loc199 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":189:5)
#loc200 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":193:5)
#loc201 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":191:9)
#loc202 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":191:29)
#loc203 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":191:22)
#loc204 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":192:22)
#loc205 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":192:9)
#loc206 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":194:5)
#loc207 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":197:19)
#loc208 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":197:9)
#loc209 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":198:9)
#loc210 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":203:1)
#loc211 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":233:1)
#loc212 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":205:5)
#loc213 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":205:9)
#loc214 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":207:12)
#loc215 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":207:5)
#loc216 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":208:5)
#loc217 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":218:5)
#loc218 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":208:12)
#loc219 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":212:16)
#loc220 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":212:9)
#loc221 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":213:9)
#loc222 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":216:19)
#loc223 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":216:9)
#loc224 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":217:9)
#loc225 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":219:5)
#loc226 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":232:5)
#loc227 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":219:12)
#loc228 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":222:5)
#loc229 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":226:5)
#loc230 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":224:9)
#loc231 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":224:29)
#loc232 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":224:22)
#loc233 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":225:22)
#loc234 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":225:9)
#loc235 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":227:5)
#loc236 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":230:19)
#loc237 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":230:9)
#loc238 = loc("CWE190_Integer_Overflow__int_fgets_add_15.c":231:9)
#loc239 = loc(fused[#loc1, #loc2])
#loc240 = loc(fused[#loc3, #loc4])
#loc241 = loc(fused[#loc5, #loc6])
#loc242 = loc(fused[#loc7, #loc8])
#loc243 = loc(fused[#loc11, #loc12])
#loc244 = loc(fused[#loc13, #loc14])
#loc245 = loc(fused[#loc15, #loc16])
#loc246 = loc(fused[#loc18, #loc17])
#loc247 = loc(fused[#loc19, #loc20])
#loc248 = loc(fused[#loc22, #loc23])
#loc249 = loc(fused[#loc24, #loc25])
#loc250 = loc(fused[#loc26, #loc27])
#loc251 = loc(fused[#loc31, #loc32])
#loc252 = loc(fused[#loc34, #loc35, #loc36, #loc27])
#loc253 = loc(fused[#loc39, #loc40])
#loc254 = loc(fused[#loc45, #loc46])
#loc255 = loc(fused[#loc48, #loc49])
#loc256 = loc(fused[#loc50, #loc51])
#loc257 = loc(fused[#loc59, #loc60])
#loc258 = loc(fused[#loc61, #loc62])
#loc259 = loc(fused[#loc63, #loc64])
#loc260 = loc(fused[#loc65, #loc66])
#loc261 = loc(fused[#loc67, #loc68])
#loc262 = loc(fused[#loc70, #loc71])
#loc263 = loc(fused[#loc72, #loc73])
#loc264 = loc(fused[#loc75, #loc74])
#loc265 = loc(fused[#loc76, #loc77])
#loc266 = loc(fused[#loc79, #loc80])
#loc267 = loc(fused[#loc81, #loc82])
#loc268 = loc(fused[#loc83, #loc84])
#loc269 = loc(fused[#loc88, #loc89])
#loc270 = loc(fused[#loc91, #loc92, #loc93, #loc84])
#loc271 = loc(fused[#loc96, #loc97])
#loc272 = loc(fused[#loc104, #loc105])
#loc273 = loc(fused[#loc110, #loc111])
#loc274 = loc(fused[#loc112, #loc113])
#loc275 = loc(fused[#loc115, #loc116, #loc117, #loc111])
#loc276 = loc(fused[#loc118, #loc119])
#loc277 = loc(fused[#loc125, #loc126])
#loc278 = loc(fused[#loc127, #loc128])
#loc279 = loc(fused[#loc130, #loc129])
#loc280 = loc(fused[#loc131, #loc132])
#loc281 = loc(fused[#loc134, #loc135])
#loc282 = loc(fused[#loc136, #loc137])
#loc283 = loc(fused[#loc138, #loc139])
#loc284 = loc(fused[#loc143, #loc144])
#loc285 = loc(fused[#loc146, #loc147, #loc148, #loc139])
#loc286 = loc(fused[#loc151, #loc152])
#loc287 = loc(fused[#loc159, #loc160])
#loc288 = loc(fused[#loc162, #loc163])
#loc289 = loc(fused[#loc164, #loc165])
#loc290 = loc(fused[#loc167, #loc168, #loc169, #loc163])
#loc291 = loc(fused[#loc170, #loc171])
#loc292 = loc(fused[#loc181, #loc182])
#loc293 = loc(fused[#loc183, #loc184])
#loc294 = loc(fused[#loc186, #loc185])
#loc295 = loc(fused[#loc187, #loc188])
#loc296 = loc(fused[#loc194, #loc193])
#loc297 = loc(fused[#loc196, #loc197])
#loc298 = loc(fused[#loc199, #loc200])
#loc299 = loc(fused[#loc201, #loc202])
#loc300 = loc(fused[#loc210, #loc211])
#loc301 = loc(fused[#loc212, #loc213])
#loc302 = loc(fused[#loc215, #loc214])
#loc303 = loc(fused[#loc216, #loc217])
#loc304 = loc(fused[#loc220, #loc219])
#loc305 = loc(fused[#loc225, #loc226])
#loc306 = loc(fused[#loc228, #loc229])
#loc307 = loc(fused[#loc230, #loc231])
