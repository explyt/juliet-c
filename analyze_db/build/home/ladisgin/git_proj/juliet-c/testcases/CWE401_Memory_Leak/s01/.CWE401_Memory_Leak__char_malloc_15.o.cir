!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE401_Memory_Leak/s01/CWE401_Memory_Leak__char_malloc_15.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc206)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc207)
  cir.func private @strcpy(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc208)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"A String\00" : !cir.array<!s8i x 9>> : !cir.array<!s8i x 9> {alignment = 1 : i64} loc(#loc7)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc209)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc10)
  cir.func no_proto @CWE401_Memory_Leak__char_malloc_15_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc211)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc15)
    cir.store %1, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc212)
    cir.br ^bb1 loc(#loc213)
  ^bb1:  // pred: ^bb0
    %2 = cir.const #cir.int<6> : !s32i loc(#loc19)
    cir.br ^bb2 loc(#loc17)
  ^bb2:  // pred: ^bb1
    cir.switch.flat %2 : !s32i, ^bb9 [
      6: ^bb4
    ] loc(#loc17)
  ^bb3:  // no predecessors
    cir.br ^bb4 loc(#loc20)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    %3 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc21)
    %4 = cir.const #cir.int<100> : !s32i loc(#loc22)
    %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc22)
    %6 = cir.const #cir.int<1> : !u64i loc(#loc214)
    %7 = cir.binop(mul, %5, %6) : !u64i loc(#loc215)
    %8 = cir.call @malloc(%7) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc21)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc216)
    cir.store %9, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc217)
    cir.br ^bb5 loc(#loc218)
  ^bb5:  // pred: ^bb4
    %10 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc29)
    %11 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc30)
    %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc30)
    %13 = cir.cmp(eq, %10, %12) : !cir.ptr<!s8i>, !cir.bool loc(#loc219)
    cir.brcond %13 ^bb6, ^bb7 loc(#loc220)
  ^bb6:  // pred: ^bb5
    %14 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc32)
    %15 = cir.const #cir.int<1> : !s32i loc(#loc33)
    %16 = cir.unary(minus, %15) : !s32i, !s32i loc(#loc34)
    cir.call @exit(%16) : (!s32i) -> () extra(#fn_attr) loc(#loc32)
    cir.br ^bb7 loc(#loc28)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc28)
  ^bb8:  // pred: ^bb7
    %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc35)
    %18 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc7)
    %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc7)
    %20 = cir.call @strcpy(%17, %19) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc36)
    %21 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc37)
    cir.call @printLine(%21) : (!cir.ptr<!s8i>) -> () loc(#loc38)
    cir.br ^bb10 loc(#loc39)
  ^bb9:  // pred: ^bb2
    %22 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc10)
    %23 = cir.cast(array_to_ptrdecay, %22 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc10)
    cir.call @printLine(%23) : (!cir.ptr<!s8i>) -> () loc(#loc40)
    cir.br ^bb10 loc(#loc41)
  ^bb10:  // 2 preds: ^bb8, ^bb9
    cir.br ^bb11 loc(#loc18)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc221)
  ^bb12:  // pred: ^bb11
    %24 = cir.const #cir.int<7> : !s32i loc(#loc44)
    cir.br ^bb13 loc(#loc42)
  ^bb13:  // pred: ^bb12
    cir.switch.flat %24 : !s32i, ^bb16 [
      7: ^bb15
    ] loc(#loc42)
  ^bb14:  // no predecessors
    cir.br ^bb15 loc(#loc45)
  ^bb15:  // 2 preds: ^bb13, ^bb14
    cir.br ^bb17 loc(#loc46)
  ^bb16:  // pred: ^bb13
    %25 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc47)
    %26 = cir.cast(array_to_ptrdecay, %25 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc47)
    cir.call @printLine(%26) : (!cir.ptr<!s8i>) -> () loc(#loc48)
    cir.br ^bb17 loc(#loc49)
  ^bb17:  // 2 preds: ^bb15, ^bb16
    cir.br ^bb18 loc(#loc43)
  ^bb18:  // pred: ^bb17
    cir.return loc(#loc12)
  } loc(#loc210)
  cir.func no_proto @CWE401_Memory_Leak__char_malloc_15_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc223)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc52)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc224)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc54)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc225)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc56)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc226)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc58)
    cir.return loc(#loc51)
  } loc(#loc222)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc227)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc229)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc66)
    cir.store %1, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc230)
    cir.br ^bb1 loc(#loc231)
  ^bb1:  // pred: ^bb0
    %2 = cir.const #cir.int<6> : !s32i loc(#loc70)
    cir.br ^bb2 loc(#loc68)
  ^bb2:  // pred: ^bb1
    cir.switch.flat %2 : !s32i, ^bb9 [
      6: ^bb4
    ] loc(#loc68)
  ^bb3:  // no predecessors
    cir.br ^bb4 loc(#loc71)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    %3 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc72)
    %4 = cir.const #cir.int<100> : !s32i loc(#loc73)
    %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc73)
    %6 = cir.const #cir.int<1> : !u64i loc(#loc232)
    %7 = cir.binop(mul, %5, %6) : !u64i loc(#loc233)
    %8 = cir.call @malloc(%7) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc72)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc234)
    cir.store %9, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc235)
    cir.br ^bb5 loc(#loc236)
  ^bb5:  // pred: ^bb4
    %10 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc80)
    %11 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc81)
    %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc81)
    %13 = cir.cmp(eq, %10, %12) : !cir.ptr<!s8i>, !cir.bool loc(#loc237)
    cir.brcond %13 ^bb6, ^bb7 loc(#loc238)
  ^bb6:  // pred: ^bb5
    %14 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc83)
    %15 = cir.const #cir.int<1> : !s32i loc(#loc84)
    %16 = cir.unary(minus, %15) : !s32i, !s32i loc(#loc85)
    cir.call @exit(%16) : (!s32i) -> () extra(#fn_attr) loc(#loc83)
    cir.br ^bb7 loc(#loc79)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc79)
  ^bb8:  // pred: ^bb7
    %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc86)
    %18 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc87)
    %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc87)
    %20 = cir.call @strcpy(%17, %19) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc88)
    %21 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc89)
    cir.call @printLine(%21) : (!cir.ptr<!s8i>) -> () loc(#loc90)
    cir.br ^bb10 loc(#loc91)
  ^bb9:  // pred: ^bb2
    %22 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc92)
    %23 = cir.cast(array_to_ptrdecay, %22 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc92)
    cir.call @printLine(%23) : (!cir.ptr<!s8i>) -> () loc(#loc93)
    cir.br ^bb10 loc(#loc94)
  ^bb10:  // 2 preds: ^bb8, ^bb9
    cir.br ^bb11 loc(#loc69)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc239)
  ^bb12:  // pred: ^bb11
    %24 = cir.const #cir.int<8> : !s32i loc(#loc97)
    cir.br ^bb13 loc(#loc95)
  ^bb13:  // pred: ^bb12
    cir.switch.flat %24 : !s32i, ^bb16 [
      7: ^bb15
    ] loc(#loc95)
  ^bb14:  // no predecessors
    cir.br ^bb15 loc(#loc98)
  ^bb15:  // 2 preds: ^bb13, ^bb14
    %25 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc99)
    %26 = cir.cast(array_to_ptrdecay, %25 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc99)
    cir.call @printLine(%26) : (!cir.ptr<!s8i>) -> () loc(#loc100)
    cir.br ^bb17 loc(#loc101)
  ^bb16:  // pred: ^bb13
    %27 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc102)
    %28 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc103)
    %29 = cir.cast(bitcast, %28 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc103)
    cir.call @free(%29) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc102)
    cir.br ^bb17 loc(#loc104)
  ^bb17:  // 2 preds: ^bb15, ^bb16
    cir.br ^bb18 loc(#loc96)
  ^bb18:  // pred: ^bb17
    cir.return loc(#loc63)
  } loc(#loc228)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc241)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc109)
    cir.store %1, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc242)
    cir.br ^bb1 loc(#loc243)
  ^bb1:  // pred: ^bb0
    %2 = cir.const #cir.int<6> : !s32i loc(#loc113)
    cir.br ^bb2 loc(#loc111)
  ^bb2:  // pred: ^bb1
    cir.switch.flat %2 : !s32i, ^bb9 [
      6: ^bb4
    ] loc(#loc111)
  ^bb3:  // no predecessors
    cir.br ^bb4 loc(#loc114)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    %3 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc115)
    %4 = cir.const #cir.int<100> : !s32i loc(#loc116)
    %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc116)
    %6 = cir.const #cir.int<1> : !u64i loc(#loc244)
    %7 = cir.binop(mul, %5, %6) : !u64i loc(#loc245)
    %8 = cir.call @malloc(%7) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc115)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc246)
    cir.store %9, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc247)
    cir.br ^bb5 loc(#loc248)
  ^bb5:  // pred: ^bb4
    %10 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc123)
    %11 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc124)
    %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc124)
    %13 = cir.cmp(eq, %10, %12) : !cir.ptr<!s8i>, !cir.bool loc(#loc249)
    cir.brcond %13 ^bb6, ^bb7 loc(#loc250)
  ^bb6:  // pred: ^bb5
    %14 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc126)
    %15 = cir.const #cir.int<1> : !s32i loc(#loc127)
    %16 = cir.unary(minus, %15) : !s32i, !s32i loc(#loc128)
    cir.call @exit(%16) : (!s32i) -> () extra(#fn_attr) loc(#loc126)
    cir.br ^bb7 loc(#loc122)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc122)
  ^bb8:  // pred: ^bb7
    %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc129)
    %18 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc130)
    %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc130)
    %20 = cir.call @strcpy(%17, %19) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc131)
    %21 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc132)
    cir.call @printLine(%21) : (!cir.ptr<!s8i>) -> () loc(#loc133)
    cir.br ^bb10 loc(#loc134)
  ^bb9:  // pred: ^bb2
    %22 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc135)
    %23 = cir.cast(array_to_ptrdecay, %22 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc135)
    cir.call @printLine(%23) : (!cir.ptr<!s8i>) -> () loc(#loc136)
    cir.br ^bb10 loc(#loc137)
  ^bb10:  // 2 preds: ^bb8, ^bb9
    cir.br ^bb11 loc(#loc112)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc251)
  ^bb12:  // pred: ^bb11
    %24 = cir.const #cir.int<7> : !s32i loc(#loc140)
    cir.br ^bb13 loc(#loc138)
  ^bb13:  // pred: ^bb12
    cir.switch.flat %24 : !s32i, ^bb16 [
      7: ^bb15
    ] loc(#loc138)
  ^bb14:  // no predecessors
    cir.br ^bb15 loc(#loc141)
  ^bb15:  // 2 preds: ^bb13, ^bb14
    %25 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc142)
    %26 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc143)
    %27 = cir.cast(bitcast, %26 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc143)
    cir.call @free(%27) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc142)
    cir.br ^bb17 loc(#loc144)
  ^bb16:  // pred: ^bb13
    %28 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc145)
    %29 = cir.cast(array_to_ptrdecay, %28 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc145)
    cir.call @printLine(%29) : (!cir.ptr<!s8i>) -> () loc(#loc146)
    cir.br ^bb17 loc(#loc147)
  ^bb17:  // 2 preds: ^bb15, ^bb16
    cir.br ^bb18 loc(#loc139)
  ^bb18:  // pred: ^bb17
    cir.return loc(#loc106)
  } loc(#loc240)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc253)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc152)
    cir.store %1, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc254)
    cir.br ^bb1 loc(#loc255)
  ^bb1:  // pred: ^bb0
    %2 = cir.const #cir.int<5> : !s32i loc(#loc156)
    cir.br ^bb2 loc(#loc154)
  ^bb2:  // pred: ^bb1
    cir.switch.flat %2 : !s32i, ^bb5 [
      6: ^bb4
    ] loc(#loc154)
  ^bb3:  // no predecessors
    cir.br ^bb4 loc(#loc157)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    %3 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc158)
    %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc158)
    cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc159)
    cir.br ^bb6 loc(#loc160)
  ^bb5:  // pred: ^bb2
    %5 = cir.const #cir.int<100> : !s32i loc(#loc161)
    %6 = cir.cast(integral, %5 : !s32i), !u64i loc(#loc161)
    %7 = cir.const #cir.int<1> : !u64i loc(#loc161)
    %8 = cir.binop(mul, %6, %7) : !u64i loc(#loc161)
    %9 = cir.alloca !u8i, !cir.ptr<!u8i>, %8 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc161)
    %10 = cir.cast(bitcast, %9 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc161)
    %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc161)
    cir.store %11, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc256)
    %12 = cir.get_global @strcpy : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc163)
    %13 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc164)
    %14 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc165)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc165)
    %16 = cir.call @strcpy(%13, %15) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc163)
    %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc166)
    cir.call @printLine(%17) : (!cir.ptr<!s8i>) -> () loc(#loc167)
    cir.br ^bb6 loc(#loc168)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc155)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc257)
  ^bb8:  // pred: ^bb7
    %18 = cir.const #cir.int<7> : !s32i loc(#loc171)
    cir.br ^bb9 loc(#loc169)
  ^bb9:  // pred: ^bb8
    cir.switch.flat %18 : !s32i, ^bb12 [
      7: ^bb11
    ] loc(#loc169)
  ^bb10:  // no predecessors
    cir.br ^bb11 loc(#loc172)
  ^bb11:  // 2 preds: ^bb9, ^bb10
    cir.br ^bb13 loc(#loc173)
  ^bb12:  // pred: ^bb9
    %19 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc174)
    %20 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc174)
    cir.call @printLine(%20) : (!cir.ptr<!s8i>) -> () loc(#loc175)
    cir.br ^bb13 loc(#loc176)
  ^bb13:  // 2 preds: ^bb11, ^bb12
    cir.br ^bb14 loc(#loc170)
  ^bb14:  // pred: ^bb13
    cir.return loc(#loc149)
  } loc(#loc252)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc259)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc181)
    cir.store %1, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc260)
    cir.br ^bb1 loc(#loc261)
  ^bb1:  // pred: ^bb0
    %2 = cir.const #cir.int<6> : !s32i loc(#loc185)
    cir.br ^bb2 loc(#loc183)
  ^bb2:  // pred: ^bb1
    cir.switch.flat %2 : !s32i, ^bb5 [
      6: ^bb4
    ] loc(#loc183)
  ^bb3:  // no predecessors
    cir.br ^bb4 loc(#loc186)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    %3 = cir.const #cir.int<100> : !s32i loc(#loc187)
    %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc187)
    %5 = cir.const #cir.int<1> : !u64i loc(#loc187)
    %6 = cir.binop(mul, %4, %5) : !u64i loc(#loc187)
    %7 = cir.alloca !u8i, !cir.ptr<!u8i>, %6 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc187)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc187)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc187)
    cir.store %9, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc262)
    %10 = cir.get_global @strcpy : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc189)
    %11 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc190)
    %12 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc191)
    %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc191)
    %14 = cir.call @strcpy(%11, %13) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc189)
    %15 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc192)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc193)
    cir.br ^bb6 loc(#loc194)
  ^bb5:  // pred: ^bb2
    %16 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc195)
    %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc195)
    cir.call @printLine(%17) : (!cir.ptr<!s8i>) -> () loc(#loc196)
    cir.br ^bb6 loc(#loc197)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc184)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc263)
  ^bb8:  // pred: ^bb7
    %18 = cir.const #cir.int<7> : !s32i loc(#loc200)
    cir.br ^bb9 loc(#loc198)
  ^bb9:  // pred: ^bb8
    cir.switch.flat %18 : !s32i, ^bb12 [
      7: ^bb11
    ] loc(#loc198)
  ^bb10:  // no predecessors
    cir.br ^bb11 loc(#loc201)
  ^bb11:  // 2 preds: ^bb9, ^bb10
    cir.br ^bb13 loc(#loc202)
  ^bb12:  // pred: ^bb9
    %19 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc203)
    %20 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc203)
    cir.call @printLine(%20) : (!cir.ptr<!s8i>) -> () loc(#loc204)
    cir.br ^bb13 loc(#loc205)
  ^bb13:  // 2 preds: ^bb11, ^bb12
    cir.br ^bb14 loc(#loc199)
  ^bb14:  // pred: ^bb13
    cir.return loc(#loc178)
  } loc(#loc258)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE401_Memory_Leak/s01/CWE401_Memory_Leak__char_malloc_15.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("/usr/include/string.h":141:1)
#loc6 = loc("/usr/include/string.h":142:14)
#loc7 = loc("CWE401_Memory_Leak__char_malloc_15.c":35:22)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc9 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc10 = loc("CWE401_Memory_Leak__char_malloc_15.c":40:19)
#loc11 = loc("CWE401_Memory_Leak__char_malloc_15.c":24:1)
#loc12 = loc("CWE401_Memory_Leak__char_malloc_15.c":54:1)
#loc13 = loc("CWE401_Memory_Leak__char_malloc_15.c":26:5)
#loc14 = loc("CWE401_Memory_Leak__char_malloc_15.c":26:12)
#loc15 = loc("CWE401_Memory_Leak__char_malloc_15.c":27:12)
#loc16 = loc("CWE401_Memory_Leak__char_malloc_15.c":27:5)
#loc17 = loc("CWE401_Memory_Leak__char_malloc_15.c":28:5)
#loc18 = loc("CWE401_Memory_Leak__char_malloc_15.c":42:5)
#loc19 = loc("CWE401_Memory_Leak__char_malloc_15.c":28:12)
#loc20 = loc("CWE401_Memory_Leak__char_malloc_15.c":30:5)
#loc21 = loc("CWE401_Memory_Leak__char_malloc_15.c":32:24)
#loc22 = loc("CWE401_Memory_Leak__char_malloc_15.c":32:31)
#loc23 = loc("CWE401_Memory_Leak__char_malloc_15.c":32:35)
#loc24 = loc("CWE401_Memory_Leak__char_malloc_15.c":32:46)
#loc25 = loc("CWE401_Memory_Leak__char_malloc_15.c":32:47)
#loc26 = loc("CWE401_Memory_Leak__char_malloc_15.c":32:9)
#loc27 = loc("CWE401_Memory_Leak__char_malloc_15.c":33:9)
#loc28 = loc("CWE401_Memory_Leak__char_malloc_15.c":33:37)
#loc29 = loc("CWE401_Memory_Leak__char_malloc_15.c":33:13)
#loc30 = loc("CWE401_Memory_Leak__char_malloc_15.c":33:21)
#loc31 = loc("CWE401_Memory_Leak__char_malloc_15.c":33:27)
#loc32 = loc("CWE401_Memory_Leak__char_malloc_15.c":33:28)
#loc33 = loc("CWE401_Memory_Leak__char_malloc_15.c":33:34)
#loc34 = loc("CWE401_Memory_Leak__char_malloc_15.c":33:33)
#loc35 = loc("CWE401_Memory_Leak__char_malloc_15.c":35:16)
#loc36 = loc("CWE401_Memory_Leak__char_malloc_15.c":35:9)
#loc37 = loc("CWE401_Memory_Leak__char_malloc_15.c":36:19)
#loc38 = loc("CWE401_Memory_Leak__char_malloc_15.c":36:9)
#loc39 = loc("CWE401_Memory_Leak__char_malloc_15.c":37:9)
#loc40 = loc("CWE401_Memory_Leak__char_malloc_15.c":40:9)
#loc41 = loc("CWE401_Memory_Leak__char_malloc_15.c":41:9)
#loc42 = loc("CWE401_Memory_Leak__char_malloc_15.c":43:5)
#loc43 = loc("CWE401_Memory_Leak__char_malloc_15.c":53:5)
#loc44 = loc("CWE401_Memory_Leak__char_malloc_15.c":43:12)
#loc45 = loc("CWE401_Memory_Leak__char_malloc_15.c":45:5)
#loc46 = loc("CWE401_Memory_Leak__char_malloc_15.c":48:9)
#loc47 = loc("CWE401_Memory_Leak__char_malloc_15.c":51:19)
#loc48 = loc("CWE401_Memory_Leak__char_malloc_15.c":51:9)
#loc49 = loc("CWE401_Memory_Leak__char_malloc_15.c":52:9)
#loc50 = loc("CWE401_Memory_Leak__char_malloc_15.c":190:1)
#loc51 = loc("CWE401_Memory_Leak__char_malloc_15.c":196:1)
#loc52 = loc("CWE401_Memory_Leak__char_malloc_15.c":192:5)
#loc53 = loc("CWE401_Memory_Leak__char_malloc_15.c":192:14)
#loc54 = loc("CWE401_Memory_Leak__char_malloc_15.c":193:5)
#loc55 = loc("CWE401_Memory_Leak__char_malloc_15.c":193:14)
#loc56 = loc("CWE401_Memory_Leak__char_malloc_15.c":194:5)
#loc57 = loc("CWE401_Memory_Leak__char_malloc_15.c":194:14)
#loc58 = loc("CWE401_Memory_Leak__char_malloc_15.c":195:5)
#loc59 = loc("CWE401_Memory_Leak__char_malloc_15.c":195:14)
#loc60 = loc("/usr/include/stdlib.h":687:1)
#loc61 = loc("/usr/include/stdlib.h":687:32)
#loc62 = loc("CWE401_Memory_Leak__char_malloc_15.c":61:1)
#loc63 = loc("CWE401_Memory_Leak__char_malloc_15.c":91:1)
#loc64 = loc("CWE401_Memory_Leak__char_malloc_15.c":63:5)
#loc65 = loc("CWE401_Memory_Leak__char_malloc_15.c":63:12)
#loc66 = loc("CWE401_Memory_Leak__char_malloc_15.c":64:12)
#loc67 = loc("CWE401_Memory_Leak__char_malloc_15.c":64:5)
#loc68 = loc("CWE401_Memory_Leak__char_malloc_15.c":65:5)
#loc69 = loc("CWE401_Memory_Leak__char_malloc_15.c":79:5)
#loc70 = loc("CWE401_Memory_Leak__char_malloc_15.c":65:12)
#loc71 = loc("CWE401_Memory_Leak__char_malloc_15.c":67:5)
#loc72 = loc("CWE401_Memory_Leak__char_malloc_15.c":69:24)
#loc73 = loc("CWE401_Memory_Leak__char_malloc_15.c":69:31)
#loc74 = loc("CWE401_Memory_Leak__char_malloc_15.c":69:35)
#loc75 = loc("CWE401_Memory_Leak__char_malloc_15.c":69:46)
#loc76 = loc("CWE401_Memory_Leak__char_malloc_15.c":69:47)
#loc77 = loc("CWE401_Memory_Leak__char_malloc_15.c":69:9)
#loc78 = loc("CWE401_Memory_Leak__char_malloc_15.c":70:9)
#loc79 = loc("CWE401_Memory_Leak__char_malloc_15.c":70:37)
#loc80 = loc("CWE401_Memory_Leak__char_malloc_15.c":70:13)
#loc81 = loc("CWE401_Memory_Leak__char_malloc_15.c":70:21)
#loc82 = loc("CWE401_Memory_Leak__char_malloc_15.c":70:27)
#loc83 = loc("CWE401_Memory_Leak__char_malloc_15.c":70:28)
#loc84 = loc("CWE401_Memory_Leak__char_malloc_15.c":70:34)
#loc85 = loc("CWE401_Memory_Leak__char_malloc_15.c":70:33)
#loc86 = loc("CWE401_Memory_Leak__char_malloc_15.c":72:16)
#loc87 = loc("CWE401_Memory_Leak__char_malloc_15.c":72:22)
#loc88 = loc("CWE401_Memory_Leak__char_malloc_15.c":72:9)
#loc89 = loc("CWE401_Memory_Leak__char_malloc_15.c":73:19)
#loc90 = loc("CWE401_Memory_Leak__char_malloc_15.c":73:9)
#loc91 = loc("CWE401_Memory_Leak__char_malloc_15.c":74:9)
#loc92 = loc("CWE401_Memory_Leak__char_malloc_15.c":77:19)
#loc93 = loc("CWE401_Memory_Leak__char_malloc_15.c":77:9)
#loc94 = loc("CWE401_Memory_Leak__char_malloc_15.c":78:9)
#loc95 = loc("CWE401_Memory_Leak__char_malloc_15.c":80:5)
#loc96 = loc("CWE401_Memory_Leak__char_malloc_15.c":90:5)
#loc97 = loc("CWE401_Memory_Leak__char_malloc_15.c":80:12)
#loc98 = loc("CWE401_Memory_Leak__char_malloc_15.c":82:5)
#loc99 = loc("CWE401_Memory_Leak__char_malloc_15.c":84:19)
#loc100 = loc("CWE401_Memory_Leak__char_malloc_15.c":84:9)
#loc101 = loc("CWE401_Memory_Leak__char_malloc_15.c":85:9)
#loc102 = loc("CWE401_Memory_Leak__char_malloc_15.c":88:9)
#loc103 = loc("CWE401_Memory_Leak__char_malloc_15.c":88:14)
#loc104 = loc("CWE401_Memory_Leak__char_malloc_15.c":89:9)
#loc105 = loc("CWE401_Memory_Leak__char_malloc_15.c":94:1)
#loc106 = loc("CWE401_Memory_Leak__char_malloc_15.c":124:1)
#loc107 = loc("CWE401_Memory_Leak__char_malloc_15.c":96:5)
#loc108 = loc("CWE401_Memory_Leak__char_malloc_15.c":96:12)
#loc109 = loc("CWE401_Memory_Leak__char_malloc_15.c":97:12)
#loc110 = loc("CWE401_Memory_Leak__char_malloc_15.c":97:5)
#loc111 = loc("CWE401_Memory_Leak__char_malloc_15.c":98:5)
#loc112 = loc("CWE401_Memory_Leak__char_malloc_15.c":112:5)
#loc113 = loc("CWE401_Memory_Leak__char_malloc_15.c":98:12)
#loc114 = loc("CWE401_Memory_Leak__char_malloc_15.c":100:5)
#loc115 = loc("CWE401_Memory_Leak__char_malloc_15.c":102:24)
#loc116 = loc("CWE401_Memory_Leak__char_malloc_15.c":102:31)
#loc117 = loc("CWE401_Memory_Leak__char_malloc_15.c":102:35)
#loc118 = loc("CWE401_Memory_Leak__char_malloc_15.c":102:46)
#loc119 = loc("CWE401_Memory_Leak__char_malloc_15.c":102:47)
#loc120 = loc("CWE401_Memory_Leak__char_malloc_15.c":102:9)
#loc121 = loc("CWE401_Memory_Leak__char_malloc_15.c":103:9)
#loc122 = loc("CWE401_Memory_Leak__char_malloc_15.c":103:37)
#loc123 = loc("CWE401_Memory_Leak__char_malloc_15.c":103:13)
#loc124 = loc("CWE401_Memory_Leak__char_malloc_15.c":103:21)
#loc125 = loc("CWE401_Memory_Leak__char_malloc_15.c":103:27)
#loc126 = loc("CWE401_Memory_Leak__char_malloc_15.c":103:28)
#loc127 = loc("CWE401_Memory_Leak__char_malloc_15.c":103:34)
#loc128 = loc("CWE401_Memory_Leak__char_malloc_15.c":103:33)
#loc129 = loc("CWE401_Memory_Leak__char_malloc_15.c":105:16)
#loc130 = loc("CWE401_Memory_Leak__char_malloc_15.c":105:22)
#loc131 = loc("CWE401_Memory_Leak__char_malloc_15.c":105:9)
#loc132 = loc("CWE401_Memory_Leak__char_malloc_15.c":106:19)
#loc133 = loc("CWE401_Memory_Leak__char_malloc_15.c":106:9)
#loc134 = loc("CWE401_Memory_Leak__char_malloc_15.c":107:9)
#loc135 = loc("CWE401_Memory_Leak__char_malloc_15.c":110:19)
#loc136 = loc("CWE401_Memory_Leak__char_malloc_15.c":110:9)
#loc137 = loc("CWE401_Memory_Leak__char_malloc_15.c":111:9)
#loc138 = loc("CWE401_Memory_Leak__char_malloc_15.c":113:5)
#loc139 = loc("CWE401_Memory_Leak__char_malloc_15.c":123:5)
#loc140 = loc("CWE401_Memory_Leak__char_malloc_15.c":113:12)
#loc141 = loc("CWE401_Memory_Leak__char_malloc_15.c":115:5)
#loc142 = loc("CWE401_Memory_Leak__char_malloc_15.c":117:9)
#loc143 = loc("CWE401_Memory_Leak__char_malloc_15.c":117:14)
#loc144 = loc("CWE401_Memory_Leak__char_malloc_15.c":118:9)
#loc145 = loc("CWE401_Memory_Leak__char_malloc_15.c":121:19)
#loc146 = loc("CWE401_Memory_Leak__char_malloc_15.c":121:9)
#loc147 = loc("CWE401_Memory_Leak__char_malloc_15.c":122:9)
#loc148 = loc("CWE401_Memory_Leak__char_malloc_15.c":127:1)
#loc149 = loc("CWE401_Memory_Leak__char_malloc_15.c":156:1)
#loc150 = loc("CWE401_Memory_Leak__char_malloc_15.c":129:5)
#loc151 = loc("CWE401_Memory_Leak__char_malloc_15.c":129:12)
#loc152 = loc("CWE401_Memory_Leak__char_malloc_15.c":130:12)
#loc153 = loc("CWE401_Memory_Leak__char_malloc_15.c":130:5)
#loc154 = loc("CWE401_Memory_Leak__char_malloc_15.c":131:5)
#loc155 = loc("CWE401_Memory_Leak__char_malloc_15.c":144:5)
#loc156 = loc("CWE401_Memory_Leak__char_malloc_15.c":131:12)
#loc157 = loc("CWE401_Memory_Leak__char_malloc_15.c":133:5)
#loc158 = loc("CWE401_Memory_Leak__char_malloc_15.c":135:19)
#loc159 = loc("CWE401_Memory_Leak__char_malloc_15.c":135:9)
#loc160 = loc("CWE401_Memory_Leak__char_malloc_15.c":136:9)
#loc161 = loc("CWE401_Memory_Leak__char_malloc_15.c":139:24)
#loc162 = loc("CWE401_Memory_Leak__char_malloc_15.c":139:9)
#loc163 = loc("CWE401_Memory_Leak__char_malloc_15.c":141:9)
#loc164 = loc("CWE401_Memory_Leak__char_malloc_15.c":141:16)
#loc165 = loc("CWE401_Memory_Leak__char_malloc_15.c":141:22)
#loc166 = loc("CWE401_Memory_Leak__char_malloc_15.c":142:19)
#loc167 = loc("CWE401_Memory_Leak__char_malloc_15.c":142:9)
#loc168 = loc("CWE401_Memory_Leak__char_malloc_15.c":143:9)
#loc169 = loc("CWE401_Memory_Leak__char_malloc_15.c":145:5)
#loc170 = loc("CWE401_Memory_Leak__char_malloc_15.c":155:5)
#loc171 = loc("CWE401_Memory_Leak__char_malloc_15.c":145:12)
#loc172 = loc("CWE401_Memory_Leak__char_malloc_15.c":147:5)
#loc173 = loc("CWE401_Memory_Leak__char_malloc_15.c":150:9)
#loc174 = loc("CWE401_Memory_Leak__char_malloc_15.c":153:19)
#loc175 = loc("CWE401_Memory_Leak__char_malloc_15.c":153:9)
#loc176 = loc("CWE401_Memory_Leak__char_malloc_15.c":154:9)
#loc177 = loc("CWE401_Memory_Leak__char_malloc_15.c":159:1)
#loc178 = loc("CWE401_Memory_Leak__char_malloc_15.c":188:1)
#loc179 = loc("CWE401_Memory_Leak__char_malloc_15.c":161:5)
#loc180 = loc("CWE401_Memory_Leak__char_malloc_15.c":161:12)
#loc181 = loc("CWE401_Memory_Leak__char_malloc_15.c":162:12)
#loc182 = loc("CWE401_Memory_Leak__char_malloc_15.c":162:5)
#loc183 = loc("CWE401_Memory_Leak__char_malloc_15.c":163:5)
#loc184 = loc("CWE401_Memory_Leak__char_malloc_15.c":176:5)
#loc185 = loc("CWE401_Memory_Leak__char_malloc_15.c":163:12)
#loc186 = loc("CWE401_Memory_Leak__char_malloc_15.c":165:5)
#loc187 = loc("CWE401_Memory_Leak__char_malloc_15.c":167:24)
#loc188 = loc("CWE401_Memory_Leak__char_malloc_15.c":167:9)
#loc189 = loc("CWE401_Memory_Leak__char_malloc_15.c":169:9)
#loc190 = loc("CWE401_Memory_Leak__char_malloc_15.c":169:16)
#loc191 = loc("CWE401_Memory_Leak__char_malloc_15.c":169:22)
#loc192 = loc("CWE401_Memory_Leak__char_malloc_15.c":170:19)
#loc193 = loc("CWE401_Memory_Leak__char_malloc_15.c":170:9)
#loc194 = loc("CWE401_Memory_Leak__char_malloc_15.c":171:9)
#loc195 = loc("CWE401_Memory_Leak__char_malloc_15.c":174:19)
#loc196 = loc("CWE401_Memory_Leak__char_malloc_15.c":174:9)
#loc197 = loc("CWE401_Memory_Leak__char_malloc_15.c":175:9)
#loc198 = loc("CWE401_Memory_Leak__char_malloc_15.c":177:5)
#loc199 = loc("CWE401_Memory_Leak__char_malloc_15.c":187:5)
#loc200 = loc("CWE401_Memory_Leak__char_malloc_15.c":177:12)
#loc201 = loc("CWE401_Memory_Leak__char_malloc_15.c":179:5)
#loc202 = loc("CWE401_Memory_Leak__char_malloc_15.c":182:9)
#loc203 = loc("CWE401_Memory_Leak__char_malloc_15.c":185:19)
#loc204 = loc("CWE401_Memory_Leak__char_malloc_15.c":185:9)
#loc205 = loc("CWE401_Memory_Leak__char_malloc_15.c":186:9)
#loc206 = loc(fused[#loc1, #loc2])
#loc207 = loc(fused[#loc3, #loc4])
#loc208 = loc(fused[#loc5, #loc6])
#loc209 = loc(fused[#loc8, #loc9])
#loc210 = loc(fused[#loc11, #loc12])
#loc211 = loc(fused[#loc13, #loc14])
#loc212 = loc(fused[#loc16, #loc15])
#loc213 = loc(fused[#loc17, #loc18])
#loc214 = loc(fused[#loc23, #loc24])
#loc215 = loc(fused[#loc22, #loc24])
#loc216 = loc(fused[#loc21, #loc25])
#loc217 = loc(fused[#loc26, #loc25])
#loc218 = loc(fused[#loc27, #loc28])
#loc219 = loc(fused[#loc29, #loc30])
#loc220 = loc(fused[#loc31, #loc28])
#loc221 = loc(fused[#loc42, #loc43])
#loc222 = loc(fused[#loc50, #loc51])
#loc223 = loc(fused[#loc52, #loc53])
#loc224 = loc(fused[#loc54, #loc55])
#loc225 = loc(fused[#loc56, #loc57])
#loc226 = loc(fused[#loc58, #loc59])
#loc227 = loc(fused[#loc60, #loc61])
#loc228 = loc(fused[#loc62, #loc63])
#loc229 = loc(fused[#loc64, #loc65])
#loc230 = loc(fused[#loc67, #loc66])
#loc231 = loc(fused[#loc68, #loc69])
#loc232 = loc(fused[#loc74, #loc75])
#loc233 = loc(fused[#loc73, #loc75])
#loc234 = loc(fused[#loc72, #loc76])
#loc235 = loc(fused[#loc77, #loc76])
#loc236 = loc(fused[#loc78, #loc79])
#loc237 = loc(fused[#loc80, #loc81])
#loc238 = loc(fused[#loc82, #loc79])
#loc239 = loc(fused[#loc95, #loc96])
#loc240 = loc(fused[#loc105, #loc106])
#loc241 = loc(fused[#loc107, #loc108])
#loc242 = loc(fused[#loc110, #loc109])
#loc243 = loc(fused[#loc111, #loc112])
#loc244 = loc(fused[#loc117, #loc118])
#loc245 = loc(fused[#loc116, #loc118])
#loc246 = loc(fused[#loc115, #loc119])
#loc247 = loc(fused[#loc120, #loc119])
#loc248 = loc(fused[#loc121, #loc122])
#loc249 = loc(fused[#loc123, #loc124])
#loc250 = loc(fused[#loc125, #loc122])
#loc251 = loc(fused[#loc138, #loc139])
#loc252 = loc(fused[#loc148, #loc149])
#loc253 = loc(fused[#loc150, #loc151])
#loc254 = loc(fused[#loc153, #loc152])
#loc255 = loc(fused[#loc154, #loc155])
#loc256 = loc(fused[#loc162, #loc161])
#loc257 = loc(fused[#loc169, #loc170])
#loc258 = loc(fused[#loc177, #loc178])
#loc259 = loc(fused[#loc179, #loc180])
#loc260 = loc(fused[#loc182, #loc181])
#loc261 = loc(fused[#loc183, #loc184])
#loc262 = loc(fused[#loc188, #loc187])
#loc263 = loc(fused[#loc198, #loc199])
