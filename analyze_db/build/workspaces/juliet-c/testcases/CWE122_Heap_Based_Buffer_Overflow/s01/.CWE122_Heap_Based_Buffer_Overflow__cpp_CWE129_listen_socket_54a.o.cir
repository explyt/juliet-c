!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#true = #cir.bool<true> : !cir.bool
!ty_in_addr = !cir.record<struct "in_addr" {!u32i} #cir.record.decl.ast>
!ty_sockaddr = !cir.record<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.record<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s01/CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, "dlti.endianness" = "little", "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc286)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc287)
  cir.func private @bind(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc288)
  cir.func private @listen(!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc289)
  cir.func private @accept(!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc290)
  cir.func private @recv(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc291)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc292)
  cir.func private @close(!s32i) -> !s32i loc(#loc293)
  cir.func private @_ZN62CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_549badSink_bEi(!s32i) loc(#loc294)
  cir.func @_ZN62CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_543badEv() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc296)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc23)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc24)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc297)
    cir.scope {
      %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc299)
      %5 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc300)
      %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc301)
      %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc302)
      %8 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc303)
      %9 = cir.const #cir.int<1> : !s32i loc(#loc33)
      %10 = cir.unary(minus, %9) nsw : !s32i, !s32i loc(#loc33)
      cir.store %10, %6 : !s32i, !cir.ptr<!s32i> loc(#loc301)
      %11 = cir.const #cir.int<1> : !s32i loc(#loc35)
      %12 = cir.unary(minus, %11) nsw : !s32i, !s32i loc(#loc35)
      cir.store %12, %7 : !s32i, !cir.ptr<!s32i> loc(#loc302)
      cir.scope {
        cir.do {
          cir.scope {
            %13 = cir.const #cir.int<2> : !s32i loc(#loc42)
            %14 = cir.const #cir.int<1> : !u32i loc(#loc43)
            %15 = cir.cast(integral, %14 : !u32i), !s32i loc(#loc43)
            %16 = cir.const #cir.int<6> : !u32i loc(#loc44)
            %17 = cir.cast(integral, %16 : !u32i), !s32i loc(#loc44)
            %18 = cir.call @socket(%13, %15, %17) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc45)
            cir.store %18, %6 : !s32i, !cir.ptr<!s32i> loc(#loc306)
            cir.scope {
              %59 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc50)
              %60 = cir.const #cir.int<1> : !s32i loc(#loc51)
              %61 = cir.unary(minus, %60) nsw : !s32i, !s32i loc(#loc51)
              %62 = cir.cmp(eq, %59, %61) : !s32i, !cir.bool loc(#loc308)
              cir.if %62 {
                cir.break loc(#loc53)
              } loc(#loc309)
            } loc(#loc307)
            %19 = cir.cast(bitcast, %5 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc310)
            %20 = cir.const #cir.int<0> : !s32i loc(#loc56)
            %21 = cir.const #cir.int<16> : !u64i loc(#loc311)
            cir.libc.memset %21 bytes from %19 set to %20 : !cir.ptr<!void>, !s32i, !u64i loc(#loc312)
            %22 = cir.const #cir.int<2> : !s32i loc(#loc61)
            %23 = cir.cast(integral, %22 : !s32i), !u16i loc(#loc61)
            %24 = cir.get_member %5[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc62)
            cir.store %23, %24 : !u16i, !cir.ptr<!u16i> loc(#loc313)
            %25 = cir.const #cir.int<0> : !s32i loc(#loc64)
            %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc64)
            %27 = cir.get_member %5[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc65)
            %28 = cir.get_member %27[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc66)
            cir.store %26, %28 : !u32i, !cir.ptr<!u32i> loc(#loc314)
            %29 = cir.const #cir.int<27015> : !s32i loc(#loc68)
            %30 = cir.cast(integral, %29 : !s32i), !u16i loc(#loc68)
            %31 = cir.call @htons(%30) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc69)
            %32 = cir.get_member %5[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc70)
            cir.store %31, %32 : !u16i, !cir.ptr<!u16i> loc(#loc315)
            cir.scope {
              %59 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc75)
              %60 = cir.cast(bitcast, %5 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc317)
              %61 = cir.const #cir.int<16> : !u64i loc(#loc318)
              %62 = cir.cast(integral, %61 : !u64i), !u32i loc(#loc318)
              %63 = cir.call @bind(%59, %60, %62) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc80)
              %64 = cir.const #cir.int<1> : !s32i loc(#loc81)
              %65 = cir.unary(minus, %64) nsw : !s32i, !s32i loc(#loc81)
              %66 = cir.cmp(eq, %63, %65) : !s32i, !cir.bool loc(#loc319)
              cir.if %66 {
                cir.break loc(#loc83)
              } loc(#loc320)
            } loc(#loc316)
            cir.scope {
              %59 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc86)
              %60 = cir.const #cir.int<5> : !s32i loc(#loc87)
              %61 = cir.call @listen(%59, %60) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc88)
              %62 = cir.const #cir.int<1> : !s32i loc(#loc89)
              %63 = cir.unary(minus, %62) nsw : !s32i, !s32i loc(#loc89)
              %64 = cir.cmp(eq, %61, %63) : !s32i, !cir.bool loc(#loc322)
              cir.if %64 {
                cir.break loc(#loc91)
              } loc(#loc323)
            } loc(#loc321)
            %33 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc92)
            %34 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc93)
            %35 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc94)
            %36 = cir.call @accept(%33, %34, %35) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc95)
            cir.store %36, %7 : !s32i, !cir.ptr<!s32i> loc(#loc324)
            cir.scope {
              %59 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc100)
              %60 = cir.const #cir.int<1> : !s32i loc(#loc101)
              %61 = cir.unary(minus, %60) nsw : !s32i, !s32i loc(#loc101)
              %62 = cir.cmp(eq, %59, %61) : !s32i, !cir.bool loc(#loc326)
              cir.if %62 {
                cir.break loc(#loc103)
              } loc(#loc327)
            } loc(#loc325)
            %37 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc104)
            %38 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc105)
            %39 = cir.cast(bitcast, %38 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc105)
            %40 = cir.const #cir.int<3> : !s32i loc(#loc106)
            %41 = cir.cast(integral, %40 : !s32i), !u64i loc(#loc106)
            %42 = cir.const #cir.int<4> : !u64i loc(#loc106)
            %43 = cir.binop(mul, %41, %42) : !u64i loc(#loc106)
            %44 = cir.const #cir.int<2> : !s32i loc(#loc106)
            %45 = cir.cast(integral, %44 : !s32i), !u64i loc(#loc106)
            %46 = cir.binop(add, %43, %45) : !u64i loc(#loc106)
            %47 = cir.const #cir.int<1> : !s32i loc(#loc107)
            %48 = cir.cast(integral, %47 : !s32i), !u64i loc(#loc107)
            %49 = cir.binop(sub, %46, %48) : !u64i loc(#loc328)
            %50 = cir.const #cir.int<0> : !s32i loc(#loc108)
            %51 = cir.call @recv(%37, %39, %49, %50) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc109)
            %52 = cir.cast(integral, %51 : !s64i), !s32i loc(#loc109)
            cir.store %52, %4 : !s32i, !cir.ptr<!s32i> loc(#loc329)
            cir.scope {
              %59 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc114)
              %60 = cir.const #cir.int<1> : !s32i loc(#loc115)
              %61 = cir.unary(minus, %60) nsw : !s32i, !s32i loc(#loc115)
              %62 = cir.cmp(eq, %59, %61) : !s32i, !cir.bool loc(#loc331)
              %63 = cir.ternary(%62, true {
                %64 = cir.const #true loc(#loc116)
                cir.yield %64 : !cir.bool loc(#loc116)
              }, false {
                %64 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc117)
                %65 = cir.const #cir.int<0> : !s32i loc(#loc118)
                %66 = cir.cmp(eq, %64, %65) : !s32i, !cir.bool loc(#loc332)
                %67 = cir.ternary(%66, true {
                  %68 = cir.const #true loc(#loc116)
                  cir.yield %68 : !cir.bool loc(#loc116)
                }, false {
                  %68 = cir.const #false loc(#loc116)
                  cir.yield %68 : !cir.bool loc(#loc116)
                }) : (!cir.bool) -> !cir.bool loc(#loc116)
                cir.yield %67 : !cir.bool loc(#loc116)
              }) : (!cir.bool) -> !cir.bool loc(#loc116)
              cir.if %63 {
                cir.break loc(#loc120)
              } loc(#loc333)
            } loc(#loc330)
            %53 = cir.const #cir.int<0> : !s8i loc(#loc121)
            %54 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc122)
            %55 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc123)
            %56 = cir.ptr_stride(%55 : !cir.ptr<!s8i>, %54 : !s32i), !cir.ptr<!s8i> loc(#loc123)
            cir.store %53, %56 : !s8i, !cir.ptr<!s8i> loc(#loc334)
            %57 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc124)
            %58 = cir.call @atoi(%57) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc125)
            cir.store %58, %0 : !s32i, !cir.ptr<!s32i> loc(#loc335)
          } loc(#loc305)
          cir.yield loc(#loc39)
        } while {
          %13 = cir.const #cir.int<0> : !s32i loc(#loc128)
          %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc128)
          cir.condition(%14) loc(#loc128)
        } loc(#loc304)
      } loc(#loc304)
      cir.scope {
        %13 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc131)
        %14 = cir.const #cir.int<1> : !s32i loc(#loc132)
        %15 = cir.unary(minus, %14) nsw : !s32i, !s32i loc(#loc132)
        %16 = cir.cmp(ne, %13, %15) : !s32i, !cir.bool loc(#loc337)
        cir.if %16 {
          %17 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc134)
          %18 = cir.call @close(%17) : (!s32i) -> !s32i loc(#loc135)
        } loc(#loc338)
      } loc(#loc336)
      cir.scope {
        %13 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc138)
        %14 = cir.const #cir.int<1> : !s32i loc(#loc139)
        %15 = cir.unary(minus, %14) nsw : !s32i, !s32i loc(#loc139)
        %16 = cir.cmp(ne, %13, %15) : !s32i, !cir.bool loc(#loc340)
        cir.if %16 {
          %17 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc141)
          %18 = cir.call @close(%17) : (!s32i) -> !s32i loc(#loc142)
        } loc(#loc341)
      } loc(#loc339)
    } loc(#loc298)
    %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc143)
    cir.call @_ZN62CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_549badSink_bEi(%3) : (!s32i) -> () loc(#loc144)
    cir.return loc(#loc20)
  } loc(#loc295)
  cir.func private @_ZN62CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_5413goodG2BSink_bEi(!s32i) loc(#loc342)
  cir.func internal private @_ZN62CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54L7goodG2BEv() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc344)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc151)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc152)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc345)
    %3 = cir.const #cir.int<7> : !s32i loc(#loc154)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc346)
    %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc156)
    cir.call @_ZN62CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_5413goodG2BSink_bEi(%4) : (!s32i) -> () loc(#loc157)
    cir.return loc(#loc148)
  } loc(#loc343)
  cir.func private @_ZN62CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_5413goodB2GSink_bEi(!s32i) loc(#loc347)
  cir.func internal private @_ZN62CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54L7goodB2GEv() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc349)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc164)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc165)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc350)
    cir.scope {
      %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc352)
      %5 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc353)
      %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc354)
      %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc355)
      %8 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc356)
      %9 = cir.const #cir.int<1> : !s32i loc(#loc174)
      %10 = cir.unary(minus, %9) nsw : !s32i, !s32i loc(#loc174)
      cir.store %10, %6 : !s32i, !cir.ptr<!s32i> loc(#loc354)
      %11 = cir.const #cir.int<1> : !s32i loc(#loc176)
      %12 = cir.unary(minus, %11) nsw : !s32i, !s32i loc(#loc176)
      cir.store %12, %7 : !s32i, !cir.ptr<!s32i> loc(#loc355)
      cir.scope {
        cir.do {
          cir.scope {
            %13 = cir.const #cir.int<2> : !s32i loc(#loc183)
            %14 = cir.const #cir.int<1> : !u32i loc(#loc184)
            %15 = cir.cast(integral, %14 : !u32i), !s32i loc(#loc184)
            %16 = cir.const #cir.int<6> : !u32i loc(#loc185)
            %17 = cir.cast(integral, %16 : !u32i), !s32i loc(#loc185)
            %18 = cir.call @socket(%13, %15, %17) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc186)
            cir.store %18, %6 : !s32i, !cir.ptr<!s32i> loc(#loc359)
            cir.scope {
              %59 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc191)
              %60 = cir.const #cir.int<1> : !s32i loc(#loc192)
              %61 = cir.unary(minus, %60) nsw : !s32i, !s32i loc(#loc192)
              %62 = cir.cmp(eq, %59, %61) : !s32i, !cir.bool loc(#loc361)
              cir.if %62 {
                cir.break loc(#loc194)
              } loc(#loc362)
            } loc(#loc360)
            %19 = cir.cast(bitcast, %5 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc363)
            %20 = cir.const #cir.int<0> : !s32i loc(#loc197)
            %21 = cir.const #cir.int<16> : !u64i loc(#loc364)
            cir.libc.memset %21 bytes from %19 set to %20 : !cir.ptr<!void>, !s32i, !u64i loc(#loc365)
            %22 = cir.const #cir.int<2> : !s32i loc(#loc202)
            %23 = cir.cast(integral, %22 : !s32i), !u16i loc(#loc202)
            %24 = cir.get_member %5[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc62)
            cir.store %23, %24 : !u16i, !cir.ptr<!u16i> loc(#loc366)
            %25 = cir.const #cir.int<0> : !s32i loc(#loc204)
            %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc204)
            %27 = cir.get_member %5[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc65)
            %28 = cir.get_member %27[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc66)
            cir.store %26, %28 : !u32i, !cir.ptr<!u32i> loc(#loc367)
            %29 = cir.const #cir.int<27015> : !s32i loc(#loc206)
            %30 = cir.cast(integral, %29 : !s32i), !u16i loc(#loc206)
            %31 = cir.call @htons(%30) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc207)
            %32 = cir.get_member %5[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc70)
            cir.store %31, %32 : !u16i, !cir.ptr<!u16i> loc(#loc368)
            cir.scope {
              %59 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc212)
              %60 = cir.cast(bitcast, %5 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc370)
              %61 = cir.const #cir.int<16> : !u64i loc(#loc371)
              %62 = cir.cast(integral, %61 : !u64i), !u32i loc(#loc371)
              %63 = cir.call @bind(%59, %60, %62) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc217)
              %64 = cir.const #cir.int<1> : !s32i loc(#loc218)
              %65 = cir.unary(minus, %64) nsw : !s32i, !s32i loc(#loc218)
              %66 = cir.cmp(eq, %63, %65) : !s32i, !cir.bool loc(#loc372)
              cir.if %66 {
                cir.break loc(#loc220)
              } loc(#loc373)
            } loc(#loc369)
            cir.scope {
              %59 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc223)
              %60 = cir.const #cir.int<5> : !s32i loc(#loc224)
              %61 = cir.call @listen(%59, %60) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc225)
              %62 = cir.const #cir.int<1> : !s32i loc(#loc226)
              %63 = cir.unary(minus, %62) nsw : !s32i, !s32i loc(#loc226)
              %64 = cir.cmp(eq, %61, %63) : !s32i, !cir.bool loc(#loc375)
              cir.if %64 {
                cir.break loc(#loc228)
              } loc(#loc376)
            } loc(#loc374)
            %33 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc229)
            %34 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc230)
            %35 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc231)
            %36 = cir.call @accept(%33, %34, %35) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc232)
            cir.store %36, %7 : !s32i, !cir.ptr<!s32i> loc(#loc377)
            cir.scope {
              %59 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc237)
              %60 = cir.const #cir.int<1> : !s32i loc(#loc238)
              %61 = cir.unary(minus, %60) nsw : !s32i, !s32i loc(#loc238)
              %62 = cir.cmp(eq, %59, %61) : !s32i, !cir.bool loc(#loc379)
              cir.if %62 {
                cir.break loc(#loc240)
              } loc(#loc380)
            } loc(#loc378)
            %37 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc241)
            %38 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc242)
            %39 = cir.cast(bitcast, %38 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc242)
            %40 = cir.const #cir.int<3> : !s32i loc(#loc243)
            %41 = cir.cast(integral, %40 : !s32i), !u64i loc(#loc243)
            %42 = cir.const #cir.int<4> : !u64i loc(#loc243)
            %43 = cir.binop(mul, %41, %42) : !u64i loc(#loc243)
            %44 = cir.const #cir.int<2> : !s32i loc(#loc243)
            %45 = cir.cast(integral, %44 : !s32i), !u64i loc(#loc243)
            %46 = cir.binop(add, %43, %45) : !u64i loc(#loc243)
            %47 = cir.const #cir.int<1> : !s32i loc(#loc244)
            %48 = cir.cast(integral, %47 : !s32i), !u64i loc(#loc244)
            %49 = cir.binop(sub, %46, %48) : !u64i loc(#loc381)
            %50 = cir.const #cir.int<0> : !s32i loc(#loc245)
            %51 = cir.call @recv(%37, %39, %49, %50) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc246)
            %52 = cir.cast(integral, %51 : !s64i), !s32i loc(#loc246)
            cir.store %52, %4 : !s32i, !cir.ptr<!s32i> loc(#loc382)
            cir.scope {
              %59 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc251)
              %60 = cir.const #cir.int<1> : !s32i loc(#loc252)
              %61 = cir.unary(minus, %60) nsw : !s32i, !s32i loc(#loc252)
              %62 = cir.cmp(eq, %59, %61) : !s32i, !cir.bool loc(#loc384)
              %63 = cir.ternary(%62, true {
                %64 = cir.const #true loc(#loc253)
                cir.yield %64 : !cir.bool loc(#loc253)
              }, false {
                %64 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc254)
                %65 = cir.const #cir.int<0> : !s32i loc(#loc255)
                %66 = cir.cmp(eq, %64, %65) : !s32i, !cir.bool loc(#loc385)
                %67 = cir.ternary(%66, true {
                  %68 = cir.const #true loc(#loc253)
                  cir.yield %68 : !cir.bool loc(#loc253)
                }, false {
                  %68 = cir.const #false loc(#loc253)
                  cir.yield %68 : !cir.bool loc(#loc253)
                }) : (!cir.bool) -> !cir.bool loc(#loc253)
                cir.yield %67 : !cir.bool loc(#loc253)
              }) : (!cir.bool) -> !cir.bool loc(#loc253)
              cir.if %63 {
                cir.break loc(#loc257)
              } loc(#loc386)
            } loc(#loc383)
            %53 = cir.const #cir.int<0> : !s8i loc(#loc258)
            %54 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc259)
            %55 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc260)
            %56 = cir.ptr_stride(%55 : !cir.ptr<!s8i>, %54 : !s32i), !cir.ptr<!s8i> loc(#loc260)
            cir.store %53, %56 : !s8i, !cir.ptr<!s8i> loc(#loc387)
            %57 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc261)
            %58 = cir.call @atoi(%57) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc262)
            cir.store %58, %0 : !s32i, !cir.ptr<!s32i> loc(#loc388)
          } loc(#loc358)
          cir.yield loc(#loc180)
        } while {
          %13 = cir.const #cir.int<0> : !s32i loc(#loc265)
          %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc265)
          cir.condition(%14) loc(#loc265)
        } loc(#loc357)
      } loc(#loc357)
      cir.scope {
        %13 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc268)
        %14 = cir.const #cir.int<1> : !s32i loc(#loc269)
        %15 = cir.unary(minus, %14) nsw : !s32i, !s32i loc(#loc269)
        %16 = cir.cmp(ne, %13, %15) : !s32i, !cir.bool loc(#loc390)
        cir.if %16 {
          %17 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc271)
          %18 = cir.call @close(%17) : (!s32i) -> !s32i loc(#loc272)
        } loc(#loc391)
      } loc(#loc389)
      cir.scope {
        %13 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc275)
        %14 = cir.const #cir.int<1> : !s32i loc(#loc276)
        %15 = cir.unary(minus, %14) nsw : !s32i, !s32i loc(#loc276)
        %16 = cir.cmp(ne, %13, %15) : !s32i, !cir.bool loc(#loc393)
        cir.if %16 {
          %17 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc278)
          %18 = cir.call @close(%17) : (!s32i) -> !s32i loc(#loc279)
        } loc(#loc394)
      } loc(#loc392)
    } loc(#loc351)
    %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc280)
    cir.call @_ZN62CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_5413goodB2GSink_bEi(%3) : (!s32i) -> () loc(#loc281)
    cir.return loc(#loc161)
  } loc(#loc348)
  cir.func @_ZN62CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_544goodEv() extra(#fn_attr1) {
    cir.call @_ZN62CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54L7goodG2BEv() : () -> () loc(#loc284)
    cir.call @_ZN62CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54L7goodB2GEv() : () -> () loc(#loc285)
    cir.return loc(#loc283)
  } loc(#loc395)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s01/CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":0:0)
#loc1 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:1)
#loc2 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:62)
#loc3 = loc("/usr/include/netinet/in.h":402:1)
#loc4 = loc("/usr/include/netinet/in.h":403:40)
#loc5 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":112:1)
#loc6 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":113:6)
#loc7 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":296:1)
#loc8 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":296:39)
#loc9 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":306:1)
#loc10 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":307:38)
#loc11 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":145:1)
#loc12 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":145:68)
#loc13 = loc("/usr/include/stdlib.h":105:1)
#loc14 = loc("/usr/include/stdlib.h":106:33)
#loc15 = loc("/usr/include/unistd.h":358:1)
#loc16 = loc("/usr/include/unistd.h":358:27)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":48:1)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":48:24)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":50:1)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":125:1)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":52:5)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":52:9)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":54:13)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":54:12)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":54:5)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":55:5)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":123:5)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":60:9)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":60:13)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":61:9)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":61:28)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":62:9)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":62:31)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":63:9)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":63:31)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":64:9)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":64:41)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":65:9)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":108:17)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":66:9)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":107:9)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":75:35)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":75:44)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":75:57)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":75:28)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":75:13)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":75:68)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":76:13)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":79:13)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":76:17)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":76:33)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":77:13)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":78:17)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":80:20)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":80:21)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":80:30)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":80:33)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":80:47)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":80:13)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":80:48)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":81:34)
#loc62 = loc("/usr/include/netinet/in.h":249:5)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":81:13)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":82:39)
#loc65 = loc("/usr/include/netinet/in.h":251:20)
#loc66 = loc("/usr/include/netinet/in.h":33:15)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":82:13)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":83:38)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":83:32)
#loc70 = loc("/usr/include/netinet/in.h":250:15)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":83:13)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":83:46)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":84:13)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":87:13)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":84:22)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":84:54)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":84:55)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":84:64)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":84:78)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":84:17)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":84:84)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":85:13)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":86:17)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":88:13)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":91:13)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":88:24)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":88:38)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":88:17)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":88:57)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":89:13)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":90:17)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":92:35)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":92:49)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":92:55)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":92:28)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":92:13)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":92:59)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":93:13)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":96:13)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":93:17)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":93:33)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":94:13)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":95:17)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":98:31)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":98:45)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":98:58)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":98:76)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":98:79)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":98:26)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":98:13)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":98:80)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":99:13)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":102:13)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":99:17)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":99:31)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":99:44)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":99:47)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":99:61)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":100:13)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":101:17)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":104:39)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":104:25)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":104:13)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":106:25)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":106:20)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":106:13)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":106:36)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":108:16)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":109:9)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":112:9)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":109:13)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":109:29)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":110:9)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":111:26)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":111:13)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":113:9)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":116:9)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":113:13)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":113:29)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":114:9)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":115:26)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":115:13)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":124:15)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":124:5)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":132:1)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":132:28)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":134:1)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":143:1)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":136:5)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":136:9)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":138:13)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":138:12)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":138:5)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":141:12)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":141:5)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":142:19)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":142:5)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":146:1)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":146:28)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":148:1)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":223:1)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":150:5)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":150:9)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":152:13)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":152:12)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":152:5)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":153:5)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":221:5)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":158:9)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":158:13)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":159:9)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":159:28)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":160:9)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":160:31)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":161:9)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":161:31)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":162:9)
#loc178 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":162:41)
#loc179 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":163:9)
#loc180 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":206:17)
#loc181 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":164:9)
#loc182 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":205:9)
#loc183 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":173:35)
#loc184 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":173:44)
#loc185 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":173:57)
#loc186 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":173:28)
#loc187 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":173:13)
#loc188 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":173:68)
#loc189 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":174:13)
#loc190 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":177:13)
#loc191 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":174:17)
#loc192 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":174:33)
#loc193 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":175:13)
#loc194 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":176:17)
#loc195 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":178:20)
#loc196 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":178:21)
#loc197 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":178:30)
#loc198 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":178:33)
#loc199 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":178:47)
#loc200 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":178:13)
#loc201 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":178:48)
#loc202 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":179:34)
#loc203 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":179:13)
#loc204 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":180:39)
#loc205 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":180:13)
#loc206 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":181:38)
#loc207 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":181:32)
#loc208 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":181:13)
#loc209 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":181:46)
#loc210 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":182:13)
#loc211 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":185:13)
#loc212 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":182:22)
#loc213 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":182:54)
#loc214 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":182:55)
#loc215 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":182:64)
#loc216 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":182:78)
#loc217 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":182:17)
#loc218 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":182:84)
#loc219 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":183:13)
#loc220 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":184:17)
#loc221 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":186:13)
#loc222 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":189:13)
#loc223 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":186:24)
#loc224 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":186:38)
#loc225 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":186:17)
#loc226 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":186:57)
#loc227 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":187:13)
#loc228 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":188:17)
#loc229 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":190:35)
#loc230 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":190:49)
#loc231 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":190:55)
#loc232 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":190:28)
#loc233 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":190:13)
#loc234 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":190:59)
#loc235 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":191:13)
#loc236 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":194:13)
#loc237 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":191:17)
#loc238 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":191:33)
#loc239 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":192:13)
#loc240 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":193:17)
#loc241 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":196:31)
#loc242 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":196:45)
#loc243 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":196:58)
#loc244 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":196:76)
#loc245 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":196:79)
#loc246 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":196:26)
#loc247 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":196:13)
#loc248 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":196:80)
#loc249 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":197:13)
#loc250 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":200:13)
#loc251 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":197:17)
#loc252 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":197:31)
#loc253 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":197:44)
#loc254 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":197:47)
#loc255 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":197:61)
#loc256 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":198:13)
#loc257 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":199:17)
#loc258 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":202:39)
#loc259 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":202:25)
#loc260 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":202:13)
#loc261 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":204:25)
#loc262 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":204:20)
#loc263 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":204:13)
#loc264 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":204:36)
#loc265 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":206:16)
#loc266 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":207:9)
#loc267 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":210:9)
#loc268 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":207:13)
#loc269 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":207:29)
#loc270 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":208:9)
#loc271 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":209:26)
#loc272 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":209:13)
#loc273 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":211:9)
#loc274 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":214:9)
#loc275 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":211:13)
#loc276 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":211:29)
#loc277 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":212:9)
#loc278 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":213:26)
#loc279 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":213:13)
#loc280 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":222:19)
#loc281 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":222:5)
#loc282 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":225:1)
#loc283 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":229:1)
#loc284 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":227:5)
#loc285 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_54a.cpp":228:5)
#loc286 = loc(fused[#loc1, #loc2])
#loc287 = loc(fused[#loc3, #loc4])
#loc288 = loc(fused[#loc5, #loc6])
#loc289 = loc(fused[#loc7, #loc8])
#loc290 = loc(fused[#loc9, #loc10])
#loc291 = loc(fused[#loc11, #loc12])
#loc292 = loc(fused[#loc13, #loc14])
#loc293 = loc(fused[#loc15, #loc16])
#loc294 = loc(fused[#loc17, #loc18])
#loc295 = loc(fused[#loc19, #loc20])
#loc296 = loc(fused[#loc21, #loc22])
#loc297 = loc(fused[#loc25, #loc23])
#loc298 = loc(fused[#loc26, #loc27])
#loc299 = loc(fused[#loc28, #loc29])
#loc300 = loc(fused[#loc30, #loc31])
#loc301 = loc(fused[#loc32, #loc33])
#loc302 = loc(fused[#loc34, #loc35])
#loc303 = loc(fused[#loc36, #loc37])
#loc304 = loc(fused[#loc38, #loc39])
#loc305 = loc(fused[#loc40, #loc41])
#loc306 = loc(fused[#loc46, #loc47])
#loc307 = loc(fused[#loc48, #loc49])
#loc308 = loc(fused[#loc50, #loc51])
#loc309 = loc(fused[#loc52, #loc49])
#loc310 = loc(fused[#loc54, #loc55])
#loc311 = loc(fused[#loc57, #loc58])
#loc312 = loc(fused[#loc59, #loc60])
#loc313 = loc(fused[#loc63, #loc61])
#loc314 = loc(fused[#loc67, #loc64])
#loc315 = loc(fused[#loc71, #loc72])
#loc316 = loc(fused[#loc73, #loc74])
#loc317 = loc(fused[#loc76, #loc77])
#loc318 = loc(fused[#loc78, #loc79])
#loc319 = loc(fused[#loc80, #loc81])
#loc320 = loc(fused[#loc82, #loc74])
#loc321 = loc(fused[#loc84, #loc85])
#loc322 = loc(fused[#loc88, #loc89])
#loc323 = loc(fused[#loc90, #loc85])
#loc324 = loc(fused[#loc96, #loc97])
#loc325 = loc(fused[#loc98, #loc99])
#loc326 = loc(fused[#loc100, #loc101])
#loc327 = loc(fused[#loc102, #loc99])
#loc328 = loc(fused[#loc106, #loc107])
#loc329 = loc(fused[#loc110, #loc111])
#loc330 = loc(fused[#loc112, #loc113])
#loc331 = loc(fused[#loc114, #loc115])
#loc332 = loc(fused[#loc117, #loc118])
#loc333 = loc(fused[#loc119, #loc113])
#loc334 = loc(fused[#loc123, #loc121])
#loc335 = loc(fused[#loc126, #loc127])
#loc336 = loc(fused[#loc129, #loc130])
#loc337 = loc(fused[#loc131, #loc132])
#loc338 = loc(fused[#loc133, #loc130])
#loc339 = loc(fused[#loc136, #loc137])
#loc340 = loc(fused[#loc138, #loc139])
#loc341 = loc(fused[#loc140, #loc137])
#loc342 = loc(fused[#loc145, #loc146])
#loc343 = loc(fused[#loc147, #loc148])
#loc344 = loc(fused[#loc149, #loc150])
#loc345 = loc(fused[#loc153, #loc151])
#loc346 = loc(fused[#loc155, #loc154])
#loc347 = loc(fused[#loc158, #loc159])
#loc348 = loc(fused[#loc160, #loc161])
#loc349 = loc(fused[#loc162, #loc163])
#loc350 = loc(fused[#loc166, #loc164])
#loc351 = loc(fused[#loc167, #loc168])
#loc352 = loc(fused[#loc169, #loc170])
#loc353 = loc(fused[#loc171, #loc172])
#loc354 = loc(fused[#loc173, #loc174])
#loc355 = loc(fused[#loc175, #loc176])
#loc356 = loc(fused[#loc177, #loc178])
#loc357 = loc(fused[#loc179, #loc180])
#loc358 = loc(fused[#loc181, #loc182])
#loc359 = loc(fused[#loc187, #loc188])
#loc360 = loc(fused[#loc189, #loc190])
#loc361 = loc(fused[#loc191, #loc192])
#loc362 = loc(fused[#loc193, #loc190])
#loc363 = loc(fused[#loc195, #loc196])
#loc364 = loc(fused[#loc198, #loc199])
#loc365 = loc(fused[#loc200, #loc201])
#loc366 = loc(fused[#loc203, #loc202])
#loc367 = loc(fused[#loc205, #loc204])
#loc368 = loc(fused[#loc208, #loc209])
#loc369 = loc(fused[#loc210, #loc211])
#loc370 = loc(fused[#loc213, #loc214])
#loc371 = loc(fused[#loc215, #loc216])
#loc372 = loc(fused[#loc217, #loc218])
#loc373 = loc(fused[#loc219, #loc211])
#loc374 = loc(fused[#loc221, #loc222])
#loc375 = loc(fused[#loc225, #loc226])
#loc376 = loc(fused[#loc227, #loc222])
#loc377 = loc(fused[#loc233, #loc234])
#loc378 = loc(fused[#loc235, #loc236])
#loc379 = loc(fused[#loc237, #loc238])
#loc380 = loc(fused[#loc239, #loc236])
#loc381 = loc(fused[#loc243, #loc244])
#loc382 = loc(fused[#loc247, #loc248])
#loc383 = loc(fused[#loc249, #loc250])
#loc384 = loc(fused[#loc251, #loc252])
#loc385 = loc(fused[#loc254, #loc255])
#loc386 = loc(fused[#loc256, #loc250])
#loc387 = loc(fused[#loc260, #loc258])
#loc388 = loc(fused[#loc263, #loc264])
#loc389 = loc(fused[#loc266, #loc267])
#loc390 = loc(fused[#loc268, #loc269])
#loc391 = loc(fused[#loc270, #loc267])
#loc392 = loc(fused[#loc273, #loc274])
#loc393 = loc(fused[#loc275, #loc276])
#loc394 = loc(fused[#loc277, #loc274])
#loc395 = loc(fused[#loc282, #loc283])
