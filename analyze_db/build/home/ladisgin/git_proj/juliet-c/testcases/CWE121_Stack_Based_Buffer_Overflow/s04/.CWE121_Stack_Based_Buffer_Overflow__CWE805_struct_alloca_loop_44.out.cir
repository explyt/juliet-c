!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc5 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":21:21)
#loc6 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":21:37)
#loc87 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":115:10)
#loc88 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":115:14)
#loc89 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":115:20)
#loc90 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":115:32)
#loc107 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":65:25)
#loc108 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":65:41)
!ty__twoIntsStruct = !cir.struct<struct "_twoIntsStruct" {!s32i, !s32i} #cir.record.decl.ast>
#loc173 = loc(fused[#loc5, #loc6])
#loc204 = loc(fused[#loc87, #loc88])
#loc205 = loc(fused[#loc89, #loc90])
#loc210 = loc(fused[#loc107, #loc108])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s04/CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i32 = dense<32> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @printStructLine(!cir.ptr<!ty__twoIntsStruct>) loc(#loc171)
  cir.func internal private @badSink(%arg0: !cir.ptr<!ty__twoIntsStruct> loc(fused[#loc5, #loc6])) extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["data", init] {alignment = 8 : i64} loc(#loc173)
    cir.store %arg0, %0 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc7)
    cir.scope {
      %1 = cir.alloca !cir.array<!ty__twoIntsStruct x 100>, !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>, ["source"] {alignment = 16 : i64} loc(#loc175)
      cir.scope {
        %2 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc177)
        cir.scope {
          %3 = cir.const #cir.int<0> : !s32i loc(#loc18)
          %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc18)
          cir.store %4, %2 : !u64i, !cir.ptr<!u64i> loc(#loc179)
          cir.for : cond {
            %5 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc20)
            %6 = cir.const #cir.int<100> : !s32i loc(#loc21)
            %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc21)
            %8 = cir.cmp(lt, %5, %7) : !u64i, !cir.bool loc(#loc180)
            cir.condition(%8) loc(#loc22)
          } body {
            cir.scope {
              %5 = cir.const #cir.int<0> : !s32i loc(#loc24)
              %6 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc25)
              %7 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc26)
              %8 = cir.ptr_stride(%7 : !cir.ptr<!ty__twoIntsStruct>, %6 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc26)
              %9 = cir.get_member %8[0] {name = "intOne"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc27)
              cir.store %5, %9 : !s32i, !cir.ptr<!s32i> loc(#loc182)
              %10 = cir.const #cir.int<0> : !s32i loc(#loc28)
              %11 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc29)
              %12 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc30)
              %13 = cir.ptr_stride(%12 : !cir.ptr<!ty__twoIntsStruct>, %11 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc30)
              %14 = cir.get_member %13[1] {name = "intTwo"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc31)
              cir.store %10, %14 : !s32i, !cir.ptr<!s32i> loc(#loc183)
            } loc(#loc181)
            cir.yield loc(#loc17)
          } step {
            %5 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc32)
            %6 = cir.unary(inc, %5) : !u64i, !u64i loc(#loc33)
            cir.store %6, %2 : !u64i, !cir.ptr<!u64i> loc(#loc184)
            cir.yield loc(#loc178)
          } loc(#loc178)
        } loc(#loc178)
      } loc(#loc176)
      cir.scope {
        %2 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc186)
        cir.scope {
          %6 = cir.const #cir.int<0> : !s32i loc(#loc40)
          %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc40)
          cir.store %7, %2 : !u64i, !cir.ptr<!u64i> loc(#loc188)
          cir.for : cond {
            %8 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc42)
            %9 = cir.const #cir.int<100> : !s32i loc(#loc43)
            %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc43)
            %11 = cir.cmp(lt, %8, %10) : !u64i, !cir.bool loc(#loc189)
            cir.condition(%11) loc(#loc44)
          } body {
            cir.scope {
              %8 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc46)
              %9 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc47)
              %10 = cir.ptr_stride(%8 : !cir.ptr<!ty__twoIntsStruct>, %9 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc48)
              %11 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc49)
              %12 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc50)
              %13 = cir.ptr_stride(%12 : !cir.ptr<!ty__twoIntsStruct>, %11 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc50)
              cir.copy %13 to %10 : !cir.ptr<!ty__twoIntsStruct> loc(#loc48)
            } loc(#loc190)
            cir.yield loc(#loc39)
          } step {
            %8 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc51)
            %9 = cir.unary(inc, %8) : !u64i, !u64i loc(#loc52)
            cir.store %9, %2 : !u64i, !cir.ptr<!u64i> loc(#loc191)
            cir.yield loc(#loc187)
          } loc(#loc187)
        } loc(#loc187)
        %3 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc53)
        %4 = cir.const #cir.int<0> : !s32i loc(#loc54)
        %5 = cir.ptr_stride(%3 : !cir.ptr<!ty__twoIntsStruct>, %4 : !s32i), !cir.ptr<!ty__twoIntsStruct> loc(#loc55)
        cir.call @printStructLine(%5) : (!cir.ptr<!ty__twoIntsStruct>) -> () loc(#loc56)
      } loc(#loc185)
    } loc(#loc174)
    cir.return loc(#loc4)
  } loc(#loc172)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44_bad() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["data"] {alignment = 8 : i64} loc(#loc193)
    %1 = cir.alloca !cir.ptr<!cir.func<!void (!cir.ptr<!ty__twoIntsStruct>)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!cir.ptr<!ty__twoIntsStruct>)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc194)
    %2 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc195)
    %3 = cir.get_global @badSink : !cir.ptr<!cir.func<!void (!cir.ptr<!ty__twoIntsStruct>)>> loc(#loc62)
    cir.store %3, %1 : !cir.ptr<!cir.func<!void (!cir.ptr<!ty__twoIntsStruct>)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!cir.ptr<!ty__twoIntsStruct>)>>> loc(#loc194)
    %4 = cir.const #cir.int<50> : !s32i loc(#loc64)
    %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc64)
    %6 = cir.const #cir.int<8> : !u64i loc(#loc64)
    %7 = cir.binop(mul, %5, %6) : !u64i loc(#loc64)
    %8 = cir.alloca !u8i, !cir.ptr<!u8i>, %7 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc64)
    %9 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc196)
    %10 = cir.cast(bitcast, %8 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc64)
    %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!ty__twoIntsStruct> loc(#loc64)
    cir.store %11, %2 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc195)
    %12 = cir.const #cir.int<100> : !s32i loc(#loc66)
    %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc66)
    %14 = cir.const #cir.int<8> : !u64i loc(#loc66)
    %15 = cir.binop(mul, %13, %14) : !u64i loc(#loc66)
    %16 = cir.alloca !u8i, !cir.ptr<!u8i>, %15 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc66)
    %17 = cir.cast(bitcast, %16 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc66)
    %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!ty__twoIntsStruct> loc(#loc66)
    cir.store %18, %9 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc196)
    %19 = cir.load %2 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc67)
    cir.store %19, %0 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc197)
    %20 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<!void (!cir.ptr<!ty__twoIntsStruct>)>>>, !cir.ptr<!cir.func<!void (!cir.ptr<!ty__twoIntsStruct>)>> loc(#loc69)
    %21 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc70)
    cir.call %20(%21) : (!cir.ptr<!cir.func<!void (!cir.ptr<!ty__twoIntsStruct>)>>, !cir.ptr<!ty__twoIntsStruct>) -> () loc(#loc69)
    cir.return loc(#loc58)
  } loc(#loc192)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44_good() extra(#fn_attr) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc199)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc73)
    cir.return loc(#loc72)
  } loc(#loc198)
  cir.func private @srand(!u32i) extra(#fn_attr1) loc(#loc200)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc201)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc202)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc81)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc82)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc83)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc84)
  cir.func @main(%arg0: !s32i loc(fused[#loc87, #loc88]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc89, #loc90])) -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc204)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc205)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc86)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc91)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc91)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc92)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc93)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc93)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr1) loc(#loc94)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc81)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc81)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc95)
    %8 = cir.get_global @CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44_good : !cir.ptr<!cir.func<!void ()>> loc(#loc206)
    cir.call @CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44_good() : () -> () loc(#loc96)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc82)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc82)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc98)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc83)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc83)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc99)
    %13 = cir.get_global @CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc207)
    cir.call @CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44_bad() : () -> () loc(#loc100)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc84)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc84)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc102)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc103)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc208)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc208)
    cir.return %17 : !s32i loc(#loc208)
  } loc(#loc203)
  cir.func internal private @goodG2BSink(%arg0: !cir.ptr<!ty__twoIntsStruct> loc(fused[#loc107, #loc108])) extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["data", init] {alignment = 8 : i64} loc(#loc210)
    cir.store %arg0, %0 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc109)
    cir.scope {
      %1 = cir.alloca !cir.array<!ty__twoIntsStruct x 100>, !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>, ["source"] {alignment = 16 : i64} loc(#loc212)
      cir.scope {
        %2 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc214)
        cir.scope {
          %3 = cir.const #cir.int<0> : !s32i loc(#loc120)
          %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc120)
          cir.store %4, %2 : !u64i, !cir.ptr<!u64i> loc(#loc216)
          cir.for : cond {
            %5 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc122)
            %6 = cir.const #cir.int<100> : !s32i loc(#loc123)
            %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc123)
            %8 = cir.cmp(lt, %5, %7) : !u64i, !cir.bool loc(#loc217)
            cir.condition(%8) loc(#loc124)
          } body {
            cir.scope {
              %5 = cir.const #cir.int<0> : !s32i loc(#loc126)
              %6 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc127)
              %7 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc128)
              %8 = cir.ptr_stride(%7 : !cir.ptr<!ty__twoIntsStruct>, %6 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc128)
              %9 = cir.get_member %8[0] {name = "intOne"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc27)
              cir.store %5, %9 : !s32i, !cir.ptr<!s32i> loc(#loc219)
              %10 = cir.const #cir.int<0> : !s32i loc(#loc129)
              %11 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc130)
              %12 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc131)
              %13 = cir.ptr_stride(%12 : !cir.ptr<!ty__twoIntsStruct>, %11 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc131)
              %14 = cir.get_member %13[1] {name = "intTwo"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc31)
              cir.store %10, %14 : !s32i, !cir.ptr<!s32i> loc(#loc220)
            } loc(#loc218)
            cir.yield loc(#loc119)
          } step {
            %5 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc132)
            %6 = cir.unary(inc, %5) : !u64i, !u64i loc(#loc133)
            cir.store %6, %2 : !u64i, !cir.ptr<!u64i> loc(#loc221)
            cir.yield loc(#loc215)
          } loc(#loc215)
        } loc(#loc215)
      } loc(#loc213)
      cir.scope {
        %2 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc223)
        cir.scope {
          %6 = cir.const #cir.int<0> : !s32i loc(#loc140)
          %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc140)
          cir.store %7, %2 : !u64i, !cir.ptr<!u64i> loc(#loc225)
          cir.for : cond {
            %8 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc142)
            %9 = cir.const #cir.int<100> : !s32i loc(#loc143)
            %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc143)
            %11 = cir.cmp(lt, %8, %10) : !u64i, !cir.bool loc(#loc226)
            cir.condition(%11) loc(#loc144)
          } body {
            cir.scope {
              %8 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc146)
              %9 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc147)
              %10 = cir.ptr_stride(%8 : !cir.ptr<!ty__twoIntsStruct>, %9 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc148)
              %11 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc149)
              %12 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc150)
              %13 = cir.ptr_stride(%12 : !cir.ptr<!ty__twoIntsStruct>, %11 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc150)
              cir.copy %13 to %10 : !cir.ptr<!ty__twoIntsStruct> loc(#loc148)
            } loc(#loc227)
            cir.yield loc(#loc139)
          } step {
            %8 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc151)
            %9 = cir.unary(inc, %8) : !u64i, !u64i loc(#loc152)
            cir.store %9, %2 : !u64i, !cir.ptr<!u64i> loc(#loc228)
            cir.yield loc(#loc224)
          } loc(#loc224)
        } loc(#loc224)
        %3 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc153)
        %4 = cir.const #cir.int<0> : !s32i loc(#loc154)
        %5 = cir.ptr_stride(%3 : !cir.ptr<!ty__twoIntsStruct>, %4 : !s32i), !cir.ptr<!ty__twoIntsStruct> loc(#loc155)
        cir.call @printStructLine(%5) : (!cir.ptr<!ty__twoIntsStruct>) -> () loc(#loc156)
      } loc(#loc222)
    } loc(#loc211)
    cir.return loc(#loc106)
  } loc(#loc209)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["data"] {alignment = 8 : i64} loc(#loc230)
    %1 = cir.alloca !cir.ptr<!cir.func<!void (!cir.ptr<!ty__twoIntsStruct>)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!cir.ptr<!ty__twoIntsStruct>)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc231)
    %2 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc232)
    %3 = cir.get_global @goodG2BSink : !cir.ptr<!cir.func<!void (!cir.ptr<!ty__twoIntsStruct>)>> loc(#loc162)
    cir.store %3, %1 : !cir.ptr<!cir.func<!void (!cir.ptr<!ty__twoIntsStruct>)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!cir.ptr<!ty__twoIntsStruct>)>>> loc(#loc231)
    %4 = cir.const #cir.int<50> : !s32i loc(#loc164)
    %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc164)
    %6 = cir.const #cir.int<8> : !u64i loc(#loc164)
    %7 = cir.binop(mul, %5, %6) : !u64i loc(#loc164)
    %8 = cir.alloca !u8i, !cir.ptr<!u8i>, %7 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc164)
    %9 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc233)
    %10 = cir.cast(bitcast, %8 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc164)
    %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!ty__twoIntsStruct> loc(#loc164)
    cir.store %11, %2 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc232)
    %12 = cir.const #cir.int<100> : !s32i loc(#loc166)
    %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc166)
    %14 = cir.const #cir.int<8> : !u64i loc(#loc166)
    %15 = cir.binop(mul, %13, %14) : !u64i loc(#loc166)
    %16 = cir.alloca !u8i, !cir.ptr<!u8i>, %15 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc166)
    %17 = cir.cast(bitcast, %16 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc166)
    %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!ty__twoIntsStruct> loc(#loc166)
    cir.store %18, %9 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc233)
    %19 = cir.load %9 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc167)
    cir.store %19, %0 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc234)
    %20 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<!void (!cir.ptr<!ty__twoIntsStruct>)>>>, !cir.ptr<!cir.func<!void (!cir.ptr<!ty__twoIntsStruct>)>> loc(#loc169)
    %21 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc170)
    cir.call %20(%21) : (!cir.ptr<!cir.func<!void (!cir.ptr<!ty__twoIntsStruct>)>>, !cir.ptr<!ty__twoIntsStruct>) -> () loc(#loc169)
    cir.return loc(#loc158)
  } loc(#loc229)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s04/CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":40:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":40:63)
#loc3 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":21:1)
#loc4 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":44:1)
#loc7 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":22:1)
#loc8 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":23:5)
#loc9 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":43:5)
#loc10 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":24:9)
#loc11 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":24:33)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":25:9)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":33:9)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":26:13)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":26:20)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":28:13)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":32:13)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":28:22)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":28:18)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":28:25)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":28:29)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":28:27)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":29:13)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":30:36)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":30:24)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":30:17)
#loc27 = loc("../../../testcasesupport/std_testcase.h":98:9)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":31:36)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":31:24)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":31:17)
#loc31 = loc("../../../testcasesupport/std_testcase.h":99:9)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":28:35)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":28:34)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":34:9)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":42:9)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":35:13)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":35:20)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":37:13)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":40:13)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":37:22)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":37:18)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":37:25)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":37:29)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":37:27)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":38:13)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":39:17)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":39:22)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":39:23)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":39:34)
#loc50 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":39:27)
#loc51 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":37:35)
#loc52 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":37:34)
#loc53 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":41:30)
#loc54 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":41:35)
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":41:36)
#loc56 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":41:13)
#loc57 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":46:1)
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":58:1)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":48:5)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":48:21)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":50:5)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":50:41)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":51:5)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":51:54)
#loc65 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":52:5)
#loc66 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":52:55)
#loc67 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":55:12)
#loc68 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":55:5)
#loc69 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":57:5)
#loc70 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":57:13)
#loc71 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":101:1)
#loc72 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":104:1)
#loc73 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":103:5)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":103:13)
#loc75 = loc("/usr/include/stdlib.h":575:1)
#loc76 = loc("/usr/include/stdlib.h":575:41)
#loc77 = loc("/usr/include/time.h":76:1)
#loc78 = loc("/usr/include/time.h":76:38)
#loc79 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc80 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc81 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":120:15)
#loc82 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":122:15)
#loc83 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":125:15)
#loc84 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":127:15)
#loc85 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":115:1)
#loc86 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":130:1)
#loc91 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":116:1)
#loc92 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":118:27)
#loc93 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":118:22)
#loc94 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":118:5)
#loc95 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":120:5)
#loc96 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":121:5)
#loc97 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":121:75)
#loc98 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":122:5)
#loc99 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":125:5)
#loc100 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":126:5)
#loc101 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":126:74)
#loc102 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":127:5)
#loc103 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":129:12)
#loc104 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":129:5)
#loc105 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":65:1)
#loc106 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":88:1)
#loc109 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":66:1)
#loc110 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":67:5)
#loc111 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":87:5)
#loc112 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":68:9)
#loc113 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":68:33)
#loc114 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":69:9)
#loc115 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":77:9)
#loc116 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":70:13)
#loc117 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":70:20)
#loc118 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":72:13)
#loc119 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":76:13)
#loc120 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":72:22)
#loc121 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":72:18)
#loc122 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":72:25)
#loc123 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":72:29)
#loc124 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":72:27)
#loc125 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":73:13)
#loc126 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":74:36)
#loc127 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":74:24)
#loc128 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":74:17)
#loc129 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":75:36)
#loc130 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":75:24)
#loc131 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":75:17)
#loc132 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":72:35)
#loc133 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":72:34)
#loc134 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":78:9)
#loc135 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":86:9)
#loc136 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":79:13)
#loc137 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":79:20)
#loc138 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":81:13)
#loc139 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":84:13)
#loc140 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":81:22)
#loc141 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":81:18)
#loc142 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":81:25)
#loc143 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":81:29)
#loc144 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":81:27)
#loc145 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":82:13)
#loc146 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":83:17)
#loc147 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":83:22)
#loc148 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":83:23)
#loc149 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":83:34)
#loc150 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":83:27)
#loc151 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":81:35)
#loc152 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":81:34)
#loc153 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":85:30)
#loc154 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":85:35)
#loc155 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":85:36)
#loc156 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":85:13)
#loc157 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":90:1)
#loc158 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":99:1)
#loc159 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":92:5)
#loc160 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":92:21)
#loc161 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":93:5)
#loc162 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":93:41)
#loc163 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":94:5)
#loc164 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":94:54)
#loc165 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":95:5)
#loc166 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":95:55)
#loc167 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":97:12)
#loc168 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":97:5)
#loc169 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":98:5)
#loc170 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c":98:13)
#loc171 = loc(fused[#loc1, #loc2])
#loc172 = loc(fused[#loc3, #loc4])
#loc174 = loc(fused[#loc8, #loc9])
#loc175 = loc(fused[#loc10, #loc11])
#loc176 = loc(fused[#loc12, #loc13])
#loc177 = loc(fused[#loc14, #loc15])
#loc178 = loc(fused[#loc16, #loc17])
#loc179 = loc(fused[#loc19, #loc18])
#loc180 = loc(fused[#loc20, #loc21])
#loc181 = loc(fused[#loc23, #loc17])
#loc182 = loc(fused[#loc26, #loc24])
#loc183 = loc(fused[#loc30, #loc28])
#loc184 = loc(fused[#loc33, #loc32])
#loc185 = loc(fused[#loc34, #loc35])
#loc186 = loc(fused[#loc36, #loc37])
#loc187 = loc(fused[#loc38, #loc39])
#loc188 = loc(fused[#loc41, #loc40])
#loc189 = loc(fused[#loc42, #loc43])
#loc190 = loc(fused[#loc45, #loc39])
#loc191 = loc(fused[#loc52, #loc51])
#loc192 = loc(fused[#loc57, #loc58])
#loc193 = loc(fused[#loc59, #loc60])
#loc194 = loc(fused[#loc61, #loc62])
#loc195 = loc(fused[#loc63, #loc64])
#loc196 = loc(fused[#loc65, #loc66])
#loc197 = loc(fused[#loc68, #loc67])
#loc198 = loc(fused[#loc71, #loc72])
#loc199 = loc(fused[#loc73, #loc74])
#loc200 = loc(fused[#loc75, #loc76])
#loc201 = loc(fused[#loc77, #loc78])
#loc202 = loc(fused[#loc79, #loc80])
#loc203 = loc(fused[#loc85, #loc86])
#loc206 = loc(fused[#loc96, #loc97])
#loc207 = loc(fused[#loc100, #loc101])
#loc208 = loc(fused[#loc104, #loc103])
#loc209 = loc(fused[#loc105, #loc106])
#loc211 = loc(fused[#loc110, #loc111])
#loc212 = loc(fused[#loc112, #loc113])
#loc213 = loc(fused[#loc114, #loc115])
#loc214 = loc(fused[#loc116, #loc117])
#loc215 = loc(fused[#loc118, #loc119])
#loc216 = loc(fused[#loc121, #loc120])
#loc217 = loc(fused[#loc122, #loc123])
#loc218 = loc(fused[#loc125, #loc119])
#loc219 = loc(fused[#loc128, #loc126])
#loc220 = loc(fused[#loc131, #loc129])
#loc221 = loc(fused[#loc133, #loc132])
#loc222 = loc(fused[#loc134, #loc135])
#loc223 = loc(fused[#loc136, #loc137])
#loc224 = loc(fused[#loc138, #loc139])
#loc225 = loc(fused[#loc141, #loc140])
#loc226 = loc(fused[#loc142, #loc143])
#loc227 = loc(fused[#loc145, #loc139])
#loc228 = loc(fused[#loc152, #loc151])
#loc229 = loc(fused[#loc157, #loc158])
#loc230 = loc(fused[#loc159, #loc160])
#loc231 = loc(fused[#loc161, #loc162])
#loc232 = loc(fused[#loc163, #loc164])
#loc233 = loc(fused[#loc165, #loc166])
#loc234 = loc(fused[#loc168, #loc167])
