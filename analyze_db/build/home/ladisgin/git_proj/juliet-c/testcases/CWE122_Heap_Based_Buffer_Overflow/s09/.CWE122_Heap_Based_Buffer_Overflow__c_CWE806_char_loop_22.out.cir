!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":124:10)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":124:14)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":124:20)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":124:32)
#loc269 = loc(fused[#loc93, #loc94])
#loc270 = loc(fused[#loc95, #loc96])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.global external dsolocal @CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22_badGlobal = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc231)
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc232)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc233)
  cir.func private @CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22_badSource(!cir.ptr<!s8i>) -> !cir.ptr<!s8i> loc(#loc234)
  cir.func private @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc235)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc236)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc237)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc239)
    %1 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc19)
    %2 = cir.const #cir.int<100> : !s32i loc(#loc20)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc20)
    %4 = cir.const #cir.int<1> : !u64i loc(#loc240)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc241)
    %6 = cir.call @malloc(%5) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc19)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc242)
    cir.store %7, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc243)
    cir.scope {
      %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc27)
      %13 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc28)
      %14 = cir.cast(bitcast, %13 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc28)
      %15 = cir.cmp(eq, %12, %14) : !cir.ptr<!s8i>, !cir.bool loc(#loc245)
      cir.if %15 {
        %16 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc30)
        %17 = cir.const #cir.int<1> : !s32i loc(#loc31)
        %18 = cir.unary(minus, %17) : !s32i, !s32i loc(#loc32)
        cir.call @exit(%18) : (!s32i) -> () extra(#fn_attr) loc(#loc30)
      } loc(#loc246)
    } loc(#loc244)
    %8 = cir.const #cir.int<1> : !s32i loc(#loc33)
    %9 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22_badGlobal : !cir.ptr<!s32i> loc(#loc231)
    cir.store %8, %9 : !s32i, !cir.ptr<!s32i> loc(#loc247)
    %10 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc35)
    %11 = cir.call @CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22_badSource(%10) : (!cir.ptr<!s8i>) -> !cir.ptr<!s8i> loc(#loc36)
    cir.store %11, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc248)
    cir.scope {
      %12 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc250)
      %13 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc251)
      %14 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen"] {alignment = 8 : i64} loc(#loc252)
      %15 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc250)
      cir.store %15, %12 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc250)
      %16 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc46)
      %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc47)
      %18 = cir.call @strlen(%17) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc46)
      cir.store %18, %14 : !u64i, !cir.ptr<!u64i> loc(#loc253)
      cir.scope {
        %30 = cir.const #cir.int<0> : !s32i loc(#loc52)
        %31 = cir.cast(integral, %30 : !s32i), !u64i loc(#loc52)
        cir.store %31, %13 : !u64i, !cir.ptr<!u64i> loc(#loc255)
        cir.for : cond {
          %32 = cir.load %13 : !cir.ptr<!u64i>, !u64i loc(#loc54)
          %33 = cir.load %14 : !cir.ptr<!u64i>, !u64i loc(#loc55)
          %34 = cir.cmp(lt, %32, %33) : !u64i, !cir.bool loc(#loc256)
          cir.condition(%34) loc(#loc56)
        } body {
          cir.scope {
            %32 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc58)
            %33 = cir.load %13 : !cir.ptr<!u64i>, !u64i loc(#loc59)
            %34 = cir.ptr_stride(%32 : !cir.ptr<!s8i>, %33 : !u64i), !cir.ptr<!s8i> loc(#loc60)
            %35 = cir.load %34 : !cir.ptr<!s8i>, !s8i loc(#loc58)
            %36 = cir.load %13 : !cir.ptr<!u64i>, !u64i loc(#loc61)
            %37 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc62)
            %38 = cir.ptr_stride(%37 : !cir.ptr<!s8i>, %36 : !u64i), !cir.ptr<!s8i> loc(#loc62)
            cir.store %35, %38 : !s8i, !cir.ptr<!s8i> loc(#loc258)
          } loc(#loc257)
          cir.yield loc(#loc51)
        } step {
          %32 = cir.load %13 : !cir.ptr<!u64i>, !u64i loc(#loc63)
          %33 = cir.unary(inc, %32) : !u64i, !u64i loc(#loc64)
          cir.store %33, %13 : !u64i, !cir.ptr<!u64i> loc(#loc259)
          cir.yield loc(#loc254)
        } loc(#loc254)
      } loc(#loc254)
      %19 = cir.const #cir.int<0> : !s32i loc(#loc65)
      %20 = cir.cast(integral, %19 : !s32i), !s8i loc(#loc65)
      %21 = cir.const #cir.int<50> : !s32i loc(#loc66)
      %22 = cir.const #cir.int<1> : !s32i loc(#loc67)
      %23 = cir.binop(sub, %21, %22) nsw : !s32i loc(#loc66)
      %24 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc68)
      %25 = cir.ptr_stride(%24 : !cir.ptr<!s8i>, %23 : !s32i), !cir.ptr<!s8i> loc(#loc68)
      cir.store %20, %25 : !s8i, !cir.ptr<!s8i> loc(#loc260)
      %26 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc69)
      cir.call @printLine(%26) : (!cir.ptr<!s8i>) -> () loc(#loc70)
      %27 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc71)
      %28 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc72)
      %29 = cir.cast(bitcast, %28 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc72)
      cir.call @free(%29) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc71)
    } loc(#loc249)
    cir.return loc(#loc16)
  } loc(#loc238)
  cir.global external dsolocal @CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22_goodG2B1Global = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc261)
  cir.global external dsolocal @CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22_goodG2B2Global = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc262)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc264)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc79)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc265)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc81)
    cir.return loc(#loc78)
  } loc(#loc263)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc266)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc267)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc87)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc88)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc89)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc90)
  cir.func @main(%arg0: !s32i loc(fused[#loc93, #loc94]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc95, #loc96])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc269)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc270)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc92)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc97)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc97)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc98)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc99)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc99)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc100)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc87)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc87)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc101)
    %8 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22_good : !cir.ptr<!cir.func<!void ()>> loc(#loc271)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22_good() : () -> () loc(#loc102)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc88)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc88)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc104)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc89)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc89)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc105)
    %13 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc272)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22_bad() : () -> () loc(#loc106)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc90)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc90)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc108)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc109)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc273)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc273)
    cir.return %17 : !s32i loc(#loc273)
  } loc(#loc268)
  cir.func private @CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22_goodG2B1Source(!cir.ptr<!s8i>) -> !cir.ptr<!s8i> loc(#loc274)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc276)
    %1 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc117)
    %2 = cir.const #cir.int<100> : !s32i loc(#loc118)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc118)
    %4 = cir.const #cir.int<1> : !u64i loc(#loc277)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc278)
    %6 = cir.call @malloc(%5) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc117)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc279)
    cir.store %7, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc280)
    cir.scope {
      %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc125)
      %13 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc126)
      %14 = cir.cast(bitcast, %13 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc126)
      %15 = cir.cmp(eq, %12, %14) : !cir.ptr<!s8i>, !cir.bool loc(#loc282)
      cir.if %15 {
        %16 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc128)
        %17 = cir.const #cir.int<1> : !s32i loc(#loc129)
        %18 = cir.unary(minus, %17) : !s32i, !s32i loc(#loc130)
        cir.call @exit(%18) : (!s32i) -> () extra(#fn_attr) loc(#loc128)
      } loc(#loc283)
    } loc(#loc281)
    %8 = cir.const #cir.int<0> : !s32i loc(#loc131)
    %9 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22_goodG2B1Global : !cir.ptr<!s32i> loc(#loc261)
    cir.store %8, %9 : !s32i, !cir.ptr<!s32i> loc(#loc284)
    %10 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc133)
    %11 = cir.call @CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22_goodG2B1Source(%10) : (!cir.ptr<!s8i>) -> !cir.ptr<!s8i> loc(#loc134)
    cir.store %11, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc285)
    cir.scope {
      %12 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc287)
      %13 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc288)
      %14 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen"] {alignment = 8 : i64} loc(#loc289)
      %15 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc287)
      cir.store %15, %12 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc287)
      %16 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc144)
      %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc145)
      %18 = cir.call @strlen(%17) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc144)
      cir.store %18, %14 : !u64i, !cir.ptr<!u64i> loc(#loc290)
      cir.scope {
        %30 = cir.const #cir.int<0> : !s32i loc(#loc150)
        %31 = cir.cast(integral, %30 : !s32i), !u64i loc(#loc150)
        cir.store %31, %13 : !u64i, !cir.ptr<!u64i> loc(#loc292)
        cir.for : cond {
          %32 = cir.load %13 : !cir.ptr<!u64i>, !u64i loc(#loc152)
          %33 = cir.load %14 : !cir.ptr<!u64i>, !u64i loc(#loc153)
          %34 = cir.cmp(lt, %32, %33) : !u64i, !cir.bool loc(#loc293)
          cir.condition(%34) loc(#loc154)
        } body {
          cir.scope {
            %32 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc156)
            %33 = cir.load %13 : !cir.ptr<!u64i>, !u64i loc(#loc157)
            %34 = cir.ptr_stride(%32 : !cir.ptr<!s8i>, %33 : !u64i), !cir.ptr<!s8i> loc(#loc158)
            %35 = cir.load %34 : !cir.ptr<!s8i>, !s8i loc(#loc156)
            %36 = cir.load %13 : !cir.ptr<!u64i>, !u64i loc(#loc159)
            %37 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc160)
            %38 = cir.ptr_stride(%37 : !cir.ptr<!s8i>, %36 : !u64i), !cir.ptr<!s8i> loc(#loc160)
            cir.store %35, %38 : !s8i, !cir.ptr<!s8i> loc(#loc295)
          } loc(#loc294)
          cir.yield loc(#loc149)
        } step {
          %32 = cir.load %13 : !cir.ptr<!u64i>, !u64i loc(#loc161)
          %33 = cir.unary(inc, %32) : !u64i, !u64i loc(#loc162)
          cir.store %33, %13 : !u64i, !cir.ptr<!u64i> loc(#loc296)
          cir.yield loc(#loc291)
        } loc(#loc291)
      } loc(#loc291)
      %19 = cir.const #cir.int<0> : !s32i loc(#loc163)
      %20 = cir.cast(integral, %19 : !s32i), !s8i loc(#loc163)
      %21 = cir.const #cir.int<50> : !s32i loc(#loc164)
      %22 = cir.const #cir.int<1> : !s32i loc(#loc165)
      %23 = cir.binop(sub, %21, %22) nsw : !s32i loc(#loc164)
      %24 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc166)
      %25 = cir.ptr_stride(%24 : !cir.ptr<!s8i>, %23 : !s32i), !cir.ptr<!s8i> loc(#loc166)
      cir.store %20, %25 : !s8i, !cir.ptr<!s8i> loc(#loc297)
      %26 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc167)
      cir.call @printLine(%26) : (!cir.ptr<!s8i>) -> () loc(#loc168)
      %27 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc169)
      %28 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc170)
      %29 = cir.cast(bitcast, %28 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc170)
      cir.call @free(%29) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc169)
    } loc(#loc286)
    cir.return loc(#loc114)
  } loc(#loc275)
  cir.func private @CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22_goodG2B2Source(!cir.ptr<!s8i>) -> !cir.ptr<!s8i> loc(#loc298)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc300)
    %1 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc177)
    %2 = cir.const #cir.int<100> : !s32i loc(#loc178)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc178)
    %4 = cir.const #cir.int<1> : !u64i loc(#loc301)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc302)
    %6 = cir.call @malloc(%5) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc177)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc303)
    cir.store %7, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc304)
    cir.scope {
      %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc185)
      %13 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc186)
      %14 = cir.cast(bitcast, %13 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc186)
      %15 = cir.cmp(eq, %12, %14) : !cir.ptr<!s8i>, !cir.bool loc(#loc306)
      cir.if %15 {
        %16 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc188)
        %17 = cir.const #cir.int<1> : !s32i loc(#loc189)
        %18 = cir.unary(minus, %17) : !s32i, !s32i loc(#loc190)
        cir.call @exit(%18) : (!s32i) -> () extra(#fn_attr) loc(#loc188)
      } loc(#loc307)
    } loc(#loc305)
    %8 = cir.const #cir.int<1> : !s32i loc(#loc191)
    %9 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22_goodG2B2Global : !cir.ptr<!s32i> loc(#loc262)
    cir.store %8, %9 : !s32i, !cir.ptr<!s32i> loc(#loc308)
    %10 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc193)
    %11 = cir.call @CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22_goodG2B2Source(%10) : (!cir.ptr<!s8i>) -> !cir.ptr<!s8i> loc(#loc194)
    cir.store %11, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc309)
    cir.scope {
      %12 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc311)
      %13 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc312)
      %14 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen"] {alignment = 8 : i64} loc(#loc313)
      %15 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc311)
      cir.store %15, %12 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc311)
      %16 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc204)
      %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc205)
      %18 = cir.call @strlen(%17) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc204)
      cir.store %18, %14 : !u64i, !cir.ptr<!u64i> loc(#loc314)
      cir.scope {
        %30 = cir.const #cir.int<0> : !s32i loc(#loc210)
        %31 = cir.cast(integral, %30 : !s32i), !u64i loc(#loc210)
        cir.store %31, %13 : !u64i, !cir.ptr<!u64i> loc(#loc316)
        cir.for : cond {
          %32 = cir.load %13 : !cir.ptr<!u64i>, !u64i loc(#loc212)
          %33 = cir.load %14 : !cir.ptr<!u64i>, !u64i loc(#loc213)
          %34 = cir.cmp(lt, %32, %33) : !u64i, !cir.bool loc(#loc317)
          cir.condition(%34) loc(#loc214)
        } body {
          cir.scope {
            %32 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc216)
            %33 = cir.load %13 : !cir.ptr<!u64i>, !u64i loc(#loc217)
            %34 = cir.ptr_stride(%32 : !cir.ptr<!s8i>, %33 : !u64i), !cir.ptr<!s8i> loc(#loc218)
            %35 = cir.load %34 : !cir.ptr<!s8i>, !s8i loc(#loc216)
            %36 = cir.load %13 : !cir.ptr<!u64i>, !u64i loc(#loc219)
            %37 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc220)
            %38 = cir.ptr_stride(%37 : !cir.ptr<!s8i>, %36 : !u64i), !cir.ptr<!s8i> loc(#loc220)
            cir.store %35, %38 : !s8i, !cir.ptr<!s8i> loc(#loc319)
          } loc(#loc318)
          cir.yield loc(#loc209)
        } step {
          %32 = cir.load %13 : !cir.ptr<!u64i>, !u64i loc(#loc221)
          %33 = cir.unary(inc, %32) : !u64i, !u64i loc(#loc222)
          cir.store %33, %13 : !u64i, !cir.ptr<!u64i> loc(#loc320)
          cir.yield loc(#loc315)
        } loc(#loc315)
      } loc(#loc315)
      %19 = cir.const #cir.int<0> : !s32i loc(#loc223)
      %20 = cir.cast(integral, %19 : !s32i), !s8i loc(#loc223)
      %21 = cir.const #cir.int<50> : !s32i loc(#loc224)
      %22 = cir.const #cir.int<1> : !s32i loc(#loc225)
      %23 = cir.binop(sub, %21, %22) nsw : !s32i loc(#loc224)
      %24 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc226)
      %25 = cir.ptr_stride(%24 : !cir.ptr<!s8i>, %23 : !s32i), !cir.ptr<!s8i> loc(#loc226)
      cir.store %20, %25 : !s8i, !cir.ptr<!s8i> loc(#loc321)
      %26 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc227)
      cir.call @printLine(%26) : (!cir.ptr<!s8i>) -> () loc(#loc228)
      %27 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc229)
      %28 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc230)
      %29 = cir.cast(bitcast, %28 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc230)
      cir.call @free(%29) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc229)
    } loc(#loc310)
    cir.return loc(#loc174)
  } loc(#loc299)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":0:0)
#loc1 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":24:1)
#loc2 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":24:74)
#loc3 = loc("/usr/include/stdlib.h":672:1)
#loc4 = loc("/usr/include/stdlib.h":672:45)
#loc5 = loc("/usr/include/stdlib.h":756:1)
#loc6 = loc("/usr/include/stdlib.h":756:70)
#loc7 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":26:1)
#loc8 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":26:86)
#loc9 = loc("/usr/include/string.h":407:1)
#loc10 = loc("/usr/include/string.h":408:33)
#loc11 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc12 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc13 = loc("/usr/include/stdlib.h":687:1)
#loc14 = loc("/usr/include/stdlib.h":687:32)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":28:1)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":48:1)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":30:5)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":30:12)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":31:20)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":31:27)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":31:31)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":31:42)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":31:43)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":31:5)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":32:5)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":32:33)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":32:9)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":32:17)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":32:23)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":32:24)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":32:30)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":32:29)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":33:74)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":33:5)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":34:79)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":34:12)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":34:5)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":34:83)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":35:5)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":47:5)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":36:9)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":36:25)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":37:9)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":37:16)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":37:19)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":38:19)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":38:26)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":38:9)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":38:30)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":40:9)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":43:9)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":40:18)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":40:14)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":40:21)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":40:25)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":40:23)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":41:9)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":42:23)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":42:28)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":42:29)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":42:18)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":42:13)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":40:35)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":40:34)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":44:22)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":44:14)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":44:17)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":44:9)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":45:19)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":45:9)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":46:9)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":46:14)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":55:1)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":55:79)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":56:1)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":56:79)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":108:1)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":112:1)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":110:5)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":110:14)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":111:5)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":111:14)
#loc83 = loc("/usr/include/stdlib.h":575:1)
#loc84 = loc("/usr/include/stdlib.h":575:41)
#loc85 = loc("/usr/include/time.h":76:1)
#loc86 = loc("/usr/include/time.h":76:38)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":129:15)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":131:15)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":134:15)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":136:15)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":124:1)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":139:1)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":125:1)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":127:27)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":127:22)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":127:5)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":129:5)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":130:5)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":130:67)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":131:5)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":134:5)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":135:5)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":135:66)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":136:5)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":138:12)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":138:5)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":59:1)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":59:91)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":61:1)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":81:1)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":63:5)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":63:12)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":64:20)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":64:27)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":64:31)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":64:42)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":64:43)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":64:5)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":65:5)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":65:33)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":65:9)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":65:17)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":65:23)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":65:24)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":65:30)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":65:29)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":66:79)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":66:5)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":67:84)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":67:12)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":67:5)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":67:88)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":68:5)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":80:5)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":69:9)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":69:25)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":70:9)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":70:16)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":70:19)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":71:19)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":71:26)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":71:9)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":71:30)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":73:9)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":76:9)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":73:18)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":73:14)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":73:21)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":73:25)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":73:23)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":74:9)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":75:23)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":75:28)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":75:29)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":75:18)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":75:13)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":73:35)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":73:34)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":77:22)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":77:14)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":77:17)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":77:9)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":78:19)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":78:9)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":79:9)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":79:14)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":84:1)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":84:91)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":86:1)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":106:1)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":88:5)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":88:12)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":89:20)
#loc178 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":89:27)
#loc179 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":89:31)
#loc180 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":89:42)
#loc181 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":89:43)
#loc182 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":89:5)
#loc183 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":90:5)
#loc184 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":90:33)
#loc185 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":90:9)
#loc186 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":90:17)
#loc187 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":90:23)
#loc188 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":90:24)
#loc189 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":90:30)
#loc190 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":90:29)
#loc191 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":91:79)
#loc192 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":91:5)
#loc193 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":92:84)
#loc194 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":92:12)
#loc195 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":92:5)
#loc196 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":92:88)
#loc197 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":93:5)
#loc198 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":105:5)
#loc199 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":94:9)
#loc200 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":94:25)
#loc201 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":95:9)
#loc202 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":95:16)
#loc203 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":95:19)
#loc204 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":96:19)
#loc205 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":96:26)
#loc206 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":96:9)
#loc207 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":96:30)
#loc208 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":98:9)
#loc209 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":101:9)
#loc210 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":98:18)
#loc211 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":98:14)
#loc212 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":98:21)
#loc213 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":98:25)
#loc214 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":98:23)
#loc215 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":99:9)
#loc216 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":100:23)
#loc217 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":100:28)
#loc218 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":100:29)
#loc219 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":100:18)
#loc220 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":100:13)
#loc221 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":98:35)
#loc222 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":98:34)
#loc223 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":102:22)
#loc224 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":102:14)
#loc225 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":102:17)
#loc226 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":102:9)
#loc227 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":103:19)
#loc228 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":103:9)
#loc229 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":104:9)
#loc230 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c":104:14)
#loc231 = loc(fused[#loc1, #loc2])
#loc232 = loc(fused[#loc3, #loc4])
#loc233 = loc(fused[#loc5, #loc6])
#loc234 = loc(fused[#loc7, #loc8])
#loc235 = loc(fused[#loc9, #loc10])
#loc236 = loc(fused[#loc11, #loc12])
#loc237 = loc(fused[#loc13, #loc14])
#loc238 = loc(fused[#loc15, #loc16])
#loc239 = loc(fused[#loc17, #loc18])
#loc240 = loc(fused[#loc21, #loc22])
#loc241 = loc(fused[#loc20, #loc22])
#loc242 = loc(fused[#loc19, #loc23])
#loc243 = loc(fused[#loc24, #loc23])
#loc244 = loc(fused[#loc25, #loc26])
#loc245 = loc(fused[#loc27, #loc28])
#loc246 = loc(fused[#loc29, #loc26])
#loc247 = loc(fused[#loc34, #loc33])
#loc248 = loc(fused[#loc37, #loc38])
#loc249 = loc(fused[#loc39, #loc40])
#loc250 = loc(fused[#loc41, #loc42])
#loc251 = loc(fused[#loc43, #loc44])
#loc252 = loc(fused[#loc43, #loc45])
#loc253 = loc(fused[#loc48, #loc49])
#loc254 = loc(fused[#loc50, #loc51])
#loc255 = loc(fused[#loc53, #loc52])
#loc256 = loc(fused[#loc54, #loc55])
#loc257 = loc(fused[#loc57, #loc51])
#loc258 = loc(fused[#loc62, #loc60])
#loc259 = loc(fused[#loc64, #loc63])
#loc260 = loc(fused[#loc68, #loc65])
#loc261 = loc(fused[#loc73, #loc74])
#loc262 = loc(fused[#loc75, #loc76])
#loc263 = loc(fused[#loc77, #loc78])
#loc264 = loc(fused[#loc79, #loc80])
#loc265 = loc(fused[#loc81, #loc82])
#loc266 = loc(fused[#loc83, #loc84])
#loc267 = loc(fused[#loc85, #loc86])
#loc268 = loc(fused[#loc91, #loc92])
#loc271 = loc(fused[#loc102, #loc103])
#loc272 = loc(fused[#loc106, #loc107])
#loc273 = loc(fused[#loc110, #loc109])
#loc274 = loc(fused[#loc111, #loc112])
#loc275 = loc(fused[#loc113, #loc114])
#loc276 = loc(fused[#loc115, #loc116])
#loc277 = loc(fused[#loc119, #loc120])
#loc278 = loc(fused[#loc118, #loc120])
#loc279 = loc(fused[#loc117, #loc121])
#loc280 = loc(fused[#loc122, #loc121])
#loc281 = loc(fused[#loc123, #loc124])
#loc282 = loc(fused[#loc125, #loc126])
#loc283 = loc(fused[#loc127, #loc124])
#loc284 = loc(fused[#loc132, #loc131])
#loc285 = loc(fused[#loc135, #loc136])
#loc286 = loc(fused[#loc137, #loc138])
#loc287 = loc(fused[#loc139, #loc140])
#loc288 = loc(fused[#loc141, #loc142])
#loc289 = loc(fused[#loc141, #loc143])
#loc290 = loc(fused[#loc146, #loc147])
#loc291 = loc(fused[#loc148, #loc149])
#loc292 = loc(fused[#loc151, #loc150])
#loc293 = loc(fused[#loc152, #loc153])
#loc294 = loc(fused[#loc155, #loc149])
#loc295 = loc(fused[#loc160, #loc158])
#loc296 = loc(fused[#loc162, #loc161])
#loc297 = loc(fused[#loc166, #loc163])
#loc298 = loc(fused[#loc171, #loc172])
#loc299 = loc(fused[#loc173, #loc174])
#loc300 = loc(fused[#loc175, #loc176])
#loc301 = loc(fused[#loc179, #loc180])
#loc302 = loc(fused[#loc178, #loc180])
#loc303 = loc(fused[#loc177, #loc181])
#loc304 = loc(fused[#loc182, #loc181])
#loc305 = loc(fused[#loc183, #loc184])
#loc306 = loc(fused[#loc185, #loc186])
#loc307 = loc(fused[#loc187, #loc184])
#loc308 = loc(fused[#loc192, #loc191])
#loc309 = loc(fused[#loc195, #loc196])
#loc310 = loc(fused[#loc197, #loc198])
#loc311 = loc(fused[#loc199, #loc200])
#loc312 = loc(fused[#loc201, #loc202])
#loc313 = loc(fused[#loc201, #loc203])
#loc314 = loc(fused[#loc206, #loc207])
#loc315 = loc(fused[#loc208, #loc209])
#loc316 = loc(fused[#loc211, #loc210])
#loc317 = loc(fused[#loc212, #loc213])
#loc318 = loc(fused[#loc215, #loc209])
#loc319 = loc(fused[#loc220, #loc218])
#loc320 = loc(fused[#loc222, #loc221])
#loc321 = loc(fused[#loc226, #loc223])
