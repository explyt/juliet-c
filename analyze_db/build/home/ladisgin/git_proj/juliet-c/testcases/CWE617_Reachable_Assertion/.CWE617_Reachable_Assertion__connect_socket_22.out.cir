!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc20 = loc("CWE617_Reachable_Assertion__connect_socket_22b.c":50:61)
#loc21 = loc("CWE617_Reachable_Assertion__connect_socket_22b.c":50:65)
#loc123 = loc("CWE617_Reachable_Assertion__connect_socket_22b.c":123:66)
#loc124 = loc("CWE617_Reachable_Assertion__connect_socket_22b.c":123:70)
#loc142 = loc("CWE617_Reachable_Assertion__connect_socket_22b.c":139:66)
#loc143 = loc("CWE617_Reachable_Assertion__connect_socket_22b.c":139:70)
#true = #cir.bool<true> : !cir.bool
!ty_in_addr = !cir.struct<struct "in_addr" {!u32i} #cir.record.decl.ast>
#loc163 = loc(fused[#loc20, #loc21])
#loc202 = loc(fused[#loc123, #loc124])
#loc209 = loc(fused[#loc142, #loc143])
!ty_sockaddr = !cir.struct<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.struct<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE617_Reachable_Assertion/CWE617_Reachable_Assertion__connect_socket_22b.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.global "private" external @CWE617_Reachable_Assertion__connect_socket_22_badGlobal : !s32i {alignment = 4 : i64} loc(#loc154)
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc155)
  cir.func private @inet_addr(!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc156)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"127.0.0.1\00" : !cir.array<!s8i x 10>> : !cir.array<!s8i x 10> {alignment = 1 : i64} loc(#loc7)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc157)
  cir.func private @connect(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc158)
  cir.func private @recv(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc159)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc160)
  cir.func private @close(!s32i) -> !s32i loc(#loc161)
  cir.func @CWE617_Reachable_Assertion__connect_socket_22_badSource(%arg0: !s32i loc(fused[#loc20, #loc21])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc163)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc19)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc22)
    cir.scope {
      %4 = cir.get_global @CWE617_Reachable_Assertion__connect_socket_22_badGlobal : !cir.ptr<!s32i> loc(#loc154)
      %5 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc25)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc25)
      cir.if %6 {
        cir.scope {
          %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc167)
          %8 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc168)
          %9 = cir.alloca !s32i, !cir.ptr<!s32i>, ["connectSocket", init] {alignment = 4 : i64} loc(#loc169)
          %10 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc170)
          %11 = cir.const #cir.int<1> : !s32i loc(#loc34)
          %12 = cir.unary(minus, %11) : !s32i, !s32i loc(#loc34)
          cir.store %12, %9 : !s32i, !cir.ptr<!s32i> loc(#loc169)
          cir.scope {
            cir.do {
              %13 = cir.const #cir.int<2> : !s32i loc(#loc39)
              %14 = cir.const #cir.int<1> : !s32i loc(#loc40)
              %15 = cir.const #cir.int<6> : !s32i loc(#loc41)
              %16 = cir.call @socket(%13, %14, %15) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc42)
              cir.store %16, %9 : !s32i, !cir.ptr<!s32i> loc(#loc172)
              cir.scope {
                %55 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc47)
                %56 = cir.const #cir.int<1> : !s32i loc(#loc48)
                %57 = cir.unary(minus, %56) : !s32i, !s32i loc(#loc48)
                %58 = cir.cmp(eq, %55, %57) : !s32i, !cir.bool loc(#loc174)
                cir.if %58 {
                  cir.break loc(#loc50)
                } loc(#loc175)
              } loc(#loc173)
              %17 = cir.cast(bitcast, %8 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc176)
              %18 = cir.const #cir.int<0> : !s32i loc(#loc53)
              %19 = cir.const #cir.int<16> : !u64i loc(#loc177)
              cir.libc.memset %19 bytes from %17 set to %18 : !cir.ptr<!void>, !s32i, !u64i loc(#loc178)
              %20 = cir.const #cir.int<2> : !s32i loc(#loc58)
              %21 = cir.cast(integral, %20 : !s32i), !u16i loc(#loc58)
              %22 = cir.get_member %8[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc59)
              cir.store %21, %22 : !u16i, !cir.ptr<!u16i> loc(#loc179)
              %23 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 10>> loc(#loc7)
              %24 = cir.cast(array_to_ptrdecay, %23 : !cir.ptr<!cir.array<!s8i x 10>>), !cir.ptr<!s8i> loc(#loc7)
              %25 = cir.call @inet_addr(%24) : (!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc61)
              %26 = cir.get_member %8[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc62)
              %27 = cir.get_member %26[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc63)
              cir.store %25, %27 : !u32i, !cir.ptr<!u32i> loc(#loc180)
              %28 = cir.const #cir.int<27015> : !s32i loc(#loc66)
              %29 = cir.cast(integral, %28 : !s32i), !u16i loc(#loc66)
              %30 = cir.call @htons(%29) : (!u16i) -> !u16i extra(#fn_attr) loc(#loc67)
              %31 = cir.get_member %8[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc68)
              cir.store %30, %31 : !u16i, !cir.ptr<!u16i> loc(#loc181)
              cir.scope {
                %55 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc73)
                %56 = cir.cast(bitcast, %8 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc183)
                %57 = cir.const #cir.int<16> : !u64i loc(#loc184)
                %58 = cir.cast(integral, %57 : !u64i), !u32i loc(#loc184)
                %59 = cir.call @connect(%55, %56, %58) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc78)
                %60 = cir.const #cir.int<1> : !s32i loc(#loc79)
                %61 = cir.unary(minus, %60) : !s32i, !s32i loc(#loc79)
                %62 = cir.cmp(eq, %59, %61) : !s32i, !cir.bool loc(#loc185)
                cir.if %62 {
                  cir.break loc(#loc81)
                } loc(#loc186)
              } loc(#loc182)
              %32 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc82)
              %33 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc83)
              %34 = cir.cast(bitcast, %33 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc83)
              %35 = cir.const #cir.int<3> : !s32i loc(#loc84)
              %36 = cir.cast(integral, %35 : !s32i), !u64i loc(#loc84)
              %37 = cir.const #cir.int<4> : !u64i loc(#loc84)
              %38 = cir.binop(mul, %36, %37) : !u64i loc(#loc84)
              %39 = cir.const #cir.int<2> : !s32i loc(#loc84)
              %40 = cir.cast(integral, %39 : !s32i), !u64i loc(#loc84)
              %41 = cir.binop(add, %38, %40) : !u64i loc(#loc84)
              %42 = cir.const #cir.int<1> : !s32i loc(#loc85)
              %43 = cir.cast(integral, %42 : !s32i), !u64i loc(#loc85)
              %44 = cir.binop(sub, %41, %43) : !u64i loc(#loc187)
              %45 = cir.const #cir.int<0> : !s32i loc(#loc86)
              %46 = cir.call @recv(%32, %34, %44, %45) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc87)
              %47 = cir.cast(integral, %46 : !s64i), !s32i loc(#loc87)
              cir.store %47, %7 : !s32i, !cir.ptr<!s32i> loc(#loc188)
              cir.scope {
                %55 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc92)
                %56 = cir.const #cir.int<1> : !s32i loc(#loc93)
                %57 = cir.unary(minus, %56) : !s32i, !s32i loc(#loc93)
                %58 = cir.cmp(eq, %55, %57) : !s32i, !cir.bool loc(#loc190)
                %59 = cir.ternary(%58, true {
                  %60 = cir.const #true loc(#loc94)
                  cir.yield %60 : !cir.bool loc(#loc94)
                }, false {
                  %60 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc95)
                  %61 = cir.const #cir.int<0> : !s32i loc(#loc96)
                  %62 = cir.cmp(eq, %60, %61) : !s32i, !cir.bool loc(#loc191)
                  %63 = cir.ternary(%62, true {
                    %64 = cir.const #true loc(#loc94)
                    cir.yield %64 : !cir.bool loc(#loc94)
                  }, false {
                    %64 = cir.const #false loc(#loc94)
                    cir.yield %64 : !cir.bool loc(#loc94)
                  }) : (!cir.bool) -> !cir.bool loc(#loc94)
                  cir.yield %63 : !cir.bool loc(#loc94)
                }) : (!cir.bool) -> !cir.bool loc(#loc94)
                cir.if %59 {
                  cir.break loc(#loc98)
                } loc(#loc192)
              } loc(#loc189)
              %48 = cir.const #cir.int<0> : !s32i loc(#loc99)
              %49 = cir.cast(integral, %48 : !s32i), !s8i loc(#loc99)
              %50 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc100)
              %51 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc101)
              %52 = cir.ptr_stride(%51 : !cir.ptr<!s8i>, %50 : !s32i), !cir.ptr<!s8i> loc(#loc101)
              cir.store %49, %52 : !s8i, !cir.ptr<!s8i> loc(#loc193)
              %53 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc102)
              %54 = cir.call @atoi(%53) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc103)
              cir.store %54, %0 : !s32i, !cir.ptr<!s32i> loc(#loc194)
              cir.yield loc(#loc38)
            } while {
              %13 = cir.const #cir.int<0> : !s32i loc(#loc106)
              %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc106)
              cir.condition(%14) loc(#loc106)
            } loc(#loc171)
          } loc(#loc171)
          cir.scope {
            %13 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc109)
            %14 = cir.const #cir.int<1> : !s32i loc(#loc110)
            %15 = cir.unary(minus, %14) : !s32i, !s32i loc(#loc110)
            %16 = cir.cmp(ne, %13, %15) : !s32i, !cir.bool loc(#loc196)
            cir.if %16 {
              %17 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc112)
              %18 = cir.call @close(%17) : (!s32i) -> !s32i loc(#loc113)
            } loc(#loc197)
          } loc(#loc195)
        } loc(#loc166)
      } loc(#loc165)
    } loc(#loc164)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc114)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc198)
    %3 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc198)
    cir.return %3 : !s32i loc(#loc198)
  } loc(#loc162)
  cir.global "private" external @CWE617_Reachable_Assertion__connect_socket_22_goodG2B1Global : !s32i {alignment = 4 : i64} loc(#loc199)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc200)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc120)
  cir.func @CWE617_Reachable_Assertion__connect_socket_22_goodG2B1Source(%arg0: !s32i loc(fused[#loc123, #loc124])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc202)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc122)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc125)
    cir.scope {
      %4 = cir.get_global @CWE617_Reachable_Assertion__connect_socket_22_goodG2B1Global : !cir.ptr<!s32i> loc(#loc199)
      %5 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc128)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc128)
      cir.if %6 {
        %7 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc120)
        %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc120)
        cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc132)
      } else {
        %7 = cir.const #cir.int<5> : !s32i loc(#loc133)
        %8 = cir.const #cir.int<1> : !s32i loc(#loc134)
        %9 = cir.binop(add, %7, %8) nsw : !s32i loc(#loc133)
        cir.store %9, %0 : !s32i, !cir.ptr<!s32i> loc(#loc205)
      } loc(#loc204)
    } loc(#loc203)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc136)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc206)
    %3 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc206)
    cir.return %3 : !s32i loc(#loc206)
  } loc(#loc201)
  cir.global "private" external @CWE617_Reachable_Assertion__connect_socket_22_goodG2B2Global : !s32i {alignment = 4 : i64} loc(#loc207)
  cir.func @CWE617_Reachable_Assertion__connect_socket_22_goodG2B2Source(%arg0: !s32i loc(fused[#loc142, #loc143])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc209)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc141)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc144)
    cir.scope {
      %4 = cir.get_global @CWE617_Reachable_Assertion__connect_socket_22_goodG2B2Global : !cir.ptr<!s32i> loc(#loc207)
      %5 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc147)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc147)
      cir.if %6 {
        %7 = cir.const #cir.int<5> : !s32i loc(#loc149)
        %8 = cir.const #cir.int<1> : !s32i loc(#loc150)
        %9 = cir.binop(add, %7, %8) nsw : !s32i loc(#loc149)
        cir.store %9, %0 : !s32i, !cir.ptr<!s32i> loc(#loc212)
      } loc(#loc211)
    } loc(#loc210)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc152)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc213)
    %3 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc213)
    cir.return %3 : !s32i loc(#loc213)
  } loc(#loc208)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE617_Reachable_Assertion/CWE617_Reachable_Assertion__connect_socket_22b.c":0:0)
#loc1 = loc("CWE617_Reachable_Assertion__connect_socket_22b.c":48:1)
#loc2 = loc("CWE617_Reachable_Assertion__connect_socket_22b.c":48:12)
#loc3 = loc("/usr/include/sys/socket.h":102:1)
#loc4 = loc("/usr/include/sys/socket.h":102:62)
#loc5 = loc("/usr/include/arpa/inet.h":34:1)
#loc6 = loc("/usr/include/arpa/inet.h":34:47)
#loc7 = loc("CWE617_Reachable_Assertion__connect_socket_22b.c":80:53)
#loc8 = loc("/usr/include/netinet/in.h":404:1)
#loc9 = loc("/usr/include/netinet/in.h":405:40)
#loc10 = loc("/usr/include/sys/socket.h":126:1)
#loc11 = loc("/usr/include/sys/socket.h":126:75)
#loc12 = loc("/usr/include/sys/socket.h":145:1)
#loc13 = loc("/usr/include/sys/socket.h":145:68)
#loc14 = loc("/usr/include/stdlib.h":105:1)
#loc15 = loc("/usr/include/stdlib.h":106:33)
#loc16 = loc("/usr/include/unistd.h":358:1)
#loc17 = loc("/usr/include/unistd.h":358:27)
#loc18 = loc("CWE617_Reachable_Assertion__connect_socket_22b.c":50:1)
#loc19 = loc("CWE617_Reachable_Assertion__connect_socket_22b.c":112:1)
#loc22 = loc("CWE617_Reachable_Assertion__connect_socket_22b.c":51:1)
#loc23 = loc("CWE617_Reachable_Assertion__connect_socket_22b.c":52:5)
#loc24 = loc("CWE617_Reachable_Assertion__connect_socket_22b.c":110:5)
#loc25 = loc("CWE617_Reachable_Assertion__connect_socket_22b.c":52:8)
#loc26 = loc("CWE617_Reachable_Assertion__connect_socket_22b.c":53:5)
#loc27 = loc("CWE617_Reachable_Assertion__connect_socket_22b.c":54:9)
#loc28 = loc("CWE617_Reachable_Assertion__connect_socket_22b.c":109:9)
#loc29 = loc("CWE617_Reachable_Assertion__connect_socket_22b.c":59:13)
#loc30 = loc("CWE617_Reachable_Assertion__connect_socket_22b.c":59:17)
#loc31 = loc("CWE617_Reachable_Assertion__connect_socket_22b.c":60:13)
#loc32 = loc("CWE617_Reachable_Assertion__connect_socket_22b.c":60:32)
#loc33 = loc("CWE617_Reachable_Assertion__connect_socket_22b.c":61:13)
#loc34 = loc("CWE617_Reachable_Assertion__connect_socket_22b.c":61:36)
#loc35 = loc("CWE617_Reachable_Assertion__connect_socket_22b.c":62:13)
#loc36 = loc("CWE617_Reachable_Assertion__connect_socket_22b.c":62:45)
#loc37 = loc("CWE617_Reachable_Assertion__connect_socket_22b.c":63:13)
#loc38 = loc("CWE617_Reachable_Assertion__connect_socket_22b.c":98:21)
#loc39 = loc("CWE617_Reachable_Assertion__connect_socket_22b.c":73:40)
#loc40 = loc("CWE617_Reachable_Assertion__connect_socket_22b.c":73:49)
#loc41 = loc("CWE617_Reachable_Assertion__connect_socket_22b.c":73:62)
#loc42 = loc("CWE617_Reachable_Assertion__connect_socket_22b.c":73:33)
#loc43 = loc("CWE617_Reachable_Assertion__connect_socket_22b.c":73:17)
#loc44 = loc("CWE617_Reachable_Assertion__connect_socket_22b.c":73:73)
#loc45 = loc("CWE617_Reachable_Assertion__connect_socket_22b.c":74:17)
#loc46 = loc("CWE617_Reachable_Assertion__connect_socket_22b.c":77:17)
#loc47 = loc("CWE617_Reachable_Assertion__connect_socket_22b.c":74:21)
#loc48 = loc("CWE617_Reachable_Assertion__connect_socket_22b.c":74:38)
#loc49 = loc("CWE617_Reachable_Assertion__connect_socket_22b.c":75:17)
#loc50 = loc("CWE617_Reachable_Assertion__connect_socket_22b.c":76:21)
#loc51 = loc("CWE617_Reachable_Assertion__connect_socket_22b.c":78:24)
#loc52 = loc("CWE617_Reachable_Assertion__connect_socket_22b.c":78:25)
#loc53 = loc("CWE617_Reachable_Assertion__connect_socket_22b.c":78:34)
#loc54 = loc("CWE617_Reachable_Assertion__connect_socket_22b.c":78:37)
#loc55 = loc("CWE617_Reachable_Assertion__connect_socket_22b.c":78:51)
#loc56 = loc("CWE617_Reachable_Assertion__connect_socket_22b.c":78:17)
#loc57 = loc("CWE617_Reachable_Assertion__connect_socket_22b.c":78:52)
#loc58 = loc("CWE617_Reachable_Assertion__connect_socket_22b.c":79:38)
#loc59 = loc("/usr/include/netinet/in.h":249:5)
#loc60 = loc("CWE617_Reachable_Assertion__connect_socket_22b.c":79:17)
#loc61 = loc("CWE617_Reachable_Assertion__connect_socket_22b.c":80:43)
#loc62 = loc("/usr/include/netinet/in.h":251:20)
#loc63 = loc("/usr/include/netinet/in.h":33:15)
#loc64 = loc("CWE617_Reachable_Assertion__connect_socket_22b.c":80:17)
#loc65 = loc("CWE617_Reachable_Assertion__connect_socket_22b.c":80:63)
#loc66 = loc("CWE617_Reachable_Assertion__connect_socket_22b.c":81:42)
#loc67 = loc("CWE617_Reachable_Assertion__connect_socket_22b.c":81:36)
#loc68 = loc("/usr/include/netinet/in.h":250:15)
#loc69 = loc("CWE617_Reachable_Assertion__connect_socket_22b.c":81:17)
#loc70 = loc("CWE617_Reachable_Assertion__connect_socket_22b.c":81:50)
#loc71 = loc("CWE617_Reachable_Assertion__connect_socket_22b.c":82:17)
#loc72 = loc("CWE617_Reachable_Assertion__connect_socket_22b.c":85:17)
#loc73 = loc("CWE617_Reachable_Assertion__connect_socket_22b.c":82:29)
#loc74 = loc("CWE617_Reachable_Assertion__connect_socket_22b.c":82:62)
#loc75 = loc("CWE617_Reachable_Assertion__connect_socket_22b.c":82:63)
#loc76 = loc("CWE617_Reachable_Assertion__connect_socket_22b.c":82:72)
#loc77 = loc("CWE617_Reachable_Assertion__connect_socket_22b.c":82:86)
#loc78 = loc("CWE617_Reachable_Assertion__connect_socket_22b.c":82:21)
#loc79 = loc("CWE617_Reachable_Assertion__connect_socket_22b.c":82:92)
#loc80 = loc("CWE617_Reachable_Assertion__connect_socket_22b.c":83:17)
#loc81 = loc("CWE617_Reachable_Assertion__connect_socket_22b.c":84:21)
#loc82 = loc("CWE617_Reachable_Assertion__connect_socket_22b.c":88:35)
#loc83 = loc("CWE617_Reachable_Assertion__connect_socket_22b.c":88:50)
#loc84 = loc("CWE617_Reachable_Assertion__connect_socket_22b.c":88:63)
#loc85 = loc("CWE617_Reachable_Assertion__connect_socket_22b.c":88:81)
#loc86 = loc("CWE617_Reachable_Assertion__connect_socket_22b.c":88:84)
#loc87 = loc("CWE617_Reachable_Assertion__connect_socket_22b.c":88:30)
#loc88 = loc("CWE617_Reachable_Assertion__connect_socket_22b.c":88:17)
#loc89 = loc("CWE617_Reachable_Assertion__connect_socket_22b.c":88:85)
#loc90 = loc("CWE617_Reachable_Assertion__connect_socket_22b.c":89:17)
#loc91 = loc("CWE617_Reachable_Assertion__connect_socket_22b.c":92:17)
#loc92 = loc("CWE617_Reachable_Assertion__connect_socket_22b.c":89:21)
#loc93 = loc("CWE617_Reachable_Assertion__connect_socket_22b.c":89:35)
#loc94 = loc("CWE617_Reachable_Assertion__connect_socket_22b.c":89:48)
#loc95 = loc("CWE617_Reachable_Assertion__connect_socket_22b.c":89:51)
#loc96 = loc("CWE617_Reachable_Assertion__connect_socket_22b.c":89:65)
#loc97 = loc("CWE617_Reachable_Assertion__connect_socket_22b.c":90:17)
#loc98 = loc("CWE617_Reachable_Assertion__connect_socket_22b.c":91:21)
#loc99 = loc("CWE617_Reachable_Assertion__connect_socket_22b.c":94:43)
#loc100 = loc("CWE617_Reachable_Assertion__connect_socket_22b.c":94:29)
#loc101 = loc("CWE617_Reachable_Assertion__connect_socket_22b.c":94:17)
#loc102 = loc("CWE617_Reachable_Assertion__connect_socket_22b.c":96:29)
#loc103 = loc("CWE617_Reachable_Assertion__connect_socket_22b.c":96:24)
#loc104 = loc("CWE617_Reachable_Assertion__connect_socket_22b.c":96:17)
#loc105 = loc("CWE617_Reachable_Assertion__connect_socket_22b.c":96:40)
#loc106 = loc("CWE617_Reachable_Assertion__connect_socket_22b.c":98:20)
#loc107 = loc("CWE617_Reachable_Assertion__connect_socket_22b.c":99:13)
#loc108 = loc("CWE617_Reachable_Assertion__connect_socket_22b.c":102:13)
#loc109 = loc("CWE617_Reachable_Assertion__connect_socket_22b.c":99:17)
#loc110 = loc("CWE617_Reachable_Assertion__connect_socket_22b.c":99:34)
#loc111 = loc("CWE617_Reachable_Assertion__connect_socket_22b.c":100:13)
#loc112 = loc("CWE617_Reachable_Assertion__connect_socket_22b.c":101:30)
#loc113 = loc("CWE617_Reachable_Assertion__connect_socket_22b.c":101:17)
#loc114 = loc("CWE617_Reachable_Assertion__connect_socket_22b.c":111:12)
#loc115 = loc("CWE617_Reachable_Assertion__connect_socket_22b.c":111:5)
#loc116 = loc("CWE617_Reachable_Assertion__connect_socket_22b.c":119:1)
#loc117 = loc("CWE617_Reachable_Assertion__connect_socket_22b.c":119:12)
#loc118 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc119 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc120 = loc("CWE617_Reachable_Assertion__connect_socket_22b.c":128:19)
#loc121 = loc("CWE617_Reachable_Assertion__connect_socket_22b.c":123:1)
#loc122 = loc("CWE617_Reachable_Assertion__connect_socket_22b.c":136:1)
#loc125 = loc("CWE617_Reachable_Assertion__connect_socket_22b.c":124:1)
#loc126 = loc("CWE617_Reachable_Assertion__connect_socket_22b.c":125:5)
#loc127 = loc("CWE617_Reachable_Assertion__connect_socket_22b.c":134:5)
#loc128 = loc("CWE617_Reachable_Assertion__connect_socket_22b.c":125:8)
#loc129 = loc("CWE617_Reachable_Assertion__connect_socket_22b.c":126:5)
#loc130 = loc("CWE617_Reachable_Assertion__connect_socket_22b.c":129:5)
#loc131 = loc("CWE617_Reachable_Assertion__connect_socket_22b.c":131:5)
#loc132 = loc("CWE617_Reachable_Assertion__connect_socket_22b.c":128:9)
#loc133 = loc("CWE617_Reachable_Assertion__connect_socket_22b.c":133:16)
#loc134 = loc("CWE617_Reachable_Assertion__connect_socket_22b.c":133:29)
#loc135 = loc("CWE617_Reachable_Assertion__connect_socket_22b.c":133:9)
#loc136 = loc("CWE617_Reachable_Assertion__connect_socket_22b.c":135:12)
#loc137 = loc("CWE617_Reachable_Assertion__connect_socket_22b.c":135:5)
#loc138 = loc("CWE617_Reachable_Assertion__connect_socket_22b.c":120:1)
#loc139 = loc("CWE617_Reachable_Assertion__connect_socket_22b.c":120:12)
#loc140 = loc("CWE617_Reachable_Assertion__connect_socket_22b.c":139:1)
#loc141 = loc("CWE617_Reachable_Assertion__connect_socket_22b.c":147:1)
#loc144 = loc("CWE617_Reachable_Assertion__connect_socket_22b.c":140:1)
#loc145 = loc("CWE617_Reachable_Assertion__connect_socket_22b.c":141:5)
#loc146 = loc("CWE617_Reachable_Assertion__connect_socket_22b.c":145:5)
#loc147 = loc("CWE617_Reachable_Assertion__connect_socket_22b.c":141:8)
#loc148 = loc("CWE617_Reachable_Assertion__connect_socket_22b.c":142:5)
#loc149 = loc("CWE617_Reachable_Assertion__connect_socket_22b.c":144:16)
#loc150 = loc("CWE617_Reachable_Assertion__connect_socket_22b.c":144:29)
#loc151 = loc("CWE617_Reachable_Assertion__connect_socket_22b.c":144:9)
#loc152 = loc("CWE617_Reachable_Assertion__connect_socket_22b.c":146:12)
#loc153 = loc("CWE617_Reachable_Assertion__connect_socket_22b.c":146:5)
#loc154 = loc(fused[#loc1, #loc2])
#loc155 = loc(fused[#loc3, #loc4])
#loc156 = loc(fused[#loc5, #loc6])
#loc157 = loc(fused[#loc8, #loc9])
#loc158 = loc(fused[#loc10, #loc11])
#loc159 = loc(fused[#loc12, #loc13])
#loc160 = loc(fused[#loc14, #loc15])
#loc161 = loc(fused[#loc16, #loc17])
#loc162 = loc(fused[#loc18, #loc19])
#loc164 = loc(fused[#loc23, #loc24])
#loc165 = loc(fused[#loc26, #loc24])
#loc166 = loc(fused[#loc27, #loc28])
#loc167 = loc(fused[#loc29, #loc30])
#loc168 = loc(fused[#loc31, #loc32])
#loc169 = loc(fused[#loc33, #loc34])
#loc170 = loc(fused[#loc35, #loc36])
#loc171 = loc(fused[#loc37, #loc38])
#loc172 = loc(fused[#loc43, #loc44])
#loc173 = loc(fused[#loc45, #loc46])
#loc174 = loc(fused[#loc47, #loc48])
#loc175 = loc(fused[#loc49, #loc46])
#loc176 = loc(fused[#loc51, #loc52])
#loc177 = loc(fused[#loc54, #loc55])
#loc178 = loc(fused[#loc56, #loc57])
#loc179 = loc(fused[#loc60, #loc58])
#loc180 = loc(fused[#loc64, #loc65])
#loc181 = loc(fused[#loc69, #loc70])
#loc182 = loc(fused[#loc71, #loc72])
#loc183 = loc(fused[#loc74, #loc75])
#loc184 = loc(fused[#loc76, #loc77])
#loc185 = loc(fused[#loc78, #loc79])
#loc186 = loc(fused[#loc80, #loc72])
#loc187 = loc(fused[#loc84, #loc85])
#loc188 = loc(fused[#loc88, #loc89])
#loc189 = loc(fused[#loc90, #loc91])
#loc190 = loc(fused[#loc92, #loc93])
#loc191 = loc(fused[#loc95, #loc96])
#loc192 = loc(fused[#loc97, #loc91])
#loc193 = loc(fused[#loc101, #loc99])
#loc194 = loc(fused[#loc104, #loc105])
#loc195 = loc(fused[#loc107, #loc108])
#loc196 = loc(fused[#loc109, #loc110])
#loc197 = loc(fused[#loc111, #loc108])
#loc198 = loc(fused[#loc115, #loc114])
#loc199 = loc(fused[#loc116, #loc117])
#loc200 = loc(fused[#loc118, #loc119])
#loc201 = loc(fused[#loc121, #loc122])
#loc203 = loc(fused[#loc126, #loc127])
#loc204 = loc(fused[#loc129, #loc130, #loc131, #loc127])
#loc205 = loc(fused[#loc135, #loc134])
#loc206 = loc(fused[#loc137, #loc136])
#loc207 = loc(fused[#loc138, #loc139])
#loc208 = loc(fused[#loc140, #loc141])
#loc210 = loc(fused[#loc145, #loc146])
#loc211 = loc(fused[#loc148, #loc146])
#loc212 = loc(fused[#loc151, #loc150])
#loc213 = loc(fused[#loc153, #loc152])
