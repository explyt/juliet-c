!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":136:10)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":136:14)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":136:20)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":136:32)
#loc265 = loc(fused[#loc90, #loc91])
#loc266 = loc(fused[#loc92, #loc93])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.global "private" constant cir_private @__const.goodG2B2.source = #cir.const_array<"AAAAAAAAAA\00" : !cir.array<!s8i x 11>> : !cir.array<!s8i x 11> loc(#loc226)
  cir.global "private" constant cir_private @__const.goodG2B1.source = #cir.const_array<"AAAAAAAAAA\00" : !cir.array<!s8i x 11>> : !cir.array<!s8i x 11> loc(#loc227)
  cir.global "private" constant cir_private @__const.CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07_bad.source = #cir.const_array<"AAAAAAAAAA\00" : !cir.array<!s8i x 11>> : !cir.array<!s8i x 11> loc(#loc228)
  cir.global "private" internal dsolocal @staticFive = #cir.int<5> : !s32i {alignment = 4 : i64} loc(#loc229)
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc230)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc231)
  cir.func private @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc232)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc233)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc234)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc236)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc23)
    cir.store %1, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc237)
    cir.scope {
      %2 = cir.get_global @staticFive : !cir.ptr<!s32i> loc(#loc229)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc27)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc28)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !cir.bool loc(#loc239)
      cir.if %5 {
        %6 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc30)
        %7 = cir.const #cir.int<10> : !s32i loc(#loc31)
        %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc31)
        %9 = cir.const #cir.int<1> : !u64i loc(#loc241)
        %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc242)
        %11 = cir.call @malloc(%10) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc30)
        %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc243)
        cir.store %12, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc244)
        cir.scope {
          %13 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc38)
          %14 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc39)
          %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc39)
          %16 = cir.cmp(eq, %13, %15) : !cir.ptr<!s8i>, !cir.bool loc(#loc246)
          cir.if %16 {
            %17 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc41)
            %18 = cir.const #cir.int<1> : !s32i loc(#loc42)
            %19 = cir.unary(minus, %18) : !s32i, !s32i loc(#loc43)
            cir.call @exit(%19) : (!s32i) -> () extra(#fn_attr) loc(#loc41)
          } loc(#loc247)
        } loc(#loc245)
      } loc(#loc240)
    } loc(#loc238)
    cir.scope {
      %2 = cir.alloca !cir.array<!s8i x 11>, !cir.ptr<!cir.array<!s8i x 11>>, ["source"] {alignment = 1 : i64} loc(#loc228)
      %3 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc249)
      %4 = cir.alloca !u64i, !cir.ptr<!u64i>, ["sourceLen"] {alignment = 8 : i64} loc(#loc250)
      %5 = cir.get_global @__const.CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07_bad.source : !cir.ptr<!cir.array<!s8i x 11>> loc(#loc228)
      cir.copy %5 to %2 : !cir.ptr<!cir.array<!s8i x 11>> loc(#loc228)
      %6 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc49)
      %7 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 11>>), !cir.ptr<!s8i> loc(#loc50)
      %8 = cir.call @strlen(%7) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc49)
      cir.store %8, %4 : !u64i, !cir.ptr<!u64i> loc(#loc251)
      cir.scope {
        %13 = cir.const #cir.int<0> : !s32i loc(#loc55)
        %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc55)
        cir.store %14, %3 : !u64i, !cir.ptr<!u64i> loc(#loc253)
        cir.for : cond {
          %15 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc57)
          %16 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc58)
          %17 = cir.const #cir.int<1> : !s32i loc(#loc59)
          %18 = cir.cast(integral, %17 : !s32i), !u64i loc(#loc59)
          %19 = cir.binop(add, %16, %18) : !u64i loc(#loc254)
          %20 = cir.cmp(lt, %15, %19) : !u64i, !cir.bool loc(#loc255)
          cir.condition(%20) loc(#loc60)
        } body {
          cir.scope {
            %15 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc62)
            %16 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 11>>), !cir.ptr<!s8i> loc(#loc63)
            %17 = cir.ptr_stride(%16 : !cir.ptr<!s8i>, %15 : !u64i), !cir.ptr<!s8i> loc(#loc63)
            %18 = cir.load %17 : !cir.ptr<!s8i>, !s8i loc(#loc63)
            %19 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc64)
            %20 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc65)
            %21 = cir.ptr_stride(%19 : !cir.ptr<!s8i>, %20 : !u64i), !cir.ptr<!s8i> loc(#loc66)
            cir.store %18, %21 : !s8i, !cir.ptr<!s8i> loc(#loc257)
          } loc(#loc256)
          cir.yield loc(#loc54)
        } step {
          %15 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc68)
          %16 = cir.unary(inc, %15) : !u64i, !u64i loc(#loc69)
          cir.store %16, %3 : !u64i, !cir.ptr<!u64i> loc(#loc258)
          cir.yield loc(#loc252)
        } loc(#loc252)
      } loc(#loc252)
      %9 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc70)
      cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc71)
      %10 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc72)
      %11 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc73)
      %12 = cir.cast(bitcast, %11 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc73)
      cir.call @free(%12) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc72)
    } loc(#loc248)
    cir.return loc(#loc20)
  } loc(#loc235)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc260)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc76)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc261)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc78)
    cir.return loc(#loc75)
  } loc(#loc259)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc262)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc263)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc84)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc85)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc86)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc87)
  cir.func @main(%arg0: !s32i loc(fused[#loc90, #loc91]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc92, #loc93])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc265)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc266)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc89)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc94)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc94)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc95)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc96)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc96)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc97)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc84)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc84)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc98)
    %8 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07_good : !cir.ptr<!cir.func<!void ()>> loc(#loc267)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07_good() : () -> () loc(#loc99)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc85)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc85)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc101)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc86)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc86)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc102)
    %13 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc268)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07_bad() : () -> () loc(#loc103)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc87)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc87)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc105)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc106)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc269)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc269)
    cir.return %17 : !s32i loc(#loc269)
  } loc(#loc264)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc108)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc271)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc113)
    cir.store %1, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc272)
    cir.scope {
      %2 = cir.get_global @staticFive : !cir.ptr<!s32i> loc(#loc229)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc117)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc118)
      %5 = cir.cmp(ne, %3, %4) : !s32i, !cir.bool loc(#loc274)
      cir.if %5 {
        %6 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc108)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc108)
        cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc122)
      } else {
        %6 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc123)
        %7 = cir.const #cir.int<10> : !s32i loc(#loc124)
        %8 = cir.const #cir.int<1> : !s32i loc(#loc125)
        %9 = cir.binop(add, %7, %8) nsw : !s32i loc(#loc124)
        %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc124)
        %11 = cir.const #cir.int<1> : !u64i loc(#loc276)
        %12 = cir.binop(mul, %10, %11) : !u64i loc(#loc277)
        %13 = cir.call @malloc(%12) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc123)
        %14 = cir.cast(bitcast, %13 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc278)
        cir.store %14, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc279)
        cir.scope {
          %15 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc133)
          %16 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc134)
          %17 = cir.cast(bitcast, %16 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc134)
          %18 = cir.cmp(eq, %15, %17) : !cir.ptr<!s8i>, !cir.bool loc(#loc281)
          cir.if %18 {
            %19 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc136)
            %20 = cir.const #cir.int<1> : !s32i loc(#loc137)
            %21 = cir.unary(minus, %20) : !s32i, !s32i loc(#loc138)
            cir.call @exit(%21) : (!s32i) -> () extra(#fn_attr) loc(#loc136)
          } loc(#loc282)
        } loc(#loc280)
      } loc(#loc275)
    } loc(#loc273)
    cir.scope {
      %2 = cir.alloca !cir.array<!s8i x 11>, !cir.ptr<!cir.array<!s8i x 11>>, ["source"] {alignment = 1 : i64} loc(#loc227)
      %3 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc284)
      %4 = cir.alloca !u64i, !cir.ptr<!u64i>, ["sourceLen"] {alignment = 8 : i64} loc(#loc285)
      %5 = cir.get_global @__const.goodG2B1.source : !cir.ptr<!cir.array<!s8i x 11>> loc(#loc227)
      cir.copy %5 to %2 : !cir.ptr<!cir.array<!s8i x 11>> loc(#loc227)
      %6 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc144)
      %7 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 11>>), !cir.ptr<!s8i> loc(#loc145)
      %8 = cir.call @strlen(%7) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc144)
      cir.store %8, %4 : !u64i, !cir.ptr<!u64i> loc(#loc286)
      cir.scope {
        %13 = cir.const #cir.int<0> : !s32i loc(#loc150)
        %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc150)
        cir.store %14, %3 : !u64i, !cir.ptr<!u64i> loc(#loc288)
        cir.for : cond {
          %15 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc152)
          %16 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc153)
          %17 = cir.const #cir.int<1> : !s32i loc(#loc154)
          %18 = cir.cast(integral, %17 : !s32i), !u64i loc(#loc154)
          %19 = cir.binop(add, %16, %18) : !u64i loc(#loc289)
          %20 = cir.cmp(lt, %15, %19) : !u64i, !cir.bool loc(#loc290)
          cir.condition(%20) loc(#loc155)
        } body {
          cir.scope {
            %15 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc157)
            %16 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 11>>), !cir.ptr<!s8i> loc(#loc158)
            %17 = cir.ptr_stride(%16 : !cir.ptr<!s8i>, %15 : !u64i), !cir.ptr<!s8i> loc(#loc158)
            %18 = cir.load %17 : !cir.ptr<!s8i>, !s8i loc(#loc158)
            %19 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc159)
            %20 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc160)
            %21 = cir.ptr_stride(%19 : !cir.ptr<!s8i>, %20 : !u64i), !cir.ptr<!s8i> loc(#loc161)
            cir.store %18, %21 : !s8i, !cir.ptr<!s8i> loc(#loc292)
          } loc(#loc291)
          cir.yield loc(#loc149)
        } step {
          %15 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc163)
          %16 = cir.unary(inc, %15) : !u64i, !u64i loc(#loc164)
          cir.store %16, %3 : !u64i, !cir.ptr<!u64i> loc(#loc293)
          cir.yield loc(#loc287)
        } loc(#loc287)
      } loc(#loc287)
      %9 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc165)
      cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc166)
      %10 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc167)
      %11 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc168)
      %12 = cir.cast(bitcast, %11 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc168)
      cir.call @free(%12) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc167)
    } loc(#loc283)
    cir.return loc(#loc110)
  } loc(#loc270)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc295)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc173)
    cir.store %1, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc296)
    cir.scope {
      %2 = cir.get_global @staticFive : !cir.ptr<!s32i> loc(#loc229)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc177)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc178)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !cir.bool loc(#loc298)
      cir.if %5 {
        %6 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc180)
        %7 = cir.const #cir.int<10> : !s32i loc(#loc181)
        %8 = cir.const #cir.int<1> : !s32i loc(#loc182)
        %9 = cir.binop(add, %7, %8) nsw : !s32i loc(#loc181)
        %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc181)
        %11 = cir.const #cir.int<1> : !u64i loc(#loc300)
        %12 = cir.binop(mul, %10, %11) : !u64i loc(#loc301)
        %13 = cir.call @malloc(%12) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc180)
        %14 = cir.cast(bitcast, %13 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc302)
        cir.store %14, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc303)
        cir.scope {
          %15 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc190)
          %16 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc191)
          %17 = cir.cast(bitcast, %16 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc191)
          %18 = cir.cmp(eq, %15, %17) : !cir.ptr<!s8i>, !cir.bool loc(#loc305)
          cir.if %18 {
            %19 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc193)
            %20 = cir.const #cir.int<1> : !s32i loc(#loc194)
            %21 = cir.unary(minus, %20) : !s32i, !s32i loc(#loc195)
            cir.call @exit(%21) : (!s32i) -> () extra(#fn_attr) loc(#loc193)
          } loc(#loc306)
        } loc(#loc304)
      } loc(#loc299)
    } loc(#loc297)
    cir.scope {
      %2 = cir.alloca !cir.array<!s8i x 11>, !cir.ptr<!cir.array<!s8i x 11>>, ["source"] {alignment = 1 : i64} loc(#loc226)
      %3 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc308)
      %4 = cir.alloca !u64i, !cir.ptr<!u64i>, ["sourceLen"] {alignment = 8 : i64} loc(#loc309)
      %5 = cir.get_global @__const.goodG2B2.source : !cir.ptr<!cir.array<!s8i x 11>> loc(#loc226)
      cir.copy %5 to %2 : !cir.ptr<!cir.array<!s8i x 11>> loc(#loc226)
      %6 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc201)
      %7 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 11>>), !cir.ptr<!s8i> loc(#loc202)
      %8 = cir.call @strlen(%7) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc201)
      cir.store %8, %4 : !u64i, !cir.ptr<!u64i> loc(#loc310)
      cir.scope {
        %13 = cir.const #cir.int<0> : !s32i loc(#loc207)
        %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc207)
        cir.store %14, %3 : !u64i, !cir.ptr<!u64i> loc(#loc312)
        cir.for : cond {
          %15 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc209)
          %16 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc210)
          %17 = cir.const #cir.int<1> : !s32i loc(#loc211)
          %18 = cir.cast(integral, %17 : !s32i), !u64i loc(#loc211)
          %19 = cir.binop(add, %16, %18) : !u64i loc(#loc313)
          %20 = cir.cmp(lt, %15, %19) : !u64i, !cir.bool loc(#loc314)
          cir.condition(%20) loc(#loc212)
        } body {
          cir.scope {
            %15 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc214)
            %16 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 11>>), !cir.ptr<!s8i> loc(#loc215)
            %17 = cir.ptr_stride(%16 : !cir.ptr<!s8i>, %15 : !u64i), !cir.ptr<!s8i> loc(#loc215)
            %18 = cir.load %17 : !cir.ptr<!s8i>, !s8i loc(#loc215)
            %19 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc216)
            %20 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc217)
            %21 = cir.ptr_stride(%19 : !cir.ptr<!s8i>, %20 : !u64i), !cir.ptr<!s8i> loc(#loc218)
            cir.store %18, %21 : !s8i, !cir.ptr<!s8i> loc(#loc316)
          } loc(#loc315)
          cir.yield loc(#loc206)
        } step {
          %15 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc220)
          %16 = cir.unary(inc, %15) : !u64i, !u64i loc(#loc221)
          cir.store %16, %3 : !u64i, !cir.ptr<!u64i> loc(#loc317)
          cir.yield loc(#loc311)
        } loc(#loc311)
      } loc(#loc311)
      %9 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc222)
      cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc223)
      %10 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc224)
      %11 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc225)
      %12 = cir.cast(bitcast, %11 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc225)
      cir.call @free(%12) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc224)
    } loc(#loc307)
    cir.return loc(#loc170)
  } loc(#loc294)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":0:0)
#loc1 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":106:9)
#loc2 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":106:29)
#loc3 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":80:9)
#loc4 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":80:29)
#loc5 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":45:9)
#loc6 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":45:29)
#loc7 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":30:1)
#loc8 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":30:25)
#loc9 = loc("/usr/include/stdlib.h":672:1)
#loc10 = loc("/usr/include/stdlib.h":672:45)
#loc11 = loc("/usr/include/stdlib.h":756:1)
#loc12 = loc("/usr/include/stdlib.h":756:70)
#loc13 = loc("/usr/include/string.h":407:1)
#loc14 = loc("/usr/include/string.h":408:33)
#loc15 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc16 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc17 = loc("/usr/include/stdlib.h":687:1)
#loc18 = loc("/usr/include/stdlib.h":687:32)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":34:1)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":57:1)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":36:5)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":36:12)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":37:12)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":37:5)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":38:5)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":43:5)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":38:8)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":38:20)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":39:5)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":41:24)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":41:31)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":41:34)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":41:45)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":41:46)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":41:9)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":42:9)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":42:37)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":42:13)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":42:21)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":42:27)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":42:28)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":42:34)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":42:33)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":44:5)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":56:5)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":46:9)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":46:16)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":46:19)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":47:21)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":47:28)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":47:9)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":47:34)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":50:9)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":53:9)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":50:18)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":50:14)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":50:21)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":50:25)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":50:37)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":50:23)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":51:9)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":52:30)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":52:23)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":52:13)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":52:18)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":52:19)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":52:31)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":50:41)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":50:40)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":54:19)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":54:9)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":55:9)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":55:14)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":120:1)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":124:1)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":122:5)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":122:14)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":123:5)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":123:14)
#loc80 = loc("/usr/include/stdlib.h":575:1)
#loc81 = loc("/usr/include/stdlib.h":575:41)
#loc82 = loc("/usr/include/time.h":76:1)
#loc83 = loc("/usr/include/time.h":76:38)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":141:15)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":143:15)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":146:15)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":148:15)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":136:1)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":151:1)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":137:1)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":139:27)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":139:22)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":139:5)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":141:5)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":142:5)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":142:67)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":143:5)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":146:5)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":147:5)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":147:66)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":148:5)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":150:12)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":150:5)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":71:19)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":64:1)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":92:1)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":66:5)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":66:12)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":67:12)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":67:5)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":68:5)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":78:5)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":68:8)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":68:20)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":69:5)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":72:5)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":74:5)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":71:9)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":76:24)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":76:32)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":76:35)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":76:38)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":76:49)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":76:31)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":76:50)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":76:9)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":77:9)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":77:37)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":77:13)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":77:21)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":77:27)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":77:28)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":77:34)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":77:33)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":79:5)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":91:5)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":81:9)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":81:16)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":81:19)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":82:21)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":82:28)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":82:9)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":82:34)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":85:9)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":88:9)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":85:18)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":85:14)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":85:21)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":85:25)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":85:37)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":85:23)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":86:9)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":87:30)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":87:23)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":87:13)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":87:18)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":87:19)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":87:31)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":85:41)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":85:40)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":89:19)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":89:9)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":90:9)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":90:14)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":95:1)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":118:1)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":97:5)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":97:12)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":98:12)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":98:5)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":99:5)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":104:5)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":99:8)
#loc178 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":99:20)
#loc179 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":100:5)
#loc180 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":102:24)
#loc181 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":102:32)
#loc182 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":102:35)
#loc183 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":102:38)
#loc184 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":102:49)
#loc185 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":102:31)
#loc186 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":102:50)
#loc187 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":102:9)
#loc188 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":103:9)
#loc189 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":103:37)
#loc190 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":103:13)
#loc191 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":103:21)
#loc192 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":103:27)
#loc193 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":103:28)
#loc194 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":103:34)
#loc195 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":103:33)
#loc196 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":105:5)
#loc197 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":117:5)
#loc198 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":107:9)
#loc199 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":107:16)
#loc200 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":107:19)
#loc201 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":108:21)
#loc202 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":108:28)
#loc203 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":108:9)
#loc204 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":108:34)
#loc205 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":111:9)
#loc206 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":114:9)
#loc207 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":111:18)
#loc208 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":111:14)
#loc209 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":111:21)
#loc210 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":111:25)
#loc211 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":111:37)
#loc212 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":111:23)
#loc213 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":112:9)
#loc214 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":113:30)
#loc215 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":113:23)
#loc216 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":113:13)
#loc217 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":113:18)
#loc218 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":113:19)
#loc219 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":113:31)
#loc220 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":111:41)
#loc221 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":111:40)
#loc222 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":115:19)
#loc223 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":115:9)
#loc224 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":116:9)
#loc225 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c":116:14)
#loc226 = loc(fused[#loc1, #loc2])
#loc227 = loc(fused[#loc3, #loc4])
#loc228 = loc(fused[#loc5, #loc6])
#loc229 = loc(fused[#loc7, #loc8])
#loc230 = loc(fused[#loc9, #loc10])
#loc231 = loc(fused[#loc11, #loc12])
#loc232 = loc(fused[#loc13, #loc14])
#loc233 = loc(fused[#loc15, #loc16])
#loc234 = loc(fused[#loc17, #loc18])
#loc235 = loc(fused[#loc19, #loc20])
#loc236 = loc(fused[#loc21, #loc22])
#loc237 = loc(fused[#loc24, #loc23])
#loc238 = loc(fused[#loc25, #loc26])
#loc239 = loc(fused[#loc27, #loc28])
#loc240 = loc(fused[#loc29, #loc26])
#loc241 = loc(fused[#loc32, #loc33])
#loc242 = loc(fused[#loc31, #loc33])
#loc243 = loc(fused[#loc30, #loc34])
#loc244 = loc(fused[#loc35, #loc34])
#loc245 = loc(fused[#loc36, #loc37])
#loc246 = loc(fused[#loc38, #loc39])
#loc247 = loc(fused[#loc40, #loc37])
#loc248 = loc(fused[#loc44, #loc45])
#loc249 = loc(fused[#loc46, #loc47])
#loc250 = loc(fused[#loc46, #loc48])
#loc251 = loc(fused[#loc51, #loc52])
#loc252 = loc(fused[#loc53, #loc54])
#loc253 = loc(fused[#loc56, #loc55])
#loc254 = loc(fused[#loc58, #loc59])
#loc255 = loc(fused[#loc57, #loc59])
#loc256 = loc(fused[#loc61, #loc54])
#loc257 = loc(fused[#loc64, #loc67])
#loc258 = loc(fused[#loc69, #loc68])
#loc259 = loc(fused[#loc74, #loc75])
#loc260 = loc(fused[#loc76, #loc77])
#loc261 = loc(fused[#loc78, #loc79])
#loc262 = loc(fused[#loc80, #loc81])
#loc263 = loc(fused[#loc82, #loc83])
#loc264 = loc(fused[#loc88, #loc89])
#loc267 = loc(fused[#loc99, #loc100])
#loc268 = loc(fused[#loc103, #loc104])
#loc269 = loc(fused[#loc107, #loc106])
#loc270 = loc(fused[#loc109, #loc110])
#loc271 = loc(fused[#loc111, #loc112])
#loc272 = loc(fused[#loc114, #loc113])
#loc273 = loc(fused[#loc115, #loc116])
#loc274 = loc(fused[#loc117, #loc118])
#loc275 = loc(fused[#loc119, #loc120, #loc121, #loc116])
#loc276 = loc(fused[#loc126, #loc127])
#loc277 = loc(fused[#loc128, #loc127])
#loc278 = loc(fused[#loc123, #loc129])
#loc279 = loc(fused[#loc130, #loc129])
#loc280 = loc(fused[#loc131, #loc132])
#loc281 = loc(fused[#loc133, #loc134])
#loc282 = loc(fused[#loc135, #loc132])
#loc283 = loc(fused[#loc139, #loc140])
#loc284 = loc(fused[#loc141, #loc142])
#loc285 = loc(fused[#loc141, #loc143])
#loc286 = loc(fused[#loc146, #loc147])
#loc287 = loc(fused[#loc148, #loc149])
#loc288 = loc(fused[#loc151, #loc150])
#loc289 = loc(fused[#loc153, #loc154])
#loc290 = loc(fused[#loc152, #loc154])
#loc291 = loc(fused[#loc156, #loc149])
#loc292 = loc(fused[#loc159, #loc162])
#loc293 = loc(fused[#loc164, #loc163])
#loc294 = loc(fused[#loc169, #loc170])
#loc295 = loc(fused[#loc171, #loc172])
#loc296 = loc(fused[#loc174, #loc173])
#loc297 = loc(fused[#loc175, #loc176])
#loc298 = loc(fused[#loc177, #loc178])
#loc299 = loc(fused[#loc179, #loc176])
#loc300 = loc(fused[#loc183, #loc184])
#loc301 = loc(fused[#loc185, #loc184])
#loc302 = loc(fused[#loc180, #loc186])
#loc303 = loc(fused[#loc187, #loc186])
#loc304 = loc(fused[#loc188, #loc189])
#loc305 = loc(fused[#loc190, #loc191])
#loc306 = loc(fused[#loc192, #loc189])
#loc307 = loc(fused[#loc196, #loc197])
#loc308 = loc(fused[#loc198, #loc199])
#loc309 = loc(fused[#loc198, #loc200])
#loc310 = loc(fused[#loc203, #loc204])
#loc311 = loc(fused[#loc205, #loc206])
#loc312 = loc(fused[#loc208, #loc207])
#loc313 = loc(fused[#loc210, #loc211])
#loc314 = loc(fused[#loc209, #loc211])
#loc315 = loc(fused[#loc213, #loc206])
#loc316 = loc(fused[#loc216, #loc219])
#loc317 = loc(fused[#loc221, #loc220])
