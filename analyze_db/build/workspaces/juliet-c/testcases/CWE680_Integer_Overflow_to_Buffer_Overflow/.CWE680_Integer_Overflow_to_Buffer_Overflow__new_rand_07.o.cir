!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE680_Integer_Overflow_to_Buffer_Overflow/CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_07.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<270> = dense<32> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e", "dlti.endianness" = "little">} {
  cir.global "private" internal dsolocal @_ZL10staticFive = #cir.int<5> : !s32i {alignment = 4 : i64} loc(#loc163)
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc164)
  cir.func private @_Znam(!u64i) -> !cir.ptr<!void> loc(#loc165)
  cir.func private @printIntLine(!s32i) loc(#loc166)
  cir.func @_ZN55CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_073badEv() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc168)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc13)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc14)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc169)
    cir.scope {
      %3 = cir.get_global @_ZL10staticFive : !cir.ptr<!s32i> loc(#loc163)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc18)
      %5 = cir.const #cir.int<5> : !s32i loc(#loc19)
      %6 = cir.cmp(eq, %4, %5) : !s32i, !cir.bool loc(#loc171)
      cir.if %6 {
        %7 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc21)
        %8 = cir.const #cir.int<1> : !s32i loc(#loc21)
        %9 = cir.binop(and, %7, %8) : !s32i loc(#loc21)
        %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc21)
        %11 = cir.ternary(%10, true {
          %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc21)
          %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc21)
          %15 = cir.const #cir.int<30> : !s32i loc(#loc21)
          %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc21)
          %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc21)
          %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc21)
          %19 = cir.const #cir.int<15> : !s32i loc(#loc21)
          %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc21)
          %21 = cir.binop(xor, %16, %20) : !u32i loc(#loc21)
          %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc21)
          %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc21)
          %24 = cir.binop(xor, %21, %23) : !u32i loc(#loc21)
          cir.yield %24 : !u32i loc(#loc21)
        }, false {
          %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc21)
          %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc21)
          %15 = cir.const #cir.int<30> : !s32i loc(#loc21)
          %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc21)
          %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc21)
          %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc21)
          %19 = cir.const #cir.int<15> : !s32i loc(#loc21)
          %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc21)
          %21 = cir.binop(xor, %16, %20) : !u32i loc(#loc21)
          %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc21)
          %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc21)
          %24 = cir.binop(xor, %21, %23) : !u32i loc(#loc21)
          %25 = cir.unary(minus, %24) : !u32i, !u32i loc(#loc21)
          %26 = cir.const #cir.int<1> : !s32i loc(#loc21)
          %27 = cir.cast(integral, %26 : !s32i), !u32i loc(#loc21)
          %28 = cir.binop(sub, %25, %27) : !u32i loc(#loc21)
          cir.yield %28 : !u32i loc(#loc21)
        }) : (!cir.bool) -> !u32i loc(#loc21)
        %12 = cir.cast(integral, %11 : !u32i), !s32i loc(#loc21)
        cir.store %12, %0 : !s32i, !cir.ptr<!s32i> loc(#loc173)
      } loc(#loc172)
    } loc(#loc170)
    cir.scope {
      %3 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataBytes"] {alignment = 8 : i64} loc(#loc175)
      %4 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc176)
      %5 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["intPointer"] {alignment = 8 : i64} loc(#loc177)
      %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc30)
      %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc30)
      %8 = cir.const #cir.int<4> : !u64i loc(#loc178)
      %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc179)
      cir.store %9, %3 : !u64i, !cir.ptr<!u64i> loc(#loc180)
      %10 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc34)
      %11 = cir.call @_Znam(%10) : (!u64i) -> !cir.ptr<!void> loc(#loc35)
      %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc181)
      %13 = cir.cast(bitcast, %12 : !cir.ptr<!s8i>), !cir.ptr<!s32i> loc(#loc181)
      cir.store %13, %5 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc182)
      cir.scope {
        %19 = cir.const #cir.int<0> : !s32i loc(#loc41)
        %20 = cir.cast(integral, %19 : !s32i), !u64i loc(#loc41)
        cir.store %20, %4 : !u64i, !cir.ptr<!u64i> loc(#loc184)
        cir.for : cond {
          %21 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc43)
          %22 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc44)
          %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc44)
          %24 = cir.cmp(lt, %21, %23) : !u64i, !cir.bool loc(#loc185)
          cir.condition(%24) loc(#loc185)
        } body {
          cir.scope {
            %21 = cir.const #cir.int<0> : !s32i loc(#loc46)
            %22 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc47)
            %23 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc48)
            %24 = cir.ptr_stride(%22 : !cir.ptr<!s32i>, %23 : !u64i), !cir.ptr<!s32i> loc(#loc49)
            cir.store %21, %24 : !s32i, !cir.ptr<!s32i> loc(#loc187)
          } loc(#loc186)
          cir.yield loc(#loc40)
        } step {
          %21 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc50)
          %22 = cir.unary(inc, %21) : !u64i, !u64i loc(#loc51)
          cir.store %22, %4 : !u64i, !cir.ptr<!u64i> loc(#loc188)
          cir.yield loc(#loc183)
        } loc(#loc183)
      } loc(#loc183)
      %14 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc52)
      %15 = cir.const #cir.int<0> : !s32i loc(#loc53)
      %16 = cir.ptr_stride(%14 : !cir.ptr<!s32i>, %15 : !s32i), !cir.ptr<!s32i> loc(#loc54)
      %17 = cir.load %16 : !cir.ptr<!s32i>, !s32i loc(#loc52)
      cir.call @printIntLine(%17) : (!s32i) -> () loc(#loc55)
      %18 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc56)
      cir.delete.array %18 : <!s32i> loc(#loc56)
    } loc(#loc174)
    cir.return loc(#loc10)
  } loc(#loc167)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc189)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc59)
  cir.func internal private @_ZN55CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_07L8goodG2B1Ev() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc191)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc64)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc65)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc192)
    cir.scope {
      %3 = cir.get_global @_ZL10staticFive : !cir.ptr<!s32i> loc(#loc163)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc69)
      %5 = cir.const #cir.int<5> : !s32i loc(#loc70)
      %6 = cir.cmp(ne, %4, %5) : !s32i, !cir.bool loc(#loc194)
      cir.if %6 {
        %7 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc59)
        %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc59)
        cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc74)
      } else {
        %7 = cir.const #cir.int<20> : !s32i loc(#loc75)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc196)
      } loc(#loc195)
    } loc(#loc193)
    cir.scope {
      %3 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataBytes"] {alignment = 8 : i64} loc(#loc198)
      %4 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc199)
      %5 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["intPointer"] {alignment = 8 : i64} loc(#loc200)
      %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc84)
      %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc84)
      %8 = cir.const #cir.int<4> : !u64i loc(#loc201)
      %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc202)
      cir.store %9, %3 : !u64i, !cir.ptr<!u64i> loc(#loc203)
      %10 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc88)
      %11 = cir.call @_Znam(%10) : (!u64i) -> !cir.ptr<!void> loc(#loc89)
      %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc204)
      %13 = cir.cast(bitcast, %12 : !cir.ptr<!s8i>), !cir.ptr<!s32i> loc(#loc204)
      cir.store %13, %5 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc205)
      cir.scope {
        %19 = cir.const #cir.int<0> : !s32i loc(#loc95)
        %20 = cir.cast(integral, %19 : !s32i), !u64i loc(#loc95)
        cir.store %20, %4 : !u64i, !cir.ptr<!u64i> loc(#loc207)
        cir.for : cond {
          %21 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc97)
          %22 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc98)
          %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc98)
          %24 = cir.cmp(lt, %21, %23) : !u64i, !cir.bool loc(#loc208)
          cir.condition(%24) loc(#loc208)
        } body {
          cir.scope {
            %21 = cir.const #cir.int<0> : !s32i loc(#loc100)
            %22 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc101)
            %23 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc102)
            %24 = cir.ptr_stride(%22 : !cir.ptr<!s32i>, %23 : !u64i), !cir.ptr<!s32i> loc(#loc103)
            cir.store %21, %24 : !s32i, !cir.ptr<!s32i> loc(#loc210)
          } loc(#loc209)
          cir.yield loc(#loc94)
        } step {
          %21 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc104)
          %22 = cir.unary(inc, %21) : !u64i, !u64i loc(#loc105)
          cir.store %22, %4 : !u64i, !cir.ptr<!u64i> loc(#loc211)
          cir.yield loc(#loc206)
        } loc(#loc206)
      } loc(#loc206)
      %14 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc106)
      %15 = cir.const #cir.int<0> : !s32i loc(#loc107)
      %16 = cir.ptr_stride(%14 : !cir.ptr<!s32i>, %15 : !s32i), !cir.ptr<!s32i> loc(#loc108)
      %17 = cir.load %16 : !cir.ptr<!s32i>, !s32i loc(#loc106)
      cir.call @printIntLine(%17) : (!s32i) -> () loc(#loc109)
      %18 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc110)
      cir.delete.array %18 : <!s32i> loc(#loc110)
    } loc(#loc197)
    cir.return loc(#loc61)
  } loc(#loc190)
  cir.func internal private @_ZN55CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_07L8goodG2B2Ev() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc213)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc115)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc116)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc214)
    cir.scope {
      %3 = cir.get_global @_ZL10staticFive : !cir.ptr<!s32i> loc(#loc163)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc120)
      %5 = cir.const #cir.int<5> : !s32i loc(#loc121)
      %6 = cir.cmp(eq, %4, %5) : !s32i, !cir.bool loc(#loc216)
      cir.if %6 {
        %7 = cir.const #cir.int<20> : !s32i loc(#loc123)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc218)
      } loc(#loc217)
    } loc(#loc215)
    cir.scope {
      %3 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataBytes"] {alignment = 8 : i64} loc(#loc220)
      %4 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc221)
      %5 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["intPointer"] {alignment = 8 : i64} loc(#loc222)
      %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc132)
      %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc132)
      %8 = cir.const #cir.int<4> : !u64i loc(#loc223)
      %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc224)
      cir.store %9, %3 : !u64i, !cir.ptr<!u64i> loc(#loc225)
      %10 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc136)
      %11 = cir.call @_Znam(%10) : (!u64i) -> !cir.ptr<!void> loc(#loc137)
      %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc226)
      %13 = cir.cast(bitcast, %12 : !cir.ptr<!s8i>), !cir.ptr<!s32i> loc(#loc226)
      cir.store %13, %5 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc227)
      cir.scope {
        %19 = cir.const #cir.int<0> : !s32i loc(#loc143)
        %20 = cir.cast(integral, %19 : !s32i), !u64i loc(#loc143)
        cir.store %20, %4 : !u64i, !cir.ptr<!u64i> loc(#loc229)
        cir.for : cond {
          %21 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc145)
          %22 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc146)
          %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc146)
          %24 = cir.cmp(lt, %21, %23) : !u64i, !cir.bool loc(#loc230)
          cir.condition(%24) loc(#loc230)
        } body {
          cir.scope {
            %21 = cir.const #cir.int<0> : !s32i loc(#loc148)
            %22 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc149)
            %23 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc150)
            %24 = cir.ptr_stride(%22 : !cir.ptr<!s32i>, %23 : !u64i), !cir.ptr<!s32i> loc(#loc151)
            cir.store %21, %24 : !s32i, !cir.ptr<!s32i> loc(#loc232)
          } loc(#loc231)
          cir.yield loc(#loc142)
        } step {
          %21 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc152)
          %22 = cir.unary(inc, %21) : !u64i, !u64i loc(#loc153)
          cir.store %22, %4 : !u64i, !cir.ptr<!u64i> loc(#loc233)
          cir.yield loc(#loc228)
        } loc(#loc228)
      } loc(#loc228)
      %14 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc154)
      %15 = cir.const #cir.int<0> : !s32i loc(#loc155)
      %16 = cir.ptr_stride(%14 : !cir.ptr<!s32i>, %15 : !s32i), !cir.ptr<!s32i> loc(#loc156)
      %17 = cir.load %16 : !cir.ptr<!s32i>, !s32i loc(#loc154)
      cir.call @printIntLine(%17) : (!s32i) -> () loc(#loc157)
      %18 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc158)
      cir.delete.array %18 : <!s32i> loc(#loc158)
    } loc(#loc219)
    cir.return loc(#loc112)
  } loc(#loc212)
  cir.func @_ZN55CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_074goodEv() extra(#fn_attr1) {
    cir.call @_ZN55CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_07L8goodG2B1Ev() : () -> () loc(#loc161)
    cir.call @_ZN55CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_07L8goodG2B2Ev() : () -> () loc(#loc162)
    cir.return loc(#loc160)
  } loc(#loc234)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE680_Integer_Overflow_to_Buffer_Overflow/CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_07.cpp":0:0)
#loc1 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_07.cpp":22:1)
#loc2 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_07.cpp":22:25)
#loc3 = loc("/usr/include/stdlib.h":573:1)
#loc4 = loc("/usr/include/stdlib.h":573:24)
#loc5 = loc("/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/new":128:20)
#loc6 = loc("/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/new":129:41)
#loc7 = loc("../../testcasesupport/std_testcase_io.h":18:1)
#loc8 = loc("../../testcasesupport/std_testcase_io.h":18:33)
#loc9 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_07.cpp":29:1)
#loc10 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_07.cpp":52:1)
#loc11 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_07.cpp":31:5)
#loc12 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_07.cpp":31:9)
#loc13 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_07.cpp":33:13)
#loc14 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_07.cpp":33:12)
#loc15 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_07.cpp":33:5)
#loc16 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_07.cpp":34:5)
#loc17 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_07.cpp":38:5)
#loc18 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_07.cpp":34:8)
#loc19 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_07.cpp":34:20)
#loc20 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_07.cpp":35:5)
#loc21 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_07.cpp":37:16)
#loc22 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_07.cpp":37:9)
#loc23 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_07.cpp":39:5)
#loc24 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_07.cpp":51:5)
#loc25 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_07.cpp":40:9)
#loc26 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_07.cpp":40:16)
#loc27 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_07.cpp":40:26)
#loc28 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_07.cpp":41:9)
#loc29 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_07.cpp":41:14)
#loc30 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_07.cpp":43:21)
#loc31 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_07.cpp":43:28)
#loc32 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_07.cpp":43:38)
#loc33 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_07.cpp":43:9)
#loc34 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_07.cpp":44:37)
#loc35 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_07.cpp":29:6)
#loc36 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_07.cpp":44:28)
#loc37 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_07.cpp":44:46)
#loc38 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_07.cpp":44:9)
#loc39 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_07.cpp":45:9)
#loc40 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_07.cpp":48:9)
#loc41 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_07.cpp":45:18)
#loc42 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_07.cpp":45:14)
#loc43 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_07.cpp":45:21)
#loc44 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_07.cpp":45:33)
#loc45 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_07.cpp":46:9)
#loc46 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_07.cpp":47:29)
#loc47 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_07.cpp":47:13)
#loc48 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_07.cpp":47:24)
#loc49 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_07.cpp":47:25)
#loc50 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_07.cpp":45:40)
#loc51 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_07.cpp":45:39)
#loc52 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_07.cpp":49:22)
#loc53 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_07.cpp":49:33)
#loc54 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_07.cpp":49:34)
#loc55 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_07.cpp":49:9)
#loc56 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_07.cpp":50:19)
#loc57 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc58 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc59 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_07.cpp":67:19)
#loc60 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_07.cpp":59:1)
#loc61 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_07.cpp":87:1)
#loc62 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_07.cpp":61:5)
#loc63 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_07.cpp":61:9)
#loc64 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_07.cpp":63:13)
#loc65 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_07.cpp":63:12)
#loc66 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_07.cpp":63:5)
#loc67 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_07.cpp":64:5)
#loc68 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_07.cpp":73:5)
#loc69 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_07.cpp":64:8)
#loc70 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_07.cpp":64:20)
#loc71 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_07.cpp":65:5)
#loc72 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_07.cpp":68:5)
#loc73 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_07.cpp":70:5)
#loc74 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_07.cpp":67:9)
#loc75 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_07.cpp":72:16)
#loc76 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_07.cpp":72:9)
#loc77 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_07.cpp":74:5)
#loc78 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_07.cpp":86:5)
#loc79 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_07.cpp":75:9)
#loc80 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_07.cpp":75:16)
#loc81 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_07.cpp":75:26)
#loc82 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_07.cpp":76:9)
#loc83 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_07.cpp":76:14)
#loc84 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_07.cpp":78:21)
#loc85 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_07.cpp":78:28)
#loc86 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_07.cpp":78:38)
#loc87 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_07.cpp":78:9)
#loc88 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_07.cpp":79:37)
#loc89 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_07.cpp":59:13)
#loc90 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_07.cpp":79:28)
#loc91 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_07.cpp":79:46)
#loc92 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_07.cpp":79:9)
#loc93 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_07.cpp":80:9)
#loc94 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_07.cpp":83:9)
#loc95 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_07.cpp":80:18)
#loc96 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_07.cpp":80:14)
#loc97 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_07.cpp":80:21)
#loc98 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_07.cpp":80:33)
#loc99 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_07.cpp":81:9)
#loc100 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_07.cpp":82:29)
#loc101 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_07.cpp":82:13)
#loc102 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_07.cpp":82:24)
#loc103 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_07.cpp":82:25)
#loc104 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_07.cpp":80:40)
#loc105 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_07.cpp":80:39)
#loc106 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_07.cpp":84:22)
#loc107 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_07.cpp":84:33)
#loc108 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_07.cpp":84:34)
#loc109 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_07.cpp":84:9)
#loc110 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_07.cpp":85:19)
#loc111 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_07.cpp":90:1)
#loc112 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_07.cpp":113:1)
#loc113 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_07.cpp":92:5)
#loc114 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_07.cpp":92:9)
#loc115 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_07.cpp":94:13)
#loc116 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_07.cpp":94:12)
#loc117 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_07.cpp":94:5)
#loc118 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_07.cpp":95:5)
#loc119 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_07.cpp":99:5)
#loc120 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_07.cpp":95:8)
#loc121 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_07.cpp":95:20)
#loc122 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_07.cpp":96:5)
#loc123 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_07.cpp":98:16)
#loc124 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_07.cpp":98:9)
#loc125 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_07.cpp":100:5)
#loc126 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_07.cpp":112:5)
#loc127 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_07.cpp":101:9)
#loc128 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_07.cpp":101:16)
#loc129 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_07.cpp":101:26)
#loc130 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_07.cpp":102:9)
#loc131 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_07.cpp":102:14)
#loc132 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_07.cpp":104:21)
#loc133 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_07.cpp":104:28)
#loc134 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_07.cpp":104:38)
#loc135 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_07.cpp":104:9)
#loc136 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_07.cpp":105:37)
#loc137 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_07.cpp":90:13)
#loc138 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_07.cpp":105:28)
#loc139 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_07.cpp":105:46)
#loc140 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_07.cpp":105:9)
#loc141 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_07.cpp":106:9)
#loc142 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_07.cpp":109:9)
#loc143 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_07.cpp":106:18)
#loc144 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_07.cpp":106:14)
#loc145 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_07.cpp":106:21)
#loc146 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_07.cpp":106:33)
#loc147 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_07.cpp":107:9)
#loc148 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_07.cpp":108:29)
#loc149 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_07.cpp":108:13)
#loc150 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_07.cpp":108:24)
#loc151 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_07.cpp":108:25)
#loc152 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_07.cpp":106:40)
#loc153 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_07.cpp":106:39)
#loc154 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_07.cpp":110:22)
#loc155 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_07.cpp":110:33)
#loc156 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_07.cpp":110:34)
#loc157 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_07.cpp":110:9)
#loc158 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_07.cpp":111:19)
#loc159 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_07.cpp":115:1)
#loc160 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_07.cpp":119:1)
#loc161 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_07.cpp":117:5)
#loc162 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_07.cpp":118:5)
#loc163 = loc(fused[#loc1, #loc2])
#loc164 = loc(fused[#loc3, #loc4])
#loc165 = loc(fused[#loc5, #loc6])
#loc166 = loc(fused[#loc7, #loc8])
#loc167 = loc(fused[#loc9, #loc10])
#loc168 = loc(fused[#loc11, #loc12])
#loc169 = loc(fused[#loc15, #loc13])
#loc170 = loc(fused[#loc16, #loc17])
#loc171 = loc(fused[#loc18, #loc19])
#loc172 = loc(fused[#loc20, #loc17])
#loc173 = loc(fused[#loc22, #loc21])
#loc174 = loc(fused[#loc23, #loc24])
#loc175 = loc(fused[#loc25, #loc26])
#loc176 = loc(fused[#loc25, #loc27])
#loc177 = loc(fused[#loc28, #loc29])
#loc178 = loc(fused[#loc31, #loc32])
#loc179 = loc(fused[#loc30, #loc32])
#loc180 = loc(fused[#loc33, #loc32])
#loc181 = loc(fused[#loc36, #loc37])
#loc182 = loc(fused[#loc38, #loc37])
#loc183 = loc(fused[#loc39, #loc40])
#loc184 = loc(fused[#loc42, #loc41])
#loc185 = loc(fused[#loc43, #loc44])
#loc186 = loc(fused[#loc45, #loc40])
#loc187 = loc(fused[#loc47, #loc46])
#loc188 = loc(fused[#loc51, #loc50])
#loc189 = loc(fused[#loc57, #loc58])
#loc190 = loc(fused[#loc60, #loc61])
#loc191 = loc(fused[#loc62, #loc63])
#loc192 = loc(fused[#loc66, #loc64])
#loc193 = loc(fused[#loc67, #loc68])
#loc194 = loc(fused[#loc69, #loc70])
#loc195 = loc(fused[#loc71, #loc72, #loc73, #loc68])
#loc196 = loc(fused[#loc76, #loc75])
#loc197 = loc(fused[#loc77, #loc78])
#loc198 = loc(fused[#loc79, #loc80])
#loc199 = loc(fused[#loc79, #loc81])
#loc200 = loc(fused[#loc82, #loc83])
#loc201 = loc(fused[#loc85, #loc86])
#loc202 = loc(fused[#loc84, #loc86])
#loc203 = loc(fused[#loc87, #loc86])
#loc204 = loc(fused[#loc90, #loc91])
#loc205 = loc(fused[#loc92, #loc91])
#loc206 = loc(fused[#loc93, #loc94])
#loc207 = loc(fused[#loc96, #loc95])
#loc208 = loc(fused[#loc97, #loc98])
#loc209 = loc(fused[#loc99, #loc94])
#loc210 = loc(fused[#loc101, #loc100])
#loc211 = loc(fused[#loc105, #loc104])
#loc212 = loc(fused[#loc111, #loc112])
#loc213 = loc(fused[#loc113, #loc114])
#loc214 = loc(fused[#loc117, #loc115])
#loc215 = loc(fused[#loc118, #loc119])
#loc216 = loc(fused[#loc120, #loc121])
#loc217 = loc(fused[#loc122, #loc119])
#loc218 = loc(fused[#loc124, #loc123])
#loc219 = loc(fused[#loc125, #loc126])
#loc220 = loc(fused[#loc127, #loc128])
#loc221 = loc(fused[#loc127, #loc129])
#loc222 = loc(fused[#loc130, #loc131])
#loc223 = loc(fused[#loc133, #loc134])
#loc224 = loc(fused[#loc132, #loc134])
#loc225 = loc(fused[#loc135, #loc134])
#loc226 = loc(fused[#loc138, #loc139])
#loc227 = loc(fused[#loc140, #loc139])
#loc228 = loc(fused[#loc141, #loc142])
#loc229 = loc(fused[#loc144, #loc143])
#loc230 = loc(fused[#loc145, #loc146])
#loc231 = loc(fused[#loc147, #loc142])
#loc232 = loc(fused[#loc149, #loc148])
#loc233 = loc(fused[#loc153, #loc152])
#loc234 = loc(fused[#loc159, #loc160])
