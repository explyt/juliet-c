!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc5 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_42.c":22:26)
#loc6 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_42.c":22:34)
#loc8 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_42.c":25:21)
#loc39 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_42.c":66:30)
#loc40 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_42.c":66:38)
#loc42 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_42.c":69:21)
#loc74 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_42.c":46:30)
#loc75 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_42.c":46:38)
#loc101 = loc(fused[#loc5, #loc6])
#loc115 = loc(fused[#loc39, #loc40])
#loc128 = loc(fused[#loc74, #loc75])
module @"/workspaces/juliet-c/testcases/CWE191_Integer_Underflow/s02/CWE191_Integer_Underflow__int64_t_rand_sub_42.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e">} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc99)
  cir.func internal private @badSource(%arg0: !s64i loc(fused[#loc5, #loc6])) -> !s64i extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data", init] {alignment = 8 : i64} loc(#loc101)
    %1 = cir.alloca !s64i, !cir.ptr<!s64i>, ["__retval"] {alignment = 8 : i64} loc(#loc4)
    cir.store %arg0, %0 : !s64i, !cir.ptr<!s64i> loc(#loc7)
    %2 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc8)
    %4 = cir.binop(and, %2, %3) : !s32i loc(#loc8)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc8)
    cir.brcond %5 ^bb1, ^bb2 loc(#loc8)
  ^bb1:  // pred: ^bb0
    %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
    %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc8)
    %8 = cir.const #cir.int<60> : !s32i loc(#loc8)
    %9 = cir.shift(left, %7 : !u64i, %8 : !s32i) -> !u64i loc(#loc8)
    %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
    %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc8)
    %12 = cir.const #cir.int<45> : !s32i loc(#loc8)
    %13 = cir.shift(left, %11 : !u64i, %12 : !s32i) -> !u64i loc(#loc8)
    %14 = cir.binop(xor, %9, %13) : !u64i loc(#loc8)
    %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
    %16 = cir.cast(integral, %15 : !s32i), !u64i loc(#loc8)
    %17 = cir.const #cir.int<30> : !s32i loc(#loc8)
    %18 = cir.shift(left, %16 : !u64i, %17 : !s32i) -> !u64i loc(#loc8)
    %19 = cir.binop(xor, %14, %18) : !u64i loc(#loc8)
    %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
    %21 = cir.cast(integral, %20 : !s32i), !u64i loc(#loc8)
    %22 = cir.const #cir.int<15> : !s32i loc(#loc8)
    %23 = cir.shift(left, %21 : !u64i, %22 : !s32i) -> !u64i loc(#loc8)
    %24 = cir.binop(xor, %19, %23) : !u64i loc(#loc8)
    %25 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
    %26 = cir.cast(integral, %25 : !s32i), !u64i loc(#loc8)
    %27 = cir.binop(xor, %24, %26) : !u64i loc(#loc8)
    cir.br ^bb3(%27 : !u64i) loc(#loc8)
  ^bb2:  // pred: ^bb0
    %28 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
    %29 = cir.cast(integral, %28 : !s32i), !u64i loc(#loc8)
    %30 = cir.const #cir.int<60> : !s32i loc(#loc8)
    %31 = cir.shift(left, %29 : !u64i, %30 : !s32i) -> !u64i loc(#loc8)
    %32 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
    %33 = cir.cast(integral, %32 : !s32i), !u64i loc(#loc8)
    %34 = cir.const #cir.int<45> : !s32i loc(#loc8)
    %35 = cir.shift(left, %33 : !u64i, %34 : !s32i) -> !u64i loc(#loc8)
    %36 = cir.binop(xor, %31, %35) : !u64i loc(#loc8)
    %37 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
    %38 = cir.cast(integral, %37 : !s32i), !u64i loc(#loc8)
    %39 = cir.const #cir.int<30> : !s32i loc(#loc8)
    %40 = cir.shift(left, %38 : !u64i, %39 : !s32i) -> !u64i loc(#loc8)
    %41 = cir.binop(xor, %36, %40) : !u64i loc(#loc8)
    %42 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
    %43 = cir.cast(integral, %42 : !s32i), !u64i loc(#loc8)
    %44 = cir.const #cir.int<15> : !s32i loc(#loc8)
    %45 = cir.shift(left, %43 : !u64i, %44 : !s32i) -> !u64i loc(#loc8)
    %46 = cir.binop(xor, %41, %45) : !u64i loc(#loc8)
    %47 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
    %48 = cir.cast(integral, %47 : !s32i), !u64i loc(#loc8)
    %49 = cir.binop(xor, %46, %48) : !u64i loc(#loc8)
    %50 = cir.unary(minus, %49) : !u64i, !u64i loc(#loc8)
    %51 = cir.const #cir.int<1> : !s32i loc(#loc8)
    %52 = cir.cast(integral, %51 : !s32i), !u64i loc(#loc8)
    %53 = cir.binop(sub, %50, %52) : !u64i loc(#loc8)
    cir.br ^bb3(%53 : !u64i) loc(#loc8)
  ^bb3(%54: !u64i loc("CWE191_Integer_Underflow__int64_t_rand_sub_42.c":25:21)):  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc8)
  ^bb4:  // pred: ^bb3
    %55 = cir.cast(integral, %54 : !u64i), !s64i loc(#loc8)
    cir.store %55, %0 : !s64i, !cir.ptr<!s64i> loc(#loc102)
    %56 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc10)
    cir.store %56, %1 : !s64i, !cir.ptr<!s64i> loc(#loc103)
    %57 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc103)
    cir.return %57 : !s64i loc(#loc103)
  } loc(#loc100)
  cir.func private @printLongLongLine(!s64i) loc(#loc104)
  cir.func no_proto @CWE191_Integer_Underflow__int64_t_rand_sub_42_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc106)
    %1 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc107)
    %2 = cir.const #cir.int<0> : !s64i loc(#loc20)
    cir.store %2, %1 : !s64i, !cir.ptr<!s64i> loc(#loc108)
    %3 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc22)
    %4 = cir.call @badSource(%3) : (!s64i) -> !s64i loc(#loc23)
    cir.store %4, %1 : !s64i, !cir.ptr<!s64i> loc(#loc109)
    cir.br ^bb1 loc(#loc110)
  ^bb1:  // pred: ^bb0
    %5 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc28)
    %6 = cir.const #cir.int<1> : !s32i loc(#loc17)
    %7 = cir.cast(integral, %6 : !s32i), !s64i loc(#loc17)
    %8 = cir.binop(sub, %5, %7) nsw : !s64i loc(#loc28)
    cir.store %8, %0 : !s64i, !cir.ptr<!s64i> loc(#loc106)
    %9 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc29)
    cir.call @printLongLongLine(%9) : (!s64i) -> () loc(#loc30)
    cir.br ^bb2 loc(#loc27)
  ^bb2:  // pred: ^bb1
    cir.return loc(#loc15)
  } loc(#loc105)
  cir.func no_proto @CWE191_Integer_Underflow__int64_t_rand_sub_42_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc112)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc33)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc113)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc35)
    cir.return loc(#loc32)
  } loc(#loc111)
  cir.func internal private @goodB2GSource(%arg0: !s64i loc(fused[#loc39, #loc40])) -> !s64i extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data", init] {alignment = 8 : i64} loc(#loc115)
    %1 = cir.alloca !s64i, !cir.ptr<!s64i>, ["__retval"] {alignment = 8 : i64} loc(#loc38)
    cir.store %arg0, %0 : !s64i, !cir.ptr<!s64i> loc(#loc41)
    %2 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc42)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc42)
    %4 = cir.binop(and, %2, %3) : !s32i loc(#loc42)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc42)
    cir.brcond %5 ^bb1, ^bb2 loc(#loc42)
  ^bb1:  // pred: ^bb0
    %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc42)
    %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc42)
    %8 = cir.const #cir.int<60> : !s32i loc(#loc42)
    %9 = cir.shift(left, %7 : !u64i, %8 : !s32i) -> !u64i loc(#loc42)
    %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc42)
    %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc42)
    %12 = cir.const #cir.int<45> : !s32i loc(#loc42)
    %13 = cir.shift(left, %11 : !u64i, %12 : !s32i) -> !u64i loc(#loc42)
    %14 = cir.binop(xor, %9, %13) : !u64i loc(#loc42)
    %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc42)
    %16 = cir.cast(integral, %15 : !s32i), !u64i loc(#loc42)
    %17 = cir.const #cir.int<30> : !s32i loc(#loc42)
    %18 = cir.shift(left, %16 : !u64i, %17 : !s32i) -> !u64i loc(#loc42)
    %19 = cir.binop(xor, %14, %18) : !u64i loc(#loc42)
    %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc42)
    %21 = cir.cast(integral, %20 : !s32i), !u64i loc(#loc42)
    %22 = cir.const #cir.int<15> : !s32i loc(#loc42)
    %23 = cir.shift(left, %21 : !u64i, %22 : !s32i) -> !u64i loc(#loc42)
    %24 = cir.binop(xor, %19, %23) : !u64i loc(#loc42)
    %25 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc42)
    %26 = cir.cast(integral, %25 : !s32i), !u64i loc(#loc42)
    %27 = cir.binop(xor, %24, %26) : !u64i loc(#loc42)
    cir.br ^bb3(%27 : !u64i) loc(#loc42)
  ^bb2:  // pred: ^bb0
    %28 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc42)
    %29 = cir.cast(integral, %28 : !s32i), !u64i loc(#loc42)
    %30 = cir.const #cir.int<60> : !s32i loc(#loc42)
    %31 = cir.shift(left, %29 : !u64i, %30 : !s32i) -> !u64i loc(#loc42)
    %32 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc42)
    %33 = cir.cast(integral, %32 : !s32i), !u64i loc(#loc42)
    %34 = cir.const #cir.int<45> : !s32i loc(#loc42)
    %35 = cir.shift(left, %33 : !u64i, %34 : !s32i) -> !u64i loc(#loc42)
    %36 = cir.binop(xor, %31, %35) : !u64i loc(#loc42)
    %37 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc42)
    %38 = cir.cast(integral, %37 : !s32i), !u64i loc(#loc42)
    %39 = cir.const #cir.int<30> : !s32i loc(#loc42)
    %40 = cir.shift(left, %38 : !u64i, %39 : !s32i) -> !u64i loc(#loc42)
    %41 = cir.binop(xor, %36, %40) : !u64i loc(#loc42)
    %42 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc42)
    %43 = cir.cast(integral, %42 : !s32i), !u64i loc(#loc42)
    %44 = cir.const #cir.int<15> : !s32i loc(#loc42)
    %45 = cir.shift(left, %43 : !u64i, %44 : !s32i) -> !u64i loc(#loc42)
    %46 = cir.binop(xor, %41, %45) : !u64i loc(#loc42)
    %47 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc42)
    %48 = cir.cast(integral, %47 : !s32i), !u64i loc(#loc42)
    %49 = cir.binop(xor, %46, %48) : !u64i loc(#loc42)
    %50 = cir.unary(minus, %49) : !u64i, !u64i loc(#loc42)
    %51 = cir.const #cir.int<1> : !s32i loc(#loc42)
    %52 = cir.cast(integral, %51 : !s32i), !u64i loc(#loc42)
    %53 = cir.binop(sub, %50, %52) : !u64i loc(#loc42)
    cir.br ^bb3(%53 : !u64i) loc(#loc42)
  ^bb3(%54: !u64i loc("CWE191_Integer_Underflow__int64_t_rand_sub_42.c":69:21)):  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc42)
  ^bb4:  // pred: ^bb3
    %55 = cir.cast(integral, %54 : !u64i), !s64i loc(#loc42)
    cir.store %55, %0 : !s64i, !cir.ptr<!s64i> loc(#loc116)
    %56 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc44)
    cir.store %56, %1 : !s64i, !cir.ptr<!s64i> loc(#loc117)
    %57 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc117)
    cir.return %57 : !s64i loc(#loc117)
  } loc(#loc114)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc118)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data value is too large to perform subtraction.\00" : !cir.array<!s8i x 48>> : !cir.array<!s8i x 48> {alignment = 1 : i64} loc(#loc48)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc120)
    %1 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc121)
    %2 = cir.const #cir.int<0> : !s64i loc(#loc55)
    cir.store %2, %1 : !s64i, !cir.ptr<!s64i> loc(#loc122)
    %3 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc57)
    %4 = cir.call @goodB2GSource(%3) : (!s64i) -> !s64i loc(#loc58)
    cir.store %4, %1 : !s64i, !cir.ptr<!s64i> loc(#loc123)
    cir.br ^bb1 loc(#loc124)
  ^bb1:  // pred: ^bb0
    %5 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc63)
    %6 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc64)
    %7 = cir.unary(minus, %6) nsw : !s64i, !s64i loc(#loc64)
    %8 = cir.const #cir.int<1> : !s64i loc(#loc64)
    %9 = cir.binop(sub, %7, %8) nsw : !s64i loc(#loc64)
    %10 = cir.cmp(gt, %5, %9) : !s64i, !cir.bool loc(#loc125)
    cir.brcond %10 ^bb2, ^bb3 loc(#loc126)
  ^bb2:  // pred: ^bb1
    %11 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc68)
    %12 = cir.const #cir.int<1> : !s32i loc(#loc52)
    %13 = cir.cast(integral, %12 : !s32i), !s64i loc(#loc52)
    %14 = cir.binop(sub, %11, %13) nsw : !s64i loc(#loc68)
    cir.store %14, %0 : !s64i, !cir.ptr<!s64i> loc(#loc120)
    %15 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc69)
    cir.call @printLongLongLine(%15) : (!s64i) -> () loc(#loc70)
    cir.br ^bb4 loc(#loc66)
  ^bb3:  // pred: ^bb1
    %16 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 48>> loc(#loc48)
    %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 48>>), !cir.ptr<!s8i> loc(#loc48)
    cir.call @printLine(%17) : (!cir.ptr<!s8i>) -> () loc(#loc71)
    cir.br ^bb4 loc(#loc62)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc62)
  ^bb5:  // pred: ^bb4
    cir.return loc(#loc50)
  } loc(#loc119)
  cir.func internal private @goodG2BSource(%arg0: !s64i loc(fused[#loc74, #loc75])) -> !s64i extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data", init] {alignment = 8 : i64} loc(#loc128)
    %1 = cir.alloca !s64i, !cir.ptr<!s64i>, ["__retval"] {alignment = 8 : i64} loc(#loc73)
    cir.store %arg0, %0 : !s64i, !cir.ptr<!s64i> loc(#loc76)
    %2 = cir.const #cir.int<2> : !s32i loc(#loc77)
    %3 = cir.unary(minus, %2) nsw : !s32i, !s32i loc(#loc78)
    %4 = cir.cast(integral, %3 : !s32i), !s64i loc(#loc78)
    cir.store %4, %0 : !s64i, !cir.ptr<!s64i> loc(#loc129)
    %5 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc80)
    cir.store %5, %1 : !s64i, !cir.ptr<!s64i> loc(#loc130)
    %6 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc130)
    cir.return %6 : !s64i loc(#loc130)
  } loc(#loc127)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc132)
    %1 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc133)
    %2 = cir.const #cir.int<0> : !s64i loc(#loc88)
    cir.store %2, %1 : !s64i, !cir.ptr<!s64i> loc(#loc134)
    %3 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc90)
    %4 = cir.call @goodG2BSource(%3) : (!s64i) -> !s64i loc(#loc91)
    cir.store %4, %1 : !s64i, !cir.ptr<!s64i> loc(#loc135)
    cir.br ^bb1 loc(#loc136)
  ^bb1:  // pred: ^bb0
    %5 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc96)
    %6 = cir.const #cir.int<1> : !s32i loc(#loc85)
    %7 = cir.cast(integral, %6 : !s32i), !s64i loc(#loc85)
    %8 = cir.binop(sub, %5, %7) nsw : !s64i loc(#loc96)
    cir.store %8, %0 : !s64i, !cir.ptr<!s64i> loc(#loc132)
    %9 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc97)
    cir.call @printLongLongLine(%9) : (!s64i) -> () loc(#loc98)
    cir.br ^bb2 loc(#loc95)
  ^bb2:  // pred: ^bb1
    cir.return loc(#loc83)
  } loc(#loc131)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE191_Integer_Underflow/s02/CWE191_Integer_Underflow__int64_t_rand_sub_42.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_42.c":22:1)
#loc4 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_42.c":27:1)
#loc7 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_42.c":23:1)
#loc9 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_42.c":25:5)
#loc10 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_42.c":26:12)
#loc11 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_42.c":26:5)
#loc12 = loc("../../../testcasesupport/std_testcase_io.h":26:1)
#loc13 = loc("../../../testcasesupport/std_testcase_io.h":26:49)
#loc14 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_42.c":29:1)
#loc15 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_42.c":39:1)
#loc16 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_42.c":36:9)
#loc17 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_42.c":36:33)
#loc18 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_42.c":31:5)
#loc19 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_42.c":31:13)
#loc20 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_42.c":32:12)
#loc21 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_42.c":32:5)
#loc22 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_42.c":33:22)
#loc23 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_42.c":33:12)
#loc24 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_42.c":33:5)
#loc25 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_42.c":33:26)
#loc26 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_42.c":34:5)
#loc27 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_42.c":38:5)
#loc28 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_42.c":36:26)
#loc29 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_42.c":37:27)
#loc30 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_42.c":37:9)
#loc31 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_42.c":90:1)
#loc32 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_42.c":94:1)
#loc33 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_42.c":92:5)
#loc34 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_42.c":92:13)
#loc35 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_42.c":93:5)
#loc36 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_42.c":93:13)
#loc37 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_42.c":66:1)
#loc38 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_42.c":71:1)
#loc41 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_42.c":67:1)
#loc43 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_42.c":69:5)
#loc44 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_42.c":70:12)
#loc45 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_42.c":70:5)
#loc46 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc47 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc48 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_42.c":86:19)
#loc49 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_42.c":73:1)
#loc50 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_42.c":88:1)
#loc51 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_42.c":81:9)
#loc52 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_42.c":81:33)
#loc53 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_42.c":75:5)
#loc54 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_42.c":75:13)
#loc55 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_42.c":76:12)
#loc56 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_42.c":76:5)
#loc57 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_42.c":77:26)
#loc58 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_42.c":77:12)
#loc59 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_42.c":77:5)
#loc60 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_42.c":77:30)
#loc61 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_42.c":79:5)
#loc62 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_42.c":87:5)
#loc63 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_42.c":79:9)
#loc64 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_42.c":79:16)
#loc65 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_42.c":80:5)
#loc66 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_42.c":83:5)
#loc67 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_42.c":85:5)
#loc68 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_42.c":81:26)
#loc69 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_42.c":82:27)
#loc70 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_42.c":82:9)
#loc71 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_42.c":86:9)
#loc72 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_42.c":46:1)
#loc73 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_42.c":51:1)
#loc76 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_42.c":47:1)
#loc77 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_42.c":49:13)
#loc78 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_42.c":49:12)
#loc79 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_42.c":49:5)
#loc80 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_42.c":50:12)
#loc81 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_42.c":50:5)
#loc82 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_42.c":53:1)
#loc83 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_42.c":63:1)
#loc84 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_42.c":60:9)
#loc85 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_42.c":60:33)
#loc86 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_42.c":55:5)
#loc87 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_42.c":55:13)
#loc88 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_42.c":56:12)
#loc89 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_42.c":56:5)
#loc90 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_42.c":57:26)
#loc91 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_42.c":57:12)
#loc92 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_42.c":57:5)
#loc93 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_42.c":57:30)
#loc94 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_42.c":58:5)
#loc95 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_42.c":62:5)
#loc96 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_42.c":60:26)
#loc97 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_42.c":61:27)
#loc98 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_42.c":61:9)
#loc99 = loc(fused[#loc1, #loc2])
#loc100 = loc(fused[#loc3, #loc4])
#loc102 = loc(fused[#loc9, #loc8])
#loc103 = loc(fused[#loc11, #loc10])
#loc104 = loc(fused[#loc12, #loc13])
#loc105 = loc(fused[#loc14, #loc15])
#loc106 = loc(fused[#loc16, #loc17])
#loc107 = loc(fused[#loc18, #loc19])
#loc108 = loc(fused[#loc21, #loc20])
#loc109 = loc(fused[#loc24, #loc25])
#loc110 = loc(fused[#loc26, #loc27])
#loc111 = loc(fused[#loc31, #loc32])
#loc112 = loc(fused[#loc33, #loc34])
#loc113 = loc(fused[#loc35, #loc36])
#loc114 = loc(fused[#loc37, #loc38])
#loc116 = loc(fused[#loc43, #loc42])
#loc117 = loc(fused[#loc45, #loc44])
#loc118 = loc(fused[#loc46, #loc47])
#loc119 = loc(fused[#loc49, #loc50])
#loc120 = loc(fused[#loc51, #loc52])
#loc121 = loc(fused[#loc53, #loc54])
#loc122 = loc(fused[#loc56, #loc55])
#loc123 = loc(fused[#loc59, #loc60])
#loc124 = loc(fused[#loc61, #loc62])
#loc125 = loc(fused[#loc63, #loc64])
#loc126 = loc(fused[#loc65, #loc66, #loc67, #loc62])
#loc127 = loc(fused[#loc72, #loc73])
#loc129 = loc(fused[#loc79, #loc77])
#loc130 = loc(fused[#loc81, #loc80])
#loc131 = loc(fused[#loc82, #loc83])
#loc132 = loc(fused[#loc84, #loc85])
#loc133 = loc(fused[#loc86, #loc87])
#loc134 = loc(fused[#loc89, #loc88])
#loc135 = loc(fused[#loc92, #loc93])
#loc136 = loc(fused[#loc94, #loc95])
