!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__char_11.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<270> = dense<32> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func no_proto private @globalReturnsTrue(...) -> !s32i loc(#loc82)
  cir.func private @printIntLine(!s32i) loc(#loc83)
  cir.func no_proto @CWE843_Type_Confusion__char_11_bad() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc85)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc9)
    cir.store %1, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc86)
    cir.scope {
      %5 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc88)
      %6 = cir.cast(bitcast, %5 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc88)
      %7 = cir.call %6() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc13)
      %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc13)
      cir.if %8 {
        cir.scope {
          %9 = cir.alloca !s8i, !cir.ptr<!s8i>, ["charBuffer", init] {alignment = 1 : i64} loc(#loc91)
          %10 = cir.const #cir.int<97> : !s32i loc(#loc19)
          %11 = cir.cast(integral, %10 : !s32i), !s8i loc(#loc19)
          cir.store %11, %9 : !s8i, !cir.ptr<!s8i> loc(#loc91)
          %12 = cir.cast(bitcast, %9 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc92)
          cir.store %12, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc93)
        } loc(#loc90)
      } loc(#loc89)
    } loc(#loc87)
    %2 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc23)
    %3 = cir.cast(bitcast, %2 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc23)
    %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc24)
    cir.call @printIntLine(%4) : (!s32i) -> () loc(#loc25)
    cir.return loc(#loc6)
  } loc(#loc84)
  cir.func no_proto @CWE843_Type_Confusion__char_11_good() extra(#fn_attr) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<()>> loc(#loc95)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc28)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<()>> loc(#loc96)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc30)
    cir.return loc(#loc27)
  } loc(#loc94)
  cir.func no_proto private @globalReturnsFalse(...) -> !s32i loc(#loc97)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc98)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc36)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc100)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc41)
    cir.store %1, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc101)
    cir.scope {
      %5 = cir.get_global @globalReturnsFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc103)
      %6 = cir.cast(bitcast, %5 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc103)
      %7 = cir.call %6() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc45)
      %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc45)
      cir.if %8 {
        %9 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc36)
        %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc36)
        cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc50)
      } else {
        cir.scope {
          %9 = cir.alloca !s32i, !cir.ptr<!s32i>, ["intBuffer", init] {alignment = 4 : i64} loc(#loc106)
          %10 = cir.const #cir.int<8> : !s32i loc(#loc54)
          cir.store %10, %9 : !s32i, !cir.ptr<!s32i> loc(#loc106)
          %11 = cir.cast(bitcast, %9 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc107)
          cir.store %11, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc108)
        } loc(#loc105)
      } loc(#loc104)
    } loc(#loc102)
    %2 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc58)
    %3 = cir.cast(bitcast, %2 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc58)
    %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc59)
    cir.call @printIntLine(%4) : (!s32i) -> () loc(#loc60)
    cir.return loc(#loc38)
  } loc(#loc99)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc110)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc65)
    cir.store %1, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc111)
    cir.scope {
      %5 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc113)
      %6 = cir.cast(bitcast, %5 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc113)
      %7 = cir.call %6() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc69)
      %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc69)
      cir.if %8 {
        cir.scope {
          %9 = cir.alloca !s32i, !cir.ptr<!s32i>, ["intBuffer", init] {alignment = 4 : i64} loc(#loc116)
          %10 = cir.const #cir.int<8> : !s32i loc(#loc75)
          cir.store %10, %9 : !s32i, !cir.ptr<!s32i> loc(#loc116)
          %11 = cir.cast(bitcast, %9 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc117)
          cir.store %11, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc118)
        } loc(#loc115)
      } loc(#loc114)
    } loc(#loc112)
    %2 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc79)
    %3 = cir.cast(bitcast, %2 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc79)
    %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc80)
    cir.call @printIntLine(%4) : (!s32i) -> () loc(#loc81)
    cir.return loc(#loc62)
  } loc(#loc109)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__char_11.c":0:0)
#loc1 = loc("../../testcasesupport/std_testcase_io.h":48:1)
#loc2 = loc("../../testcasesupport/std_testcase_io.h":48:23)
#loc3 = loc("../../testcasesupport/std_testcase_io.h":18:1)
#loc4 = loc("../../testcasesupport/std_testcase_io.h":18:33)
#loc5 = loc("CWE843_Type_Confusion__char_11.c":21:1)
#loc6 = loc("CWE843_Type_Confusion__char_11.c":36:1)
#loc7 = loc("CWE843_Type_Confusion__char_11.c":23:5)
#loc8 = loc("CWE843_Type_Confusion__char_11.c":23:12)
#loc9 = loc("CWE843_Type_Confusion__char_11.c":25:12)
#loc10 = loc("CWE843_Type_Confusion__char_11.c":25:5)
#loc11 = loc("CWE843_Type_Confusion__char_11.c":26:5)
#loc12 = loc("CWE843_Type_Confusion__char_11.c":33:5)
#loc13 = loc("CWE843_Type_Confusion__char_11.c":26:8)
#loc14 = loc("CWE843_Type_Confusion__char_11.c":26:26)
#loc15 = loc("CWE843_Type_Confusion__char_11.c":27:5)
#loc16 = loc("CWE843_Type_Confusion__char_11.c":28:9)
#loc17 = loc("CWE843_Type_Confusion__char_11.c":32:9)
#loc18 = loc("CWE843_Type_Confusion__char_11.c":30:13)
#loc19 = loc("CWE843_Type_Confusion__char_11.c":30:31)
#loc20 = loc("CWE843_Type_Confusion__char_11.c":31:20)
#loc21 = loc("CWE843_Type_Confusion__char_11.c":31:21)
#loc22 = loc("CWE843_Type_Confusion__char_11.c":31:13)
#loc23 = loc("CWE843_Type_Confusion__char_11.c":35:26)
#loc24 = loc("CWE843_Type_Confusion__char_11.c":35:18)
#loc25 = loc("CWE843_Type_Confusion__char_11.c":35:5)
#loc26 = loc("CWE843_Type_Confusion__char_11.c":83:1)
#loc27 = loc("CWE843_Type_Confusion__char_11.c":87:1)
#loc28 = loc("CWE843_Type_Confusion__char_11.c":85:5)
#loc29 = loc("CWE843_Type_Confusion__char_11.c":85:14)
#loc30 = loc("CWE843_Type_Confusion__char_11.c":86:5)
#loc31 = loc("CWE843_Type_Confusion__char_11.c":86:14)
#loc32 = loc("../../testcasesupport/std_testcase_io.h":50:1)
#loc33 = loc("../../testcasesupport/std_testcase_io.h":50:24)
#loc34 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc35 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc36 = loc("CWE843_Type_Confusion__char_11.c":51:19)
#loc37 = loc("CWE843_Type_Confusion__char_11.c":43:1)
#loc38 = loc("CWE843_Type_Confusion__char_11.c":63:1)
#loc39 = loc("CWE843_Type_Confusion__char_11.c":45:5)
#loc40 = loc("CWE843_Type_Confusion__char_11.c":45:12)
#loc41 = loc("CWE843_Type_Confusion__char_11.c":47:12)
#loc42 = loc("CWE843_Type_Confusion__char_11.c":47:5)
#loc43 = loc("CWE843_Type_Confusion__char_11.c":48:5)
#loc44 = loc("CWE843_Type_Confusion__char_11.c":60:5)
#loc45 = loc("CWE843_Type_Confusion__char_11.c":48:8)
#loc46 = loc("CWE843_Type_Confusion__char_11.c":48:27)
#loc47 = loc("CWE843_Type_Confusion__char_11.c":49:5)
#loc48 = loc("CWE843_Type_Confusion__char_11.c":52:5)
#loc49 = loc("CWE843_Type_Confusion__char_11.c":54:5)
#loc50 = loc("CWE843_Type_Confusion__char_11.c":51:9)
#loc51 = loc("CWE843_Type_Confusion__char_11.c":55:9)
#loc52 = loc("CWE843_Type_Confusion__char_11.c":59:9)
#loc53 = loc("CWE843_Type_Confusion__char_11.c":57:13)
#loc54 = loc("CWE843_Type_Confusion__char_11.c":57:29)
#loc55 = loc("CWE843_Type_Confusion__char_11.c":58:20)
#loc56 = loc("CWE843_Type_Confusion__char_11.c":58:21)
#loc57 = loc("CWE843_Type_Confusion__char_11.c":58:13)
#loc58 = loc("CWE843_Type_Confusion__char_11.c":62:26)
#loc59 = loc("CWE843_Type_Confusion__char_11.c":62:18)
#loc60 = loc("CWE843_Type_Confusion__char_11.c":62:5)
#loc61 = loc("CWE843_Type_Confusion__char_11.c":66:1)
#loc62 = loc("CWE843_Type_Confusion__char_11.c":81:1)
#loc63 = loc("CWE843_Type_Confusion__char_11.c":68:5)
#loc64 = loc("CWE843_Type_Confusion__char_11.c":68:12)
#loc65 = loc("CWE843_Type_Confusion__char_11.c":70:12)
#loc66 = loc("CWE843_Type_Confusion__char_11.c":70:5)
#loc67 = loc("CWE843_Type_Confusion__char_11.c":71:5)
#loc68 = loc("CWE843_Type_Confusion__char_11.c":78:5)
#loc69 = loc("CWE843_Type_Confusion__char_11.c":71:8)
#loc70 = loc("CWE843_Type_Confusion__char_11.c":71:26)
#loc71 = loc("CWE843_Type_Confusion__char_11.c":72:5)
#loc72 = loc("CWE843_Type_Confusion__char_11.c":73:9)
#loc73 = loc("CWE843_Type_Confusion__char_11.c":77:9)
#loc74 = loc("CWE843_Type_Confusion__char_11.c":75:13)
#loc75 = loc("CWE843_Type_Confusion__char_11.c":75:29)
#loc76 = loc("CWE843_Type_Confusion__char_11.c":76:20)
#loc77 = loc("CWE843_Type_Confusion__char_11.c":76:21)
#loc78 = loc("CWE843_Type_Confusion__char_11.c":76:13)
#loc79 = loc("CWE843_Type_Confusion__char_11.c":80:26)
#loc80 = loc("CWE843_Type_Confusion__char_11.c":80:18)
#loc81 = loc("CWE843_Type_Confusion__char_11.c":80:5)
#loc82 = loc(fused[#loc1, #loc2])
#loc83 = loc(fused[#loc3, #loc4])
#loc84 = loc(fused[#loc5, #loc6])
#loc85 = loc(fused[#loc7, #loc8])
#loc86 = loc(fused[#loc10, #loc9])
#loc87 = loc(fused[#loc11, #loc12])
#loc88 = loc(fused[#loc13, #loc14])
#loc89 = loc(fused[#loc15, #loc12])
#loc90 = loc(fused[#loc16, #loc17])
#loc91 = loc(fused[#loc18, #loc19])
#loc92 = loc(fused[#loc20, #loc21])
#loc93 = loc(fused[#loc22, #loc21])
#loc94 = loc(fused[#loc26, #loc27])
#loc95 = loc(fused[#loc28, #loc29])
#loc96 = loc(fused[#loc30, #loc31])
#loc97 = loc(fused[#loc32, #loc33])
#loc98 = loc(fused[#loc34, #loc35])
#loc99 = loc(fused[#loc37, #loc38])
#loc100 = loc(fused[#loc39, #loc40])
#loc101 = loc(fused[#loc42, #loc41])
#loc102 = loc(fused[#loc43, #loc44])
#loc103 = loc(fused[#loc45, #loc46])
#loc104 = loc(fused[#loc47, #loc48, #loc49, #loc44])
#loc105 = loc(fused[#loc51, #loc52])
#loc106 = loc(fused[#loc53, #loc54])
#loc107 = loc(fused[#loc55, #loc56])
#loc108 = loc(fused[#loc57, #loc56])
#loc109 = loc(fused[#loc61, #loc62])
#loc110 = loc(fused[#loc63, #loc64])
#loc111 = loc(fused[#loc66, #loc65])
#loc112 = loc(fused[#loc67, #loc68])
#loc113 = loc(fused[#loc69, #loc70])
#loc114 = loc(fused[#loc71, #loc68])
#loc115 = loc(fused[#loc72, #loc73])
#loc116 = loc(fused[#loc74, #loc75])
#loc117 = loc(fused[#loc76, #loc77])
#loc118 = loc(fused[#loc78, #loc77])
