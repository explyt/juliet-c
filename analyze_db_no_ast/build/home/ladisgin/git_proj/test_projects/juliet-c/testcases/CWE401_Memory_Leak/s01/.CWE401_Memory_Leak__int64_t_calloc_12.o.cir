!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE401_Memory_Leak/s01/CWE401_Memory_Leak__int64_t_calloc_12.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func no_proto private  @globalReturnsTrueOrFalse(...) -> !s32i loc(#loc182)
  cir.func private  @calloc(!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc183)
  cir.func private  @exit(!s32i) extra(#fn_attr) loc(#loc184)
  cir.func private  @printLongLongLine(!s64i) loc(#loc185)
  cir.func private  @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc186)
  cir.func no_proto  @CWE401_Memory_Leak__int64_t_calloc_12_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["data"] {alignment = 8 : i64} loc(#loc188)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc15)
    cir.store %1, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc189)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc191)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc191)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc19)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc19)
      cir.if %5 {
        %6 = cir.get_global @calloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i, !u64i)>> loc(#loc24)
        %7 = cir.const #cir.int<100> : !s32i loc(#loc25)
        %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc25)
        %9 = cir.const #cir.int<8> : !u64i loc(#loc193)
        %10 = cir.call @calloc(%8, %9) : (!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc24)
        %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc194)
        cir.store %11, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc195)
        cir.scope {
          %20 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc32)
          %21 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc33)
          %22 = cir.cast(bitcast, %21 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc33)
          %23 = cir.cmp(eq, %20, %22) : !cir.ptr<!s64i>, !s32i loc(#loc197)
          %24 = cir.cast(int_to_bool, %23 : !s32i), !cir.bool loc(#loc34)
          cir.if %24 {
            %25 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc36)
            %26 = cir.const #cir.int<1> : !s32i loc(#loc37)
            %27 = cir.unary(minus, %26) : !s32i, !s32i loc(#loc38)
            cir.call @exit(%27) : (!s32i) -> () extra(#fn_attr) loc(#loc36)
          } loc(#loc198)
        } loc(#loc196)
        %12 = cir.const #cir.int<5> : !s64i loc(#loc39)
        %13 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc40)
        %14 = cir.const #cir.int<0> : !s32i loc(#loc41)
        %15 = cir.ptr_stride(%13 : !cir.ptr<!s64i>, %14 : !s32i), !cir.ptr<!s64i> loc(#loc42)
        cir.store %12, %15 : !s64i, !cir.ptr<!s64i> loc(#loc199)
        %16 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc43)
        %17 = cir.const #cir.int<0> : !s32i loc(#loc44)
        %18 = cir.ptr_stride(%16 : !cir.ptr<!s64i>, %17 : !s32i), !cir.ptr<!s64i> loc(#loc45)
        %19 = cir.load %18 : !cir.ptr<!s64i>, !s64i loc(#loc43)
        cir.call @printLongLongLine(%19) : (!s64i) -> () loc(#loc46)
      } else {
        %6 = cir.const #cir.int<100> : !s32i loc(#loc47)
        %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc47)
        %8 = cir.const #cir.int<8> : !u64i loc(#loc47)
        %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc47)
        %10 = cir.alloca !u8i, !cir.ptr<!u8i>, %9 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc47)
        %11 = cir.cast(bitcast, %10 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc47)
        %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc47)
        cir.store %12, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc200)
        %13 = cir.const #cir.int<5> : !s64i loc(#loc49)
        %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc50)
        %15 = cir.const #cir.int<0> : !s32i loc(#loc51)
        %16 = cir.ptr_stride(%14 : !cir.ptr<!s64i>, %15 : !s32i), !cir.ptr<!s64i> loc(#loc52)
        cir.store %13, %16 : !s64i, !cir.ptr<!s64i> loc(#loc201)
        %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc53)
        %18 = cir.const #cir.int<0> : !s32i loc(#loc54)
        %19 = cir.ptr_stride(%17 : !cir.ptr<!s64i>, %18 : !s32i), !cir.ptr<!s64i> loc(#loc55)
        %20 = cir.load %19 : !cir.ptr<!s64i>, !s64i loc(#loc53)
        cir.call @printLongLongLine(%20) : (!s64i) -> () loc(#loc56)
      } loc(#loc192)
    } loc(#loc190)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc203)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc203)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc59)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc59)
      cir.if %5 {
      } else {
        %6 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc64)
        %7 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc65)
        %8 = cir.cast(bitcast, %7 : !cir.ptr<!s64i>), !cir.ptr<!void> loc(#loc65)
        cir.call @free(%8) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc64)
      } loc(#loc204)
    } loc(#loc202)
    cir.return loc(#loc12)
  } loc(#loc187)
  cir.func no_proto  @CWE401_Memory_Leak__int64_t_calloc_12_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc206)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc68)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc207)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc70)
    cir.return loc(#loc67)
  } loc(#loc205)
  cir.func no_proto internal private  @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["data"] {alignment = 8 : i64} loc(#loc209)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc76)
    cir.store %1, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc210)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc212)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc212)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc80)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc80)
      cir.if %5 {
        %6 = cir.get_global @calloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i, !u64i)>> loc(#loc85)
        %7 = cir.const #cir.int<100> : !s32i loc(#loc86)
        %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc86)
        %9 = cir.const #cir.int<8> : !u64i loc(#loc214)
        %10 = cir.call @calloc(%8, %9) : (!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc85)
        %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc215)
        cir.store %11, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc216)
        cir.scope {
          %20 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc93)
          %21 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc94)
          %22 = cir.cast(bitcast, %21 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc94)
          %23 = cir.cmp(eq, %20, %22) : !cir.ptr<!s64i>, !s32i loc(#loc218)
          %24 = cir.cast(int_to_bool, %23 : !s32i), !cir.bool loc(#loc95)
          cir.if %24 {
            %25 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc97)
            %26 = cir.const #cir.int<1> : !s32i loc(#loc98)
            %27 = cir.unary(minus, %26) : !s32i, !s32i loc(#loc99)
            cir.call @exit(%27) : (!s32i) -> () extra(#fn_attr) loc(#loc97)
          } loc(#loc219)
        } loc(#loc217)
        %12 = cir.const #cir.int<5> : !s64i loc(#loc100)
        %13 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc101)
        %14 = cir.const #cir.int<0> : !s32i loc(#loc102)
        %15 = cir.ptr_stride(%13 : !cir.ptr<!s64i>, %14 : !s32i), !cir.ptr<!s64i> loc(#loc103)
        cir.store %12, %15 : !s64i, !cir.ptr<!s64i> loc(#loc220)
        %16 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc104)
        %17 = cir.const #cir.int<0> : !s32i loc(#loc105)
        %18 = cir.ptr_stride(%16 : !cir.ptr<!s64i>, %17 : !s32i), !cir.ptr<!s64i> loc(#loc106)
        %19 = cir.load %18 : !cir.ptr<!s64i>, !s64i loc(#loc104)
        cir.call @printLongLongLine(%19) : (!s64i) -> () loc(#loc107)
      } else {
        %6 = cir.get_global @calloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i, !u64i)>> loc(#loc108)
        %7 = cir.const #cir.int<100> : !s32i loc(#loc109)
        %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc109)
        %9 = cir.const #cir.int<8> : !u64i loc(#loc221)
        %10 = cir.call @calloc(%8, %9) : (!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc108)
        %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc222)
        cir.store %11, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc223)
        cir.scope {
          %20 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc116)
          %21 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc117)
          %22 = cir.cast(bitcast, %21 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc117)
          %23 = cir.cmp(eq, %20, %22) : !cir.ptr<!s64i>, !s32i loc(#loc225)
          %24 = cir.cast(int_to_bool, %23 : !s32i), !cir.bool loc(#loc118)
          cir.if %24 {
            %25 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc120)
            %26 = cir.const #cir.int<1> : !s32i loc(#loc121)
            %27 = cir.unary(minus, %26) : !s32i, !s32i loc(#loc122)
            cir.call @exit(%27) : (!s32i) -> () extra(#fn_attr) loc(#loc120)
          } loc(#loc226)
        } loc(#loc224)
        %12 = cir.const #cir.int<5> : !s64i loc(#loc123)
        %13 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc124)
        %14 = cir.const #cir.int<0> : !s32i loc(#loc125)
        %15 = cir.ptr_stride(%13 : !cir.ptr<!s64i>, %14 : !s32i), !cir.ptr<!s64i> loc(#loc126)
        cir.store %12, %15 : !s64i, !cir.ptr<!s64i> loc(#loc227)
        %16 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc127)
        %17 = cir.const #cir.int<0> : !s32i loc(#loc128)
        %18 = cir.ptr_stride(%16 : !cir.ptr<!s64i>, %17 : !s32i), !cir.ptr<!s64i> loc(#loc129)
        %19 = cir.load %18 : !cir.ptr<!s64i>, !s64i loc(#loc127)
        cir.call @printLongLongLine(%19) : (!s64i) -> () loc(#loc130)
      } loc(#loc213)
    } loc(#loc211)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc229)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc229)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc133)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc133)
      cir.if %5 {
        %6 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc138)
        %7 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc139)
        %8 = cir.cast(bitcast, %7 : !cir.ptr<!s64i>), !cir.ptr<!void> loc(#loc139)
        cir.call @free(%8) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc138)
      } else {
        %6 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc140)
        %7 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc141)
        %8 = cir.cast(bitcast, %7 : !cir.ptr<!s64i>), !cir.ptr<!void> loc(#loc141)
        cir.call @free(%8) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc140)
      } loc(#loc230)
    } loc(#loc228)
    cir.return loc(#loc73)
  } loc(#loc208)
  cir.func no_proto internal private  @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["data"] {alignment = 8 : i64} loc(#loc232)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc146)
    cir.store %1, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc233)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc235)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc235)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc150)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc150)
      cir.if %5 {
        %6 = cir.const #cir.int<100> : !s32i loc(#loc155)
        %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc155)
        %8 = cir.const #cir.int<8> : !u64i loc(#loc155)
        %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc155)
        %10 = cir.alloca !u8i, !cir.ptr<!u8i>, %9 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc155)
        %11 = cir.cast(bitcast, %10 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc155)
        %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc155)
        cir.store %12, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc237)
        %13 = cir.const #cir.int<5> : !s64i loc(#loc157)
        %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc158)
        %15 = cir.const #cir.int<0> : !s32i loc(#loc159)
        %16 = cir.ptr_stride(%14 : !cir.ptr<!s64i>, %15 : !s32i), !cir.ptr<!s64i> loc(#loc160)
        cir.store %13, %16 : !s64i, !cir.ptr<!s64i> loc(#loc238)
        %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc161)
        %18 = cir.const #cir.int<0> : !s32i loc(#loc162)
        %19 = cir.ptr_stride(%17 : !cir.ptr<!s64i>, %18 : !s32i), !cir.ptr<!s64i> loc(#loc163)
        %20 = cir.load %19 : !cir.ptr<!s64i>, !s64i loc(#loc161)
        cir.call @printLongLongLine(%20) : (!s64i) -> () loc(#loc164)
      } else {
        %6 = cir.const #cir.int<100> : !s32i loc(#loc165)
        %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc165)
        %8 = cir.const #cir.int<8> : !u64i loc(#loc165)
        %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc165)
        %10 = cir.alloca !u8i, !cir.ptr<!u8i>, %9 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc165)
        %11 = cir.cast(bitcast, %10 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc165)
        %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc165)
        cir.store %12, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc239)
        %13 = cir.const #cir.int<5> : !s64i loc(#loc167)
        %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc168)
        %15 = cir.const #cir.int<0> : !s32i loc(#loc169)
        %16 = cir.ptr_stride(%14 : !cir.ptr<!s64i>, %15 : !s32i), !cir.ptr<!s64i> loc(#loc170)
        cir.store %13, %16 : !s64i, !cir.ptr<!s64i> loc(#loc240)
        %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc171)
        %18 = cir.const #cir.int<0> : !s32i loc(#loc172)
        %19 = cir.ptr_stride(%17 : !cir.ptr<!s64i>, %18 : !s32i), !cir.ptr<!s64i> loc(#loc173)
        %20 = cir.load %19 : !cir.ptr<!s64i>, !s64i loc(#loc171)
        cir.call @printLongLongLine(%20) : (!s64i) -> () loc(#loc174)
      } loc(#loc236)
    } loc(#loc234)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc242)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc242)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc177)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc177)
      cir.if %5 {
      } else {
      } loc(#loc243)
    } loc(#loc241)
    cir.return loc(#loc143)
  } loc(#loc231)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE401_Memory_Leak/s01/CWE401_Memory_Leak__int64_t_calloc_12.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":52:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":52:30)
#loc3 = loc("/usr/include/stdlib.h":675:1)
#loc4 = loc("/usr/include/stdlib.h":676:14)
#loc5 = loc("/usr/include/stdlib.h":756:1)
#loc6 = loc("/usr/include/stdlib.h":756:70)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":26:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":26:49)
#loc9 = loc("/usr/include/stdlib.h":687:1)
#loc10 = loc("/usr/include/stdlib.h":687:32)
#loc11 = loc("CWE401_Memory_Leak__int64_t_calloc_12.c":24:1)
#loc12 = loc("CWE401_Memory_Leak__int64_t_calloc_12.c":55:1)
#loc13 = loc("CWE401_Memory_Leak__int64_t_calloc_12.c":26:5)
#loc14 = loc("CWE401_Memory_Leak__int64_t_calloc_12.c":26:15)
#loc15 = loc("CWE401_Memory_Leak__int64_t_calloc_12.c":27:12)
#loc16 = loc("CWE401_Memory_Leak__int64_t_calloc_12.c":27:5)
#loc17 = loc("CWE401_Memory_Leak__int64_t_calloc_12.c":28:5)
#loc18 = loc("CWE401_Memory_Leak__int64_t_calloc_12.c":44:5)
#loc19 = loc("CWE401_Memory_Leak__int64_t_calloc_12.c":28:8)
#loc20 = loc("CWE401_Memory_Leak__int64_t_calloc_12.c":28:33)
#loc21 = loc("CWE401_Memory_Leak__int64_t_calloc_12.c":29:5)
#loc22 = loc("CWE401_Memory_Leak__int64_t_calloc_12.c":36:5)
#loc23 = loc("CWE401_Memory_Leak__int64_t_calloc_12.c":38:5)
#loc24 = loc("CWE401_Memory_Leak__int64_t_calloc_12.c":31:27)
#loc25 = loc("CWE401_Memory_Leak__int64_t_calloc_12.c":31:34)
#loc26 = loc("CWE401_Memory_Leak__int64_t_calloc_12.c":31:39)
#loc27 = loc("CWE401_Memory_Leak__int64_t_calloc_12.c":31:53)
#loc28 = loc("CWE401_Memory_Leak__int64_t_calloc_12.c":31:54)
#loc29 = loc("CWE401_Memory_Leak__int64_t_calloc_12.c":31:9)
#loc30 = loc("CWE401_Memory_Leak__int64_t_calloc_12.c":32:9)
#loc31 = loc("CWE401_Memory_Leak__int64_t_calloc_12.c":32:37)
#loc32 = loc("CWE401_Memory_Leak__int64_t_calloc_12.c":32:13)
#loc33 = loc("CWE401_Memory_Leak__int64_t_calloc_12.c":32:21)
#loc34 = loc("CWE401_Memory_Leak__int64_t_calloc_12.c":32:18)
#loc35 = loc("CWE401_Memory_Leak__int64_t_calloc_12.c":32:27)
#loc36 = loc("CWE401_Memory_Leak__int64_t_calloc_12.c":32:28)
#loc37 = loc("CWE401_Memory_Leak__int64_t_calloc_12.c":32:34)
#loc38 = loc("CWE401_Memory_Leak__int64_t_calloc_12.c":32:33)
#loc39 = loc("CWE401_Memory_Leak__int64_t_calloc_12.c":34:19)
#loc40 = loc("CWE401_Memory_Leak__int64_t_calloc_12.c":34:9)
#loc41 = loc("CWE401_Memory_Leak__int64_t_calloc_12.c":34:14)
#loc42 = loc("CWE401_Memory_Leak__int64_t_calloc_12.c":34:15)
#loc43 = loc("CWE401_Memory_Leak__int64_t_calloc_12.c":35:27)
#loc44 = loc("CWE401_Memory_Leak__int64_t_calloc_12.c":35:32)
#loc45 = loc("CWE401_Memory_Leak__int64_t_calloc_12.c":35:33)
#loc46 = loc("CWE401_Memory_Leak__int64_t_calloc_12.c":35:9)
#loc47 = loc("CWE401_Memory_Leak__int64_t_calloc_12.c":40:27)
#loc48 = loc("CWE401_Memory_Leak__int64_t_calloc_12.c":40:9)
#loc49 = loc("CWE401_Memory_Leak__int64_t_calloc_12.c":42:19)
#loc50 = loc("CWE401_Memory_Leak__int64_t_calloc_12.c":42:9)
#loc51 = loc("CWE401_Memory_Leak__int64_t_calloc_12.c":42:14)
#loc52 = loc("CWE401_Memory_Leak__int64_t_calloc_12.c":42:15)
#loc53 = loc("CWE401_Memory_Leak__int64_t_calloc_12.c":43:27)
#loc54 = loc("CWE401_Memory_Leak__int64_t_calloc_12.c":43:32)
#loc55 = loc("CWE401_Memory_Leak__int64_t_calloc_12.c":43:33)
#loc56 = loc("CWE401_Memory_Leak__int64_t_calloc_12.c":43:9)
#loc57 = loc("CWE401_Memory_Leak__int64_t_calloc_12.c":45:5)
#loc58 = loc("CWE401_Memory_Leak__int64_t_calloc_12.c":54:5)
#loc59 = loc("CWE401_Memory_Leak__int64_t_calloc_12.c":45:8)
#loc60 = loc("CWE401_Memory_Leak__int64_t_calloc_12.c":45:33)
#loc61 = loc("CWE401_Memory_Leak__int64_t_calloc_12.c":46:5)
#loc62 = loc("CWE401_Memory_Leak__int64_t_calloc_12.c":49:5)
#loc63 = loc("CWE401_Memory_Leak__int64_t_calloc_12.c":51:5)
#loc64 = loc("CWE401_Memory_Leak__int64_t_calloc_12.c":53:9)
#loc65 = loc("CWE401_Memory_Leak__int64_t_calloc_12.c":53:14)
#loc66 = loc("CWE401_Memory_Leak__int64_t_calloc_12.c":133:1)
#loc67 = loc("CWE401_Memory_Leak__int64_t_calloc_12.c":137:1)
#loc68 = loc("CWE401_Memory_Leak__int64_t_calloc_12.c":135:5)
#loc69 = loc("CWE401_Memory_Leak__int64_t_calloc_12.c":135:13)
#loc70 = loc("CWE401_Memory_Leak__int64_t_calloc_12.c":136:5)
#loc71 = loc("CWE401_Memory_Leak__int64_t_calloc_12.c":136:13)
#loc72 = loc("CWE401_Memory_Leak__int64_t_calloc_12.c":64:1)
#loc73 = loc("CWE401_Memory_Leak__int64_t_calloc_12.c":96:1)
#loc74 = loc("CWE401_Memory_Leak__int64_t_calloc_12.c":66:5)
#loc75 = loc("CWE401_Memory_Leak__int64_t_calloc_12.c":66:15)
#loc76 = loc("CWE401_Memory_Leak__int64_t_calloc_12.c":67:12)
#loc77 = loc("CWE401_Memory_Leak__int64_t_calloc_12.c":67:5)
#loc78 = loc("CWE401_Memory_Leak__int64_t_calloc_12.c":68:5)
#loc79 = loc("CWE401_Memory_Leak__int64_t_calloc_12.c":85:5)
#loc80 = loc("CWE401_Memory_Leak__int64_t_calloc_12.c":68:8)
#loc81 = loc("CWE401_Memory_Leak__int64_t_calloc_12.c":68:33)
#loc82 = loc("CWE401_Memory_Leak__int64_t_calloc_12.c":69:5)
#loc83 = loc("CWE401_Memory_Leak__int64_t_calloc_12.c":76:5)
#loc84 = loc("CWE401_Memory_Leak__int64_t_calloc_12.c":78:5)
#loc85 = loc("CWE401_Memory_Leak__int64_t_calloc_12.c":71:27)
#loc86 = loc("CWE401_Memory_Leak__int64_t_calloc_12.c":71:34)
#loc87 = loc("CWE401_Memory_Leak__int64_t_calloc_12.c":71:39)
#loc88 = loc("CWE401_Memory_Leak__int64_t_calloc_12.c":71:53)
#loc89 = loc("CWE401_Memory_Leak__int64_t_calloc_12.c":71:54)
#loc90 = loc("CWE401_Memory_Leak__int64_t_calloc_12.c":71:9)
#loc91 = loc("CWE401_Memory_Leak__int64_t_calloc_12.c":72:9)
#loc92 = loc("CWE401_Memory_Leak__int64_t_calloc_12.c":72:37)
#loc93 = loc("CWE401_Memory_Leak__int64_t_calloc_12.c":72:13)
#loc94 = loc("CWE401_Memory_Leak__int64_t_calloc_12.c":72:21)
#loc95 = loc("CWE401_Memory_Leak__int64_t_calloc_12.c":72:18)
#loc96 = loc("CWE401_Memory_Leak__int64_t_calloc_12.c":72:27)
#loc97 = loc("CWE401_Memory_Leak__int64_t_calloc_12.c":72:28)
#loc98 = loc("CWE401_Memory_Leak__int64_t_calloc_12.c":72:34)
#loc99 = loc("CWE401_Memory_Leak__int64_t_calloc_12.c":72:33)
#loc100 = loc("CWE401_Memory_Leak__int64_t_calloc_12.c":74:19)
#loc101 = loc("CWE401_Memory_Leak__int64_t_calloc_12.c":74:9)
#loc102 = loc("CWE401_Memory_Leak__int64_t_calloc_12.c":74:14)
#loc103 = loc("CWE401_Memory_Leak__int64_t_calloc_12.c":74:15)
#loc104 = loc("CWE401_Memory_Leak__int64_t_calloc_12.c":75:27)
#loc105 = loc("CWE401_Memory_Leak__int64_t_calloc_12.c":75:32)
#loc106 = loc("CWE401_Memory_Leak__int64_t_calloc_12.c":75:33)
#loc107 = loc("CWE401_Memory_Leak__int64_t_calloc_12.c":75:9)
#loc108 = loc("CWE401_Memory_Leak__int64_t_calloc_12.c":80:27)
#loc109 = loc("CWE401_Memory_Leak__int64_t_calloc_12.c":80:34)
#loc110 = loc("CWE401_Memory_Leak__int64_t_calloc_12.c":80:39)
#loc111 = loc("CWE401_Memory_Leak__int64_t_calloc_12.c":80:53)
#loc112 = loc("CWE401_Memory_Leak__int64_t_calloc_12.c":80:54)
#loc113 = loc("CWE401_Memory_Leak__int64_t_calloc_12.c":80:9)
#loc114 = loc("CWE401_Memory_Leak__int64_t_calloc_12.c":81:9)
#loc115 = loc("CWE401_Memory_Leak__int64_t_calloc_12.c":81:37)
#loc116 = loc("CWE401_Memory_Leak__int64_t_calloc_12.c":81:13)
#loc117 = loc("CWE401_Memory_Leak__int64_t_calloc_12.c":81:21)
#loc118 = loc("CWE401_Memory_Leak__int64_t_calloc_12.c":81:18)
#loc119 = loc("CWE401_Memory_Leak__int64_t_calloc_12.c":81:27)
#loc120 = loc("CWE401_Memory_Leak__int64_t_calloc_12.c":81:28)
#loc121 = loc("CWE401_Memory_Leak__int64_t_calloc_12.c":81:34)
#loc122 = loc("CWE401_Memory_Leak__int64_t_calloc_12.c":81:33)
#loc123 = loc("CWE401_Memory_Leak__int64_t_calloc_12.c":83:19)
#loc124 = loc("CWE401_Memory_Leak__int64_t_calloc_12.c":83:9)
#loc125 = loc("CWE401_Memory_Leak__int64_t_calloc_12.c":83:14)
#loc126 = loc("CWE401_Memory_Leak__int64_t_calloc_12.c":83:15)
#loc127 = loc("CWE401_Memory_Leak__int64_t_calloc_12.c":84:27)
#loc128 = loc("CWE401_Memory_Leak__int64_t_calloc_12.c":84:32)
#loc129 = loc("CWE401_Memory_Leak__int64_t_calloc_12.c":84:33)
#loc130 = loc("CWE401_Memory_Leak__int64_t_calloc_12.c":84:9)
#loc131 = loc("CWE401_Memory_Leak__int64_t_calloc_12.c":86:5)
#loc132 = loc("CWE401_Memory_Leak__int64_t_calloc_12.c":95:5)
#loc133 = loc("CWE401_Memory_Leak__int64_t_calloc_12.c":86:8)
#loc134 = loc("CWE401_Memory_Leak__int64_t_calloc_12.c":86:33)
#loc135 = loc("CWE401_Memory_Leak__int64_t_calloc_12.c":87:5)
#loc136 = loc("CWE401_Memory_Leak__int64_t_calloc_12.c":90:5)
#loc137 = loc("CWE401_Memory_Leak__int64_t_calloc_12.c":92:5)
#loc138 = loc("CWE401_Memory_Leak__int64_t_calloc_12.c":89:9)
#loc139 = loc("CWE401_Memory_Leak__int64_t_calloc_12.c":89:14)
#loc140 = loc("CWE401_Memory_Leak__int64_t_calloc_12.c":94:9)
#loc141 = loc("CWE401_Memory_Leak__int64_t_calloc_12.c":94:14)
#loc142 = loc("CWE401_Memory_Leak__int64_t_calloc_12.c":101:1)
#loc143 = loc("CWE401_Memory_Leak__int64_t_calloc_12.c":131:1)
#loc144 = loc("CWE401_Memory_Leak__int64_t_calloc_12.c":103:5)
#loc145 = loc("CWE401_Memory_Leak__int64_t_calloc_12.c":103:15)
#loc146 = loc("CWE401_Memory_Leak__int64_t_calloc_12.c":104:12)
#loc147 = loc("CWE401_Memory_Leak__int64_t_calloc_12.c":104:5)
#loc148 = loc("CWE401_Memory_Leak__int64_t_calloc_12.c":105:5)
#loc149 = loc("CWE401_Memory_Leak__int64_t_calloc_12.c":120:5)
#loc150 = loc("CWE401_Memory_Leak__int64_t_calloc_12.c":105:8)
#loc151 = loc("CWE401_Memory_Leak__int64_t_calloc_12.c":105:33)
#loc152 = loc("CWE401_Memory_Leak__int64_t_calloc_12.c":106:5)
#loc153 = loc("CWE401_Memory_Leak__int64_t_calloc_12.c":112:5)
#loc154 = loc("CWE401_Memory_Leak__int64_t_calloc_12.c":114:5)
#loc155 = loc("CWE401_Memory_Leak__int64_t_calloc_12.c":108:27)
#loc156 = loc("CWE401_Memory_Leak__int64_t_calloc_12.c":108:9)
#loc157 = loc("CWE401_Memory_Leak__int64_t_calloc_12.c":110:19)
#loc158 = loc("CWE401_Memory_Leak__int64_t_calloc_12.c":110:9)
#loc159 = loc("CWE401_Memory_Leak__int64_t_calloc_12.c":110:14)
#loc160 = loc("CWE401_Memory_Leak__int64_t_calloc_12.c":110:15)
#loc161 = loc("CWE401_Memory_Leak__int64_t_calloc_12.c":111:27)
#loc162 = loc("CWE401_Memory_Leak__int64_t_calloc_12.c":111:32)
#loc163 = loc("CWE401_Memory_Leak__int64_t_calloc_12.c":111:33)
#loc164 = loc("CWE401_Memory_Leak__int64_t_calloc_12.c":111:9)
#loc165 = loc("CWE401_Memory_Leak__int64_t_calloc_12.c":116:27)
#loc166 = loc("CWE401_Memory_Leak__int64_t_calloc_12.c":116:9)
#loc167 = loc("CWE401_Memory_Leak__int64_t_calloc_12.c":118:19)
#loc168 = loc("CWE401_Memory_Leak__int64_t_calloc_12.c":118:9)
#loc169 = loc("CWE401_Memory_Leak__int64_t_calloc_12.c":118:14)
#loc170 = loc("CWE401_Memory_Leak__int64_t_calloc_12.c":118:15)
#loc171 = loc("CWE401_Memory_Leak__int64_t_calloc_12.c":119:27)
#loc172 = loc("CWE401_Memory_Leak__int64_t_calloc_12.c":119:32)
#loc173 = loc("CWE401_Memory_Leak__int64_t_calloc_12.c":119:33)
#loc174 = loc("CWE401_Memory_Leak__int64_t_calloc_12.c":119:9)
#loc175 = loc("CWE401_Memory_Leak__int64_t_calloc_12.c":121:5)
#loc176 = loc("CWE401_Memory_Leak__int64_t_calloc_12.c":130:5)
#loc177 = loc("CWE401_Memory_Leak__int64_t_calloc_12.c":121:8)
#loc178 = loc("CWE401_Memory_Leak__int64_t_calloc_12.c":121:33)
#loc179 = loc("CWE401_Memory_Leak__int64_t_calloc_12.c":122:5)
#loc180 = loc("CWE401_Memory_Leak__int64_t_calloc_12.c":125:5)
#loc181 = loc("CWE401_Memory_Leak__int64_t_calloc_12.c":127:5)
#loc182 = loc(fused[#loc1, #loc2])
#loc183 = loc(fused[#loc3, #loc4])
#loc184 = loc(fused[#loc5, #loc6])
#loc185 = loc(fused[#loc7, #loc8])
#loc186 = loc(fused[#loc9, #loc10])
#loc187 = loc(fused[#loc11, #loc12])
#loc188 = loc(fused[#loc13, #loc14])
#loc189 = loc(fused[#loc16, #loc15])
#loc190 = loc(fused[#loc17, #loc18])
#loc191 = loc(fused[#loc19, #loc20])
#loc192 = loc(fused[#loc21, #loc22, #loc23, #loc18])
#loc193 = loc(fused[#loc26, #loc27])
#loc194 = loc(fused[#loc24, #loc28])
#loc195 = loc(fused[#loc29, #loc28])
#loc196 = loc(fused[#loc30, #loc31])
#loc197 = loc(fused[#loc32, #loc33])
#loc198 = loc(fused[#loc35, #loc31])
#loc199 = loc(fused[#loc40, #loc39])
#loc200 = loc(fused[#loc48, #loc47])
#loc201 = loc(fused[#loc50, #loc49])
#loc202 = loc(fused[#loc57, #loc58])
#loc203 = loc(fused[#loc59, #loc60])
#loc204 = loc(fused[#loc61, #loc62, #loc63, #loc58])
#loc205 = loc(fused[#loc66, #loc67])
#loc206 = loc(fused[#loc68, #loc69])
#loc207 = loc(fused[#loc70, #loc71])
#loc208 = loc(fused[#loc72, #loc73])
#loc209 = loc(fused[#loc74, #loc75])
#loc210 = loc(fused[#loc77, #loc76])
#loc211 = loc(fused[#loc78, #loc79])
#loc212 = loc(fused[#loc80, #loc81])
#loc213 = loc(fused[#loc82, #loc83, #loc84, #loc79])
#loc214 = loc(fused[#loc87, #loc88])
#loc215 = loc(fused[#loc85, #loc89])
#loc216 = loc(fused[#loc90, #loc89])
#loc217 = loc(fused[#loc91, #loc92])
#loc218 = loc(fused[#loc93, #loc94])
#loc219 = loc(fused[#loc96, #loc92])
#loc220 = loc(fused[#loc101, #loc100])
#loc221 = loc(fused[#loc110, #loc111])
#loc222 = loc(fused[#loc108, #loc112])
#loc223 = loc(fused[#loc113, #loc112])
#loc224 = loc(fused[#loc114, #loc115])
#loc225 = loc(fused[#loc116, #loc117])
#loc226 = loc(fused[#loc119, #loc115])
#loc227 = loc(fused[#loc124, #loc123])
#loc228 = loc(fused[#loc131, #loc132])
#loc229 = loc(fused[#loc133, #loc134])
#loc230 = loc(fused[#loc135, #loc136, #loc137, #loc132])
#loc231 = loc(fused[#loc142, #loc143])
#loc232 = loc(fused[#loc144, #loc145])
#loc233 = loc(fused[#loc147, #loc146])
#loc234 = loc(fused[#loc148, #loc149])
#loc235 = loc(fused[#loc150, #loc151])
#loc236 = loc(fused[#loc152, #loc153, #loc154, #loc149])
#loc237 = loc(fused[#loc156, #loc155])
#loc238 = loc(fused[#loc158, #loc157])
#loc239 = loc(fused[#loc166, #loc165])
#loc240 = loc(fused[#loc168, #loc167])
#loc241 = loc(fused[#loc175, #loc176])
#loc242 = loc(fused[#loc177, #loc178])
#loc243 = loc(fused[#loc179, #loc180, #loc181, #loc176])
