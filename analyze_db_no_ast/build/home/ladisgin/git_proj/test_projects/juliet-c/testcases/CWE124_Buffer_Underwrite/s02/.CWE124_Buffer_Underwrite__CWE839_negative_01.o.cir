!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#true = #cir.bool<true> : !cir.bool
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE124_Buffer_Underwrite/s02/CWE124_Buffer_Underwrite__CWE839_negative_01.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @printIntLine(!s32i) loc(#loc141)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc142)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"ERROR: Array index is negative.\00" : !cir.array<!s8i x 32>> : !cir.array<!s8i x 32> {alignment = 1 : i64} loc(#loc5)
  cir.func no_proto  @CWE124_Buffer_Underwrite__CWE839_negative_01_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc144)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc10)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc11)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc145)
    %3 = cir.const #cir.int<5> : !s32i loc(#loc13)
    %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc14)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc146)
    cir.scope {
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc148)
      %6 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc149)
      %7 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc149)
      cir.store %7, %6 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc149)
      cir.scope {
        %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc24)
        %9 = cir.const #cir.int<10> : !s32i loc(#loc25)
        %10 = cir.cmp(lt, %8, %9) : !s32i, !s32i loc(#loc151)
        %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc26)
        cir.if %11 {
          %12 = cir.const #cir.int<1> : !s32i loc(#loc30)
          %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc31)
          %14 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc32)
          %15 = cir.ptr_stride(%14 : !cir.ptr<!s32i>, %13 : !s32i), !cir.ptr<!s32i> loc(#loc32)
          cir.store %12, %15 : !s32i, !cir.ptr<!s32i> loc(#loc153)
          cir.scope {
            %16 = cir.const #cir.int<0> : !s32i loc(#loc35)
            cir.store %16, %5 : !s32i, !cir.ptr<!s32i> loc(#loc155)
            cir.for : cond {
              %17 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc37)
              %18 = cir.const #cir.int<10> : !s32i loc(#loc38)
              %19 = cir.cmp(lt, %17, %18) : !s32i, !s32i loc(#loc156)
              %20 = cir.cast(int_to_bool, %19 : !s32i), !cir.bool loc(#loc39)
              cir.condition(%20) loc(#loc39)
            } body {
              cir.scope {
                %17 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc41)
                %18 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc42)
                %19 = cir.ptr_stride(%18 : !cir.ptr<!s32i>, %17 : !s32i), !cir.ptr<!s32i> loc(#loc42)
                %20 = cir.load %19 : !cir.ptr<!s32i>, !s32i loc(#loc42)
                cir.call @printIntLine(%20) : (!s32i) -> () loc(#loc43)
              } loc(#loc157)
              cir.yield loc(#loc34)
            } step {
              %17 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc44)
              %18 = cir.unary(inc, %17) : !s32i, !s32i loc(#loc45)
              cir.store %18, %5 : !s32i, !cir.ptr<!s32i> loc(#loc158)
              cir.yield loc(#loc154)
            } loc(#loc154)
          } loc(#loc154)
        } else {
          %12 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc5)
          %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc5)
          cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc46)
        } loc(#loc152)
      } loc(#loc150)
    } loc(#loc147)
    cir.return loc(#loc7)
  } loc(#loc143)
  cir.func no_proto  @CWE124_Buffer_Underwrite__CWE839_negative_01_good() extra(#fn_attr) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc160)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc49)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc161)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc51)
    cir.return loc(#loc48)
  } loc(#loc159)
  cir.func no_proto internal private  @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc163)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc57)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc58)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc164)
    %3 = cir.const #cir.int<7> : !s32i loc(#loc60)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc165)
    cir.scope {
      %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc167)
      %5 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc168)
      %6 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc168)
      cir.store %6, %5 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc168)
      cir.scope {
        %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc70)
        %8 = cir.const #cir.int<10> : !s32i loc(#loc71)
        %9 = cir.cmp(lt, %7, %8) : !s32i, !s32i loc(#loc170)
        %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc72)
        cir.if %10 {
          %11 = cir.const #cir.int<1> : !s32i loc(#loc76)
          %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc77)
          %13 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc78)
          %14 = cir.ptr_stride(%13 : !cir.ptr<!s32i>, %12 : !s32i), !cir.ptr<!s32i> loc(#loc78)
          cir.store %11, %14 : !s32i, !cir.ptr<!s32i> loc(#loc172)
          cir.scope {
            %15 = cir.const #cir.int<0> : !s32i loc(#loc81)
            cir.store %15, %4 : !s32i, !cir.ptr<!s32i> loc(#loc174)
            cir.for : cond {
              %16 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc83)
              %17 = cir.const #cir.int<10> : !s32i loc(#loc84)
              %18 = cir.cmp(lt, %16, %17) : !s32i, !s32i loc(#loc175)
              %19 = cir.cast(int_to_bool, %18 : !s32i), !cir.bool loc(#loc85)
              cir.condition(%19) loc(#loc85)
            } body {
              cir.scope {
                %16 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc87)
                %17 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc88)
                %18 = cir.ptr_stride(%17 : !cir.ptr<!s32i>, %16 : !s32i), !cir.ptr<!s32i> loc(#loc88)
                %19 = cir.load %18 : !cir.ptr<!s32i>, !s32i loc(#loc88)
                cir.call @printIntLine(%19) : (!s32i) -> () loc(#loc89)
              } loc(#loc176)
              cir.yield loc(#loc80)
            } step {
              %16 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc90)
              %17 = cir.unary(inc, %16) : !s32i, !s32i loc(#loc91)
              cir.store %17, %4 : !s32i, !cir.ptr<!s32i> loc(#loc177)
              cir.yield loc(#loc173)
            } loc(#loc173)
          } loc(#loc173)
        } else {
          %11 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc92)
          %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc92)
          cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc93)
        } loc(#loc171)
      } loc(#loc169)
    } loc(#loc166)
    cir.return loc(#loc54)
  } loc(#loc162)
  cir.global "private"  constant internal dsolocal @".str1" = #cir.const_array<"ERROR: Array index is out-of-bounds\00" : !cir.array<!s8i x 36>> : !cir.array<!s8i x 36> {alignment = 1 : i64} loc(#loc94)
  cir.func no_proto internal private  @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc179)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc99)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc100)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc180)
    %3 = cir.const #cir.int<5> : !s32i loc(#loc102)
    %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc103)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc181)
    cir.scope {
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc183)
      %6 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc184)
      %7 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc184)
      cir.store %7, %6 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc184)
      cir.scope {
        %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc113)
        %9 = cir.const #cir.int<0> : !s32i loc(#loc114)
        %10 = cir.cmp(ge, %8, %9) : !s32i, !s32i loc(#loc186)
        %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc115)
        %12 = cir.ternary(%11, true {
          %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc117)
          %14 = cir.const #cir.int<10> : !s32i loc(#loc118)
          %15 = cir.cmp(lt, %13, %14) : !s32i, !s32i loc(#loc187)
          %16 = cir.cast(int_to_bool, %15 : !s32i), !cir.bool loc(#loc120)
          %17 = cir.ternary(%16, true {
            %18 = cir.const #true loc(#loc116)
            cir.yield %18 : !cir.bool loc(#loc116)
          }, false {
            %18 = cir.const #false loc(#loc116)
            cir.yield %18 : !cir.bool loc(#loc116)
          }) : (!cir.bool) -> !cir.bool loc(#loc116)
          cir.yield %17 : !cir.bool loc(#loc116)
        }, false {
          %13 = cir.const #false loc(#loc116)
          cir.yield %13 : !cir.bool loc(#loc116)
        }) : (!cir.bool) -> !cir.bool loc(#loc116)
        cir.if %12 {
          %13 = cir.const #cir.int<1> : !s32i loc(#loc124)
          %14 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc125)
          %15 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc126)
          %16 = cir.ptr_stride(%15 : !cir.ptr<!s32i>, %14 : !s32i), !cir.ptr<!s32i> loc(#loc126)
          cir.store %13, %16 : !s32i, !cir.ptr<!s32i> loc(#loc189)
          cir.scope {
            %17 = cir.const #cir.int<0> : !s32i loc(#loc129)
            cir.store %17, %5 : !s32i, !cir.ptr<!s32i> loc(#loc191)
            cir.for : cond {
              %18 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc131)
              %19 = cir.const #cir.int<10> : !s32i loc(#loc132)
              %20 = cir.cmp(lt, %18, %19) : !s32i, !s32i loc(#loc192)
              %21 = cir.cast(int_to_bool, %20 : !s32i), !cir.bool loc(#loc133)
              cir.condition(%21) loc(#loc133)
            } body {
              cir.scope {
                %18 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc135)
                %19 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc136)
                %20 = cir.ptr_stride(%19 : !cir.ptr<!s32i>, %18 : !s32i), !cir.ptr<!s32i> loc(#loc136)
                %21 = cir.load %20 : !cir.ptr<!s32i>, !s32i loc(#loc136)
                cir.call @printIntLine(%21) : (!s32i) -> () loc(#loc137)
              } loc(#loc193)
              cir.yield loc(#loc128)
            } step {
              %18 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc138)
              %19 = cir.unary(inc, %18) : !s32i, !s32i loc(#loc139)
              cir.store %19, %5 : !s32i, !cir.ptr<!s32i> loc(#loc194)
              cir.yield loc(#loc190)
            } loc(#loc190)
          } loc(#loc190)
        } else {
          %13 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc94)
          %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc94)
          cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc140)
        } loc(#loc188)
      } loc(#loc185)
    } loc(#loc182)
    cir.return loc(#loc96)
  } loc(#loc178)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE124_Buffer_Underwrite/s02/CWE124_Buffer_Underwrite__CWE839_negative_01.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc5 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":45:23)
#loc6 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":22:1)
#loc7 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":48:1)
#loc8 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":24:5)
#loc9 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":24:9)
#loc10 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":26:13)
#loc11 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":26:12)
#loc12 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":26:5)
#loc13 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":28:13)
#loc14 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":28:12)
#loc15 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":28:5)
#loc16 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":29:5)
#loc17 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":47:5)
#loc18 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":30:9)
#loc19 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":30:13)
#loc20 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":31:9)
#loc21 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":31:30)
#loc22 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":34:9)
#loc23 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":46:9)
#loc24 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":34:13)
#loc25 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":34:20)
#loc26 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":34:18)
#loc27 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":35:9)
#loc28 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":42:9)
#loc29 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":44:9)
#loc30 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":36:28)
#loc31 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":36:20)
#loc32 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":36:13)
#loc33 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":38:13)
#loc34 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":41:13)
#loc35 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":38:21)
#loc36 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":38:17)
#loc37 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":38:24)
#loc38 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":38:28)
#loc39 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":38:26)
#loc40 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":39:13)
#loc41 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":40:37)
#loc42 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":40:30)
#loc43 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":40:17)
#loc44 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":38:33)
#loc45 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":38:32)
#loc46 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":45:13)
#loc47 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":112:1)
#loc48 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":116:1)
#loc49 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":114:5)
#loc50 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":114:13)
#loc51 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":115:5)
#loc52 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":115:13)
#loc53 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":55:1)
#loc54 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":82:1)
#loc55 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":57:5)
#loc56 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":57:9)
#loc57 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":59:13)
#loc58 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":59:12)
#loc59 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":59:5)
#loc60 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":62:12)
#loc61 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":62:5)
#loc62 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":63:5)
#loc63 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":81:5)
#loc64 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":64:9)
#loc65 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":64:13)
#loc66 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":65:9)
#loc67 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":65:30)
#loc68 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":68:9)
#loc69 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":80:9)
#loc70 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":68:13)
#loc71 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":68:20)
#loc72 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":68:18)
#loc73 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":69:9)
#loc74 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":76:9)
#loc75 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":78:9)
#loc76 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":70:28)
#loc77 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":70:20)
#loc78 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":70:13)
#loc79 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":72:13)
#loc80 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":75:13)
#loc81 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":72:21)
#loc82 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":72:17)
#loc83 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":72:24)
#loc84 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":72:28)
#loc85 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":72:26)
#loc86 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":73:13)
#loc87 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":74:37)
#loc88 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":74:30)
#loc89 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":74:17)
#loc90 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":72:33)
#loc91 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":72:32)
#loc92 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":79:23)
#loc93 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":79:13)
#loc94 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":107:23)
#loc95 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":85:1)
#loc96 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":110:1)
#loc97 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":87:5)
#loc98 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":87:9)
#loc99 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":89:13)
#loc100 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":89:12)
#loc101 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":89:5)
#loc102 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":91:13)
#loc103 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":91:12)
#loc104 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":91:5)
#loc105 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":92:5)
#loc106 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":109:5)
#loc107 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":93:9)
#loc108 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":93:13)
#loc109 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":94:9)
#loc110 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":94:30)
#loc111 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":96:9)
#loc112 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":108:9)
#loc113 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":96:13)
#loc114 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":96:21)
#loc115 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":96:18)
#loc116 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":96:23)
#loc117 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":96:26)
#loc118 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":96:34)
#loc119 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":96:36)
#loc120 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":96:31)
#loc121 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":97:9)
#loc122 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":104:9)
#loc123 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":106:9)
#loc124 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":98:28)
#loc125 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":98:20)
#loc126 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":98:13)
#loc127 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":100:13)
#loc128 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":103:13)
#loc129 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":100:21)
#loc130 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":100:17)
#loc131 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":100:24)
#loc132 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":100:28)
#loc133 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":100:26)
#loc134 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":101:13)
#loc135 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":102:37)
#loc136 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":102:30)
#loc137 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":102:17)
#loc138 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":100:33)
#loc139 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":100:32)
#loc140 = loc("CWE124_Buffer_Underwrite__CWE839_negative_01.c":107:13)
#loc141 = loc(fused[#loc1, #loc2])
#loc142 = loc(fused[#loc3, #loc4])
#loc143 = loc(fused[#loc6, #loc7])
#loc144 = loc(fused[#loc8, #loc9])
#loc145 = loc(fused[#loc12, #loc10])
#loc146 = loc(fused[#loc15, #loc13])
#loc147 = loc(fused[#loc16, #loc17])
#loc148 = loc(fused[#loc18, #loc19])
#loc149 = loc(fused[#loc20, #loc21])
#loc150 = loc(fused[#loc22, #loc23])
#loc151 = loc(fused[#loc24, #loc25])
#loc152 = loc(fused[#loc27, #loc28, #loc29, #loc23])
#loc153 = loc(fused[#loc32, #loc30])
#loc154 = loc(fused[#loc33, #loc34])
#loc155 = loc(fused[#loc36, #loc35])
#loc156 = loc(fused[#loc37, #loc38])
#loc157 = loc(fused[#loc40, #loc34])
#loc158 = loc(fused[#loc45, #loc44])
#loc159 = loc(fused[#loc47, #loc48])
#loc160 = loc(fused[#loc49, #loc50])
#loc161 = loc(fused[#loc51, #loc52])
#loc162 = loc(fused[#loc53, #loc54])
#loc163 = loc(fused[#loc55, #loc56])
#loc164 = loc(fused[#loc59, #loc57])
#loc165 = loc(fused[#loc61, #loc60])
#loc166 = loc(fused[#loc62, #loc63])
#loc167 = loc(fused[#loc64, #loc65])
#loc168 = loc(fused[#loc66, #loc67])
#loc169 = loc(fused[#loc68, #loc69])
#loc170 = loc(fused[#loc70, #loc71])
#loc171 = loc(fused[#loc73, #loc74, #loc75, #loc69])
#loc172 = loc(fused[#loc78, #loc76])
#loc173 = loc(fused[#loc79, #loc80])
#loc174 = loc(fused[#loc82, #loc81])
#loc175 = loc(fused[#loc83, #loc84])
#loc176 = loc(fused[#loc86, #loc80])
#loc177 = loc(fused[#loc91, #loc90])
#loc178 = loc(fused[#loc95, #loc96])
#loc179 = loc(fused[#loc97, #loc98])
#loc180 = loc(fused[#loc101, #loc99])
#loc181 = loc(fused[#loc104, #loc102])
#loc182 = loc(fused[#loc105, #loc106])
#loc183 = loc(fused[#loc107, #loc108])
#loc184 = loc(fused[#loc109, #loc110])
#loc185 = loc(fused[#loc111, #loc112])
#loc186 = loc(fused[#loc113, #loc114])
#loc187 = loc(fused[#loc117, #loc119])
#loc188 = loc(fused[#loc121, #loc122, #loc123, #loc112])
#loc189 = loc(fused[#loc126, #loc124])
#loc190 = loc(fused[#loc127, #loc128])
#loc191 = loc(fused[#loc130, #loc129])
#loc192 = loc(fused[#loc131, #loc132])
#loc193 = loc(fused[#loc134, #loc128])
#loc194 = loc(fused[#loc139, #loc138])
