!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc45 = loc("CWE511_Logic_Time_Bomb__counter_04.c":121:10)
#loc46 = loc("CWE511_Logic_Time_Bomb__counter_04.c":121:14)
#loc47 = loc("CWE511_Logic_Time_Bomb__counter_04.c":121:20)
#loc48 = loc("CWE511_Logic_Time_Bomb__counter_04.c":121:32)
#loc134 = loc(fused[#loc45, #loc46])
#loc135 = loc(fused[#loc47, #loc48])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE511_Logic_Time_Bomb/CWE511_Logic_Time_Bomb__counter_04.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @unlink(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc115)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"important_file.txt\00" : !cir.array<!s8i x 19>> : !cir.array<!s8i x 19> {alignment = 1 : i64} loc(#loc3)
  cir.func no_proto @CWE511_Logic_Time_Bomb__counter_04_bad() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.const #cir.int<1> : !s32i loc(#loc8)
      %1 = cir.cast(int_to_bool, %0 : !s32i), !cir.bool loc(#loc8)
      cir.if %1 {
        cir.scope {
          %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count", init] {alignment = 4 : i64} loc(#loc120)
          %3 = cir.const #cir.int<0> : !s32i loc(#loc13)
          cir.store %3, %2 : !s32i, !cir.ptr<!s32i> loc(#loc120)
          cir.scope {
            cir.do {
              cir.scope {
                %6 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc18)
                %7 = cir.const #cir.int<20000> : !s32i loc(#loc19)
                %8 = cir.cmp(eq, %6, %7) : !s32i, !cir.bool loc(#loc123)
                cir.if %8 {
                  %9 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 19>> loc(#loc3)
                  %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 19>>), !cir.ptr<!s8i> loc(#loc3)
                  %11 = cir.call @unlink(%10) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc21)
                } loc(#loc124)
              } loc(#loc122)
              %4 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc22)
              %5 = cir.unary(inc, %4) : !s32i, !s32i loc(#loc23)
              cir.store %5, %2 : !s32i, !cir.ptr<!s32i> loc(#loc125)
              cir.yield loc(#loc15)
            } while {
              %4 = cir.const #cir.int<1> : !s32i loc(#loc24)
              %5 = cir.const #cir.int<1> : !s32i loc(#loc25)
              %6 = cir.cmp(eq, %4, %5) : !s32i, !cir.bool loc(#loc126)
              cir.condition(%6) loc(#loc26)
            } loc(#loc121)
          } loc(#loc121)
        } loc(#loc119)
      } loc(#loc118)
    } loc(#loc117)
    cir.return loc(#loc5)
  } loc(#loc116)
  cir.func no_proto @CWE511_Logic_Time_Bomb__counter_04_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<!void ()>> loc(#loc128)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc29)
    %1 = cir.get_global @good2 : !cir.ptr<!cir.func<!void ()>> loc(#loc129)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc31)
    cir.return loc(#loc28)
  } loc(#loc127)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc130)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc131)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc132)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc39)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc40)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc41)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc42)
  cir.func @main(%arg0: !s32i loc(fused[#loc45, #loc46]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc47, #loc48])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc134)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc135)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc44)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc49)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc49)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc50)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc51)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc51)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc52)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc39)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc39)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc53)
    %8 = cir.get_global @CWE511_Logic_Time_Bomb__counter_04_good : !cir.ptr<!cir.func<!void ()>> loc(#loc136)
    cir.call @CWE511_Logic_Time_Bomb__counter_04_good() : () -> () loc(#loc54)
    %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc40)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc40)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc56)
    %11 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc41)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc41)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc57)
    %13 = cir.get_global @CWE511_Logic_Time_Bomb__counter_04_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc137)
    cir.call @CWE511_Logic_Time_Bomb__counter_04_bad() : () -> () loc(#loc58)
    %14 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc42)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc42)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc60)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc61)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc138)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc138)
    cir.return %17 : !s32i loc(#loc138)
  } loc(#loc133)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc63)
  cir.global "private" constant cir_private dsolocal @".str.6" = #cir.const_array<"Happy New Year!\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc64)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.const #cir.int<0> : !s32i loc(#loc69)
      %1 = cir.cast(int_to_bool, %0 : !s32i), !cir.bool loc(#loc69)
      cir.if %1 {
        %2 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc63)
        %3 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc63)
        cir.call @printLine(%3) : (!cir.ptr<!s8i>) -> () loc(#loc73)
      } else {
        cir.scope {
          %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count", init] {alignment = 4 : i64} loc(#loc143)
          %3 = cir.const #cir.int<0> : !s32i loc(#loc77)
          cir.store %3, %2 : !s32i, !cir.ptr<!s32i> loc(#loc143)
          cir.scope {
            cir.do {
              cir.scope {
                %6 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc82)
                %7 = cir.const #cir.int<20000> : !s32i loc(#loc83)
                %8 = cir.cmp(eq, %6, %7) : !s32i, !cir.bool loc(#loc146)
                cir.if %8 {
                  %9 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc64)
                  %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc64)
                  cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc85)
                } loc(#loc147)
              } loc(#loc145)
              %4 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc86)
              %5 = cir.unary(inc, %4) : !s32i, !s32i loc(#loc87)
              cir.store %5, %2 : !s32i, !cir.ptr<!s32i> loc(#loc148)
              cir.yield loc(#loc79)
            } while {
              %4 = cir.const #cir.int<1> : !s32i loc(#loc88)
              %5 = cir.const #cir.int<1> : !s32i loc(#loc89)
              %6 = cir.cmp(eq, %4, %5) : !s32i, !cir.bool loc(#loc149)
              cir.condition(%6) loc(#loc90)
            } loc(#loc144)
          } loc(#loc144)
        } loc(#loc142)
      } loc(#loc141)
    } loc(#loc140)
    cir.return loc(#loc66)
  } loc(#loc139)
  cir.func no_proto internal private @good2() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.const #cir.int<1> : !s32i loc(#loc95)
      %1 = cir.cast(int_to_bool, %0 : !s32i), !cir.bool loc(#loc95)
      cir.if %1 {
        cir.scope {
          %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count", init] {alignment = 4 : i64} loc(#loc154)
          %3 = cir.const #cir.int<0> : !s32i loc(#loc100)
          cir.store %3, %2 : !s32i, !cir.ptr<!s32i> loc(#loc154)
          cir.scope {
            cir.do {
              cir.scope {
                %6 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc105)
                %7 = cir.const #cir.int<20000> : !s32i loc(#loc106)
                %8 = cir.cmp(eq, %6, %7) : !s32i, !cir.bool loc(#loc157)
                cir.if %8 {
                  %9 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc108)
                  %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc108)
                  cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc109)
                } loc(#loc158)
              } loc(#loc156)
              %4 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc110)
              %5 = cir.unary(inc, %4) : !s32i, !s32i loc(#loc111)
              cir.store %5, %2 : !s32i, !cir.ptr<!s32i> loc(#loc159)
              cir.yield loc(#loc102)
            } while {
              %4 = cir.const #cir.int<1> : !s32i loc(#loc112)
              %5 = cir.const #cir.int<1> : !s32i loc(#loc113)
              %6 = cir.cmp(eq, %4, %5) : !s32i, !cir.bool loc(#loc160)
              cir.condition(%6) loc(#loc114)
            } loc(#loc155)
          } loc(#loc155)
        } loc(#loc153)
      } loc(#loc152)
    } loc(#loc151)
    cir.return loc(#loc92)
  } loc(#loc150)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE511_Logic_Time_Bomb/CWE511_Logic_Time_Bomb__counter_04.c":0:0)
#loc1 = loc("/usr/include/unistd.h":858:1)
#loc2 = loc("/usr/include/unistd.h":858:48)
#loc3 = loc("CWE511_Logic_Time_Bomb__counter_04.c":46:28)
#loc4 = loc("CWE511_Logic_Time_Bomb__counter_04.c":35:1)
#loc5 = loc("CWE511_Logic_Time_Bomb__counter_04.c":53:1)
#loc6 = loc("CWE511_Logic_Time_Bomb__counter_04.c":37:5)
#loc7 = loc("CWE511_Logic_Time_Bomb__counter_04.c":52:5)
#loc8 = loc("CWE511_Logic_Time_Bomb__counter_04.c":37:8)
#loc9 = loc("CWE511_Logic_Time_Bomb__counter_04.c":38:5)
#loc10 = loc("CWE511_Logic_Time_Bomb__counter_04.c":39:9)
#loc11 = loc("CWE511_Logic_Time_Bomb__counter_04.c":51:9)
#loc12 = loc("CWE511_Logic_Time_Bomb__counter_04.c":40:13)
#loc13 = loc("CWE511_Logic_Time_Bomb__counter_04.c":40:25)
#loc14 = loc("CWE511_Logic_Time_Bomb__counter_04.c":41:13)
#loc15 = loc("CWE511_Logic_Time_Bomb__counter_04.c":50:25)
#loc16 = loc("CWE511_Logic_Time_Bomb__counter_04.c":44:17)
#loc17 = loc("CWE511_Logic_Time_Bomb__counter_04.c":47:17)
#loc18 = loc("CWE511_Logic_Time_Bomb__counter_04.c":44:21)
#loc19 = loc("CWE511_Logic_Time_Bomb__counter_04.c":44:30)
#loc20 = loc("CWE511_Logic_Time_Bomb__counter_04.c":45:17)
#loc21 = loc("CWE511_Logic_Time_Bomb__counter_04.c":46:21)
#loc22 = loc("CWE511_Logic_Time_Bomb__counter_04.c":48:22)
#loc23 = loc("CWE511_Logic_Time_Bomb__counter_04.c":48:17)
#loc24 = loc("CWE511_Logic_Time_Bomb__counter_04.c":50:19)
#loc25 = loc("CWE511_Logic_Time_Bomb__counter_04.c":50:24)
#loc26 = loc("CWE511_Logic_Time_Bomb__counter_04.c":50:21)
#loc27 = loc("CWE511_Logic_Time_Bomb__counter_04.c":106:1)
#loc28 = loc("CWE511_Logic_Time_Bomb__counter_04.c":110:1)
#loc29 = loc("CWE511_Logic_Time_Bomb__counter_04.c":108:5)
#loc30 = loc("CWE511_Logic_Time_Bomb__counter_04.c":108:11)
#loc31 = loc("CWE511_Logic_Time_Bomb__counter_04.c":109:5)
#loc32 = loc("CWE511_Logic_Time_Bomb__counter_04.c":109:11)
#loc33 = loc("/usr/include/stdlib.h":575:1)
#loc34 = loc("/usr/include/stdlib.h":575:41)
#loc35 = loc("/usr/include/time.h":76:1)
#loc36 = loc("/usr/include/time.h":76:38)
#loc37 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc38 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc39 = loc("CWE511_Logic_Time_Bomb__counter_04.c":126:15)
#loc40 = loc("CWE511_Logic_Time_Bomb__counter_04.c":128:15)
#loc41 = loc("CWE511_Logic_Time_Bomb__counter_04.c":131:15)
#loc42 = loc("CWE511_Logic_Time_Bomb__counter_04.c":133:15)
#loc43 = loc("CWE511_Logic_Time_Bomb__counter_04.c":121:1)
#loc44 = loc("CWE511_Logic_Time_Bomb__counter_04.c":136:1)
#loc49 = loc("CWE511_Logic_Time_Bomb__counter_04.c":122:1)
#loc50 = loc("CWE511_Logic_Time_Bomb__counter_04.c":124:27)
#loc51 = loc("CWE511_Logic_Time_Bomb__counter_04.c":124:22)
#loc52 = loc("CWE511_Logic_Time_Bomb__counter_04.c":124:5)
#loc53 = loc("CWE511_Logic_Time_Bomb__counter_04.c":126:5)
#loc54 = loc("CWE511_Logic_Time_Bomb__counter_04.c":127:5)
#loc55 = loc("CWE511_Logic_Time_Bomb__counter_04.c":127:45)
#loc56 = loc("CWE511_Logic_Time_Bomb__counter_04.c":128:5)
#loc57 = loc("CWE511_Logic_Time_Bomb__counter_04.c":131:5)
#loc58 = loc("CWE511_Logic_Time_Bomb__counter_04.c":132:5)
#loc59 = loc("CWE511_Logic_Time_Bomb__counter_04.c":132:44)
#loc60 = loc("CWE511_Logic_Time_Bomb__counter_04.c":133:5)
#loc61 = loc("CWE511_Logic_Time_Bomb__counter_04.c":135:12)
#loc62 = loc("CWE511_Logic_Time_Bomb__counter_04.c":135:5)
#loc63 = loc("CWE511_Logic_Time_Bomb__counter_04.c":65:19)
#loc64 = loc("CWE511_Logic_Time_Bomb__counter_04.c":76:31)
#loc65 = loc("CWE511_Logic_Time_Bomb__counter_04.c":60:1)
#loc66 = loc("CWE511_Logic_Time_Bomb__counter_04.c":83:1)
#loc67 = loc("CWE511_Logic_Time_Bomb__counter_04.c":62:5)
#loc68 = loc("CWE511_Logic_Time_Bomb__counter_04.c":82:5)
#loc69 = loc("CWE511_Logic_Time_Bomb__counter_04.c":62:8)
#loc70 = loc("CWE511_Logic_Time_Bomb__counter_04.c":63:5)
#loc71 = loc("CWE511_Logic_Time_Bomb__counter_04.c":66:5)
#loc72 = loc("CWE511_Logic_Time_Bomb__counter_04.c":68:5)
#loc73 = loc("CWE511_Logic_Time_Bomb__counter_04.c":65:9)
#loc74 = loc("CWE511_Logic_Time_Bomb__counter_04.c":69:9)
#loc75 = loc("CWE511_Logic_Time_Bomb__counter_04.c":81:9)
#loc76 = loc("CWE511_Logic_Time_Bomb__counter_04.c":70:13)
#loc77 = loc("CWE511_Logic_Time_Bomb__counter_04.c":70:25)
#loc78 = loc("CWE511_Logic_Time_Bomb__counter_04.c":71:13)
#loc79 = loc("CWE511_Logic_Time_Bomb__counter_04.c":80:25)
#loc80 = loc("CWE511_Logic_Time_Bomb__counter_04.c":74:17)
#loc81 = loc("CWE511_Logic_Time_Bomb__counter_04.c":77:17)
#loc82 = loc("CWE511_Logic_Time_Bomb__counter_04.c":74:21)
#loc83 = loc("CWE511_Logic_Time_Bomb__counter_04.c":74:30)
#loc84 = loc("CWE511_Logic_Time_Bomb__counter_04.c":75:17)
#loc85 = loc("CWE511_Logic_Time_Bomb__counter_04.c":76:21)
#loc86 = loc("CWE511_Logic_Time_Bomb__counter_04.c":78:22)
#loc87 = loc("CWE511_Logic_Time_Bomb__counter_04.c":78:17)
#loc88 = loc("CWE511_Logic_Time_Bomb__counter_04.c":80:19)
#loc89 = loc("CWE511_Logic_Time_Bomb__counter_04.c":80:24)
#loc90 = loc("CWE511_Logic_Time_Bomb__counter_04.c":80:21)
#loc91 = loc("CWE511_Logic_Time_Bomb__counter_04.c":86:1)
#loc92 = loc("CWE511_Logic_Time_Bomb__counter_04.c":104:1)
#loc93 = loc("CWE511_Logic_Time_Bomb__counter_04.c":88:5)
#loc94 = loc("CWE511_Logic_Time_Bomb__counter_04.c":103:5)
#loc95 = loc("CWE511_Logic_Time_Bomb__counter_04.c":88:8)
#loc96 = loc("CWE511_Logic_Time_Bomb__counter_04.c":89:5)
#loc97 = loc("CWE511_Logic_Time_Bomb__counter_04.c":90:9)
#loc98 = loc("CWE511_Logic_Time_Bomb__counter_04.c":102:9)
#loc99 = loc("CWE511_Logic_Time_Bomb__counter_04.c":91:13)
#loc100 = loc("CWE511_Logic_Time_Bomb__counter_04.c":91:25)
#loc101 = loc("CWE511_Logic_Time_Bomb__counter_04.c":92:13)
#loc102 = loc("CWE511_Logic_Time_Bomb__counter_04.c":101:25)
#loc103 = loc("CWE511_Logic_Time_Bomb__counter_04.c":95:17)
#loc104 = loc("CWE511_Logic_Time_Bomb__counter_04.c":98:17)
#loc105 = loc("CWE511_Logic_Time_Bomb__counter_04.c":95:21)
#loc106 = loc("CWE511_Logic_Time_Bomb__counter_04.c":95:30)
#loc107 = loc("CWE511_Logic_Time_Bomb__counter_04.c":96:17)
#loc108 = loc("CWE511_Logic_Time_Bomb__counter_04.c":97:31)
#loc109 = loc("CWE511_Logic_Time_Bomb__counter_04.c":97:21)
#loc110 = loc("CWE511_Logic_Time_Bomb__counter_04.c":99:22)
#loc111 = loc("CWE511_Logic_Time_Bomb__counter_04.c":99:17)
#loc112 = loc("CWE511_Logic_Time_Bomb__counter_04.c":101:19)
#loc113 = loc("CWE511_Logic_Time_Bomb__counter_04.c":101:24)
#loc114 = loc("CWE511_Logic_Time_Bomb__counter_04.c":101:21)
#loc115 = loc(fused[#loc1, #loc2])
#loc116 = loc(fused[#loc4, #loc5])
#loc117 = loc(fused[#loc6, #loc7])
#loc118 = loc(fused[#loc9, #loc7])
#loc119 = loc(fused[#loc10, #loc11])
#loc120 = loc(fused[#loc12, #loc13])
#loc121 = loc(fused[#loc14, #loc15])
#loc122 = loc(fused[#loc16, #loc17])
#loc123 = loc(fused[#loc18, #loc19])
#loc124 = loc(fused[#loc20, #loc17])
#loc125 = loc(fused[#loc23, #loc22])
#loc126 = loc(fused[#loc24, #loc25])
#loc127 = loc(fused[#loc27, #loc28])
#loc128 = loc(fused[#loc29, #loc30])
#loc129 = loc(fused[#loc31, #loc32])
#loc130 = loc(fused[#loc33, #loc34])
#loc131 = loc(fused[#loc35, #loc36])
#loc132 = loc(fused[#loc37, #loc38])
#loc133 = loc(fused[#loc43, #loc44])
#loc136 = loc(fused[#loc54, #loc55])
#loc137 = loc(fused[#loc58, #loc59])
#loc138 = loc(fused[#loc62, #loc61])
#loc139 = loc(fused[#loc65, #loc66])
#loc140 = loc(fused[#loc67, #loc68])
#loc141 = loc(fused[#loc70, #loc71, #loc72, #loc68])
#loc142 = loc(fused[#loc74, #loc75])
#loc143 = loc(fused[#loc76, #loc77])
#loc144 = loc(fused[#loc78, #loc79])
#loc145 = loc(fused[#loc80, #loc81])
#loc146 = loc(fused[#loc82, #loc83])
#loc147 = loc(fused[#loc84, #loc81])
#loc148 = loc(fused[#loc87, #loc86])
#loc149 = loc(fused[#loc88, #loc89])
#loc150 = loc(fused[#loc91, #loc92])
#loc151 = loc(fused[#loc93, #loc94])
#loc152 = loc(fused[#loc96, #loc94])
#loc153 = loc(fused[#loc97, #loc98])
#loc154 = loc(fused[#loc99, #loc100])
#loc155 = loc(fused[#loc101, #loc102])
#loc156 = loc(fused[#loc103, #loc104])
#loc157 = loc(fused[#loc105, #loc106])
#loc158 = loc(fused[#loc107, #loc104])
#loc159 = loc(fused[#loc111, #loc110])
#loc160 = loc(fused[#loc112, #loc113])
