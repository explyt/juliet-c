!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc23 = loc("CWE126_Buffer_Overread__CWE129_rand_09.c":30:16)
#loc69 = loc("CWE126_Buffer_Overread__CWE129_rand_09.c":63:16)
#loc84 = loc("CWE126_Buffer_Overread__CWE129_rand_09.c":75:27)
#loc108 = loc("CWE126_Buffer_Overread__CWE129_rand_09.c":96:16)
#loc120 = loc("CWE126_Buffer_Overread__CWE129_rand_09.c":103:27)
#true = #cir.bool<true> : !cir.bool
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE126_Buffer_Overread/s01/CWE126_Buffer_Overread__CWE129_rand_09.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.global "private" constant external @GLOBAL_CONST_TRUE : !s32i {alignment = 4 : i64} loc(#loc202)
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc203)
  cir.func private @printIntLine(!s32i) loc(#loc204)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc205)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"ERROR: Array index is negative\00" : !cir.array<!s8i x 31>> : !cir.array<!s8i x 31> {alignment = 1 : i64} loc(#loc9)
  cir.func no_proto @CWE126_Buffer_Overread__CWE129_rand_09_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc207)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc208)
    %2 = cir.const #cir.int<1> : !s32i loc(#loc16)
    %3 = cir.unary(minus, %2) : !s32i, !s32i loc(#loc17)
    cir.store %3, %1 : !s32i, !cir.ptr<!s32i> loc(#loc209)
    cir.br ^bb1 loc(#loc210)
  ^bb1:  // pred: ^bb0
    %4 = cir.get_global @GLOBAL_CONST_TRUE : !cir.ptr<!s32i> loc(#loc202)
    %5 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc21)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc21)
    cir.brcond %6 ^bb2, ^bb7 loc(#loc211)
  ^bb2:  // pred: ^bb1
    %7 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc23)
    %8 = cir.const #cir.int<1> : !s32i loc(#loc23)
    %9 = cir.binop(and, %7, %8) : !s32i loc(#loc23)
    %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc23)
    cir.brcond %10 ^bb3, ^bb4 loc(#loc23)
  ^bb3:  // pred: ^bb2
    %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc23)
    %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc23)
    %13 = cir.const #cir.int<30> : !s32i loc(#loc23)
    %14 = cir.shift(left, %12 : !u32i, %13 : !s32i) -> !u32i loc(#loc23)
    %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc23)
    %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc23)
    %17 = cir.const #cir.int<15> : !s32i loc(#loc23)
    %18 = cir.shift(left, %16 : !u32i, %17 : !s32i) -> !u32i loc(#loc23)
    %19 = cir.binop(xor, %14, %18) : !u32i loc(#loc23)
    %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc23)
    %21 = cir.cast(integral, %20 : !s32i), !u32i loc(#loc23)
    %22 = cir.binop(xor, %19, %21) : !u32i loc(#loc23)
    cir.br ^bb5(%22 : !u32i) loc(#loc23)
  ^bb4:  // pred: ^bb2
    %23 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc23)
    %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc23)
    %25 = cir.const #cir.int<30> : !s32i loc(#loc23)
    %26 = cir.shift(left, %24 : !u32i, %25 : !s32i) -> !u32i loc(#loc23)
    %27 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc23)
    %28 = cir.cast(integral, %27 : !s32i), !u32i loc(#loc23)
    %29 = cir.const #cir.int<15> : !s32i loc(#loc23)
    %30 = cir.shift(left, %28 : !u32i, %29 : !s32i) -> !u32i loc(#loc23)
    %31 = cir.binop(xor, %26, %30) : !u32i loc(#loc23)
    %32 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc23)
    %33 = cir.cast(integral, %32 : !s32i), !u32i loc(#loc23)
    %34 = cir.binop(xor, %31, %33) : !u32i loc(#loc23)
    %35 = cir.unary(minus, %34) : !u32i, !u32i loc(#loc23)
    %36 = cir.const #cir.int<1> : !s32i loc(#loc23)
    %37 = cir.cast(integral, %36 : !s32i), !u32i loc(#loc23)
    %38 = cir.binop(sub, %35, %37) : !u32i loc(#loc23)
    cir.br ^bb5(%38 : !u32i) loc(#loc23)
  ^bb5(%39: !u32i loc("CWE126_Buffer_Overread__CWE129_rand_09.c":30:16)):  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc23)
  ^bb6:  // pred: ^bb5
    %40 = cir.cast(integral, %39 : !u32i), !s32i loc(#loc23)
    cir.store %40, %1 : !s32i, !cir.ptr<!s32i> loc(#loc212)
    cir.br ^bb7 loc(#loc20)
  ^bb7:  // 2 preds: ^bb1, ^bb6
    cir.br ^bb8 loc(#loc20)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc213)
  ^bb9:  // pred: ^bb8
    %41 = cir.get_global @GLOBAL_CONST_TRUE : !cir.ptr<!s32i> loc(#loc202)
    %42 = cir.load %41 : !cir.ptr<!s32i>, !s32i loc(#loc27)
    %43 = cir.cast(int_to_bool, %42 : !s32i), !cir.bool loc(#loc27)
    cir.brcond %43 ^bb10, ^bb18 loc(#loc214)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc215)
  ^bb11:  // pred: ^bb10
    %44 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc207)
    cir.store %44, %0 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc207)
    cir.br ^bb12 loc(#loc216)
  ^bb12:  // pred: ^bb11
    %45 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc33)
    %46 = cir.const #cir.int<0> : !s32i loc(#loc34)
    %47 = cir.cmp(ge, %45, %46) : !s32i, !cir.bool loc(#loc217)
    cir.brcond %47 ^bb13, ^bb14 loc(#loc218)
  ^bb13:  // pred: ^bb12
    %48 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc38)
    %49 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc39)
    %50 = cir.ptr_stride(%49 : !cir.ptr<!s32i>, %48 : !s32i), !cir.ptr<!s32i> loc(#loc39)
    %51 = cir.load %50 : !cir.ptr<!s32i>, !s32i loc(#loc39)
    cir.call @printIntLine(%51) : (!s32i) -> () loc(#loc40)
    cir.br ^bb15 loc(#loc36)
  ^bb14:  // pred: ^bb12
    %52 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 31>> loc(#loc9)
    %53 = cir.cast(array_to_ptrdecay, %52 : !cir.ptr<!cir.array<!s8i x 31>>), !cir.ptr<!s8i> loc(#loc9)
    cir.call @printLine(%53) : (!cir.ptr<!s8i>) -> () loc(#loc41)
    cir.br ^bb15 loc(#loc32)
  ^bb15:  // 2 preds: ^bb13, ^bb14
    cir.br ^bb16 loc(#loc32)
  ^bb16:  // pred: ^bb15
    cir.br ^bb17 loc(#loc30)
  ^bb17:  // pred: ^bb16
    cir.br ^bb18 loc(#loc26)
  ^bb18:  // 2 preds: ^bb9, ^bb17
    cir.br ^bb19 loc(#loc26)
  ^bb19:  // pred: ^bb18
    cir.return loc(#loc11)
  } loc(#loc206)
  cir.func no_proto @CWE126_Buffer_Overread__CWE129_rand_09_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc220)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc44)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc221)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc46)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc222)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc48)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc223)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc50)
    cir.return loc(#loc43)
  } loc(#loc219)
  cir.global "private" constant external @GLOBAL_CONST_FALSE : !s32i {alignment = 4 : i64} loc(#loc224)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc54)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"ERROR: Array index is out-of-bounds\00" : !cir.array<!s8i x 36>> : !cir.array<!s8i x 36> {alignment = 1 : i64} loc(#loc55)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc226)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc227)
    %2 = cir.const #cir.int<1> : !s32i loc(#loc62)
    %3 = cir.unary(minus, %2) : !s32i, !s32i loc(#loc63)
    cir.store %3, %1 : !s32i, !cir.ptr<!s32i> loc(#loc228)
    cir.br ^bb1 loc(#loc229)
  ^bb1:  // pred: ^bb0
    %4 = cir.get_global @GLOBAL_CONST_TRUE : !cir.ptr<!s32i> loc(#loc202)
    %5 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc67)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc67)
    cir.brcond %6 ^bb2, ^bb7 loc(#loc230)
  ^bb2:  // pred: ^bb1
    %7 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc69)
    %8 = cir.const #cir.int<1> : !s32i loc(#loc69)
    %9 = cir.binop(and, %7, %8) : !s32i loc(#loc69)
    %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc69)
    cir.brcond %10 ^bb3, ^bb4 loc(#loc69)
  ^bb3:  // pred: ^bb2
    %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc69)
    %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc69)
    %13 = cir.const #cir.int<30> : !s32i loc(#loc69)
    %14 = cir.shift(left, %12 : !u32i, %13 : !s32i) -> !u32i loc(#loc69)
    %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc69)
    %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc69)
    %17 = cir.const #cir.int<15> : !s32i loc(#loc69)
    %18 = cir.shift(left, %16 : !u32i, %17 : !s32i) -> !u32i loc(#loc69)
    %19 = cir.binop(xor, %14, %18) : !u32i loc(#loc69)
    %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc69)
    %21 = cir.cast(integral, %20 : !s32i), !u32i loc(#loc69)
    %22 = cir.binop(xor, %19, %21) : !u32i loc(#loc69)
    cir.br ^bb5(%22 : !u32i) loc(#loc69)
  ^bb4:  // pred: ^bb2
    %23 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc69)
    %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc69)
    %25 = cir.const #cir.int<30> : !s32i loc(#loc69)
    %26 = cir.shift(left, %24 : !u32i, %25 : !s32i) -> !u32i loc(#loc69)
    %27 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc69)
    %28 = cir.cast(integral, %27 : !s32i), !u32i loc(#loc69)
    %29 = cir.const #cir.int<15> : !s32i loc(#loc69)
    %30 = cir.shift(left, %28 : !u32i, %29 : !s32i) -> !u32i loc(#loc69)
    %31 = cir.binop(xor, %26, %30) : !u32i loc(#loc69)
    %32 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc69)
    %33 = cir.cast(integral, %32 : !s32i), !u32i loc(#loc69)
    %34 = cir.binop(xor, %31, %33) : !u32i loc(#loc69)
    %35 = cir.unary(minus, %34) : !u32i, !u32i loc(#loc69)
    %36 = cir.const #cir.int<1> : !s32i loc(#loc69)
    %37 = cir.cast(integral, %36 : !s32i), !u32i loc(#loc69)
    %38 = cir.binop(sub, %35, %37) : !u32i loc(#loc69)
    cir.br ^bb5(%38 : !u32i) loc(#loc69)
  ^bb5(%39: !u32i loc("CWE126_Buffer_Overread__CWE129_rand_09.c":63:16)):  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc69)
  ^bb6:  // pred: ^bb5
    %40 = cir.cast(integral, %39 : !u32i), !s32i loc(#loc69)
    cir.store %40, %1 : !s32i, !cir.ptr<!s32i> loc(#loc231)
    cir.br ^bb7 loc(#loc66)
  ^bb7:  // 2 preds: ^bb1, ^bb6
    cir.br ^bb8 loc(#loc66)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc232)
  ^bb9:  // pred: ^bb8
    %41 = cir.get_global @GLOBAL_CONST_FALSE : !cir.ptr<!s32i> loc(#loc224)
    %42 = cir.load %41 : !cir.ptr<!s32i>, !s32i loc(#loc73)
    %43 = cir.cast(int_to_bool, %42 : !s32i), !cir.bool loc(#loc73)
    cir.brcond %43 ^bb10, ^bb11 loc(#loc233)
  ^bb10:  // pred: ^bb9
    %44 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc54)
    %45 = cir.cast(array_to_ptrdecay, %44 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc54)
    cir.call @printLine(%45) : (!cir.ptr<!s8i>) -> () loc(#loc77)
    cir.br ^bb27 loc(#loc75)
  ^bb11:  // pred: ^bb9
    cir.br ^bb12 loc(#loc234)
  ^bb12:  // pred: ^bb11
    %46 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc226)
    cir.store %46, %0 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc226)
    cir.br ^bb13 loc(#loc235)
  ^bb13:  // pred: ^bb12
    %47 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc82)
    %48 = cir.const #cir.int<0> : !s32i loc(#loc83)
    %49 = cir.cmp(ge, %47, %48) : !s32i, !cir.bool loc(#loc236)
    cir.brcond %49 ^bb14, ^bb19 loc(#loc84)
  ^bb14:  // pred: ^bb13
    %50 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc85)
    %51 = cir.const #cir.int<10> : !s32i loc(#loc86)
    %52 = cir.cmp(lt, %50, %51) : !s32i, !cir.bool loc(#loc237)
    cir.brcond %52 ^bb15, ^bb16 loc(#loc84)
  ^bb15:  // pred: ^bb14
    %53 = cir.const #true loc(#loc84)
    cir.br ^bb17(%53 : !cir.bool) loc(#loc84)
  ^bb16:  // pred: ^bb14
    %54 = cir.const #false loc(#loc84)
    cir.br ^bb17(%54 : !cir.bool) loc(#loc84)
  ^bb17(%55: !cir.bool loc("CWE126_Buffer_Overread__CWE129_rand_09.c":75:27)):  // 2 preds: ^bb15, ^bb16
    cir.br ^bb18 loc(#loc84)
  ^bb18:  // pred: ^bb17
    cir.br ^bb20(%55 : !cir.bool) loc(#loc84)
  ^bb19:  // pred: ^bb13
    %56 = cir.const #false loc(#loc84)
    cir.br ^bb20(%56 : !cir.bool) loc(#loc84)
  ^bb20(%57: !cir.bool loc("CWE126_Buffer_Overread__CWE129_rand_09.c":75:27)):  // 2 preds: ^bb18, ^bb19
    cir.br ^bb21 loc(#loc84)
  ^bb21:  // pred: ^bb20
    cir.brcond %57 ^bb22, ^bb23 loc(#loc238)
  ^bb22:  // pred: ^bb21
    %58 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc91)
    %59 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc92)
    %60 = cir.ptr_stride(%59 : !cir.ptr<!s32i>, %58 : !s32i), !cir.ptr<!s32i> loc(#loc92)
    %61 = cir.load %60 : !cir.ptr<!s32i>, !s32i loc(#loc92)
    cir.call @printIntLine(%61) : (!s32i) -> () loc(#loc93)
    cir.br ^bb24 loc(#loc89)
  ^bb23:  // pred: ^bb21
    %62 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc55)
    %63 = cir.cast(array_to_ptrdecay, %62 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc55)
    cir.call @printLine(%63) : (!cir.ptr<!s8i>) -> () loc(#loc94)
    cir.br ^bb24 loc(#loc81)
  ^bb24:  // 2 preds: ^bb22, ^bb23
    cir.br ^bb25 loc(#loc81)
  ^bb25:  // pred: ^bb24
    cir.br ^bb26 loc(#loc79)
  ^bb26:  // pred: ^bb25
    cir.br ^bb27 loc(#loc72)
  ^bb27:  // 2 preds: ^bb10, ^bb26
    cir.br ^bb28 loc(#loc72)
  ^bb28:  // pred: ^bb27
    cir.return loc(#loc57)
  } loc(#loc225)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc240)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc241)
    %2 = cir.const #cir.int<1> : !s32i loc(#loc101)
    %3 = cir.unary(minus, %2) : !s32i, !s32i loc(#loc102)
    cir.store %3, %1 : !s32i, !cir.ptr<!s32i> loc(#loc242)
    cir.br ^bb1 loc(#loc243)
  ^bb1:  // pred: ^bb0
    %4 = cir.get_global @GLOBAL_CONST_TRUE : !cir.ptr<!s32i> loc(#loc202)
    %5 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc106)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc106)
    cir.brcond %6 ^bb2, ^bb7 loc(#loc244)
  ^bb2:  // pred: ^bb1
    %7 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc108)
    %8 = cir.const #cir.int<1> : !s32i loc(#loc108)
    %9 = cir.binop(and, %7, %8) : !s32i loc(#loc108)
    %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc108)
    cir.brcond %10 ^bb3, ^bb4 loc(#loc108)
  ^bb3:  // pred: ^bb2
    %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc108)
    %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc108)
    %13 = cir.const #cir.int<30> : !s32i loc(#loc108)
    %14 = cir.shift(left, %12 : !u32i, %13 : !s32i) -> !u32i loc(#loc108)
    %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc108)
    %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc108)
    %17 = cir.const #cir.int<15> : !s32i loc(#loc108)
    %18 = cir.shift(left, %16 : !u32i, %17 : !s32i) -> !u32i loc(#loc108)
    %19 = cir.binop(xor, %14, %18) : !u32i loc(#loc108)
    %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc108)
    %21 = cir.cast(integral, %20 : !s32i), !u32i loc(#loc108)
    %22 = cir.binop(xor, %19, %21) : !u32i loc(#loc108)
    cir.br ^bb5(%22 : !u32i) loc(#loc108)
  ^bb4:  // pred: ^bb2
    %23 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc108)
    %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc108)
    %25 = cir.const #cir.int<30> : !s32i loc(#loc108)
    %26 = cir.shift(left, %24 : !u32i, %25 : !s32i) -> !u32i loc(#loc108)
    %27 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc108)
    %28 = cir.cast(integral, %27 : !s32i), !u32i loc(#loc108)
    %29 = cir.const #cir.int<15> : !s32i loc(#loc108)
    %30 = cir.shift(left, %28 : !u32i, %29 : !s32i) -> !u32i loc(#loc108)
    %31 = cir.binop(xor, %26, %30) : !u32i loc(#loc108)
    %32 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc108)
    %33 = cir.cast(integral, %32 : !s32i), !u32i loc(#loc108)
    %34 = cir.binop(xor, %31, %33) : !u32i loc(#loc108)
    %35 = cir.unary(minus, %34) : !u32i, !u32i loc(#loc108)
    %36 = cir.const #cir.int<1> : !s32i loc(#loc108)
    %37 = cir.cast(integral, %36 : !s32i), !u32i loc(#loc108)
    %38 = cir.binop(sub, %35, %37) : !u32i loc(#loc108)
    cir.br ^bb5(%38 : !u32i) loc(#loc108)
  ^bb5(%39: !u32i loc("CWE126_Buffer_Overread__CWE129_rand_09.c":96:16)):  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc108)
  ^bb6:  // pred: ^bb5
    %40 = cir.cast(integral, %39 : !u32i), !s32i loc(#loc108)
    cir.store %40, %1 : !s32i, !cir.ptr<!s32i> loc(#loc245)
    cir.br ^bb7 loc(#loc105)
  ^bb7:  // 2 preds: ^bb1, ^bb6
    cir.br ^bb8 loc(#loc105)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc246)
  ^bb9:  // pred: ^bb8
    %41 = cir.get_global @GLOBAL_CONST_TRUE : !cir.ptr<!s32i> loc(#loc202)
    %42 = cir.load %41 : !cir.ptr<!s32i>, !s32i loc(#loc112)
    %43 = cir.cast(int_to_bool, %42 : !s32i), !cir.bool loc(#loc112)
    cir.brcond %43 ^bb10, ^bb26 loc(#loc247)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc248)
  ^bb11:  // pred: ^bb10
    %44 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc240)
    cir.store %44, %0 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc240)
    cir.br ^bb12 loc(#loc249)
  ^bb12:  // pred: ^bb11
    %45 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc118)
    %46 = cir.const #cir.int<0> : !s32i loc(#loc119)
    %47 = cir.cmp(ge, %45, %46) : !s32i, !cir.bool loc(#loc250)
    cir.brcond %47 ^bb13, ^bb18 loc(#loc120)
  ^bb13:  // pred: ^bb12
    %48 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc121)
    %49 = cir.const #cir.int<10> : !s32i loc(#loc122)
    %50 = cir.cmp(lt, %48, %49) : !s32i, !cir.bool loc(#loc251)
    cir.brcond %50 ^bb14, ^bb15 loc(#loc120)
  ^bb14:  // pred: ^bb13
    %51 = cir.const #true loc(#loc120)
    cir.br ^bb16(%51 : !cir.bool) loc(#loc120)
  ^bb15:  // pred: ^bb13
    %52 = cir.const #false loc(#loc120)
    cir.br ^bb16(%52 : !cir.bool) loc(#loc120)
  ^bb16(%53: !cir.bool loc("CWE126_Buffer_Overread__CWE129_rand_09.c":103:27)):  // 2 preds: ^bb14, ^bb15
    cir.br ^bb17 loc(#loc120)
  ^bb17:  // pred: ^bb16
    cir.br ^bb19(%53 : !cir.bool) loc(#loc120)
  ^bb18:  // pred: ^bb12
    %54 = cir.const #false loc(#loc120)
    cir.br ^bb19(%54 : !cir.bool) loc(#loc120)
  ^bb19(%55: !cir.bool loc("CWE126_Buffer_Overread__CWE129_rand_09.c":103:27)):  // 2 preds: ^bb17, ^bb18
    cir.br ^bb20 loc(#loc120)
  ^bb20:  // pred: ^bb19
    cir.brcond %55 ^bb21, ^bb22 loc(#loc252)
  ^bb21:  // pred: ^bb20
    %56 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc127)
    %57 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc128)
    %58 = cir.ptr_stride(%57 : !cir.ptr<!s32i>, %56 : !s32i), !cir.ptr<!s32i> loc(#loc128)
    %59 = cir.load %58 : !cir.ptr<!s32i>, !s32i loc(#loc128)
    cir.call @printIntLine(%59) : (!s32i) -> () loc(#loc129)
    cir.br ^bb23 loc(#loc125)
  ^bb22:  // pred: ^bb20
    %60 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc130)
    %61 = cir.cast(array_to_ptrdecay, %60 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc130)
    cir.call @printLine(%61) : (!cir.ptr<!s8i>) -> () loc(#loc131)
    cir.br ^bb23 loc(#loc117)
  ^bb23:  // 2 preds: ^bb21, ^bb22
    cir.br ^bb24 loc(#loc117)
  ^bb24:  // pred: ^bb23
    cir.br ^bb25 loc(#loc115)
  ^bb25:  // pred: ^bb24
    cir.br ^bb26 loc(#loc111)
  ^bb26:  // 2 preds: ^bb9, ^bb25
    cir.br ^bb27 loc(#loc111)
  ^bb27:  // pred: ^bb26
    cir.return loc(#loc96)
  } loc(#loc239)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc254)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc255)
    %2 = cir.const #cir.int<1> : !s32i loc(#loc138)
    %3 = cir.unary(minus, %2) : !s32i, !s32i loc(#loc139)
    cir.store %3, %1 : !s32i, !cir.ptr<!s32i> loc(#loc256)
    cir.br ^bb1 loc(#loc257)
  ^bb1:  // pred: ^bb0
    %4 = cir.get_global @GLOBAL_CONST_FALSE : !cir.ptr<!s32i> loc(#loc224)
    %5 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc143)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc143)
    cir.brcond %6 ^bb2, ^bb3 loc(#loc258)
  ^bb2:  // pred: ^bb1
    %7 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc147)
    %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc147)
    cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc148)
    cir.br ^bb4 loc(#loc145)
  ^bb3:  // pred: ^bb1
    %9 = cir.const #cir.int<7> : !s32i loc(#loc149)
    cir.store %9, %1 : !s32i, !cir.ptr<!s32i> loc(#loc259)
    cir.br ^bb4 loc(#loc142)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc142)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc260)
  ^bb6:  // pred: ^bb5
    %10 = cir.get_global @GLOBAL_CONST_TRUE : !cir.ptr<!s32i> loc(#loc202)
    %11 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc153)
    %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc153)
    cir.brcond %12 ^bb7, ^bb15 loc(#loc261)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc262)
  ^bb8:  // pred: ^bb7
    %13 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc254)
    cir.store %13, %0 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc254)
    cir.br ^bb9 loc(#loc263)
  ^bb9:  // pred: ^bb8
    %14 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc159)
    %15 = cir.const #cir.int<0> : !s32i loc(#loc160)
    %16 = cir.cmp(ge, %14, %15) : !s32i, !cir.bool loc(#loc264)
    cir.brcond %16 ^bb10, ^bb11 loc(#loc265)
  ^bb10:  // pred: ^bb9
    %17 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc164)
    %18 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc165)
    %19 = cir.ptr_stride(%18 : !cir.ptr<!s32i>, %17 : !s32i), !cir.ptr<!s32i> loc(#loc165)
    %20 = cir.load %19 : !cir.ptr<!s32i>, !s32i loc(#loc165)
    cir.call @printIntLine(%20) : (!s32i) -> () loc(#loc166)
    cir.br ^bb12 loc(#loc162)
  ^bb11:  // pred: ^bb9
    %21 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 31>> loc(#loc167)
    %22 = cir.cast(array_to_ptrdecay, %21 : !cir.ptr<!cir.array<!s8i x 31>>), !cir.ptr<!s8i> loc(#loc167)
    cir.call @printLine(%22) : (!cir.ptr<!s8i>) -> () loc(#loc168)
    cir.br ^bb12 loc(#loc158)
  ^bb12:  // 2 preds: ^bb10, ^bb11
    cir.br ^bb13 loc(#loc158)
  ^bb13:  // pred: ^bb12
    cir.br ^bb14 loc(#loc156)
  ^bb14:  // pred: ^bb13
    cir.br ^bb15 loc(#loc152)
  ^bb15:  // 2 preds: ^bb6, ^bb14
    cir.br ^bb16 loc(#loc152)
  ^bb16:  // pred: ^bb15
    cir.return loc(#loc133)
  } loc(#loc253)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc267)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc268)
    %2 = cir.const #cir.int<1> : !s32i loc(#loc175)
    %3 = cir.unary(minus, %2) : !s32i, !s32i loc(#loc176)
    cir.store %3, %1 : !s32i, !cir.ptr<!s32i> loc(#loc269)
    cir.br ^bb1 loc(#loc270)
  ^bb1:  // pred: ^bb0
    %4 = cir.get_global @GLOBAL_CONST_TRUE : !cir.ptr<!s32i> loc(#loc202)
    %5 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc180)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc180)
    cir.brcond %6 ^bb2, ^bb3 loc(#loc271)
  ^bb2:  // pred: ^bb1
    %7 = cir.const #cir.int<7> : !s32i loc(#loc182)
    cir.store %7, %1 : !s32i, !cir.ptr<!s32i> loc(#loc272)
    cir.br ^bb3 loc(#loc179)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc179)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc273)
  ^bb5:  // pred: ^bb4
    %8 = cir.get_global @GLOBAL_CONST_TRUE : !cir.ptr<!s32i> loc(#loc202)
    %9 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc186)
    %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc186)
    cir.brcond %10 ^bb6, ^bb14 loc(#loc274)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc275)
  ^bb7:  // pred: ^bb6
    %11 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc267)
    cir.store %11, %0 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc267)
    cir.br ^bb8 loc(#loc276)
  ^bb8:  // pred: ^bb7
    %12 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc192)
    %13 = cir.const #cir.int<0> : !s32i loc(#loc193)
    %14 = cir.cmp(ge, %12, %13) : !s32i, !cir.bool loc(#loc277)
    cir.brcond %14 ^bb9, ^bb10 loc(#loc278)
  ^bb9:  // pred: ^bb8
    %15 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc197)
    %16 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc198)
    %17 = cir.ptr_stride(%16 : !cir.ptr<!s32i>, %15 : !s32i), !cir.ptr<!s32i> loc(#loc198)
    %18 = cir.load %17 : !cir.ptr<!s32i>, !s32i loc(#loc198)
    cir.call @printIntLine(%18) : (!s32i) -> () loc(#loc199)
    cir.br ^bb11 loc(#loc195)
  ^bb10:  // pred: ^bb8
    %19 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 31>> loc(#loc200)
    %20 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 31>>), !cir.ptr<!s8i> loc(#loc200)
    cir.call @printLine(%20) : (!cir.ptr<!s8i>) -> () loc(#loc201)
    cir.br ^bb11 loc(#loc191)
  ^bb11:  // 2 preds: ^bb9, ^bb10
    cir.br ^bb12 loc(#loc191)
  ^bb12:  // pred: ^bb11
    cir.br ^bb13 loc(#loc189)
  ^bb13:  // pred: ^bb12
    cir.br ^bb14 loc(#loc185)
  ^bb14:  // 2 preds: ^bb5, ^bb13
    cir.br ^bb15 loc(#loc185)
  ^bb15:  // pred: ^bb14
    cir.return loc(#loc170)
  } loc(#loc266)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE126_Buffer_Overread/s01/CWE126_Buffer_Overread__CWE129_rand_09.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase.h":109:1)
#loc2 = loc("../../../testcasesupport/std_testcase.h":109:18)
#loc3 = loc("/usr/include/stdlib.h":573:1)
#loc4 = loc("/usr/include/stdlib.h":573:24)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("CWE126_Buffer_Overread__CWE129_rand_09.c":44:27)
#loc10 = loc("CWE126_Buffer_Overread__CWE129_rand_09.c":22:1)
#loc11 = loc("CWE126_Buffer_Overread__CWE129_rand_09.c":48:1)
#loc12 = loc("CWE126_Buffer_Overread__CWE129_rand_09.c":35:13)
#loc13 = loc("CWE126_Buffer_Overread__CWE129_rand_09.c":35:34)
#loc14 = loc("CWE126_Buffer_Overread__CWE129_rand_09.c":24:5)
#loc15 = loc("CWE126_Buffer_Overread__CWE129_rand_09.c":24:9)
#loc16 = loc("CWE126_Buffer_Overread__CWE129_rand_09.c":26:13)
#loc17 = loc("CWE126_Buffer_Overread__CWE129_rand_09.c":26:12)
#loc18 = loc("CWE126_Buffer_Overread__CWE129_rand_09.c":26:5)
#loc19 = loc("CWE126_Buffer_Overread__CWE129_rand_09.c":27:5)
#loc20 = loc("CWE126_Buffer_Overread__CWE129_rand_09.c":31:5)
#loc21 = loc("CWE126_Buffer_Overread__CWE129_rand_09.c":27:8)
#loc22 = loc("CWE126_Buffer_Overread__CWE129_rand_09.c":28:5)
#loc24 = loc("CWE126_Buffer_Overread__CWE129_rand_09.c":30:9)
#loc25 = loc("CWE126_Buffer_Overread__CWE129_rand_09.c":32:5)
#loc26 = loc("CWE126_Buffer_Overread__CWE129_rand_09.c":47:5)
#loc27 = loc("CWE126_Buffer_Overread__CWE129_rand_09.c":32:8)
#loc28 = loc("CWE126_Buffer_Overread__CWE129_rand_09.c":33:5)
#loc29 = loc("CWE126_Buffer_Overread__CWE129_rand_09.c":34:9)
#loc30 = loc("CWE126_Buffer_Overread__CWE129_rand_09.c":46:9)
#loc31 = loc("CWE126_Buffer_Overread__CWE129_rand_09.c":38:13)
#loc32 = loc("CWE126_Buffer_Overread__CWE129_rand_09.c":45:13)
#loc33 = loc("CWE126_Buffer_Overread__CWE129_rand_09.c":38:17)
#loc34 = loc("CWE126_Buffer_Overread__CWE129_rand_09.c":38:25)
#loc35 = loc("CWE126_Buffer_Overread__CWE129_rand_09.c":39:13)
#loc36 = loc("CWE126_Buffer_Overread__CWE129_rand_09.c":41:13)
#loc37 = loc("CWE126_Buffer_Overread__CWE129_rand_09.c":43:13)
#loc38 = loc("CWE126_Buffer_Overread__CWE129_rand_09.c":40:37)
#loc39 = loc("CWE126_Buffer_Overread__CWE129_rand_09.c":40:30)
#loc40 = loc("CWE126_Buffer_Overread__CWE129_rand_09.c":40:17)
#loc41 = loc("CWE126_Buffer_Overread__CWE129_rand_09.c":44:17)
#loc42 = loc("CWE126_Buffer_Overread__CWE129_rand_09.c":180:1)
#loc43 = loc("CWE126_Buffer_Overread__CWE129_rand_09.c":186:1)
#loc44 = loc("CWE126_Buffer_Overread__CWE129_rand_09.c":182:5)
#loc45 = loc("CWE126_Buffer_Overread__CWE129_rand_09.c":182:14)
#loc46 = loc("CWE126_Buffer_Overread__CWE129_rand_09.c":183:5)
#loc47 = loc("CWE126_Buffer_Overread__CWE129_rand_09.c":183:14)
#loc48 = loc("CWE126_Buffer_Overread__CWE129_rand_09.c":184:5)
#loc49 = loc("CWE126_Buffer_Overread__CWE129_rand_09.c":184:14)
#loc50 = loc("CWE126_Buffer_Overread__CWE129_rand_09.c":185:5)
#loc51 = loc("CWE126_Buffer_Overread__CWE129_rand_09.c":185:14)
#loc52 = loc("../../../testcasesupport/std_testcase.h":110:1)
#loc53 = loc("../../../testcasesupport/std_testcase.h":110:18)
#loc54 = loc("CWE126_Buffer_Overread__CWE129_rand_09.c":68:19)
#loc55 = loc("CWE126_Buffer_Overread__CWE129_rand_09.c":81:27)
#loc56 = loc("CWE126_Buffer_Overread__CWE129_rand_09.c":55:1)
#loc57 = loc("CWE126_Buffer_Overread__CWE129_rand_09.c":85:1)
#loc58 = loc("CWE126_Buffer_Overread__CWE129_rand_09.c":73:13)
#loc59 = loc("CWE126_Buffer_Overread__CWE129_rand_09.c":73:34)
#loc60 = loc("CWE126_Buffer_Overread__CWE129_rand_09.c":57:5)
#loc61 = loc("CWE126_Buffer_Overread__CWE129_rand_09.c":57:9)
#loc62 = loc("CWE126_Buffer_Overread__CWE129_rand_09.c":59:13)
#loc63 = loc("CWE126_Buffer_Overread__CWE129_rand_09.c":59:12)
#loc64 = loc("CWE126_Buffer_Overread__CWE129_rand_09.c":59:5)
#loc65 = loc("CWE126_Buffer_Overread__CWE129_rand_09.c":60:5)
#loc66 = loc("CWE126_Buffer_Overread__CWE129_rand_09.c":64:5)
#loc67 = loc("CWE126_Buffer_Overread__CWE129_rand_09.c":60:8)
#loc68 = loc("CWE126_Buffer_Overread__CWE129_rand_09.c":61:5)
#loc70 = loc("CWE126_Buffer_Overread__CWE129_rand_09.c":63:9)
#loc71 = loc("CWE126_Buffer_Overread__CWE129_rand_09.c":65:5)
#loc72 = loc("CWE126_Buffer_Overread__CWE129_rand_09.c":84:5)
#loc73 = loc("CWE126_Buffer_Overread__CWE129_rand_09.c":65:8)
#loc74 = loc("CWE126_Buffer_Overread__CWE129_rand_09.c":66:5)
#loc75 = loc("CWE126_Buffer_Overread__CWE129_rand_09.c":69:5)
#loc76 = loc("CWE126_Buffer_Overread__CWE129_rand_09.c":71:5)
#loc77 = loc("CWE126_Buffer_Overread__CWE129_rand_09.c":68:9)
#loc78 = loc("CWE126_Buffer_Overread__CWE129_rand_09.c":72:9)
#loc79 = loc("CWE126_Buffer_Overread__CWE129_rand_09.c":83:9)
#loc80 = loc("CWE126_Buffer_Overread__CWE129_rand_09.c":75:13)
#loc81 = loc("CWE126_Buffer_Overread__CWE129_rand_09.c":82:13)
#loc82 = loc("CWE126_Buffer_Overread__CWE129_rand_09.c":75:17)
#loc83 = loc("CWE126_Buffer_Overread__CWE129_rand_09.c":75:25)
#loc85 = loc("CWE126_Buffer_Overread__CWE129_rand_09.c":75:30)
#loc86 = loc("CWE126_Buffer_Overread__CWE129_rand_09.c":75:38)
#loc87 = loc("CWE126_Buffer_Overread__CWE129_rand_09.c":75:40)
#loc88 = loc("CWE126_Buffer_Overread__CWE129_rand_09.c":76:13)
#loc89 = loc("CWE126_Buffer_Overread__CWE129_rand_09.c":78:13)
#loc90 = loc("CWE126_Buffer_Overread__CWE129_rand_09.c":80:13)
#loc91 = loc("CWE126_Buffer_Overread__CWE129_rand_09.c":77:37)
#loc92 = loc("CWE126_Buffer_Overread__CWE129_rand_09.c":77:30)
#loc93 = loc("CWE126_Buffer_Overread__CWE129_rand_09.c":77:17)
#loc94 = loc("CWE126_Buffer_Overread__CWE129_rand_09.c":81:17)
#loc95 = loc("CWE126_Buffer_Overread__CWE129_rand_09.c":88:1)
#loc96 = loc("CWE126_Buffer_Overread__CWE129_rand_09.c":113:1)
#loc97 = loc("CWE126_Buffer_Overread__CWE129_rand_09.c":101:13)
#loc98 = loc("CWE126_Buffer_Overread__CWE129_rand_09.c":101:34)
#loc99 = loc("CWE126_Buffer_Overread__CWE129_rand_09.c":90:5)
#loc100 = loc("CWE126_Buffer_Overread__CWE129_rand_09.c":90:9)
#loc101 = loc("CWE126_Buffer_Overread__CWE129_rand_09.c":92:13)
#loc102 = loc("CWE126_Buffer_Overread__CWE129_rand_09.c":92:12)
#loc103 = loc("CWE126_Buffer_Overread__CWE129_rand_09.c":92:5)
#loc104 = loc("CWE126_Buffer_Overread__CWE129_rand_09.c":93:5)
#loc105 = loc("CWE126_Buffer_Overread__CWE129_rand_09.c":97:5)
#loc106 = loc("CWE126_Buffer_Overread__CWE129_rand_09.c":93:8)
#loc107 = loc("CWE126_Buffer_Overread__CWE129_rand_09.c":94:5)
#loc109 = loc("CWE126_Buffer_Overread__CWE129_rand_09.c":96:9)
#loc110 = loc("CWE126_Buffer_Overread__CWE129_rand_09.c":98:5)
#loc111 = loc("CWE126_Buffer_Overread__CWE129_rand_09.c":112:5)
#loc112 = loc("CWE126_Buffer_Overread__CWE129_rand_09.c":98:8)
#loc113 = loc("CWE126_Buffer_Overread__CWE129_rand_09.c":99:5)
#loc114 = loc("CWE126_Buffer_Overread__CWE129_rand_09.c":100:9)
#loc115 = loc("CWE126_Buffer_Overread__CWE129_rand_09.c":111:9)
#loc116 = loc("CWE126_Buffer_Overread__CWE129_rand_09.c":103:13)
#loc117 = loc("CWE126_Buffer_Overread__CWE129_rand_09.c":110:13)
#loc118 = loc("CWE126_Buffer_Overread__CWE129_rand_09.c":103:17)
#loc119 = loc("CWE126_Buffer_Overread__CWE129_rand_09.c":103:25)
#loc121 = loc("CWE126_Buffer_Overread__CWE129_rand_09.c":103:30)
#loc122 = loc("CWE126_Buffer_Overread__CWE129_rand_09.c":103:38)
#loc123 = loc("CWE126_Buffer_Overread__CWE129_rand_09.c":103:40)
#loc124 = loc("CWE126_Buffer_Overread__CWE129_rand_09.c":104:13)
#loc125 = loc("CWE126_Buffer_Overread__CWE129_rand_09.c":106:13)
#loc126 = loc("CWE126_Buffer_Overread__CWE129_rand_09.c":108:13)
#loc127 = loc("CWE126_Buffer_Overread__CWE129_rand_09.c":105:37)
#loc128 = loc("CWE126_Buffer_Overread__CWE129_rand_09.c":105:30)
#loc129 = loc("CWE126_Buffer_Overread__CWE129_rand_09.c":105:17)
#loc130 = loc("CWE126_Buffer_Overread__CWE129_rand_09.c":109:27)
#loc131 = loc("CWE126_Buffer_Overread__CWE129_rand_09.c":109:17)
#loc132 = loc("CWE126_Buffer_Overread__CWE129_rand_09.c":116:1)
#loc133 = loc("CWE126_Buffer_Overread__CWE129_rand_09.c":148:1)
#loc134 = loc("CWE126_Buffer_Overread__CWE129_rand_09.c":135:13)
#loc135 = loc("CWE126_Buffer_Overread__CWE129_rand_09.c":135:34)
#loc136 = loc("CWE126_Buffer_Overread__CWE129_rand_09.c":118:5)
#loc137 = loc("CWE126_Buffer_Overread__CWE129_rand_09.c":118:9)
#loc138 = loc("CWE126_Buffer_Overread__CWE129_rand_09.c":120:13)
#loc139 = loc("CWE126_Buffer_Overread__CWE129_rand_09.c":120:12)
#loc140 = loc("CWE126_Buffer_Overread__CWE129_rand_09.c":120:5)
#loc141 = loc("CWE126_Buffer_Overread__CWE129_rand_09.c":121:5)
#loc142 = loc("CWE126_Buffer_Overread__CWE129_rand_09.c":131:5)
#loc143 = loc("CWE126_Buffer_Overread__CWE129_rand_09.c":121:8)
#loc144 = loc("CWE126_Buffer_Overread__CWE129_rand_09.c":122:5)
#loc145 = loc("CWE126_Buffer_Overread__CWE129_rand_09.c":125:5)
#loc146 = loc("CWE126_Buffer_Overread__CWE129_rand_09.c":127:5)
#loc147 = loc("CWE126_Buffer_Overread__CWE129_rand_09.c":124:19)
#loc148 = loc("CWE126_Buffer_Overread__CWE129_rand_09.c":124:9)
#loc149 = loc("CWE126_Buffer_Overread__CWE129_rand_09.c":130:16)
#loc150 = loc("CWE126_Buffer_Overread__CWE129_rand_09.c":130:9)
#loc151 = loc("CWE126_Buffer_Overread__CWE129_rand_09.c":132:5)
#loc152 = loc("CWE126_Buffer_Overread__CWE129_rand_09.c":147:5)
#loc153 = loc("CWE126_Buffer_Overread__CWE129_rand_09.c":132:8)
#loc154 = loc("CWE126_Buffer_Overread__CWE129_rand_09.c":133:5)
#loc155 = loc("CWE126_Buffer_Overread__CWE129_rand_09.c":134:9)
#loc156 = loc("CWE126_Buffer_Overread__CWE129_rand_09.c":146:9)
#loc157 = loc("CWE126_Buffer_Overread__CWE129_rand_09.c":138:13)
#loc158 = loc("CWE126_Buffer_Overread__CWE129_rand_09.c":145:13)
#loc159 = loc("CWE126_Buffer_Overread__CWE129_rand_09.c":138:17)
#loc160 = loc("CWE126_Buffer_Overread__CWE129_rand_09.c":138:25)
#loc161 = loc("CWE126_Buffer_Overread__CWE129_rand_09.c":139:13)
#loc162 = loc("CWE126_Buffer_Overread__CWE129_rand_09.c":141:13)
#loc163 = loc("CWE126_Buffer_Overread__CWE129_rand_09.c":143:13)
#loc164 = loc("CWE126_Buffer_Overread__CWE129_rand_09.c":140:37)
#loc165 = loc("CWE126_Buffer_Overread__CWE129_rand_09.c":140:30)
#loc166 = loc("CWE126_Buffer_Overread__CWE129_rand_09.c":140:17)
#loc167 = loc("CWE126_Buffer_Overread__CWE129_rand_09.c":144:27)
#loc168 = loc("CWE126_Buffer_Overread__CWE129_rand_09.c":144:17)
#loc169 = loc("CWE126_Buffer_Overread__CWE129_rand_09.c":151:1)
#loc170 = loc("CWE126_Buffer_Overread__CWE129_rand_09.c":178:1)
#loc171 = loc("CWE126_Buffer_Overread__CWE129_rand_09.c":165:13)
#loc172 = loc("CWE126_Buffer_Overread__CWE129_rand_09.c":165:34)
#loc173 = loc("CWE126_Buffer_Overread__CWE129_rand_09.c":153:5)
#loc174 = loc("CWE126_Buffer_Overread__CWE129_rand_09.c":153:9)
#loc175 = loc("CWE126_Buffer_Overread__CWE129_rand_09.c":155:13)
#loc176 = loc("CWE126_Buffer_Overread__CWE129_rand_09.c":155:12)
#loc177 = loc("CWE126_Buffer_Overread__CWE129_rand_09.c":155:5)
#loc178 = loc("CWE126_Buffer_Overread__CWE129_rand_09.c":156:5)
#loc179 = loc("CWE126_Buffer_Overread__CWE129_rand_09.c":161:5)
#loc180 = loc("CWE126_Buffer_Overread__CWE129_rand_09.c":156:8)
#loc181 = loc("CWE126_Buffer_Overread__CWE129_rand_09.c":157:5)
#loc182 = loc("CWE126_Buffer_Overread__CWE129_rand_09.c":160:16)
#loc183 = loc("CWE126_Buffer_Overread__CWE129_rand_09.c":160:9)
#loc184 = loc("CWE126_Buffer_Overread__CWE129_rand_09.c":162:5)
#loc185 = loc("CWE126_Buffer_Overread__CWE129_rand_09.c":177:5)
#loc186 = loc("CWE126_Buffer_Overread__CWE129_rand_09.c":162:8)
#loc187 = loc("CWE126_Buffer_Overread__CWE129_rand_09.c":163:5)
#loc188 = loc("CWE126_Buffer_Overread__CWE129_rand_09.c":164:9)
#loc189 = loc("CWE126_Buffer_Overread__CWE129_rand_09.c":176:9)
#loc190 = loc("CWE126_Buffer_Overread__CWE129_rand_09.c":168:13)
#loc191 = loc("CWE126_Buffer_Overread__CWE129_rand_09.c":175:13)
#loc192 = loc("CWE126_Buffer_Overread__CWE129_rand_09.c":168:17)
#loc193 = loc("CWE126_Buffer_Overread__CWE129_rand_09.c":168:25)
#loc194 = loc("CWE126_Buffer_Overread__CWE129_rand_09.c":169:13)
#loc195 = loc("CWE126_Buffer_Overread__CWE129_rand_09.c":171:13)
#loc196 = loc("CWE126_Buffer_Overread__CWE129_rand_09.c":173:13)
#loc197 = loc("CWE126_Buffer_Overread__CWE129_rand_09.c":170:37)
#loc198 = loc("CWE126_Buffer_Overread__CWE129_rand_09.c":170:30)
#loc199 = loc("CWE126_Buffer_Overread__CWE129_rand_09.c":170:17)
#loc200 = loc("CWE126_Buffer_Overread__CWE129_rand_09.c":174:27)
#loc201 = loc("CWE126_Buffer_Overread__CWE129_rand_09.c":174:17)
#loc202 = loc(fused[#loc1, #loc2])
#loc203 = loc(fused[#loc3, #loc4])
#loc204 = loc(fused[#loc5, #loc6])
#loc205 = loc(fused[#loc7, #loc8])
#loc206 = loc(fused[#loc10, #loc11])
#loc207 = loc(fused[#loc12, #loc13])
#loc208 = loc(fused[#loc14, #loc15])
#loc209 = loc(fused[#loc18, #loc16])
#loc210 = loc(fused[#loc19, #loc20])
#loc211 = loc(fused[#loc22, #loc20])
#loc212 = loc(fused[#loc24, #loc23])
#loc213 = loc(fused[#loc25, #loc26])
#loc214 = loc(fused[#loc28, #loc26])
#loc215 = loc(fused[#loc29, #loc30])
#loc216 = loc(fused[#loc31, #loc32])
#loc217 = loc(fused[#loc33, #loc34])
#loc218 = loc(fused[#loc35, #loc36, #loc37, #loc32])
#loc219 = loc(fused[#loc42, #loc43])
#loc220 = loc(fused[#loc44, #loc45])
#loc221 = loc(fused[#loc46, #loc47])
#loc222 = loc(fused[#loc48, #loc49])
#loc223 = loc(fused[#loc50, #loc51])
#loc224 = loc(fused[#loc52, #loc53])
#loc225 = loc(fused[#loc56, #loc57])
#loc226 = loc(fused[#loc58, #loc59])
#loc227 = loc(fused[#loc60, #loc61])
#loc228 = loc(fused[#loc64, #loc62])
#loc229 = loc(fused[#loc65, #loc66])
#loc230 = loc(fused[#loc68, #loc66])
#loc231 = loc(fused[#loc70, #loc69])
#loc232 = loc(fused[#loc71, #loc72])
#loc233 = loc(fused[#loc74, #loc75, #loc76, #loc72])
#loc234 = loc(fused[#loc78, #loc79])
#loc235 = loc(fused[#loc80, #loc81])
#loc236 = loc(fused[#loc82, #loc83])
#loc237 = loc(fused[#loc85, #loc87])
#loc238 = loc(fused[#loc88, #loc89, #loc90, #loc81])
#loc239 = loc(fused[#loc95, #loc96])
#loc240 = loc(fused[#loc97, #loc98])
#loc241 = loc(fused[#loc99, #loc100])
#loc242 = loc(fused[#loc103, #loc101])
#loc243 = loc(fused[#loc104, #loc105])
#loc244 = loc(fused[#loc107, #loc105])
#loc245 = loc(fused[#loc109, #loc108])
#loc246 = loc(fused[#loc110, #loc111])
#loc247 = loc(fused[#loc113, #loc111])
#loc248 = loc(fused[#loc114, #loc115])
#loc249 = loc(fused[#loc116, #loc117])
#loc250 = loc(fused[#loc118, #loc119])
#loc251 = loc(fused[#loc121, #loc123])
#loc252 = loc(fused[#loc124, #loc125, #loc126, #loc117])
#loc253 = loc(fused[#loc132, #loc133])
#loc254 = loc(fused[#loc134, #loc135])
#loc255 = loc(fused[#loc136, #loc137])
#loc256 = loc(fused[#loc140, #loc138])
#loc257 = loc(fused[#loc141, #loc142])
#loc258 = loc(fused[#loc144, #loc145, #loc146, #loc142])
#loc259 = loc(fused[#loc150, #loc149])
#loc260 = loc(fused[#loc151, #loc152])
#loc261 = loc(fused[#loc154, #loc152])
#loc262 = loc(fused[#loc155, #loc156])
#loc263 = loc(fused[#loc157, #loc158])
#loc264 = loc(fused[#loc159, #loc160])
#loc265 = loc(fused[#loc161, #loc162, #loc163, #loc158])
#loc266 = loc(fused[#loc169, #loc170])
#loc267 = loc(fused[#loc171, #loc172])
#loc268 = loc(fused[#loc173, #loc174])
#loc269 = loc(fused[#loc177, #loc175])
#loc270 = loc(fused[#loc178, #loc179])
#loc271 = loc(fused[#loc181, #loc179])
#loc272 = loc(fused[#loc183, #loc182])
#loc273 = loc(fused[#loc184, #loc185])
#loc274 = loc(fused[#loc187, #loc185])
#loc275 = loc(fused[#loc188, #loc189])
#loc276 = loc(fused[#loc190, #loc191])
#loc277 = loc(fused[#loc192, #loc193])
#loc278 = loc(fused[#loc194, #loc195, #loc196, #loc191])
