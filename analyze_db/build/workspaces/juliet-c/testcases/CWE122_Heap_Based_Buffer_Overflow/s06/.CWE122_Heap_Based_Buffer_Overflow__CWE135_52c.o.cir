!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_52c.c":24:60)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_52c.c":24:67)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_52c.c":42:64)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_52c.c":42:71)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_52c.c":56:64)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_52c.c":56:71)
#loc124 = loc(fused[#loc15, #loc16])
#loc135 = loc(fused[#loc50, #loc51])
#loc146 = loc(fused[#loc86, #loc87])
module @"/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE135_52c.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e", "dlti.endianness" = "little">} {
  cir.func private @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc117)
  cir.func private @calloc(!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc118)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc119)
  cir.func private @wcscpy(!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc120)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc121)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc122)
  cir.func @CWE122_Heap_Based_Buffer_Overflow__CWE135_52c_badSink(%arg0: !cir.ptr<!void> loc(fused[#loc15, #loc16])) extra(#fn_attr1) {
    %0 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc125)
    %1 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc126)
    %2 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data", init] {alignment = 8 : i64} loc(#loc124)
    cir.store %arg0, %2 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc21)
    cir.br ^bb1 loc(#loc127)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @strlen : !cir.ptr<!cir.func<(!cir.ptr<!s8i>) -> !u64i>> loc(#loc24)
    %4 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc25)
    %5 = cir.cast(bitcast, %4 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc25)
    %6 = cir.call @strlen(%5) : (!cir.ptr<!s8i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc24)
    cir.store %6, %0 : !u64i, !cir.ptr<!u64i> loc(#loc125)
    %7 = cir.get_global @calloc : !cir.ptr<!cir.func<(!u64i, !u64i) -> !cir.ptr<!void>>> loc(#loc26)
    %8 = cir.load %0 : !cir.ptr<!u64i>, !u64i loc(#loc27)
    %9 = cir.const #cir.int<1> : !s32i loc(#loc28)
    %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc28)
    %11 = cir.binop(add, %8, %10) : !u64i loc(#loc128)
    %12 = cir.const #cir.int<4> : !u64i loc(#loc129)
    %13 = cir.call @calloc(%11, %12) : (!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc26)
    cir.store %13, %1 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc126)
    cir.br ^bb2 loc(#loc130)
  ^bb2:  // pred: ^bb1
    %14 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc33)
    %15 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc34)
    %16 = cir.cmp(eq, %14, %15) : !cir.ptr<!void>, !cir.bool loc(#loc131)
    cir.brcond %16 ^bb3, ^bb4 loc(#loc132)
  ^bb3:  // pred: ^bb2
    %17 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc36)
    %18 = cir.const #cir.int<1> : !s32i loc(#loc37)
    %19 = cir.unary(minus, %18) nsw : !s32i, !s32i loc(#loc38)
    cir.call @exit(%19) : (!s32i) -> () extra(#fn_attr) loc(#loc36)
    cir.br ^bb4 loc(#loc32)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc32)
  ^bb5:  // pred: ^bb4
    %20 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc39)
    %21 = cir.cast(bitcast, %20 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc39)
    %22 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc40)
    %23 = cir.cast(bitcast, %22 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc40)
    %24 = cir.call @wcscpy(%21, %23) : (!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc41)
    %25 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc42)
    %26 = cir.cast(bitcast, %25 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc42)
    cir.call @printLine(%26) : (!cir.ptr<!s8i>) -> () loc(#loc43)
    %27 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc44)
    cir.call @free(%27) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc45)
    cir.br ^bb6 loc(#loc23)
  ^bb6:  // pred: ^bb5
    cir.return loc(#loc14)
  } loc(#loc123)
  cir.func private @strcpy(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc133)
  cir.func @CWE122_Heap_Based_Buffer_Overflow__CWE135_52c_goodG2BSink(%arg0: !cir.ptr<!void> loc(fused[#loc50, #loc51])) extra(#fn_attr1) {
    %0 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc136)
    %1 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc137)
    %2 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data", init] {alignment = 8 : i64} loc(#loc135)
    cir.store %arg0, %2 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc56)
    cir.br ^bb1 loc(#loc138)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @strlen : !cir.ptr<!cir.func<(!cir.ptr<!s8i>) -> !u64i>> loc(#loc59)
    %4 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc60)
    %5 = cir.cast(bitcast, %4 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc60)
    %6 = cir.call @strlen(%5) : (!cir.ptr<!s8i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc59)
    cir.store %6, %0 : !u64i, !cir.ptr<!u64i> loc(#loc136)
    %7 = cir.get_global @calloc : !cir.ptr<!cir.func<(!u64i, !u64i) -> !cir.ptr<!void>>> loc(#loc61)
    %8 = cir.load %0 : !cir.ptr<!u64i>, !u64i loc(#loc62)
    %9 = cir.const #cir.int<1> : !s32i loc(#loc63)
    %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc63)
    %11 = cir.binop(add, %8, %10) : !u64i loc(#loc139)
    %12 = cir.const #cir.int<1> : !s32i loc(#loc64)
    %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc64)
    %14 = cir.call @calloc(%11, %13) : (!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc61)
    cir.store %14, %1 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc137)
    cir.br ^bb2 loc(#loc140)
  ^bb2:  // pred: ^bb1
    %15 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc67)
    %16 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc68)
    %17 = cir.cmp(eq, %15, %16) : !cir.ptr<!void>, !cir.bool loc(#loc141)
    cir.brcond %17 ^bb3, ^bb4 loc(#loc142)
  ^bb3:  // pred: ^bb2
    %18 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc70)
    %19 = cir.const #cir.int<1> : !s32i loc(#loc71)
    %20 = cir.unary(minus, %19) nsw : !s32i, !s32i loc(#loc72)
    cir.call @exit(%20) : (!s32i) -> () extra(#fn_attr) loc(#loc70)
    cir.br ^bb4 loc(#loc66)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc66)
  ^bb5:  // pred: ^bb4
    %21 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc73)
    %22 = cir.cast(bitcast, %21 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc73)
    %23 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc74)
    %24 = cir.cast(bitcast, %23 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc74)
    %25 = cir.call @strcpy(%22, %24) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc75)
    %26 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc76)
    %27 = cir.cast(bitcast, %26 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc76)
    cir.call @printLine(%27) : (!cir.ptr<!s8i>) -> () loc(#loc77)
    %28 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc78)
    cir.call @free(%28) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc79)
    cir.br ^bb6 loc(#loc58)
  ^bb6:  // pred: ^bb5
    cir.return loc(#loc49)
  } loc(#loc134)
  cir.func private @wcslen(!cir.ptr<!s32i>) -> !u64i extra(#fn_attr) loc(#loc143)
  cir.func private @printWLine(!cir.ptr<!s32i>) loc(#loc144)
  cir.func @CWE122_Heap_Based_Buffer_Overflow__CWE135_52c_goodB2GSink(%arg0: !cir.ptr<!void> loc(fused[#loc86, #loc87])) extra(#fn_attr1) {
    %0 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc147)
    %1 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc148)
    %2 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data", init] {alignment = 8 : i64} loc(#loc146)
    cir.store %arg0, %2 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc92)
    cir.br ^bb1 loc(#loc149)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @wcslen : !cir.ptr<!cir.func<(!cir.ptr<!s32i>) -> !u64i>> loc(#loc95)
    %4 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc96)
    %5 = cir.cast(bitcast, %4 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc96)
    %6 = cir.call @wcslen(%5) : (!cir.ptr<!s32i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc95)
    cir.store %6, %0 : !u64i, !cir.ptr<!u64i> loc(#loc147)
    %7 = cir.get_global @calloc : !cir.ptr<!cir.func<(!u64i, !u64i) -> !cir.ptr<!void>>> loc(#loc97)
    %8 = cir.load %0 : !cir.ptr<!u64i>, !u64i loc(#loc98)
    %9 = cir.const #cir.int<1> : !s32i loc(#loc99)
    %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc99)
    %11 = cir.binop(add, %8, %10) : !u64i loc(#loc150)
    %12 = cir.const #cir.int<4> : !u64i loc(#loc151)
    %13 = cir.call @calloc(%11, %12) : (!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc97)
    cir.store %13, %1 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc148)
    cir.br ^bb2 loc(#loc152)
  ^bb2:  // pred: ^bb1
    %14 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc104)
    %15 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc105)
    %16 = cir.cmp(eq, %14, %15) : !cir.ptr<!void>, !cir.bool loc(#loc153)
    cir.brcond %16 ^bb3, ^bb4 loc(#loc154)
  ^bb3:  // pred: ^bb2
    %17 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc107)
    %18 = cir.const #cir.int<1> : !s32i loc(#loc108)
    %19 = cir.unary(minus, %18) nsw : !s32i, !s32i loc(#loc109)
    cir.call @exit(%19) : (!s32i) -> () extra(#fn_attr) loc(#loc107)
    cir.br ^bb4 loc(#loc103)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc103)
  ^bb5:  // pred: ^bb4
    %20 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc110)
    %21 = cir.cast(bitcast, %20 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc110)
    %22 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc111)
    %23 = cir.cast(bitcast, %22 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc111)
    %24 = cir.call @wcscpy(%21, %23) : (!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc112)
    %25 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc113)
    %26 = cir.cast(bitcast, %25 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc113)
    cir.call @printWLine(%26) : (!cir.ptr<!s32i>) -> () loc(#loc114)
    %27 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc115)
    cir.call @free(%27) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc116)
    cir.br ^bb6 loc(#loc94)
  ^bb6:  // pred: ^bb5
    cir.return loc(#loc85)
  } loc(#loc145)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE135_52c.c":0:0)
#loc1 = loc("/usr/include/string.h":407:1)
#loc2 = loc("/usr/include/string.h":408:33)
#loc3 = loc("/usr/include/stdlib.h":675:1)
#loc4 = loc("/usr/include/stdlib.h":676:14)
#loc5 = loc("/usr/include/stdlib.h":756:1)
#loc6 = loc("/usr/include/stdlib.h":756:70)
#loc7 = loc("/usr/include/wchar.h":98:1)
#loc8 = loc("/usr/include/wchar.h":100:14)
#loc9 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc10 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc11 = loc("/usr/include/stdlib.h":687:1)
#loc12 = loc("/usr/include/stdlib.h":687:32)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_52c.c":24:1)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_52c.c":35:1)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_52c.c":28:9)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_52c.c":28:45)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_52c.c":29:9)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_52c.c":29:64)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_52c.c":25:1)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_52c.c":26:5)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_52c.c":34:5)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_52c.c":28:26)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_52c.c":28:41)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_52c.c":29:31)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_52c.c":29:38)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_52c.c":29:46)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_52c.c":29:49)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_52c.c":29:63)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_52c.c":30:9)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_52c.c":30:37)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_52c.c":30:13)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_52c.c":30:21)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_52c.c":30:27)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_52c.c":30:28)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_52c.c":30:34)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_52c.c":30:33)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_52c.c":31:22)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_52c.c":31:28)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_52c.c":31:15)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_52c.c":32:27)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_52c.c":32:9)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_52c.c":33:14)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_52c.c":33:9)
#loc46 = loc("/usr/include/string.h":141:1)
#loc47 = loc("/usr/include/string.h":142:14)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_52c.c":42:1)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_52c.c":53:1)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_52c.c":46:9)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_52c.c":46:45)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_52c.c":47:9)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_52c.c":47:50)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_52c.c":43:1)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_52c.c":44:5)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_52c.c":52:5)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_52c.c":46:26)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_52c.c":46:41)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_52c.c":47:31)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_52c.c":47:38)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_52c.c":47:46)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_52c.c":47:49)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_52c.c":48:9)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_52c.c":48:37)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_52c.c":48:13)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_52c.c":48:21)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_52c.c":48:27)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_52c.c":48:28)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_52c.c":48:34)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_52c.c":48:33)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_52c.c":49:22)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_52c.c":49:28)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_52c.c":49:15)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_52c.c":50:27)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_52c.c":50:9)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_52c.c":51:14)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_52c.c":51:9)
#loc80 = loc("/usr/include/wchar.h":247:1)
#loc81 = loc("/usr/include/wchar.h":247:51)
#loc82 = loc("../../../testcasesupport/std_testcase_io.h":16:1)
#loc83 = loc("../../../testcasesupport/std_testcase_io.h":16:37)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_52c.c":56:1)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_52c.c":67:1)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_52c.c":60:9)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_52c.c":60:48)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_52c.c":61:9)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_52c.c":61:64)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_52c.c":57:1)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_52c.c":58:5)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_52c.c":66:5)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_52c.c":60:26)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_52c.c":60:44)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_52c.c":61:31)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_52c.c":61:38)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_52c.c":61:46)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_52c.c":61:49)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_52c.c":61:63)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_52c.c":62:9)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_52c.c":62:37)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_52c.c":62:13)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_52c.c":62:21)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_52c.c":62:27)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_52c.c":62:28)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_52c.c":62:34)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_52c.c":62:33)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_52c.c":63:22)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_52c.c":63:28)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_52c.c":63:15)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_52c.c":64:31)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_52c.c":64:9)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_52c.c":65:14)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_52c.c":65:9)
#loc117 = loc(fused[#loc1, #loc2])
#loc118 = loc(fused[#loc3, #loc4])
#loc119 = loc(fused[#loc5, #loc6])
#loc120 = loc(fused[#loc7, #loc8])
#loc121 = loc(fused[#loc9, #loc10])
#loc122 = loc(fused[#loc11, #loc12])
#loc123 = loc(fused[#loc13, #loc14])
#loc125 = loc(fused[#loc17, #loc18])
#loc126 = loc(fused[#loc19, #loc20])
#loc127 = loc(fused[#loc22, #loc23])
#loc128 = loc(fused[#loc27, #loc28])
#loc129 = loc(fused[#loc29, #loc30])
#loc130 = loc(fused[#loc31, #loc32])
#loc131 = loc(fused[#loc33, #loc34])
#loc132 = loc(fused[#loc35, #loc32])
#loc133 = loc(fused[#loc46, #loc47])
#loc134 = loc(fused[#loc48, #loc49])
#loc136 = loc(fused[#loc52, #loc53])
#loc137 = loc(fused[#loc54, #loc55])
#loc138 = loc(fused[#loc57, #loc58])
#loc139 = loc(fused[#loc62, #loc63])
#loc140 = loc(fused[#loc65, #loc66])
#loc141 = loc(fused[#loc67, #loc68])
#loc142 = loc(fused[#loc69, #loc66])
#loc143 = loc(fused[#loc80, #loc81])
#loc144 = loc(fused[#loc82, #loc83])
#loc145 = loc(fused[#loc84, #loc85])
#loc147 = loc(fused[#loc88, #loc89])
#loc148 = loc(fused[#loc90, #loc91])
#loc149 = loc(fused[#loc93, #loc94])
#loc150 = loc(fused[#loc98, #loc99])
#loc151 = loc(fused[#loc100, #loc101])
#loc152 = loc(fused[#loc102, #loc103])
#loc153 = loc(fused[#loc104, #loc105])
#loc154 = loc(fused[#loc106, #loc103])
