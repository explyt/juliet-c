!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc7 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_61b.c":23:79)
#loc8 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_61b.c":23:86)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_61b.c":37:83)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_61b.c":37:90)
#loc58 = loc(fused[#loc7, #loc8])
#loc69 = loc(fused[#loc32, #loc33])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_61b.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc55)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc56)
  cir.func @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_61b_badSource(%arg0: !cir.ptr<!s8i> loc(fused[#loc7, #loc8])) -> !cir.ptr<!s8i> extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc58)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["__retval"] {alignment = 8 : i64} loc(#loc6)
    cir.store %arg0, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc9)
    %2 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc10)
    %3 = cir.const #cir.int<50> : !s32i loc(#loc11)
    %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc11)
    %5 = cir.const #cir.int<1> : !u64i loc(#loc59)
    %6 = cir.binop(mul, %4, %5) : !u64i loc(#loc60)
    %7 = cir.call @malloc(%6) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc10)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc61)
    cir.store %8, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc62)
    cir.br ^bb1 loc(#loc63)
  ^bb1:  // pred: ^bb0
    %9 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc18)
    %10 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc19)
    %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc19)
    %12 = cir.cmp(eq, %9, %11) : !cir.ptr<!s8i>, !cir.bool loc(#loc64)
    cir.brcond %12 ^bb2, ^bb3 loc(#loc65)
  ^bb2:  // pred: ^bb1
    %13 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc21)
    %14 = cir.const #cir.int<1> : !s32i loc(#loc22)
    %15 = cir.unary(minus, %14) : !s32i, !s32i loc(#loc23)
    cir.call @exit(%15) : (!s32i) -> () extra(#fn_attr) loc(#loc21)
    cir.br ^bb3 loc(#loc17)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc17)
  ^bb4:  // pred: ^bb3
    %16 = cir.const #cir.int<0> : !s32i loc(#loc24)
    %17 = cir.cast(integral, %16 : !s32i), !s8i loc(#loc24)
    %18 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc25)
    %19 = cir.const #cir.int<0> : !s32i loc(#loc26)
    %20 = cir.ptr_stride(%18 : !cir.ptr<!s8i>, %19 : !s32i), !cir.ptr<!s8i> loc(#loc27)
    cir.store %17, %20 : !s8i, !cir.ptr<!s8i> loc(#loc66)
    %21 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc28)
    cir.store %21, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc67)
    %22 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc67)
    cir.return %22 : !cir.ptr<!s8i> loc(#loc67)
  } loc(#loc57)
  cir.func @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_61b_goodG2BSource(%arg0: !cir.ptr<!s8i> loc(fused[#loc32, #loc33])) -> !cir.ptr<!s8i> extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc69)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["__retval"] {alignment = 8 : i64} loc(#loc31)
    cir.store %arg0, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc34)
    %2 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc35)
    %3 = cir.const #cir.int<100> : !s32i loc(#loc36)
    %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc36)
    %5 = cir.const #cir.int<1> : !u64i loc(#loc70)
    %6 = cir.binop(mul, %4, %5) : !u64i loc(#loc71)
    %7 = cir.call @malloc(%6) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc35)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc72)
    cir.store %8, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc73)
    cir.br ^bb1 loc(#loc74)
  ^bb1:  // pred: ^bb0
    %9 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc43)
    %10 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc44)
    %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc44)
    %12 = cir.cmp(eq, %9, %11) : !cir.ptr<!s8i>, !cir.bool loc(#loc75)
    cir.brcond %12 ^bb2, ^bb3 loc(#loc76)
  ^bb2:  // pred: ^bb1
    %13 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc46)
    %14 = cir.const #cir.int<1> : !s32i loc(#loc47)
    %15 = cir.unary(minus, %14) : !s32i, !s32i loc(#loc48)
    cir.call @exit(%15) : (!s32i) -> () extra(#fn_attr) loc(#loc46)
    cir.br ^bb3 loc(#loc42)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc42)
  ^bb4:  // pred: ^bb3
    %16 = cir.const #cir.int<0> : !s32i loc(#loc49)
    %17 = cir.cast(integral, %16 : !s32i), !s8i loc(#loc49)
    %18 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc50)
    %19 = cir.const #cir.int<0> : !s32i loc(#loc51)
    %20 = cir.ptr_stride(%18 : !cir.ptr<!s8i>, %19 : !s32i), !cir.ptr<!s8i> loc(#loc52)
    cir.store %17, %20 : !s8i, !cir.ptr<!s8i> loc(#loc77)
    %21 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc53)
    cir.store %21, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc78)
    %22 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc78)
    cir.return %22 : !cir.ptr<!s8i> loc(#loc78)
  } loc(#loc68)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_61b.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_61b.c":23:1)
#loc6 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_61b.c":30:1)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_61b.c":24:1)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_61b.c":26:20)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_61b.c":26:27)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_61b.c":26:30)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_61b.c":26:41)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_61b.c":26:42)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_61b.c":26:5)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_61b.c":27:5)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_61b.c":27:33)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_61b.c":27:9)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_61b.c":27:17)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_61b.c":27:23)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_61b.c":27:24)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_61b.c":27:30)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_61b.c":27:29)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_61b.c":28:15)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_61b.c":28:5)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_61b.c":28:10)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_61b.c":28:11)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_61b.c":29:12)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_61b.c":29:5)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_61b.c":37:1)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_61b.c":44:1)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_61b.c":38:1)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_61b.c":40:20)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_61b.c":40:27)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_61b.c":40:31)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_61b.c":40:42)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_61b.c":40:43)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_61b.c":40:5)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_61b.c":41:5)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_61b.c":41:33)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_61b.c":41:9)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_61b.c":41:17)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_61b.c":41:23)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_61b.c":41:24)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_61b.c":41:30)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_61b.c":41:29)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_61b.c":42:15)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_61b.c":42:5)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_61b.c":42:10)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_61b.c":42:11)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_61b.c":43:12)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_61b.c":43:5)
#loc55 = loc(fused[#loc1, #loc2])
#loc56 = loc(fused[#loc3, #loc4])
#loc57 = loc(fused[#loc5, #loc6])
#loc59 = loc(fused[#loc12, #loc13])
#loc60 = loc(fused[#loc11, #loc13])
#loc61 = loc(fused[#loc10, #loc14])
#loc62 = loc(fused[#loc15, #loc14])
#loc63 = loc(fused[#loc16, #loc17])
#loc64 = loc(fused[#loc18, #loc19])
#loc65 = loc(fused[#loc20, #loc17])
#loc66 = loc(fused[#loc25, #loc24])
#loc67 = loc(fused[#loc29, #loc28])
#loc68 = loc(fused[#loc30, #loc31])
#loc70 = loc(fused[#loc37, #loc38])
#loc71 = loc(fused[#loc36, #loc38])
#loc72 = loc(fused[#loc35, #loc39])
#loc73 = loc(fused[#loc40, #loc39])
#loc74 = loc(fused[#loc41, #loc42])
#loc75 = loc(fused[#loc43, #loc44])
#loc76 = loc(fused[#loc45, #loc42])
#loc77 = loc(fused[#loc50, #loc49])
#loc78 = loc(fused[#loc54, #loc53])
