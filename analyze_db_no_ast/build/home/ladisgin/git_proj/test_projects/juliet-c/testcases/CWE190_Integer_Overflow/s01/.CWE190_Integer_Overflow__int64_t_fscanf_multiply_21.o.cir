!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.struct<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.struct<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.struct<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc13 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":26:21)
#loc14 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":26:29)
#loc59 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":59:26)
#loc60 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":59:34)
#loc109 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":95:26)
#loc110 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":95:34)
#loc157 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":126:25)
#loc158 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":126:33)
#loc193 = loc(fused[#loc13, #loc14])
#loc211 = loc(fused[#loc59, #loc60])
#loc229 = loc(fused[#loc109, #loc110])
#loc247 = loc(fused[#loc157, #loc158])
!ty__IO_FILE = !cir.struct<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @__isoc99_fscanf(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i loc(#loc187)
  cir.global "private"  external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc188)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"%ld\00" : !cir.array<!s8i x 4>> : !cir.array<!s8i x 4> {alignment = 1 : i64} loc(#loc189)
  cir.global "private"  internal dsolocal @badStatic = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc190)
  cir.func private  @printLongLongLine(!s64i) loc(#loc191)
  cir.func internal private  @badSink(%arg0: !s64i loc(fused[#loc13, #loc14])) extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data", init] {alignment = 8 : i64} loc(#loc193)
    cir.store %arg0, %0 : !s64i, !cir.ptr<!s64i> loc(#loc15)
    cir.scope {
      %1 = cir.get_global @badStatic : !cir.ptr<!s32i> loc(#loc190)
      %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc18)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc18)
      cir.if %3 {
        cir.scope {
          %4 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc22)
          %5 = cir.const #cir.int<0> : !s32i loc(#loc23)
          %6 = cir.cast(integral, %5 : !s32i), !s64i loc(#loc23)
          %7 = cir.cmp(gt, %4, %6) : !s64i, !s32i loc(#loc197)
          %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc24)
          cir.if %8 {
            %9 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc199)
            %10 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc28)
            %11 = cir.const #cir.int<2> : !s32i loc(#loc27)
            %12 = cir.cast(integral, %11 : !s32i), !s64i loc(#loc27)
            %13 = cir.binop(mul, %10, %12) nsw : !s64i loc(#loc28)
            cir.store %13, %9 : !s64i, !cir.ptr<!s64i> loc(#loc199)
            %14 = cir.load %9 : !cir.ptr<!s64i>, !s64i loc(#loc29)
            cir.call @printLongLongLine(%14) : (!s64i) -> () loc(#loc30)
          } loc(#loc198)
        } loc(#loc196)
      } loc(#loc195)
    } loc(#loc194)
    cir.return loc(#loc12)
  } loc(#loc192)
  cir.func no_proto  @CWE190_Integer_Overflow__int64_t_fscanf_multiply_21_bad() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc201)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc35)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc202)
    %2 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc37)
    %3 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc188)
    %4 = cir.load %3 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc38)
    %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc189)
    %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc189)
    %7 = cir.call @__isoc99_fscanf(%4, %6, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s64i>) -> !s32i loc(#loc37)
    %8 = cir.const #cir.int<1> : !s32i loc(#loc39)
    %9 = cir.get_global @badStatic : !cir.ptr<!s32i> loc(#loc190)
    cir.store %8, %9 : !s32i, !cir.ptr<!s32i> loc(#loc203)
    %10 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc41)
    cir.call @badSink(%10) : (!s64i) -> () loc(#loc42)
    cir.return loc(#loc32)
  } loc(#loc200)
  cir.func no_proto  @CWE190_Integer_Overflow__int64_t_fscanf_multiply_21_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc205)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc45)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc206)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc47)
    %2 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc207)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc49)
    cir.return loc(#loc44)
  } loc(#loc204)
  cir.global "private"  internal dsolocal @goodB2G1Static = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc208)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc209)
  cir.global "private"  constant internal dsolocal @".str1" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc55)
  cir.global "private"  constant internal dsolocal @".str2" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc56)
  cir.func internal private  @goodB2G1Sink(%arg0: !s64i loc(fused[#loc59, #loc60])) extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data", init] {alignment = 8 : i64} loc(#loc211)
    cir.store %arg0, %0 : !s64i, !cir.ptr<!s64i> loc(#loc61)
    cir.scope {
      %1 = cir.get_global @goodB2G1Static : !cir.ptr<!s32i> loc(#loc208)
      %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc64)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc64)
      cir.if %3 {
        %4 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc55)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc55)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc68)
      } else {
        cir.scope {
          %4 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc71)
          %5 = cir.const #cir.int<0> : !s32i loc(#loc72)
          %6 = cir.cast(integral, %5 : !s32i), !s64i loc(#loc72)
          %7 = cir.cmp(gt, %4, %6) : !s64i, !s32i loc(#loc215)
          %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc73)
          cir.if %8 {
            cir.scope {
              %9 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc77)
              %10 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc78)
              %11 = cir.const #cir.int<2> : !s32i loc(#loc79)
              %12 = cir.cast(integral, %11 : !s32i), !s64i loc(#loc79)
              %13 = cir.binop(div, %10, %12) : !s64i loc(#loc218)
              %14 = cir.cmp(lt, %9, %13) : !s64i, !s32i loc(#loc219)
              %15 = cir.cast(int_to_bool, %14 : !s32i), !cir.bool loc(#loc81)
              cir.if %15 {
                %16 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc221)
                %17 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc87)
                %18 = cir.const #cir.int<2> : !s32i loc(#loc86)
                %19 = cir.cast(integral, %18 : !s32i), !s64i loc(#loc86)
                %20 = cir.binop(mul, %17, %19) nsw : !s64i loc(#loc87)
                cir.store %20, %16 : !s64i, !cir.ptr<!s64i> loc(#loc221)
                %21 = cir.load %16 : !cir.ptr<!s64i>, !s64i loc(#loc88)
                cir.call @printLongLongLine(%21) : (!s64i) -> () loc(#loc89)
              } else {
                %16 = cir.get_global @".str2" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc56)
                %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc56)
                cir.call @printLine(%17) : (!cir.ptr<!s8i>) -> () loc(#loc90)
              } loc(#loc220)
            } loc(#loc217)
          } loc(#loc216)
        } loc(#loc214)
      } loc(#loc213)
    } loc(#loc212)
    cir.return loc(#loc58)
  } loc(#loc210)
  cir.func no_proto internal private  @goodB2G1() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc223)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc95)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc224)
    %2 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc97)
    %3 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc188)
    %4 = cir.load %3 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc98)
    %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc225)
    %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc225)
    %7 = cir.call @__isoc99_fscanf(%4, %6, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s64i>) -> !s32i loc(#loc97)
    %8 = cir.const #cir.int<0> : !s32i loc(#loc101)
    %9 = cir.get_global @goodB2G1Static : !cir.ptr<!s32i> loc(#loc208)
    cir.store %8, %9 : !s32i, !cir.ptr<!s32i> loc(#loc226)
    %10 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc103)
    cir.call @goodB2G1Sink(%10) : (!s64i) -> () loc(#loc104)
    cir.return loc(#loc92)
  } loc(#loc222)
  cir.global "private"  internal dsolocal @goodB2G2Static = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc227)
  cir.func internal private  @goodB2G2Sink(%arg0: !s64i loc(fused[#loc109, #loc110])) extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data", init] {alignment = 8 : i64} loc(#loc229)
    cir.store %arg0, %0 : !s64i, !cir.ptr<!s64i> loc(#loc111)
    cir.scope {
      %1 = cir.get_global @goodB2G2Static : !cir.ptr<!s32i> loc(#loc227)
      %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc114)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc114)
      cir.if %3 {
        cir.scope {
          %4 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc118)
          %5 = cir.const #cir.int<0> : !s32i loc(#loc119)
          %6 = cir.cast(integral, %5 : !s32i), !s64i loc(#loc119)
          %7 = cir.cmp(gt, %4, %6) : !s64i, !s32i loc(#loc233)
          %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc120)
          cir.if %8 {
            cir.scope {
              %9 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc124)
              %10 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc125)
              %11 = cir.const #cir.int<2> : !s32i loc(#loc126)
              %12 = cir.cast(integral, %11 : !s32i), !s64i loc(#loc126)
              %13 = cir.binop(div, %10, %12) : !s64i loc(#loc236)
              %14 = cir.cmp(lt, %9, %13) : !s64i, !s32i loc(#loc237)
              %15 = cir.cast(int_to_bool, %14 : !s32i), !cir.bool loc(#loc128)
              cir.if %15 {
                %16 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc239)
                %17 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc134)
                %18 = cir.const #cir.int<2> : !s32i loc(#loc133)
                %19 = cir.cast(integral, %18 : !s32i), !s64i loc(#loc133)
                %20 = cir.binop(mul, %17, %19) nsw : !s64i loc(#loc134)
                cir.store %20, %16 : !s64i, !cir.ptr<!s64i> loc(#loc239)
                %21 = cir.load %16 : !cir.ptr<!s64i>, !s64i loc(#loc135)
                cir.call @printLongLongLine(%21) : (!s64i) -> () loc(#loc136)
              } else {
                %16 = cir.get_global @".str2" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc137)
                %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc137)
                cir.call @printLine(%17) : (!cir.ptr<!s8i>) -> () loc(#loc138)
              } loc(#loc238)
            } loc(#loc235)
          } loc(#loc234)
        } loc(#loc232)
      } loc(#loc231)
    } loc(#loc230)
    cir.return loc(#loc108)
  } loc(#loc228)
  cir.func no_proto internal private  @goodB2G2() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc241)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc143)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc242)
    %2 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc145)
    %3 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc188)
    %4 = cir.load %3 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc146)
    %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc243)
    %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc243)
    %7 = cir.call @__isoc99_fscanf(%4, %6, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s64i>) -> !s32i loc(#loc145)
    %8 = cir.const #cir.int<1> : !s32i loc(#loc149)
    %9 = cir.get_global @goodB2G2Static : !cir.ptr<!s32i> loc(#loc227)
    cir.store %8, %9 : !s32i, !cir.ptr<!s32i> loc(#loc244)
    %10 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc151)
    cir.call @goodB2G2Sink(%10) : (!s64i) -> () loc(#loc152)
    cir.return loc(#loc140)
  } loc(#loc240)
  cir.global "private"  internal dsolocal @goodG2BStatic = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc245)
  cir.func internal private  @goodG2BSink(%arg0: !s64i loc(fused[#loc157, #loc158])) extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data", init] {alignment = 8 : i64} loc(#loc247)
    cir.store %arg0, %0 : !s64i, !cir.ptr<!s64i> loc(#loc159)
    cir.scope {
      %1 = cir.get_global @goodG2BStatic : !cir.ptr<!s32i> loc(#loc245)
      %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc162)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc162)
      cir.if %3 {
        cir.scope {
          %4 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc166)
          %5 = cir.const #cir.int<0> : !s32i loc(#loc167)
          %6 = cir.cast(integral, %5 : !s32i), !s64i loc(#loc167)
          %7 = cir.cmp(gt, %4, %6) : !s64i, !s32i loc(#loc251)
          %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc168)
          cir.if %8 {
            %9 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc253)
            %10 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc172)
            %11 = cir.const #cir.int<2> : !s32i loc(#loc171)
            %12 = cir.cast(integral, %11 : !s32i), !s64i loc(#loc171)
            %13 = cir.binop(mul, %10, %12) nsw : !s64i loc(#loc172)
            cir.store %13, %9 : !s64i, !cir.ptr<!s64i> loc(#loc253)
            %14 = cir.load %9 : !cir.ptr<!s64i>, !s64i loc(#loc173)
            cir.call @printLongLongLine(%14) : (!s64i) -> () loc(#loc174)
          } loc(#loc252)
        } loc(#loc250)
      } loc(#loc249)
    } loc(#loc248)
    cir.return loc(#loc156)
  } loc(#loc246)
  cir.func no_proto internal private  @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc255)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc179)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc256)
    %2 = cir.const #cir.int<2> : !s32i loc(#loc181)
    %3 = cir.cast(integral, %2 : !s32i), !s64i loc(#loc181)
    cir.store %3, %0 : !s64i, !cir.ptr<!s64i> loc(#loc257)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc183)
    %5 = cir.get_global @goodG2BStatic : !cir.ptr<!s32i> loc(#loc245)
    cir.store %4, %5 : !s32i, !cir.ptr<!s32i> loc(#loc258)
    %6 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc185)
    cir.call @goodG2BSink(%6) : (!s64i) -> () loc(#loc186)
    cir.return loc(#loc176)
  } loc(#loc254)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":0:0)
#loc1 = loc("/usr/include/stdio.h":463:1)
#loc2 = loc("/usr/include/stdio.h":465:33)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":44:20)
#loc6 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":44:24)
#loc7 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":24:1)
#loc8 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":24:24)
#loc9 = loc("../../../testcasesupport/std_testcase_io.h":26:1)
#loc10 = loc("../../../testcasesupport/std_testcase_io.h":26:49)
#loc11 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":26:1)
#loc12 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":37:1)
#loc15 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":27:1)
#loc16 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":28:5)
#loc17 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":36:5)
#loc18 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":28:8)
#loc19 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":29:5)
#loc20 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":30:9)
#loc21 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":35:9)
#loc22 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":30:12)
#loc23 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":30:19)
#loc24 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":30:17)
#loc25 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":31:9)
#loc26 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":33:13)
#loc27 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":33:37)
#loc28 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":33:30)
#loc29 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":34:31)
#loc30 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":34:13)
#loc31 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":39:1)
#loc32 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":47:1)
#loc33 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":41:5)
#loc34 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":41:13)
#loc35 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":42:12)
#loc36 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":42:5)
#loc37 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":44:5)
#loc38 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":44:13)
#loc39 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":45:17)
#loc40 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":45:5)
#loc41 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":46:13)
#loc42 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":46:5)
#loc43 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":149:1)
#loc44 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":154:1)
#loc45 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":151:5)
#loc46 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":151:14)
#loc47 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":152:5)
#loc48 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":152:14)
#loc49 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":153:5)
#loc50 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":153:13)
#loc51 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":54:1)
#loc52 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":54:29)
#loc53 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc54 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc55 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":64:19)
#loc56 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":78:27)
#loc57 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":59:1)
#loc58 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":82:1)
#loc61 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":60:1)
#loc62 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":61:5)
#loc63 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":81:5)
#loc64 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":61:8)
#loc65 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":62:5)
#loc66 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":65:5)
#loc67 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":67:5)
#loc68 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":64:9)
#loc69 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":68:9)
#loc70 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":80:9)
#loc71 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":68:12)
#loc72 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":68:19)
#loc73 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":68:17)
#loc74 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":69:9)
#loc75 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":71:13)
#loc76 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":79:13)
#loc77 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":71:17)
#loc78 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":71:25)
#loc79 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":71:35)
#loc80 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":71:36)
#loc81 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":71:22)
#loc82 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":72:13)
#loc83 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":75:13)
#loc84 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":77:13)
#loc85 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":73:17)
#loc86 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":73:41)
#loc87 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":73:34)
#loc88 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":74:35)
#loc89 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":74:17)
#loc90 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":78:17)
#loc91 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":84:1)
#loc92 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":92:1)
#loc93 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":86:5)
#loc94 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":86:13)
#loc95 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":87:12)
#loc96 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":87:5)
#loc97 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":89:5)
#loc98 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":89:13)
#loc99 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":89:20)
#loc100 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":89:24)
#loc101 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":90:22)
#loc102 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":90:5)
#loc103 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":91:18)
#loc104 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":91:5)
#loc105 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":55:1)
#loc106 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":55:29)
#loc107 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":95:1)
#loc108 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":113:1)
#loc111 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":96:1)
#loc112 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":97:5)
#loc113 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":112:5)
#loc114 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":97:8)
#loc115 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":98:5)
#loc116 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":99:9)
#loc117 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":111:9)
#loc118 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":99:12)
#loc119 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":99:19)
#loc120 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":99:17)
#loc121 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":100:9)
#loc122 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":102:13)
#loc123 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":110:13)
#loc124 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":102:17)
#loc125 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":102:25)
#loc126 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":102:35)
#loc127 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":102:36)
#loc128 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":102:22)
#loc129 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":103:13)
#loc130 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":106:13)
#loc131 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":108:13)
#loc132 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":104:17)
#loc133 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":104:41)
#loc134 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":104:34)
#loc135 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":105:35)
#loc136 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":105:17)
#loc137 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":109:27)
#loc138 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":109:17)
#loc139 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":115:1)
#loc140 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":123:1)
#loc141 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":117:5)
#loc142 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":117:13)
#loc143 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":118:12)
#loc144 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":118:5)
#loc145 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":120:5)
#loc146 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":120:13)
#loc147 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":120:20)
#loc148 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":120:24)
#loc149 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":121:22)
#loc150 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":121:5)
#loc151 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":122:18)
#loc152 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":122:5)
#loc153 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":56:1)
#loc154 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":56:28)
#loc155 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":126:1)
#loc156 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":137:1)
#loc159 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":127:1)
#loc160 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":128:5)
#loc161 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":136:5)
#loc162 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":128:8)
#loc163 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":129:5)
#loc164 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":130:9)
#loc165 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":135:9)
#loc166 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":130:12)
#loc167 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":130:19)
#loc168 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":130:17)
#loc169 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":131:9)
#loc170 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":133:13)
#loc171 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":133:37)
#loc172 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":133:30)
#loc173 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":134:31)
#loc174 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":134:13)
#loc175 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":139:1)
#loc176 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":147:1)
#loc177 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":141:5)
#loc178 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":141:13)
#loc179 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":142:12)
#loc180 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":142:5)
#loc181 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":144:12)
#loc182 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":144:5)
#loc183 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":145:21)
#loc184 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":145:5)
#loc185 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":146:17)
#loc186 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_21.c":146:5)
#loc187 = loc(fused[#loc1, #loc2])
#loc188 = loc(fused[#loc3, #loc4])
#loc189 = loc(fused[#loc5, #loc6])
#loc190 = loc(fused[#loc7, #loc8])
#loc191 = loc(fused[#loc9, #loc10])
#loc192 = loc(fused[#loc11, #loc12])
#loc194 = loc(fused[#loc16, #loc17])
#loc195 = loc(fused[#loc19, #loc17])
#loc196 = loc(fused[#loc20, #loc21])
#loc197 = loc(fused[#loc22, #loc23])
#loc198 = loc(fused[#loc25, #loc21])
#loc199 = loc(fused[#loc26, #loc27])
#loc200 = loc(fused[#loc31, #loc32])
#loc201 = loc(fused[#loc33, #loc34])
#loc202 = loc(fused[#loc36, #loc35])
#loc203 = loc(fused[#loc40, #loc39])
#loc204 = loc(fused[#loc43, #loc44])
#loc205 = loc(fused[#loc45, #loc46])
#loc206 = loc(fused[#loc47, #loc48])
#loc207 = loc(fused[#loc49, #loc50])
#loc208 = loc(fused[#loc51, #loc52])
#loc209 = loc(fused[#loc53, #loc54])
#loc210 = loc(fused[#loc57, #loc58])
#loc212 = loc(fused[#loc62, #loc63])
#loc213 = loc(fused[#loc65, #loc66, #loc67, #loc63])
#loc214 = loc(fused[#loc69, #loc70])
#loc215 = loc(fused[#loc71, #loc72])
#loc216 = loc(fused[#loc74, #loc70])
#loc217 = loc(fused[#loc75, #loc76])
#loc218 = loc(fused[#loc78, #loc79])
#loc219 = loc(fused[#loc77, #loc80])
#loc220 = loc(fused[#loc82, #loc83, #loc84, #loc76])
#loc221 = loc(fused[#loc85, #loc86])
#loc222 = loc(fused[#loc91, #loc92])
#loc223 = loc(fused[#loc93, #loc94])
#loc224 = loc(fused[#loc96, #loc95])
#loc225 = loc(fused[#loc99, #loc100])
#loc226 = loc(fused[#loc102, #loc101])
#loc227 = loc(fused[#loc105, #loc106])
#loc228 = loc(fused[#loc107, #loc108])
#loc230 = loc(fused[#loc112, #loc113])
#loc231 = loc(fused[#loc115, #loc113])
#loc232 = loc(fused[#loc116, #loc117])
#loc233 = loc(fused[#loc118, #loc119])
#loc234 = loc(fused[#loc121, #loc117])
#loc235 = loc(fused[#loc122, #loc123])
#loc236 = loc(fused[#loc125, #loc126])
#loc237 = loc(fused[#loc124, #loc127])
#loc238 = loc(fused[#loc129, #loc130, #loc131, #loc123])
#loc239 = loc(fused[#loc132, #loc133])
#loc240 = loc(fused[#loc139, #loc140])
#loc241 = loc(fused[#loc141, #loc142])
#loc242 = loc(fused[#loc144, #loc143])
#loc243 = loc(fused[#loc147, #loc148])
#loc244 = loc(fused[#loc150, #loc149])
#loc245 = loc(fused[#loc153, #loc154])
#loc246 = loc(fused[#loc155, #loc156])
#loc248 = loc(fused[#loc160, #loc161])
#loc249 = loc(fused[#loc163, #loc161])
#loc250 = loc(fused[#loc164, #loc165])
#loc251 = loc(fused[#loc166, #loc167])
#loc252 = loc(fused[#loc169, #loc165])
#loc253 = loc(fused[#loc170, #loc171])
#loc254 = loc(fused[#loc175, #loc176])
#loc255 = loc(fused[#loc177, #loc178])
#loc256 = loc(fused[#loc180, #loc179])
#loc257 = loc(fused[#loc182, #loc181])
#loc258 = loc(fused[#loc184, #loc183])
