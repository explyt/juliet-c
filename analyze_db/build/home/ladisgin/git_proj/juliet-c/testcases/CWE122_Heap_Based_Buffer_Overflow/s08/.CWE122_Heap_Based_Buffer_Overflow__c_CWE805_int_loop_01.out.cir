!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":85:10)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":85:14)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":85:20)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":85:32)
#loc173 = loc(fused[#loc75, #loc76])
#loc174 = loc(fused[#loc77, #loc78])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc143)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc144)
  cir.func private @printIntLine(!s32i) loc(#loc145)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc146)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc148)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc13)
    cir.store %1, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc149)
    %2 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc15)
    %3 = cir.const #cir.int<50> : !s32i loc(#loc16)
    %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc16)
    %5 = cir.const #cir.int<4> : !u64i loc(#loc150)
    %6 = cir.binop(mul, %4, %5) : !u64i loc(#loc151)
    %7 = cir.call @malloc(%6) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc15)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc152)
    cir.store %8, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc153)
    cir.scope {
      %9 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc23)
      %10 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc24)
      %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc24)
      %12 = cir.cmp(eq, %9, %11) : !cir.ptr<!s32i>, !cir.bool loc(#loc155)
      cir.if %12 {
        %13 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc26)
        %14 = cir.const #cir.int<1> : !s32i loc(#loc27)
        %15 = cir.unary(minus, %14) : !s32i, !s32i loc(#loc28)
        cir.call @exit(%15) : (!s32i) -> () extra(#fn_attr) loc(#loc26)
      } loc(#loc156)
    } loc(#loc154)
    cir.scope {
      %9 = cir.alloca !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc158)
      %10 = cir.const #cir.zero : !cir.array<!s32i x 100> loc(#loc158)
      cir.store %10, %9 : !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>> loc(#loc158)
      cir.scope {
        %11 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc160)
        cir.scope {
          %19 = cir.const #cir.int<0> : !s32i loc(#loc39)
          %20 = cir.cast(integral, %19 : !s32i), !u64i loc(#loc39)
          cir.store %20, %11 : !u64i, !cir.ptr<!u64i> loc(#loc162)
          cir.for : cond {
            %21 = cir.load %11 : !cir.ptr<!u64i>, !u64i loc(#loc41)
            %22 = cir.const #cir.int<100> : !s32i loc(#loc42)
            %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc42)
            %24 = cir.cmp(lt, %21, %23) : !u64i, !cir.bool loc(#loc163)
            cir.condition(%24) loc(#loc43)
          } body {
            cir.scope {
              %21 = cir.load %11 : !cir.ptr<!u64i>, !u64i loc(#loc45)
              %22 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s32i x 100>>), !cir.ptr<!s32i> loc(#loc46)
              %23 = cir.ptr_stride(%22 : !cir.ptr<!s32i>, %21 : !u64i), !cir.ptr<!s32i> loc(#loc46)
              %24 = cir.load %23 : !cir.ptr<!s32i>, !s32i loc(#loc46)
              %25 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc47)
              %26 = cir.load %11 : !cir.ptr<!u64i>, !u64i loc(#loc48)
              %27 = cir.ptr_stride(%25 : !cir.ptr<!s32i>, %26 : !u64i), !cir.ptr<!s32i> loc(#loc49)
              cir.store %24, %27 : !s32i, !cir.ptr<!s32i> loc(#loc165)
            } loc(#loc164)
            cir.yield loc(#loc38)
          } step {
            %21 = cir.load %11 : !cir.ptr<!u64i>, !u64i loc(#loc51)
            %22 = cir.unary(inc, %21) : !u64i, !u64i loc(#loc52)
            cir.store %22, %11 : !u64i, !cir.ptr<!u64i> loc(#loc166)
            cir.yield loc(#loc161)
          } loc(#loc161)
        } loc(#loc161)
        %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc53)
        %13 = cir.const #cir.int<0> : !s32i loc(#loc54)
        %14 = cir.ptr_stride(%12 : !cir.ptr<!s32i>, %13 : !s32i), !cir.ptr<!s32i> loc(#loc55)
        %15 = cir.load %14 : !cir.ptr<!s32i>, !s32i loc(#loc53)
        cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc56)
        %16 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc57)
        %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc58)
        %18 = cir.cast(bitcast, %17 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc58)
        cir.call @free(%18) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc57)
      } loc(#loc159)
    } loc(#loc157)
    cir.return loc(#loc10)
  } loc(#loc147)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc168)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc61)
    cir.return loc(#loc60)
  } loc(#loc167)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc169)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc170)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc171)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc69)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc70)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc71)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc72)
  cir.func @main(%arg0: !s32i loc(fused[#loc75, #loc76]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc77, #loc78])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc173)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc174)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc74)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc79)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc79)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc80)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc81)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc81)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc82)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc69)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc69)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc83)
    %8 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01_good : !cir.ptr<!cir.func<!void ()>> loc(#loc175)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01_good() : () -> () loc(#loc84)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc70)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc70)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc86)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc71)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc71)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc87)
    %13 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc176)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01_bad() : () -> () loc(#loc88)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc72)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc72)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc90)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc91)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc177)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc177)
    cir.return %17 : !s32i loc(#loc177)
  } loc(#loc172)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc179)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc97)
    cir.store %1, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc180)
    %2 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc99)
    %3 = cir.const #cir.int<100> : !s32i loc(#loc100)
    %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc100)
    %5 = cir.const #cir.int<4> : !u64i loc(#loc181)
    %6 = cir.binop(mul, %4, %5) : !u64i loc(#loc182)
    %7 = cir.call @malloc(%6) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc99)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc183)
    cir.store %8, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc184)
    cir.scope {
      %9 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc107)
      %10 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc108)
      %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc108)
      %12 = cir.cmp(eq, %9, %11) : !cir.ptr<!s32i>, !cir.bool loc(#loc186)
      cir.if %12 {
        %13 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc110)
        %14 = cir.const #cir.int<1> : !s32i loc(#loc111)
        %15 = cir.unary(minus, %14) : !s32i, !s32i loc(#loc112)
        cir.call @exit(%15) : (!s32i) -> () extra(#fn_attr) loc(#loc110)
      } loc(#loc187)
    } loc(#loc185)
    cir.scope {
      %9 = cir.alloca !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc189)
      %10 = cir.const #cir.zero : !cir.array<!s32i x 100> loc(#loc189)
      cir.store %10, %9 : !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>> loc(#loc189)
      cir.scope {
        %11 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc191)
        cir.scope {
          %19 = cir.const #cir.int<0> : !s32i loc(#loc123)
          %20 = cir.cast(integral, %19 : !s32i), !u64i loc(#loc123)
          cir.store %20, %11 : !u64i, !cir.ptr<!u64i> loc(#loc193)
          cir.for : cond {
            %21 = cir.load %11 : !cir.ptr<!u64i>, !u64i loc(#loc125)
            %22 = cir.const #cir.int<100> : !s32i loc(#loc126)
            %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc126)
            %24 = cir.cmp(lt, %21, %23) : !u64i, !cir.bool loc(#loc194)
            cir.condition(%24) loc(#loc127)
          } body {
            cir.scope {
              %21 = cir.load %11 : !cir.ptr<!u64i>, !u64i loc(#loc129)
              %22 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s32i x 100>>), !cir.ptr<!s32i> loc(#loc130)
              %23 = cir.ptr_stride(%22 : !cir.ptr<!s32i>, %21 : !u64i), !cir.ptr<!s32i> loc(#loc130)
              %24 = cir.load %23 : !cir.ptr<!s32i>, !s32i loc(#loc130)
              %25 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc131)
              %26 = cir.load %11 : !cir.ptr<!u64i>, !u64i loc(#loc132)
              %27 = cir.ptr_stride(%25 : !cir.ptr<!s32i>, %26 : !u64i), !cir.ptr<!s32i> loc(#loc133)
              cir.store %24, %27 : !s32i, !cir.ptr<!s32i> loc(#loc196)
            } loc(#loc195)
            cir.yield loc(#loc122)
          } step {
            %21 = cir.load %11 : !cir.ptr<!u64i>, !u64i loc(#loc135)
            %22 = cir.unary(inc, %21) : !u64i, !u64i loc(#loc136)
            cir.store %22, %11 : !u64i, !cir.ptr<!u64i> loc(#loc197)
            cir.yield loc(#loc192)
          } loc(#loc192)
        } loc(#loc192)
        %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc137)
        %13 = cir.const #cir.int<0> : !s32i loc(#loc138)
        %14 = cir.ptr_stride(%12 : !cir.ptr<!s32i>, %13 : !s32i), !cir.ptr<!s32i> loc(#loc139)
        %15 = cir.load %14 : !cir.ptr<!s32i>, !s32i loc(#loc137)
        cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc140)
        %16 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc141)
        %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc142)
        %18 = cir.cast(bitcast, %17 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc142)
        cir.call @free(%18) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc141)
      } loc(#loc190)
    } loc(#loc188)
    cir.return loc(#loc94)
  } loc(#loc178)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc7 = loc("/usr/include/stdlib.h":687:1)
#loc8 = loc("/usr/include/stdlib.h":687:32)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":21:1)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":41:1)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":23:5)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":23:11)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":24:12)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":24:5)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":26:19)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":26:26)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":26:29)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":26:39)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":26:40)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":26:5)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":27:5)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":27:33)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":27:9)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":27:17)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":27:23)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":27:24)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":27:30)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":27:29)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":28:5)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":40:5)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":29:9)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":29:29)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":30:9)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":39:9)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":31:13)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":31:20)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":33:13)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":36:13)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":33:22)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":33:18)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":33:25)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":33:29)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":33:27)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":34:13)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":35:34)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":35:27)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":35:17)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":35:22)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":35:23)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":35:35)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":33:35)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":33:34)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":37:26)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":37:31)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":37:32)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":37:13)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":38:13)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":38:18)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":70:1)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":73:1)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":72:5)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":72:13)
#loc63 = loc("/usr/include/stdlib.h":575:1)
#loc64 = loc("/usr/include/stdlib.h":575:41)
#loc65 = loc("/usr/include/time.h":76:1)
#loc66 = loc("/usr/include/time.h":76:38)
#loc67 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc68 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":90:15)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":92:15)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":95:15)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":97:15)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":85:1)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":100:1)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":86:1)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":88:27)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":88:22)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":88:5)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":90:5)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":91:5)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":91:66)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":92:5)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":95:5)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":96:5)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":96:65)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":97:5)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":99:12)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":99:5)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":48:1)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":68:1)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":50:5)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":50:11)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":51:12)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":51:5)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":53:19)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":53:26)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":53:30)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":53:40)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":53:41)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":53:5)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":54:5)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":54:33)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":54:9)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":54:17)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":54:23)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":54:24)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":54:30)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":54:29)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":55:5)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":67:5)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":56:9)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":56:29)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":57:9)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":66:9)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":58:13)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":58:20)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":60:13)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":63:13)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":60:22)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":60:18)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":60:25)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":60:29)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":60:27)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":61:13)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":62:34)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":62:27)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":62:17)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":62:22)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":62:23)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":62:35)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":60:35)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":60:34)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":64:26)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":64:31)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":64:32)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":64:13)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":65:13)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c":65:18)
#loc143 = loc(fused[#loc1, #loc2])
#loc144 = loc(fused[#loc3, #loc4])
#loc145 = loc(fused[#loc5, #loc6])
#loc146 = loc(fused[#loc7, #loc8])
#loc147 = loc(fused[#loc9, #loc10])
#loc148 = loc(fused[#loc11, #loc12])
#loc149 = loc(fused[#loc14, #loc13])
#loc150 = loc(fused[#loc17, #loc18])
#loc151 = loc(fused[#loc16, #loc18])
#loc152 = loc(fused[#loc15, #loc19])
#loc153 = loc(fused[#loc20, #loc19])
#loc154 = loc(fused[#loc21, #loc22])
#loc155 = loc(fused[#loc23, #loc24])
#loc156 = loc(fused[#loc25, #loc22])
#loc157 = loc(fused[#loc29, #loc30])
#loc158 = loc(fused[#loc31, #loc32])
#loc159 = loc(fused[#loc33, #loc34])
#loc160 = loc(fused[#loc35, #loc36])
#loc161 = loc(fused[#loc37, #loc38])
#loc162 = loc(fused[#loc40, #loc39])
#loc163 = loc(fused[#loc41, #loc42])
#loc164 = loc(fused[#loc44, #loc38])
#loc165 = loc(fused[#loc47, #loc50])
#loc166 = loc(fused[#loc52, #loc51])
#loc167 = loc(fused[#loc59, #loc60])
#loc168 = loc(fused[#loc61, #loc62])
#loc169 = loc(fused[#loc63, #loc64])
#loc170 = loc(fused[#loc65, #loc66])
#loc171 = loc(fused[#loc67, #loc68])
#loc172 = loc(fused[#loc73, #loc74])
#loc175 = loc(fused[#loc84, #loc85])
#loc176 = loc(fused[#loc88, #loc89])
#loc177 = loc(fused[#loc92, #loc91])
#loc178 = loc(fused[#loc93, #loc94])
#loc179 = loc(fused[#loc95, #loc96])
#loc180 = loc(fused[#loc98, #loc97])
#loc181 = loc(fused[#loc101, #loc102])
#loc182 = loc(fused[#loc100, #loc102])
#loc183 = loc(fused[#loc99, #loc103])
#loc184 = loc(fused[#loc104, #loc103])
#loc185 = loc(fused[#loc105, #loc106])
#loc186 = loc(fused[#loc107, #loc108])
#loc187 = loc(fused[#loc109, #loc106])
#loc188 = loc(fused[#loc113, #loc114])
#loc189 = loc(fused[#loc115, #loc116])
#loc190 = loc(fused[#loc117, #loc118])
#loc191 = loc(fused[#loc119, #loc120])
#loc192 = loc(fused[#loc121, #loc122])
#loc193 = loc(fused[#loc124, #loc123])
#loc194 = loc(fused[#loc125, #loc126])
#loc195 = loc(fused[#loc128, #loc122])
#loc196 = loc(fused[#loc131, #loc134])
#loc197 = loc(fused[#loc136, #loc135])
