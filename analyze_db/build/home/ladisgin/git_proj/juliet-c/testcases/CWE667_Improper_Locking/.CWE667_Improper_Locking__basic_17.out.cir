!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__stdThreadLock = !cir.struct<struct "_stdThreadLock" incomplete>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc55 = loc("CWE667_Improper_Locking__basic_17.c":85:10)
#loc56 = loc("CWE667_Improper_Locking__basic_17.c":85:14)
#loc57 = loc("CWE667_Improper_Locking__basic_17.c":85:20)
#loc58 = loc("CWE667_Improper_Locking__basic_17.c":85:32)
#loc134 = loc(fused[#loc55, #loc56])
#loc135 = loc(fused[#loc57, #loc58])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE667_Improper_Locking/CWE667_Improper_Locking__basic_17.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.global "private" internal dsolocal @good1.goodLock = #cir.ptr<null> : !cir.ptr<!ty__stdThreadLock> {alignment = 8 : i64} loc(#loc1)
  cir.global "private" internal dsolocal @CWE667_Improper_Locking__basic_17_bad.badLock = #cir.ptr<null> : !cir.ptr<!ty__stdThreadLock> {alignment = 8 : i64} loc(#loc2)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc115)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Creating lock...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc5)
  cir.func private @stdThreadLockCreate(!cir.ptr<!cir.ptr<!ty__stdThreadLock>>) -> !s32i loc(#loc116)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Could not create lock\00" : !cir.array<!s8i x 22>> : !cir.array<!s8i x 22> {alignment = 1 : i64} loc(#loc8)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc117)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Acquiring lock...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc11)
  cir.func private @stdThreadLockAcquire(!cir.ptr<!ty__stdThreadLock>) loc(#loc118)
  cir.func no_proto @CWE667_Improper_Locking__basic_17_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["j"] {alignment = 4 : i64} loc(#loc120)
    cir.br ^bb1 loc(#loc121)
  ^bb1:  // pred: ^bb0
    %1 = cir.const #cir.int<0> : !s32i loc(#loc20)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc122)
    cir.br ^bb2 loc(#loc121)
  ^bb2:  // 2 preds: ^bb1, ^bb12
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc22)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc23)
    %4 = cir.cmp(lt, %2, %3) : !s32i, !cir.bool loc(#loc123)
    cir.brcond %4 ^bb3, ^bb13 loc(#loc24)
  ^bb3:  // pred: ^bb2
    cir.br ^bb4 loc(#loc124)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc125)
  ^bb5:  // pred: ^bb4
    %5 = cir.get_global @CWE667_Improper_Locking__basic_17_bad.badLock : !cir.ptr<!cir.ptr<!ty__stdThreadLock>> loc(#loc2)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc5)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc5)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc28)
    cir.br ^bb6 loc(#loc126)
  ^bb6:  // pred: ^bb5
    %8 = cir.call @stdThreadLockCreate(%5) : (!cir.ptr<!cir.ptr<!ty__stdThreadLock>>) -> !s32i loc(#loc31)
    %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc31)
    %10 = cir.unary(not, %9) : !cir.bool, !cir.bool loc(#loc31)
    cir.brcond %10 ^bb7, ^bb8 loc(#loc127)
  ^bb7:  // pred: ^bb6
    %11 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 22>> loc(#loc8)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 22>>), !cir.ptr<!s8i> loc(#loc8)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc33)
    %13 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc34)
    %14 = cir.const #cir.int<1> : !s32i loc(#loc35)
    cir.call @exit(%14) : (!s32i) -> () extra(#fn_attr) loc(#loc34)
    cir.br ^bb8 loc(#loc30)
  ^bb8:  // 2 preds: ^bb6, ^bb7
    cir.br ^bb9 loc(#loc30)
  ^bb9:  // pred: ^bb8
    %15 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc11)
    %16 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc11)
    cir.call @printLine(%16) : (!cir.ptr<!s8i>) -> () loc(#loc36)
    %17 = cir.load %5 : !cir.ptr<!cir.ptr<!ty__stdThreadLock>>, !cir.ptr<!ty__stdThreadLock> loc(#loc37)
    cir.call @stdThreadLockAcquire(%17) : (!cir.ptr<!ty__stdThreadLock>) -> () loc(#loc38)
    cir.br ^bb10 loc(#loc27)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc19)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc19)
  ^bb12:  // pred: ^bb11
    %18 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc39)
    %19 = cir.unary(inc, %18) : !s32i, !s32i loc(#loc40)
    cir.store %19, %0 : !s32i, !cir.ptr<!s32i> loc(#loc128)
    cir.br ^bb2 loc(#loc121)
  ^bb13:  // pred: ^bb2
    cir.br ^bb14 loc(#loc19)
  ^bb14:  // pred: ^bb13
    cir.return loc(#loc15)
  } loc(#loc119)
  cir.func no_proto @CWE667_Improper_Locking__basic_17_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<!void ()>> loc(#loc130)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc43)
    cir.return loc(#loc42)
  } loc(#loc129)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc131)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc132)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc49)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc50)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc51)
  cir.global "private" constant cir_private dsolocal @".str.6" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc52)
  cir.func @main(%arg0: !s32i loc(fused[#loc55, #loc56]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc57, #loc58])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc134)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc135)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc54)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc59)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc59)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc60)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc61)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc61)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc62)
    %6 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc49)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc49)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc63)
    %8 = cir.get_global @CWE667_Improper_Locking__basic_17_good : !cir.ptr<!cir.func<!void ()>> loc(#loc136)
    cir.call @CWE667_Improper_Locking__basic_17_good() : () -> () loc(#loc64)
    %9 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc50)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc50)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc66)
    %11 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc51)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc51)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc67)
    %13 = cir.get_global @CWE667_Improper_Locking__basic_17_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc137)
    cir.call @CWE667_Improper_Locking__basic_17_bad() : () -> () loc(#loc68)
    %14 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc52)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc52)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc70)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc71)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc138)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc138)
    cir.return %17 : !s32i loc(#loc138)
  } loc(#loc133)
  cir.global "private" constant cir_private dsolocal @".str.7" = #cir.const_array<"Releasing lock...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc73)
  cir.func private @stdThreadLockRelease(!cir.ptr<!ty__stdThreadLock>) loc(#loc139)
  cir.global "private" constant cir_private dsolocal @".str.8" = #cir.const_array<"Destroying lock...\00" : !cir.array<!s8i x 19>> : !cir.array<!s8i x 19> {alignment = 1 : i64} loc(#loc76)
  cir.func private @stdThreadLockDestroy(!cir.ptr<!ty__stdThreadLock>) loc(#loc140)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["k"] {alignment = 4 : i64} loc(#loc142)
    cir.br ^bb1 loc(#loc143)
  ^bb1:  // pred: ^bb0
    %1 = cir.const #cir.int<0> : !s32i loc(#loc85)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc144)
    cir.br ^bb2 loc(#loc143)
  ^bb2:  // 2 preds: ^bb1, ^bb12
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc87)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc88)
    %4 = cir.cmp(lt, %2, %3) : !s32i, !cir.bool loc(#loc145)
    cir.brcond %4 ^bb3, ^bb13 loc(#loc89)
  ^bb3:  // pred: ^bb2
    cir.br ^bb4 loc(#loc146)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc147)
  ^bb5:  // pred: ^bb4
    %5 = cir.get_global @good1.goodLock : !cir.ptr<!cir.ptr<!ty__stdThreadLock>> loc(#loc1)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc93)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc93)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc94)
    cir.br ^bb6 loc(#loc148)
  ^bb6:  // pred: ^bb5
    %8 = cir.call @stdThreadLockCreate(%5) : (!cir.ptr<!cir.ptr<!ty__stdThreadLock>>) -> !s32i loc(#loc97)
    %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc97)
    %10 = cir.unary(not, %9) : !cir.bool, !cir.bool loc(#loc97)
    cir.brcond %10 ^bb7, ^bb8 loc(#loc149)
  ^bb7:  // pred: ^bb6
    %11 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 22>> loc(#loc99)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 22>>), !cir.ptr<!s8i> loc(#loc99)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc100)
    %13 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc101)
    %14 = cir.const #cir.int<1> : !s32i loc(#loc102)
    cir.call @exit(%14) : (!s32i) -> () extra(#fn_attr) loc(#loc101)
    cir.br ^bb8 loc(#loc96)
  ^bb8:  // 2 preds: ^bb6, ^bb7
    cir.br ^bb9 loc(#loc96)
  ^bb9:  // pred: ^bb8
    %15 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc103)
    %16 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc103)
    cir.call @printLine(%16) : (!cir.ptr<!s8i>) -> () loc(#loc104)
    %17 = cir.load %5 : !cir.ptr<!cir.ptr<!ty__stdThreadLock>>, !cir.ptr<!ty__stdThreadLock> loc(#loc105)
    cir.call @stdThreadLockAcquire(%17) : (!cir.ptr<!ty__stdThreadLock>) -> () loc(#loc106)
    %18 = cir.get_global @".str.7" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc73)
    %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc73)
    cir.call @printLine(%19) : (!cir.ptr<!s8i>) -> () loc(#loc107)
    %20 = cir.load %5 : !cir.ptr<!cir.ptr<!ty__stdThreadLock>>, !cir.ptr<!ty__stdThreadLock> loc(#loc108)
    cir.call @stdThreadLockRelease(%20) : (!cir.ptr<!ty__stdThreadLock>) -> () loc(#loc109)
    %21 = cir.get_global @".str.8" : !cir.ptr<!cir.array<!s8i x 19>> loc(#loc76)
    %22 = cir.cast(array_to_ptrdecay, %21 : !cir.ptr<!cir.array<!s8i x 19>>), !cir.ptr<!s8i> loc(#loc76)
    cir.call @printLine(%22) : (!cir.ptr<!s8i>) -> () loc(#loc110)
    %23 = cir.load %5 : !cir.ptr<!cir.ptr<!ty__stdThreadLock>>, !cir.ptr<!ty__stdThreadLock> loc(#loc111)
    cir.call @stdThreadLockDestroy(%23) : (!cir.ptr<!ty__stdThreadLock>) -> () loc(#loc112)
    cir.br ^bb10 loc(#loc92)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc84)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc84)
  ^bb12:  // pred: ^bb11
    %24 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc113)
    %25 = cir.unary(inc, %24) : !s32i, !s32i loc(#loc114)
    cir.store %25, %0 : !s32i, !cir.ptr<!s32i> loc(#loc150)
    cir.br ^bb2 loc(#loc143)
  ^bb13:  // pred: ^bb2
    cir.br ^bb14 loc(#loc84)
  ^bb14:  // pred: ^bb13
    cir.return loc(#loc80)
  } loc(#loc141)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE667_Improper_Locking/CWE667_Improper_Locking__basic_17.c":0:0)
#loc1 = loc("CWE667_Improper_Locking__basic_17.c":53:34)
#loc2 = loc("CWE667_Improper_Locking__basic_17.c":28:34)
#loc3 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc4 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc5 = loc("CWE667_Improper_Locking__basic_17.c":29:23)
#loc6 = loc("../../testcasesupport/std_thread.h":18:1)
#loc7 = loc("../../testcasesupport/std_thread.h":18:44)
#loc8 = loc("CWE667_Improper_Locking__basic_17.c":32:27)
#loc9 = loc("/usr/include/stdlib.h":756:1)
#loc10 = loc("/usr/include/stdlib.h":756:70)
#loc11 = loc("CWE667_Improper_Locking__basic_17.c":35:23)
#loc12 = loc("../../testcasesupport/std_thread.h":19:1)
#loc13 = loc("../../testcasesupport/std_thread.h":19:45)
#loc14 = loc("CWE667_Improper_Locking__basic_17.c":22:1)
#loc15 = loc("CWE667_Improper_Locking__basic_17.c":40:1)
#loc16 = loc("CWE667_Improper_Locking__basic_17.c":24:5)
#loc17 = loc("CWE667_Improper_Locking__basic_17.c":24:9)
#loc18 = loc("CWE667_Improper_Locking__basic_17.c":25:5)
#loc19 = loc("CWE667_Improper_Locking__basic_17.c":39:5)
#loc20 = loc("CWE667_Improper_Locking__basic_17.c":25:13)
#loc21 = loc("CWE667_Improper_Locking__basic_17.c":25:9)
#loc22 = loc("CWE667_Improper_Locking__basic_17.c":25:16)
#loc23 = loc("CWE667_Improper_Locking__basic_17.c":25:20)
#loc24 = loc("CWE667_Improper_Locking__basic_17.c":25:18)
#loc25 = loc("CWE667_Improper_Locking__basic_17.c":26:5)
#loc26 = loc("CWE667_Improper_Locking__basic_17.c":27:9)
#loc27 = loc("CWE667_Improper_Locking__basic_17.c":38:9)
#loc28 = loc("CWE667_Improper_Locking__basic_17.c":29:13)
#loc29 = loc("CWE667_Improper_Locking__basic_17.c":30:13)
#loc30 = loc("CWE667_Improper_Locking__basic_17.c":34:13)
#loc31 = loc("CWE667_Improper_Locking__basic_17.c":30:18)
#loc32 = loc("CWE667_Improper_Locking__basic_17.c":31:13)
#loc33 = loc("CWE667_Improper_Locking__basic_17.c":32:17)
#loc34 = loc("CWE667_Improper_Locking__basic_17.c":33:17)
#loc35 = loc("CWE667_Improper_Locking__basic_17.c":33:22)
#loc36 = loc("CWE667_Improper_Locking__basic_17.c":35:13)
#loc37 = loc("CWE667_Improper_Locking__basic_17.c":36:34)
#loc38 = loc("CWE667_Improper_Locking__basic_17.c":36:13)
#loc39 = loc("CWE667_Improper_Locking__basic_17.c":25:24)
#loc40 = loc("CWE667_Improper_Locking__basic_17.c":25:23)
#loc41 = loc("CWE667_Improper_Locking__basic_17.c":71:1)
#loc42 = loc("CWE667_Improper_Locking__basic_17.c":74:1)
#loc43 = loc("CWE667_Improper_Locking__basic_17.c":73:5)
#loc44 = loc("CWE667_Improper_Locking__basic_17.c":73:11)
#loc45 = loc("/usr/include/stdlib.h":575:1)
#loc46 = loc("/usr/include/stdlib.h":575:41)
#loc47 = loc("/usr/include/time.h":76:1)
#loc48 = loc("/usr/include/time.h":76:38)
#loc49 = loc("CWE667_Improper_Locking__basic_17.c":90:15)
#loc50 = loc("CWE667_Improper_Locking__basic_17.c":92:15)
#loc51 = loc("CWE667_Improper_Locking__basic_17.c":95:15)
#loc52 = loc("CWE667_Improper_Locking__basic_17.c":97:15)
#loc53 = loc("CWE667_Improper_Locking__basic_17.c":85:1)
#loc54 = loc("CWE667_Improper_Locking__basic_17.c":100:1)
#loc59 = loc("CWE667_Improper_Locking__basic_17.c":86:1)
#loc60 = loc("CWE667_Improper_Locking__basic_17.c":88:27)
#loc61 = loc("CWE667_Improper_Locking__basic_17.c":88:22)
#loc62 = loc("CWE667_Improper_Locking__basic_17.c":88:5)
#loc63 = loc("CWE667_Improper_Locking__basic_17.c":90:5)
#loc64 = loc("CWE667_Improper_Locking__basic_17.c":91:5)
#loc65 = loc("CWE667_Improper_Locking__basic_17.c":91:44)
#loc66 = loc("CWE667_Improper_Locking__basic_17.c":92:5)
#loc67 = loc("CWE667_Improper_Locking__basic_17.c":95:5)
#loc68 = loc("CWE667_Improper_Locking__basic_17.c":96:5)
#loc69 = loc("CWE667_Improper_Locking__basic_17.c":96:43)
#loc70 = loc("CWE667_Improper_Locking__basic_17.c":97:5)
#loc71 = loc("CWE667_Improper_Locking__basic_17.c":99:12)
#loc72 = loc("CWE667_Improper_Locking__basic_17.c":99:5)
#loc73 = loc("CWE667_Improper_Locking__basic_17.c":63:23)
#loc74 = loc("../../testcasesupport/std_thread.h":20:1)
#loc75 = loc("../../testcasesupport/std_thread.h":20:45)
#loc76 = loc("CWE667_Improper_Locking__basic_17.c":65:23)
#loc77 = loc("../../testcasesupport/std_thread.h":21:1)
#loc78 = loc("../../testcasesupport/std_thread.h":21:45)
#loc79 = loc("CWE667_Improper_Locking__basic_17.c":47:1)
#loc80 = loc("CWE667_Improper_Locking__basic_17.c":69:1)
#loc81 = loc("CWE667_Improper_Locking__basic_17.c":49:5)
#loc82 = loc("CWE667_Improper_Locking__basic_17.c":49:9)
#loc83 = loc("CWE667_Improper_Locking__basic_17.c":50:5)
#loc84 = loc("CWE667_Improper_Locking__basic_17.c":68:5)
#loc85 = loc("CWE667_Improper_Locking__basic_17.c":50:13)
#loc86 = loc("CWE667_Improper_Locking__basic_17.c":50:9)
#loc87 = loc("CWE667_Improper_Locking__basic_17.c":50:16)
#loc88 = loc("CWE667_Improper_Locking__basic_17.c":50:20)
#loc89 = loc("CWE667_Improper_Locking__basic_17.c":50:18)
#loc90 = loc("CWE667_Improper_Locking__basic_17.c":51:5)
#loc91 = loc("CWE667_Improper_Locking__basic_17.c":52:9)
#loc92 = loc("CWE667_Improper_Locking__basic_17.c":67:9)
#loc93 = loc("CWE667_Improper_Locking__basic_17.c":54:23)
#loc94 = loc("CWE667_Improper_Locking__basic_17.c":54:13)
#loc95 = loc("CWE667_Improper_Locking__basic_17.c":55:13)
#loc96 = loc("CWE667_Improper_Locking__basic_17.c":59:13)
#loc97 = loc("CWE667_Improper_Locking__basic_17.c":55:18)
#loc98 = loc("CWE667_Improper_Locking__basic_17.c":56:13)
#loc99 = loc("CWE667_Improper_Locking__basic_17.c":57:27)
#loc100 = loc("CWE667_Improper_Locking__basic_17.c":57:17)
#loc101 = loc("CWE667_Improper_Locking__basic_17.c":58:17)
#loc102 = loc("CWE667_Improper_Locking__basic_17.c":58:22)
#loc103 = loc("CWE667_Improper_Locking__basic_17.c":60:23)
#loc104 = loc("CWE667_Improper_Locking__basic_17.c":60:13)
#loc105 = loc("CWE667_Improper_Locking__basic_17.c":61:34)
#loc106 = loc("CWE667_Improper_Locking__basic_17.c":61:13)
#loc107 = loc("CWE667_Improper_Locking__basic_17.c":63:13)
#loc108 = loc("CWE667_Improper_Locking__basic_17.c":64:34)
#loc109 = loc("CWE667_Improper_Locking__basic_17.c":64:13)
#loc110 = loc("CWE667_Improper_Locking__basic_17.c":65:13)
#loc111 = loc("CWE667_Improper_Locking__basic_17.c":66:34)
#loc112 = loc("CWE667_Improper_Locking__basic_17.c":66:13)
#loc113 = loc("CWE667_Improper_Locking__basic_17.c":50:24)
#loc114 = loc("CWE667_Improper_Locking__basic_17.c":50:23)
#loc115 = loc(fused[#loc3, #loc4])
#loc116 = loc(fused[#loc6, #loc7])
#loc117 = loc(fused[#loc9, #loc10])
#loc118 = loc(fused[#loc12, #loc13])
#loc119 = loc(fused[#loc14, #loc15])
#loc120 = loc(fused[#loc16, #loc17])
#loc121 = loc(fused[#loc18, #loc19])
#loc122 = loc(fused[#loc21, #loc20])
#loc123 = loc(fused[#loc22, #loc23])
#loc124 = loc(fused[#loc25, #loc19])
#loc125 = loc(fused[#loc26, #loc27])
#loc126 = loc(fused[#loc29, #loc30])
#loc127 = loc(fused[#loc32, #loc30])
#loc128 = loc(fused[#loc40, #loc39])
#loc129 = loc(fused[#loc41, #loc42])
#loc130 = loc(fused[#loc43, #loc44])
#loc131 = loc(fused[#loc45, #loc46])
#loc132 = loc(fused[#loc47, #loc48])
#loc133 = loc(fused[#loc53, #loc54])
#loc136 = loc(fused[#loc64, #loc65])
#loc137 = loc(fused[#loc68, #loc69])
#loc138 = loc(fused[#loc72, #loc71])
#loc139 = loc(fused[#loc74, #loc75])
#loc140 = loc(fused[#loc77, #loc78])
#loc141 = loc(fused[#loc79, #loc80])
#loc142 = loc(fused[#loc81, #loc82])
#loc143 = loc(fused[#loc83, #loc84])
#loc144 = loc(fused[#loc86, #loc85])
#loc145 = loc(fused[#loc87, #loc88])
#loc146 = loc(fused[#loc90, #loc84])
#loc147 = loc(fused[#loc91, #loc92])
#loc148 = loc(fused[#loc95, #loc96])
#loc149 = loc(fused[#loc98, #loc96])
#loc150 = loc(fused[#loc114, #loc113])
