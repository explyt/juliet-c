!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s04/CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_loop_05.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.global "private"  internal dsolocal @staticTrue = #cir.int<1> : !s32i {alignment = 4 : i64} loc(#loc145)
  cir.func private  @printLongLongLine(!s64i) loc(#loc146)
  cir.func no_proto  @CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_loop_05_bad() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["data"] {alignment = 8 : i64} loc(#loc148)
    %1 = cir.alloca !cir.array<!s64i x 50>, !cir.ptr<!cir.array<!s64i x 50>>, ["dataBadBuffer"] {alignment = 16 : i64} loc(#loc149)
    %2 = cir.alloca !cir.array<!s64i x 100>, !cir.ptr<!cir.array<!s64i x 100>>, ["dataGoodBuffer"] {alignment = 16 : i64} loc(#loc150)
    cir.scope {
      %3 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc145)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc15)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc15)
      cir.if %5 {
        %6 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s64i x 50>>), !cir.ptr<!s64i> loc(#loc17)
        cir.store %6, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc153)
      } loc(#loc152)
    } loc(#loc151)
    cir.scope {
      %3 = cir.alloca !cir.array<!s64i x 100>, !cir.ptr<!cir.array<!s64i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc155)
      %4 = cir.const #cir.zero : !cir.array<!s64i x 100> loc(#loc155)
      cir.store %4, %3 : !cir.array<!s64i x 100>, !cir.ptr<!cir.array<!s64i x 100>> loc(#loc155)
      cir.scope {
        %5 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc157)
        cir.scope {
          %10 = cir.const #cir.int<0> : !s32i loc(#loc29)
          %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc29)
          cir.store %11, %5 : !u64i, !cir.ptr<!u64i> loc(#loc159)
          cir.for : cond {
            %12 = cir.load %5 : !cir.ptr<!u64i>, !u64i loc(#loc31)
            %13 = cir.const #cir.int<100> : !s32i loc(#loc32)
            %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc32)
            %15 = cir.cmp(lt, %12, %14) : !u64i, !s32i loc(#loc160)
            %16 = cir.cast(int_to_bool, %15 : !s32i), !cir.bool loc(#loc33)
            cir.condition(%16) loc(#loc33)
          } body {
            cir.scope {
              %12 = cir.load %5 : !cir.ptr<!u64i>, !u64i loc(#loc35)
              %13 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s64i x 100>>), !cir.ptr<!s64i> loc(#loc36)
              %14 = cir.ptr_stride(%13 : !cir.ptr<!s64i>, %12 : !u64i), !cir.ptr<!s64i> loc(#loc36)
              %15 = cir.load %14 : !cir.ptr<!s64i>, !s64i loc(#loc36)
              %16 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc37)
              %17 = cir.load %5 : !cir.ptr<!u64i>, !u64i loc(#loc38)
              %18 = cir.ptr_stride(%16 : !cir.ptr<!s64i>, %17 : !u64i), !cir.ptr<!s64i> loc(#loc39)
              cir.store %15, %18 : !s64i, !cir.ptr<!s64i> loc(#loc162)
            } loc(#loc161)
            cir.yield loc(#loc28)
          } step {
            %12 = cir.load %5 : !cir.ptr<!u64i>, !u64i loc(#loc41)
            %13 = cir.unary(inc, %12) : !u64i, !u64i loc(#loc42)
            cir.store %13, %5 : !u64i, !cir.ptr<!u64i> loc(#loc163)
            cir.yield loc(#loc158)
          } loc(#loc158)
        } loc(#loc158)
        %6 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc43)
        %7 = cir.const #cir.int<0> : !s32i loc(#loc44)
        %8 = cir.ptr_stride(%6 : !cir.ptr<!s64i>, %7 : !s32i), !cir.ptr<!s64i> loc(#loc45)
        %9 = cir.load %8 : !cir.ptr<!s64i>, !s64i loc(#loc43)
        cir.call @printLongLongLine(%9) : (!s64i) -> () loc(#loc46)
      } loc(#loc156)
    } loc(#loc154)
    cir.return loc(#loc6)
  } loc(#loc147)
  cir.func no_proto  @CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_loop_05_good() extra(#fn_attr) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc165)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc49)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc166)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc51)
    cir.return loc(#loc48)
  } loc(#loc164)
  cir.global "private"  internal dsolocal @staticFalse = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc167)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc168)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc57)
  cir.func no_proto internal private  @goodG2B1() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["data"] {alignment = 8 : i64} loc(#loc170)
    %1 = cir.alloca !cir.array<!s64i x 50>, !cir.ptr<!cir.array<!s64i x 50>>, ["dataBadBuffer"] {alignment = 16 : i64} loc(#loc171)
    %2 = cir.alloca !cir.array<!s64i x 100>, !cir.ptr<!cir.array<!s64i x 100>>, ["dataGoodBuffer"] {alignment = 16 : i64} loc(#loc172)
    cir.scope {
      %3 = cir.get_global @staticFalse : !cir.ptr<!s32i> loc(#loc167)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc68)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc68)
      cir.if %5 {
        %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc57)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc57)
        cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc72)
      } else {
        %6 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s64i x 100>>), !cir.ptr<!s64i> loc(#loc73)
        cir.store %6, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc175)
      } loc(#loc174)
    } loc(#loc173)
    cir.scope {
      %3 = cir.alloca !cir.array<!s64i x 100>, !cir.ptr<!cir.array<!s64i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc177)
      %4 = cir.const #cir.zero : !cir.array<!s64i x 100> loc(#loc177)
      cir.store %4, %3 : !cir.array<!s64i x 100>, !cir.ptr<!cir.array<!s64i x 100>> loc(#loc177)
      cir.scope {
        %5 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc179)
        cir.scope {
          %10 = cir.const #cir.int<0> : !s32i loc(#loc85)
          %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc85)
          cir.store %11, %5 : !u64i, !cir.ptr<!u64i> loc(#loc181)
          cir.for : cond {
            %12 = cir.load %5 : !cir.ptr<!u64i>, !u64i loc(#loc87)
            %13 = cir.const #cir.int<100> : !s32i loc(#loc88)
            %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc88)
            %15 = cir.cmp(lt, %12, %14) : !u64i, !s32i loc(#loc182)
            %16 = cir.cast(int_to_bool, %15 : !s32i), !cir.bool loc(#loc89)
            cir.condition(%16) loc(#loc89)
          } body {
            cir.scope {
              %12 = cir.load %5 : !cir.ptr<!u64i>, !u64i loc(#loc91)
              %13 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s64i x 100>>), !cir.ptr<!s64i> loc(#loc92)
              %14 = cir.ptr_stride(%13 : !cir.ptr<!s64i>, %12 : !u64i), !cir.ptr<!s64i> loc(#loc92)
              %15 = cir.load %14 : !cir.ptr<!s64i>, !s64i loc(#loc92)
              %16 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc93)
              %17 = cir.load %5 : !cir.ptr<!u64i>, !u64i loc(#loc94)
              %18 = cir.ptr_stride(%16 : !cir.ptr<!s64i>, %17 : !u64i), !cir.ptr<!s64i> loc(#loc95)
              cir.store %15, %18 : !s64i, !cir.ptr<!s64i> loc(#loc184)
            } loc(#loc183)
            cir.yield loc(#loc84)
          } step {
            %12 = cir.load %5 : !cir.ptr<!u64i>, !u64i loc(#loc97)
            %13 = cir.unary(inc, %12) : !u64i, !u64i loc(#loc98)
            cir.store %13, %5 : !u64i, !cir.ptr<!u64i> loc(#loc185)
            cir.yield loc(#loc180)
          } loc(#loc180)
        } loc(#loc180)
        %6 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc99)
        %7 = cir.const #cir.int<0> : !s32i loc(#loc100)
        %8 = cir.ptr_stride(%6 : !cir.ptr<!s64i>, %7 : !s32i), !cir.ptr<!s64i> loc(#loc101)
        %9 = cir.load %8 : !cir.ptr<!s64i>, !s64i loc(#loc99)
        cir.call @printLongLongLine(%9) : (!s64i) -> () loc(#loc102)
      } loc(#loc178)
    } loc(#loc176)
    cir.return loc(#loc59)
  } loc(#loc169)
  cir.func no_proto internal private  @goodG2B2() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["data"] {alignment = 8 : i64} loc(#loc187)
    %1 = cir.alloca !cir.array<!s64i x 50>, !cir.ptr<!cir.array<!s64i x 50>>, ["dataBadBuffer"] {alignment = 16 : i64} loc(#loc188)
    %2 = cir.alloca !cir.array<!s64i x 100>, !cir.ptr<!cir.array<!s64i x 100>>, ["dataGoodBuffer"] {alignment = 16 : i64} loc(#loc189)
    cir.scope {
      %3 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc145)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc113)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc113)
      cir.if %5 {
        %6 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s64i x 100>>), !cir.ptr<!s64i> loc(#loc115)
        cir.store %6, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc192)
      } loc(#loc191)
    } loc(#loc190)
    cir.scope {
      %3 = cir.alloca !cir.array<!s64i x 100>, !cir.ptr<!cir.array<!s64i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc194)
      %4 = cir.const #cir.zero : !cir.array<!s64i x 100> loc(#loc194)
      cir.store %4, %3 : !cir.array<!s64i x 100>, !cir.ptr<!cir.array<!s64i x 100>> loc(#loc194)
      cir.scope {
        %5 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc196)
        cir.scope {
          %10 = cir.const #cir.int<0> : !s32i loc(#loc127)
          %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc127)
          cir.store %11, %5 : !u64i, !cir.ptr<!u64i> loc(#loc198)
          cir.for : cond {
            %12 = cir.load %5 : !cir.ptr<!u64i>, !u64i loc(#loc129)
            %13 = cir.const #cir.int<100> : !s32i loc(#loc130)
            %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc130)
            %15 = cir.cmp(lt, %12, %14) : !u64i, !s32i loc(#loc199)
            %16 = cir.cast(int_to_bool, %15 : !s32i), !cir.bool loc(#loc131)
            cir.condition(%16) loc(#loc131)
          } body {
            cir.scope {
              %12 = cir.load %5 : !cir.ptr<!u64i>, !u64i loc(#loc133)
              %13 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s64i x 100>>), !cir.ptr<!s64i> loc(#loc134)
              %14 = cir.ptr_stride(%13 : !cir.ptr<!s64i>, %12 : !u64i), !cir.ptr<!s64i> loc(#loc134)
              %15 = cir.load %14 : !cir.ptr<!s64i>, !s64i loc(#loc134)
              %16 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc135)
              %17 = cir.load %5 : !cir.ptr<!u64i>, !u64i loc(#loc136)
              %18 = cir.ptr_stride(%16 : !cir.ptr<!s64i>, %17 : !u64i), !cir.ptr<!s64i> loc(#loc137)
              cir.store %15, %18 : !s64i, !cir.ptr<!s64i> loc(#loc201)
            } loc(#loc200)
            cir.yield loc(#loc126)
          } step {
            %12 = cir.load %5 : !cir.ptr<!u64i>, !u64i loc(#loc139)
            %13 = cir.unary(inc, %12) : !u64i, !u64i loc(#loc140)
            cir.store %13, %5 : !u64i, !cir.ptr<!u64i> loc(#loc202)
            cir.yield loc(#loc197)
          } loc(#loc197)
        } loc(#loc197)
        %6 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc141)
        %7 = cir.const #cir.int<0> : !s32i loc(#loc142)
        %8 = cir.ptr_stride(%6 : !cir.ptr<!s64i>, %7 : !s32i), !cir.ptr<!s64i> loc(#loc143)
        %9 = cir.load %8 : !cir.ptr<!s64i>, !s64i loc(#loc141)
        cir.call @printLongLongLine(%9) : (!s64i) -> () loc(#loc144)
      } loc(#loc195)
    } loc(#loc193)
    cir.return loc(#loc104)
  } loc(#loc186)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s04/CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_loop_05.c":0:0)
#loc1 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_loop_05.c":23:1)
#loc2 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_loop_05.c":23:25)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":26:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":26:49)
#loc5 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_loop_05.c":28:1)
#loc6 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_loop_05.c":51:1)
#loc7 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_loop_05.c":30:5)
#loc8 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_loop_05.c":30:15)
#loc9 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_loop_05.c":31:5)
#loc10 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_loop_05.c":31:29)
#loc11 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_loop_05.c":32:5)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_loop_05.c":32:31)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_loop_05.c":33:5)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_loop_05.c":38:5)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_loop_05.c":33:8)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_loop_05.c":34:5)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_loop_05.c":37:16)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_loop_05.c":37:9)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_loop_05.c":39:5)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_loop_05.c":50:5)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_loop_05.c":40:9)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_loop_05.c":40:33)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_loop_05.c":41:9)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_loop_05.c":49:9)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_loop_05.c":42:13)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_loop_05.c":42:20)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_loop_05.c":44:13)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_loop_05.c":47:13)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_loop_05.c":44:22)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_loop_05.c":44:18)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_loop_05.c":44:25)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_loop_05.c":44:29)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_loop_05.c":44:27)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_loop_05.c":45:13)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_loop_05.c":46:34)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_loop_05.c":46:27)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_loop_05.c":46:17)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_loop_05.c":46:22)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_loop_05.c":46:23)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_loop_05.c":46:35)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_loop_05.c":44:35)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_loop_05.c":44:34)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_loop_05.c":48:31)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_loop_05.c":48:36)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_loop_05.c":48:37)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_loop_05.c":48:13)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_loop_05.c":112:1)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_loop_05.c":116:1)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_loop_05.c":114:5)
#loc50 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_loop_05.c":114:14)
#loc51 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_loop_05.c":115:5)
#loc52 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_loop_05.c":115:14)
#loc53 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_loop_05.c":24:1)
#loc54 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_loop_05.c":24:26)
#loc55 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc56 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc57 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_loop_05.c":66:19)
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_loop_05.c":58:1)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_loop_05.c":85:1)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_loop_05.c":60:5)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_loop_05.c":60:15)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_loop_05.c":61:5)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_loop_05.c":61:29)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_loop_05.c":62:5)
#loc65 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_loop_05.c":62:31)
#loc66 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_loop_05.c":63:5)
#loc67 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_loop_05.c":72:5)
#loc68 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_loop_05.c":63:8)
#loc69 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_loop_05.c":64:5)
#loc70 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_loop_05.c":67:5)
#loc71 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_loop_05.c":69:5)
#loc72 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_loop_05.c":66:9)
#loc73 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_loop_05.c":71:16)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_loop_05.c":71:9)
#loc75 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_loop_05.c":73:5)
#loc76 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_loop_05.c":84:5)
#loc77 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_loop_05.c":74:9)
#loc78 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_loop_05.c":74:33)
#loc79 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_loop_05.c":75:9)
#loc80 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_loop_05.c":83:9)
#loc81 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_loop_05.c":76:13)
#loc82 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_loop_05.c":76:20)
#loc83 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_loop_05.c":78:13)
#loc84 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_loop_05.c":81:13)
#loc85 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_loop_05.c":78:22)
#loc86 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_loop_05.c":78:18)
#loc87 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_loop_05.c":78:25)
#loc88 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_loop_05.c":78:29)
#loc89 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_loop_05.c":78:27)
#loc90 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_loop_05.c":79:13)
#loc91 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_loop_05.c":80:34)
#loc92 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_loop_05.c":80:27)
#loc93 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_loop_05.c":80:17)
#loc94 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_loop_05.c":80:22)
#loc95 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_loop_05.c":80:23)
#loc96 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_loop_05.c":80:35)
#loc97 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_loop_05.c":78:35)
#loc98 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_loop_05.c":78:34)
#loc99 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_loop_05.c":82:31)
#loc100 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_loop_05.c":82:36)
#loc101 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_loop_05.c":82:37)
#loc102 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_loop_05.c":82:13)
#loc103 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_loop_05.c":88:1)
#loc104 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_loop_05.c":110:1)
#loc105 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_loop_05.c":90:5)
#loc106 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_loop_05.c":90:15)
#loc107 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_loop_05.c":91:5)
#loc108 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_loop_05.c":91:29)
#loc109 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_loop_05.c":92:5)
#loc110 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_loop_05.c":92:31)
#loc111 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_loop_05.c":93:5)
#loc112 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_loop_05.c":97:5)
#loc113 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_loop_05.c":93:8)
#loc114 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_loop_05.c":94:5)
#loc115 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_loop_05.c":96:16)
#loc116 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_loop_05.c":96:9)
#loc117 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_loop_05.c":98:5)
#loc118 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_loop_05.c":109:5)
#loc119 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_loop_05.c":99:9)
#loc120 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_loop_05.c":99:33)
#loc121 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_loop_05.c":100:9)
#loc122 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_loop_05.c":108:9)
#loc123 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_loop_05.c":101:13)
#loc124 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_loop_05.c":101:20)
#loc125 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_loop_05.c":103:13)
#loc126 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_loop_05.c":106:13)
#loc127 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_loop_05.c":103:22)
#loc128 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_loop_05.c":103:18)
#loc129 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_loop_05.c":103:25)
#loc130 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_loop_05.c":103:29)
#loc131 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_loop_05.c":103:27)
#loc132 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_loop_05.c":104:13)
#loc133 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_loop_05.c":105:34)
#loc134 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_loop_05.c":105:27)
#loc135 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_loop_05.c":105:17)
#loc136 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_loop_05.c":105:22)
#loc137 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_loop_05.c":105:23)
#loc138 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_loop_05.c":105:35)
#loc139 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_loop_05.c":103:35)
#loc140 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_loop_05.c":103:34)
#loc141 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_loop_05.c":107:31)
#loc142 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_loop_05.c":107:36)
#loc143 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_loop_05.c":107:37)
#loc144 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_loop_05.c":107:13)
#loc145 = loc(fused[#loc1, #loc2])
#loc146 = loc(fused[#loc3, #loc4])
#loc147 = loc(fused[#loc5, #loc6])
#loc148 = loc(fused[#loc7, #loc8])
#loc149 = loc(fused[#loc9, #loc10])
#loc150 = loc(fused[#loc11, #loc12])
#loc151 = loc(fused[#loc13, #loc14])
#loc152 = loc(fused[#loc16, #loc14])
#loc153 = loc(fused[#loc18, #loc17])
#loc154 = loc(fused[#loc19, #loc20])
#loc155 = loc(fused[#loc21, #loc22])
#loc156 = loc(fused[#loc23, #loc24])
#loc157 = loc(fused[#loc25, #loc26])
#loc158 = loc(fused[#loc27, #loc28])
#loc159 = loc(fused[#loc30, #loc29])
#loc160 = loc(fused[#loc31, #loc32])
#loc161 = loc(fused[#loc34, #loc28])
#loc162 = loc(fused[#loc37, #loc40])
#loc163 = loc(fused[#loc42, #loc41])
#loc164 = loc(fused[#loc47, #loc48])
#loc165 = loc(fused[#loc49, #loc50])
#loc166 = loc(fused[#loc51, #loc52])
#loc167 = loc(fused[#loc53, #loc54])
#loc168 = loc(fused[#loc55, #loc56])
#loc169 = loc(fused[#loc58, #loc59])
#loc170 = loc(fused[#loc60, #loc61])
#loc171 = loc(fused[#loc62, #loc63])
#loc172 = loc(fused[#loc64, #loc65])
#loc173 = loc(fused[#loc66, #loc67])
#loc174 = loc(fused[#loc69, #loc70, #loc71, #loc67])
#loc175 = loc(fused[#loc74, #loc73])
#loc176 = loc(fused[#loc75, #loc76])
#loc177 = loc(fused[#loc77, #loc78])
#loc178 = loc(fused[#loc79, #loc80])
#loc179 = loc(fused[#loc81, #loc82])
#loc180 = loc(fused[#loc83, #loc84])
#loc181 = loc(fused[#loc86, #loc85])
#loc182 = loc(fused[#loc87, #loc88])
#loc183 = loc(fused[#loc90, #loc84])
#loc184 = loc(fused[#loc93, #loc96])
#loc185 = loc(fused[#loc98, #loc97])
#loc186 = loc(fused[#loc103, #loc104])
#loc187 = loc(fused[#loc105, #loc106])
#loc188 = loc(fused[#loc107, #loc108])
#loc189 = loc(fused[#loc109, #loc110])
#loc190 = loc(fused[#loc111, #loc112])
#loc191 = loc(fused[#loc114, #loc112])
#loc192 = loc(fused[#loc116, #loc115])
#loc193 = loc(fused[#loc117, #loc118])
#loc194 = loc(fused[#loc119, #loc120])
#loc195 = loc(fused[#loc121, #loc122])
#loc196 = loc(fused[#loc123, #loc124])
#loc197 = loc(fused[#loc125, #loc126])
#loc198 = loc(fused[#loc128, #loc127])
#loc199 = loc(fused[#loc129, #loc130])
#loc200 = loc(fused[#loc132, #loc126])
#loc201 = loc(fused[#loc135, #loc138])
#loc202 = loc(fused[#loc140, #loc139])
