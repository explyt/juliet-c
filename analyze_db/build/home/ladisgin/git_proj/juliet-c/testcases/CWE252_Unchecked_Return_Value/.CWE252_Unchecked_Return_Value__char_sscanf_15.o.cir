!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE252_Unchecked_Return_Value/CWE252_Unchecked_Return_Value__char_sscanf_15.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @__isoc99_sscanf(!cir.ptr<!s8i>, !cir.ptr<!s8i>, ...) -> !s32i extra(#fn_attr) loc(#loc83)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"sscanf\00" : !cir.array<!s8i x 7>> : !cir.array<!s8i x 7> {alignment = 1 : i64} loc(#loc3)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"%99s" : !cir.array<!s8i x 4>, trailing_zeros> : !cir.array<!s8i x 6> {alignment = 1 : i64} loc(#loc4)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc84)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc7)
  cir.func no_proto @CWE252_Unchecked_Return_Value__char_sscanf_15_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["dataBuffer"] {alignment = 16 : i64} loc(#loc86)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc87)
    cir.br ^bb1 loc(#loc88)
  ^bb1:  // pred: ^bb0
    %2 = cir.const #cir.int<6> : !s32i loc(#loc16)
    cir.br ^bb2 loc(#loc14)
  ^bb2:  // pred: ^bb1
    cir.switch.flat %2 : !s32i, ^bb7 [
      6: ^bb4
    ] loc(#loc14)
  ^bb3:  // no predecessors
    cir.br ^bb4 loc(#loc17)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc89)
  ^bb5:  // pred: ^bb4
    %3 = cir.const #cir.zero : !cir.array<!s8i x 100> loc(#loc86)
    cir.store %3, %0 : !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>> loc(#loc86)
    %4 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc13)
    cir.store %4, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc87)
    %5 = cir.get_global @__isoc99_sscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!s8i>, !cir.ptr<!s8i>, ...)>> loc(#loc20)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 7>> loc(#loc3)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 7>>), !cir.ptr<!s8i> loc(#loc3)
    %8 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 6>> loc(#loc4)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 6>>), !cir.ptr<!s8i> loc(#loc4)
    %10 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc21)
    %11 = cir.call @__isoc99_sscanf(%7, %9, %10) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc20)
    cir.br ^bb6 loc(#loc19)
  ^bb6:  // pred: ^bb5
    cir.br ^bb8 loc(#loc22)
  ^bb7:  // pred: ^bb2
    %12 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc7)
    %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc7)
    cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc23)
    cir.br ^bb8 loc(#loc24)
  ^bb8:  // 2 preds: ^bb6, ^bb7
    cir.br ^bb9 loc(#loc15)
  ^bb9:  // pred: ^bb8
    cir.return loc(#loc9)
  } loc(#loc85)
  cir.func no_proto @CWE252_Unchecked_Return_Value__char_sscanf_15_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<!void ()>> loc(#loc91)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc27)
    %1 = cir.get_global @good2 : !cir.ptr<!cir.func<!void ()>> loc(#loc92)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc29)
    cir.return loc(#loc26)
  } loc(#loc90)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"sscanf failed!\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc31)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["dataBuffer"] {alignment = 16 : i64} loc(#loc94)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc95)
    cir.br ^bb1 loc(#loc96)
  ^bb1:  // pred: ^bb0
    %2 = cir.const #cir.int<5> : !s32i loc(#loc40)
    cir.br ^bb2 loc(#loc38)
  ^bb2:  // pred: ^bb1
    cir.switch.flat %2 : !s32i, ^bb5 [
      6: ^bb4
    ] loc(#loc38)
  ^bb3:  // no predecessors
    cir.br ^bb4 loc(#loc41)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    %3 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc42)
    %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc42)
    cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc43)
    cir.br ^bb12 loc(#loc44)
  ^bb5:  // pred: ^bb2
    cir.br ^bb6 loc(#loc97)
  ^bb6:  // pred: ^bb5
    %5 = cir.const #cir.zero : !cir.array<!s8i x 100> loc(#loc94)
    cir.store %5, %0 : !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>> loc(#loc94)
    %6 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc37)
    cir.store %6, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc95)
    cir.br ^bb7 loc(#loc98)
  ^bb7:  // pred: ^bb6
    %7 = cir.get_global @__isoc99_sscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!s8i>, !cir.ptr<!s8i>, ...)>> loc(#loc49)
    %8 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 7>> loc(#loc50)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 7>>), !cir.ptr<!s8i> loc(#loc50)
    %10 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 6>> loc(#loc51)
    %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 6>>), !cir.ptr<!s8i> loc(#loc51)
    %12 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc52)
    %13 = cir.call @__isoc99_sscanf(%9, %11, %12) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc49)
    %14 = cir.const #cir.int<1> : !s32i loc(#loc53)
    %15 = cir.unary(minus, %14) : !s32i, !s32i loc(#loc53)
    %16 = cir.cmp(eq, %13, %15) : !s32i, !cir.bool loc(#loc99)
    cir.brcond %16 ^bb8, ^bb9 loc(#loc100)
  ^bb8:  // pred: ^bb7
    %17 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc31)
    %18 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc31)
    cir.call @printLine(%18) : (!cir.ptr<!s8i>) -> () loc(#loc55)
    cir.br ^bb9 loc(#loc48)
  ^bb9:  // 2 preds: ^bb7, ^bb8
    cir.br ^bb10 loc(#loc48)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc46)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc56)
  ^bb12:  // 2 preds: ^bb4, ^bb11
    cir.br ^bb13 loc(#loc39)
  ^bb13:  // pred: ^bb12
    cir.return loc(#loc33)
  } loc(#loc93)
  cir.func no_proto internal private @good2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["dataBuffer"] {alignment = 16 : i64} loc(#loc102)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc103)
    cir.br ^bb1 loc(#loc104)
  ^bb1:  // pred: ^bb0
    %2 = cir.const #cir.int<6> : !s32i loc(#loc65)
    cir.br ^bb2 loc(#loc63)
  ^bb2:  // pred: ^bb1
    cir.switch.flat %2 : !s32i, ^bb11 [
      6: ^bb4
    ] loc(#loc63)
  ^bb3:  // no predecessors
    cir.br ^bb4 loc(#loc66)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc105)
  ^bb5:  // pred: ^bb4
    %3 = cir.const #cir.zero : !cir.array<!s8i x 100> loc(#loc102)
    cir.store %3, %0 : !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>> loc(#loc102)
    %4 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc62)
    cir.store %4, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc103)
    cir.br ^bb6 loc(#loc106)
  ^bb6:  // pred: ^bb5
    %5 = cir.get_global @__isoc99_sscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!s8i>, !cir.ptr<!s8i>, ...)>> loc(#loc71)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 7>> loc(#loc72)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 7>>), !cir.ptr<!s8i> loc(#loc72)
    %8 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 6>> loc(#loc73)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 6>>), !cir.ptr<!s8i> loc(#loc73)
    %10 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc74)
    %11 = cir.call @__isoc99_sscanf(%7, %9, %10) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc71)
    %12 = cir.const #cir.int<1> : !s32i loc(#loc75)
    %13 = cir.unary(minus, %12) : !s32i, !s32i loc(#loc75)
    %14 = cir.cmp(eq, %11, %13) : !s32i, !cir.bool loc(#loc107)
    cir.brcond %14 ^bb7, ^bb8 loc(#loc108)
  ^bb7:  // pred: ^bb6
    %15 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc77)
    %16 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc77)
    cir.call @printLine(%16) : (!cir.ptr<!s8i>) -> () loc(#loc78)
    cir.br ^bb8 loc(#loc70)
  ^bb8:  // 2 preds: ^bb6, ^bb7
    cir.br ^bb9 loc(#loc70)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc68)
  ^bb10:  // pred: ^bb9
    cir.br ^bb12 loc(#loc79)
  ^bb11:  // pred: ^bb2
    %17 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc80)
    %18 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc80)
    cir.call @printLine(%18) : (!cir.ptr<!s8i>) -> () loc(#loc81)
    cir.br ^bb12 loc(#loc82)
  ^bb12:  // 2 preds: ^bb10, ^bb11
    cir.br ^bb13 loc(#loc64)
  ^bb13:  // pred: ^bb12
    cir.return loc(#loc58)
  } loc(#loc101)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE252_Unchecked_Return_Value/CWE252_Unchecked_Return_Value__char_sscanf_15.c":0:0)
#loc1 = loc("/usr/include/stdio.h":468:1)
#loc2 = loc("/usr/include/stdio.h":468:12)
#loc3 = loc("CWE252_Unchecked_Return_Value__char_sscanf_15.c":37:16)
#loc4 = loc("CWE252_Unchecked_Return_Value__char_sscanf_15.c":37:21)
#loc5 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc6 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc7 = loc("CWE252_Unchecked_Return_Value__char_sscanf_15.c":42:19)
#loc8 = loc("CWE252_Unchecked_Return_Value__char_sscanf_15.c":26:1)
#loc9 = loc("CWE252_Unchecked_Return_Value__char_sscanf_15.c":45:1)
#loc10 = loc("CWE252_Unchecked_Return_Value__char_sscanf_15.c":34:9)
#loc11 = loc("CWE252_Unchecked_Return_Value__char_sscanf_15.c":34:32)
#loc12 = loc("CWE252_Unchecked_Return_Value__char_sscanf_15.c":35:9)
#loc13 = loc("CWE252_Unchecked_Return_Value__char_sscanf_15.c":35:23)
#loc14 = loc("CWE252_Unchecked_Return_Value__char_sscanf_15.c":28:5)
#loc15 = loc("CWE252_Unchecked_Return_Value__char_sscanf_15.c":44:5)
#loc16 = loc("CWE252_Unchecked_Return_Value__char_sscanf_15.c":28:12)
#loc17 = loc("CWE252_Unchecked_Return_Value__char_sscanf_15.c":30:5)
#loc18 = loc("CWE252_Unchecked_Return_Value__char_sscanf_15.c":31:5)
#loc19 = loc("CWE252_Unchecked_Return_Value__char_sscanf_15.c":38:5)
#loc20 = loc("CWE252_Unchecked_Return_Value__char_sscanf_15.c":37:9)
#loc21 = loc("CWE252_Unchecked_Return_Value__char_sscanf_15.c":37:31)
#loc22 = loc("CWE252_Unchecked_Return_Value__char_sscanf_15.c":39:5)
#loc23 = loc("CWE252_Unchecked_Return_Value__char_sscanf_15.c":42:9)
#loc24 = loc("CWE252_Unchecked_Return_Value__char_sscanf_15.c":43:9)
#loc25 = loc("CWE252_Unchecked_Return_Value__char_sscanf_15.c":101:1)
#loc26 = loc("CWE252_Unchecked_Return_Value__char_sscanf_15.c":105:1)
#loc27 = loc("CWE252_Unchecked_Return_Value__char_sscanf_15.c":103:5)
#loc28 = loc("CWE252_Unchecked_Return_Value__char_sscanf_15.c":103:11)
#loc29 = loc("CWE252_Unchecked_Return_Value__char_sscanf_15.c":104:5)
#loc30 = loc("CWE252_Unchecked_Return_Value__char_sscanf_15.c":104:11)
#loc31 = loc("CWE252_Unchecked_Return_Value__char_sscanf_15.c":69:23)
#loc32 = loc("CWE252_Unchecked_Return_Value__char_sscanf_15.c":52:1)
#loc33 = loc("CWE252_Unchecked_Return_Value__char_sscanf_15.c":74:1)
#loc34 = loc("CWE252_Unchecked_Return_Value__char_sscanf_15.c":64:9)
#loc35 = loc("CWE252_Unchecked_Return_Value__char_sscanf_15.c":64:32)
#loc36 = loc("CWE252_Unchecked_Return_Value__char_sscanf_15.c":65:9)
#loc37 = loc("CWE252_Unchecked_Return_Value__char_sscanf_15.c":65:23)
#loc38 = loc("CWE252_Unchecked_Return_Value__char_sscanf_15.c":54:5)
#loc39 = loc("CWE252_Unchecked_Return_Value__char_sscanf_15.c":73:5)
#loc40 = loc("CWE252_Unchecked_Return_Value__char_sscanf_15.c":54:12)
#loc41 = loc("CWE252_Unchecked_Return_Value__char_sscanf_15.c":56:5)
#loc42 = loc("CWE252_Unchecked_Return_Value__char_sscanf_15.c":58:19)
#loc43 = loc("CWE252_Unchecked_Return_Value__char_sscanf_15.c":58:9)
#loc44 = loc("CWE252_Unchecked_Return_Value__char_sscanf_15.c":59:9)
#loc45 = loc("CWE252_Unchecked_Return_Value__char_sscanf_15.c":61:5)
#loc46 = loc("CWE252_Unchecked_Return_Value__char_sscanf_15.c":71:5)
#loc47 = loc("CWE252_Unchecked_Return_Value__char_sscanf_15.c":67:9)
#loc48 = loc("CWE252_Unchecked_Return_Value__char_sscanf_15.c":70:9)
#loc49 = loc("CWE252_Unchecked_Return_Value__char_sscanf_15.c":67:13)
#loc50 = loc("CWE252_Unchecked_Return_Value__char_sscanf_15.c":67:20)
#loc51 = loc("CWE252_Unchecked_Return_Value__char_sscanf_15.c":67:25)
#loc52 = loc("CWE252_Unchecked_Return_Value__char_sscanf_15.c":67:35)
#loc53 = loc("CWE252_Unchecked_Return_Value__char_sscanf_15.c":67:44)
#loc54 = loc("CWE252_Unchecked_Return_Value__char_sscanf_15.c":68:9)
#loc55 = loc("CWE252_Unchecked_Return_Value__char_sscanf_15.c":69:13)
#loc56 = loc("CWE252_Unchecked_Return_Value__char_sscanf_15.c":72:5)
#loc57 = loc("CWE252_Unchecked_Return_Value__char_sscanf_15.c":77:1)
#loc58 = loc("CWE252_Unchecked_Return_Value__char_sscanf_15.c":99:1)
#loc59 = loc("CWE252_Unchecked_Return_Value__char_sscanf_15.c":85:9)
#loc60 = loc("CWE252_Unchecked_Return_Value__char_sscanf_15.c":85:32)
#loc61 = loc("CWE252_Unchecked_Return_Value__char_sscanf_15.c":86:9)
#loc62 = loc("CWE252_Unchecked_Return_Value__char_sscanf_15.c":86:23)
#loc63 = loc("CWE252_Unchecked_Return_Value__char_sscanf_15.c":79:5)
#loc64 = loc("CWE252_Unchecked_Return_Value__char_sscanf_15.c":98:5)
#loc65 = loc("CWE252_Unchecked_Return_Value__char_sscanf_15.c":79:12)
#loc66 = loc("CWE252_Unchecked_Return_Value__char_sscanf_15.c":81:5)
#loc67 = loc("CWE252_Unchecked_Return_Value__char_sscanf_15.c":82:5)
#loc68 = loc("CWE252_Unchecked_Return_Value__char_sscanf_15.c":92:5)
#loc69 = loc("CWE252_Unchecked_Return_Value__char_sscanf_15.c":88:9)
#loc70 = loc("CWE252_Unchecked_Return_Value__char_sscanf_15.c":91:9)
#loc71 = loc("CWE252_Unchecked_Return_Value__char_sscanf_15.c":88:13)
#loc72 = loc("CWE252_Unchecked_Return_Value__char_sscanf_15.c":88:20)
#loc73 = loc("CWE252_Unchecked_Return_Value__char_sscanf_15.c":88:25)
#loc74 = loc("CWE252_Unchecked_Return_Value__char_sscanf_15.c":88:35)
#loc75 = loc("CWE252_Unchecked_Return_Value__char_sscanf_15.c":88:44)
#loc76 = loc("CWE252_Unchecked_Return_Value__char_sscanf_15.c":89:9)
#loc77 = loc("CWE252_Unchecked_Return_Value__char_sscanf_15.c":90:23)
#loc78 = loc("CWE252_Unchecked_Return_Value__char_sscanf_15.c":90:13)
#loc79 = loc("CWE252_Unchecked_Return_Value__char_sscanf_15.c":93:5)
#loc80 = loc("CWE252_Unchecked_Return_Value__char_sscanf_15.c":96:19)
#loc81 = loc("CWE252_Unchecked_Return_Value__char_sscanf_15.c":96:9)
#loc82 = loc("CWE252_Unchecked_Return_Value__char_sscanf_15.c":97:9)
#loc83 = loc(fused[#loc1, #loc2])
#loc84 = loc(fused[#loc5, #loc6])
#loc85 = loc(fused[#loc8, #loc9])
#loc86 = loc(fused[#loc10, #loc11])
#loc87 = loc(fused[#loc12, #loc13])
#loc88 = loc(fused[#loc14, #loc15])
#loc89 = loc(fused[#loc18, #loc19])
#loc90 = loc(fused[#loc25, #loc26])
#loc91 = loc(fused[#loc27, #loc28])
#loc92 = loc(fused[#loc29, #loc30])
#loc93 = loc(fused[#loc32, #loc33])
#loc94 = loc(fused[#loc34, #loc35])
#loc95 = loc(fused[#loc36, #loc37])
#loc96 = loc(fused[#loc38, #loc39])
#loc97 = loc(fused[#loc45, #loc46])
#loc98 = loc(fused[#loc47, #loc48])
#loc99 = loc(fused[#loc49, #loc53])
#loc100 = loc(fused[#loc54, #loc48])
#loc101 = loc(fused[#loc57, #loc58])
#loc102 = loc(fused[#loc59, #loc60])
#loc103 = loc(fused[#loc61, #loc62])
#loc104 = loc(fused[#loc63, #loc64])
#loc105 = loc(fused[#loc67, #loc68])
#loc106 = loc(fused[#loc69, #loc70])
#loc107 = loc(fused[#loc71, #loc75])
#loc108 = loc(fused[#loc76, #loc70])
