!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE196_Unsigned_to_Signed_Conversion_Error/CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, "dlti.mangling_mode" = "e", "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc128)
  cir.func private @printIntLine(!s32i) loc(#loc129)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc130)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc7)
  cir.func no_proto @CWE196_Unsigned_to_Signed_Conversion_Error__basic_15_bad() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.const #cir.int<6> : !s32i loc(#loc12)
      cir.switch (%0 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          cir.scope {
            %1 = cir.alloca !u32i, !cir.ptr<!u32i>, ["intUnsigned"] {alignment = 4 : i64} loc(#loc134)
            %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["intSigned"] {alignment = 4 : i64} loc(#loc135)
            %3 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
            %4 = cir.cast(integral, %3 : !s32i), !u32i loc(#loc20)
            cir.store %4, %1 : !u32i, !cir.ptr<!u32i> loc(#loc136)
            cir.scope {
              %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc25)
              %9 = cir.const #cir.int<2> : !s32i loc(#loc26)
              %10 = cir.binop(rem, %8, %9) : !s32i loc(#loc138)
              %11 = cir.const #cir.int<0> : !s32i loc(#loc27)
              %12 = cir.cmp(eq, %10, %11) : !s32i, !cir.bool loc(#loc139)
              cir.if %12 {
                %13 = cir.const #cir.int<2147483647> : !s32i loc(#loc29)
                %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc29)
                %15 = cir.const #cir.int<2> : !u32i loc(#loc29)
                %16 = cir.binop(mul, %14, %15) : !u32i loc(#loc29)
                %17 = cir.const #cir.int<1> : !u32i loc(#loc29)
                %18 = cir.binop(add, %16, %17) : !u32i loc(#loc29)
                %19 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc30)
                %20 = cir.binop(sub, %18, %19) : !u32i loc(#loc141)
                cir.store %20, %1 : !u32i, !cir.ptr<!u32i> loc(#loc142)
              } loc(#loc140)
            } loc(#loc137)
            %5 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc32)
            %6 = cir.cast(integral, %5 : !u32i), !s32i loc(#loc32)
            cir.store %6, %2 : !s32i, !cir.ptr<!s32i> loc(#loc143)
            %7 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc34)
            cir.call @printIntLine(%7) : (!s32i) -> () loc(#loc35)
          } loc(#loc133)
          cir.break loc(#loc36)
        } loc(#loc13)
        cir.case(default, []) {
          %1 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc7)
          %2 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc7)
          cir.call @printLine(%2) : (!cir.ptr<!s8i>) -> () loc(#loc38)
          cir.break loc(#loc39)
        } loc(#loc37)
        cir.yield loc(#loc10)
      } loc(#loc10)
    } loc(#loc132)
    cir.return loc(#loc9)
  } loc(#loc131)
  cir.func no_proto @CWE196_Unsigned_to_Signed_Conversion_Error__basic_15_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<()>> loc(#loc145)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc42)
    %1 = cir.get_global @good2 : !cir.ptr<!cir.func<()>> loc(#loc146)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc44)
    cir.return loc(#loc41)
  } loc(#loc144)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc147)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.const #cir.int<5> : !s32i loc(#loc52)
      cir.switch (%0 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %1 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc54)
          %2 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc54)
          cir.call @printLine(%2) : (!cir.ptr<!s8i>) -> () loc(#loc55)
          cir.break loc(#loc56)
        } loc(#loc53)
        cir.case(default, []) {
          cir.scope {
            %1 = cir.alloca !u32i, !cir.ptr<!u32i>, ["intUnsigned"] {alignment = 4 : i64} loc(#loc151)
            %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["intSigned"] {alignment = 4 : i64} loc(#loc152)
            %3 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc64)
            %4 = cir.cast(integral, %3 : !s32i), !u32i loc(#loc64)
            cir.store %4, %1 : !u32i, !cir.ptr<!u32i> loc(#loc153)
            cir.scope {
              %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc69)
              %9 = cir.const #cir.int<2> : !s32i loc(#loc70)
              %10 = cir.binop(rem, %8, %9) : !s32i loc(#loc155)
              %11 = cir.const #cir.int<0> : !s32i loc(#loc71)
              %12 = cir.cmp(eq, %10, %11) : !s32i, !cir.bool loc(#loc156)
              cir.if %12 {
                %13 = cir.const #cir.int<2147483647> : !s32i loc(#loc73)
                %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc73)
                %15 = cir.const #cir.int<2> : !u32i loc(#loc73)
                %16 = cir.binop(mul, %14, %15) : !u32i loc(#loc73)
                %17 = cir.const #cir.int<1> : !u32i loc(#loc73)
                %18 = cir.binop(add, %16, %17) : !u32i loc(#loc73)
                %19 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc74)
                %20 = cir.binop(sub, %18, %19) : !u32i loc(#loc158)
                cir.store %20, %1 : !u32i, !cir.ptr<!u32i> loc(#loc159)
              } loc(#loc157)
            } loc(#loc154)
            cir.scope {
              %8 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc78)
              %9 = cir.const #cir.int<2147483647> : !s32i loc(#loc79)
              %10 = cir.cast(integral, %9 : !s32i), !u32i loc(#loc79)
              %11 = cir.cmp(gt, %8, %10) : !u32i, !cir.bool loc(#loc161)
              cir.if %11 {
                %12 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc81)
                %13 = cir.const #cir.int<1> : !s32i loc(#loc82)
                cir.call @exit(%13) : (!s32i) -> () extra(#fn_attr) loc(#loc81)
              } loc(#loc162)
            } loc(#loc160)
            %5 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc83)
            %6 = cir.cast(integral, %5 : !u32i), !s32i loc(#loc83)
            cir.store %6, %2 : !s32i, !cir.ptr<!s32i> loc(#loc163)
            %7 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc85)
            cir.call @printIntLine(%7) : (!s32i) -> () loc(#loc86)
          } loc(#loc150)
          cir.break loc(#loc87)
        } loc(#loc57)
        cir.yield loc(#loc50)
      } loc(#loc50)
    } loc(#loc149)
    cir.return loc(#loc49)
  } loc(#loc148)
  cir.func no_proto internal private @good2() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.const #cir.int<6> : !s32i loc(#loc92)
      cir.switch (%0 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          cir.scope {
            %1 = cir.alloca !u32i, !cir.ptr<!u32i>, ["intUnsigned"] {alignment = 4 : i64} loc(#loc167)
            %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["intSigned"] {alignment = 4 : i64} loc(#loc168)
            %3 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc100)
            %4 = cir.cast(integral, %3 : !s32i), !u32i loc(#loc100)
            cir.store %4, %1 : !u32i, !cir.ptr<!u32i> loc(#loc169)
            cir.scope {
              %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc105)
              %9 = cir.const #cir.int<2> : !s32i loc(#loc106)
              %10 = cir.binop(rem, %8, %9) : !s32i loc(#loc171)
              %11 = cir.const #cir.int<0> : !s32i loc(#loc107)
              %12 = cir.cmp(eq, %10, %11) : !s32i, !cir.bool loc(#loc172)
              cir.if %12 {
                %13 = cir.const #cir.int<2147483647> : !s32i loc(#loc109)
                %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc109)
                %15 = cir.const #cir.int<2> : !u32i loc(#loc109)
                %16 = cir.binop(mul, %14, %15) : !u32i loc(#loc109)
                %17 = cir.const #cir.int<1> : !u32i loc(#loc109)
                %18 = cir.binop(add, %16, %17) : !u32i loc(#loc109)
                %19 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc110)
                %20 = cir.binop(sub, %18, %19) : !u32i loc(#loc174)
                cir.store %20, %1 : !u32i, !cir.ptr<!u32i> loc(#loc175)
              } loc(#loc173)
            } loc(#loc170)
            cir.scope {
              %8 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc114)
              %9 = cir.const #cir.int<2147483647> : !s32i loc(#loc115)
              %10 = cir.cast(integral, %9 : !s32i), !u32i loc(#loc115)
              %11 = cir.cmp(gt, %8, %10) : !u32i, !cir.bool loc(#loc177)
              cir.if %11 {
                %12 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc117)
                %13 = cir.const #cir.int<1> : !s32i loc(#loc118)
                cir.call @exit(%13) : (!s32i) -> () extra(#fn_attr) loc(#loc117)
              } loc(#loc178)
            } loc(#loc176)
            %5 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc119)
            %6 = cir.cast(integral, %5 : !u32i), !s32i loc(#loc119)
            cir.store %6, %2 : !s32i, !cir.ptr<!s32i> loc(#loc179)
            %7 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc121)
            cir.call @printIntLine(%7) : (!s32i) -> () loc(#loc122)
          } loc(#loc166)
          cir.break loc(#loc123)
        } loc(#loc93)
        cir.case(default, []) {
          %1 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc125)
          %2 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc125)
          cir.call @printLine(%2) : (!cir.ptr<!s8i>) -> () loc(#loc126)
          cir.break loc(#loc127)
        } loc(#loc124)
        cir.yield loc(#loc90)
      } loc(#loc90)
    } loc(#loc165)
    cir.return loc(#loc89)
  } loc(#loc164)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE196_Unsigned_to_Signed_Conversion_Error/CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../testcasesupport/std_testcase_io.h":18:1)
#loc4 = loc("../../testcasesupport/std_testcase_io.h":18:33)
#loc5 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc6 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc7 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":40:19)
#loc8 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":20:1)
#loc9 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":43:1)
#loc10 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":22:5)
#loc11 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":42:5)
#loc12 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":22:12)
#loc13 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":24:5)
#loc14 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":25:5)
#loc15 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":36:5)
#loc16 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":26:9)
#loc17 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":26:18)
#loc18 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":27:9)
#loc19 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":27:13)
#loc20 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":28:23)
#loc21 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":28:9)
#loc22 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":28:28)
#loc23 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":29:9)
#loc24 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":32:9)
#loc25 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":29:13)
#loc26 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":29:22)
#loc27 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":29:27)
#loc28 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":30:9)
#loc29 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":31:27)
#loc30 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":31:38)
#loc31 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":31:13)
#loc32 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":34:21)
#loc33 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":34:9)
#loc34 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":35:22)
#loc35 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":35:9)
#loc36 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":37:5)
#loc37 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":38:5)
#loc38 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":40:9)
#loc39 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":41:9)
#loc40 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":109:1)
#loc41 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":113:1)
#loc42 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":111:5)
#loc43 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":111:11)
#loc44 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":112:5)
#loc45 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":112:11)
#loc46 = loc("/usr/include/stdlib.h":756:1)
#loc47 = loc("/usr/include/stdlib.h":756:70)
#loc48 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":50:1)
#loc49 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":77:1)
#loc50 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":52:5)
#loc51 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":76:5)
#loc52 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":52:12)
#loc53 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":54:5)
#loc54 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":56:19)
#loc55 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":56:9)
#loc56 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":57:9)
#loc57 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":58:5)
#loc58 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":59:5)
#loc59 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":74:5)
#loc60 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":60:9)
#loc61 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":60:18)
#loc62 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":61:9)
#loc63 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":61:13)
#loc64 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":62:23)
#loc65 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":62:9)
#loc66 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":62:28)
#loc67 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":63:9)
#loc68 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":66:9)
#loc69 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":63:13)
#loc70 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":63:22)
#loc71 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":63:27)
#loc72 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":64:9)
#loc73 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":65:27)
#loc74 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":65:38)
#loc75 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":65:13)
#loc76 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":68:9)
#loc77 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":71:9)
#loc78 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":68:13)
#loc79 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":68:27)
#loc80 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":69:9)
#loc81 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":70:13)
#loc82 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":70:18)
#loc83 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":72:21)
#loc84 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":72:9)
#loc85 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":73:22)
#loc86 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":73:9)
#loc87 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":75:5)
#loc88 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":80:1)
#loc89 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":107:1)
#loc90 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":82:5)
#loc91 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":106:5)
#loc92 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":82:12)
#loc93 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":84:5)
#loc94 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":85:5)
#loc95 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":100:5)
#loc96 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":86:9)
#loc97 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":86:18)
#loc98 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":87:9)
#loc99 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":87:13)
#loc100 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":88:23)
#loc101 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":88:9)
#loc102 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":88:28)
#loc103 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":89:9)
#loc104 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":92:9)
#loc105 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":89:13)
#loc106 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":89:22)
#loc107 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":89:27)
#loc108 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":90:9)
#loc109 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":91:27)
#loc110 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":91:38)
#loc111 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":91:13)
#loc112 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":94:9)
#loc113 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":97:9)
#loc114 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":94:13)
#loc115 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":94:27)
#loc116 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":95:9)
#loc117 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":96:13)
#loc118 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":96:18)
#loc119 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":98:21)
#loc120 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":98:9)
#loc121 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":99:22)
#loc122 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":99:9)
#loc123 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":101:5)
#loc124 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":102:5)
#loc125 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":104:19)
#loc126 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":104:9)
#loc127 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":105:9)
#loc128 = loc(fused[#loc1, #loc2])
#loc129 = loc(fused[#loc3, #loc4])
#loc130 = loc(fused[#loc5, #loc6])
#loc131 = loc(fused[#loc8, #loc9])
#loc132 = loc(fused[#loc10, #loc11])
#loc133 = loc(fused[#loc14, #loc15])
#loc134 = loc(fused[#loc16, #loc17])
#loc135 = loc(fused[#loc18, #loc19])
#loc136 = loc(fused[#loc21, #loc22])
#loc137 = loc(fused[#loc23, #loc24])
#loc138 = loc(fused[#loc25, #loc26])
#loc139 = loc(fused[#loc25, #loc27])
#loc140 = loc(fused[#loc28, #loc24])
#loc141 = loc(fused[#loc29, #loc30])
#loc142 = loc(fused[#loc31, #loc30])
#loc143 = loc(fused[#loc33, #loc32])
#loc144 = loc(fused[#loc40, #loc41])
#loc145 = loc(fused[#loc42, #loc43])
#loc146 = loc(fused[#loc44, #loc45])
#loc147 = loc(fused[#loc46, #loc47])
#loc148 = loc(fused[#loc48, #loc49])
#loc149 = loc(fused[#loc50, #loc51])
#loc150 = loc(fused[#loc58, #loc59])
#loc151 = loc(fused[#loc60, #loc61])
#loc152 = loc(fused[#loc62, #loc63])
#loc153 = loc(fused[#loc65, #loc66])
#loc154 = loc(fused[#loc67, #loc68])
#loc155 = loc(fused[#loc69, #loc70])
#loc156 = loc(fused[#loc69, #loc71])
#loc157 = loc(fused[#loc72, #loc68])
#loc158 = loc(fused[#loc73, #loc74])
#loc159 = loc(fused[#loc75, #loc74])
#loc160 = loc(fused[#loc76, #loc77])
#loc161 = loc(fused[#loc78, #loc79])
#loc162 = loc(fused[#loc80, #loc77])
#loc163 = loc(fused[#loc84, #loc83])
#loc164 = loc(fused[#loc88, #loc89])
#loc165 = loc(fused[#loc90, #loc91])
#loc166 = loc(fused[#loc94, #loc95])
#loc167 = loc(fused[#loc96, #loc97])
#loc168 = loc(fused[#loc98, #loc99])
#loc169 = loc(fused[#loc101, #loc102])
#loc170 = loc(fused[#loc103, #loc104])
#loc171 = loc(fused[#loc105, #loc106])
#loc172 = loc(fused[#loc105, #loc107])
#loc173 = loc(fused[#loc108, #loc104])
#loc174 = loc(fused[#loc109, #loc110])
#loc175 = loc(fused[#loc111, #loc110])
#loc176 = loc(fused[#loc112, #loc113])
#loc177 = loc(fused[#loc114, #loc115])
#loc178 = loc(fused[#loc116, #loc113])
#loc179 = loc(fused[#loc120, #loc119])
