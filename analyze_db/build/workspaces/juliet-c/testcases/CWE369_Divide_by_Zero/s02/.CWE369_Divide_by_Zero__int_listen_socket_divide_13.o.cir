!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#true = #cir.bool<true> : !cir.bool
!ty_in_addr = !cir.record<struct "in_addr" {!u32i} #cir.record.decl.ast>
!ty_sockaddr = !cir.record<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.record<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/workspaces/juliet-c/testcases/CWE369_Divide_by_Zero/s02/CWE369_Divide_by_Zero__int_listen_socket_divide_13.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.global "private" constant external @GLOBAL_CONST_FIVE : !s32i {alignment = 4 : i64} loc(#loc506)
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc507)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc508)
  cir.func private @bind(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc509)
  cir.func private @listen(!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc510)
  cir.func private @accept(!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc511)
  cir.func private @recv(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc512)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc513)
  cir.func private @close(!s32i) -> !s32i loc(#loc514)
  cir.func private @printIntLine(!s32i) loc(#loc515)
  cir.func no_proto @CWE369_Divide_by_Zero__int_listen_socket_divide_13_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc517)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc25)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc26)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc518)
    cir.scope {
      %3 = cir.get_global @GLOBAL_CONST_FIVE : !cir.ptr<!s32i> loc(#loc506)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc30)
      %5 = cir.const #cir.int<5> : !s32i loc(#loc31)
      %6 = cir.cmp(eq, %4, %5) : !s32i, !cir.bool loc(#loc520)
      cir.if %6 {
        cir.scope {
          %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc523)
          %8 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc524)
          %9 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc525)
          %10 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc526)
          %11 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc527)
          %12 = cir.const #cir.int<1> : !s32i loc(#loc40)
          %13 = cir.unary(minus, %12) nsw : !s32i, !s32i loc(#loc40)
          cir.store %13, %9 : !s32i, !cir.ptr<!s32i> loc(#loc525)
          %14 = cir.const #cir.int<1> : !s32i loc(#loc42)
          %15 = cir.unary(minus, %14) nsw : !s32i, !s32i loc(#loc42)
          cir.store %15, %10 : !s32i, !cir.ptr<!s32i> loc(#loc526)
          cir.scope {
            cir.do {
              cir.scope {
                %16 = cir.const #cir.int<2> : !s32i loc(#loc49)
                %17 = cir.const #cir.int<1> : !s32i loc(#loc50)
                %18 = cir.const #cir.int<6> : !s32i loc(#loc51)
                %19 = cir.call @socket(%16, %17, %18) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc52)
                cir.store %19, %9 : !s32i, !cir.ptr<!s32i> loc(#loc530)
                cir.scope {
                  %61 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc57)
                  %62 = cir.const #cir.int<1> : !s32i loc(#loc58)
                  %63 = cir.unary(minus, %62) nsw : !s32i, !s32i loc(#loc58)
                  %64 = cir.cmp(eq, %61, %63) : !s32i, !cir.bool loc(#loc532)
                  cir.if %64 {
                    cir.break loc(#loc60)
                  } loc(#loc533)
                } loc(#loc531)
                %20 = cir.cast(bitcast, %8 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc534)
                %21 = cir.const #cir.int<0> : !s32i loc(#loc63)
                %22 = cir.const #cir.int<16> : !u64i loc(#loc535)
                cir.libc.memset %22 bytes from %20 set to %21 : !cir.ptr<!void>, !s32i, !u64i loc(#loc536)
                %23 = cir.const #cir.int<2> : !s32i loc(#loc68)
                %24 = cir.cast(integral, %23 : !s32i), !u16i loc(#loc68)
                %25 = cir.get_member %8[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc69)
                cir.store %24, %25 : !u16i, !cir.ptr<!u16i> loc(#loc537)
                %26 = cir.const #cir.int<0> : !s32i loc(#loc71)
                %27 = cir.cast(integral, %26 : !s32i), !u32i loc(#loc71)
                %28 = cir.get_member %8[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc72)
                %29 = cir.get_member %28[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc73)
                cir.store %27, %29 : !u32i, !cir.ptr<!u32i> loc(#loc538)
                %30 = cir.const #cir.int<27015> : !s32i loc(#loc75)
                %31 = cir.cast(integral, %30 : !s32i), !u16i loc(#loc75)
                %32 = cir.call @htons(%31) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc76)
                %33 = cir.get_member %8[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc77)
                cir.store %32, %33 : !u16i, !cir.ptr<!u16i> loc(#loc539)
                cir.scope {
                  %61 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc82)
                  %62 = cir.cast(bitcast, %8 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc541)
                  %63 = cir.const #cir.int<16> : !u64i loc(#loc542)
                  %64 = cir.cast(integral, %63 : !u64i), !u32i loc(#loc542)
                  %65 = cir.call @bind(%61, %62, %64) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc87)
                  %66 = cir.const #cir.int<1> : !s32i loc(#loc88)
                  %67 = cir.unary(minus, %66) nsw : !s32i, !s32i loc(#loc88)
                  %68 = cir.cmp(eq, %65, %67) : !s32i, !cir.bool loc(#loc543)
                  cir.if %68 {
                    cir.break loc(#loc90)
                  } loc(#loc544)
                } loc(#loc540)
                cir.scope {
                  %61 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc93)
                  %62 = cir.const #cir.int<5> : !s32i loc(#loc94)
                  %63 = cir.call @listen(%61, %62) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc95)
                  %64 = cir.const #cir.int<1> : !s32i loc(#loc96)
                  %65 = cir.unary(minus, %64) nsw : !s32i, !s32i loc(#loc96)
                  %66 = cir.cmp(eq, %63, %65) : !s32i, !cir.bool loc(#loc546)
                  cir.if %66 {
                    cir.break loc(#loc98)
                  } loc(#loc547)
                } loc(#loc545)
                %34 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc99)
                %35 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc100)
                %36 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc101)
                %37 = cir.call @accept(%34, %35, %36) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc102)
                cir.store %37, %10 : !s32i, !cir.ptr<!s32i> loc(#loc548)
                cir.scope {
                  %61 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc107)
                  %62 = cir.const #cir.int<1> : !s32i loc(#loc108)
                  %63 = cir.unary(minus, %62) nsw : !s32i, !s32i loc(#loc108)
                  %64 = cir.cmp(eq, %61, %63) : !s32i, !cir.bool loc(#loc550)
                  cir.if %64 {
                    cir.break loc(#loc110)
                  } loc(#loc551)
                } loc(#loc549)
                %38 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc111)
                %39 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc112)
                %40 = cir.cast(bitcast, %39 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc112)
                %41 = cir.const #cir.int<3> : !s32i loc(#loc113)
                %42 = cir.cast(integral, %41 : !s32i), !u64i loc(#loc113)
                %43 = cir.const #cir.int<4> : !u64i loc(#loc113)
                %44 = cir.binop(mul, %42, %43) : !u64i loc(#loc113)
                %45 = cir.const #cir.int<2> : !s32i loc(#loc113)
                %46 = cir.cast(integral, %45 : !s32i), !u64i loc(#loc113)
                %47 = cir.binop(add, %44, %46) : !u64i loc(#loc113)
                %48 = cir.const #cir.int<1> : !s32i loc(#loc114)
                %49 = cir.cast(integral, %48 : !s32i), !u64i loc(#loc114)
                %50 = cir.binop(sub, %47, %49) : !u64i loc(#loc552)
                %51 = cir.const #cir.int<0> : !s32i loc(#loc115)
                %52 = cir.call @recv(%38, %40, %50, %51) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc116)
                %53 = cir.cast(integral, %52 : !s64i), !s32i loc(#loc116)
                cir.store %53, %7 : !s32i, !cir.ptr<!s32i> loc(#loc553)
                cir.scope {
                  %61 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc121)
                  %62 = cir.const #cir.int<1> : !s32i loc(#loc122)
                  %63 = cir.unary(minus, %62) nsw : !s32i, !s32i loc(#loc122)
                  %64 = cir.cmp(eq, %61, %63) : !s32i, !cir.bool loc(#loc555)
                  %65 = cir.ternary(%64, true {
                    %66 = cir.const #true loc(#loc123)
                    cir.yield %66 : !cir.bool loc(#loc123)
                  }, false {
                    %66 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc124)
                    %67 = cir.const #cir.int<0> : !s32i loc(#loc125)
                    %68 = cir.cmp(eq, %66, %67) : !s32i, !cir.bool loc(#loc556)
                    %69 = cir.ternary(%68, true {
                      %70 = cir.const #true loc(#loc123)
                      cir.yield %70 : !cir.bool loc(#loc123)
                    }, false {
                      %70 = cir.const #false loc(#loc123)
                      cir.yield %70 : !cir.bool loc(#loc123)
                    }) : (!cir.bool) -> !cir.bool loc(#loc123)
                    cir.yield %69 : !cir.bool loc(#loc123)
                  }) : (!cir.bool) -> !cir.bool loc(#loc123)
                  cir.if %65 {
                    cir.break loc(#loc127)
                  } loc(#loc557)
                } loc(#loc554)
                %54 = cir.const #cir.int<0> : !s32i loc(#loc128)
                %55 = cir.cast(integral, %54 : !s32i), !s8i loc(#loc128)
                %56 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc129)
                %57 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc130)
                %58 = cir.ptr_stride(%57 : !cir.ptr<!s8i>, %56 : !s32i), !cir.ptr<!s8i> loc(#loc130)
                cir.store %55, %58 : !s8i, !cir.ptr<!s8i> loc(#loc558)
                %59 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc131)
                %60 = cir.call @atoi(%59) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc132)
                cir.store %60, %0 : !s32i, !cir.ptr<!s32i> loc(#loc559)
              } loc(#loc529)
              cir.yield loc(#loc46)
            } while {
              %16 = cir.const #cir.int<0> : !s32i loc(#loc135)
              %17 = cir.cast(int_to_bool, %16 : !s32i), !cir.bool loc(#loc135)
              cir.condition(%17) loc(#loc135)
            } loc(#loc528)
          } loc(#loc528)
          cir.scope {
            %16 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc138)
            %17 = cir.const #cir.int<1> : !s32i loc(#loc139)
            %18 = cir.unary(minus, %17) nsw : !s32i, !s32i loc(#loc139)
            %19 = cir.cmp(ne, %16, %18) : !s32i, !cir.bool loc(#loc561)
            cir.if %19 {
              %20 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc141)
              %21 = cir.call @close(%20) : (!s32i) -> !s32i loc(#loc142)
            } loc(#loc562)
          } loc(#loc560)
          cir.scope {
            %16 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc145)
            %17 = cir.const #cir.int<1> : !s32i loc(#loc146)
            %18 = cir.unary(minus, %17) nsw : !s32i, !s32i loc(#loc146)
            %19 = cir.cmp(ne, %16, %18) : !s32i, !cir.bool loc(#loc564)
            cir.if %19 {
              %20 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc148)
              %21 = cir.call @close(%20) : (!s32i) -> !s32i loc(#loc149)
            } loc(#loc565)
          } loc(#loc563)
        } loc(#loc522)
      } loc(#loc521)
    } loc(#loc519)
    cir.scope {
      %3 = cir.get_global @GLOBAL_CONST_FIVE : !cir.ptr<!s32i> loc(#loc506)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc152)
      %5 = cir.const #cir.int<5> : !s32i loc(#loc153)
      %6 = cir.cmp(eq, %4, %5) : !s32i, !cir.bool loc(#loc567)
      cir.if %6 {
        %7 = cir.const #cir.int<100> : !s32i loc(#loc155)
        %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc156)
        %9 = cir.binop(div, %7, %8) : !s32i loc(#loc569)
        cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc157)
      } loc(#loc568)
    } loc(#loc566)
    cir.return loc(#loc22)
  } loc(#loc516)
  cir.func no_proto @CWE369_Divide_by_Zero__int_listen_socket_divide_13_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<()>> loc(#loc571)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc160)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<()>> loc(#loc572)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc162)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<()>> loc(#loc573)
    cir.call %2() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc164)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<()>> loc(#loc574)
    cir.call %3() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc166)
    cir.return loc(#loc159)
  } loc(#loc570)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc575)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc170)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"This would result in a divide by zero\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc171)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc577)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc176)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc177)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc578)
    cir.scope {
      %3 = cir.get_global @GLOBAL_CONST_FIVE : !cir.ptr<!s32i> loc(#loc506)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc181)
      %5 = cir.const #cir.int<5> : !s32i loc(#loc182)
      %6 = cir.cmp(eq, %4, %5) : !s32i, !cir.bool loc(#loc580)
      cir.if %6 {
        cir.scope {
          %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc583)
          %8 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc584)
          %9 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc585)
          %10 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc586)
          %11 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc587)
          %12 = cir.const #cir.int<1> : !s32i loc(#loc191)
          %13 = cir.unary(minus, %12) nsw : !s32i, !s32i loc(#loc191)
          cir.store %13, %9 : !s32i, !cir.ptr<!s32i> loc(#loc585)
          %14 = cir.const #cir.int<1> : !s32i loc(#loc193)
          %15 = cir.unary(minus, %14) nsw : !s32i, !s32i loc(#loc193)
          cir.store %15, %10 : !s32i, !cir.ptr<!s32i> loc(#loc586)
          cir.scope {
            cir.do {
              cir.scope {
                %16 = cir.const #cir.int<2> : !s32i loc(#loc200)
                %17 = cir.const #cir.int<1> : !s32i loc(#loc201)
                %18 = cir.const #cir.int<6> : !s32i loc(#loc202)
                %19 = cir.call @socket(%16, %17, %18) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc203)
                cir.store %19, %9 : !s32i, !cir.ptr<!s32i> loc(#loc590)
                cir.scope {
                  %61 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc208)
                  %62 = cir.const #cir.int<1> : !s32i loc(#loc209)
                  %63 = cir.unary(minus, %62) nsw : !s32i, !s32i loc(#loc209)
                  %64 = cir.cmp(eq, %61, %63) : !s32i, !cir.bool loc(#loc592)
                  cir.if %64 {
                    cir.break loc(#loc211)
                  } loc(#loc593)
                } loc(#loc591)
                %20 = cir.cast(bitcast, %8 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc594)
                %21 = cir.const #cir.int<0> : !s32i loc(#loc214)
                %22 = cir.const #cir.int<16> : !u64i loc(#loc595)
                cir.libc.memset %22 bytes from %20 set to %21 : !cir.ptr<!void>, !s32i, !u64i loc(#loc596)
                %23 = cir.const #cir.int<2> : !s32i loc(#loc219)
                %24 = cir.cast(integral, %23 : !s32i), !u16i loc(#loc219)
                %25 = cir.get_member %8[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc69)
                cir.store %24, %25 : !u16i, !cir.ptr<!u16i> loc(#loc597)
                %26 = cir.const #cir.int<0> : !s32i loc(#loc221)
                %27 = cir.cast(integral, %26 : !s32i), !u32i loc(#loc221)
                %28 = cir.get_member %8[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc72)
                %29 = cir.get_member %28[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc73)
                cir.store %27, %29 : !u32i, !cir.ptr<!u32i> loc(#loc598)
                %30 = cir.const #cir.int<27015> : !s32i loc(#loc223)
                %31 = cir.cast(integral, %30 : !s32i), !u16i loc(#loc223)
                %32 = cir.call @htons(%31) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc224)
                %33 = cir.get_member %8[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc77)
                cir.store %32, %33 : !u16i, !cir.ptr<!u16i> loc(#loc599)
                cir.scope {
                  %61 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc229)
                  %62 = cir.cast(bitcast, %8 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc601)
                  %63 = cir.const #cir.int<16> : !u64i loc(#loc602)
                  %64 = cir.cast(integral, %63 : !u64i), !u32i loc(#loc602)
                  %65 = cir.call @bind(%61, %62, %64) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc234)
                  %66 = cir.const #cir.int<1> : !s32i loc(#loc235)
                  %67 = cir.unary(minus, %66) nsw : !s32i, !s32i loc(#loc235)
                  %68 = cir.cmp(eq, %65, %67) : !s32i, !cir.bool loc(#loc603)
                  cir.if %68 {
                    cir.break loc(#loc237)
                  } loc(#loc604)
                } loc(#loc600)
                cir.scope {
                  %61 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc240)
                  %62 = cir.const #cir.int<5> : !s32i loc(#loc241)
                  %63 = cir.call @listen(%61, %62) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc242)
                  %64 = cir.const #cir.int<1> : !s32i loc(#loc243)
                  %65 = cir.unary(minus, %64) nsw : !s32i, !s32i loc(#loc243)
                  %66 = cir.cmp(eq, %63, %65) : !s32i, !cir.bool loc(#loc606)
                  cir.if %66 {
                    cir.break loc(#loc245)
                  } loc(#loc607)
                } loc(#loc605)
                %34 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc246)
                %35 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc247)
                %36 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc248)
                %37 = cir.call @accept(%34, %35, %36) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc249)
                cir.store %37, %10 : !s32i, !cir.ptr<!s32i> loc(#loc608)
                cir.scope {
                  %61 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc254)
                  %62 = cir.const #cir.int<1> : !s32i loc(#loc255)
                  %63 = cir.unary(minus, %62) nsw : !s32i, !s32i loc(#loc255)
                  %64 = cir.cmp(eq, %61, %63) : !s32i, !cir.bool loc(#loc610)
                  cir.if %64 {
                    cir.break loc(#loc257)
                  } loc(#loc611)
                } loc(#loc609)
                %38 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc258)
                %39 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc259)
                %40 = cir.cast(bitcast, %39 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc259)
                %41 = cir.const #cir.int<3> : !s32i loc(#loc260)
                %42 = cir.cast(integral, %41 : !s32i), !u64i loc(#loc260)
                %43 = cir.const #cir.int<4> : !u64i loc(#loc260)
                %44 = cir.binop(mul, %42, %43) : !u64i loc(#loc260)
                %45 = cir.const #cir.int<2> : !s32i loc(#loc260)
                %46 = cir.cast(integral, %45 : !s32i), !u64i loc(#loc260)
                %47 = cir.binop(add, %44, %46) : !u64i loc(#loc260)
                %48 = cir.const #cir.int<1> : !s32i loc(#loc261)
                %49 = cir.cast(integral, %48 : !s32i), !u64i loc(#loc261)
                %50 = cir.binop(sub, %47, %49) : !u64i loc(#loc612)
                %51 = cir.const #cir.int<0> : !s32i loc(#loc262)
                %52 = cir.call @recv(%38, %40, %50, %51) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc263)
                %53 = cir.cast(integral, %52 : !s64i), !s32i loc(#loc263)
                cir.store %53, %7 : !s32i, !cir.ptr<!s32i> loc(#loc613)
                cir.scope {
                  %61 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc268)
                  %62 = cir.const #cir.int<1> : !s32i loc(#loc269)
                  %63 = cir.unary(minus, %62) nsw : !s32i, !s32i loc(#loc269)
                  %64 = cir.cmp(eq, %61, %63) : !s32i, !cir.bool loc(#loc615)
                  %65 = cir.ternary(%64, true {
                    %66 = cir.const #true loc(#loc270)
                    cir.yield %66 : !cir.bool loc(#loc270)
                  }, false {
                    %66 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc271)
                    %67 = cir.const #cir.int<0> : !s32i loc(#loc272)
                    %68 = cir.cmp(eq, %66, %67) : !s32i, !cir.bool loc(#loc616)
                    %69 = cir.ternary(%68, true {
                      %70 = cir.const #true loc(#loc270)
                      cir.yield %70 : !cir.bool loc(#loc270)
                    }, false {
                      %70 = cir.const #false loc(#loc270)
                      cir.yield %70 : !cir.bool loc(#loc270)
                    }) : (!cir.bool) -> !cir.bool loc(#loc270)
                    cir.yield %69 : !cir.bool loc(#loc270)
                  }) : (!cir.bool) -> !cir.bool loc(#loc270)
                  cir.if %65 {
                    cir.break loc(#loc274)
                  } loc(#loc617)
                } loc(#loc614)
                %54 = cir.const #cir.int<0> : !s32i loc(#loc275)
                %55 = cir.cast(integral, %54 : !s32i), !s8i loc(#loc275)
                %56 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc276)
                %57 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc277)
                %58 = cir.ptr_stride(%57 : !cir.ptr<!s8i>, %56 : !s32i), !cir.ptr<!s8i> loc(#loc277)
                cir.store %55, %58 : !s8i, !cir.ptr<!s8i> loc(#loc618)
                %59 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc278)
                %60 = cir.call @atoi(%59) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc279)
                cir.store %60, %0 : !s32i, !cir.ptr<!s32i> loc(#loc619)
              } loc(#loc589)
              cir.yield loc(#loc197)
            } while {
              %16 = cir.const #cir.int<0> : !s32i loc(#loc282)
              %17 = cir.cast(int_to_bool, %16 : !s32i), !cir.bool loc(#loc282)
              cir.condition(%17) loc(#loc282)
            } loc(#loc588)
          } loc(#loc588)
          cir.scope {
            %16 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc285)
            %17 = cir.const #cir.int<1> : !s32i loc(#loc286)
            %18 = cir.unary(minus, %17) nsw : !s32i, !s32i loc(#loc286)
            %19 = cir.cmp(ne, %16, %18) : !s32i, !cir.bool loc(#loc621)
            cir.if %19 {
              %20 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc288)
              %21 = cir.call @close(%20) : (!s32i) -> !s32i loc(#loc289)
            } loc(#loc622)
          } loc(#loc620)
          cir.scope {
            %16 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc292)
            %17 = cir.const #cir.int<1> : !s32i loc(#loc293)
            %18 = cir.unary(minus, %17) nsw : !s32i, !s32i loc(#loc293)
            %19 = cir.cmp(ne, %16, %18) : !s32i, !cir.bool loc(#loc624)
            cir.if %19 {
              %20 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc295)
              %21 = cir.call @close(%20) : (!s32i) -> !s32i loc(#loc296)
            } loc(#loc625)
          } loc(#loc623)
        } loc(#loc582)
      } loc(#loc581)
    } loc(#loc579)
    cir.scope {
      %3 = cir.get_global @GLOBAL_CONST_FIVE : !cir.ptr<!s32i> loc(#loc506)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc299)
      %5 = cir.const #cir.int<5> : !s32i loc(#loc300)
      %6 = cir.cmp(ne, %4, %5) : !s32i, !cir.bool loc(#loc627)
      cir.if %6 {
        %7 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc170)
        %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc170)
        cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc304)
      } else {
        cir.scope {
          %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc307)
          %8 = cir.const #cir.int<0> : !s32i loc(#loc308)
          %9 = cir.cmp(ne, %7, %8) : !s32i, !cir.bool loc(#loc630)
          cir.if %9 {
            %10 = cir.const #cir.int<100> : !s32i loc(#loc312)
            %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc313)
            %12 = cir.binop(div, %10, %11) : !s32i loc(#loc632)
            cir.call @printIntLine(%12) : (!s32i) -> () loc(#loc314)
          } else {
            %10 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc171)
            %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc171)
            cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc315)
          } loc(#loc631)
        } loc(#loc629)
      } loc(#loc628)
    } loc(#loc626)
    cir.return loc(#loc173)
  } loc(#loc576)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc634)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc320)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc321)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc635)
    cir.scope {
      %3 = cir.get_global @GLOBAL_CONST_FIVE : !cir.ptr<!s32i> loc(#loc506)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc325)
      %5 = cir.const #cir.int<5> : !s32i loc(#loc326)
      %6 = cir.cmp(eq, %4, %5) : !s32i, !cir.bool loc(#loc637)
      cir.if %6 {
        cir.scope {
          %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc640)
          %8 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc641)
          %9 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc642)
          %10 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc643)
          %11 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc644)
          %12 = cir.const #cir.int<1> : !s32i loc(#loc335)
          %13 = cir.unary(minus, %12) nsw : !s32i, !s32i loc(#loc335)
          cir.store %13, %9 : !s32i, !cir.ptr<!s32i> loc(#loc642)
          %14 = cir.const #cir.int<1> : !s32i loc(#loc337)
          %15 = cir.unary(minus, %14) nsw : !s32i, !s32i loc(#loc337)
          cir.store %15, %10 : !s32i, !cir.ptr<!s32i> loc(#loc643)
          cir.scope {
            cir.do {
              cir.scope {
                %16 = cir.const #cir.int<2> : !s32i loc(#loc344)
                %17 = cir.const #cir.int<1> : !s32i loc(#loc345)
                %18 = cir.const #cir.int<6> : !s32i loc(#loc346)
                %19 = cir.call @socket(%16, %17, %18) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc347)
                cir.store %19, %9 : !s32i, !cir.ptr<!s32i> loc(#loc647)
                cir.scope {
                  %61 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc352)
                  %62 = cir.const #cir.int<1> : !s32i loc(#loc353)
                  %63 = cir.unary(minus, %62) nsw : !s32i, !s32i loc(#loc353)
                  %64 = cir.cmp(eq, %61, %63) : !s32i, !cir.bool loc(#loc649)
                  cir.if %64 {
                    cir.break loc(#loc355)
                  } loc(#loc650)
                } loc(#loc648)
                %20 = cir.cast(bitcast, %8 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc651)
                %21 = cir.const #cir.int<0> : !s32i loc(#loc358)
                %22 = cir.const #cir.int<16> : !u64i loc(#loc652)
                cir.libc.memset %22 bytes from %20 set to %21 : !cir.ptr<!void>, !s32i, !u64i loc(#loc653)
                %23 = cir.const #cir.int<2> : !s32i loc(#loc363)
                %24 = cir.cast(integral, %23 : !s32i), !u16i loc(#loc363)
                %25 = cir.get_member %8[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc69)
                cir.store %24, %25 : !u16i, !cir.ptr<!u16i> loc(#loc654)
                %26 = cir.const #cir.int<0> : !s32i loc(#loc365)
                %27 = cir.cast(integral, %26 : !s32i), !u32i loc(#loc365)
                %28 = cir.get_member %8[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc72)
                %29 = cir.get_member %28[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc73)
                cir.store %27, %29 : !u32i, !cir.ptr<!u32i> loc(#loc655)
                %30 = cir.const #cir.int<27015> : !s32i loc(#loc367)
                %31 = cir.cast(integral, %30 : !s32i), !u16i loc(#loc367)
                %32 = cir.call @htons(%31) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc368)
                %33 = cir.get_member %8[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc77)
                cir.store %32, %33 : !u16i, !cir.ptr<!u16i> loc(#loc656)
                cir.scope {
                  %61 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc373)
                  %62 = cir.cast(bitcast, %8 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc658)
                  %63 = cir.const #cir.int<16> : !u64i loc(#loc659)
                  %64 = cir.cast(integral, %63 : !u64i), !u32i loc(#loc659)
                  %65 = cir.call @bind(%61, %62, %64) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc378)
                  %66 = cir.const #cir.int<1> : !s32i loc(#loc379)
                  %67 = cir.unary(minus, %66) nsw : !s32i, !s32i loc(#loc379)
                  %68 = cir.cmp(eq, %65, %67) : !s32i, !cir.bool loc(#loc660)
                  cir.if %68 {
                    cir.break loc(#loc381)
                  } loc(#loc661)
                } loc(#loc657)
                cir.scope {
                  %61 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc384)
                  %62 = cir.const #cir.int<5> : !s32i loc(#loc385)
                  %63 = cir.call @listen(%61, %62) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc386)
                  %64 = cir.const #cir.int<1> : !s32i loc(#loc387)
                  %65 = cir.unary(minus, %64) nsw : !s32i, !s32i loc(#loc387)
                  %66 = cir.cmp(eq, %63, %65) : !s32i, !cir.bool loc(#loc663)
                  cir.if %66 {
                    cir.break loc(#loc389)
                  } loc(#loc664)
                } loc(#loc662)
                %34 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc390)
                %35 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc391)
                %36 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc392)
                %37 = cir.call @accept(%34, %35, %36) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc393)
                cir.store %37, %10 : !s32i, !cir.ptr<!s32i> loc(#loc665)
                cir.scope {
                  %61 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc398)
                  %62 = cir.const #cir.int<1> : !s32i loc(#loc399)
                  %63 = cir.unary(minus, %62) nsw : !s32i, !s32i loc(#loc399)
                  %64 = cir.cmp(eq, %61, %63) : !s32i, !cir.bool loc(#loc667)
                  cir.if %64 {
                    cir.break loc(#loc401)
                  } loc(#loc668)
                } loc(#loc666)
                %38 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc402)
                %39 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc403)
                %40 = cir.cast(bitcast, %39 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc403)
                %41 = cir.const #cir.int<3> : !s32i loc(#loc404)
                %42 = cir.cast(integral, %41 : !s32i), !u64i loc(#loc404)
                %43 = cir.const #cir.int<4> : !u64i loc(#loc404)
                %44 = cir.binop(mul, %42, %43) : !u64i loc(#loc404)
                %45 = cir.const #cir.int<2> : !s32i loc(#loc404)
                %46 = cir.cast(integral, %45 : !s32i), !u64i loc(#loc404)
                %47 = cir.binop(add, %44, %46) : !u64i loc(#loc404)
                %48 = cir.const #cir.int<1> : !s32i loc(#loc405)
                %49 = cir.cast(integral, %48 : !s32i), !u64i loc(#loc405)
                %50 = cir.binop(sub, %47, %49) : !u64i loc(#loc669)
                %51 = cir.const #cir.int<0> : !s32i loc(#loc406)
                %52 = cir.call @recv(%38, %40, %50, %51) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc407)
                %53 = cir.cast(integral, %52 : !s64i), !s32i loc(#loc407)
                cir.store %53, %7 : !s32i, !cir.ptr<!s32i> loc(#loc670)
                cir.scope {
                  %61 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc412)
                  %62 = cir.const #cir.int<1> : !s32i loc(#loc413)
                  %63 = cir.unary(minus, %62) nsw : !s32i, !s32i loc(#loc413)
                  %64 = cir.cmp(eq, %61, %63) : !s32i, !cir.bool loc(#loc672)
                  %65 = cir.ternary(%64, true {
                    %66 = cir.const #true loc(#loc414)
                    cir.yield %66 : !cir.bool loc(#loc414)
                  }, false {
                    %66 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc415)
                    %67 = cir.const #cir.int<0> : !s32i loc(#loc416)
                    %68 = cir.cmp(eq, %66, %67) : !s32i, !cir.bool loc(#loc673)
                    %69 = cir.ternary(%68, true {
                      %70 = cir.const #true loc(#loc414)
                      cir.yield %70 : !cir.bool loc(#loc414)
                    }, false {
                      %70 = cir.const #false loc(#loc414)
                      cir.yield %70 : !cir.bool loc(#loc414)
                    }) : (!cir.bool) -> !cir.bool loc(#loc414)
                    cir.yield %69 : !cir.bool loc(#loc414)
                  }) : (!cir.bool) -> !cir.bool loc(#loc414)
                  cir.if %65 {
                    cir.break loc(#loc418)
                  } loc(#loc674)
                } loc(#loc671)
                %54 = cir.const #cir.int<0> : !s32i loc(#loc419)
                %55 = cir.cast(integral, %54 : !s32i), !s8i loc(#loc419)
                %56 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc420)
                %57 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc421)
                %58 = cir.ptr_stride(%57 : !cir.ptr<!s8i>, %56 : !s32i), !cir.ptr<!s8i> loc(#loc421)
                cir.store %55, %58 : !s8i, !cir.ptr<!s8i> loc(#loc675)
                %59 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc422)
                %60 = cir.call @atoi(%59) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc423)
                cir.store %60, %0 : !s32i, !cir.ptr<!s32i> loc(#loc676)
              } loc(#loc646)
              cir.yield loc(#loc341)
            } while {
              %16 = cir.const #cir.int<0> : !s32i loc(#loc426)
              %17 = cir.cast(int_to_bool, %16 : !s32i), !cir.bool loc(#loc426)
              cir.condition(%17) loc(#loc426)
            } loc(#loc645)
          } loc(#loc645)
          cir.scope {
            %16 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc429)
            %17 = cir.const #cir.int<1> : !s32i loc(#loc430)
            %18 = cir.unary(minus, %17) nsw : !s32i, !s32i loc(#loc430)
            %19 = cir.cmp(ne, %16, %18) : !s32i, !cir.bool loc(#loc678)
            cir.if %19 {
              %20 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc432)
              %21 = cir.call @close(%20) : (!s32i) -> !s32i loc(#loc433)
            } loc(#loc679)
          } loc(#loc677)
          cir.scope {
            %16 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc436)
            %17 = cir.const #cir.int<1> : !s32i loc(#loc437)
            %18 = cir.unary(minus, %17) nsw : !s32i, !s32i loc(#loc437)
            %19 = cir.cmp(ne, %16, %18) : !s32i, !cir.bool loc(#loc681)
            cir.if %19 {
              %20 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc439)
              %21 = cir.call @close(%20) : (!s32i) -> !s32i loc(#loc440)
            } loc(#loc682)
          } loc(#loc680)
        } loc(#loc639)
      } loc(#loc638)
    } loc(#loc636)
    cir.scope {
      %3 = cir.get_global @GLOBAL_CONST_FIVE : !cir.ptr<!s32i> loc(#loc506)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc443)
      %5 = cir.const #cir.int<5> : !s32i loc(#loc444)
      %6 = cir.cmp(eq, %4, %5) : !s32i, !cir.bool loc(#loc684)
      cir.if %6 {
        cir.scope {
          %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc448)
          %8 = cir.const #cir.int<0> : !s32i loc(#loc449)
          %9 = cir.cmp(ne, %7, %8) : !s32i, !cir.bool loc(#loc687)
          cir.if %9 {
            %10 = cir.const #cir.int<100> : !s32i loc(#loc453)
            %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc454)
            %12 = cir.binop(div, %10, %11) : !s32i loc(#loc689)
            cir.call @printIntLine(%12) : (!s32i) -> () loc(#loc455)
          } else {
            %10 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc456)
            %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc456)
            cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc457)
          } loc(#loc688)
        } loc(#loc686)
      } loc(#loc685)
    } loc(#loc683)
    cir.return loc(#loc317)
  } loc(#loc633)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc691)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc462)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc463)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc692)
    cir.scope {
      %3 = cir.get_global @GLOBAL_CONST_FIVE : !cir.ptr<!s32i> loc(#loc506)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc467)
      %5 = cir.const #cir.int<5> : !s32i loc(#loc468)
      %6 = cir.cmp(ne, %4, %5) : !s32i, !cir.bool loc(#loc694)
      cir.if %6 {
        %7 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc472)
        %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc472)
        cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc473)
      } else {
        %7 = cir.const #cir.int<7> : !s32i loc(#loc474)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc696)
      } loc(#loc695)
    } loc(#loc693)
    cir.scope {
      %3 = cir.get_global @GLOBAL_CONST_FIVE : !cir.ptr<!s32i> loc(#loc506)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc478)
      %5 = cir.const #cir.int<5> : !s32i loc(#loc479)
      %6 = cir.cmp(eq, %4, %5) : !s32i, !cir.bool loc(#loc698)
      cir.if %6 {
        %7 = cir.const #cir.int<100> : !s32i loc(#loc481)
        %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc482)
        %9 = cir.binop(div, %7, %8) : !s32i loc(#loc700)
        cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc483)
      } loc(#loc699)
    } loc(#loc697)
    cir.return loc(#loc459)
  } loc(#loc690)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc702)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc488)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc489)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc703)
    cir.scope {
      %3 = cir.get_global @GLOBAL_CONST_FIVE : !cir.ptr<!s32i> loc(#loc506)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc493)
      %5 = cir.const #cir.int<5> : !s32i loc(#loc494)
      %6 = cir.cmp(eq, %4, %5) : !s32i, !cir.bool loc(#loc705)
      cir.if %6 {
        %7 = cir.const #cir.int<7> : !s32i loc(#loc496)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc707)
      } loc(#loc706)
    } loc(#loc704)
    cir.scope {
      %3 = cir.get_global @GLOBAL_CONST_FIVE : !cir.ptr<!s32i> loc(#loc506)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc500)
      %5 = cir.const #cir.int<5> : !s32i loc(#loc501)
      %6 = cir.cmp(eq, %4, %5) : !s32i, !cir.bool loc(#loc709)
      cir.if %6 {
        %7 = cir.const #cir.int<100> : !s32i loc(#loc503)
        %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc504)
        %9 = cir.binop(div, %7, %8) : !s32i loc(#loc711)
        cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc505)
      } loc(#loc710)
    } loc(#loc708)
    cir.return loc(#loc485)
  } loc(#loc701)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE369_Divide_by_Zero/s02/CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase.h":111:1)
#loc2 = loc("../../../testcasesupport/std_testcase.h":111:18)
#loc3 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:1)
#loc4 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:62)
#loc5 = loc("/usr/include/netinet/in.h":402:1)
#loc6 = loc("/usr/include/netinet/in.h":403:40)
#loc7 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":112:1)
#loc8 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":113:6)
#loc9 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":296:1)
#loc10 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":296:39)
#loc11 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":306:1)
#loc12 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":307:38)
#loc13 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":145:1)
#loc14 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":145:68)
#loc15 = loc("/usr/include/stdlib.h":105:1)
#loc16 = loc("/usr/include/stdlib.h":106:33)
#loc17 = loc("/usr/include/unistd.h":358:1)
#loc18 = loc("/usr/include/unistd.h":358:27)
#loc19 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc20 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc21 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":44:1)
#loc22 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":126:1)
#loc23 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":46:5)
#loc24 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":46:9)
#loc25 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":48:13)
#loc26 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":48:12)
#loc27 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":48:5)
#loc28 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":49:5)
#loc29 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":120:5)
#loc30 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":49:8)
#loc31 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":49:27)
#loc32 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":50:5)
#loc33 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":51:9)
#loc34 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":119:9)
#loc35 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":56:13)
#loc36 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":56:17)
#loc37 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":57:13)
#loc38 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":57:32)
#loc39 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":58:13)
#loc40 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":58:35)
#loc41 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":59:13)
#loc42 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":59:35)
#loc43 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":60:13)
#loc44 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":60:45)
#loc45 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":61:13)
#loc46 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":104:21)
#loc47 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":62:13)
#loc48 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":103:13)
#loc49 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":71:39)
#loc50 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":71:48)
#loc51 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":71:61)
#loc52 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":71:32)
#loc53 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":71:17)
#loc54 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":71:72)
#loc55 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":72:17)
#loc56 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":75:17)
#loc57 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":72:21)
#loc58 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":72:37)
#loc59 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":73:17)
#loc60 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":74:21)
#loc61 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":76:24)
#loc62 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":76:25)
#loc63 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":76:34)
#loc64 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":76:37)
#loc65 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":76:51)
#loc66 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":76:17)
#loc67 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":76:52)
#loc68 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":77:38)
#loc69 = loc("/usr/include/netinet/in.h":249:5)
#loc70 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":77:17)
#loc71 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":78:43)
#loc72 = loc("/usr/include/netinet/in.h":251:20)
#loc73 = loc("/usr/include/netinet/in.h":33:15)
#loc74 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":78:17)
#loc75 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":79:42)
#loc76 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":79:36)
#loc77 = loc("/usr/include/netinet/in.h":250:15)
#loc78 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":79:17)
#loc79 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":79:50)
#loc80 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":80:17)
#loc81 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":83:17)
#loc82 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":80:26)
#loc83 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":80:58)
#loc84 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":80:59)
#loc85 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":80:68)
#loc86 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":80:82)
#loc87 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":80:21)
#loc88 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":80:88)
#loc89 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":81:17)
#loc90 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":82:21)
#loc91 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":84:17)
#loc92 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":87:17)
#loc93 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":84:28)
#loc94 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":84:42)
#loc95 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":84:21)
#loc96 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":84:61)
#loc97 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":85:17)
#loc98 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":86:21)
#loc99 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":88:39)
#loc100 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":88:53)
#loc101 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":88:59)
#loc102 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":88:32)
#loc103 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":88:17)
#loc104 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":88:63)
#loc105 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":89:17)
#loc106 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":92:17)
#loc107 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":89:21)
#loc108 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":89:37)
#loc109 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":90:17)
#loc110 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":91:21)
#loc111 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":94:35)
#loc112 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":94:49)
#loc113 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":94:62)
#loc114 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":94:80)
#loc115 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":94:83)
#loc116 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":94:30)
#loc117 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":94:17)
#loc118 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":94:84)
#loc119 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":95:17)
#loc120 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":98:17)
#loc121 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":95:21)
#loc122 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":95:35)
#loc123 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":95:48)
#loc124 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":95:51)
#loc125 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":95:65)
#loc126 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":96:17)
#loc127 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":97:21)
#loc128 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":100:43)
#loc129 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":100:29)
#loc130 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":100:17)
#loc131 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":102:29)
#loc132 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":102:24)
#loc133 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":102:17)
#loc134 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":102:40)
#loc135 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":104:20)
#loc136 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":105:13)
#loc137 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":108:13)
#loc138 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":105:17)
#loc139 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":105:33)
#loc140 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":106:13)
#loc141 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":107:30)
#loc142 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":107:17)
#loc143 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":109:13)
#loc144 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":112:13)
#loc145 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":109:17)
#loc146 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":109:33)
#loc147 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":110:13)
#loc148 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":111:30)
#loc149 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":111:17)
#loc150 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":121:5)
#loc151 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":125:5)
#loc152 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":121:8)
#loc153 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":121:27)
#loc154 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":122:5)
#loc155 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":124:22)
#loc156 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":124:28)
#loc157 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":124:9)
#loc158 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":362:1)
#loc159 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":368:1)
#loc160 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":364:5)
#loc161 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":364:14)
#loc162 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":365:5)
#loc163 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":365:14)
#loc164 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":366:5)
#loc165 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":366:14)
#loc166 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":367:5)
#loc167 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":367:14)
#loc168 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc169 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc170 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":213:19)
#loc171 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":224:23)
#loc172 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":133:1)
#loc173 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":227:1)
#loc174 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":135:5)
#loc175 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":135:9)
#loc176 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":137:13)
#loc177 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":137:12)
#loc178 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":137:5)
#loc179 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":138:5)
#loc180 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":209:5)
#loc181 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":138:8)
#loc182 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":138:27)
#loc183 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":139:5)
#loc184 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":140:9)
#loc185 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":208:9)
#loc186 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":145:13)
#loc187 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":145:17)
#loc188 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":146:13)
#loc189 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":146:32)
#loc190 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":147:13)
#loc191 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":147:35)
#loc192 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":148:13)
#loc193 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":148:35)
#loc194 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":149:13)
#loc195 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":149:45)
#loc196 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":150:13)
#loc197 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":193:21)
#loc198 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":151:13)
#loc199 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":192:13)
#loc200 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":160:39)
#loc201 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":160:48)
#loc202 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":160:61)
#loc203 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":160:32)
#loc204 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":160:17)
#loc205 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":160:72)
#loc206 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":161:17)
#loc207 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":164:17)
#loc208 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":161:21)
#loc209 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":161:37)
#loc210 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":162:17)
#loc211 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":163:21)
#loc212 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":165:24)
#loc213 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":165:25)
#loc214 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":165:34)
#loc215 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":165:37)
#loc216 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":165:51)
#loc217 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":165:17)
#loc218 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":165:52)
#loc219 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":166:38)
#loc220 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":166:17)
#loc221 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":167:43)
#loc222 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":167:17)
#loc223 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":168:42)
#loc224 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":168:36)
#loc225 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":168:17)
#loc226 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":168:50)
#loc227 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":169:17)
#loc228 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":172:17)
#loc229 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":169:26)
#loc230 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":169:58)
#loc231 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":169:59)
#loc232 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":169:68)
#loc233 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":169:82)
#loc234 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":169:21)
#loc235 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":169:88)
#loc236 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":170:17)
#loc237 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":171:21)
#loc238 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":173:17)
#loc239 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":176:17)
#loc240 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":173:28)
#loc241 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":173:42)
#loc242 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":173:21)
#loc243 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":173:61)
#loc244 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":174:17)
#loc245 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":175:21)
#loc246 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":177:39)
#loc247 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":177:53)
#loc248 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":177:59)
#loc249 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":177:32)
#loc250 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":177:17)
#loc251 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":177:63)
#loc252 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":178:17)
#loc253 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":181:17)
#loc254 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":178:21)
#loc255 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":178:37)
#loc256 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":179:17)
#loc257 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":180:21)
#loc258 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":183:35)
#loc259 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":183:49)
#loc260 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":183:62)
#loc261 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":183:80)
#loc262 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":183:83)
#loc263 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":183:30)
#loc264 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":183:17)
#loc265 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":183:84)
#loc266 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":184:17)
#loc267 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":187:17)
#loc268 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":184:21)
#loc269 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":184:35)
#loc270 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":184:48)
#loc271 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":184:51)
#loc272 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":184:65)
#loc273 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":185:17)
#loc274 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":186:21)
#loc275 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":189:43)
#loc276 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":189:29)
#loc277 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":189:17)
#loc278 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":191:29)
#loc279 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":191:24)
#loc280 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":191:17)
#loc281 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":191:40)
#loc282 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":193:20)
#loc283 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":194:13)
#loc284 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":197:13)
#loc285 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":194:17)
#loc286 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":194:33)
#loc287 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":195:13)
#loc288 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":196:30)
#loc289 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":196:17)
#loc290 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":198:13)
#loc291 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":201:13)
#loc292 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":198:17)
#loc293 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":198:33)
#loc294 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":199:13)
#loc295 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":200:30)
#loc296 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":200:17)
#loc297 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":210:5)
#loc298 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":226:5)
#loc299 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":210:8)
#loc300 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":210:27)
#loc301 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":211:5)
#loc302 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":214:5)
#loc303 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":216:5)
#loc304 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":213:9)
#loc305 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":218:9)
#loc306 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":225:9)
#loc307 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":218:13)
#loc308 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":218:21)
#loc309 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":219:9)
#loc310 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":221:9)
#loc311 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":223:9)
#loc312 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":220:26)
#loc313 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":220:32)
#loc314 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":220:13)
#loc315 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":224:13)
#loc316 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":230:1)
#loc317 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":319:1)
#loc318 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":232:5)
#loc319 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":232:9)
#loc320 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":234:13)
#loc321 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":234:12)
#loc322 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":234:5)
#loc323 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":235:5)
#loc324 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":306:5)
#loc325 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":235:8)
#loc326 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":235:27)
#loc327 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":236:5)
#loc328 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":237:9)
#loc329 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":305:9)
#loc330 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":242:13)
#loc331 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":242:17)
#loc332 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":243:13)
#loc333 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":243:32)
#loc334 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":244:13)
#loc335 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":244:35)
#loc336 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":245:13)
#loc337 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":245:35)
#loc338 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":246:13)
#loc339 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":246:45)
#loc340 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":247:13)
#loc341 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":290:21)
#loc342 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":248:13)
#loc343 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":289:13)
#loc344 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":257:39)
#loc345 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":257:48)
#loc346 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":257:61)
#loc347 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":257:32)
#loc348 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":257:17)
#loc349 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":257:72)
#loc350 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":258:17)
#loc351 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":261:17)
#loc352 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":258:21)
#loc353 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":258:37)
#loc354 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":259:17)
#loc355 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":260:21)
#loc356 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":262:24)
#loc357 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":262:25)
#loc358 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":262:34)
#loc359 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":262:37)
#loc360 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":262:51)
#loc361 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":262:17)
#loc362 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":262:52)
#loc363 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":263:38)
#loc364 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":263:17)
#loc365 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":264:43)
#loc366 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":264:17)
#loc367 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":265:42)
#loc368 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":265:36)
#loc369 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":265:17)
#loc370 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":265:50)
#loc371 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":266:17)
#loc372 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":269:17)
#loc373 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":266:26)
#loc374 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":266:58)
#loc375 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":266:59)
#loc376 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":266:68)
#loc377 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":266:82)
#loc378 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":266:21)
#loc379 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":266:88)
#loc380 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":267:17)
#loc381 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":268:21)
#loc382 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":270:17)
#loc383 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":273:17)
#loc384 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":270:28)
#loc385 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":270:42)
#loc386 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":270:21)
#loc387 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":270:61)
#loc388 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":271:17)
#loc389 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":272:21)
#loc390 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":274:39)
#loc391 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":274:53)
#loc392 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":274:59)
#loc393 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":274:32)
#loc394 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":274:17)
#loc395 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":274:63)
#loc396 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":275:17)
#loc397 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":278:17)
#loc398 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":275:21)
#loc399 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":275:37)
#loc400 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":276:17)
#loc401 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":277:21)
#loc402 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":280:35)
#loc403 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":280:49)
#loc404 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":280:62)
#loc405 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":280:80)
#loc406 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":280:83)
#loc407 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":280:30)
#loc408 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":280:17)
#loc409 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":280:84)
#loc410 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":281:17)
#loc411 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":284:17)
#loc412 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":281:21)
#loc413 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":281:35)
#loc414 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":281:48)
#loc415 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":281:51)
#loc416 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":281:65)
#loc417 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":282:17)
#loc418 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":283:21)
#loc419 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":286:43)
#loc420 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":286:29)
#loc421 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":286:17)
#loc422 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":288:29)
#loc423 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":288:24)
#loc424 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":288:17)
#loc425 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":288:40)
#loc426 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":290:20)
#loc427 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":291:13)
#loc428 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":294:13)
#loc429 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":291:17)
#loc430 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":291:33)
#loc431 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":292:13)
#loc432 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":293:30)
#loc433 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":293:17)
#loc434 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":295:13)
#loc435 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":298:13)
#loc436 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":295:17)
#loc437 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":295:33)
#loc438 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":296:13)
#loc439 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":297:30)
#loc440 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":297:17)
#loc441 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":307:5)
#loc442 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":318:5)
#loc443 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":307:8)
#loc444 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":307:27)
#loc445 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":308:5)
#loc446 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":310:9)
#loc447 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":317:9)
#loc448 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":310:13)
#loc449 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":310:21)
#loc450 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":311:9)
#loc451 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":313:9)
#loc452 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":315:9)
#loc453 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":312:26)
#loc454 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":312:32)
#loc455 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":312:13)
#loc456 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":316:23)
#loc457 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":316:13)
#loc458 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":322:1)
#loc459 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":342:1)
#loc460 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":324:5)
#loc461 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":324:9)
#loc462 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":326:13)
#loc463 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":326:12)
#loc464 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":326:5)
#loc465 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":327:5)
#loc466 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":336:5)
#loc467 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":327:8)
#loc468 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":327:27)
#loc469 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":328:5)
#loc470 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":331:5)
#loc471 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":333:5)
#loc472 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":330:19)
#loc473 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":330:9)
#loc474 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":335:16)
#loc475 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":335:9)
#loc476 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":337:5)
#loc477 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":341:5)
#loc478 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":337:8)
#loc479 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":337:27)
#loc480 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":338:5)
#loc481 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":340:22)
#loc482 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":340:28)
#loc483 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":340:9)
#loc484 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":345:1)
#loc485 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":360:1)
#loc486 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":347:5)
#loc487 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":347:9)
#loc488 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":349:13)
#loc489 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":349:12)
#loc490 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":349:5)
#loc491 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":350:5)
#loc492 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":354:5)
#loc493 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":350:8)
#loc494 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":350:27)
#loc495 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":351:5)
#loc496 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":353:16)
#loc497 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":353:9)
#loc498 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":355:5)
#loc499 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":359:5)
#loc500 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":355:8)
#loc501 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":355:27)
#loc502 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":356:5)
#loc503 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":358:22)
#loc504 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":358:28)
#loc505 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_13.c":358:9)
#loc506 = loc(fused[#loc1, #loc2])
#loc507 = loc(fused[#loc3, #loc4])
#loc508 = loc(fused[#loc5, #loc6])
#loc509 = loc(fused[#loc7, #loc8])
#loc510 = loc(fused[#loc9, #loc10])
#loc511 = loc(fused[#loc11, #loc12])
#loc512 = loc(fused[#loc13, #loc14])
#loc513 = loc(fused[#loc15, #loc16])
#loc514 = loc(fused[#loc17, #loc18])
#loc515 = loc(fused[#loc19, #loc20])
#loc516 = loc(fused[#loc21, #loc22])
#loc517 = loc(fused[#loc23, #loc24])
#loc518 = loc(fused[#loc27, #loc25])
#loc519 = loc(fused[#loc28, #loc29])
#loc520 = loc(fused[#loc30, #loc31])
#loc521 = loc(fused[#loc32, #loc29])
#loc522 = loc(fused[#loc33, #loc34])
#loc523 = loc(fused[#loc35, #loc36])
#loc524 = loc(fused[#loc37, #loc38])
#loc525 = loc(fused[#loc39, #loc40])
#loc526 = loc(fused[#loc41, #loc42])
#loc527 = loc(fused[#loc43, #loc44])
#loc528 = loc(fused[#loc45, #loc46])
#loc529 = loc(fused[#loc47, #loc48])
#loc530 = loc(fused[#loc53, #loc54])
#loc531 = loc(fused[#loc55, #loc56])
#loc532 = loc(fused[#loc57, #loc58])
#loc533 = loc(fused[#loc59, #loc56])
#loc534 = loc(fused[#loc61, #loc62])
#loc535 = loc(fused[#loc64, #loc65])
#loc536 = loc(fused[#loc66, #loc67])
#loc537 = loc(fused[#loc70, #loc68])
#loc538 = loc(fused[#loc74, #loc71])
#loc539 = loc(fused[#loc78, #loc79])
#loc540 = loc(fused[#loc80, #loc81])
#loc541 = loc(fused[#loc83, #loc84])
#loc542 = loc(fused[#loc85, #loc86])
#loc543 = loc(fused[#loc87, #loc88])
#loc544 = loc(fused[#loc89, #loc81])
#loc545 = loc(fused[#loc91, #loc92])
#loc546 = loc(fused[#loc95, #loc96])
#loc547 = loc(fused[#loc97, #loc92])
#loc548 = loc(fused[#loc103, #loc104])
#loc549 = loc(fused[#loc105, #loc106])
#loc550 = loc(fused[#loc107, #loc108])
#loc551 = loc(fused[#loc109, #loc106])
#loc552 = loc(fused[#loc113, #loc114])
#loc553 = loc(fused[#loc117, #loc118])
#loc554 = loc(fused[#loc119, #loc120])
#loc555 = loc(fused[#loc121, #loc122])
#loc556 = loc(fused[#loc124, #loc125])
#loc557 = loc(fused[#loc126, #loc120])
#loc558 = loc(fused[#loc130, #loc128])
#loc559 = loc(fused[#loc133, #loc134])
#loc560 = loc(fused[#loc136, #loc137])
#loc561 = loc(fused[#loc138, #loc139])
#loc562 = loc(fused[#loc140, #loc137])
#loc563 = loc(fused[#loc143, #loc144])
#loc564 = loc(fused[#loc145, #loc146])
#loc565 = loc(fused[#loc147, #loc144])
#loc566 = loc(fused[#loc150, #loc151])
#loc567 = loc(fused[#loc152, #loc153])
#loc568 = loc(fused[#loc154, #loc151])
#loc569 = loc(fused[#loc155, #loc156])
#loc570 = loc(fused[#loc158, #loc159])
#loc571 = loc(fused[#loc160, #loc161])
#loc572 = loc(fused[#loc162, #loc163])
#loc573 = loc(fused[#loc164, #loc165])
#loc574 = loc(fused[#loc166, #loc167])
#loc575 = loc(fused[#loc168, #loc169])
#loc576 = loc(fused[#loc172, #loc173])
#loc577 = loc(fused[#loc174, #loc175])
#loc578 = loc(fused[#loc178, #loc176])
#loc579 = loc(fused[#loc179, #loc180])
#loc580 = loc(fused[#loc181, #loc182])
#loc581 = loc(fused[#loc183, #loc180])
#loc582 = loc(fused[#loc184, #loc185])
#loc583 = loc(fused[#loc186, #loc187])
#loc584 = loc(fused[#loc188, #loc189])
#loc585 = loc(fused[#loc190, #loc191])
#loc586 = loc(fused[#loc192, #loc193])
#loc587 = loc(fused[#loc194, #loc195])
#loc588 = loc(fused[#loc196, #loc197])
#loc589 = loc(fused[#loc198, #loc199])
#loc590 = loc(fused[#loc204, #loc205])
#loc591 = loc(fused[#loc206, #loc207])
#loc592 = loc(fused[#loc208, #loc209])
#loc593 = loc(fused[#loc210, #loc207])
#loc594 = loc(fused[#loc212, #loc213])
#loc595 = loc(fused[#loc215, #loc216])
#loc596 = loc(fused[#loc217, #loc218])
#loc597 = loc(fused[#loc220, #loc219])
#loc598 = loc(fused[#loc222, #loc221])
#loc599 = loc(fused[#loc225, #loc226])
#loc600 = loc(fused[#loc227, #loc228])
#loc601 = loc(fused[#loc230, #loc231])
#loc602 = loc(fused[#loc232, #loc233])
#loc603 = loc(fused[#loc234, #loc235])
#loc604 = loc(fused[#loc236, #loc228])
#loc605 = loc(fused[#loc238, #loc239])
#loc606 = loc(fused[#loc242, #loc243])
#loc607 = loc(fused[#loc244, #loc239])
#loc608 = loc(fused[#loc250, #loc251])
#loc609 = loc(fused[#loc252, #loc253])
#loc610 = loc(fused[#loc254, #loc255])
#loc611 = loc(fused[#loc256, #loc253])
#loc612 = loc(fused[#loc260, #loc261])
#loc613 = loc(fused[#loc264, #loc265])
#loc614 = loc(fused[#loc266, #loc267])
#loc615 = loc(fused[#loc268, #loc269])
#loc616 = loc(fused[#loc271, #loc272])
#loc617 = loc(fused[#loc273, #loc267])
#loc618 = loc(fused[#loc277, #loc275])
#loc619 = loc(fused[#loc280, #loc281])
#loc620 = loc(fused[#loc283, #loc284])
#loc621 = loc(fused[#loc285, #loc286])
#loc622 = loc(fused[#loc287, #loc284])
#loc623 = loc(fused[#loc290, #loc291])
#loc624 = loc(fused[#loc292, #loc293])
#loc625 = loc(fused[#loc294, #loc291])
#loc626 = loc(fused[#loc297, #loc298])
#loc627 = loc(fused[#loc299, #loc300])
#loc628 = loc(fused[#loc301, #loc302, #loc303, #loc298])
#loc629 = loc(fused[#loc305, #loc306])
#loc630 = loc(fused[#loc307, #loc308])
#loc631 = loc(fused[#loc309, #loc310, #loc311, #loc306])
#loc632 = loc(fused[#loc312, #loc313])
#loc633 = loc(fused[#loc316, #loc317])
#loc634 = loc(fused[#loc318, #loc319])
#loc635 = loc(fused[#loc322, #loc320])
#loc636 = loc(fused[#loc323, #loc324])
#loc637 = loc(fused[#loc325, #loc326])
#loc638 = loc(fused[#loc327, #loc324])
#loc639 = loc(fused[#loc328, #loc329])
#loc640 = loc(fused[#loc330, #loc331])
#loc641 = loc(fused[#loc332, #loc333])
#loc642 = loc(fused[#loc334, #loc335])
#loc643 = loc(fused[#loc336, #loc337])
#loc644 = loc(fused[#loc338, #loc339])
#loc645 = loc(fused[#loc340, #loc341])
#loc646 = loc(fused[#loc342, #loc343])
#loc647 = loc(fused[#loc348, #loc349])
#loc648 = loc(fused[#loc350, #loc351])
#loc649 = loc(fused[#loc352, #loc353])
#loc650 = loc(fused[#loc354, #loc351])
#loc651 = loc(fused[#loc356, #loc357])
#loc652 = loc(fused[#loc359, #loc360])
#loc653 = loc(fused[#loc361, #loc362])
#loc654 = loc(fused[#loc364, #loc363])
#loc655 = loc(fused[#loc366, #loc365])
#loc656 = loc(fused[#loc369, #loc370])
#loc657 = loc(fused[#loc371, #loc372])
#loc658 = loc(fused[#loc374, #loc375])
#loc659 = loc(fused[#loc376, #loc377])
#loc660 = loc(fused[#loc378, #loc379])
#loc661 = loc(fused[#loc380, #loc372])
#loc662 = loc(fused[#loc382, #loc383])
#loc663 = loc(fused[#loc386, #loc387])
#loc664 = loc(fused[#loc388, #loc383])
#loc665 = loc(fused[#loc394, #loc395])
#loc666 = loc(fused[#loc396, #loc397])
#loc667 = loc(fused[#loc398, #loc399])
#loc668 = loc(fused[#loc400, #loc397])
#loc669 = loc(fused[#loc404, #loc405])
#loc670 = loc(fused[#loc408, #loc409])
#loc671 = loc(fused[#loc410, #loc411])
#loc672 = loc(fused[#loc412, #loc413])
#loc673 = loc(fused[#loc415, #loc416])
#loc674 = loc(fused[#loc417, #loc411])
#loc675 = loc(fused[#loc421, #loc419])
#loc676 = loc(fused[#loc424, #loc425])
#loc677 = loc(fused[#loc427, #loc428])
#loc678 = loc(fused[#loc429, #loc430])
#loc679 = loc(fused[#loc431, #loc428])
#loc680 = loc(fused[#loc434, #loc435])
#loc681 = loc(fused[#loc436, #loc437])
#loc682 = loc(fused[#loc438, #loc435])
#loc683 = loc(fused[#loc441, #loc442])
#loc684 = loc(fused[#loc443, #loc444])
#loc685 = loc(fused[#loc445, #loc442])
#loc686 = loc(fused[#loc446, #loc447])
#loc687 = loc(fused[#loc448, #loc449])
#loc688 = loc(fused[#loc450, #loc451, #loc452, #loc447])
#loc689 = loc(fused[#loc453, #loc454])
#loc690 = loc(fused[#loc458, #loc459])
#loc691 = loc(fused[#loc460, #loc461])
#loc692 = loc(fused[#loc464, #loc462])
#loc693 = loc(fused[#loc465, #loc466])
#loc694 = loc(fused[#loc467, #loc468])
#loc695 = loc(fused[#loc469, #loc470, #loc471, #loc466])
#loc696 = loc(fused[#loc475, #loc474])
#loc697 = loc(fused[#loc476, #loc477])
#loc698 = loc(fused[#loc478, #loc479])
#loc699 = loc(fused[#loc480, #loc477])
#loc700 = loc(fused[#loc481, #loc482])
#loc701 = loc(fused[#loc484, #loc485])
#loc702 = loc(fused[#loc486, #loc487])
#loc703 = loc(fused[#loc490, #loc488])
#loc704 = loc(fused[#loc491, #loc492])
#loc705 = loc(fused[#loc493, #loc494])
#loc706 = loc(fused[#loc495, #loc492])
#loc707 = loc(fused[#loc497, #loc496])
#loc708 = loc(fused[#loc498, #loc499])
#loc709 = loc(fused[#loc500, #loc501])
#loc710 = loc(fused[#loc502, #loc499])
#loc711 = loc(fused[#loc503, #loc504])
