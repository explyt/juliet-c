!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_33.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc106)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc107)
  cir.func private @strcpy(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc108)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc109)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc110)
  cir.func @_ZN52CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_333badEv() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc112)
    %1 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc113)
    %2 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc114)
    %3 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["dataRef", init, const] {alignment = 8 : i64} loc(#loc115)
    cir.store %2, %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc20)
    %4 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc21)
    %5 = cir.const #cir.int<100> : !s32i loc(#loc22)
    %6 = cir.cast(integral, %5 : !s32i), !u64i loc(#loc22)
    %7 = cir.const #cir.int<1> : !u64i loc(#loc116)
    %8 = cir.binop(mul, %6, %7) : !u64i loc(#loc117)
    %9 = cir.call @malloc(%8) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc21)
    %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc118)
    cir.store %10, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc119)
    cir.br ^bb1 loc(#loc120)
  ^bb1:  // pred: ^bb0
    %11 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc29)
    %12 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc30)
    %13 = cir.cmp(eq, %11, %12) : !cir.ptr<!s8i>, !cir.bool loc(#loc121)
    cir.brcond %13 ^bb2, ^bb3 loc(#loc122)
  ^bb2:  // pred: ^bb1
    %14 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc32)
    %15 = cir.const #cir.int<1> : !s32i loc(#loc33)
    %16 = cir.unary(minus, %15) nsw : !s32i, !s32i loc(#loc34)
    cir.call @exit(%16) : (!s32i) -> () extra(#fn_attr) loc(#loc32)
    cir.br ^bb3 loc(#loc28)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc28)
  ^bb4:  // pred: ^bb3
    %17 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc35)
    %18 = cir.cast(bitcast, %17 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc35)
    %19 = cir.const #cir.int<65> : !s8i loc(#loc36)
    %20 = cir.cast(integral, %19 : !s8i), !s32i loc(#loc36)
    %21 = cir.const #cir.int<100> : !s32i loc(#loc37)
    %22 = cir.const #cir.int<1> : !s32i loc(#loc38)
    %23 = cir.binop(sub, %21, %22) nsw : !s32i loc(#loc37)
    %24 = cir.cast(integral, %23 : !s32i), !u64i loc(#loc37)
    cir.libc.memset %24 bytes from %18 set to %20 : !cir.ptr<!void>, !s32i, !u64i loc(#loc123)
    %25 = cir.const #cir.int<0> : !s8i loc(#loc41)
    %26 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc42)
    %27 = cir.const #cir.int<100> : !s32i loc(#loc43)
    %28 = cir.const #cir.int<1> : !s32i loc(#loc44)
    %29 = cir.binop(sub, %27, %28) nsw : !s32i loc(#loc43)
    %30 = cir.ptr_stride(%26 : !cir.ptr<!s8i>, %29 : !s32i), !cir.ptr<!s8i> loc(#loc45)
    cir.store %25, %30 : !s8i, !cir.ptr<!s8i> loc(#loc124)
    cir.br ^bb5 loc(#loc125)
  ^bb5:  // pred: ^bb4
    %31 = cir.load %3 : !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc14)
    %32 = cir.load %31 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc14)
    cir.store %32, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc112)
    cir.br ^bb6 loc(#loc126)
  ^bb6:  // pred: ^bb5
    %33 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc113)
    cir.store %33, %1 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc113)
    %34 = cir.get_global @strcpy : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i>>> loc(#loc50)
    %35 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc51)
    %36 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc52)
    %37 = cir.call @strcpy(%35, %36) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc50)
    %38 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc53)
    cir.call @printLine(%38) : (!cir.ptr<!s8i>) -> () loc(#loc54)
    %39 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc55)
    %40 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc56)
    %41 = cir.cast(bitcast, %40 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc56)
    cir.call @free(%41) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc55)
    cir.br ^bb7 loc(#loc49)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc47)
  ^bb8:  // pred: ^bb7
    cir.return loc(#loc12)
  } loc(#loc111)
  cir.func internal private @_ZN52CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_33L7goodG2BEv() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc128)
    %1 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc129)
    %2 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc130)
    %3 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["dataRef", init, const] {alignment = 8 : i64} loc(#loc131)
    cir.store %2, %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc66)
    %4 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc67)
    %5 = cir.const #cir.int<100> : !s32i loc(#loc68)
    %6 = cir.cast(integral, %5 : !s32i), !u64i loc(#loc68)
    %7 = cir.const #cir.int<1> : !u64i loc(#loc132)
    %8 = cir.binop(mul, %6, %7) : !u64i loc(#loc133)
    %9 = cir.call @malloc(%8) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc67)
    %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc134)
    cir.store %10, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc135)
    cir.br ^bb1 loc(#loc136)
  ^bb1:  // pred: ^bb0
    %11 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc75)
    %12 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc76)
    %13 = cir.cmp(eq, %11, %12) : !cir.ptr<!s8i>, !cir.bool loc(#loc137)
    cir.brcond %13 ^bb2, ^bb3 loc(#loc138)
  ^bb2:  // pred: ^bb1
    %14 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc78)
    %15 = cir.const #cir.int<1> : !s32i loc(#loc79)
    %16 = cir.unary(minus, %15) nsw : !s32i, !s32i loc(#loc80)
    cir.call @exit(%16) : (!s32i) -> () extra(#fn_attr) loc(#loc78)
    cir.br ^bb3 loc(#loc74)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc74)
  ^bb4:  // pred: ^bb3
    %17 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc81)
    %18 = cir.cast(bitcast, %17 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc81)
    %19 = cir.const #cir.int<65> : !s8i loc(#loc82)
    %20 = cir.cast(integral, %19 : !s8i), !s32i loc(#loc82)
    %21 = cir.const #cir.int<50> : !s32i loc(#loc83)
    %22 = cir.const #cir.int<1> : !s32i loc(#loc84)
    %23 = cir.binop(sub, %21, %22) nsw : !s32i loc(#loc83)
    %24 = cir.cast(integral, %23 : !s32i), !u64i loc(#loc83)
    cir.libc.memset %24 bytes from %18 set to %20 : !cir.ptr<!void>, !s32i, !u64i loc(#loc139)
    %25 = cir.const #cir.int<0> : !s8i loc(#loc87)
    %26 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc88)
    %27 = cir.const #cir.int<50> : !s32i loc(#loc89)
    %28 = cir.const #cir.int<1> : !s32i loc(#loc90)
    %29 = cir.binop(sub, %27, %28) nsw : !s32i loc(#loc89)
    %30 = cir.ptr_stride(%26 : !cir.ptr<!s8i>, %29 : !s32i), !cir.ptr<!s8i> loc(#loc91)
    cir.store %25, %30 : !s8i, !cir.ptr<!s8i> loc(#loc140)
    cir.br ^bb5 loc(#loc141)
  ^bb5:  // pred: ^bb4
    %31 = cir.load %3 : !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc60)
    %32 = cir.load %31 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc60)
    cir.store %32, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc128)
    cir.br ^bb6 loc(#loc142)
  ^bb6:  // pred: ^bb5
    %33 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc129)
    cir.store %33, %1 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc129)
    %34 = cir.get_global @strcpy : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i>>> loc(#loc96)
    %35 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc97)
    %36 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc98)
    %37 = cir.call @strcpy(%35, %36) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc96)
    %38 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc99)
    cir.call @printLine(%38) : (!cir.ptr<!s8i>) -> () loc(#loc100)
    %39 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc101)
    %40 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc102)
    %41 = cir.cast(bitcast, %40 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc102)
    cir.call @free(%41) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc101)
    cir.br ^bb7 loc(#loc95)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc93)
  ^bb8:  // pred: ^bb7
    cir.return loc(#loc58)
  } loc(#loc127)
  cir.func @_ZN52CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_334goodEv() extra(#fn_attr1) {
    cir.call @_ZN52CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_33L7goodG2BEv() : () -> () loc(#loc105)
    cir.return loc(#loc104)
  } loc(#loc143)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_33.cpp":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("/usr/include/string.h":141:1)
#loc6 = loc("/usr/include/string.h":142:14)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("/usr/include/stdlib.h":687:1)
#loc10 = loc("/usr/include/stdlib.h":687:32)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_33.cpp":26:1)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_33.cpp":45:1)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_33.cpp":36:9)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_33.cpp":36:23)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_33.cpp":38:13)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_33.cpp":38:29)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_33.cpp":28:5)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_33.cpp":28:12)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_33.cpp":29:5)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_33.cpp":29:23)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_33.cpp":30:20)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_33.cpp":30:27)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_33.cpp":30:31)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_33.cpp":30:42)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_33.cpp":30:43)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_33.cpp":30:5)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_33.cpp":31:5)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_33.cpp":31:33)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_33.cpp":31:9)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_33.cpp":31:17)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_33.cpp":31:23)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_33.cpp":31:24)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_33.cpp":31:30)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_33.cpp":31:29)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_33.cpp":33:12)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_33.cpp":33:18)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_33.cpp":33:23)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_33.cpp":33:27)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_33.cpp":33:5)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_33.cpp":33:28)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_33.cpp":34:19)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_33.cpp":34:5)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_33.cpp":34:10)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_33.cpp":34:14)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_33.cpp":34:15)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_33.cpp":35:5)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_33.cpp":44:5)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_33.cpp":37:9)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_33.cpp":43:9)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_33.cpp":40:13)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_33.cpp":40:20)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_33.cpp":40:26)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_33.cpp":41:23)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_33.cpp":41:13)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_33.cpp":42:13)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_33.cpp":42:18)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_33.cpp":52:1)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_33.cpp":71:1)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_33.cpp":62:9)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_33.cpp":62:23)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_33.cpp":64:13)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_33.cpp":64:29)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_33.cpp":54:5)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_33.cpp":54:12)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_33.cpp":55:5)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_33.cpp":55:23)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_33.cpp":56:20)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_33.cpp":56:27)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_33.cpp":56:31)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_33.cpp":56:42)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_33.cpp":56:43)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_33.cpp":56:5)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_33.cpp":57:5)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_33.cpp":57:33)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_33.cpp":57:9)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_33.cpp":57:17)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_33.cpp":57:23)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_33.cpp":57:24)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_33.cpp":57:30)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_33.cpp":57:29)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_33.cpp":59:12)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_33.cpp":59:18)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_33.cpp":59:23)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_33.cpp":59:26)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_33.cpp":59:5)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_33.cpp":59:27)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_33.cpp":60:18)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_33.cpp":60:5)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_33.cpp":60:10)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_33.cpp":60:13)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_33.cpp":60:14)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_33.cpp":61:5)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_33.cpp":70:5)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_33.cpp":63:9)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_33.cpp":69:9)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_33.cpp":66:13)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_33.cpp":66:20)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_33.cpp":66:26)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_33.cpp":67:23)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_33.cpp":67:13)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_33.cpp":68:13)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_33.cpp":68:18)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_33.cpp":73:1)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_33.cpp":76:1)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_33.cpp":75:5)
#loc106 = loc(fused[#loc1, #loc2])
#loc107 = loc(fused[#loc3, #loc4])
#loc108 = loc(fused[#loc5, #loc6])
#loc109 = loc(fused[#loc7, #loc8])
#loc110 = loc(fused[#loc9, #loc10])
#loc111 = loc(fused[#loc11, #loc12])
#loc112 = loc(fused[#loc13, #loc14])
#loc113 = loc(fused[#loc15, #loc16])
#loc114 = loc(fused[#loc17, #loc18])
#loc115 = loc(fused[#loc19, #loc20])
#loc116 = loc(fused[#loc23, #loc24])
#loc117 = loc(fused[#loc22, #loc24])
#loc118 = loc(fused[#loc21, #loc25])
#loc119 = loc(fused[#loc26, #loc25])
#loc120 = loc(fused[#loc27, #loc28])
#loc121 = loc(fused[#loc29, #loc30])
#loc122 = loc(fused[#loc31, #loc28])
#loc123 = loc(fused[#loc39, #loc40])
#loc124 = loc(fused[#loc42, #loc41])
#loc125 = loc(fused[#loc46, #loc47])
#loc126 = loc(fused[#loc48, #loc49])
#loc127 = loc(fused[#loc57, #loc58])
#loc128 = loc(fused[#loc59, #loc60])
#loc129 = loc(fused[#loc61, #loc62])
#loc130 = loc(fused[#loc63, #loc64])
#loc131 = loc(fused[#loc65, #loc66])
#loc132 = loc(fused[#loc69, #loc70])
#loc133 = loc(fused[#loc68, #loc70])
#loc134 = loc(fused[#loc67, #loc71])
#loc135 = loc(fused[#loc72, #loc71])
#loc136 = loc(fused[#loc73, #loc74])
#loc137 = loc(fused[#loc75, #loc76])
#loc138 = loc(fused[#loc77, #loc74])
#loc139 = loc(fused[#loc85, #loc86])
#loc140 = loc(fused[#loc88, #loc87])
#loc141 = loc(fused[#loc92, #loc93])
#loc142 = loc(fused[#loc94, #loc95])
#loc143 = loc(fused[#loc103, #loc104])
