!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.record<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.record<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.record<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
!ty__IO_FILE = !cir.record<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/workspaces/juliet-c/testcases/CWE681_Incorrect_Conversion_Between_Numeric_Types/CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i32 = dense<32> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e", "dlti.endianness" = "little">} {
  cir.func no_proto private @globalReturnsTrueOrFalse(...) -> !s32i loc(#loc163)
  cir.func private @fgets(!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc164)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc165)
  cir.func private @atof(!cir.ptr<!s8i>) -> !cir.double extra(#fn_attr) loc(#loc166)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc167)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"fgets() failed.\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc11)
  cir.func private @printIntLine(!s32i) loc(#loc168)
  cir.func private @sqrt(!cir.double) -> !cir.double extra(#fn_attr) loc(#loc14)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Value is negative\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc15)
  cir.func no_proto @CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12_bad() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc171)
      %1 = cir.cast(bitcast, %0 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc171)
      %2 = cir.call %1() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc20)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc20)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !cir.array<!s8i x 256>, !cir.ptr<!cir.array<!s8i x 256>>, ["inputBuffer"] {alignment = 16 : i64} loc(#loc174)
          %5 = cir.alloca !cir.double, !cir.ptr<!cir.double>, ["doubleNumber", init] {alignment = 8 : i64} loc(#loc175)
          %6 = cir.const #cir.int<0> : !s32i loc(#loc30)
          %7 = cir.cast(int_to_float, %6 : !s32i), !cir.double loc(#loc30)
          cir.store %7, %5 : !cir.double, !cir.ptr<!cir.double> loc(#loc175)
          cir.scope {
            %12 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 256>>), !cir.ptr<!s8i> loc(#loc33)
            %13 = cir.const #cir.int<256> : !s32i loc(#loc34)
            %14 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc165)
            %15 = cir.load %14 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc35)
            %16 = cir.call @fgets(%12, %13, %15) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc36)
            %17 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc37)
            %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc37)
            %19 = cir.cmp(ne, %16, %18) : !cir.ptr<!s8i>, !cir.bool loc(#loc177)
            cir.if %19 {
              %20 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 256>>), !cir.ptr<!s8i> loc(#loc41)
              %21 = cir.call @atof(%20) : (!cir.ptr<!s8i>) -> !cir.double side_effect(pure) extra(#fn_attr) loc(#loc42)
              cir.store %21, %5 : !cir.double, !cir.ptr<!cir.double> loc(#loc179)
            } else {
              %20 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc11)
              %21 = cir.cast(array_to_ptrdecay, %20 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc11)
              cir.call @printLine(%21) : (!cir.ptr<!s8i>) -> () loc(#loc45)
            } loc(#loc178)
          } loc(#loc176)
          %8 = cir.get_global @sqrt : !cir.ptr<!cir.func<(!cir.double) -> !cir.double>> loc(#loc46)
          %9 = cir.load %5 : !cir.ptr<!cir.double>, !cir.double loc(#loc47)
          %10 = cir.call @sqrt(%9) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc46)
          %11 = cir.cast(float_to_int, %10 : !cir.double), !s32i loc(#loc46)
          cir.call @printIntLine(%11) : (!s32i) -> () loc(#loc48)
        } loc(#loc173)
      } else {
        cir.scope {
          %4 = cir.alloca !cir.array<!s8i x 256>, !cir.ptr<!cir.array<!s8i x 256>>, ["inputBuffer"] {alignment = 16 : i64} loc(#loc181)
          %5 = cir.alloca !cir.double, !cir.ptr<!cir.double>, ["doubleNumber", init] {alignment = 8 : i64} loc(#loc182)
          %6 = cir.const #cir.int<0> : !s32i loc(#loc54)
          %7 = cir.cast(int_to_float, %6 : !s32i), !cir.double loc(#loc54)
          cir.store %7, %5 : !cir.double, !cir.ptr<!cir.double> loc(#loc182)
          cir.scope {
            %8 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 256>>), !cir.ptr<!s8i> loc(#loc57)
            %9 = cir.const #cir.int<256> : !s32i loc(#loc58)
            %10 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc165)
            %11 = cir.load %10 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc59)
            %12 = cir.call @fgets(%8, %9, %11) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc60)
            %13 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc61)
            %14 = cir.cast(bitcast, %13 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc61)
            %15 = cir.cmp(ne, %12, %14) : !cir.ptr<!s8i>, !cir.bool loc(#loc184)
            cir.if %15 {
              %16 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 256>>), !cir.ptr<!s8i> loc(#loc65)
              %17 = cir.call @atof(%16) : (!cir.ptr<!s8i>) -> !cir.double side_effect(pure) extra(#fn_attr) loc(#loc66)
              cir.store %17, %5 : !cir.double, !cir.ptr<!cir.double> loc(#loc186)
            } else {
              %16 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc69)
              %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc69)
              cir.call @printLine(%17) : (!cir.ptr<!s8i>) -> () loc(#loc70)
            } loc(#loc185)
          } loc(#loc183)
          cir.scope {
            %8 = cir.load %5 : !cir.ptr<!cir.double>, !cir.double loc(#loc73)
            %9 = cir.const #cir.int<0> : !s32i loc(#loc74)
            %10 = cir.cast(int_to_float, %9 : !s32i), !cir.double loc(#loc74)
            %11 = cir.cmp(lt, %8, %10) : !cir.double, !cir.bool loc(#loc188)
            cir.if %11 {
              %12 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc15)
              %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc15)
              cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc78)
            } else {
              %12 = cir.get_global @sqrt : !cir.ptr<!cir.func<(!cir.double) -> !cir.double>> loc(#loc79)
              %13 = cir.load %5 : !cir.ptr<!cir.double>, !cir.double loc(#loc80)
              %14 = cir.call @sqrt(%13) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc79)
              %15 = cir.cast(float_to_int, %14 : !cir.double), !s32i loc(#loc79)
              cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc81)
            } loc(#loc189)
          } loc(#loc187)
        } loc(#loc180)
      } loc(#loc172)
    } loc(#loc170)
    cir.return loc(#loc17)
  } loc(#loc169)
  cir.func no_proto @CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<()>> loc(#loc191)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc84)
    cir.return loc(#loc83)
  } loc(#loc190)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc194)
      %1 = cir.cast(bitcast, %0 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc194)
      %2 = cir.call %1() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc90)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc90)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !cir.array<!s8i x 256>, !cir.ptr<!cir.array<!s8i x 256>>, ["inputBuffer"] {alignment = 16 : i64} loc(#loc197)
          %5 = cir.alloca !cir.double, !cir.ptr<!cir.double>, ["doubleNumber", init] {alignment = 8 : i64} loc(#loc198)
          %6 = cir.const #cir.int<0> : !s32i loc(#loc100)
          %7 = cir.cast(int_to_float, %6 : !s32i), !cir.double loc(#loc100)
          cir.store %7, %5 : !cir.double, !cir.ptr<!cir.double> loc(#loc198)
          cir.scope {
            %8 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 256>>), !cir.ptr<!s8i> loc(#loc103)
            %9 = cir.const #cir.int<256> : !s32i loc(#loc104)
            %10 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc165)
            %11 = cir.load %10 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc105)
            %12 = cir.call @fgets(%8, %9, %11) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc106)
            %13 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc107)
            %14 = cir.cast(bitcast, %13 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc107)
            %15 = cir.cmp(ne, %12, %14) : !cir.ptr<!s8i>, !cir.bool loc(#loc200)
            cir.if %15 {
              %16 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 256>>), !cir.ptr<!s8i> loc(#loc111)
              %17 = cir.call @atof(%16) : (!cir.ptr<!s8i>) -> !cir.double side_effect(pure) extra(#fn_attr) loc(#loc112)
              cir.store %17, %5 : !cir.double, !cir.ptr<!cir.double> loc(#loc202)
            } else {
              %16 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc115)
              %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc115)
              cir.call @printLine(%17) : (!cir.ptr<!s8i>) -> () loc(#loc116)
            } loc(#loc201)
          } loc(#loc199)
          cir.scope {
            %8 = cir.load %5 : !cir.ptr<!cir.double>, !cir.double loc(#loc119)
            %9 = cir.const #cir.int<0> : !s32i loc(#loc120)
            %10 = cir.cast(int_to_float, %9 : !s32i), !cir.double loc(#loc120)
            %11 = cir.cmp(lt, %8, %10) : !cir.double, !cir.bool loc(#loc204)
            cir.if %11 {
              %12 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc124)
              %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc124)
              cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc125)
            } else {
              %12 = cir.get_global @sqrt : !cir.ptr<!cir.func<(!cir.double) -> !cir.double>> loc(#loc126)
              %13 = cir.load %5 : !cir.ptr<!cir.double>, !cir.double loc(#loc127)
              %14 = cir.call @sqrt(%13) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc126)
              %15 = cir.cast(float_to_int, %14 : !cir.double), !s32i loc(#loc126)
              cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc128)
            } loc(#loc205)
          } loc(#loc203)
        } loc(#loc196)
      } else {
        cir.scope {
          %4 = cir.alloca !cir.array<!s8i x 256>, !cir.ptr<!cir.array<!s8i x 256>>, ["inputBuffer"] {alignment = 16 : i64} loc(#loc207)
          %5 = cir.alloca !cir.double, !cir.ptr<!cir.double>, ["doubleNumber", init] {alignment = 8 : i64} loc(#loc208)
          %6 = cir.const #cir.int<0> : !s32i loc(#loc134)
          %7 = cir.cast(int_to_float, %6 : !s32i), !cir.double loc(#loc134)
          cir.store %7, %5 : !cir.double, !cir.ptr<!cir.double> loc(#loc208)
          cir.scope {
            %8 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 256>>), !cir.ptr<!s8i> loc(#loc137)
            %9 = cir.const #cir.int<256> : !s32i loc(#loc138)
            %10 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc165)
            %11 = cir.load %10 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc139)
            %12 = cir.call @fgets(%8, %9, %11) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc140)
            %13 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc141)
            %14 = cir.cast(bitcast, %13 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc141)
            %15 = cir.cmp(ne, %12, %14) : !cir.ptr<!s8i>, !cir.bool loc(#loc210)
            cir.if %15 {
              %16 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 256>>), !cir.ptr<!s8i> loc(#loc145)
              %17 = cir.call @atof(%16) : (!cir.ptr<!s8i>) -> !cir.double side_effect(pure) extra(#fn_attr) loc(#loc146)
              cir.store %17, %5 : !cir.double, !cir.ptr<!cir.double> loc(#loc212)
            } else {
              %16 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc149)
              %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc149)
              cir.call @printLine(%17) : (!cir.ptr<!s8i>) -> () loc(#loc150)
            } loc(#loc211)
          } loc(#loc209)
          cir.scope {
            %8 = cir.load %5 : !cir.ptr<!cir.double>, !cir.double loc(#loc153)
            %9 = cir.const #cir.int<0> : !s32i loc(#loc154)
            %10 = cir.cast(int_to_float, %9 : !s32i), !cir.double loc(#loc154)
            %11 = cir.cmp(lt, %8, %10) : !cir.double, !cir.bool loc(#loc214)
            cir.if %11 {
              %12 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc158)
              %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc158)
              cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc159)
            } else {
              %12 = cir.get_global @sqrt : !cir.ptr<!cir.func<(!cir.double) -> !cir.double>> loc(#loc160)
              %13 = cir.load %5 : !cir.ptr<!cir.double>, !cir.double loc(#loc161)
              %14 = cir.call @sqrt(%13) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc160)
              %15 = cir.cast(float_to_int, %14 : !cir.double), !s32i loc(#loc160)
              cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc162)
            } loc(#loc215)
          } loc(#loc213)
        } loc(#loc206)
      } loc(#loc195)
    } loc(#loc193)
    cir.return loc(#loc87)
  } loc(#loc192)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE681_Incorrect_Conversion_Between_Numeric_Types/CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":0:0)
#loc1 = loc("../../testcasesupport/std_testcase_io.h":52:1)
#loc2 = loc("../../testcasesupport/std_testcase_io.h":52:30)
#loc3 = loc("/usr/include/stdio.h":654:1)
#loc4 = loc("/usr/include/stdio.h":655:59)
#loc5 = loc("/usr/include/stdio.h":149:1)
#loc6 = loc("/usr/include/stdio.h":149:14)
#loc7 = loc("/usr/include/stdlib.h":102:1)
#loc8 = loc("/usr/include/stdlib.h":103:33)
#loc9 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc10 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc11 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":41:27)
#loc12 = loc("../../testcasesupport/std_testcase_io.h":18:1)
#loc13 = loc("../../testcasesupport/std_testcase_io.h":18:33)
#loc14 = loc("/usr/include/x86_64-linux-gnu/bits/mathcalls.h":143:1)
#loc15 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":69:27)
#loc16 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":23:1)
#loc17 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":77:1)
#loc18 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":25:5)
#loc19 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":76:5)
#loc20 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":25:8)
#loc21 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":25:33)
#loc22 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":26:5)
#loc23 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":46:5)
#loc24 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":48:5)
#loc25 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":27:9)
#loc26 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":45:9)
#loc27 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":28:13)
#loc28 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":28:45)
#loc29 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":29:13)
#loc30 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":29:35)
#loc31 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":34:13)
#loc32 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":42:13)
#loc33 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":34:23)
#loc34 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":34:36)
#loc35 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":34:53)
#loc36 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":34:17)
#loc37 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":34:63)
#loc38 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":35:13)
#loc39 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":38:13)
#loc40 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":40:13)
#loc41 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":37:37)
#loc42 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":37:32)
#loc43 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":37:17)
#loc44 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":37:48)
#loc45 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":41:17)
#loc46 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":44:32)
#loc47 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":44:37)
#loc48 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":44:13)
#loc49 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":49:9)
#loc50 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":75:9)
#loc51 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":50:13)
#loc52 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":50:45)
#loc53 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":51:13)
#loc54 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":51:35)
#loc55 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":56:13)
#loc56 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":64:13)
#loc57 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":56:23)
#loc58 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":56:36)
#loc59 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":56:53)
#loc60 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":56:17)
#loc61 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":56:63)
#loc62 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":57:13)
#loc63 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":60:13)
#loc64 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":62:13)
#loc65 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":59:37)
#loc66 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":59:32)
#loc67 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":59:17)
#loc68 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":59:48)
#loc69 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":63:27)
#loc70 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":63:17)
#loc71 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":67:13)
#loc72 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":74:13)
#loc73 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":67:17)
#loc74 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":67:32)
#loc75 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":68:13)
#loc76 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":70:13)
#loc77 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":72:13)
#loc78 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":69:17)
#loc79 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":73:36)
#loc80 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":73:41)
#loc81 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":73:17)
#loc82 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":148:1)
#loc83 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":151:1)
#loc84 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":150:5)
#loc85 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":150:11)
#loc86 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":84:1)
#loc87 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":146:1)
#loc88 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":86:5)
#loc89 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":145:5)
#loc90 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":86:8)
#loc91 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":86:33)
#loc92 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":87:5)
#loc93 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":115:5)
#loc94 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":117:5)
#loc95 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":88:9)
#loc96 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":114:9)
#loc97 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":89:13)
#loc98 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":89:45)
#loc99 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":90:13)
#loc100 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":90:35)
#loc101 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":95:13)
#loc102 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":103:13)
#loc103 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":95:23)
#loc104 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":95:36)
#loc105 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":95:53)
#loc106 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":95:17)
#loc107 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":95:63)
#loc108 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":96:13)
#loc109 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":99:13)
#loc110 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":101:13)
#loc111 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":98:37)
#loc112 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":98:32)
#loc113 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":98:17)
#loc114 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":98:48)
#loc115 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":102:27)
#loc116 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":102:17)
#loc117 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":106:13)
#loc118 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":113:13)
#loc119 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":106:17)
#loc120 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":106:32)
#loc121 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":107:13)
#loc122 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":109:13)
#loc123 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":111:13)
#loc124 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":108:27)
#loc125 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":108:17)
#loc126 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":112:36)
#loc127 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":112:41)
#loc128 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":112:17)
#loc129 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":118:9)
#loc130 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":144:9)
#loc131 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":119:13)
#loc132 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":119:45)
#loc133 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":120:13)
#loc134 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":120:35)
#loc135 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":125:13)
#loc136 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":133:13)
#loc137 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":125:23)
#loc138 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":125:36)
#loc139 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":125:53)
#loc140 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":125:17)
#loc141 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":125:63)
#loc142 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":126:13)
#loc143 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":129:13)
#loc144 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":131:13)
#loc145 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":128:37)
#loc146 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":128:32)
#loc147 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":128:17)
#loc148 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":128:48)
#loc149 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":132:27)
#loc150 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":132:17)
#loc151 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":136:13)
#loc152 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":143:13)
#loc153 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":136:17)
#loc154 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":136:32)
#loc155 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":137:13)
#loc156 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":139:13)
#loc157 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":141:13)
#loc158 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":138:27)
#loc159 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":138:17)
#loc160 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":142:36)
#loc161 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":142:41)
#loc162 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_12.c":142:17)
#loc163 = loc(fused[#loc1, #loc2])
#loc164 = loc(fused[#loc3, #loc4])
#loc165 = loc(fused[#loc5, #loc6])
#loc166 = loc(fused[#loc7, #loc8])
#loc167 = loc(fused[#loc9, #loc10])
#loc168 = loc(fused[#loc12, #loc13])
#loc169 = loc(fused[#loc16, #loc17])
#loc170 = loc(fused[#loc18, #loc19])
#loc171 = loc(fused[#loc20, #loc21])
#loc172 = loc(fused[#loc22, #loc23, #loc24, #loc19])
#loc173 = loc(fused[#loc25, #loc26])
#loc174 = loc(fused[#loc27, #loc28])
#loc175 = loc(fused[#loc29, #loc30])
#loc176 = loc(fused[#loc31, #loc32])
#loc177 = loc(fused[#loc36, #loc37])
#loc178 = loc(fused[#loc38, #loc39, #loc40, #loc32])
#loc179 = loc(fused[#loc43, #loc44])
#loc180 = loc(fused[#loc49, #loc50])
#loc181 = loc(fused[#loc51, #loc52])
#loc182 = loc(fused[#loc53, #loc54])
#loc183 = loc(fused[#loc55, #loc56])
#loc184 = loc(fused[#loc60, #loc61])
#loc185 = loc(fused[#loc62, #loc63, #loc64, #loc56])
#loc186 = loc(fused[#loc67, #loc68])
#loc187 = loc(fused[#loc71, #loc72])
#loc188 = loc(fused[#loc73, #loc74])
#loc189 = loc(fused[#loc75, #loc76, #loc77, #loc72])
#loc190 = loc(fused[#loc82, #loc83])
#loc191 = loc(fused[#loc84, #loc85])
#loc192 = loc(fused[#loc86, #loc87])
#loc193 = loc(fused[#loc88, #loc89])
#loc194 = loc(fused[#loc90, #loc91])
#loc195 = loc(fused[#loc92, #loc93, #loc94, #loc89])
#loc196 = loc(fused[#loc95, #loc96])
#loc197 = loc(fused[#loc97, #loc98])
#loc198 = loc(fused[#loc99, #loc100])
#loc199 = loc(fused[#loc101, #loc102])
#loc200 = loc(fused[#loc106, #loc107])
#loc201 = loc(fused[#loc108, #loc109, #loc110, #loc102])
#loc202 = loc(fused[#loc113, #loc114])
#loc203 = loc(fused[#loc117, #loc118])
#loc204 = loc(fused[#loc119, #loc120])
#loc205 = loc(fused[#loc121, #loc122, #loc123, #loc118])
#loc206 = loc(fused[#loc129, #loc130])
#loc207 = loc(fused[#loc131, #loc132])
#loc208 = loc(fused[#loc133, #loc134])
#loc209 = loc(fused[#loc135, #loc136])
#loc210 = loc(fused[#loc140, #loc141])
#loc211 = loc(fused[#loc142, #loc143, #loc144, #loc136])
#loc212 = loc(fused[#loc147, #loc148])
#loc213 = loc(fused[#loc151, #loc152])
#loc214 = loc(fused[#loc153, #loc154])
#loc215 = loc(fused[#loc155, #loc156, #loc157, #loc152])
