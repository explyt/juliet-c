!s32i = !cir.int<s, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
!ty__twoIntsStruct = !cir.struct<struct "_twoIntsStruct" {!s32i, !s32i} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_66a.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc77)
  cir.func private  @exit(!s32i) extra(#fn_attr) loc(#loc78)
  cir.func private  @CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_66b_badSink(!cir.ptr<!cir.ptr<!ty__twoIntsStruct>>) loc(#loc79)
  cir.func no_proto  @CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_66_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["data"] {alignment = 8 : i64} loc(#loc81)
    %1 = cir.alloca !cir.array<!cir.ptr<!ty__twoIntsStruct> x 5>, !cir.ptr<!cir.array<!cir.ptr<!ty__twoIntsStruct> x 5>>, ["dataArray"] {alignment = 16 : i64} loc(#loc82)
    %2 = cir.const #cir.ptr<null> : !cir.ptr<!ty__twoIntsStruct> loc(#loc13)
    cir.store %2, %0 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc83)
    %3 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc15)
    %4 = cir.const #cir.int<8> : !u64i loc(#loc84)
    %5 = cir.call @malloc(%4) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc15)
    %6 = cir.cast(bitcast, %5 : !cir.ptr<!void>), !cir.ptr<!ty__twoIntsStruct> loc(#loc85)
    cir.store %6, %0 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc86)
    cir.scope {
      %18 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc22)
      %19 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc23)
      %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!ty__twoIntsStruct> loc(#loc23)
      %21 = cir.cmp(eq, %18, %20) : !cir.ptr<!ty__twoIntsStruct>, !s32i loc(#loc88)
      %22 = cir.cast(int_to_bool, %21 : !s32i), !cir.bool loc(#loc24)
      cir.if %22 {
        %23 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc26)
        %24 = cir.const #cir.int<1> : !s32i loc(#loc27)
        %25 = cir.unary(minus, %24) : !s32i, !s32i loc(#loc28)
        cir.call @exit(%25) : (!s32i) -> () extra(#fn_attr) loc(#loc26)
      } loc(#loc89)
    } loc(#loc87)
    %7 = cir.const #cir.int<1> : !s32i loc(#loc29)
    %8 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc30)
    %9 = cir.get_member %8[0] {name = "intOne"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc31)
    cir.store %7, %9 : !s32i, !cir.ptr<!s32i> loc(#loc90)
    %10 = cir.const #cir.int<2> : !s32i loc(#loc32)
    %11 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc33)
    %12 = cir.get_member %11[1] {name = "intTwo"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc34)
    cir.store %10, %12 : !s32i, !cir.ptr<!s32i> loc(#loc91)
    %13 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc35)
    %14 = cir.const #cir.int<2> : !s32i loc(#loc36)
    %15 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!cir.ptr<!ty__twoIntsStruct> x 5>>), !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc37)
    %16 = cir.ptr_stride(%15 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, %14 : !s32i), !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc37)
    cir.store %13, %16 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc92)
    %17 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!cir.ptr<!ty__twoIntsStruct> x 5>>), !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc38)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_66b_badSink(%17) : (!cir.ptr<!cir.ptr<!ty__twoIntsStruct>>) -> () loc(#loc39)
    cir.return loc(#loc8)
  } loc(#loc80)
  cir.func no_proto  @CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_66_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc94)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc42)
    cir.return loc(#loc41)
  } loc(#loc93)
  cir.func private  @CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_66b_goodG2BSink(!cir.ptr<!cir.ptr<!ty__twoIntsStruct>>) loc(#loc95)
  cir.func no_proto internal private  @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["data"] {alignment = 8 : i64} loc(#loc97)
    %1 = cir.alloca !cir.array<!cir.ptr<!ty__twoIntsStruct> x 5>, !cir.ptr<!cir.array<!cir.ptr<!ty__twoIntsStruct> x 5>>, ["dataArray"] {alignment = 16 : i64} loc(#loc98)
    %2 = cir.const #cir.ptr<null> : !cir.ptr<!ty__twoIntsStruct> loc(#loc52)
    cir.store %2, %0 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc99)
    %3 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc54)
    %4 = cir.const #cir.int<8> : !u64i loc(#loc100)
    %5 = cir.call @malloc(%4) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc54)
    %6 = cir.cast(bitcast, %5 : !cir.ptr<!void>), !cir.ptr<!ty__twoIntsStruct> loc(#loc101)
    cir.store %6, %0 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc102)
    cir.scope {
      %18 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc61)
      %19 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc62)
      %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!ty__twoIntsStruct> loc(#loc62)
      %21 = cir.cmp(eq, %18, %20) : !cir.ptr<!ty__twoIntsStruct>, !s32i loc(#loc104)
      %22 = cir.cast(int_to_bool, %21 : !s32i), !cir.bool loc(#loc63)
      cir.if %22 {
        %23 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc65)
        %24 = cir.const #cir.int<1> : !s32i loc(#loc66)
        %25 = cir.unary(minus, %24) : !s32i, !s32i loc(#loc67)
        cir.call @exit(%25) : (!s32i) -> () extra(#fn_attr) loc(#loc65)
      } loc(#loc105)
    } loc(#loc103)
    %7 = cir.const #cir.int<1> : !s32i loc(#loc68)
    %8 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc69)
    %9 = cir.get_member %8[0] {name = "intOne"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc31)
    cir.store %7, %9 : !s32i, !cir.ptr<!s32i> loc(#loc106)
    %10 = cir.const #cir.int<2> : !s32i loc(#loc70)
    %11 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc71)
    %12 = cir.get_member %11[1] {name = "intTwo"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc34)
    cir.store %10, %12 : !s32i, !cir.ptr<!s32i> loc(#loc107)
    %13 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc72)
    %14 = cir.const #cir.int<2> : !s32i loc(#loc73)
    %15 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!cir.ptr<!ty__twoIntsStruct> x 5>>), !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc74)
    %16 = cir.ptr_stride(%15 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, %14 : !s32i), !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc74)
    cir.store %13, %16 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc108)
    %17 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!cir.ptr<!ty__twoIntsStruct> x 5>>), !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc75)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_66b_goodG2BSink(%17) : (!cir.ptr<!cir.ptr<!ty__twoIntsStruct>>) -> () loc(#loc76)
    cir.return loc(#loc47)
  } loc(#loc96)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_66a.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_66a.c":22:1)
#loc6 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_66a.c":22:94)
#loc7 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_66a.c":24:1)
#loc8 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_66a.c":39:1)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_66a.c":26:5)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_66a.c":26:21)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_66a.c":27:5)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_66a.c":27:32)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_66a.c":29:12)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_66a.c":29:5)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_66a.c":32:29)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_66a.c":32:36)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_66a.c":32:47)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_66a.c":32:48)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_66a.c":32:5)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_66a.c":33:5)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_66a.c":33:33)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_66a.c":33:9)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_66a.c":33:17)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_66a.c":33:14)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_66a.c":33:23)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_66a.c":33:24)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_66a.c":33:30)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_66a.c":33:29)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_66a.c":34:20)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_66a.c":34:5)
#loc31 = loc("../../../testcasesupport/std_testcase.h":98:9)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_66a.c":35:20)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_66a.c":35:5)
#loc34 = loc("../../../testcasesupport/std_testcase.h":99:9)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_66a.c":37:20)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_66a.c":37:15)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_66a.c":37:5)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_66a.c":38:66)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_66a.c":38:5)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_66a.c":63:1)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_66a.c":66:1)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_66a.c":65:5)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_66a.c":65:13)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_66a.c":46:1)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_66a.c":46:98)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_66a.c":48:1)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_66a.c":61:1)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_66a.c":50:5)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_66a.c":50:21)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_66a.c":51:5)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_66a.c":51:32)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_66a.c":53:12)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_66a.c":53:5)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_66a.c":55:29)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_66a.c":55:36)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_66a.c":55:48)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_66a.c":55:49)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_66a.c":55:5)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_66a.c":56:5)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_66a.c":56:33)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_66a.c":56:9)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_66a.c":56:17)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_66a.c":56:14)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_66a.c":56:23)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_66a.c":56:24)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_66a.c":56:30)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_66a.c":56:29)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_66a.c":57:20)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_66a.c":57:5)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_66a.c":58:20)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_66a.c":58:5)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_66a.c":59:20)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_66a.c":59:15)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_66a.c":59:5)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_66a.c":60:70)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_66a.c":60:5)
#loc77 = loc(fused[#loc1, #loc2])
#loc78 = loc(fused[#loc3, #loc4])
#loc79 = loc(fused[#loc5, #loc6])
#loc80 = loc(fused[#loc7, #loc8])
#loc81 = loc(fused[#loc9, #loc10])
#loc82 = loc(fused[#loc11, #loc12])
#loc83 = loc(fused[#loc14, #loc13])
#loc84 = loc(fused[#loc16, #loc17])
#loc85 = loc(fused[#loc15, #loc18])
#loc86 = loc(fused[#loc19, #loc18])
#loc87 = loc(fused[#loc20, #loc21])
#loc88 = loc(fused[#loc22, #loc23])
#loc89 = loc(fused[#loc25, #loc21])
#loc90 = loc(fused[#loc30, #loc29])
#loc91 = loc(fused[#loc33, #loc32])
#loc92 = loc(fused[#loc37, #loc35])
#loc93 = loc(fused[#loc40, #loc41])
#loc94 = loc(fused[#loc42, #loc43])
#loc95 = loc(fused[#loc44, #loc45])
#loc96 = loc(fused[#loc46, #loc47])
#loc97 = loc(fused[#loc48, #loc49])
#loc98 = loc(fused[#loc50, #loc51])
#loc99 = loc(fused[#loc53, #loc52])
#loc100 = loc(fused[#loc55, #loc56])
#loc101 = loc(fused[#loc54, #loc57])
#loc102 = loc(fused[#loc58, #loc57])
#loc103 = loc(fused[#loc59, #loc60])
#loc104 = loc(fused[#loc61, #loc62])
#loc105 = loc(fused[#loc64, #loc60])
#loc106 = loc(fused[#loc69, #loc68])
#loc107 = loc(fused[#loc71, #loc70])
#loc108 = loc(fused[#loc74, #loc72])
