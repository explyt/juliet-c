!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc89 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_12.c":119:10)
#loc90 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_12.c":119:14)
#loc91 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_12.c":119:20)
#loc92 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_12.c":119:32)
!ty__twoIntsStruct = !cir.struct<struct "_twoIntsStruct" {!s32i, !s32i} #cir.record.decl.ast>
#loc208 = loc(fused[#loc89, #loc90])
#loc209 = loc(fused[#loc91, #loc92])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s04/CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_12.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i32 = dense<32> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func no_proto private @globalReturnsTrueOrFalse(...) -> !s32i loc(#loc173)
  cir.func private @printStructLine(!cir.ptr<!ty__twoIntsStruct>) loc(#loc174)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_12_bad() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["data"] {alignment = 8 : i64} loc(#loc176)
    %1 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc177)
    %2 = cir.const #cir.int<50> : !s32i loc(#loc10)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc10)
    %4 = cir.const #cir.int<8> : !u64i loc(#loc10)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc10)
    %6 = cir.alloca !u8i, !cir.ptr<!u8i>, %5 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc10)
    %7 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc178)
    %8 = cir.cast(bitcast, %6 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc10)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!ty__twoIntsStruct> loc(#loc10)
    cir.store %9, %1 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc177)
    %10 = cir.const #cir.int<100> : !s32i loc(#loc12)
    %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc12)
    %12 = cir.const #cir.int<8> : !u64i loc(#loc12)
    %13 = cir.binop(mul, %11, %12) : !u64i loc(#loc12)
    %14 = cir.alloca !u8i, !cir.ptr<!u8i>, %13 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc12)
    %15 = cir.cast(bitcast, %14 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc12)
    %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!ty__twoIntsStruct> loc(#loc12)
    cir.store %16, %7 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc178)
    cir.scope {
      %17 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc180)
      %18 = cir.cast(bitcast, %17 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc180)
      %19 = cir.call %18() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc15)
      %20 = cir.cast(int_to_bool, %19 : !s32i), !cir.bool loc(#loc15)
      cir.if %20 {
        %21 = cir.load %1 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc20)
        cir.store %21, %0 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc182)
      } else {
        %21 = cir.load %7 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc22)
        cir.store %21, %0 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc183)
      } loc(#loc181)
    } loc(#loc179)
    cir.scope {
      %17 = cir.alloca !cir.array<!ty__twoIntsStruct x 100>, !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>, ["source"] {alignment = 16 : i64} loc(#loc185)
      cir.scope {
        %18 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc187)
        cir.scope {
          %19 = cir.const #cir.int<0> : !s32i loc(#loc34)
          %20 = cir.cast(integral, %19 : !s32i), !u64i loc(#loc34)
          cir.store %20, %18 : !u64i, !cir.ptr<!u64i> loc(#loc189)
          cir.for : cond {
            %21 = cir.load %18 : !cir.ptr<!u64i>, !u64i loc(#loc36)
            %22 = cir.const #cir.int<100> : !s32i loc(#loc37)
            %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc37)
            %24 = cir.cmp(lt, %21, %23) : !u64i, !cir.bool loc(#loc190)
            cir.condition(%24) loc(#loc38)
          } body {
            cir.scope {
              %21 = cir.const #cir.int<0> : !s32i loc(#loc40)
              %22 = cir.load %18 : !cir.ptr<!u64i>, !u64i loc(#loc41)
              %23 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc42)
              %24 = cir.ptr_stride(%23 : !cir.ptr<!ty__twoIntsStruct>, %22 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc42)
              %25 = cir.get_member %24[0] {name = "intOne"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc43)
              cir.store %21, %25 : !s32i, !cir.ptr<!s32i> loc(#loc192)
              %26 = cir.const #cir.int<0> : !s32i loc(#loc44)
              %27 = cir.load %18 : !cir.ptr<!u64i>, !u64i loc(#loc45)
              %28 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc46)
              %29 = cir.ptr_stride(%28 : !cir.ptr<!ty__twoIntsStruct>, %27 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc46)
              %30 = cir.get_member %29[1] {name = "intTwo"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc47)
              cir.store %26, %30 : !s32i, !cir.ptr<!s32i> loc(#loc193)
            } loc(#loc191)
            cir.yield loc(#loc33)
          } step {
            %21 = cir.load %18 : !cir.ptr<!u64i>, !u64i loc(#loc48)
            %22 = cir.unary(inc, %21) : !u64i, !u64i loc(#loc49)
            cir.store %22, %18 : !u64i, !cir.ptr<!u64i> loc(#loc194)
            cir.yield loc(#loc188)
          } loc(#loc188)
        } loc(#loc188)
      } loc(#loc186)
      cir.scope {
        %18 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc196)
        cir.scope {
          %22 = cir.const #cir.int<0> : !s32i loc(#loc56)
          %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc56)
          cir.store %23, %18 : !u64i, !cir.ptr<!u64i> loc(#loc198)
          cir.for : cond {
            %24 = cir.load %18 : !cir.ptr<!u64i>, !u64i loc(#loc58)
            %25 = cir.const #cir.int<100> : !s32i loc(#loc59)
            %26 = cir.cast(integral, %25 : !s32i), !u64i loc(#loc59)
            %27 = cir.cmp(lt, %24, %26) : !u64i, !cir.bool loc(#loc199)
            cir.condition(%27) loc(#loc60)
          } body {
            cir.scope {
              %24 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc62)
              %25 = cir.load %18 : !cir.ptr<!u64i>, !u64i loc(#loc63)
              %26 = cir.ptr_stride(%24 : !cir.ptr<!ty__twoIntsStruct>, %25 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc64)
              %27 = cir.load %18 : !cir.ptr<!u64i>, !u64i loc(#loc65)
              %28 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc66)
              %29 = cir.ptr_stride(%28 : !cir.ptr<!ty__twoIntsStruct>, %27 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc66)
              cir.copy %29 to %26 : !cir.ptr<!ty__twoIntsStruct> loc(#loc64)
            } loc(#loc200)
            cir.yield loc(#loc55)
          } step {
            %24 = cir.load %18 : !cir.ptr<!u64i>, !u64i loc(#loc67)
            %25 = cir.unary(inc, %24) : !u64i, !u64i loc(#loc68)
            cir.store %25, %18 : !u64i, !cir.ptr<!u64i> loc(#loc201)
            cir.yield loc(#loc197)
          } loc(#loc197)
        } loc(#loc197)
        %19 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc69)
        %20 = cir.const #cir.int<0> : !s32i loc(#loc70)
        %21 = cir.ptr_stride(%19 : !cir.ptr<!ty__twoIntsStruct>, %20 : !s32i), !cir.ptr<!ty__twoIntsStruct> loc(#loc71)
        cir.call @printStructLine(%21) : (!cir.ptr<!ty__twoIntsStruct>) -> () loc(#loc72)
      } loc(#loc195)
    } loc(#loc184)
    cir.return loc(#loc6)
  } loc(#loc175)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_12_good() extra(#fn_attr) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc203)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc75)
    cir.return loc(#loc74)
  } loc(#loc202)
  cir.func private @srand(!u32i) extra(#fn_attr1) loc(#loc204)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc205)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc206)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc83)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc84)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc85)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc86)
  cir.func @main(%arg0: !s32i loc(fused[#loc89, #loc90]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc91, #loc92])) -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc208)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc209)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc88)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc93)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc93)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc94)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc95)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc95)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr1) loc(#loc96)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc83)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc83)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc97)
    %8 = cir.get_global @CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_12_good : !cir.ptr<!cir.func<!void ()>> loc(#loc210)
    cir.call @CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_12_good() : () -> () loc(#loc98)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc84)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc84)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc100)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc85)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc85)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc101)
    %13 = cir.get_global @CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_12_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc211)
    cir.call @CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_12_bad() : () -> () loc(#loc102)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc86)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc86)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc104)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc105)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc212)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc212)
    cir.return %17 : !s32i loc(#loc212)
  } loc(#loc207)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["data"] {alignment = 8 : i64} loc(#loc214)
    %1 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc215)
    %2 = cir.const #cir.int<50> : !s32i loc(#loc112)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc112)
    %4 = cir.const #cir.int<8> : !u64i loc(#loc112)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc112)
    %6 = cir.alloca !u8i, !cir.ptr<!u8i>, %5 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc112)
    %7 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc216)
    %8 = cir.cast(bitcast, %6 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc112)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!ty__twoIntsStruct> loc(#loc112)
    cir.store %9, %1 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc215)
    %10 = cir.const #cir.int<100> : !s32i loc(#loc114)
    %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc114)
    %12 = cir.const #cir.int<8> : !u64i loc(#loc114)
    %13 = cir.binop(mul, %11, %12) : !u64i loc(#loc114)
    %14 = cir.alloca !u8i, !cir.ptr<!u8i>, %13 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc114)
    %15 = cir.cast(bitcast, %14 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc114)
    %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!ty__twoIntsStruct> loc(#loc114)
    cir.store %16, %7 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc216)
    cir.scope {
      %17 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc218)
      %18 = cir.cast(bitcast, %17 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc218)
      %19 = cir.call %18() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc117)
      %20 = cir.cast(int_to_bool, %19 : !s32i), !cir.bool loc(#loc117)
      cir.if %20 {
        %21 = cir.load %7 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc122)
        cir.store %21, %0 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc220)
      } else {
        %21 = cir.load %7 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc124)
        cir.store %21, %0 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc221)
      } loc(#loc219)
    } loc(#loc217)
    cir.scope {
      %17 = cir.alloca !cir.array<!ty__twoIntsStruct x 100>, !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>, ["source"] {alignment = 16 : i64} loc(#loc223)
      cir.scope {
        %18 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc225)
        cir.scope {
          %19 = cir.const #cir.int<0> : !s32i loc(#loc136)
          %20 = cir.cast(integral, %19 : !s32i), !u64i loc(#loc136)
          cir.store %20, %18 : !u64i, !cir.ptr<!u64i> loc(#loc227)
          cir.for : cond {
            %21 = cir.load %18 : !cir.ptr<!u64i>, !u64i loc(#loc138)
            %22 = cir.const #cir.int<100> : !s32i loc(#loc139)
            %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc139)
            %24 = cir.cmp(lt, %21, %23) : !u64i, !cir.bool loc(#loc228)
            cir.condition(%24) loc(#loc140)
          } body {
            cir.scope {
              %21 = cir.const #cir.int<0> : !s32i loc(#loc142)
              %22 = cir.load %18 : !cir.ptr<!u64i>, !u64i loc(#loc143)
              %23 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc144)
              %24 = cir.ptr_stride(%23 : !cir.ptr<!ty__twoIntsStruct>, %22 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc144)
              %25 = cir.get_member %24[0] {name = "intOne"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc43)
              cir.store %21, %25 : !s32i, !cir.ptr<!s32i> loc(#loc230)
              %26 = cir.const #cir.int<0> : !s32i loc(#loc145)
              %27 = cir.load %18 : !cir.ptr<!u64i>, !u64i loc(#loc146)
              %28 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc147)
              %29 = cir.ptr_stride(%28 : !cir.ptr<!ty__twoIntsStruct>, %27 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc147)
              %30 = cir.get_member %29[1] {name = "intTwo"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc47)
              cir.store %26, %30 : !s32i, !cir.ptr<!s32i> loc(#loc231)
            } loc(#loc229)
            cir.yield loc(#loc135)
          } step {
            %21 = cir.load %18 : !cir.ptr<!u64i>, !u64i loc(#loc148)
            %22 = cir.unary(inc, %21) : !u64i, !u64i loc(#loc149)
            cir.store %22, %18 : !u64i, !cir.ptr<!u64i> loc(#loc232)
            cir.yield loc(#loc226)
          } loc(#loc226)
        } loc(#loc226)
      } loc(#loc224)
      cir.scope {
        %18 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc234)
        cir.scope {
          %22 = cir.const #cir.int<0> : !s32i loc(#loc156)
          %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc156)
          cir.store %23, %18 : !u64i, !cir.ptr<!u64i> loc(#loc236)
          cir.for : cond {
            %24 = cir.load %18 : !cir.ptr<!u64i>, !u64i loc(#loc158)
            %25 = cir.const #cir.int<100> : !s32i loc(#loc159)
            %26 = cir.cast(integral, %25 : !s32i), !u64i loc(#loc159)
            %27 = cir.cmp(lt, %24, %26) : !u64i, !cir.bool loc(#loc237)
            cir.condition(%27) loc(#loc160)
          } body {
            cir.scope {
              %24 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc162)
              %25 = cir.load %18 : !cir.ptr<!u64i>, !u64i loc(#loc163)
              %26 = cir.ptr_stride(%24 : !cir.ptr<!ty__twoIntsStruct>, %25 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc164)
              %27 = cir.load %18 : !cir.ptr<!u64i>, !u64i loc(#loc165)
              %28 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc166)
              %29 = cir.ptr_stride(%28 : !cir.ptr<!ty__twoIntsStruct>, %27 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc166)
              cir.copy %29 to %26 : !cir.ptr<!ty__twoIntsStruct> loc(#loc164)
            } loc(#loc238)
            cir.yield loc(#loc155)
          } step {
            %24 = cir.load %18 : !cir.ptr<!u64i>, !u64i loc(#loc167)
            %25 = cir.unary(inc, %24) : !u64i, !u64i loc(#loc168)
            cir.store %25, %18 : !u64i, !cir.ptr<!u64i> loc(#loc239)
            cir.yield loc(#loc235)
          } loc(#loc235)
        } loc(#loc235)
        %19 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc169)
        %20 = cir.const #cir.int<0> : !s32i loc(#loc170)
        %21 = cir.ptr_stride(%19 : !cir.ptr<!ty__twoIntsStruct>, %20 : !s32i), !cir.ptr<!ty__twoIntsStruct> loc(#loc171)
        cir.call @printStructLine(%21) : (!cir.ptr<!ty__twoIntsStruct>) -> () loc(#loc172)
      } loc(#loc233)
    } loc(#loc222)
    cir.return loc(#loc108)
  } loc(#loc213)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s04/CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_12.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":52:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":52:30)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":40:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":40:63)
#loc5 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_12.c":21:1)
#loc6 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_12.c":58:1)
#loc7 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_12.c":23:5)
#loc8 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_12.c":23:21)
#loc9 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_12.c":24:5)
#loc10 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_12.c":24:54)
#loc11 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_12.c":25:5)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_12.c":25:55)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_12.c":26:5)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_12.c":36:5)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_12.c":26:8)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_12.c":26:33)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_12.c":27:5)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_12.c":31:5)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_12.c":33:5)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_12.c":30:16)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_12.c":30:9)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_12.c":35:16)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_12.c":35:9)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_12.c":37:5)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_12.c":57:5)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_12.c":38:9)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_12.c":38:33)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_12.c":39:9)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_12.c":47:9)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_12.c":40:13)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_12.c":40:20)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_12.c":42:13)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_12.c":46:13)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_12.c":42:22)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_12.c":42:18)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_12.c":42:25)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_12.c":42:29)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_12.c":42:27)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_12.c":43:13)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_12.c":44:36)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_12.c":44:24)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_12.c":44:17)
#loc43 = loc("../../../testcasesupport/std_testcase.h":98:9)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_12.c":45:36)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_12.c":45:24)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_12.c":45:17)
#loc47 = loc("../../../testcasesupport/std_testcase.h":99:9)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_12.c":42:35)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_12.c":42:34)
#loc50 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_12.c":48:9)
#loc51 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_12.c":56:9)
#loc52 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_12.c":49:13)
#loc53 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_12.c":49:20)
#loc54 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_12.c":51:13)
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_12.c":54:13)
#loc56 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_12.c":51:22)
#loc57 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_12.c":51:18)
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_12.c":51:25)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_12.c":51:29)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_12.c":51:27)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_12.c":52:13)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_12.c":53:17)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_12.c":53:22)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_12.c":53:23)
#loc65 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_12.c":53:34)
#loc66 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_12.c":53:27)
#loc67 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_12.c":51:35)
#loc68 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_12.c":51:34)
#loc69 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_12.c":55:30)
#loc70 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_12.c":55:35)
#loc71 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_12.c":55:36)
#loc72 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_12.c":55:13)
#loc73 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_12.c":104:1)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_12.c":107:1)
#loc75 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_12.c":106:5)
#loc76 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_12.c":106:13)
#loc77 = loc("/usr/include/stdlib.h":575:1)
#loc78 = loc("/usr/include/stdlib.h":575:41)
#loc79 = loc("/usr/include/time.h":76:1)
#loc80 = loc("/usr/include/time.h":76:38)
#loc81 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc82 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc83 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_12.c":124:15)
#loc84 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_12.c":126:15)
#loc85 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_12.c":129:15)
#loc86 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_12.c":131:15)
#loc87 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_12.c":119:1)
#loc88 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_12.c":134:1)
#loc93 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_12.c":120:1)
#loc94 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_12.c":122:27)
#loc95 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_12.c":122:22)
#loc96 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_12.c":122:5)
#loc97 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_12.c":124:5)
#loc98 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_12.c":125:5)
#loc99 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_12.c":125:75)
#loc100 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_12.c":126:5)
#loc101 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_12.c":129:5)
#loc102 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_12.c":130:5)
#loc103 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_12.c":130:74)
#loc104 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_12.c":131:5)
#loc105 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_12.c":133:12)
#loc106 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_12.c":133:5)
#loc107 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_12.c":66:1)
#loc108 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_12.c":102:1)
#loc109 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_12.c":68:5)
#loc110 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_12.c":68:21)
#loc111 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_12.c":69:5)
#loc112 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_12.c":69:54)
#loc113 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_12.c":70:5)
#loc114 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_12.c":70:55)
#loc115 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_12.c":71:5)
#loc116 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_12.c":80:5)
#loc117 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_12.c":71:8)
#loc118 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_12.c":71:33)
#loc119 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_12.c":72:5)
#loc120 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_12.c":75:5)
#loc121 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_12.c":77:5)
#loc122 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_12.c":74:16)
#loc123 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_12.c":74:9)
#loc124 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_12.c":79:16)
#loc125 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_12.c":79:9)
#loc126 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_12.c":81:5)
#loc127 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_12.c":101:5)
#loc128 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_12.c":82:9)
#loc129 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_12.c":82:33)
#loc130 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_12.c":83:9)
#loc131 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_12.c":91:9)
#loc132 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_12.c":84:13)
#loc133 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_12.c":84:20)
#loc134 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_12.c":86:13)
#loc135 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_12.c":90:13)
#loc136 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_12.c":86:22)
#loc137 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_12.c":86:18)
#loc138 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_12.c":86:25)
#loc139 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_12.c":86:29)
#loc140 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_12.c":86:27)
#loc141 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_12.c":87:13)
#loc142 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_12.c":88:36)
#loc143 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_12.c":88:24)
#loc144 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_12.c":88:17)
#loc145 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_12.c":89:36)
#loc146 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_12.c":89:24)
#loc147 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_12.c":89:17)
#loc148 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_12.c":86:35)
#loc149 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_12.c":86:34)
#loc150 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_12.c":92:9)
#loc151 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_12.c":100:9)
#loc152 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_12.c":93:13)
#loc153 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_12.c":93:20)
#loc154 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_12.c":95:13)
#loc155 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_12.c":98:13)
#loc156 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_12.c":95:22)
#loc157 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_12.c":95:18)
#loc158 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_12.c":95:25)
#loc159 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_12.c":95:29)
#loc160 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_12.c":95:27)
#loc161 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_12.c":96:13)
#loc162 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_12.c":97:17)
#loc163 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_12.c":97:22)
#loc164 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_12.c":97:23)
#loc165 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_12.c":97:34)
#loc166 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_12.c":97:27)
#loc167 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_12.c":95:35)
#loc168 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_12.c":95:34)
#loc169 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_12.c":99:30)
#loc170 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_12.c":99:35)
#loc171 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_12.c":99:36)
#loc172 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_12.c":99:13)
#loc173 = loc(fused[#loc1, #loc2])
#loc174 = loc(fused[#loc3, #loc4])
#loc175 = loc(fused[#loc5, #loc6])
#loc176 = loc(fused[#loc7, #loc8])
#loc177 = loc(fused[#loc9, #loc10])
#loc178 = loc(fused[#loc11, #loc12])
#loc179 = loc(fused[#loc13, #loc14])
#loc180 = loc(fused[#loc15, #loc16])
#loc181 = loc(fused[#loc17, #loc18, #loc19, #loc14])
#loc182 = loc(fused[#loc21, #loc20])
#loc183 = loc(fused[#loc23, #loc22])
#loc184 = loc(fused[#loc24, #loc25])
#loc185 = loc(fused[#loc26, #loc27])
#loc186 = loc(fused[#loc28, #loc29])
#loc187 = loc(fused[#loc30, #loc31])
#loc188 = loc(fused[#loc32, #loc33])
#loc189 = loc(fused[#loc35, #loc34])
#loc190 = loc(fused[#loc36, #loc37])
#loc191 = loc(fused[#loc39, #loc33])
#loc192 = loc(fused[#loc42, #loc40])
#loc193 = loc(fused[#loc46, #loc44])
#loc194 = loc(fused[#loc49, #loc48])
#loc195 = loc(fused[#loc50, #loc51])
#loc196 = loc(fused[#loc52, #loc53])
#loc197 = loc(fused[#loc54, #loc55])
#loc198 = loc(fused[#loc57, #loc56])
#loc199 = loc(fused[#loc58, #loc59])
#loc200 = loc(fused[#loc61, #loc55])
#loc201 = loc(fused[#loc68, #loc67])
#loc202 = loc(fused[#loc73, #loc74])
#loc203 = loc(fused[#loc75, #loc76])
#loc204 = loc(fused[#loc77, #loc78])
#loc205 = loc(fused[#loc79, #loc80])
#loc206 = loc(fused[#loc81, #loc82])
#loc207 = loc(fused[#loc87, #loc88])
#loc210 = loc(fused[#loc98, #loc99])
#loc211 = loc(fused[#loc102, #loc103])
#loc212 = loc(fused[#loc106, #loc105])
#loc213 = loc(fused[#loc107, #loc108])
#loc214 = loc(fused[#loc109, #loc110])
#loc215 = loc(fused[#loc111, #loc112])
#loc216 = loc(fused[#loc113, #loc114])
#loc217 = loc(fused[#loc115, #loc116])
#loc218 = loc(fused[#loc117, #loc118])
#loc219 = loc(fused[#loc119, #loc120, #loc121, #loc116])
#loc220 = loc(fused[#loc123, #loc122])
#loc221 = loc(fused[#loc125, #loc124])
#loc222 = loc(fused[#loc126, #loc127])
#loc223 = loc(fused[#loc128, #loc129])
#loc224 = loc(fused[#loc130, #loc131])
#loc225 = loc(fused[#loc132, #loc133])
#loc226 = loc(fused[#loc134, #loc135])
#loc227 = loc(fused[#loc137, #loc136])
#loc228 = loc(fused[#loc138, #loc139])
#loc229 = loc(fused[#loc141, #loc135])
#loc230 = loc(fused[#loc144, #loc142])
#loc231 = loc(fused[#loc147, #loc145])
#loc232 = loc(fused[#loc149, #loc148])
#loc233 = loc(fused[#loc150, #loc151])
#loc234 = loc(fused[#loc152, #loc153])
#loc235 = loc(fused[#loc154, #loc155])
#loc236 = loc(fused[#loc157, #loc156])
#loc237 = loc(fused[#loc158, #loc159])
#loc238 = loc(fused[#loc161, #loc155])
#loc239 = loc(fused[#loc168, #loc167])
