!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#true = #cir.bool<true> : !cir.bool
module @"/workspaces/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE129_large_01.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f80 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i32 = dense<32> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e", "dlti.endianness" = "little">} {
  cir.func private @printIntLine(!s32i) loc(#loc135)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc136)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"ERROR: Array index is negative.\00" : !cir.array<!s8i x 32>> : !cir.array<!s8i x 32> {alignment = 1 : i64} loc(#loc5)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE129_large_01_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc138)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc10)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc11)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc139)
    %3 = cir.const #cir.int<10> : !s32i loc(#loc13)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc140)
    cir.scope {
      %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc142)
      %5 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc143)
      %6 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc143)
      cir.store %6, %5 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc143)
      cir.scope {
        %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc23)
        %8 = cir.const #cir.int<0> : !s32i loc(#loc24)
        %9 = cir.cmp(ge, %7, %8) : !s32i, !cir.bool loc(#loc145)
        cir.if %9 {
          %10 = cir.const #cir.int<1> : !s32i loc(#loc28)
          %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc29)
          %12 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc30)
          %13 = cir.ptr_stride(%12 : !cir.ptr<!s32i>, %11 : !s32i), !cir.ptr<!s32i> loc(#loc30)
          cir.store %10, %13 : !s32i, !cir.ptr<!s32i> loc(#loc147)
          cir.scope {
            %14 = cir.const #cir.int<0> : !s32i loc(#loc33)
            cir.store %14, %4 : !s32i, !cir.ptr<!s32i> loc(#loc149)
            cir.for : cond {
              %15 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc35)
              %16 = cir.const #cir.int<10> : !s32i loc(#loc36)
              %17 = cir.cmp(lt, %15, %16) : !s32i, !cir.bool loc(#loc150)
              cir.condition(%17) loc(#loc37)
            } body {
              cir.scope {
                %15 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc39)
                %16 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc40)
                %17 = cir.ptr_stride(%16 : !cir.ptr<!s32i>, %15 : !s32i), !cir.ptr<!s32i> loc(#loc40)
                %18 = cir.load %17 : !cir.ptr<!s32i>, !s32i loc(#loc40)
                cir.call @printIntLine(%18) : (!s32i) -> () loc(#loc41)
              } loc(#loc151)
              cir.yield loc(#loc32)
            } step {
              %15 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc42)
              %16 = cir.unary(inc, %15) nsw : !s32i, !s32i loc(#loc43)
              cir.store %16, %4 : !s32i, !cir.ptr<!s32i> loc(#loc152)
              cir.yield loc(#loc148)
            } loc(#loc148)
          } loc(#loc148)
        } else {
          %10 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc5)
          %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc5)
          cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc44)
        } loc(#loc146)
      } loc(#loc144)
    } loc(#loc141)
    cir.return loc(#loc7)
  } loc(#loc137)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE129_large_01_good() extra(#fn_attr) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc154)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc47)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc155)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc49)
    cir.return loc(#loc46)
  } loc(#loc153)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc157)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc55)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc56)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc158)
    %3 = cir.const #cir.int<7> : !s32i loc(#loc58)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc159)
    cir.scope {
      %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc161)
      %5 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc162)
      %6 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc162)
      cir.store %6, %5 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc162)
      cir.scope {
        %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc68)
        %8 = cir.const #cir.int<0> : !s32i loc(#loc69)
        %9 = cir.cmp(ge, %7, %8) : !s32i, !cir.bool loc(#loc164)
        cir.if %9 {
          %10 = cir.const #cir.int<1> : !s32i loc(#loc73)
          %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc74)
          %12 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc75)
          %13 = cir.ptr_stride(%12 : !cir.ptr<!s32i>, %11 : !s32i), !cir.ptr<!s32i> loc(#loc75)
          cir.store %10, %13 : !s32i, !cir.ptr<!s32i> loc(#loc166)
          cir.scope {
            %14 = cir.const #cir.int<0> : !s32i loc(#loc78)
            cir.store %14, %4 : !s32i, !cir.ptr<!s32i> loc(#loc168)
            cir.for : cond {
              %15 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc80)
              %16 = cir.const #cir.int<10> : !s32i loc(#loc81)
              %17 = cir.cmp(lt, %15, %16) : !s32i, !cir.bool loc(#loc169)
              cir.condition(%17) loc(#loc82)
            } body {
              cir.scope {
                %15 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc84)
                %16 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc85)
                %17 = cir.ptr_stride(%16 : !cir.ptr<!s32i>, %15 : !s32i), !cir.ptr<!s32i> loc(#loc85)
                %18 = cir.load %17 : !cir.ptr<!s32i>, !s32i loc(#loc85)
                cir.call @printIntLine(%18) : (!s32i) -> () loc(#loc86)
              } loc(#loc170)
              cir.yield loc(#loc77)
            } step {
              %15 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc87)
              %16 = cir.unary(inc, %15) nsw : !s32i, !s32i loc(#loc88)
              cir.store %16, %4 : !s32i, !cir.ptr<!s32i> loc(#loc171)
              cir.yield loc(#loc167)
            } loc(#loc167)
          } loc(#loc167)
        } else {
          %10 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc89)
          %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc89)
          cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc90)
        } loc(#loc165)
      } loc(#loc163)
    } loc(#loc160)
    cir.return loc(#loc52)
  } loc(#loc156)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"ERROR: Array index is out-of-bounds\00" : !cir.array<!s8i x 36>> : !cir.array<!s8i x 36> {alignment = 1 : i64} loc(#loc91)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc173)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc96)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc97)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc174)
    %3 = cir.const #cir.int<10> : !s32i loc(#loc99)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc175)
    cir.scope {
      %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc177)
      %5 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc178)
      %6 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc178)
      cir.store %6, %5 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc178)
      cir.scope {
        %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc109)
        %8 = cir.const #cir.int<0> : !s32i loc(#loc110)
        %9 = cir.cmp(ge, %7, %8) : !s32i, !cir.bool loc(#loc180)
        %10 = cir.ternary(%9, true {
          %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc112)
          %12 = cir.const #cir.int<10> : !s32i loc(#loc113)
          %13 = cir.cmp(lt, %11, %12) : !s32i, !cir.bool loc(#loc181)
          %14 = cir.ternary(%13, true {
            %15 = cir.const #true loc(#loc111)
            cir.yield %15 : !cir.bool loc(#loc111)
          }, false {
            %15 = cir.const #false loc(#loc111)
            cir.yield %15 : !cir.bool loc(#loc111)
          }) : (!cir.bool) -> !cir.bool loc(#loc111)
          cir.yield %14 : !cir.bool loc(#loc111)
        }, false {
          %11 = cir.const #false loc(#loc111)
          cir.yield %11 : !cir.bool loc(#loc111)
        }) : (!cir.bool) -> !cir.bool loc(#loc111)
        cir.if %10 {
          %11 = cir.const #cir.int<1> : !s32i loc(#loc118)
          %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc119)
          %13 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc120)
          %14 = cir.ptr_stride(%13 : !cir.ptr<!s32i>, %12 : !s32i), !cir.ptr<!s32i> loc(#loc120)
          cir.store %11, %14 : !s32i, !cir.ptr<!s32i> loc(#loc183)
          cir.scope {
            %15 = cir.const #cir.int<0> : !s32i loc(#loc123)
            cir.store %15, %4 : !s32i, !cir.ptr<!s32i> loc(#loc185)
            cir.for : cond {
              %16 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc125)
              %17 = cir.const #cir.int<10> : !s32i loc(#loc126)
              %18 = cir.cmp(lt, %16, %17) : !s32i, !cir.bool loc(#loc186)
              cir.condition(%18) loc(#loc127)
            } body {
              cir.scope {
                %16 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc129)
                %17 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc130)
                %18 = cir.ptr_stride(%17 : !cir.ptr<!s32i>, %16 : !s32i), !cir.ptr<!s32i> loc(#loc130)
                %19 = cir.load %18 : !cir.ptr<!s32i>, !s32i loc(#loc130)
                cir.call @printIntLine(%19) : (!s32i) -> () loc(#loc131)
              } loc(#loc187)
              cir.yield loc(#loc122)
            } step {
              %16 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc132)
              %17 = cir.unary(inc, %16) nsw : !s32i, !s32i loc(#loc133)
              cir.store %17, %4 : !s32i, !cir.ptr<!s32i> loc(#loc188)
              cir.yield loc(#loc184)
            } loc(#loc184)
          } loc(#loc184)
        } else {
          %11 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc91)
          %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc91)
          cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc134)
        } loc(#loc182)
      } loc(#loc179)
    } loc(#loc176)
    cir.return loc(#loc93)
  } loc(#loc172)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE129_large_01.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc5 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_01.c":45:23)
#loc6 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_01.c":22:1)
#loc7 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_01.c":48:1)
#loc8 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_01.c":24:5)
#loc9 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_01.c":24:9)
#loc10 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_01.c":26:13)
#loc11 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_01.c":26:12)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_01.c":26:5)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_01.c":28:12)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_01.c":28:5)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_01.c":29:5)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_01.c":47:5)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_01.c":30:9)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_01.c":30:13)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_01.c":31:9)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_01.c":31:30)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_01.c":34:9)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_01.c":46:9)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_01.c":34:13)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_01.c":34:21)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_01.c":35:9)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_01.c":42:9)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_01.c":44:9)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_01.c":36:28)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_01.c":36:20)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_01.c":36:13)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_01.c":38:13)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_01.c":41:13)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_01.c":38:21)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_01.c":38:17)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_01.c":38:24)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_01.c":38:28)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_01.c":38:26)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_01.c":39:13)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_01.c":40:37)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_01.c":40:30)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_01.c":40:17)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_01.c":38:33)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_01.c":38:32)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_01.c":45:13)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_01.c":112:1)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_01.c":116:1)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_01.c":114:5)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_01.c":114:13)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_01.c":115:5)
#loc50 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_01.c":115:13)
#loc51 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_01.c":55:1)
#loc52 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_01.c":82:1)
#loc53 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_01.c":57:5)
#loc54 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_01.c":57:9)
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_01.c":59:13)
#loc56 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_01.c":59:12)
#loc57 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_01.c":59:5)
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_01.c":62:12)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_01.c":62:5)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_01.c":63:5)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_01.c":81:5)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_01.c":64:9)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_01.c":64:13)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_01.c":65:9)
#loc65 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_01.c":65:30)
#loc66 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_01.c":68:9)
#loc67 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_01.c":80:9)
#loc68 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_01.c":68:13)
#loc69 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_01.c":68:21)
#loc70 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_01.c":69:9)
#loc71 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_01.c":76:9)
#loc72 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_01.c":78:9)
#loc73 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_01.c":70:28)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_01.c":70:20)
#loc75 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_01.c":70:13)
#loc76 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_01.c":72:13)
#loc77 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_01.c":75:13)
#loc78 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_01.c":72:21)
#loc79 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_01.c":72:17)
#loc80 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_01.c":72:24)
#loc81 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_01.c":72:28)
#loc82 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_01.c":72:26)
#loc83 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_01.c":73:13)
#loc84 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_01.c":74:37)
#loc85 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_01.c":74:30)
#loc86 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_01.c":74:17)
#loc87 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_01.c":72:33)
#loc88 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_01.c":72:32)
#loc89 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_01.c":79:23)
#loc90 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_01.c":79:13)
#loc91 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_01.c":107:23)
#loc92 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_01.c":85:1)
#loc93 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_01.c":110:1)
#loc94 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_01.c":87:5)
#loc95 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_01.c":87:9)
#loc96 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_01.c":89:13)
#loc97 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_01.c":89:12)
#loc98 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_01.c":89:5)
#loc99 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_01.c":91:12)
#loc100 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_01.c":91:5)
#loc101 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_01.c":92:5)
#loc102 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_01.c":109:5)
#loc103 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_01.c":93:9)
#loc104 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_01.c":93:13)
#loc105 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_01.c":94:9)
#loc106 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_01.c":94:30)
#loc107 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_01.c":96:9)
#loc108 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_01.c":108:9)
#loc109 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_01.c":96:13)
#loc110 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_01.c":96:21)
#loc111 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_01.c":96:23)
#loc112 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_01.c":96:26)
#loc113 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_01.c":96:34)
#loc114 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_01.c":96:36)
#loc115 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_01.c":97:9)
#loc116 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_01.c":104:9)
#loc117 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_01.c":106:9)
#loc118 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_01.c":98:28)
#loc119 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_01.c":98:20)
#loc120 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_01.c":98:13)
#loc121 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_01.c":100:13)
#loc122 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_01.c":103:13)
#loc123 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_01.c":100:21)
#loc124 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_01.c":100:17)
#loc125 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_01.c":100:24)
#loc126 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_01.c":100:28)
#loc127 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_01.c":100:26)
#loc128 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_01.c":101:13)
#loc129 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_01.c":102:37)
#loc130 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_01.c":102:30)
#loc131 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_01.c":102:17)
#loc132 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_01.c":100:33)
#loc133 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_01.c":100:32)
#loc134 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_01.c":107:13)
#loc135 = loc(fused[#loc1, #loc2])
#loc136 = loc(fused[#loc3, #loc4])
#loc137 = loc(fused[#loc6, #loc7])
#loc138 = loc(fused[#loc8, #loc9])
#loc139 = loc(fused[#loc12, #loc10])
#loc140 = loc(fused[#loc14, #loc13])
#loc141 = loc(fused[#loc15, #loc16])
#loc142 = loc(fused[#loc17, #loc18])
#loc143 = loc(fused[#loc19, #loc20])
#loc144 = loc(fused[#loc21, #loc22])
#loc145 = loc(fused[#loc23, #loc24])
#loc146 = loc(fused[#loc25, #loc26, #loc27, #loc22])
#loc147 = loc(fused[#loc30, #loc28])
#loc148 = loc(fused[#loc31, #loc32])
#loc149 = loc(fused[#loc34, #loc33])
#loc150 = loc(fused[#loc35, #loc36])
#loc151 = loc(fused[#loc38, #loc32])
#loc152 = loc(fused[#loc43, #loc42])
#loc153 = loc(fused[#loc45, #loc46])
#loc154 = loc(fused[#loc47, #loc48])
#loc155 = loc(fused[#loc49, #loc50])
#loc156 = loc(fused[#loc51, #loc52])
#loc157 = loc(fused[#loc53, #loc54])
#loc158 = loc(fused[#loc57, #loc55])
#loc159 = loc(fused[#loc59, #loc58])
#loc160 = loc(fused[#loc60, #loc61])
#loc161 = loc(fused[#loc62, #loc63])
#loc162 = loc(fused[#loc64, #loc65])
#loc163 = loc(fused[#loc66, #loc67])
#loc164 = loc(fused[#loc68, #loc69])
#loc165 = loc(fused[#loc70, #loc71, #loc72, #loc67])
#loc166 = loc(fused[#loc75, #loc73])
#loc167 = loc(fused[#loc76, #loc77])
#loc168 = loc(fused[#loc79, #loc78])
#loc169 = loc(fused[#loc80, #loc81])
#loc170 = loc(fused[#loc83, #loc77])
#loc171 = loc(fused[#loc88, #loc87])
#loc172 = loc(fused[#loc92, #loc93])
#loc173 = loc(fused[#loc94, #loc95])
#loc174 = loc(fused[#loc98, #loc96])
#loc175 = loc(fused[#loc100, #loc99])
#loc176 = loc(fused[#loc101, #loc102])
#loc177 = loc(fused[#loc103, #loc104])
#loc178 = loc(fused[#loc105, #loc106])
#loc179 = loc(fused[#loc107, #loc108])
#loc180 = loc(fused[#loc109, #loc110])
#loc181 = loc(fused[#loc112, #loc114])
#loc182 = loc(fused[#loc115, #loc116, #loc117, #loc108])
#loc183 = loc(fused[#loc120, #loc118])
#loc184 = loc(fused[#loc121, #loc122])
#loc185 = loc(fused[#loc124, #loc123])
#loc186 = loc(fused[#loc125, #loc126])
#loc187 = loc(fused[#loc128, #loc122])
#loc188 = loc(fused[#loc133, #loc132])
