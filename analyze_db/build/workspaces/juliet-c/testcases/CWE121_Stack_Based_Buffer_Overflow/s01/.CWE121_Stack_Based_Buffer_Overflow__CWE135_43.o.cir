!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc4 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_43.cpp":30:23)
#loc5 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_43.cpp":30:31)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_43.cpp":55:27)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_43.cpp":55:35)
#loc65 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_43.cpp":76:27)
#loc66 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_43.cpp":76:35)
#loc99 = loc(fused[#loc4, #loc5])
#loc111 = loc(fused[#loc37, #loc38])
#loc121 = loc(fused[#loc65, #loc66])
module @"/workspaces/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE135_43.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little", "dlti.mangling_mode" = "e">} {
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<[#cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<0> : !s32i]> : !cir.array<!s32i x 43> {alignment = 4 : i64} loc(#loc1)
  cir.func internal private @_ZN45CWE121_Stack_Based_Buffer_Overflow__CWE135_43L9badSourceERPv(%arg0: !cir.ptr<!cir.ptr<!void>> loc(fused[#loc4, #loc5])) extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!cir.ptr<!cir.ptr<!void>>>, ["data", init, const] {alignment = 8 : i64} loc(#loc99)
    cir.store %arg0, %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!cir.ptr<!cir.ptr<!void>>> loc(#loc6)
    %1 = cir.get_global @".str" : !cir.ptr<!cir.array<!s32i x 43>> loc(#loc1)
    %2 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s32i x 43>>), !cir.ptr<!s32i> loc(#loc1)
    %3 = cir.cast(bitcast, %2 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc1)
    %4 = cir.load %0 : !cir.ptr<!cir.ptr<!cir.ptr<!void>>>, !cir.ptr<!cir.ptr<!void>> loc(#loc7)
    cir.store %3, %4 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc100)
    cir.return loc(#loc3)
  } loc(#loc98)
  cir.func private @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr1) loc(#loc101)
  cir.func private @wcscpy(!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr1) loc(#loc102)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc103)
  cir.func @_ZN45CWE121_Stack_Based_Buffer_Overflow__CWE135_433badEv() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc105)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc18)
    cir.store %1, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc106)
    cir.call @_ZN45CWE121_Stack_Based_Buffer_Overflow__CWE135_43L9badSourceERPv(%0) : (!cir.ptr<!cir.ptr<!void>>) -> () loc(#loc20)
    cir.scope {
      %2 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc108)
      %3 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc109)
      %4 = cir.get_global @strlen : !cir.ptr<!cir.func<(!cir.ptr<!s8i>) -> !u64i>> loc(#loc27)
      %5 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc28)
      %6 = cir.cast(bitcast, %5 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc28)
      %7 = cir.call @strlen(%6) : (!cir.ptr<!s8i>) -> !u64i side_effect(pure) extra(#fn_attr1) loc(#loc27)
      cir.store %7, %2 : !u64i, !cir.ptr<!u64i> loc(#loc108)
      %8 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc26)
      %9 = cir.const #cir.int<1> : !s32i loc(#loc26)
      %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc26)
      %11 = cir.binop(add, %8, %10) : !u64i loc(#loc26)
      %12 = cir.const #cir.int<4> : !u64i loc(#loc26)
      %13 = cir.binop(mul, %11, %12) : !u64i loc(#loc26)
      %14 = cir.alloca !u8i, !cir.ptr<!u8i>, %13 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc26)
      %15 = cir.cast(bitcast, %14 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc26)
      cir.store %15, %3 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc109)
      %16 = cir.load %3 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc29)
      %17 = cir.cast(bitcast, %16 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc29)
      %18 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc30)
      %19 = cir.cast(bitcast, %18 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc30)
      %20 = cir.call @wcscpy(%17, %19) : (!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr1) loc(#loc31)
      %21 = cir.load %3 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc32)
      %22 = cir.cast(bitcast, %21 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc32)
      cir.call @printLine(%22) : (!cir.ptr<!s8i>) -> () loc(#loc33)
    } loc(#loc107)
    cir.return loc(#loc15)
  } loc(#loc104)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\00" : !cir.array<!s8i x 43>> : !cir.array<!s8i x 43> {alignment = 1 : i64} loc(#loc34)
  cir.func internal private @_ZN45CWE121_Stack_Based_Buffer_Overflow__CWE135_43L13goodG2BSourceERPv(%arg0: !cir.ptr<!cir.ptr<!void>> loc(fused[#loc37, #loc38])) extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!cir.ptr<!cir.ptr<!void>>>, ["data", init, const] {alignment = 8 : i64} loc(#loc111)
    cir.store %arg0, %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!cir.ptr<!cir.ptr<!void>>> loc(#loc39)
    %1 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 43>> loc(#loc34)
    %2 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 43>>), !cir.ptr<!s8i> loc(#loc34)
    %3 = cir.cast(bitcast, %2 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc34)
    %4 = cir.load %0 : !cir.ptr<!cir.ptr<!cir.ptr<!void>>>, !cir.ptr<!cir.ptr<!void>> loc(#loc40)
    cir.store %3, %4 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc112)
    cir.return loc(#loc36)
  } loc(#loc110)
  cir.func private @strcpy(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr1) loc(#loc113)
  cir.func internal private @_ZN45CWE121_Stack_Based_Buffer_Overflow__CWE135_43L7goodG2BEv() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc115)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc47)
    cir.store %1, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc116)
    cir.call @_ZN45CWE121_Stack_Based_Buffer_Overflow__CWE135_43L13goodG2BSourceERPv(%0) : (!cir.ptr<!cir.ptr<!void>>) -> () loc(#loc49)
    cir.scope {
      %2 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc118)
      %3 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc119)
      %4 = cir.get_global @strlen : !cir.ptr<!cir.func<(!cir.ptr<!s8i>) -> !u64i>> loc(#loc56)
      %5 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc57)
      %6 = cir.cast(bitcast, %5 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc57)
      %7 = cir.call @strlen(%6) : (!cir.ptr<!s8i>) -> !u64i side_effect(pure) extra(#fn_attr1) loc(#loc56)
      cir.store %7, %2 : !u64i, !cir.ptr<!u64i> loc(#loc118)
      %8 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc55)
      %9 = cir.const #cir.int<1> : !s32i loc(#loc55)
      %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc55)
      %11 = cir.binop(add, %8, %10) : !u64i loc(#loc55)
      %12 = cir.const #cir.int<1> : !s32i loc(#loc55)
      %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc55)
      %14 = cir.binop(mul, %11, %13) : !u64i loc(#loc55)
      %15 = cir.alloca !u8i, !cir.ptr<!u8i>, %14 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc55)
      %16 = cir.cast(bitcast, %15 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc55)
      cir.store %16, %3 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc119)
      %17 = cir.get_global @strcpy : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i>>> loc(#loc58)
      %18 = cir.load %3 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc59)
      %19 = cir.cast(bitcast, %18 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc59)
      %20 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc60)
      %21 = cir.cast(bitcast, %20 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc60)
      %22 = cir.call @strcpy(%19, %21) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr1) loc(#loc58)
      %23 = cir.load %3 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc61)
      %24 = cir.cast(bitcast, %23 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc61)
      cir.call @printLine(%24) : (!cir.ptr<!s8i>) -> () loc(#loc62)
    } loc(#loc117)
    cir.return loc(#loc44)
  } loc(#loc114)
  cir.func internal private @_ZN45CWE121_Stack_Based_Buffer_Overflow__CWE135_43L13goodB2GSourceERPv(%arg0: !cir.ptr<!cir.ptr<!void>> loc(fused[#loc65, #loc66])) extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!cir.ptr<!cir.ptr<!void>>>, ["data", init, const] {alignment = 8 : i64} loc(#loc121)
    cir.store %arg0, %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!cir.ptr<!cir.ptr<!void>>> loc(#loc67)
    %1 = cir.get_global @".str" : !cir.ptr<!cir.array<!s32i x 43>> loc(#loc68)
    %2 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s32i x 43>>), !cir.ptr<!s32i> loc(#loc68)
    %3 = cir.cast(bitcast, %2 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc68)
    %4 = cir.load %0 : !cir.ptr<!cir.ptr<!cir.ptr<!void>>>, !cir.ptr<!cir.ptr<!void>> loc(#loc69)
    cir.store %3, %4 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc122)
    cir.return loc(#loc64)
  } loc(#loc120)
  cir.func private @wcslen(!cir.ptr<!s32i>) -> !u64i extra(#fn_attr1) loc(#loc123)
  cir.func private @printWLine(!cir.ptr<!s32i>) loc(#loc124)
  cir.func internal private @_ZN45CWE121_Stack_Based_Buffer_Overflow__CWE135_43L7goodB2GEv() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc126)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc78)
    cir.store %1, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc127)
    cir.call @_ZN45CWE121_Stack_Based_Buffer_Overflow__CWE135_43L13goodB2GSourceERPv(%0) : (!cir.ptr<!cir.ptr<!void>>) -> () loc(#loc80)
    cir.scope {
      %2 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc129)
      %3 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc130)
      %4 = cir.get_global @wcslen : !cir.ptr<!cir.func<(!cir.ptr<!s32i>) -> !u64i>> loc(#loc87)
      %5 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc88)
      %6 = cir.cast(bitcast, %5 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc88)
      %7 = cir.call @wcslen(%6) : (!cir.ptr<!s32i>) -> !u64i side_effect(pure) extra(#fn_attr1) loc(#loc87)
      cir.store %7, %2 : !u64i, !cir.ptr<!u64i> loc(#loc129)
      %8 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc86)
      %9 = cir.const #cir.int<1> : !s32i loc(#loc86)
      %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc86)
      %11 = cir.binop(add, %8, %10) : !u64i loc(#loc86)
      %12 = cir.const #cir.int<4> : !u64i loc(#loc86)
      %13 = cir.binop(mul, %11, %12) : !u64i loc(#loc86)
      %14 = cir.alloca !u8i, !cir.ptr<!u8i>, %13 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc86)
      %15 = cir.cast(bitcast, %14 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc86)
      cir.store %15, %3 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc130)
      %16 = cir.load %3 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc89)
      %17 = cir.cast(bitcast, %16 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc89)
      %18 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc90)
      %19 = cir.cast(bitcast, %18 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc90)
      %20 = cir.call @wcscpy(%17, %19) : (!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr1) loc(#loc91)
      %21 = cir.load %3 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc92)
      %22 = cir.cast(bitcast, %21 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc92)
      cir.call @printWLine(%22) : (!cir.ptr<!s32i>) -> () loc(#loc93)
    } loc(#loc128)
    cir.return loc(#loc75)
  } loc(#loc125)
  cir.func @_ZN45CWE121_Stack_Based_Buffer_Overflow__CWE135_434goodEv() extra(#fn_attr) {
    cir.call @_ZN45CWE121_Stack_Based_Buffer_Overflow__CWE135_43L7goodG2BEv() : () -> () loc(#loc96)
    cir.call @_ZN45CWE121_Stack_Based_Buffer_Overflow__CWE135_43L7goodB2GEv() : () -> () loc(#loc97)
    cir.return loc(#loc95)
  } loc(#loc131)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE135_43.cpp":0:0)
#loc1 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_43.cpp":33:20)
#loc2 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_43.cpp":30:1)
#loc3 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_43.cpp":34:1)
#loc6 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_43.cpp":31:1)
#loc7 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_43.cpp":33:5)
#loc8 = loc("/usr/include/string.h":407:1)
#loc9 = loc("/usr/include/string.h":408:33)
#loc10 = loc("/usr/include/wchar.h":98:1)
#loc11 = loc("/usr/include/wchar.h":100:14)
#loc12 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc13 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_43.cpp":36:1)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_43.cpp":48:1)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_43.cpp":38:5)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_43.cpp":38:12)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_43.cpp":39:12)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_43.cpp":39:5)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_43.cpp":40:5)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_43.cpp":41:5)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_43.cpp":47:5)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_43.cpp":43:9)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_43.cpp":43:45)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_43.cpp":44:9)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_43.cpp":44:31)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_43.cpp":43:26)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_43.cpp":43:41)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_43.cpp":45:33)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_43.cpp":45:50)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_43.cpp":45:15)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_43.cpp":46:27)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_43.cpp":46:9)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_43.cpp":58:20)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_43.cpp":55:1)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_43.cpp":59:1)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_43.cpp":56:1)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_43.cpp":58:5)
#loc41 = loc("/usr/include/string.h":141:1)
#loc42 = loc("/usr/include/string.h":142:14)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_43.cpp":61:1)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_43.cpp":73:1)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_43.cpp":63:5)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_43.cpp":63:12)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_43.cpp":64:12)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_43.cpp":64:5)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_43.cpp":65:5)
#loc50 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_43.cpp":66:5)
#loc51 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_43.cpp":72:5)
#loc52 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_43.cpp":68:9)
#loc53 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_43.cpp":68:45)
#loc54 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_43.cpp":69:9)
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_43.cpp":69:31)
#loc56 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_43.cpp":68:26)
#loc57 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_43.cpp":68:41)
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_43.cpp":70:15)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_43.cpp":70:30)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_43.cpp":70:44)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_43.cpp":71:27)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_43.cpp":71:9)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_43.cpp":76:1)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_43.cpp":80:1)
#loc67 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_43.cpp":77:1)
#loc68 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_43.cpp":79:20)
#loc69 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_43.cpp":79:5)
#loc70 = loc("/usr/include/wchar.h":247:1)
#loc71 = loc("/usr/include/wchar.h":247:51)
#loc72 = loc("../../../testcasesupport/std_testcase_io.h":16:1)
#loc73 = loc("../../../testcasesupport/std_testcase_io.h":16:37)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_43.cpp":82:1)
#loc75 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_43.cpp":94:1)
#loc76 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_43.cpp":84:5)
#loc77 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_43.cpp":84:12)
#loc78 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_43.cpp":85:12)
#loc79 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_43.cpp":85:5)
#loc80 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_43.cpp":86:5)
#loc81 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_43.cpp":87:5)
#loc82 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_43.cpp":93:5)
#loc83 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_43.cpp":89:9)
#loc84 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_43.cpp":89:48)
#loc85 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_43.cpp":90:9)
#loc86 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_43.cpp":90:31)
#loc87 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_43.cpp":89:26)
#loc88 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_43.cpp":89:44)
#loc89 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_43.cpp":91:33)
#loc90 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_43.cpp":91:50)
#loc91 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_43.cpp":91:15)
#loc92 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_43.cpp":92:31)
#loc93 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_43.cpp":92:9)
#loc94 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_43.cpp":96:1)
#loc95 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_43.cpp":100:1)
#loc96 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_43.cpp":98:5)
#loc97 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_43.cpp":99:5)
#loc98 = loc(fused[#loc2, #loc3])
#loc100 = loc(fused[#loc7, #loc1])
#loc101 = loc(fused[#loc8, #loc9])
#loc102 = loc(fused[#loc10, #loc11])
#loc103 = loc(fused[#loc12, #loc13])
#loc104 = loc(fused[#loc14, #loc15])
#loc105 = loc(fused[#loc16, #loc17])
#loc106 = loc(fused[#loc19, #loc18])
#loc107 = loc(fused[#loc21, #loc22])
#loc108 = loc(fused[#loc23, #loc24])
#loc109 = loc(fused[#loc25, #loc26])
#loc110 = loc(fused[#loc35, #loc36])
#loc112 = loc(fused[#loc40, #loc34])
#loc113 = loc(fused[#loc41, #loc42])
#loc114 = loc(fused[#loc43, #loc44])
#loc115 = loc(fused[#loc45, #loc46])
#loc116 = loc(fused[#loc48, #loc47])
#loc117 = loc(fused[#loc50, #loc51])
#loc118 = loc(fused[#loc52, #loc53])
#loc119 = loc(fused[#loc54, #loc55])
#loc120 = loc(fused[#loc63, #loc64])
#loc122 = loc(fused[#loc69, #loc68])
#loc123 = loc(fused[#loc70, #loc71])
#loc124 = loc(fused[#loc72, #loc73])
#loc125 = loc(fused[#loc74, #loc75])
#loc126 = loc(fused[#loc76, #loc77])
#loc127 = loc(fused[#loc79, #loc78])
#loc128 = loc(fused[#loc81, #loc82])
#loc129 = loc(fused[#loc83, #loc84])
#loc130 = loc(fused[#loc85, #loc86])
#loc131 = loc(fused[#loc94, #loc95])
