!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s07/CWE190_Integer_Overflow__unsigned_int_rand_preinc_17.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc137)
  cir.func private @printUnsignedLine(!u32i) loc(#loc138)
  cir.func no_proto @CWE190_Integer_Overflow__unsigned_int_rand_preinc_17_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc140)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["j"] {alignment = 4 : i64} loc(#loc141)
    %2 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc142)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc12)
    %4 = cir.cast(integral, %3 : !s32i), !u32i loc(#loc12)
    cir.store %4, %2 : !u32i, !cir.ptr<!u32i> loc(#loc143)
    cir.scope {
      %5 = cir.const #cir.int<0> : !s32i loc(#loc16)
      cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc145)
      cir.for : cond {
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc18)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc19)
        %8 = cir.cmp(lt, %6, %7) : !s32i, !cir.bool loc(#loc146)
        cir.condition(%8) loc(#loc20)
      } body {
        cir.scope {
          %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc22)
          %7 = cir.const #cir.int<1> : !s32i loc(#loc22)
          %8 = cir.binop(and, %6, %7) : !s32i loc(#loc22)
          %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc22)
          %10 = cir.ternary(%9, true {
            %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc22)
            %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc22)
            %15 = cir.const #cir.int<30> : !s32i loc(#loc22)
            %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc22)
            %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc22)
            %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc22)
            %19 = cir.const #cir.int<15> : !s32i loc(#loc22)
            %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc22)
            %21 = cir.binop(xor, %16, %20) : !u32i loc(#loc22)
            %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc22)
            %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc22)
            %24 = cir.binop(xor, %21, %23) : !u32i loc(#loc22)
            cir.yield %24 : !u32i loc(#loc22)
          }, false {
            %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc22)
            %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc22)
            %15 = cir.const #cir.int<30> : !s32i loc(#loc22)
            %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc22)
            %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc22)
            %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc22)
            %19 = cir.const #cir.int<15> : !s32i loc(#loc22)
            %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc22)
            %21 = cir.binop(xor, %16, %20) : !u32i loc(#loc22)
            %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc22)
            %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc22)
            %24 = cir.binop(xor, %21, %23) : !u32i loc(#loc22)
            %25 = cir.unary(minus, %24) : !u32i, !u32i loc(#loc22)
            %26 = cir.const #cir.int<1> : !s32i loc(#loc22)
            %27 = cir.cast(integral, %26 : !s32i), !u32i loc(#loc22)
            %28 = cir.binop(sub, %25, %27) : !u32i loc(#loc22)
            cir.yield %28 : !u32i loc(#loc22)
          }) : (!cir.bool) -> !u32i loc(#loc22)
          %11 = cir.cast(integral, %10 : !u32i), !s32i loc(#loc22)
          %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc22)
          cir.store %12, %2 : !u32i, !cir.ptr<!u32i> loc(#loc148)
        } loc(#loc147)
        cir.yield loc(#loc15)
      } step {
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc24)
        %7 = cir.unary(inc, %6) nsw : !s32i, !s32i loc(#loc25)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc149)
        cir.yield loc(#loc144)
      } loc(#loc144)
    } loc(#loc144)
    cir.scope {
      %5 = cir.const #cir.int<0> : !s32i loc(#loc28)
      cir.store %5, %1 : !s32i, !cir.ptr<!s32i> loc(#loc151)
      cir.for : cond {
        %6 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc30)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc31)
        %8 = cir.cmp(lt, %6, %7) : !s32i, !cir.bool loc(#loc152)
        cir.condition(%8) loc(#loc32)
      } body {
        cir.scope {
          cir.scope {
            %6 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc155)
            %7 = cir.load %2 : !cir.ptr<!u32i>, !u32i loc(#loc38)
            %8 = cir.unary(inc, %7) : !u32i, !u32i loc(#loc38)
            cir.store %8, %2 : !u32i, !cir.ptr<!u32i> loc(#loc156)
            %9 = cir.load %2 : !cir.ptr<!u32i>, !u32i loc(#loc37)
            cir.store %9, %6 : !u32i, !cir.ptr<!u32i> loc(#loc155)
            %10 = cir.load %6 : !cir.ptr<!u32i>, !u32i loc(#loc40)
            cir.call @printUnsignedLine(%10) : (!u32i) -> () loc(#loc41)
          } loc(#loc154)
        } loc(#loc153)
        cir.yield loc(#loc27)
      } step {
        %6 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc42)
        %7 = cir.unary(inc, %6) nsw : !s32i, !s32i loc(#loc43)
        cir.store %7, %1 : !s32i, !cir.ptr<!s32i> loc(#loc157)
        cir.yield loc(#loc150)
      } loc(#loc150)
    } loc(#loc150)
    cir.return loc(#loc6)
  } loc(#loc139)
  cir.func no_proto @CWE190_Integer_Overflow__unsigned_int_rand_preinc_17_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc159)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc46)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc160)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc48)
    cir.return loc(#loc45)
  } loc(#loc158)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc161)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc52)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc163)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["k"] {alignment = 4 : i64} loc(#loc164)
    %2 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc165)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc60)
    %4 = cir.cast(integral, %3 : !s32i), !u32i loc(#loc60)
    cir.store %4, %2 : !u32i, !cir.ptr<!u32i> loc(#loc166)
    cir.scope {
      %5 = cir.const #cir.int<0> : !s32i loc(#loc64)
      cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc168)
      cir.for : cond {
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc66)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc67)
        %8 = cir.cmp(lt, %6, %7) : !s32i, !cir.bool loc(#loc169)
        cir.condition(%8) loc(#loc68)
      } body {
        cir.scope {
          %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc70)
          %7 = cir.const #cir.int<1> : !s32i loc(#loc70)
          %8 = cir.binop(and, %6, %7) : !s32i loc(#loc70)
          %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc70)
          %10 = cir.ternary(%9, true {
            %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc70)
            %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc70)
            %15 = cir.const #cir.int<30> : !s32i loc(#loc70)
            %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc70)
            %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc70)
            %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc70)
            %19 = cir.const #cir.int<15> : !s32i loc(#loc70)
            %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc70)
            %21 = cir.binop(xor, %16, %20) : !u32i loc(#loc70)
            %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc70)
            %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc70)
            %24 = cir.binop(xor, %21, %23) : !u32i loc(#loc70)
            cir.yield %24 : !u32i loc(#loc70)
          }, false {
            %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc70)
            %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc70)
            %15 = cir.const #cir.int<30> : !s32i loc(#loc70)
            %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc70)
            %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc70)
            %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc70)
            %19 = cir.const #cir.int<15> : !s32i loc(#loc70)
            %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc70)
            %21 = cir.binop(xor, %16, %20) : !u32i loc(#loc70)
            %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc70)
            %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc70)
            %24 = cir.binop(xor, %21, %23) : !u32i loc(#loc70)
            %25 = cir.unary(minus, %24) : !u32i, !u32i loc(#loc70)
            %26 = cir.const #cir.int<1> : !s32i loc(#loc70)
            %27 = cir.cast(integral, %26 : !s32i), !u32i loc(#loc70)
            %28 = cir.binop(sub, %25, %27) : !u32i loc(#loc70)
            cir.yield %28 : !u32i loc(#loc70)
          }) : (!cir.bool) -> !u32i loc(#loc70)
          %11 = cir.cast(integral, %10 : !u32i), !s32i loc(#loc70)
          %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc70)
          cir.store %12, %2 : !u32i, !cir.ptr<!u32i> loc(#loc171)
        } loc(#loc170)
        cir.yield loc(#loc63)
      } step {
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc72)
        %7 = cir.unary(inc, %6) nsw : !s32i, !s32i loc(#loc73)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc172)
        cir.yield loc(#loc167)
      } loc(#loc167)
    } loc(#loc167)
    cir.scope {
      %5 = cir.const #cir.int<0> : !s32i loc(#loc76)
      cir.store %5, %1 : !s32i, !cir.ptr<!s32i> loc(#loc174)
      cir.for : cond {
        %6 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc78)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc79)
        %8 = cir.cmp(lt, %6, %7) : !s32i, !cir.bool loc(#loc175)
        cir.condition(%8) loc(#loc80)
      } body {
        cir.scope {
          cir.scope {
            %6 = cir.load %2 : !cir.ptr<!u32i>, !u32i loc(#loc84)
            %7 = cir.const #cir.int<2147483647> : !s32i loc(#loc85)
            %8 = cir.cast(integral, %7 : !s32i), !u32i loc(#loc85)
            %9 = cir.const #cir.int<2> : !u32i loc(#loc85)
            %10 = cir.binop(mul, %8, %9) : !u32i loc(#loc85)
            %11 = cir.const #cir.int<1> : !u32i loc(#loc85)
            %12 = cir.binop(add, %10, %11) : !u32i loc(#loc85)
            %13 = cir.cmp(lt, %6, %12) : !u32i, !cir.bool loc(#loc178)
            cir.if %13 {
              %14 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc180)
              %15 = cir.load %2 : !cir.ptr<!u32i>, !u32i loc(#loc91)
              %16 = cir.unary(inc, %15) : !u32i, !u32i loc(#loc91)
              cir.store %16, %2 : !u32i, !cir.ptr<!u32i> loc(#loc181)
              %17 = cir.load %2 : !cir.ptr<!u32i>, !u32i loc(#loc90)
              cir.store %17, %14 : !u32i, !cir.ptr<!u32i> loc(#loc180)
              %18 = cir.load %14 : !cir.ptr<!u32i>, !u32i loc(#loc93)
              cir.call @printUnsignedLine(%18) : (!u32i) -> () loc(#loc94)
            } else {
              %14 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc52)
              %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc52)
              cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc95)
            } loc(#loc179)
          } loc(#loc177)
        } loc(#loc176)
        cir.yield loc(#loc75)
      } step {
        %6 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc96)
        %7 = cir.unary(inc, %6) nsw : !s32i, !s32i loc(#loc97)
        cir.store %7, %1 : !s32i, !cir.ptr<!s32i> loc(#loc182)
        cir.yield loc(#loc173)
      } loc(#loc173)
    } loc(#loc173)
    cir.return loc(#loc54)
  } loc(#loc162)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["h"] {alignment = 4 : i64} loc(#loc184)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["j"] {alignment = 4 : i64} loc(#loc185)
    %2 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc186)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc105)
    %4 = cir.cast(integral, %3 : !s32i), !u32i loc(#loc105)
    cir.store %4, %2 : !u32i, !cir.ptr<!u32i> loc(#loc187)
    cir.scope {
      %5 = cir.const #cir.int<0> : !s32i loc(#loc109)
      cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc189)
      cir.for : cond {
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc111)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc112)
        %8 = cir.cmp(lt, %6, %7) : !s32i, !cir.bool loc(#loc190)
        cir.condition(%8) loc(#loc113)
      } body {
        cir.scope {
          %6 = cir.const #cir.int<2> : !s32i loc(#loc115)
          %7 = cir.cast(integral, %6 : !s32i), !u32i loc(#loc115)
          cir.store %7, %2 : !u32i, !cir.ptr<!u32i> loc(#loc192)
        } loc(#loc191)
        cir.yield loc(#loc108)
      } step {
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc117)
        %7 = cir.unary(inc, %6) nsw : !s32i, !s32i loc(#loc118)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc193)
        cir.yield loc(#loc188)
      } loc(#loc188)
    } loc(#loc188)
    cir.scope {
      %5 = cir.const #cir.int<0> : !s32i loc(#loc121)
      cir.store %5, %1 : !s32i, !cir.ptr<!s32i> loc(#loc195)
      cir.for : cond {
        %6 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc123)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc124)
        %8 = cir.cmp(lt, %6, %7) : !s32i, !cir.bool loc(#loc196)
        cir.condition(%8) loc(#loc125)
      } body {
        cir.scope {
          cir.scope {
            %6 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc199)
            %7 = cir.load %2 : !cir.ptr<!u32i>, !u32i loc(#loc131)
            %8 = cir.unary(inc, %7) : !u32i, !u32i loc(#loc131)
            cir.store %8, %2 : !u32i, !cir.ptr<!u32i> loc(#loc200)
            %9 = cir.load %2 : !cir.ptr<!u32i>, !u32i loc(#loc130)
            cir.store %9, %6 : !u32i, !cir.ptr<!u32i> loc(#loc199)
            %10 = cir.load %6 : !cir.ptr<!u32i>, !u32i loc(#loc133)
            cir.call @printUnsignedLine(%10) : (!u32i) -> () loc(#loc134)
          } loc(#loc198)
        } loc(#loc197)
        cir.yield loc(#loc120)
      } step {
        %6 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc135)
        %7 = cir.unary(inc, %6) nsw : !s32i, !s32i loc(#loc136)
        cir.store %7, %1 : !s32i, !cir.ptr<!s32i> loc(#loc201)
        cir.yield loc(#loc194)
      } loc(#loc194)
    } loc(#loc194)
    cir.return loc(#loc99)
  } loc(#loc183)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s07/CWE190_Integer_Overflow__unsigned_int_rand_preinc_17.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":34:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":34:47)
#loc5 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_17.c":22:1)
#loc6 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_17.c":41:1)
#loc7 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_17.c":24:5)
#loc8 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_17.c":24:9)
#loc9 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_17.c":24:11)
#loc10 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_17.c":25:5)
#loc11 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_17.c":25:18)
#loc12 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_17.c":26:12)
#loc13 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_17.c":26:5)
#loc14 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_17.c":27:5)
#loc15 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_17.c":31:5)
#loc16 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_17.c":27:13)
#loc17 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_17.c":27:9)
#loc18 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_17.c":27:16)
#loc19 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_17.c":27:20)
#loc20 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_17.c":27:18)
#loc21 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_17.c":28:5)
#loc22 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_17.c":30:30)
#loc23 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_17.c":30:9)
#loc24 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_17.c":27:24)
#loc25 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_17.c":27:23)
#loc26 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_17.c":32:5)
#loc27 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_17.c":40:5)
#loc28 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_17.c":32:13)
#loc29 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_17.c":32:9)
#loc30 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_17.c":32:16)
#loc31 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_17.c":32:20)
#loc32 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_17.c":32:18)
#loc33 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_17.c":33:5)
#loc34 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_17.c":34:9)
#loc35 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_17.c":39:9)
#loc36 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_17.c":37:13)
#loc37 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_17.c":37:35)
#loc38 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_17.c":36:13)
#loc39 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_17.c":36:15)
#loc40 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_17.c":38:31)
#loc41 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_17.c":38:13)
#loc42 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_17.c":32:24)
#loc43 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_17.c":32:23)
#loc44 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_17.c":96:1)
#loc45 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_17.c":100:1)
#loc46 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_17.c":98:5)
#loc47 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_17.c":98:13)
#loc48 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_17.c":99:5)
#loc49 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_17.c":99:13)
#loc50 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc51 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc52 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_17.c":69:23)
#loc53 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_17.c":48:1)
#loc54 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_17.c":72:1)
#loc55 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_17.c":50:5)
#loc56 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_17.c":50:9)
#loc57 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_17.c":50:11)
#loc58 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_17.c":51:5)
#loc59 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_17.c":51:18)
#loc60 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_17.c":52:12)
#loc61 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_17.c":52:5)
#loc62 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_17.c":53:5)
#loc63 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_17.c":57:5)
#loc64 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_17.c":53:13)
#loc65 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_17.c":53:9)
#loc66 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_17.c":53:16)
#loc67 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_17.c":53:20)
#loc68 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_17.c":53:18)
#loc69 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_17.c":54:5)
#loc70 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_17.c":56:30)
#loc71 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_17.c":56:9)
#loc72 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_17.c":53:24)
#loc73 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_17.c":53:23)
#loc74 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_17.c":58:5)
#loc75 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_17.c":71:5)
#loc76 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_17.c":58:13)
#loc77 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_17.c":58:9)
#loc78 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_17.c":58:16)
#loc79 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_17.c":58:20)
#loc80 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_17.c":58:18)
#loc81 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_17.c":59:5)
#loc82 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_17.c":61:9)
#loc83 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_17.c":70:9)
#loc84 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_17.c":61:13)
#loc85 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_17.c":61:20)
#loc86 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_17.c":62:9)
#loc87 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_17.c":66:9)
#loc88 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_17.c":68:9)
#loc89 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_17.c":64:13)
#loc90 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_17.c":64:35)
#loc91 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_17.c":63:13)
#loc92 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_17.c":63:15)
#loc93 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_17.c":65:31)
#loc94 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_17.c":65:13)
#loc95 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_17.c":69:13)
#loc96 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_17.c":58:24)
#loc97 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_17.c":58:23)
#loc98 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_17.c":75:1)
#loc99 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_17.c":94:1)
#loc100 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_17.c":77:5)
#loc101 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_17.c":77:9)
#loc102 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_17.c":77:11)
#loc103 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_17.c":78:5)
#loc104 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_17.c":78:18)
#loc105 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_17.c":79:12)
#loc106 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_17.c":79:5)
#loc107 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_17.c":80:5)
#loc108 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_17.c":84:5)
#loc109 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_17.c":80:13)
#loc110 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_17.c":80:9)
#loc111 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_17.c":80:16)
#loc112 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_17.c":80:20)
#loc113 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_17.c":80:18)
#loc114 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_17.c":81:5)
#loc115 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_17.c":83:16)
#loc116 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_17.c":83:9)
#loc117 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_17.c":80:24)
#loc118 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_17.c":80:23)
#loc119 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_17.c":85:5)
#loc120 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_17.c":93:5)
#loc121 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_17.c":85:13)
#loc122 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_17.c":85:9)
#loc123 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_17.c":85:16)
#loc124 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_17.c":85:20)
#loc125 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_17.c":85:18)
#loc126 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_17.c":86:5)
#loc127 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_17.c":87:9)
#loc128 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_17.c":92:9)
#loc129 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_17.c":90:13)
#loc130 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_17.c":90:35)
#loc131 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_17.c":89:13)
#loc132 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_17.c":89:15)
#loc133 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_17.c":91:31)
#loc134 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_17.c":91:13)
#loc135 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_17.c":85:24)
#loc136 = loc("CWE190_Integer_Overflow__unsigned_int_rand_preinc_17.c":85:23)
#loc137 = loc(fused[#loc1, #loc2])
#loc138 = loc(fused[#loc3, #loc4])
#loc139 = loc(fused[#loc5, #loc6])
#loc140 = loc(fused[#loc7, #loc8])
#loc141 = loc(fused[#loc7, #loc9])
#loc142 = loc(fused[#loc10, #loc11])
#loc143 = loc(fused[#loc13, #loc12])
#loc144 = loc(fused[#loc14, #loc15])
#loc145 = loc(fused[#loc17, #loc16])
#loc146 = loc(fused[#loc18, #loc19])
#loc147 = loc(fused[#loc21, #loc15])
#loc148 = loc(fused[#loc23, #loc22])
#loc149 = loc(fused[#loc25, #loc24])
#loc150 = loc(fused[#loc26, #loc27])
#loc151 = loc(fused[#loc29, #loc28])
#loc152 = loc(fused[#loc30, #loc31])
#loc153 = loc(fused[#loc33, #loc27])
#loc154 = loc(fused[#loc34, #loc35])
#loc155 = loc(fused[#loc36, #loc37])
#loc156 = loc(fused[#loc38, #loc39])
#loc157 = loc(fused[#loc43, #loc42])
#loc158 = loc(fused[#loc44, #loc45])
#loc159 = loc(fused[#loc46, #loc47])
#loc160 = loc(fused[#loc48, #loc49])
#loc161 = loc(fused[#loc50, #loc51])
#loc162 = loc(fused[#loc53, #loc54])
#loc163 = loc(fused[#loc55, #loc56])
#loc164 = loc(fused[#loc55, #loc57])
#loc165 = loc(fused[#loc58, #loc59])
#loc166 = loc(fused[#loc61, #loc60])
#loc167 = loc(fused[#loc62, #loc63])
#loc168 = loc(fused[#loc65, #loc64])
#loc169 = loc(fused[#loc66, #loc67])
#loc170 = loc(fused[#loc69, #loc63])
#loc171 = loc(fused[#loc71, #loc70])
#loc172 = loc(fused[#loc73, #loc72])
#loc173 = loc(fused[#loc74, #loc75])
#loc174 = loc(fused[#loc77, #loc76])
#loc175 = loc(fused[#loc78, #loc79])
#loc176 = loc(fused[#loc81, #loc75])
#loc177 = loc(fused[#loc82, #loc83])
#loc178 = loc(fused[#loc84, #loc85])
#loc179 = loc(fused[#loc86, #loc87, #loc88, #loc83])
#loc180 = loc(fused[#loc89, #loc90])
#loc181 = loc(fused[#loc91, #loc92])
#loc182 = loc(fused[#loc97, #loc96])
#loc183 = loc(fused[#loc98, #loc99])
#loc184 = loc(fused[#loc100, #loc101])
#loc185 = loc(fused[#loc100, #loc102])
#loc186 = loc(fused[#loc103, #loc104])
#loc187 = loc(fused[#loc106, #loc105])
#loc188 = loc(fused[#loc107, #loc108])
#loc189 = loc(fused[#loc110, #loc109])
#loc190 = loc(fused[#loc111, #loc112])
#loc191 = loc(fused[#loc114, #loc108])
#loc192 = loc(fused[#loc116, #loc115])
#loc193 = loc(fused[#loc118, #loc117])
#loc194 = loc(fused[#loc119, #loc120])
#loc195 = loc(fused[#loc122, #loc121])
#loc196 = loc(fused[#loc123, #loc124])
#loc197 = loc(fused[#loc126, #loc120])
#loc198 = loc(fused[#loc127, #loc128])
#loc199 = loc(fused[#loc129, #loc130])
#loc200 = loc(fused[#loc131, #loc132])
#loc201 = loc(fused[#loc136, #loc135])
