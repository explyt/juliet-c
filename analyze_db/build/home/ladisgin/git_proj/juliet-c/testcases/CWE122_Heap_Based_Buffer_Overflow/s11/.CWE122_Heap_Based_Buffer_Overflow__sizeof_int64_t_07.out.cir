!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_07.c":106:10)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_07.c":106:14)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_07.c":106:20)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_07.c":106:32)
#loc172 = loc(fused[#loc61, #loc62])
#loc173 = loc(fused[#loc63, #loc64])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_07.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.global "private" internal dsolocal @staticFive = #cir.int<5> : !s32i {alignment = 4 : i64} loc(#loc147)
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc148)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc149)
  cir.func private @printLongLongLine(!s64i) loc(#loc150)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc151)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_07_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["data"] {alignment = 8 : i64} loc(#loc153)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc15)
    cir.store %1, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc154)
    cir.scope {
      %7 = cir.get_global @staticFive : !cir.ptr<!s32i> loc(#loc147)
      %8 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc19)
      %9 = cir.const #cir.int<5> : !s32i loc(#loc20)
      %10 = cir.cmp(eq, %8, %9) : !s32i, !cir.bool loc(#loc156)
      cir.if %10 {
        %11 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc22)
        %12 = cir.const #cir.int<8> : !u64i loc(#loc158)
        %13 = cir.call @malloc(%12) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc22)
        %14 = cir.cast(bitcast, %13 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc159)
        cir.store %14, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc160)
        cir.scope {
          %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc29)
          %18 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc30)
          %19 = cir.cast(bitcast, %18 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc30)
          %20 = cir.cmp(eq, %17, %19) : !cir.ptr<!s64i>, !cir.bool loc(#loc162)
          cir.if %20 {
            %21 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc32)
            %22 = cir.const #cir.int<1> : !s32i loc(#loc33)
            %23 = cir.unary(minus, %22) : !s32i, !s32i loc(#loc34)
            cir.call @exit(%23) : (!s32i) -> () extra(#fn_attr) loc(#loc32)
          } loc(#loc163)
        } loc(#loc161)
        %15 = cir.const #cir.int<2147483643> : !s64i loc(#loc35)
        %16 = cir.load deref %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc36)
        cir.store %15, %16 : !s64i, !cir.ptr<!s64i> loc(#loc164)
      } loc(#loc157)
    } loc(#loc155)
    %2 = cir.load deref %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc38)
    %3 = cir.load %2 : !cir.ptr<!s64i>, !s64i loc(#loc39)
    cir.call @printLongLongLine(%3) : (!s64i) -> () loc(#loc40)
    %4 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc41)
    %5 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc42)
    %6 = cir.cast(bitcast, %5 : !cir.ptr<!s64i>), !cir.ptr<!void> loc(#loc42)
    cir.call @free(%6) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc41)
    cir.return loc(#loc12)
  } loc(#loc152)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_07_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc166)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc45)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc167)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc47)
    cir.return loc(#loc44)
  } loc(#loc165)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc168)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc169)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc170)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc55)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc56)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc57)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc58)
  cir.func @main(%arg0: !s32i loc(fused[#loc61, #loc62]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc63, #loc64])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc172)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc173)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc60)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc65)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc65)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc66)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc67)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc67)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc68)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc55)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc55)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc69)
    %8 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_07_good : !cir.ptr<!cir.func<!void ()>> loc(#loc174)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_07_good() : () -> () loc(#loc70)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc56)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc56)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc72)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc57)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc57)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc73)
    %13 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_07_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc175)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_07_bad() : () -> () loc(#loc74)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc58)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc58)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc76)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc77)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc176)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc176)
    cir.return %17 : !s32i loc(#loc176)
  } loc(#loc171)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc79)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["data"] {alignment = 8 : i64} loc(#loc178)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc84)
    cir.store %1, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc179)
    cir.scope {
      %7 = cir.get_global @staticFive : !cir.ptr<!s32i> loc(#loc147)
      %8 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc88)
      %9 = cir.const #cir.int<5> : !s32i loc(#loc89)
      %10 = cir.cmp(ne, %8, %9) : !s32i, !cir.bool loc(#loc181)
      cir.if %10 {
        %11 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc79)
        %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc79)
        cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc93)
      } else {
        %11 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc94)
        %12 = cir.const #cir.int<8> : !u64i loc(#loc183)
        %13 = cir.call @malloc(%12) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc94)
        %14 = cir.cast(bitcast, %13 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc184)
        cir.store %14, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc185)
        cir.scope {
          %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc101)
          %18 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc102)
          %19 = cir.cast(bitcast, %18 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc102)
          %20 = cir.cmp(eq, %17, %19) : !cir.ptr<!s64i>, !cir.bool loc(#loc187)
          cir.if %20 {
            %21 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc104)
            %22 = cir.const #cir.int<1> : !s32i loc(#loc105)
            %23 = cir.unary(minus, %22) : !s32i, !s32i loc(#loc106)
            cir.call @exit(%23) : (!s32i) -> () extra(#fn_attr) loc(#loc104)
          } loc(#loc188)
        } loc(#loc186)
        %15 = cir.const #cir.int<2147483643> : !s64i loc(#loc107)
        %16 = cir.load deref %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc108)
        cir.store %15, %16 : !s64i, !cir.ptr<!s64i> loc(#loc189)
      } loc(#loc182)
    } loc(#loc180)
    %2 = cir.load deref %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc110)
    %3 = cir.load %2 : !cir.ptr<!s64i>, !s64i loc(#loc111)
    cir.call @printLongLongLine(%3) : (!s64i) -> () loc(#loc112)
    %4 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc113)
    %5 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc114)
    %6 = cir.cast(bitcast, %5 : !cir.ptr<!s64i>), !cir.ptr<!void> loc(#loc114)
    cir.call @free(%6) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc113)
    cir.return loc(#loc81)
  } loc(#loc177)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["data"] {alignment = 8 : i64} loc(#loc191)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc119)
    cir.store %1, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc192)
    cir.scope {
      %7 = cir.get_global @staticFive : !cir.ptr<!s32i> loc(#loc147)
      %8 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc123)
      %9 = cir.const #cir.int<5> : !s32i loc(#loc124)
      %10 = cir.cmp(eq, %8, %9) : !s32i, !cir.bool loc(#loc194)
      cir.if %10 {
        %11 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc126)
        %12 = cir.const #cir.int<8> : !u64i loc(#loc196)
        %13 = cir.call @malloc(%12) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc126)
        %14 = cir.cast(bitcast, %13 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc197)
        cir.store %14, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc198)
        cir.scope {
          %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc133)
          %18 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc134)
          %19 = cir.cast(bitcast, %18 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc134)
          %20 = cir.cmp(eq, %17, %19) : !cir.ptr<!s64i>, !cir.bool loc(#loc200)
          cir.if %20 {
            %21 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc136)
            %22 = cir.const #cir.int<1> : !s32i loc(#loc137)
            %23 = cir.unary(minus, %22) : !s32i, !s32i loc(#loc138)
            cir.call @exit(%23) : (!s32i) -> () extra(#fn_attr) loc(#loc136)
          } loc(#loc201)
        } loc(#loc199)
        %15 = cir.const #cir.int<2147483643> : !s64i loc(#loc139)
        %16 = cir.load deref %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc140)
        cir.store %15, %16 : !s64i, !cir.ptr<!s64i> loc(#loc202)
      } loc(#loc195)
    } loc(#loc193)
    %2 = cir.load deref %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc142)
    %3 = cir.load %2 : !cir.ptr<!s64i>, !s64i loc(#loc143)
    cir.call @printLongLongLine(%3) : (!s64i) -> () loc(#loc144)
    %4 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc145)
    %5 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc146)
    %6 = cir.cast(bitcast, %5 : !cir.ptr<!s64i>), !cir.ptr<!void> loc(#loc146)
    cir.call @free(%6) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc145)
    cir.return loc(#loc116)
  } loc(#loc190)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_07.c":0:0)
#loc1 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_07.c":23:1)
#loc2 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_07.c":23:25)
#loc3 = loc("/usr/include/stdlib.h":672:1)
#loc4 = loc("/usr/include/stdlib.h":672:45)
#loc5 = loc("/usr/include/stdlib.h":756:1)
#loc6 = loc("/usr/include/stdlib.h":756:70)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":26:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":26:49)
#loc9 = loc("/usr/include/stdlib.h":687:1)
#loc10 = loc("/usr/include/stdlib.h":687:32)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_07.c":27:1)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_07.c":43:1)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_07.c":29:5)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_07.c":29:15)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_07.c":31:12)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_07.c":31:5)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_07.c":32:5)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_07.c":39:5)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_07.c":32:8)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_07.c":32:20)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_07.c":33:5)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_07.c":36:27)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_07.c":36:34)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_07.c":36:45)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_07.c":36:46)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_07.c":36:9)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_07.c":37:9)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_07.c":37:37)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_07.c":37:13)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_07.c":37:21)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_07.c":37:27)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_07.c":37:28)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_07.c":37:34)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_07.c":37:33)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_07.c":38:17)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_07.c":38:10)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_07.c":38:9)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_07.c":41:24)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_07.c":41:23)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_07.c":41:5)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_07.c":42:5)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_07.c":42:10)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_07.c":90:1)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_07.c":94:1)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_07.c":92:5)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_07.c":92:14)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_07.c":93:5)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_07.c":93:14)
#loc49 = loc("/usr/include/stdlib.h":575:1)
#loc50 = loc("/usr/include/stdlib.h":575:41)
#loc51 = loc("/usr/include/time.h":76:1)
#loc52 = loc("/usr/include/time.h":76:38)
#loc53 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc54 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_07.c":111:15)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_07.c":113:15)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_07.c":116:15)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_07.c":118:15)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_07.c":106:1)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_07.c":121:1)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_07.c":107:1)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_07.c":109:27)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_07.c":109:22)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_07.c":109:5)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_07.c":111:5)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_07.c":112:5)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_07.c":112:63)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_07.c":113:5)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_07.c":116:5)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_07.c":117:5)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_07.c":117:62)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_07.c":118:5)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_07.c":120:12)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_07.c":120:5)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_07.c":58:19)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_07.c":50:1)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_07.c":70:1)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_07.c":52:5)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_07.c":52:15)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_07.c":54:12)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_07.c":54:5)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_07.c":55:5)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_07.c":66:5)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_07.c":55:8)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_07.c":55:20)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_07.c":56:5)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_07.c":59:5)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_07.c":61:5)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_07.c":58:9)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_07.c":63:27)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_07.c":63:34)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_07.c":63:46)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_07.c":63:47)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_07.c":63:9)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_07.c":64:9)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_07.c":64:37)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_07.c":64:13)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_07.c":64:21)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_07.c":64:27)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_07.c":64:28)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_07.c":64:34)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_07.c":64:33)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_07.c":65:17)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_07.c":65:10)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_07.c":65:9)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_07.c":68:24)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_07.c":68:23)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_07.c":68:5)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_07.c":69:5)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_07.c":69:10)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_07.c":73:1)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_07.c":88:1)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_07.c":75:5)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_07.c":75:15)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_07.c":77:12)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_07.c":77:5)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_07.c":78:5)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_07.c":84:5)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_07.c":78:8)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_07.c":78:20)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_07.c":79:5)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_07.c":81:27)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_07.c":81:34)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_07.c":81:46)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_07.c":81:47)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_07.c":81:9)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_07.c":82:9)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_07.c":82:37)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_07.c":82:13)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_07.c":82:21)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_07.c":82:27)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_07.c":82:28)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_07.c":82:34)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_07.c":82:33)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_07.c":83:17)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_07.c":83:10)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_07.c":83:9)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_07.c":86:24)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_07.c":86:23)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_07.c":86:5)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_07.c":87:5)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_07.c":87:10)
#loc147 = loc(fused[#loc1, #loc2])
#loc148 = loc(fused[#loc3, #loc4])
#loc149 = loc(fused[#loc5, #loc6])
#loc150 = loc(fused[#loc7, #loc8])
#loc151 = loc(fused[#loc9, #loc10])
#loc152 = loc(fused[#loc11, #loc12])
#loc153 = loc(fused[#loc13, #loc14])
#loc154 = loc(fused[#loc16, #loc15])
#loc155 = loc(fused[#loc17, #loc18])
#loc156 = loc(fused[#loc19, #loc20])
#loc157 = loc(fused[#loc21, #loc18])
#loc158 = loc(fused[#loc23, #loc24])
#loc159 = loc(fused[#loc22, #loc25])
#loc160 = loc(fused[#loc26, #loc25])
#loc161 = loc(fused[#loc27, #loc28])
#loc162 = loc(fused[#loc29, #loc30])
#loc163 = loc(fused[#loc31, #loc28])
#loc164 = loc(fused[#loc37, #loc35])
#loc165 = loc(fused[#loc43, #loc44])
#loc166 = loc(fused[#loc45, #loc46])
#loc167 = loc(fused[#loc47, #loc48])
#loc168 = loc(fused[#loc49, #loc50])
#loc169 = loc(fused[#loc51, #loc52])
#loc170 = loc(fused[#loc53, #loc54])
#loc171 = loc(fused[#loc59, #loc60])
#loc174 = loc(fused[#loc70, #loc71])
#loc175 = loc(fused[#loc74, #loc75])
#loc176 = loc(fused[#loc78, #loc77])
#loc177 = loc(fused[#loc80, #loc81])
#loc178 = loc(fused[#loc82, #loc83])
#loc179 = loc(fused[#loc85, #loc84])
#loc180 = loc(fused[#loc86, #loc87])
#loc181 = loc(fused[#loc88, #loc89])
#loc182 = loc(fused[#loc90, #loc91, #loc92, #loc87])
#loc183 = loc(fused[#loc95, #loc96])
#loc184 = loc(fused[#loc94, #loc97])
#loc185 = loc(fused[#loc98, #loc97])
#loc186 = loc(fused[#loc99, #loc100])
#loc187 = loc(fused[#loc101, #loc102])
#loc188 = loc(fused[#loc103, #loc100])
#loc189 = loc(fused[#loc109, #loc107])
#loc190 = loc(fused[#loc115, #loc116])
#loc191 = loc(fused[#loc117, #loc118])
#loc192 = loc(fused[#loc120, #loc119])
#loc193 = loc(fused[#loc121, #loc122])
#loc194 = loc(fused[#loc123, #loc124])
#loc195 = loc(fused[#loc125, #loc122])
#loc196 = loc(fused[#loc127, #loc128])
#loc197 = loc(fused[#loc126, #loc129])
#loc198 = loc(fused[#loc130, #loc129])
#loc199 = loc(fused[#loc131, #loc132])
#loc200 = loc(fused[#loc133, #loc134])
#loc201 = loc(fused[#loc135, #loc132])
#loc202 = loc(fused[#loc141, #loc139])
