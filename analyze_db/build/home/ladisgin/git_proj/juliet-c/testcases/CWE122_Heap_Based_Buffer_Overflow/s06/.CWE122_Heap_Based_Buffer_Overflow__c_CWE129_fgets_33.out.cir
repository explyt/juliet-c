!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.struct<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.struct<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.struct<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone})>
#loc287 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":190:10)
#loc288 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":190:14)
#loc289 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":190:20)
#loc290 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":190:32)
#true = #cir.bool<true> : !cir.bool
#loc413 = loc(fused[#loc287, #loc288])
#loc414 = loc(fused[#loc289, #loc290])
!ty__IO_FILE = !cir.struct<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!cir.struct<struct "_IO_FILE">>>, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @fgets(!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc303)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc304)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc305)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc306)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"fgets() failed.\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc9)
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc307)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc308)
  cir.func private @printIntLine(!s32i) loc(#loc309)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"ERROR: Array index is negative.\00" : !cir.array<!s8i x 32>> : !cir.array<!s8i x 32> {alignment = 1 : i64} loc(#loc16)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc310)
  cir.func @_ZN52CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_333badEv() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc312)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataRef", init, const] {alignment = 8 : i64} loc(#loc313)
    cir.store %0, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc24)
    %2 = cir.const #cir.int<1> : !s32i loc(#loc25)
    %3 = cir.unary(minus, %2) : !s32i, !s32i loc(#loc26)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc314)
    cir.scope {
      %4 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc316)
      %5 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc316)
      cir.store %5, %4 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc316)
      cir.scope {
        %6 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc34)
        %7 = cir.const #cir.int<3> : !s32i loc(#loc35)
        %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc35)
        %9 = cir.const #cir.int<4> : !u64i loc(#loc35)
        %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc35)
        %11 = cir.const #cir.int<2> : !s32i loc(#loc35)
        %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc35)
        %13 = cir.binop(add, %10, %12) : !u64i loc(#loc35)
        %14 = cir.cast(integral, %13 : !u64i), !s32i loc(#loc35)
        %15 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc304)
        %16 = cir.load %15 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc36)
        %17 = cir.call @fgets(%6, %14, %16) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc37)
        %18 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc38)
        %19 = cir.cmp(ne, %17, %18) : !cir.ptr<!s8i>, !cir.bool loc(#loc318)
        cir.if %19 {
          %20 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc42)
          %21 = cir.call @atoi(%20) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc43)
          cir.store %21, %0 : !s32i, !cir.ptr<!s32i> loc(#loc320)
        } else {
          %20 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc9)
          %21 = cir.cast(array_to_ptrdecay, %20 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc9)
          cir.call @printLine(%21) : (!cir.ptr<!s8i>) -> () loc(#loc46)
        } loc(#loc319)
      } loc(#loc317)
    } loc(#loc315)
    cir.scope {
      %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc322)
      %5 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc50)
      %6 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc50)
      cir.store %6, %4 : !s32i, !cir.ptr<!s32i> loc(#loc322)
      cir.scope {
        %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc324)
        %8 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc325)
        %9 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc57)
        %10 = cir.const #cir.int<10> : !s32i loc(#loc58)
        %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc58)
        %12 = cir.const #cir.int<4> : !u64i loc(#loc326)
        %13 = cir.binop(mul, %11, %12) : !u64i loc(#loc327)
        %14 = cir.call @malloc(%13) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc57)
        %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc328)
        cir.store %15, %8 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc325)
        cir.scope {
          %19 = cir.load %8 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc63)
          %20 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc64)
          %21 = cir.cmp(eq, %19, %20) : !cir.ptr<!s32i>, !cir.bool loc(#loc330)
          cir.if %21 {
            %22 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc66)
            %23 = cir.const #cir.int<1> : !s32i loc(#loc67)
            %24 = cir.unary(minus, %23) : !s32i, !s32i loc(#loc68)
            cir.call @exit(%24) : (!s32i) -> () extra(#fn_attr) loc(#loc66)
          } loc(#loc331)
        } loc(#loc329)
        cir.scope {
          %19 = cir.const #cir.int<0> : !s32i loc(#loc71)
          cir.store %19, %7 : !s32i, !cir.ptr<!s32i> loc(#loc333)
          cir.for : cond {
            %20 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc73)
            %21 = cir.const #cir.int<10> : !s32i loc(#loc74)
            %22 = cir.cmp(lt, %20, %21) : !s32i, !cir.bool loc(#loc334)
            cir.condition(%22) loc(#loc334)
          } body {
            %20 = cir.const #cir.int<0> : !s32i loc(#loc75)
            %21 = cir.load %8 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc76)
            %22 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc77)
            %23 = cir.ptr_stride(%21 : !cir.ptr<!s32i>, %22 : !s32i), !cir.ptr<!s32i> loc(#loc78)
            cir.store %20, %23 : !s32i, !cir.ptr<!s32i> loc(#loc335)
            cir.yield loc(#loc70)
          } step {
            %20 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc79)
            %21 = cir.unary(inc, %20) : !s32i, !s32i loc(#loc80)
            cir.store %21, %7 : !s32i, !cir.ptr<!s32i> loc(#loc336)
            cir.yield loc(#loc332)
          } loc(#loc332)
        } loc(#loc332)
        cir.scope {
          %19 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc83)
          %20 = cir.const #cir.int<0> : !s32i loc(#loc84)
          %21 = cir.cmp(ge, %19, %20) : !s32i, !cir.bool loc(#loc338)
          cir.if %21 {
            %22 = cir.const #cir.int<1> : !s32i loc(#loc88)
            %23 = cir.load %8 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc89)
            %24 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc90)
            %25 = cir.ptr_stride(%23 : !cir.ptr<!s32i>, %24 : !s32i), !cir.ptr<!s32i> loc(#loc91)
            cir.store %22, %25 : !s32i, !cir.ptr<!s32i> loc(#loc340)
            cir.scope {
              %26 = cir.const #cir.int<0> : !s32i loc(#loc94)
              cir.store %26, %7 : !s32i, !cir.ptr<!s32i> loc(#loc342)
              cir.for : cond {
                %27 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc96)
                %28 = cir.const #cir.int<10> : !s32i loc(#loc97)
                %29 = cir.cmp(lt, %27, %28) : !s32i, !cir.bool loc(#loc343)
                cir.condition(%29) loc(#loc343)
              } body {
                %27 = cir.load %8 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc98)
                %28 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc99)
                %29 = cir.ptr_stride(%27 : !cir.ptr<!s32i>, %28 : !s32i), !cir.ptr<!s32i> loc(#loc100)
                %30 = cir.load %29 : !cir.ptr<!s32i>, !s32i loc(#loc98)
                cir.call @printIntLine(%30) : (!s32i) -> () loc(#loc101)
                cir.yield loc(#loc93)
              } step {
                %27 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc102)
                %28 = cir.unary(inc, %27) : !s32i, !s32i loc(#loc103)
                cir.store %28, %7 : !s32i, !cir.ptr<!s32i> loc(#loc344)
                cir.yield loc(#loc341)
              } loc(#loc341)
            } loc(#loc341)
          } else {
            %22 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc16)
            %23 = cir.cast(array_to_ptrdecay, %22 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc16)
            cir.call @printLine(%23) : (!cir.ptr<!s8i>) -> () loc(#loc104)
          } loc(#loc339)
        } loc(#loc337)
        %16 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc105)
        %17 = cir.load %8 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc106)
        %18 = cir.cast(bitcast, %17 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc106)
        cir.call @free(%18) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc105)
      } loc(#loc323)
    } loc(#loc321)
    cir.return loc(#loc20)
  } loc(#loc311)
  cir.func internal private @_ZN52CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33L7goodG2BEv() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc346)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataRef", init, const] {alignment = 8 : i64} loc(#loc347)
    cir.store %0, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc112)
    %2 = cir.const #cir.int<1> : !s32i loc(#loc113)
    %3 = cir.unary(minus, %2) : !s32i, !s32i loc(#loc114)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc348)
    %4 = cir.const #cir.int<7> : !s32i loc(#loc116)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc349)
    cir.scope {
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc351)
      %6 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc121)
      %7 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc121)
      cir.store %7, %5 : !s32i, !cir.ptr<!s32i> loc(#loc351)
      cir.scope {
        %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc353)
        %9 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc354)
        %10 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc128)
        %11 = cir.const #cir.int<10> : !s32i loc(#loc129)
        %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc129)
        %13 = cir.const #cir.int<4> : !u64i loc(#loc355)
        %14 = cir.binop(mul, %12, %13) : !u64i loc(#loc356)
        %15 = cir.call @malloc(%14) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc128)
        %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc357)
        cir.store %16, %9 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc354)
        cir.scope {
          %20 = cir.load %9 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc134)
          %21 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc135)
          %22 = cir.cmp(eq, %20, %21) : !cir.ptr<!s32i>, !cir.bool loc(#loc359)
          cir.if %22 {
            %23 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc137)
            %24 = cir.const #cir.int<1> : !s32i loc(#loc138)
            %25 = cir.unary(minus, %24) : !s32i, !s32i loc(#loc139)
            cir.call @exit(%25) : (!s32i) -> () extra(#fn_attr) loc(#loc137)
          } loc(#loc360)
        } loc(#loc358)
        cir.scope {
          %20 = cir.const #cir.int<0> : !s32i loc(#loc142)
          cir.store %20, %8 : !s32i, !cir.ptr<!s32i> loc(#loc362)
          cir.for : cond {
            %21 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc144)
            %22 = cir.const #cir.int<10> : !s32i loc(#loc145)
            %23 = cir.cmp(lt, %21, %22) : !s32i, !cir.bool loc(#loc363)
            cir.condition(%23) loc(#loc363)
          } body {
            %21 = cir.const #cir.int<0> : !s32i loc(#loc146)
            %22 = cir.load %9 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc147)
            %23 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc148)
            %24 = cir.ptr_stride(%22 : !cir.ptr<!s32i>, %23 : !s32i), !cir.ptr<!s32i> loc(#loc149)
            cir.store %21, %24 : !s32i, !cir.ptr<!s32i> loc(#loc364)
            cir.yield loc(#loc141)
          } step {
            %21 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc150)
            %22 = cir.unary(inc, %21) : !s32i, !s32i loc(#loc151)
            cir.store %22, %8 : !s32i, !cir.ptr<!s32i> loc(#loc365)
            cir.yield loc(#loc361)
          } loc(#loc361)
        } loc(#loc361)
        cir.scope {
          %20 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc154)
          %21 = cir.const #cir.int<0> : !s32i loc(#loc155)
          %22 = cir.cmp(ge, %20, %21) : !s32i, !cir.bool loc(#loc367)
          cir.if %22 {
            %23 = cir.const #cir.int<1> : !s32i loc(#loc159)
            %24 = cir.load %9 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc160)
            %25 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc161)
            %26 = cir.ptr_stride(%24 : !cir.ptr<!s32i>, %25 : !s32i), !cir.ptr<!s32i> loc(#loc162)
            cir.store %23, %26 : !s32i, !cir.ptr<!s32i> loc(#loc369)
            cir.scope {
              %27 = cir.const #cir.int<0> : !s32i loc(#loc165)
              cir.store %27, %8 : !s32i, !cir.ptr<!s32i> loc(#loc371)
              cir.for : cond {
                %28 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc167)
                %29 = cir.const #cir.int<10> : !s32i loc(#loc168)
                %30 = cir.cmp(lt, %28, %29) : !s32i, !cir.bool loc(#loc372)
                cir.condition(%30) loc(#loc372)
              } body {
                %28 = cir.load %9 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc169)
                %29 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc170)
                %30 = cir.ptr_stride(%28 : !cir.ptr<!s32i>, %29 : !s32i), !cir.ptr<!s32i> loc(#loc171)
                %31 = cir.load %30 : !cir.ptr<!s32i>, !s32i loc(#loc169)
                cir.call @printIntLine(%31) : (!s32i) -> () loc(#loc172)
                cir.yield loc(#loc164)
              } step {
                %28 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc173)
                %29 = cir.unary(inc, %28) : !s32i, !s32i loc(#loc174)
                cir.store %29, %8 : !s32i, !cir.ptr<!s32i> loc(#loc373)
                cir.yield loc(#loc370)
              } loc(#loc370)
            } loc(#loc370)
          } else {
            %23 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc175)
            %24 = cir.cast(array_to_ptrdecay, %23 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc175)
            cir.call @printLine(%24) : (!cir.ptr<!s8i>) -> () loc(#loc176)
          } loc(#loc368)
        } loc(#loc366)
        %17 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc177)
        %18 = cir.load %9 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc178)
        %19 = cir.cast(bitcast, %18 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc178)
        cir.call @free(%19) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc177)
      } loc(#loc352)
    } loc(#loc350)
    cir.return loc(#loc108)
  } loc(#loc345)
  cir.global "private" constant cir_private dsolocal @".str.6" = #cir.const_array<"ERROR: Array index is out-of-bounds\00" : !cir.array<!s8i x 36>> : !cir.array<!s8i x 36> {alignment = 1 : i64} loc(#loc179)
  cir.func internal private @_ZN52CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33L7goodB2GEv() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc375)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataRef", init, const] {alignment = 8 : i64} loc(#loc376)
    cir.store %0, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc185)
    %2 = cir.const #cir.int<1> : !s32i loc(#loc186)
    %3 = cir.unary(minus, %2) : !s32i, !s32i loc(#loc187)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc377)
    cir.scope {
      %4 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc379)
      %5 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc379)
      cir.store %5, %4 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc379)
      cir.scope {
        %6 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc195)
        %7 = cir.const #cir.int<3> : !s32i loc(#loc196)
        %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc196)
        %9 = cir.const #cir.int<4> : !u64i loc(#loc196)
        %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc196)
        %11 = cir.const #cir.int<2> : !s32i loc(#loc196)
        %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc196)
        %13 = cir.binop(add, %10, %12) : !u64i loc(#loc196)
        %14 = cir.cast(integral, %13 : !u64i), !s32i loc(#loc196)
        %15 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc304)
        %16 = cir.load %15 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc197)
        %17 = cir.call @fgets(%6, %14, %16) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc198)
        %18 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc199)
        %19 = cir.cmp(ne, %17, %18) : !cir.ptr<!s8i>, !cir.bool loc(#loc381)
        cir.if %19 {
          %20 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc203)
          %21 = cir.call @atoi(%20) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc204)
          cir.store %21, %0 : !s32i, !cir.ptr<!s32i> loc(#loc383)
        } else {
          %20 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc207)
          %21 = cir.cast(array_to_ptrdecay, %20 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc207)
          cir.call @printLine(%21) : (!cir.ptr<!s8i>) -> () loc(#loc208)
        } loc(#loc382)
      } loc(#loc380)
    } loc(#loc378)
    cir.scope {
      %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc385)
      %5 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc212)
      %6 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc212)
      cir.store %6, %4 : !s32i, !cir.ptr<!s32i> loc(#loc385)
      cir.scope {
        %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc387)
        %8 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc388)
        %9 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc219)
        %10 = cir.const #cir.int<10> : !s32i loc(#loc220)
        %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc220)
        %12 = cir.const #cir.int<4> : !u64i loc(#loc389)
        %13 = cir.binop(mul, %11, %12) : !u64i loc(#loc390)
        %14 = cir.call @malloc(%13) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc219)
        %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc391)
        cir.store %15, %8 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc388)
        cir.scope {
          %19 = cir.load %8 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc225)
          %20 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc226)
          %21 = cir.cmp(eq, %19, %20) : !cir.ptr<!s32i>, !cir.bool loc(#loc393)
          cir.if %21 {
            %22 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc228)
            %23 = cir.const #cir.int<1> : !s32i loc(#loc229)
            %24 = cir.unary(minus, %23) : !s32i, !s32i loc(#loc230)
            cir.call @exit(%24) : (!s32i) -> () extra(#fn_attr) loc(#loc228)
          } loc(#loc394)
        } loc(#loc392)
        cir.scope {
          %19 = cir.const #cir.int<0> : !s32i loc(#loc233)
          cir.store %19, %7 : !s32i, !cir.ptr<!s32i> loc(#loc396)
          cir.for : cond {
            %20 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc235)
            %21 = cir.const #cir.int<10> : !s32i loc(#loc236)
            %22 = cir.cmp(lt, %20, %21) : !s32i, !cir.bool loc(#loc397)
            cir.condition(%22) loc(#loc397)
          } body {
            %20 = cir.const #cir.int<0> : !s32i loc(#loc237)
            %21 = cir.load %8 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc238)
            %22 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc239)
            %23 = cir.ptr_stride(%21 : !cir.ptr<!s32i>, %22 : !s32i), !cir.ptr<!s32i> loc(#loc240)
            cir.store %20, %23 : !s32i, !cir.ptr<!s32i> loc(#loc398)
            cir.yield loc(#loc232)
          } step {
            %20 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc241)
            %21 = cir.unary(inc, %20) : !s32i, !s32i loc(#loc242)
            cir.store %21, %7 : !s32i, !cir.ptr<!s32i> loc(#loc399)
            cir.yield loc(#loc395)
          } loc(#loc395)
        } loc(#loc395)
        cir.scope {
          %19 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc245)
          %20 = cir.const #cir.int<0> : !s32i loc(#loc246)
          %21 = cir.cmp(ge, %19, %20) : !s32i, !cir.bool loc(#loc401)
          %22 = cir.ternary(%21, true {
            %23 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc248)
            %24 = cir.const #cir.int<10> : !s32i loc(#loc249)
            %25 = cir.cmp(lt, %23, %24) : !s32i, !cir.bool loc(#loc402)
            %26 = cir.ternary(%25, true {
              %27 = cir.const #true loc(#loc247)
              cir.yield %27 : !cir.bool loc(#loc247)
            }, false {
              %27 = cir.const #false loc(#loc247)
              cir.yield %27 : !cir.bool loc(#loc247)
            }) : (!cir.bool) -> !cir.bool loc(#loc247)
            cir.yield %26 : !cir.bool loc(#loc247)
          }, false {
            %23 = cir.const #false loc(#loc247)
            cir.yield %23 : !cir.bool loc(#loc247)
          }) : (!cir.bool) -> !cir.bool loc(#loc247)
          cir.if %22 {
            %23 = cir.const #cir.int<1> : !s32i loc(#loc254)
            %24 = cir.load %8 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc255)
            %25 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc256)
            %26 = cir.ptr_stride(%24 : !cir.ptr<!s32i>, %25 : !s32i), !cir.ptr<!s32i> loc(#loc257)
            cir.store %23, %26 : !s32i, !cir.ptr<!s32i> loc(#loc404)
            cir.scope {
              %27 = cir.const #cir.int<0> : !s32i loc(#loc260)
              cir.store %27, %7 : !s32i, !cir.ptr<!s32i> loc(#loc406)
              cir.for : cond {
                %28 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc262)
                %29 = cir.const #cir.int<10> : !s32i loc(#loc263)
                %30 = cir.cmp(lt, %28, %29) : !s32i, !cir.bool loc(#loc407)
                cir.condition(%30) loc(#loc407)
              } body {
                %28 = cir.load %8 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc264)
                %29 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc265)
                %30 = cir.ptr_stride(%28 : !cir.ptr<!s32i>, %29 : !s32i), !cir.ptr<!s32i> loc(#loc266)
                %31 = cir.load %30 : !cir.ptr<!s32i>, !s32i loc(#loc264)
                cir.call @printIntLine(%31) : (!s32i) -> () loc(#loc267)
                cir.yield loc(#loc259)
              } step {
                %28 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc268)
                %29 = cir.unary(inc, %28) : !s32i, !s32i loc(#loc269)
                cir.store %29, %7 : !s32i, !cir.ptr<!s32i> loc(#loc408)
                cir.yield loc(#loc405)
              } loc(#loc405)
            } loc(#loc405)
          } else {
            %23 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc179)
            %24 = cir.cast(array_to_ptrdecay, %23 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc179)
            cir.call @printLine(%24) : (!cir.ptr<!s8i>) -> () loc(#loc270)
          } loc(#loc403)
        } loc(#loc400)
        %16 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc271)
        %17 = cir.load %8 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc272)
        %18 = cir.cast(bitcast, %17 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc272)
        cir.call @free(%18) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc271)
      } loc(#loc386)
    } loc(#loc384)
    cir.return loc(#loc181)
  } loc(#loc374)
  cir.func @_ZN52CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_334goodEv() extra(#fn_attr1) {
    cir.call @_ZN52CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33L7goodG2BEv() : () -> () loc(#loc275)
    cir.call @_ZN52CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33L7goodB2GEv() : () -> () loc(#loc276)
    cir.return loc(#loc274)
  } loc(#loc409)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc410)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc411)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc281)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc282)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc283)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc284)
  cir.func @main(%arg0: !s32i loc(fused[#loc287, #loc288]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc289, #loc290])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc413)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc414)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc286)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc291)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc291)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc292)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc293)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc293)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc294)
    %6 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc281)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc281)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc295)
    cir.call @_ZN52CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_334goodEv() : () -> () loc(#loc296)
    %8 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc282)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc282)
    cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc297)
    %10 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc283)
    %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc283)
    cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc298)
    cir.call @_ZN52CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_333badEv() : () -> () loc(#loc299)
    %12 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc284)
    %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc284)
    cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc300)
    %14 = cir.const #cir.int<0> : !s32i loc(#loc301)
    cir.store %14, %2 : !s32i, !cir.ptr<!s32i> loc(#loc415)
    %15 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc415)
    cir.return %15 : !s32i loc(#loc415)
  } loc(#loc412)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":0:0)
#loc1 = loc("/usr/include/stdio.h":654:1)
#loc2 = loc("/usr/include/stdio.h":655:59)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("/usr/include/stdlib.h":105:1)
#loc6 = loc("/usr/include/stdlib.h":106:33)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":43:23)
#loc10 = loc("/usr/include/stdlib.h":672:1)
#loc11 = loc("/usr/include/stdlib.h":672:45)
#loc12 = loc("/usr/include/stdlib.h":756:1)
#loc13 = loc("/usr/include/stdlib.h":756:70)
#loc14 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc15 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":70:27)
#loc17 = loc("/usr/include/stdlib.h":687:1)
#loc18 = loc("/usr/include/stdlib.h":687:32)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":27:1)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":75:1)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":29:5)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":29:9)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":30:5)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":30:20)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":32:13)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":32:12)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":32:5)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":33:5)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":45:5)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":34:9)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":34:45)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":36:9)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":44:9)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":36:19)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":36:32)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":36:49)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":36:13)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":36:59)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":37:9)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":40:9)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":42:9)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":39:25)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":39:20)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":39:13)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":39:36)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":43:13)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":46:5)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":74:5)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":47:9)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":47:20)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":48:9)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":73:9)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":49:13)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":49:17)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":50:13)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":50:58)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":50:35)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":50:42)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":50:47)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":50:57)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":51:13)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":51:43)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":51:17)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":51:27)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":51:33)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":51:34)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":51:40)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":51:39)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":53:13)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":56:13)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":53:22)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":53:18)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":53:25)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":53:29)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":55:29)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":55:17)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":55:24)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":55:25)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":53:34)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":53:33)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":59:13)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":71:13)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":59:17)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":59:25)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":60:13)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":67:13)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":69:13)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":61:32)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":61:17)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":61:24)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":61:28)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":63:17)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":66:17)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":63:25)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":63:21)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":63:28)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":63:32)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":65:34)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":65:41)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":65:42)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":65:21)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":63:37)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":63:36)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":70:17)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":72:13)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":72:18)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":82:1)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":120:1)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":84:5)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":84:9)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":85:5)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":85:20)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":87:13)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":87:12)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":87:5)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":90:12)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":90:5)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":91:5)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":119:5)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":92:9)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":92:20)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":93:9)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":118:9)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":94:13)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":94:17)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":95:13)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":95:58)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":95:35)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":95:42)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":95:47)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":95:57)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":96:13)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":96:43)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":96:17)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":96:27)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":96:33)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":96:34)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":96:40)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":96:39)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":98:13)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":101:13)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":98:22)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":98:18)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":98:25)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":98:29)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":100:29)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":100:17)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":100:24)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":100:25)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":98:34)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":98:33)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":104:13)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":116:13)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":104:17)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":104:25)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":105:13)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":112:13)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":114:13)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":106:32)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":106:17)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":106:24)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":106:28)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":108:17)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":111:17)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":108:25)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":108:21)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":108:28)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":108:32)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":110:34)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":110:41)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":110:42)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":110:21)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":108:37)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":108:36)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":115:27)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":115:17)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":117:13)
#loc178 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":117:18)
#loc179 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":165:27)
#loc180 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":123:1)
#loc181 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":170:1)
#loc182 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":125:5)
#loc183 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":125:9)
#loc184 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":126:5)
#loc185 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":126:20)
#loc186 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":128:13)
#loc187 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":128:12)
#loc188 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":128:5)
#loc189 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":129:5)
#loc190 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":141:5)
#loc191 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":130:9)
#loc192 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":130:45)
#loc193 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":132:9)
#loc194 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":140:9)
#loc195 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":132:19)
#loc196 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":132:32)
#loc197 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":132:49)
#loc198 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":132:13)
#loc199 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":132:59)
#loc200 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":133:9)
#loc201 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":136:9)
#loc202 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":138:9)
#loc203 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":135:25)
#loc204 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":135:20)
#loc205 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":135:13)
#loc206 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":135:36)
#loc207 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":139:23)
#loc208 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":139:13)
#loc209 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":142:5)
#loc210 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":169:5)
#loc211 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":143:9)
#loc212 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":143:20)
#loc213 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":144:9)
#loc214 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":168:9)
#loc215 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":145:13)
#loc216 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":145:17)
#loc217 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":146:13)
#loc218 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":146:58)
#loc219 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":146:35)
#loc220 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":146:42)
#loc221 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":146:47)
#loc222 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":146:57)
#loc223 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":147:13)
#loc224 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":147:43)
#loc225 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":147:17)
#loc226 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":147:27)
#loc227 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":147:33)
#loc228 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":147:34)
#loc229 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":147:40)
#loc230 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":147:39)
#loc231 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":149:13)
#loc232 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":152:13)
#loc233 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":149:22)
#loc234 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":149:18)
#loc235 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":149:25)
#loc236 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":149:29)
#loc237 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":151:29)
#loc238 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":151:17)
#loc239 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":151:24)
#loc240 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":151:25)
#loc241 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":149:34)
#loc242 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":149:33)
#loc243 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":154:13)
#loc244 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":166:13)
#loc245 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":154:17)
#loc246 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":154:25)
#loc247 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":154:27)
#loc248 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":154:30)
#loc249 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":154:38)
#loc250 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":154:40)
#loc251 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":155:13)
#loc252 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":162:13)
#loc253 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":164:13)
#loc254 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":156:32)
#loc255 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":156:17)
#loc256 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":156:24)
#loc257 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":156:28)
#loc258 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":158:17)
#loc259 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":161:17)
#loc260 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":158:25)
#loc261 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":158:21)
#loc262 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":158:28)
#loc263 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":158:32)
#loc264 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":160:34)
#loc265 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":160:41)
#loc266 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":160:42)
#loc267 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":160:21)
#loc268 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":158:37)
#loc269 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":158:36)
#loc270 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":165:17)
#loc271 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":167:13)
#loc272 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":167:18)
#loc273 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":172:1)
#loc274 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":176:1)
#loc275 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":174:5)
#loc276 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":175:5)
#loc277 = loc("/usr/include/stdlib.h":575:1)
#loc278 = loc("/usr/include/stdlib.h":575:41)
#loc279 = loc("/usr/include/time.h":76:1)
#loc280 = loc("/usr/include/time.h":76:38)
#loc281 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":195:15)
#loc282 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":197:15)
#loc283 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":200:15)
#loc284 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":202:15)
#loc285 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":190:1)
#loc286 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":205:1)
#loc291 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":191:1)
#loc292 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":193:27)
#loc293 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":193:22)
#loc294 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":193:5)
#loc295 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":195:5)
#loc296 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":196:5)
#loc297 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":197:5)
#loc298 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":200:5)
#loc299 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":201:5)
#loc300 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":202:5)
#loc301 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":204:12)
#loc302 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_33.cpp":204:5)
#loc303 = loc(fused[#loc1, #loc2])
#loc304 = loc(fused[#loc3, #loc4])
#loc305 = loc(fused[#loc5, #loc6])
#loc306 = loc(fused[#loc7, #loc8])
#loc307 = loc(fused[#loc10, #loc11])
#loc308 = loc(fused[#loc12, #loc13])
#loc309 = loc(fused[#loc14, #loc15])
#loc310 = loc(fused[#loc17, #loc18])
#loc311 = loc(fused[#loc19, #loc20])
#loc312 = loc(fused[#loc21, #loc22])
#loc313 = loc(fused[#loc23, #loc24])
#loc314 = loc(fused[#loc27, #loc25])
#loc315 = loc(fused[#loc28, #loc29])
#loc316 = loc(fused[#loc30, #loc31])
#loc317 = loc(fused[#loc32, #loc33])
#loc318 = loc(fused[#loc37, #loc38])
#loc319 = loc(fused[#loc39, #loc40, #loc41, #loc33])
#loc320 = loc(fused[#loc44, #loc45])
#loc321 = loc(fused[#loc47, #loc48])
#loc322 = loc(fused[#loc49, #loc50])
#loc323 = loc(fused[#loc51, #loc52])
#loc324 = loc(fused[#loc53, #loc54])
#loc325 = loc(fused[#loc55, #loc56])
#loc326 = loc(fused[#loc59, #loc60])
#loc327 = loc(fused[#loc58, #loc60])
#loc328 = loc(fused[#loc57, #loc56])
#loc329 = loc(fused[#loc61, #loc62])
#loc330 = loc(fused[#loc63, #loc64])
#loc331 = loc(fused[#loc65, #loc62])
#loc332 = loc(fused[#loc69, #loc70])
#loc333 = loc(fused[#loc72, #loc71])
#loc334 = loc(fused[#loc73, #loc74])
#loc335 = loc(fused[#loc76, #loc75])
#loc336 = loc(fused[#loc80, #loc79])
#loc337 = loc(fused[#loc81, #loc82])
#loc338 = loc(fused[#loc83, #loc84])
#loc339 = loc(fused[#loc85, #loc86, #loc87, #loc82])
#loc340 = loc(fused[#loc89, #loc88])
#loc341 = loc(fused[#loc92, #loc93])
#loc342 = loc(fused[#loc95, #loc94])
#loc343 = loc(fused[#loc96, #loc97])
#loc344 = loc(fused[#loc103, #loc102])
#loc345 = loc(fused[#loc107, #loc108])
#loc346 = loc(fused[#loc109, #loc110])
#loc347 = loc(fused[#loc111, #loc112])
#loc348 = loc(fused[#loc115, #loc113])
#loc349 = loc(fused[#loc117, #loc116])
#loc350 = loc(fused[#loc118, #loc119])
#loc351 = loc(fused[#loc120, #loc121])
#loc352 = loc(fused[#loc122, #loc123])
#loc353 = loc(fused[#loc124, #loc125])
#loc354 = loc(fused[#loc126, #loc127])
#loc355 = loc(fused[#loc130, #loc131])
#loc356 = loc(fused[#loc129, #loc131])
#loc357 = loc(fused[#loc128, #loc127])
#loc358 = loc(fused[#loc132, #loc133])
#loc359 = loc(fused[#loc134, #loc135])
#loc360 = loc(fused[#loc136, #loc133])
#loc361 = loc(fused[#loc140, #loc141])
#loc362 = loc(fused[#loc143, #loc142])
#loc363 = loc(fused[#loc144, #loc145])
#loc364 = loc(fused[#loc147, #loc146])
#loc365 = loc(fused[#loc151, #loc150])
#loc366 = loc(fused[#loc152, #loc153])
#loc367 = loc(fused[#loc154, #loc155])
#loc368 = loc(fused[#loc156, #loc157, #loc158, #loc153])
#loc369 = loc(fused[#loc160, #loc159])
#loc370 = loc(fused[#loc163, #loc164])
#loc371 = loc(fused[#loc166, #loc165])
#loc372 = loc(fused[#loc167, #loc168])
#loc373 = loc(fused[#loc174, #loc173])
#loc374 = loc(fused[#loc180, #loc181])
#loc375 = loc(fused[#loc182, #loc183])
#loc376 = loc(fused[#loc184, #loc185])
#loc377 = loc(fused[#loc188, #loc186])
#loc378 = loc(fused[#loc189, #loc190])
#loc379 = loc(fused[#loc191, #loc192])
#loc380 = loc(fused[#loc193, #loc194])
#loc381 = loc(fused[#loc198, #loc199])
#loc382 = loc(fused[#loc200, #loc201, #loc202, #loc194])
#loc383 = loc(fused[#loc205, #loc206])
#loc384 = loc(fused[#loc209, #loc210])
#loc385 = loc(fused[#loc211, #loc212])
#loc386 = loc(fused[#loc213, #loc214])
#loc387 = loc(fused[#loc215, #loc216])
#loc388 = loc(fused[#loc217, #loc218])
#loc389 = loc(fused[#loc221, #loc222])
#loc390 = loc(fused[#loc220, #loc222])
#loc391 = loc(fused[#loc219, #loc218])
#loc392 = loc(fused[#loc223, #loc224])
#loc393 = loc(fused[#loc225, #loc226])
#loc394 = loc(fused[#loc227, #loc224])
#loc395 = loc(fused[#loc231, #loc232])
#loc396 = loc(fused[#loc234, #loc233])
#loc397 = loc(fused[#loc235, #loc236])
#loc398 = loc(fused[#loc238, #loc237])
#loc399 = loc(fused[#loc242, #loc241])
#loc400 = loc(fused[#loc243, #loc244])
#loc401 = loc(fused[#loc245, #loc246])
#loc402 = loc(fused[#loc248, #loc250])
#loc403 = loc(fused[#loc251, #loc252, #loc253, #loc244])
#loc404 = loc(fused[#loc255, #loc254])
#loc405 = loc(fused[#loc258, #loc259])
#loc406 = loc(fused[#loc261, #loc260])
#loc407 = loc(fused[#loc262, #loc263])
#loc408 = loc(fused[#loc269, #loc268])
#loc409 = loc(fused[#loc273, #loc274])
#loc410 = loc(fused[#loc277, #loc278])
#loc411 = loc(fused[#loc279, #loc280])
#loc412 = loc(fused[#loc285, #loc286])
#loc415 = loc(fused[#loc302, #loc301])
