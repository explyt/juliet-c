!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s08/CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_03.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @strcat(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc114)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc115)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_03_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc117)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBuffer", init] {alignment = 8 : i64} loc(#loc118)
    %2 = cir.const #cir.int<100> : !s32i loc(#loc10)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc10)
    %4 = cir.const #cir.int<1> : !u64i loc(#loc10)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc10)
    %6 = cir.alloca !u8i, !cir.ptr<!u8i>, %5 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc10)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc10)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc10)
    cir.store %8, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc118)
    %9 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc11)
    cir.store %9, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc119)
    cir.scope {
      %10 = cir.const #cir.int<5> : !s32i loc(#loc15)
      %11 = cir.const #cir.int<5> : !s32i loc(#loc16)
      %12 = cir.cmp(eq, %10, %11) : !s32i, !cir.bool loc(#loc121)
      cir.if %12 {
        %13 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc18)
        %14 = cir.cast(bitcast, %13 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc18)
        %15 = cir.const #cir.int<65> : !s32i loc(#loc19)
        %16 = cir.const #cir.int<100> : !s32i loc(#loc20)
        %17 = cir.const #cir.int<1> : !s32i loc(#loc21)
        %18 = cir.binop(sub, %16, %17) nsw : !s32i loc(#loc20)
        %19 = cir.cast(integral, %18 : !s32i), !u64i loc(#loc20)
        cir.libc.memset %19 bytes from %14 set to %15 : !cir.ptr<!void>, !s32i, !u64i loc(#loc123)
        %20 = cir.const #cir.int<0> : !s32i loc(#loc24)
        %21 = cir.cast(integral, %20 : !s32i), !s8i loc(#loc24)
        %22 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc25)
        %23 = cir.const #cir.int<100> : !s32i loc(#loc26)
        %24 = cir.const #cir.int<1> : !s32i loc(#loc27)
        %25 = cir.binop(sub, %23, %24) nsw : !s32i loc(#loc26)
        %26 = cir.ptr_stride(%22 : !cir.ptr<!s8i>, %25 : !s32i), !cir.ptr<!s8i> loc(#loc28)
        cir.store %21, %26 : !s8i, !cir.ptr<!s8i> loc(#loc124)
      } loc(#loc122)
    } loc(#loc120)
    cir.scope {
      %10 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc126)
      %11 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc126)
      cir.store %11, %10 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc126)
      %12 = cir.get_global @strcat : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i>>> loc(#loc33)
      %13 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc34)
      %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc35)
      %15 = cir.call @strcat(%13, %14) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc33)
      %16 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc36)
      cir.call @printLine(%16) : (!cir.ptr<!s8i>) -> () loc(#loc37)
    } loc(#loc125)
    cir.return loc(#loc6)
  } loc(#loc116)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_03_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<()>> loc(#loc128)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc40)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<()>> loc(#loc129)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc42)
    cir.return loc(#loc39)
  } loc(#loc127)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc44)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc131)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBuffer", init] {alignment = 8 : i64} loc(#loc132)
    %2 = cir.const #cir.int<100> : !s32i loc(#loc50)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc50)
    %4 = cir.const #cir.int<1> : !u64i loc(#loc50)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc50)
    %6 = cir.alloca !u8i, !cir.ptr<!u8i>, %5 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc50)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc50)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc50)
    cir.store %8, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc132)
    %9 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc51)
    cir.store %9, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc133)
    cir.scope {
      %10 = cir.const #cir.int<5> : !s32i loc(#loc55)
      %11 = cir.const #cir.int<5> : !s32i loc(#loc56)
      %12 = cir.cmp(ne, %10, %11) : !s32i, !cir.bool loc(#loc135)
      cir.if %12 {
        %13 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc44)
        %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc44)
        cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc60)
      } else {
        %13 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc61)
        %14 = cir.cast(bitcast, %13 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc61)
        %15 = cir.const #cir.int<65> : !s32i loc(#loc62)
        %16 = cir.const #cir.int<50> : !s32i loc(#loc63)
        %17 = cir.const #cir.int<1> : !s32i loc(#loc64)
        %18 = cir.binop(sub, %16, %17) nsw : !s32i loc(#loc63)
        %19 = cir.cast(integral, %18 : !s32i), !u64i loc(#loc63)
        cir.libc.memset %19 bytes from %14 set to %15 : !cir.ptr<!void>, !s32i, !u64i loc(#loc137)
        %20 = cir.const #cir.int<0> : !s32i loc(#loc67)
        %21 = cir.cast(integral, %20 : !s32i), !s8i loc(#loc67)
        %22 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc68)
        %23 = cir.const #cir.int<50> : !s32i loc(#loc69)
        %24 = cir.const #cir.int<1> : !s32i loc(#loc70)
        %25 = cir.binop(sub, %23, %24) nsw : !s32i loc(#loc69)
        %26 = cir.ptr_stride(%22 : !cir.ptr<!s8i>, %25 : !s32i), !cir.ptr<!s8i> loc(#loc71)
        cir.store %21, %26 : !s8i, !cir.ptr<!s8i> loc(#loc138)
      } loc(#loc136)
    } loc(#loc134)
    cir.scope {
      %10 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc140)
      %11 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc140)
      cir.store %11, %10 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc140)
      %12 = cir.get_global @strcat : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i>>> loc(#loc76)
      %13 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc77)
      %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc78)
      %15 = cir.call @strcat(%13, %14) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc76)
      %16 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc79)
      cir.call @printLine(%16) : (!cir.ptr<!s8i>) -> () loc(#loc80)
    } loc(#loc139)
    cir.return loc(#loc46)
  } loc(#loc130)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc142)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBuffer", init] {alignment = 8 : i64} loc(#loc143)
    %2 = cir.const #cir.int<100> : !s32i loc(#loc86)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc86)
    %4 = cir.const #cir.int<1> : !u64i loc(#loc86)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc86)
    %6 = cir.alloca !u8i, !cir.ptr<!u8i>, %5 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc86)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc86)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc86)
    cir.store %8, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc143)
    %9 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc87)
    cir.store %9, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc144)
    cir.scope {
      %10 = cir.const #cir.int<5> : !s32i loc(#loc91)
      %11 = cir.const #cir.int<5> : !s32i loc(#loc92)
      %12 = cir.cmp(eq, %10, %11) : !s32i, !cir.bool loc(#loc146)
      cir.if %12 {
        %13 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc94)
        %14 = cir.cast(bitcast, %13 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc94)
        %15 = cir.const #cir.int<65> : !s32i loc(#loc95)
        %16 = cir.const #cir.int<50> : !s32i loc(#loc96)
        %17 = cir.const #cir.int<1> : !s32i loc(#loc97)
        %18 = cir.binop(sub, %16, %17) nsw : !s32i loc(#loc96)
        %19 = cir.cast(integral, %18 : !s32i), !u64i loc(#loc96)
        cir.libc.memset %19 bytes from %14 set to %15 : !cir.ptr<!void>, !s32i, !u64i loc(#loc148)
        %20 = cir.const #cir.int<0> : !s32i loc(#loc100)
        %21 = cir.cast(integral, %20 : !s32i), !s8i loc(#loc100)
        %22 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc101)
        %23 = cir.const #cir.int<50> : !s32i loc(#loc102)
        %24 = cir.const #cir.int<1> : !s32i loc(#loc103)
        %25 = cir.binop(sub, %23, %24) nsw : !s32i loc(#loc102)
        %26 = cir.ptr_stride(%22 : !cir.ptr<!s8i>, %25 : !s32i), !cir.ptr<!s8i> loc(#loc104)
        cir.store %21, %26 : !s8i, !cir.ptr<!s8i> loc(#loc149)
      } loc(#loc147)
    } loc(#loc145)
    cir.scope {
      %10 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc151)
      %11 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc151)
      cir.store %11, %10 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc151)
      %12 = cir.get_global @strcat : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i>>> loc(#loc109)
      %13 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc110)
      %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc111)
      %15 = cir.call @strcat(%13, %14) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc109)
      %16 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc112)
      cir.call @printLine(%16) : (!cir.ptr<!s8i>) -> () loc(#loc113)
    } loc(#loc150)
    cir.return loc(#loc82)
  } loc(#loc141)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s08/CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_03.c":0:0)
#loc1 = loc("/usr/include/string.h":149:1)
#loc2 = loc("/usr/include/string.h":150:14)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc5 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_03.c":23:1)
#loc6 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_03.c":40:1)
#loc7 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_03.c":25:5)
#loc8 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_03.c":25:12)
#loc9 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_03.c":26:5)
#loc10 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_03.c":26:33)
#loc11 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_03.c":27:12)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_03.c":27:5)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_03.c":28:5)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_03.c":33:5)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_03.c":28:8)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_03.c":28:11)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_03.c":29:5)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_03.c":31:16)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_03.c":31:22)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_03.c":31:27)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_03.c":31:31)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_03.c":31:9)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_03.c":31:32)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_03.c":32:23)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_03.c":32:9)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_03.c":32:14)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_03.c":32:18)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_03.c":32:19)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_03.c":34:5)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_03.c":39:5)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_03.c":35:9)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_03.c":35:25)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_03.c":37:9)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_03.c":37:16)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_03.c":37:22)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_03.c":38:19)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_03.c":38:9)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_03.c":91:1)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_03.c":95:1)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_03.c":93:5)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_03.c":93:14)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_03.c":94:5)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_03.c":94:14)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_03.c":55:19)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_03.c":47:1)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_03.c":69:1)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_03.c":49:5)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_03.c":49:12)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_03.c":50:5)
#loc50 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_03.c":50:33)
#loc51 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_03.c":51:12)
#loc52 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_03.c":51:5)
#loc53 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_03.c":52:5)
#loc54 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_03.c":62:5)
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_03.c":52:8)
#loc56 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_03.c":52:11)
#loc57 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_03.c":53:5)
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_03.c":56:5)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_03.c":58:5)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_03.c":55:9)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_03.c":60:16)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_03.c":60:22)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_03.c":60:27)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_03.c":60:30)
#loc65 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_03.c":60:9)
#loc66 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_03.c":60:31)
#loc67 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_03.c":61:22)
#loc68 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_03.c":61:9)
#loc69 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_03.c":61:14)
#loc70 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_03.c":61:17)
#loc71 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_03.c":61:18)
#loc72 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_03.c":63:5)
#loc73 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_03.c":68:5)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_03.c":64:9)
#loc75 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_03.c":64:25)
#loc76 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_03.c":66:9)
#loc77 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_03.c":66:16)
#loc78 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_03.c":66:22)
#loc79 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_03.c":67:19)
#loc80 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_03.c":67:9)
#loc81 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_03.c":72:1)
#loc82 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_03.c":89:1)
#loc83 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_03.c":74:5)
#loc84 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_03.c":74:12)
#loc85 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_03.c":75:5)
#loc86 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_03.c":75:33)
#loc87 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_03.c":76:12)
#loc88 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_03.c":76:5)
#loc89 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_03.c":77:5)
#loc90 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_03.c":82:5)
#loc91 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_03.c":77:8)
#loc92 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_03.c":77:11)
#loc93 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_03.c":78:5)
#loc94 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_03.c":80:16)
#loc95 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_03.c":80:22)
#loc96 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_03.c":80:27)
#loc97 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_03.c":80:30)
#loc98 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_03.c":80:9)
#loc99 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_03.c":80:31)
#loc100 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_03.c":81:22)
#loc101 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_03.c":81:9)
#loc102 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_03.c":81:14)
#loc103 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_03.c":81:17)
#loc104 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_03.c":81:18)
#loc105 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_03.c":83:5)
#loc106 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_03.c":88:5)
#loc107 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_03.c":84:9)
#loc108 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_03.c":84:25)
#loc109 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_03.c":86:9)
#loc110 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_03.c":86:16)
#loc111 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_03.c":86:22)
#loc112 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_03.c":87:19)
#loc113 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_03.c":87:9)
#loc114 = loc(fused[#loc1, #loc2])
#loc115 = loc(fused[#loc3, #loc4])
#loc116 = loc(fused[#loc5, #loc6])
#loc117 = loc(fused[#loc7, #loc8])
#loc118 = loc(fused[#loc9, #loc10])
#loc119 = loc(fused[#loc12, #loc11])
#loc120 = loc(fused[#loc13, #loc14])
#loc121 = loc(fused[#loc15, #loc16])
#loc122 = loc(fused[#loc17, #loc14])
#loc123 = loc(fused[#loc22, #loc23])
#loc124 = loc(fused[#loc25, #loc24])
#loc125 = loc(fused[#loc29, #loc30])
#loc126 = loc(fused[#loc31, #loc32])
#loc127 = loc(fused[#loc38, #loc39])
#loc128 = loc(fused[#loc40, #loc41])
#loc129 = loc(fused[#loc42, #loc43])
#loc130 = loc(fused[#loc45, #loc46])
#loc131 = loc(fused[#loc47, #loc48])
#loc132 = loc(fused[#loc49, #loc50])
#loc133 = loc(fused[#loc52, #loc51])
#loc134 = loc(fused[#loc53, #loc54])
#loc135 = loc(fused[#loc55, #loc56])
#loc136 = loc(fused[#loc57, #loc58, #loc59, #loc54])
#loc137 = loc(fused[#loc65, #loc66])
#loc138 = loc(fused[#loc68, #loc67])
#loc139 = loc(fused[#loc72, #loc73])
#loc140 = loc(fused[#loc74, #loc75])
#loc141 = loc(fused[#loc81, #loc82])
#loc142 = loc(fused[#loc83, #loc84])
#loc143 = loc(fused[#loc85, #loc86])
#loc144 = loc(fused[#loc88, #loc87])
#loc145 = loc(fused[#loc89, #loc90])
#loc146 = loc(fused[#loc91, #loc92])
#loc147 = loc(fused[#loc93, #loc90])
#loc148 = loc(fused[#loc98, #loc99])
#loc149 = loc(fused[#loc101, #loc100])
#loc150 = loc(fused[#loc105, #loc106])
#loc151 = loc(fused[#loc107, #loc108])
