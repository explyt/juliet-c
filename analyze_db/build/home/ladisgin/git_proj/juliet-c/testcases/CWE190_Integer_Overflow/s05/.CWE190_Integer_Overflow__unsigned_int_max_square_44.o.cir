!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc5 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_44.c":24:21)
#loc6 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_44.c":24:34)
#loc35 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_44.c":50:25)
#loc36 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_44.c":50:38)
#loc63 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_44.c":70:25)
#loc64 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_44.c":70:38)
#loc96 = loc(fused[#loc5, #loc6])
#loc109 = loc(fused[#loc35, #loc36])
#loc120 = loc(fused[#loc63, #loc64])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_square_44.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @printUnsignedLine(!u32i) loc(#loc94)
  cir.func internal private @badSink(%arg0: !u32i loc(fused[#loc5, #loc6])) extra(#fn_attr) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc97)
    %1 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data", init] {alignment = 4 : i64} loc(#loc96)
    cir.store %arg0, %1 : !u32i, !cir.ptr<!u32i> loc(#loc9)
    cir.br ^bb1 loc(#loc98)
  ^bb1:  // pred: ^bb0
    %2 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc12)
    %3 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc8)
    %4 = cir.binop(mul, %2, %3) : !u32i loc(#loc99)
    cir.store %4, %0 : !u32i, !cir.ptr<!u32i> loc(#loc97)
    %5 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc13)
    cir.call @printUnsignedLine(%5) : (!u32i) -> () loc(#loc14)
    cir.br ^bb2 loc(#loc11)
  ^bb2:  // pred: ^bb1
    cir.return loc(#loc4)
  } loc(#loc95)
  cir.func no_proto @CWE190_Integer_Overflow__unsigned_int_max_square_44_bad() extra(#fn_attr) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc101)
    %1 = cir.alloca !cir.ptr<!cir.func<!void (!u32i)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!u32i)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc102)
    %2 = cir.get_global @badSink : !cir.ptr<!cir.func<!void (!u32i)>> loc(#loc20)
    cir.store %2, %1 : !cir.ptr<!cir.func<!void (!u32i)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!u32i)>>> loc(#loc102)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc21)
    %4 = cir.cast(integral, %3 : !s32i), !u32i loc(#loc21)
    cir.store %4, %0 : !u32i, !cir.ptr<!u32i> loc(#loc103)
    %5 = cir.const #cir.int<2147483647> : !s32i loc(#loc23)
    %6 = cir.cast(integral, %5 : !s32i), !u32i loc(#loc23)
    %7 = cir.const #cir.int<2> : !u32i loc(#loc23)
    %8 = cir.binop(mul, %6, %7) : !u32i loc(#loc23)
    %9 = cir.const #cir.int<1> : !u32i loc(#loc23)
    %10 = cir.binop(add, %8, %9) : !u32i loc(#loc23)
    cir.store %10, %0 : !u32i, !cir.ptr<!u32i> loc(#loc104)
    %11 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<!void (!u32i)>>>, !cir.ptr<!cir.func<!void (!u32i)>> loc(#loc25)
    %12 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc26)
    cir.call %11(%12) : (!cir.ptr<!cir.func<!void (!u32i)>>, !u32i) -> () loc(#loc25)
    cir.return loc(#loc16)
  } loc(#loc100)
  cir.func no_proto @CWE190_Integer_Overflow__unsigned_int_max_square_44_good() extra(#fn_attr) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc106)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc29)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc107)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc31)
    cir.return loc(#loc28)
  } loc(#loc105)
  cir.func internal private @goodG2BSink(%arg0: !u32i loc(fused[#loc35, #loc36])) extra(#fn_attr) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc110)
    %1 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data", init] {alignment = 4 : i64} loc(#loc109)
    cir.store %arg0, %1 : !u32i, !cir.ptr<!u32i> loc(#loc39)
    cir.br ^bb1 loc(#loc111)
  ^bb1:  // pred: ^bb0
    %2 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc42)
    %3 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc38)
    %4 = cir.binop(mul, %2, %3) : !u32i loc(#loc112)
    cir.store %4, %0 : !u32i, !cir.ptr<!u32i> loc(#loc110)
    %5 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc43)
    cir.call @printUnsignedLine(%5) : (!u32i) -> () loc(#loc44)
    cir.br ^bb2 loc(#loc41)
  ^bb2:  // pred: ^bb1
    cir.return loc(#loc34)
  } loc(#loc108)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc114)
    %1 = cir.alloca !cir.ptr<!cir.func<!void (!u32i)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!u32i)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc115)
    %2 = cir.get_global @goodG2BSink : !cir.ptr<!cir.func<!void (!u32i)>> loc(#loc50)
    cir.store %2, %1 : !cir.ptr<!cir.func<!void (!u32i)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!u32i)>>> loc(#loc115)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc51)
    %4 = cir.cast(integral, %3 : !s32i), !u32i loc(#loc51)
    cir.store %4, %0 : !u32i, !cir.ptr<!u32i> loc(#loc116)
    %5 = cir.const #cir.int<2> : !s32i loc(#loc53)
    %6 = cir.cast(integral, %5 : !s32i), !u32i loc(#loc53)
    cir.store %6, %0 : !u32i, !cir.ptr<!u32i> loc(#loc117)
    %7 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<!void (!u32i)>>>, !cir.ptr<!cir.func<!void (!u32i)>> loc(#loc55)
    %8 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc56)
    cir.call %7(%8) : (!cir.ptr<!cir.func<!void (!u32i)>>, !u32i) -> () loc(#loc55)
    cir.return loc(#loc46)
  } loc(#loc113)
  cir.func private @sqrt(!cir.double) -> !cir.double extra(#fn_attr1) loc(#loc57)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc118)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc60)
  cir.func internal private @goodB2GSink(%arg0: !u32i loc(fused[#loc63, #loc64])) extra(#fn_attr) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc121)
    %1 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data", init] {alignment = 4 : i64} loc(#loc120)
    cir.store %arg0, %1 : !u32i, !cir.ptr<!u32i> loc(#loc67)
    cir.br ^bb1 loc(#loc122)
  ^bb1:  // pred: ^bb0
    %2 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc70)
    %3 = cir.cast(integral, %2 : !u32i), !s64i loc(#loc70)
    %4 = cir.cast(integral, %3 : !s64i), !s32i loc(#loc70)
    %5 = cir.abs %4 poison : !s32i loc(#loc71)
    %6 = cir.cast(integral, %5 : !s32i), !s64i loc(#loc71)
    %7 = cir.get_global @sqrt : !cir.ptr<!cir.func<!cir.double (!cir.double)>> loc(#loc72)
    %8 = cir.const #cir.int<2147483647> : !s32i loc(#loc73)
    %9 = cir.cast(integral, %8 : !s32i), !u32i loc(#loc73)
    %10 = cir.const #cir.int<2> : !u32i loc(#loc73)
    %11 = cir.binop(mul, %9, %10) : !u32i loc(#loc73)
    %12 = cir.const #cir.int<1> : !u32i loc(#loc73)
    %13 = cir.binop(add, %11, %12) : !u32i loc(#loc73)
    %14 = cir.cast(int_to_float, %13 : !u32i), !cir.double loc(#loc73)
    %15 = cir.call @sqrt(%14) : (!cir.double) -> !cir.double extra(#fn_attr1) loc(#loc72)
    %16 = cir.cast(float_to_int, %15 : !cir.double), !s64i loc(#loc72)
    %17 = cir.cmp(lt, %6, %16) : !s64i, !cir.bool loc(#loc123)
    cir.brcond %17 ^bb2, ^bb3 loc(#loc124)
  ^bb2:  // pred: ^bb1
    %18 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc78)
    %19 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc66)
    %20 = cir.binop(mul, %18, %19) : !u32i loc(#loc125)
    cir.store %20, %0 : !u32i, !cir.ptr<!u32i> loc(#loc121)
    %21 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc79)
    cir.call @printUnsignedLine(%21) : (!u32i) -> () loc(#loc80)
    cir.br ^bb4 loc(#loc76)
  ^bb3:  // pred: ^bb1
    %22 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc60)
    %23 = cir.cast(array_to_ptrdecay, %22 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc60)
    cir.call @printLine(%23) : (!cir.ptr<!s8i>) -> () loc(#loc81)
    cir.br ^bb4 loc(#loc69)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc69)
  ^bb5:  // pred: ^bb4
    cir.return loc(#loc62)
  } loc(#loc119)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc127)
    %1 = cir.alloca !cir.ptr<!cir.func<!void (!u32i)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!u32i)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc128)
    %2 = cir.get_global @goodB2GSink : !cir.ptr<!cir.func<!void (!u32i)>> loc(#loc87)
    cir.store %2, %1 : !cir.ptr<!cir.func<!void (!u32i)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!u32i)>>> loc(#loc128)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc88)
    %4 = cir.cast(integral, %3 : !s32i), !u32i loc(#loc88)
    cir.store %4, %0 : !u32i, !cir.ptr<!u32i> loc(#loc129)
    %5 = cir.const #cir.int<2147483647> : !s32i loc(#loc90)
    %6 = cir.cast(integral, %5 : !s32i), !u32i loc(#loc90)
    %7 = cir.const #cir.int<2> : !u32i loc(#loc90)
    %8 = cir.binop(mul, %6, %7) : !u32i loc(#loc90)
    %9 = cir.const #cir.int<1> : !u32i loc(#loc90)
    %10 = cir.binop(add, %8, %9) : !u32i loc(#loc90)
    cir.store %10, %0 : !u32i, !cir.ptr<!u32i> loc(#loc130)
    %11 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<!void (!u32i)>>>, !cir.ptr<!cir.func<!void (!u32i)>> loc(#loc92)
    %12 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc93)
    cir.call %11(%12) : (!cir.ptr<!cir.func<!void (!u32i)>>, !u32i) -> () loc(#loc92)
    cir.return loc(#loc83)
  } loc(#loc126)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_square_44.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":34:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":34:47)
#loc3 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_44.c":24:1)
#loc4 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_44.c":31:1)
#loc7 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_44.c":28:9)
#loc8 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_44.c":28:38)
#loc9 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_44.c":25:1)
#loc10 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_44.c":26:5)
#loc11 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_44.c":30:5)
#loc12 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_44.c":28:31)
#loc13 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_44.c":29:27)
#loc14 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_44.c":29:9)
#loc15 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_44.c":33:1)
#loc16 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_44.c":43:1)
#loc17 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_44.c":35:5)
#loc18 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_44.c":35:18)
#loc19 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_44.c":37:5)
#loc20 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_44.c":37:38)
#loc21 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_44.c":38:12)
#loc22 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_44.c":38:5)
#loc23 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_44.c":40:12)
#loc24 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_44.c":40:5)
#loc25 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_44.c":42:5)
#loc26 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_44.c":42:13)
#loc27 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_44.c":94:1)
#loc28 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_44.c":98:1)
#loc29 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_44.c":96:5)
#loc30 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_44.c":96:13)
#loc31 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_44.c":97:5)
#loc32 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_44.c":97:13)
#loc33 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_44.c":50:1)
#loc34 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_44.c":57:1)
#loc37 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_44.c":54:9)
#loc38 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_44.c":54:38)
#loc39 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_44.c":51:1)
#loc40 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_44.c":52:5)
#loc41 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_44.c":56:5)
#loc42 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_44.c":54:31)
#loc43 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_44.c":55:27)
#loc44 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_44.c":55:9)
#loc45 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_44.c":59:1)
#loc46 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_44.c":67:1)
#loc47 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_44.c":61:5)
#loc48 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_44.c":61:18)
#loc49 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_44.c":62:5)
#loc50 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_44.c":62:38)
#loc51 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_44.c":63:12)
#loc52 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_44.c":63:5)
#loc53 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_44.c":65:12)
#loc54 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_44.c":65:5)
#loc55 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_44.c":66:5)
#loc56 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_44.c":66:13)
#loc57 = loc("/usr/include/bits/mathcalls.h":158:1)
#loc58 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc59 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc60 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_44.c":80:19)
#loc61 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_44.c":70:1)
#loc62 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_44.c":82:1)
#loc65 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_44.c":75:9)
#loc66 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_44.c":75:38)
#loc67 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_44.c":71:1)
#loc68 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_44.c":73:5)
#loc69 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_44.c":81:5)
#loc70 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_44.c":73:19)
#loc71 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_44.c":73:9)
#loc72 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_44.c":73:33)
#loc73 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_44.c":73:46)
#loc74 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_44.c":73:54)
#loc75 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_44.c":74:5)
#loc76 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_44.c":77:5)
#loc77 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_44.c":79:5)
#loc78 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_44.c":75:31)
#loc79 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_44.c":76:27)
#loc80 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_44.c":76:9)
#loc81 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_44.c":80:9)
#loc82 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_44.c":84:1)
#loc83 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_44.c":92:1)
#loc84 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_44.c":86:5)
#loc85 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_44.c":86:18)
#loc86 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_44.c":87:5)
#loc87 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_44.c":87:38)
#loc88 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_44.c":88:12)
#loc89 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_44.c":88:5)
#loc90 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_44.c":90:12)
#loc91 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_44.c":90:5)
#loc92 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_44.c":91:5)
#loc93 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_44.c":91:13)
#loc94 = loc(fused[#loc1, #loc2])
#loc95 = loc(fused[#loc3, #loc4])
#loc97 = loc(fused[#loc7, #loc8])
#loc98 = loc(fused[#loc10, #loc11])
#loc99 = loc(fused[#loc12, #loc8])
#loc100 = loc(fused[#loc15, #loc16])
#loc101 = loc(fused[#loc17, #loc18])
#loc102 = loc(fused[#loc19, #loc20])
#loc103 = loc(fused[#loc22, #loc21])
#loc104 = loc(fused[#loc24, #loc23])
#loc105 = loc(fused[#loc27, #loc28])
#loc106 = loc(fused[#loc29, #loc30])
#loc107 = loc(fused[#loc31, #loc32])
#loc108 = loc(fused[#loc33, #loc34])
#loc110 = loc(fused[#loc37, #loc38])
#loc111 = loc(fused[#loc40, #loc41])
#loc112 = loc(fused[#loc42, #loc38])
#loc113 = loc(fused[#loc45, #loc46])
#loc114 = loc(fused[#loc47, #loc48])
#loc115 = loc(fused[#loc49, #loc50])
#loc116 = loc(fused[#loc52, #loc51])
#loc117 = loc(fused[#loc54, #loc53])
#loc118 = loc(fused[#loc58, #loc59])
#loc119 = loc(fused[#loc61, #loc62])
#loc121 = loc(fused[#loc65, #loc66])
#loc122 = loc(fused[#loc68, #loc69])
#loc123 = loc(fused[#loc71, #loc74])
#loc124 = loc(fused[#loc75, #loc76, #loc77, #loc69])
#loc125 = loc(fused[#loc78, #loc66])
#loc126 = loc(fused[#loc82, #loc83])
#loc127 = loc(fused[#loc84, #loc85])
#loc128 = loc(fused[#loc86, #loc87])
#loc129 = loc(fused[#loc89, #loc88])
#loc130 = loc(fused[#loc91, #loc90])
