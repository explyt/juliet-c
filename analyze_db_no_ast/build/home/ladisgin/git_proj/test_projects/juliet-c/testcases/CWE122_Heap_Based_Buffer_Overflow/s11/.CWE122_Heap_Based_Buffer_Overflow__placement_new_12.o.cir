!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr2 = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone})>
#loc7 = loc("../../../testcasesupport/std_testcase.h":61:7)
#loc12 = loc("../../../testcasesupport/std_testcase.h":68:7)
!ty_OneIntClass = !cir.struct<class "OneIntClass" {!s32i} #cir.record.decl.ast>
!ty_TwoIntsClass = !cir.struct<class "TwoIntsClass" {!s32i, !s32i} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc248)
  cir.func private  @exit(!s32i) extra(#fn_attr) loc(#loc249)
  cir.func private  @globalReturnsTrueOrFalse() -> !s32i loc(#loc250)
  cir.func linkonce_odr  @_ZN12TwoIntsClassC2Ev(%arg0: !cir.ptr<!ty_TwoIntsClass> loc("../../../testcasesupport/std_testcase.h":61:7)) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, ["this", init] {alignment = 8 : i64} loc(#loc7)
    cir.store %arg0, %0 : !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>> loc(#loc7)
    %1 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc7)
    cir.return loc(#loc7)
  } loc(#loc7)
  cir.func private  @printIntLine(!s32i) loc(#loc251)
  cir.func private  @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc252)
  cir.func linkonce_odr  @_ZN11OneIntClassC2Ev(%arg0: !cir.ptr<!ty_OneIntClass> loc("../../../testcasesupport/std_testcase.h":68:7)) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!ty_OneIntClass>, !cir.ptr<!cir.ptr<!ty_OneIntClass>>, ["this", init] {alignment = 8 : i64} loc(#loc12)
    cir.store %arg0, %0 : !cir.ptr<!ty_OneIntClass>, !cir.ptr<!cir.ptr<!ty_OneIntClass>> loc(#loc12)
    %1 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_OneIntClass>>, !cir.ptr<!ty_OneIntClass> loc(#loc12)
    cir.return loc(#loc12)
  } loc(#loc12)
  cir.func  @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_123badEv() extra(#fn_attr2) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc254)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc255)
    %2 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc256)
    %3 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc21)
    %4 = cir.const #cir.int<4> : !u64i loc(#loc257)
    %5 = cir.call @malloc(%4) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc21)
    %6 = cir.cast(bitcast, %5 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc258)
    cir.store %6, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc255)
    cir.scope {
      %11 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc26)
      %12 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc27)
      %13 = cir.cmp(eq, %11, %12) : !cir.ptr<!s8i>, !cir.bool loc(#loc260)
      cir.if %13 {
        %14 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc29)
        %15 = cir.const #cir.int<1> : !s32i loc(#loc30)
        %16 = cir.unary(minus, %15) : !s32i, !s32i loc(#loc31)
        cir.call @exit(%16) : (!s32i) -> () extra(#fn_attr) loc(#loc29)
      } loc(#loc261)
    } loc(#loc259)
    %7 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc32)
    %8 = cir.const #cir.int<8> : !u64i loc(#loc262)
    %9 = cir.call @malloc(%8) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc32)
    %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc263)
    cir.store %10, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc256)
    cir.scope {
      %11 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc37)
      %12 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc38)
      %13 = cir.cmp(eq, %11, %12) : !cir.ptr<!s8i>, !cir.bool loc(#loc265)
      cir.if %13 {
        %14 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc40)
        %15 = cir.const #cir.int<1> : !s32i loc(#loc41)
        %16 = cir.unary(minus, %15) : !s32i, !s32i loc(#loc42)
        cir.call @exit(%16) : (!s32i) -> () extra(#fn_attr) loc(#loc40)
      } loc(#loc266)
    } loc(#loc264)
    cir.scope {
      %11 = cir.call @globalReturnsTrueOrFalse() : () -> !s32i loc(#loc45)
      %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc268)
      cir.if %12 {
        %13 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc50)
        cir.store %13, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc270)
      } else {
        %13 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc52)
        cir.store %13, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc271)
      } loc(#loc269)
    } loc(#loc267)
    cir.scope {
      %11 = cir.call @globalReturnsTrueOrFalse() : () -> !s32i loc(#loc56)
      %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc273)
      cir.if %12 {
        cir.scope {
          %13 = cir.alloca !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, ["classTwo", init] {alignment = 8 : i64} loc(#loc276)
          %14 = cir.const #cir.int<8> : !u64i loc(#loc277)
          %15 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc66)
          %16 = cir.cast(bitcast, %15 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc66)
          %17 = cir.cast(bitcast, %16 : !cir.ptr<!void>), !cir.ptr<!ty_TwoIntsClass> loc(#loc277)
          cir.call @_ZN12TwoIntsClassC2Ev(%17) : (!cir.ptr<!ty_TwoIntsClass>) -> () extra(#fn_attr) loc(#loc64)
          cir.store %17, %13 : !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>> loc(#loc276)
          %18 = cir.const #cir.int<5> : !s32i loc(#loc67)
          %19 = cir.load %13 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc68)
          %20 = cir.get_member %19[0] {name = "intOne"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc69)
          cir.store %18, %20 : !s32i, !cir.ptr<!s32i> loc(#loc278)
          %21 = cir.const #cir.int<10> : !s32i loc(#loc70)
          %22 = cir.load %13 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc71)
          %23 = cir.get_member %22[1] {name = "intTwo"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc72)
          cir.store %21, %23 : !s32i, !cir.ptr<!s32i> loc(#loc279)
          %24 = cir.load %13 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc73)
          %25 = cir.get_member %24[0] {name = "intOne"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc69)
          %26 = cir.load %25 : !cir.ptr<!s32i>, !s32i loc(#loc74)
          cir.call @printIntLine(%26) : (!s32i) -> () loc(#loc75)
          %27 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc76)
          %28 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc77)
          %29 = cir.cast(bitcast, %28 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc77)
          cir.call @free(%29) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc76)
        } loc(#loc275)
      } else {
        cir.scope {
          %13 = cir.alloca !cir.ptr<!ty_OneIntClass>, !cir.ptr<!cir.ptr<!ty_OneIntClass>>, ["classOne", init] {alignment = 8 : i64} loc(#loc281)
          %14 = cir.const #cir.int<4> : !u64i loc(#loc282)
          %15 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc83)
          %16 = cir.cast(bitcast, %15 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc83)
          %17 = cir.cast(bitcast, %16 : !cir.ptr<!void>), !cir.ptr<!ty_OneIntClass> loc(#loc282)
          cir.call @_ZN11OneIntClassC2Ev(%17) : (!cir.ptr<!ty_OneIntClass>) -> () extra(#fn_attr) loc(#loc81)
          cir.store %17, %13 : !cir.ptr<!ty_OneIntClass>, !cir.ptr<!cir.ptr<!ty_OneIntClass>> loc(#loc281)
          %18 = cir.const #cir.int<5> : !s32i loc(#loc84)
          %19 = cir.load %13 : !cir.ptr<!cir.ptr<!ty_OneIntClass>>, !cir.ptr<!ty_OneIntClass> loc(#loc85)
          %20 = cir.get_member %19[0] {name = "intOne"} : !cir.ptr<!ty_OneIntClass> -> !cir.ptr<!s32i> loc(#loc86)
          cir.store %18, %20 : !s32i, !cir.ptr<!s32i> loc(#loc283)
          %21 = cir.load %13 : !cir.ptr<!cir.ptr<!ty_OneIntClass>>, !cir.ptr<!ty_OneIntClass> loc(#loc87)
          %22 = cir.get_member %21[0] {name = "intOne"} : !cir.ptr<!ty_OneIntClass> -> !cir.ptr<!s32i> loc(#loc86)
          %23 = cir.load %22 : !cir.ptr<!s32i>, !s32i loc(#loc88)
          cir.call @printIntLine(%23) : (!s32i) -> () loc(#loc89)
          %24 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc90)
          %25 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc91)
          %26 = cir.cast(bitcast, %25 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc91)
          cir.call @free(%26) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc90)
        } loc(#loc280)
      } loc(#loc274)
    } loc(#loc272)
    cir.return loc(#loc14)
  } loc(#loc253)
  cir.func internal private  @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_12L7goodB2GEv() extra(#fn_attr2) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc285)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc286)
    %2 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc287)
    %3 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc100)
    %4 = cir.const #cir.int<4> : !u64i loc(#loc288)
    %5 = cir.call @malloc(%4) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc100)
    %6 = cir.cast(bitcast, %5 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc289)
    cir.store %6, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc286)
    cir.scope {
      %11 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc105)
      %12 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc106)
      %13 = cir.cmp(eq, %11, %12) : !cir.ptr<!s8i>, !cir.bool loc(#loc291)
      cir.if %13 {
        %14 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc108)
        %15 = cir.const #cir.int<1> : !s32i loc(#loc109)
        %16 = cir.unary(minus, %15) : !s32i, !s32i loc(#loc110)
        cir.call @exit(%16) : (!s32i) -> () extra(#fn_attr) loc(#loc108)
      } loc(#loc292)
    } loc(#loc290)
    %7 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc111)
    %8 = cir.const #cir.int<8> : !u64i loc(#loc293)
    %9 = cir.call @malloc(%8) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc111)
    %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc294)
    cir.store %10, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc287)
    cir.scope {
      %11 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc116)
      %12 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc117)
      %13 = cir.cmp(eq, %11, %12) : !cir.ptr<!s8i>, !cir.bool loc(#loc296)
      cir.if %13 {
        %14 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc119)
        %15 = cir.const #cir.int<1> : !s32i loc(#loc120)
        %16 = cir.unary(minus, %15) : !s32i, !s32i loc(#loc121)
        cir.call @exit(%16) : (!s32i) -> () extra(#fn_attr) loc(#loc119)
      } loc(#loc297)
    } loc(#loc295)
    cir.scope {
      %11 = cir.call @globalReturnsTrueOrFalse() : () -> !s32i loc(#loc124)
      %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc299)
      cir.if %12 {
        %13 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc129)
        cir.store %13, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc301)
      } else {
        %13 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc131)
        cir.store %13, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc302)
      } loc(#loc300)
    } loc(#loc298)
    cir.scope {
      %11 = cir.call @globalReturnsTrueOrFalse() : () -> !s32i loc(#loc135)
      %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc304)
      cir.if %12 {
        cir.scope {
          %13 = cir.alloca !cir.ptr<!ty_OneIntClass>, !cir.ptr<!cir.ptr<!ty_OneIntClass>>, ["classOne", init] {alignment = 8 : i64} loc(#loc307)
          %14 = cir.const #cir.int<4> : !u64i loc(#loc308)
          %15 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc145)
          %16 = cir.cast(bitcast, %15 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc145)
          %17 = cir.cast(bitcast, %16 : !cir.ptr<!void>), !cir.ptr<!ty_OneIntClass> loc(#loc308)
          cir.call @_ZN11OneIntClassC2Ev(%17) : (!cir.ptr<!ty_OneIntClass>) -> () extra(#fn_attr) loc(#loc143)
          cir.store %17, %13 : !cir.ptr<!ty_OneIntClass>, !cir.ptr<!cir.ptr<!ty_OneIntClass>> loc(#loc307)
          %18 = cir.const #cir.int<5> : !s32i loc(#loc146)
          %19 = cir.load %13 : !cir.ptr<!cir.ptr<!ty_OneIntClass>>, !cir.ptr<!ty_OneIntClass> loc(#loc147)
          %20 = cir.get_member %19[0] {name = "intOne"} : !cir.ptr<!ty_OneIntClass> -> !cir.ptr<!s32i> loc(#loc86)
          cir.store %18, %20 : !s32i, !cir.ptr<!s32i> loc(#loc309)
          %21 = cir.load %13 : !cir.ptr<!cir.ptr<!ty_OneIntClass>>, !cir.ptr<!ty_OneIntClass> loc(#loc148)
          %22 = cir.get_member %21[0] {name = "intOne"} : !cir.ptr<!ty_OneIntClass> -> !cir.ptr<!s32i> loc(#loc86)
          %23 = cir.load %22 : !cir.ptr<!s32i>, !s32i loc(#loc149)
          cir.call @printIntLine(%23) : (!s32i) -> () loc(#loc150)
          %24 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc151)
          %25 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc152)
          %26 = cir.cast(bitcast, %25 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc152)
          cir.call @free(%26) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc151)
        } loc(#loc306)
      } else {
        cir.scope {
          %13 = cir.alloca !cir.ptr<!ty_OneIntClass>, !cir.ptr<!cir.ptr<!ty_OneIntClass>>, ["classOne", init] {alignment = 8 : i64} loc(#loc311)
          %14 = cir.const #cir.int<4> : !u64i loc(#loc312)
          %15 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc158)
          %16 = cir.cast(bitcast, %15 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc158)
          %17 = cir.cast(bitcast, %16 : !cir.ptr<!void>), !cir.ptr<!ty_OneIntClass> loc(#loc312)
          cir.call @_ZN11OneIntClassC2Ev(%17) : (!cir.ptr<!ty_OneIntClass>) -> () extra(#fn_attr) loc(#loc156)
          cir.store %17, %13 : !cir.ptr<!ty_OneIntClass>, !cir.ptr<!cir.ptr<!ty_OneIntClass>> loc(#loc311)
          %18 = cir.const #cir.int<5> : !s32i loc(#loc159)
          %19 = cir.load %13 : !cir.ptr<!cir.ptr<!ty_OneIntClass>>, !cir.ptr<!ty_OneIntClass> loc(#loc160)
          %20 = cir.get_member %19[0] {name = "intOne"} : !cir.ptr<!ty_OneIntClass> -> !cir.ptr<!s32i> loc(#loc86)
          cir.store %18, %20 : !s32i, !cir.ptr<!s32i> loc(#loc313)
          %21 = cir.load %13 : !cir.ptr<!cir.ptr<!ty_OneIntClass>>, !cir.ptr<!ty_OneIntClass> loc(#loc161)
          %22 = cir.get_member %21[0] {name = "intOne"} : !cir.ptr<!ty_OneIntClass> -> !cir.ptr<!s32i> loc(#loc86)
          %23 = cir.load %22 : !cir.ptr<!s32i>, !s32i loc(#loc162)
          cir.call @printIntLine(%23) : (!s32i) -> () loc(#loc163)
          %24 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc164)
          %25 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc165)
          %26 = cir.cast(bitcast, %25 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc165)
          cir.call @free(%26) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc164)
        } loc(#loc310)
      } loc(#loc305)
    } loc(#loc303)
    cir.return loc(#loc93)
  } loc(#loc284)
  cir.func internal private  @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_12L7goodG2BEv() extra(#fn_attr2) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc315)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc316)
    %2 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc317)
    %3 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc174)
    %4 = cir.const #cir.int<4> : !u64i loc(#loc318)
    %5 = cir.call @malloc(%4) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc174)
    %6 = cir.cast(bitcast, %5 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc319)
    cir.store %6, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc316)
    cir.scope {
      %11 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc179)
      %12 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc180)
      %13 = cir.cmp(eq, %11, %12) : !cir.ptr<!s8i>, !cir.bool loc(#loc321)
      cir.if %13 {
        %14 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc182)
        %15 = cir.const #cir.int<1> : !s32i loc(#loc183)
        %16 = cir.unary(minus, %15) : !s32i, !s32i loc(#loc184)
        cir.call @exit(%16) : (!s32i) -> () extra(#fn_attr) loc(#loc182)
      } loc(#loc322)
    } loc(#loc320)
    %7 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc185)
    %8 = cir.const #cir.int<8> : !u64i loc(#loc323)
    %9 = cir.call @malloc(%8) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc185)
    %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc324)
    cir.store %10, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc317)
    cir.scope {
      %11 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc190)
      %12 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc191)
      %13 = cir.cmp(eq, %11, %12) : !cir.ptr<!s8i>, !cir.bool loc(#loc326)
      cir.if %13 {
        %14 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc193)
        %15 = cir.const #cir.int<1> : !s32i loc(#loc194)
        %16 = cir.unary(minus, %15) : !s32i, !s32i loc(#loc195)
        cir.call @exit(%16) : (!s32i) -> () extra(#fn_attr) loc(#loc193)
      } loc(#loc327)
    } loc(#loc325)
    cir.scope {
      %11 = cir.call @globalReturnsTrueOrFalse() : () -> !s32i loc(#loc198)
      %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc329)
      cir.if %12 {
        %13 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc203)
        cir.store %13, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc331)
      } else {
        %13 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc205)
        cir.store %13, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc332)
      } loc(#loc330)
    } loc(#loc328)
    cir.scope {
      %11 = cir.call @globalReturnsTrueOrFalse() : () -> !s32i loc(#loc209)
      %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc334)
      cir.if %12 {
        cir.scope {
          %13 = cir.alloca !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, ["classTwo", init] {alignment = 8 : i64} loc(#loc337)
          %14 = cir.const #cir.int<8> : !u64i loc(#loc338)
          %15 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc219)
          %16 = cir.cast(bitcast, %15 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc219)
          %17 = cir.cast(bitcast, %16 : !cir.ptr<!void>), !cir.ptr<!ty_TwoIntsClass> loc(#loc338)
          cir.call @_ZN12TwoIntsClassC2Ev(%17) : (!cir.ptr<!ty_TwoIntsClass>) -> () extra(#fn_attr) loc(#loc217)
          cir.store %17, %13 : !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>> loc(#loc337)
          %18 = cir.const #cir.int<5> : !s32i loc(#loc220)
          %19 = cir.load %13 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc221)
          %20 = cir.get_member %19[0] {name = "intOne"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc69)
          cir.store %18, %20 : !s32i, !cir.ptr<!s32i> loc(#loc339)
          %21 = cir.const #cir.int<10> : !s32i loc(#loc222)
          %22 = cir.load %13 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc223)
          %23 = cir.get_member %22[1] {name = "intTwo"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc72)
          cir.store %21, %23 : !s32i, !cir.ptr<!s32i> loc(#loc340)
          %24 = cir.load %13 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc224)
          %25 = cir.get_member %24[0] {name = "intOne"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc69)
          %26 = cir.load %25 : !cir.ptr<!s32i>, !s32i loc(#loc225)
          cir.call @printIntLine(%26) : (!s32i) -> () loc(#loc226)
          %27 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc227)
          %28 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc228)
          %29 = cir.cast(bitcast, %28 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc228)
          cir.call @free(%29) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc227)
        } loc(#loc336)
      } else {
        cir.scope {
          %13 = cir.alloca !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, ["classTwo", init] {alignment = 8 : i64} loc(#loc342)
          %14 = cir.const #cir.int<8> : !u64i loc(#loc343)
          %15 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc234)
          %16 = cir.cast(bitcast, %15 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc234)
          %17 = cir.cast(bitcast, %16 : !cir.ptr<!void>), !cir.ptr<!ty_TwoIntsClass> loc(#loc343)
          cir.call @_ZN12TwoIntsClassC2Ev(%17) : (!cir.ptr<!ty_TwoIntsClass>) -> () extra(#fn_attr) loc(#loc232)
          cir.store %17, %13 : !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>> loc(#loc342)
          %18 = cir.const #cir.int<5> : !s32i loc(#loc235)
          %19 = cir.load %13 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc236)
          %20 = cir.get_member %19[0] {name = "intOne"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc69)
          cir.store %18, %20 : !s32i, !cir.ptr<!s32i> loc(#loc344)
          %21 = cir.const #cir.int<10> : !s32i loc(#loc237)
          %22 = cir.load %13 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc238)
          %23 = cir.get_member %22[1] {name = "intTwo"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc72)
          cir.store %21, %23 : !s32i, !cir.ptr<!s32i> loc(#loc345)
          %24 = cir.load %13 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc239)
          %25 = cir.get_member %24[0] {name = "intOne"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc69)
          %26 = cir.load %25 : !cir.ptr<!s32i>, !s32i loc(#loc240)
          cir.call @printIntLine(%26) : (!s32i) -> () loc(#loc241)
          %27 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc242)
          %28 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc243)
          %29 = cir.cast(bitcast, %28 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc243)
          cir.call @free(%29) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc242)
        } loc(#loc341)
      } loc(#loc335)
    } loc(#loc333)
    cir.return loc(#loc167)
  } loc(#loc314)
  cir.func  @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_124goodEv() extra(#fn_attr2) {
    cir.call @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_12L7goodB2GEv() : () -> () loc(#loc246)
    cir.call @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_12L7goodG2BEv() : () -> () loc(#loc247)
    cir.return loc(#loc245)
  } loc(#loc346)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":52:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":52:30)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc9 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc10 = loc("/usr/include/stdlib.h":687:1)
#loc11 = loc("/usr/include/stdlib.h":687:32)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":24:1)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":73:1)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":26:5)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":26:12)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":27:5)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":27:62)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":29:5)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":29:64)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":27:36)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":27:43)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":27:61)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":28:5)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":28:42)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":28:9)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":28:26)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":28:32)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":28:33)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":28:39)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":28:38)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":29:37)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":29:44)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":29:63)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":30:5)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":30:43)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":30:9)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":30:27)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":30:33)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":30:34)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":30:40)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":30:39)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":31:5)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":40:5)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":31:8)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":31:33)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":32:5)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":35:5)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":37:5)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":34:16)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":34:9)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":39:16)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":39:9)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":41:5)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":72:5)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":41:8)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":41:33)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":42:5)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":57:5)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":59:5)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":43:9)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":56:9)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":49:13)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":49:49)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":49:39)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":49:43)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":51:32)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":51:13)
#loc69 = loc("../../../testcasesupport/std_testcase.h":64:13)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":52:32)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":52:13)
#loc72 = loc("../../../testcasesupport/std_testcase.h":65:13)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":53:26)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":53:36)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":53:13)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":55:13)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":55:18)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":60:9)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":71:9)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":66:13)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":66:48)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":66:38)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":66:42)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":68:32)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":68:13)
#loc86 = loc("../../../testcasesupport/std_testcase.h":71:13)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":69:26)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":69:36)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":69:13)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":70:13)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":70:18)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":82:1)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":129:1)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":84:5)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":84:12)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":85:5)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":85:62)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":87:5)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":87:64)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":85:36)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":85:43)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":85:61)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":86:5)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":86:42)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":86:9)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":86:26)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":86:32)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":86:33)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":86:39)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":86:38)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":87:37)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":87:44)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":87:63)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":88:5)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":88:43)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":88:9)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":88:27)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":88:33)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":88:34)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":88:40)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":88:39)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":89:5)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":98:5)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":89:8)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":89:33)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":90:5)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":93:5)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":95:5)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":92:16)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":92:9)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":97:16)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":97:9)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":99:5)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":128:5)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":99:8)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":99:33)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":100:5)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":113:5)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":115:5)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":101:9)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":112:9)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":107:13)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":107:48)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":107:38)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":107:42)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":109:32)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":109:13)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":110:26)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":110:36)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":110:13)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":111:13)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":111:18)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":116:9)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":127:9)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":122:13)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":122:48)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":122:38)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":122:42)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":124:32)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":124:13)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":125:26)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":125:36)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":125:13)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":126:13)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":126:18)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":134:1)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":185:1)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":136:5)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":136:12)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":137:5)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":137:62)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":139:5)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":139:64)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":137:36)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":137:43)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":137:61)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":138:5)
#loc178 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":138:42)
#loc179 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":138:9)
#loc180 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":138:26)
#loc181 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":138:32)
#loc182 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":138:33)
#loc183 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":138:39)
#loc184 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":138:38)
#loc185 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":139:37)
#loc186 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":139:44)
#loc187 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":139:63)
#loc188 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":140:5)
#loc189 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":140:43)
#loc190 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":140:9)
#loc191 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":140:27)
#loc192 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":140:33)
#loc193 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":140:34)
#loc194 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":140:40)
#loc195 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":140:39)
#loc196 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":141:5)
#loc197 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":150:5)
#loc198 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":141:8)
#loc199 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":141:33)
#loc200 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":142:5)
#loc201 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":145:5)
#loc202 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":147:5)
#loc203 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":144:16)
#loc204 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":144:9)
#loc205 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":149:16)
#loc206 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":149:9)
#loc207 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":151:5)
#loc208 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":184:5)
#loc209 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":151:8)
#loc210 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":151:33)
#loc211 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":152:5)
#loc212 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":167:5)
#loc213 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":169:5)
#loc214 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":153:9)
#loc215 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":166:9)
#loc216 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":159:13)
#loc217 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":159:49)
#loc218 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":159:39)
#loc219 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":159:43)
#loc220 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":161:32)
#loc221 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":161:13)
#loc222 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":162:32)
#loc223 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":162:13)
#loc224 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":163:26)
#loc225 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":163:36)
#loc226 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":163:13)
#loc227 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":165:13)
#loc228 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":165:18)
#loc229 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":170:9)
#loc230 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":183:9)
#loc231 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":176:13)
#loc232 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":176:49)
#loc233 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":176:39)
#loc234 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":176:43)
#loc235 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":178:32)
#loc236 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":178:13)
#loc237 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":179:32)
#loc238 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":179:13)
#loc239 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":180:26)
#loc240 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":180:36)
#loc241 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":180:13)
#loc242 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":182:13)
#loc243 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":182:18)
#loc244 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":187:1)
#loc245 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":191:1)
#loc246 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":189:5)
#loc247 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_12.cpp":190:5)
#loc248 = loc(fused[#loc1, #loc2])
#loc249 = loc(fused[#loc3, #loc4])
#loc250 = loc(fused[#loc5, #loc6])
#loc251 = loc(fused[#loc8, #loc9])
#loc252 = loc(fused[#loc10, #loc11])
#loc253 = loc(fused[#loc13, #loc14])
#loc254 = loc(fused[#loc15, #loc16])
#loc255 = loc(fused[#loc17, #loc18])
#loc256 = loc(fused[#loc19, #loc20])
#loc257 = loc(fused[#loc22, #loc23])
#loc258 = loc(fused[#loc21, #loc18])
#loc259 = loc(fused[#loc24, #loc25])
#loc260 = loc(fused[#loc26, #loc27])
#loc261 = loc(fused[#loc28, #loc25])
#loc262 = loc(fused[#loc33, #loc34])
#loc263 = loc(fused[#loc32, #loc20])
#loc264 = loc(fused[#loc35, #loc36])
#loc265 = loc(fused[#loc37, #loc38])
#loc266 = loc(fused[#loc39, #loc36])
#loc267 = loc(fused[#loc43, #loc44])
#loc268 = loc(fused[#loc45, #loc46])
#loc269 = loc(fused[#loc47, #loc48, #loc49, #loc44])
#loc270 = loc(fused[#loc51, #loc50])
#loc271 = loc(fused[#loc53, #loc52])
#loc272 = loc(fused[#loc54, #loc55])
#loc273 = loc(fused[#loc56, #loc57])
#loc274 = loc(fused[#loc58, #loc59, #loc60, #loc55])
#loc275 = loc(fused[#loc61, #loc62])
#loc276 = loc(fused[#loc63, #loc64])
#loc277 = loc(fused[#loc65, #loc64])
#loc278 = loc(fused[#loc68, #loc67])
#loc279 = loc(fused[#loc71, #loc70])
#loc280 = loc(fused[#loc78, #loc79])
#loc281 = loc(fused[#loc80, #loc81])
#loc282 = loc(fused[#loc82, #loc81])
#loc283 = loc(fused[#loc85, #loc84])
#loc284 = loc(fused[#loc92, #loc93])
#loc285 = loc(fused[#loc94, #loc95])
#loc286 = loc(fused[#loc96, #loc97])
#loc287 = loc(fused[#loc98, #loc99])
#loc288 = loc(fused[#loc101, #loc102])
#loc289 = loc(fused[#loc100, #loc97])
#loc290 = loc(fused[#loc103, #loc104])
#loc291 = loc(fused[#loc105, #loc106])
#loc292 = loc(fused[#loc107, #loc104])
#loc293 = loc(fused[#loc112, #loc113])
#loc294 = loc(fused[#loc111, #loc99])
#loc295 = loc(fused[#loc114, #loc115])
#loc296 = loc(fused[#loc116, #loc117])
#loc297 = loc(fused[#loc118, #loc115])
#loc298 = loc(fused[#loc122, #loc123])
#loc299 = loc(fused[#loc124, #loc125])
#loc300 = loc(fused[#loc126, #loc127, #loc128, #loc123])
#loc301 = loc(fused[#loc130, #loc129])
#loc302 = loc(fused[#loc132, #loc131])
#loc303 = loc(fused[#loc133, #loc134])
#loc304 = loc(fused[#loc135, #loc136])
#loc305 = loc(fused[#loc137, #loc138, #loc139, #loc134])
#loc306 = loc(fused[#loc140, #loc141])
#loc307 = loc(fused[#loc142, #loc143])
#loc308 = loc(fused[#loc144, #loc143])
#loc309 = loc(fused[#loc147, #loc146])
#loc310 = loc(fused[#loc153, #loc154])
#loc311 = loc(fused[#loc155, #loc156])
#loc312 = loc(fused[#loc157, #loc156])
#loc313 = loc(fused[#loc160, #loc159])
#loc314 = loc(fused[#loc166, #loc167])
#loc315 = loc(fused[#loc168, #loc169])
#loc316 = loc(fused[#loc170, #loc171])
#loc317 = loc(fused[#loc172, #loc173])
#loc318 = loc(fused[#loc175, #loc176])
#loc319 = loc(fused[#loc174, #loc171])
#loc320 = loc(fused[#loc177, #loc178])
#loc321 = loc(fused[#loc179, #loc180])
#loc322 = loc(fused[#loc181, #loc178])
#loc323 = loc(fused[#loc186, #loc187])
#loc324 = loc(fused[#loc185, #loc173])
#loc325 = loc(fused[#loc188, #loc189])
#loc326 = loc(fused[#loc190, #loc191])
#loc327 = loc(fused[#loc192, #loc189])
#loc328 = loc(fused[#loc196, #loc197])
#loc329 = loc(fused[#loc198, #loc199])
#loc330 = loc(fused[#loc200, #loc201, #loc202, #loc197])
#loc331 = loc(fused[#loc204, #loc203])
#loc332 = loc(fused[#loc206, #loc205])
#loc333 = loc(fused[#loc207, #loc208])
#loc334 = loc(fused[#loc209, #loc210])
#loc335 = loc(fused[#loc211, #loc212, #loc213, #loc208])
#loc336 = loc(fused[#loc214, #loc215])
#loc337 = loc(fused[#loc216, #loc217])
#loc338 = loc(fused[#loc218, #loc217])
#loc339 = loc(fused[#loc221, #loc220])
#loc340 = loc(fused[#loc223, #loc222])
#loc341 = loc(fused[#loc229, #loc230])
#loc342 = loc(fused[#loc231, #loc232])
#loc343 = loc(fused[#loc233, #loc232])
#loc344 = loc(fused[#loc236, #loc235])
#loc345 = loc(fused[#loc238, #loc237])
#loc346 = loc(fused[#loc244, #loc245])
