!s32i = !cir.int<s, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE680_Integer_Overflow_to_Buffer_Overflow/CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_61a.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little", "dlti.mangling_mode" = "e">} {
  cir.func private @CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_61b_badSource(!s32i) -> !s32i loc(#loc119)
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc120)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc121)
  cir.func private @printIntLine(!s32i) loc(#loc122)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc123)
  cir.func no_proto @CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_61_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc125)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc15)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc16)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc126)
    %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc18)
    %4 = cir.call @CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_61b_badSource(%3) : (!s32i) -> !s32i loc(#loc19)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc127)
    cir.scope {
      %5 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc129)
      %6 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["intPointer"] {alignment = 8 : i64} loc(#loc130)
      %7 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc28)
      %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc29)
      %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc29)
      %10 = cir.const #cir.int<4> : !u64i loc(#loc131)
      %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc132)
      %12 = cir.call @malloc(%11) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc28)
      %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc133)
      cir.store %13, %6 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc134)
      cir.scope {
        %21 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc36)
        %22 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc37)
        %23 = cir.cast(bitcast, %22 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc37)
        %24 = cir.cmp(eq, %21, %23) : !cir.ptr<!s32i>, !cir.bool loc(#loc136)
        cir.if %24 {
          %25 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc39)
          %26 = cir.const #cir.int<1> : !s32i loc(#loc40)
          %27 = cir.unary(minus, %26) nsw : !s32i, !s32i loc(#loc41)
          cir.call @exit(%27) : (!s32i) -> () extra(#fn_attr) loc(#loc39)
        } loc(#loc137)
      } loc(#loc135)
      cir.scope {
        %21 = cir.const #cir.int<0> : !s32i loc(#loc44)
        %22 = cir.cast(integral, %21 : !s32i), !u64i loc(#loc44)
        cir.store %22, %5 : !u64i, !cir.ptr<!u64i> loc(#loc139)
        cir.for : cond {
          %23 = cir.load %5 : !cir.ptr<!u64i>, !u64i loc(#loc46)
          %24 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc47)
          %25 = cir.cast(integral, %24 : !s32i), !u64i loc(#loc47)
          %26 = cir.cmp(lt, %23, %25) : !u64i, !cir.bool loc(#loc140)
          cir.condition(%26) loc(#loc48)
        } body {
          cir.scope {
            %23 = cir.const #cir.int<0> : !s32i loc(#loc50)
            %24 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc51)
            %25 = cir.load %5 : !cir.ptr<!u64i>, !u64i loc(#loc52)
            %26 = cir.ptr_stride(%24 : !cir.ptr<!s32i>, %25 : !u64i), !cir.ptr<!s32i> loc(#loc53)
            cir.store %23, %26 : !s32i, !cir.ptr<!s32i> loc(#loc142)
          } loc(#loc141)
          cir.yield loc(#loc43)
        } step {
          %23 = cir.load %5 : !cir.ptr<!u64i>, !u64i loc(#loc54)
          %24 = cir.unary(inc, %23) : !u64i, !u64i loc(#loc55)
          cir.store %24, %5 : !u64i, !cir.ptr<!u64i> loc(#loc143)
          cir.yield loc(#loc138)
        } loc(#loc138)
      } loc(#loc138)
      %14 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc56)
      %15 = cir.const #cir.int<0> : !s32i loc(#loc57)
      %16 = cir.ptr_stride(%14 : !cir.ptr<!s32i>, %15 : !s32i), !cir.ptr<!s32i> loc(#loc58)
      %17 = cir.load %16 : !cir.ptr<!s32i>, !s32i loc(#loc56)
      cir.call @printIntLine(%17) : (!s32i) -> () loc(#loc59)
      %18 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc60)
      %19 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc61)
      %20 = cir.cast(bitcast, %19 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc61)
      cir.call @free(%20) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc60)
    } loc(#loc128)
    cir.return loc(#loc12)
  } loc(#loc124)
  cir.func no_proto @CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_61_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc145)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc64)
    cir.return loc(#loc63)
  } loc(#loc144)
  cir.func private @CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_61b_goodG2BSource(!s32i) -> !s32i loc(#loc146)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc148)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc72)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc73)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc149)
    %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc75)
    %4 = cir.call @CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_61b_goodG2BSource(%3) : (!s32i) -> !s32i loc(#loc76)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc150)
    cir.scope {
      %5 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc152)
      %6 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["intPointer"] {alignment = 8 : i64} loc(#loc153)
      %7 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc85)
      %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc86)
      %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc86)
      %10 = cir.const #cir.int<4> : !u64i loc(#loc154)
      %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc155)
      %12 = cir.call @malloc(%11) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc85)
      %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc156)
      cir.store %13, %6 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc157)
      cir.scope {
        %21 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc93)
        %22 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc94)
        %23 = cir.cast(bitcast, %22 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc94)
        %24 = cir.cmp(eq, %21, %23) : !cir.ptr<!s32i>, !cir.bool loc(#loc159)
        cir.if %24 {
          %25 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc96)
          %26 = cir.const #cir.int<1> : !s32i loc(#loc97)
          %27 = cir.unary(minus, %26) nsw : !s32i, !s32i loc(#loc98)
          cir.call @exit(%27) : (!s32i) -> () extra(#fn_attr) loc(#loc96)
        } loc(#loc160)
      } loc(#loc158)
      cir.scope {
        %21 = cir.const #cir.int<0> : !s32i loc(#loc101)
        %22 = cir.cast(integral, %21 : !s32i), !u64i loc(#loc101)
        cir.store %22, %5 : !u64i, !cir.ptr<!u64i> loc(#loc162)
        cir.for : cond {
          %23 = cir.load %5 : !cir.ptr<!u64i>, !u64i loc(#loc103)
          %24 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc104)
          %25 = cir.cast(integral, %24 : !s32i), !u64i loc(#loc104)
          %26 = cir.cmp(lt, %23, %25) : !u64i, !cir.bool loc(#loc163)
          cir.condition(%26) loc(#loc105)
        } body {
          cir.scope {
            %23 = cir.const #cir.int<0> : !s32i loc(#loc107)
            %24 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc108)
            %25 = cir.load %5 : !cir.ptr<!u64i>, !u64i loc(#loc109)
            %26 = cir.ptr_stride(%24 : !cir.ptr<!s32i>, %25 : !u64i), !cir.ptr<!s32i> loc(#loc110)
            cir.store %23, %26 : !s32i, !cir.ptr<!s32i> loc(#loc165)
          } loc(#loc164)
          cir.yield loc(#loc100)
        } step {
          %23 = cir.load %5 : !cir.ptr<!u64i>, !u64i loc(#loc111)
          %24 = cir.unary(inc, %23) : !u64i, !u64i loc(#loc112)
          cir.store %24, %5 : !u64i, !cir.ptr<!u64i> loc(#loc166)
          cir.yield loc(#loc161)
        } loc(#loc161)
      } loc(#loc161)
      %14 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc113)
      %15 = cir.const #cir.int<0> : !s32i loc(#loc114)
      %16 = cir.ptr_stride(%14 : !cir.ptr<!s32i>, %15 : !s32i), !cir.ptr<!s32i> loc(#loc115)
      %17 = cir.load %16 : !cir.ptr<!s32i>, !s32i loc(#loc113)
      cir.call @printIntLine(%17) : (!s32i) -> () loc(#loc116)
      %18 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc117)
      %19 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc118)
      %20 = cir.cast(bitcast, %19 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc118)
      cir.call @free(%20) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc117)
    } loc(#loc151)
    cir.return loc(#loc69)
  } loc(#loc147)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE680_Integer_Overflow_to_Buffer_Overflow/CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_61a.c":0:0)
#loc1 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_61a.c":22:1)
#loc2 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_61a.c":22:85)
#loc3 = loc("/usr/include/stdlib.h":672:1)
#loc4 = loc("/usr/include/stdlib.h":672:45)
#loc5 = loc("/usr/include/stdlib.h":756:1)
#loc6 = loc("/usr/include/stdlib.h":756:70)
#loc7 = loc("../../testcasesupport/std_testcase_io.h":18:1)
#loc8 = loc("../../testcasesupport/std_testcase_io.h":18:33)
#loc9 = loc("/usr/include/stdlib.h":687:1)
#loc10 = loc("/usr/include/stdlib.h":687:32)
#loc11 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_61a.c":24:1)
#loc12 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_61a.c":44:1)
#loc13 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_61a.c":26:5)
#loc14 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_61a.c":26:9)
#loc15 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_61a.c":28:13)
#loc16 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_61a.c":28:12)
#loc17 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_61a.c":28:5)
#loc18 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_61a.c":29:84)
#loc19 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_61a.c":29:12)
#loc20 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_61a.c":29:5)
#loc21 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_61a.c":29:88)
#loc22 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_61a.c":30:5)
#loc23 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_61a.c":43:5)
#loc24 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_61a.c":31:9)
#loc25 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_61a.c":31:16)
#loc26 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_61a.c":32:9)
#loc27 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_61a.c":32:14)
#loc28 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_61a.c":35:28)
#loc29 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_61a.c":35:35)
#loc30 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_61a.c":35:42)
#loc31 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_61a.c":35:52)
#loc32 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_61a.c":35:53)
#loc33 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_61a.c":35:9)
#loc34 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_61a.c":36:9)
#loc35 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_61a.c":36:43)
#loc36 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_61a.c":36:13)
#loc37 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_61a.c":36:27)
#loc38 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_61a.c":36:33)
#loc39 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_61a.c":36:34)
#loc40 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_61a.c":36:40)
#loc41 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_61a.c":36:39)
#loc42 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_61a.c":37:9)
#loc43 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_61a.c":40:9)
#loc44 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_61a.c":37:18)
#loc45 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_61a.c":37:14)
#loc46 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_61a.c":37:21)
#loc47 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_61a.c":37:33)
#loc48 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_61a.c":37:23)
#loc49 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_61a.c":38:9)
#loc50 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_61a.c":39:29)
#loc51 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_61a.c":39:13)
#loc52 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_61a.c":39:24)
#loc53 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_61a.c":39:25)
#loc54 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_61a.c":37:40)
#loc55 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_61a.c":37:39)
#loc56 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_61a.c":41:22)
#loc57 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_61a.c":41:33)
#loc58 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_61a.c":41:34)
#loc59 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_61a.c":41:9)
#loc60 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_61a.c":42:9)
#loc61 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_61a.c":42:14)
#loc62 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_61a.c":75:1)
#loc63 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_61a.c":78:1)
#loc64 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_61a.c":77:5)
#loc65 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_61a.c":77:13)
#loc66 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_61a.c":51:1)
#loc67 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_61a.c":51:89)
#loc68 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_61a.c":53:1)
#loc69 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_61a.c":73:1)
#loc70 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_61a.c":55:5)
#loc71 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_61a.c":55:9)
#loc72 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_61a.c":57:13)
#loc73 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_61a.c":57:12)
#loc74 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_61a.c":57:5)
#loc75 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_61a.c":58:88)
#loc76 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_61a.c":58:12)
#loc77 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_61a.c":58:5)
#loc78 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_61a.c":58:92)
#loc79 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_61a.c":59:5)
#loc80 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_61a.c":72:5)
#loc81 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_61a.c":60:9)
#loc82 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_61a.c":60:16)
#loc83 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_61a.c":61:9)
#loc84 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_61a.c":61:14)
#loc85 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_61a.c":64:28)
#loc86 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_61a.c":64:35)
#loc87 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_61a.c":64:42)
#loc88 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_61a.c":64:52)
#loc89 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_61a.c":64:53)
#loc90 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_61a.c":64:9)
#loc91 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_61a.c":65:9)
#loc92 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_61a.c":65:43)
#loc93 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_61a.c":65:13)
#loc94 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_61a.c":65:27)
#loc95 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_61a.c":65:33)
#loc96 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_61a.c":65:34)
#loc97 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_61a.c":65:40)
#loc98 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_61a.c":65:39)
#loc99 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_61a.c":66:9)
#loc100 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_61a.c":69:9)
#loc101 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_61a.c":66:18)
#loc102 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_61a.c":66:14)
#loc103 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_61a.c":66:21)
#loc104 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_61a.c":66:33)
#loc105 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_61a.c":66:23)
#loc106 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_61a.c":67:9)
#loc107 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_61a.c":68:29)
#loc108 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_61a.c":68:13)
#loc109 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_61a.c":68:24)
#loc110 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_61a.c":68:25)
#loc111 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_61a.c":66:40)
#loc112 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_61a.c":66:39)
#loc113 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_61a.c":70:22)
#loc114 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_61a.c":70:33)
#loc115 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_61a.c":70:34)
#loc116 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_61a.c":70:9)
#loc117 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_61a.c":71:9)
#loc118 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_61a.c":71:14)
#loc119 = loc(fused[#loc1, #loc2])
#loc120 = loc(fused[#loc3, #loc4])
#loc121 = loc(fused[#loc5, #loc6])
#loc122 = loc(fused[#loc7, #loc8])
#loc123 = loc(fused[#loc9, #loc10])
#loc124 = loc(fused[#loc11, #loc12])
#loc125 = loc(fused[#loc13, #loc14])
#loc126 = loc(fused[#loc17, #loc15])
#loc127 = loc(fused[#loc20, #loc21])
#loc128 = loc(fused[#loc22, #loc23])
#loc129 = loc(fused[#loc24, #loc25])
#loc130 = loc(fused[#loc26, #loc27])
#loc131 = loc(fused[#loc30, #loc31])
#loc132 = loc(fused[#loc29, #loc31])
#loc133 = loc(fused[#loc28, #loc32])
#loc134 = loc(fused[#loc33, #loc32])
#loc135 = loc(fused[#loc34, #loc35])
#loc136 = loc(fused[#loc36, #loc37])
#loc137 = loc(fused[#loc38, #loc35])
#loc138 = loc(fused[#loc42, #loc43])
#loc139 = loc(fused[#loc45, #loc44])
#loc140 = loc(fused[#loc46, #loc47])
#loc141 = loc(fused[#loc49, #loc43])
#loc142 = loc(fused[#loc51, #loc50])
#loc143 = loc(fused[#loc55, #loc54])
#loc144 = loc(fused[#loc62, #loc63])
#loc145 = loc(fused[#loc64, #loc65])
#loc146 = loc(fused[#loc66, #loc67])
#loc147 = loc(fused[#loc68, #loc69])
#loc148 = loc(fused[#loc70, #loc71])
#loc149 = loc(fused[#loc74, #loc72])
#loc150 = loc(fused[#loc77, #loc78])
#loc151 = loc(fused[#loc79, #loc80])
#loc152 = loc(fused[#loc81, #loc82])
#loc153 = loc(fused[#loc83, #loc84])
#loc154 = loc(fused[#loc87, #loc88])
#loc155 = loc(fused[#loc86, #loc88])
#loc156 = loc(fused[#loc85, #loc89])
#loc157 = loc(fused[#loc90, #loc89])
#loc158 = loc(fused[#loc91, #loc92])
#loc159 = loc(fused[#loc93, #loc94])
#loc160 = loc(fused[#loc95, #loc92])
#loc161 = loc(fused[#loc99, #loc100])
#loc162 = loc(fused[#loc102, #loc101])
#loc163 = loc(fused[#loc103, #loc104])
#loc164 = loc(fused[#loc106, #loc100])
#loc165 = loc(fused[#loc108, #loc107])
#loc166 = loc(fused[#loc112, #loc111])
