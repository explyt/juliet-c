!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc19 = loc("CWE400_Resource_Exhaustion__rand_sleep_31.c":36:13)
#loc64 = loc("CWE400_Resource_Exhaustion__rand_sleep_31.c":74:13)
#loc72 = loc("CWE400_Resource_Exhaustion__rand_sleep_31.c":79:23)
#true = #cir.bool<true> : !cir.bool
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE400_Resource_Exhaustion/s02/CWE400_Resource_Exhaustion__rand_sleep_31.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f80 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc82)
  cir.func private @usleep(!u32i) -> !s32i loc(#loc83)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc84)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Sleep time possibly too long\00" : !cir.array<!s8i x 29>> : !cir.array<!s8i x 29> {alignment = 1 : i64} loc(#loc7)
  cir.func no_proto @CWE400_Resource_Exhaustion__rand_sleep_31_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["countCopy", init] {alignment = 4 : i64} loc(#loc86)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count", init] {alignment = 4 : i64} loc(#loc87)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count"] {alignment = 4 : i64} loc(#loc88)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc16)
    %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc17)
    cir.store %4, %2 : !s32i, !cir.ptr<!s32i> loc(#loc89)
    %5 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc19)
    %6 = cir.const #cir.int<1> : !s32i loc(#loc19)
    %7 = cir.binop(and, %5, %6) : !s32i loc(#loc19)
    %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc19)
    cir.brcond %8 ^bb1, ^bb2 loc(#loc19)
  ^bb1:  // pred: ^bb0
    %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc19)
    %10 = cir.cast(integral, %9 : !s32i), !u32i loc(#loc19)
    %11 = cir.const #cir.int<30> : !s32i loc(#loc19)
    %12 = cir.shift(left, %10 : !u32i, %11 : !s32i) -> !u32i loc(#loc19)
    %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc19)
    %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc19)
    %15 = cir.const #cir.int<15> : !s32i loc(#loc19)
    %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc19)
    %17 = cir.binop(xor, %12, %16) : !u32i loc(#loc19)
    %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc19)
    %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc19)
    %20 = cir.binop(xor, %17, %19) : !u32i loc(#loc19)
    cir.br ^bb3(%20 : !u32i) loc(#loc19)
  ^bb2:  // pred: ^bb0
    %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc19)
    %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc19)
    %23 = cir.const #cir.int<30> : !s32i loc(#loc19)
    %24 = cir.shift(left, %22 : !u32i, %23 : !s32i) -> !u32i loc(#loc19)
    %25 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc19)
    %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc19)
    %27 = cir.const #cir.int<15> : !s32i loc(#loc19)
    %28 = cir.shift(left, %26 : !u32i, %27 : !s32i) -> !u32i loc(#loc19)
    %29 = cir.binop(xor, %24, %28) : !u32i loc(#loc19)
    %30 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc19)
    %31 = cir.cast(integral, %30 : !s32i), !u32i loc(#loc19)
    %32 = cir.binop(xor, %29, %31) : !u32i loc(#loc19)
    %33 = cir.unary(minus, %32) : !u32i, !u32i loc(#loc19)
    %34 = cir.const #cir.int<1> : !s32i loc(#loc19)
    %35 = cir.cast(integral, %34 : !s32i), !u32i loc(#loc19)
    %36 = cir.binop(sub, %33, %35) : !u32i loc(#loc19)
    cir.br ^bb3(%36 : !u32i) loc(#loc19)
  ^bb3(%37: !u32i loc("CWE400_Resource_Exhaustion__rand_sleep_31.c":36:13)):  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc19)
  ^bb4:  // pred: ^bb3
    %38 = cir.cast(integral, %37 : !u32i), !s32i loc(#loc19)
    cir.store %38, %2 : !s32i, !cir.ptr<!s32i> loc(#loc90)
    cir.br ^bb5 loc(#loc91)
  ^bb5:  // pred: ^bb4
    %39 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc11)
    cir.store %39, %0 : !s32i, !cir.ptr<!s32i> loc(#loc86)
    %40 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc13)
    cir.store %40, %1 : !s32i, !cir.ptr<!s32i> loc(#loc87)
    %41 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc23)
    %42 = cir.cast(integral, %41 : !s32i), !u32i loc(#loc23)
    %43 = cir.call @usleep(%42) : (!u32i) -> !s32i loc(#loc24)
    %44 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 29>> loc(#loc7)
    %45 = cir.cast(array_to_ptrdecay, %44 : !cir.ptr<!cir.array<!s8i x 29>>), !cir.ptr<!s8i> loc(#loc7)
    cir.call @printLine(%45) : (!cir.ptr<!s8i>) -> () loc(#loc25)
    cir.br ^bb6 loc(#loc22)
  ^bb6:  // pred: ^bb5
    cir.return loc(#loc9)
  } loc(#loc85)
  cir.func no_proto @CWE400_Resource_Exhaustion__rand_sleep_31_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc93)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc28)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc94)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc30)
    cir.return loc(#loc27)
  } loc(#loc92)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["countCopy", init] {alignment = 4 : i64} loc(#loc96)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count", init] {alignment = 4 : i64} loc(#loc97)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count"] {alignment = 4 : i64} loc(#loc98)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc40)
    %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc41)
    cir.store %4, %2 : !s32i, !cir.ptr<!s32i> loc(#loc99)
    %5 = cir.const #cir.int<20> : !s32i loc(#loc43)
    cir.store %5, %2 : !s32i, !cir.ptr<!s32i> loc(#loc100)
    cir.br ^bb1 loc(#loc101)
  ^bb1:  // pred: ^bb0
    %6 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc35)
    cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc96)
    %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc37)
    cir.store %7, %1 : !s32i, !cir.ptr<!s32i> loc(#loc97)
    %8 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc47)
    %9 = cir.cast(integral, %8 : !s32i), !u32i loc(#loc47)
    %10 = cir.call @usleep(%9) : (!u32i) -> !s32i loc(#loc48)
    %11 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 29>> loc(#loc49)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 29>>), !cir.ptr<!s8i> loc(#loc49)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc50)
    cir.br ^bb2 loc(#loc46)
  ^bb2:  // pred: ^bb1
    cir.return loc(#loc33)
  } loc(#loc95)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Sleep time OK\00" : !cir.array<!s8i x 14>> : !cir.array<!s8i x 14> {alignment = 1 : i64} loc(#loc51)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Sleep time too long\00" : !cir.array<!s8i x 20>> : !cir.array<!s8i x 20> {alignment = 1 : i64} loc(#loc52)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["countCopy", init] {alignment = 4 : i64} loc(#loc103)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count", init] {alignment = 4 : i64} loc(#loc104)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count"] {alignment = 4 : i64} loc(#loc105)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc61)
    %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc62)
    cir.store %4, %2 : !s32i, !cir.ptr<!s32i> loc(#loc106)
    %5 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc64)
    %6 = cir.const #cir.int<1> : !s32i loc(#loc64)
    %7 = cir.binop(and, %5, %6) : !s32i loc(#loc64)
    %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc64)
    cir.brcond %8 ^bb1, ^bb2 loc(#loc64)
  ^bb1:  // pred: ^bb0
    %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc64)
    %10 = cir.cast(integral, %9 : !s32i), !u32i loc(#loc64)
    %11 = cir.const #cir.int<30> : !s32i loc(#loc64)
    %12 = cir.shift(left, %10 : !u32i, %11 : !s32i) -> !u32i loc(#loc64)
    %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc64)
    %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc64)
    %15 = cir.const #cir.int<15> : !s32i loc(#loc64)
    %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc64)
    %17 = cir.binop(xor, %12, %16) : !u32i loc(#loc64)
    %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc64)
    %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc64)
    %20 = cir.binop(xor, %17, %19) : !u32i loc(#loc64)
    cir.br ^bb3(%20 : !u32i) loc(#loc64)
  ^bb2:  // pred: ^bb0
    %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc64)
    %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc64)
    %23 = cir.const #cir.int<30> : !s32i loc(#loc64)
    %24 = cir.shift(left, %22 : !u32i, %23 : !s32i) -> !u32i loc(#loc64)
    %25 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc64)
    %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc64)
    %27 = cir.const #cir.int<15> : !s32i loc(#loc64)
    %28 = cir.shift(left, %26 : !u32i, %27 : !s32i) -> !u32i loc(#loc64)
    %29 = cir.binop(xor, %24, %28) : !u32i loc(#loc64)
    %30 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc64)
    %31 = cir.cast(integral, %30 : !s32i), !u32i loc(#loc64)
    %32 = cir.binop(xor, %29, %31) : !u32i loc(#loc64)
    %33 = cir.unary(minus, %32) : !u32i, !u32i loc(#loc64)
    %34 = cir.const #cir.int<1> : !s32i loc(#loc64)
    %35 = cir.cast(integral, %34 : !s32i), !u32i loc(#loc64)
    %36 = cir.binop(sub, %33, %35) : !u32i loc(#loc64)
    cir.br ^bb3(%36 : !u32i) loc(#loc64)
  ^bb3(%37: !u32i loc("CWE400_Resource_Exhaustion__rand_sleep_31.c":74:13)):  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc64)
  ^bb4:  // pred: ^bb3
    %38 = cir.cast(integral, %37 : !u32i), !s32i loc(#loc64)
    cir.store %38, %2 : !s32i, !cir.ptr<!s32i> loc(#loc107)
    cir.br ^bb5 loc(#loc108)
  ^bb5:  // pred: ^bb4
    %39 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc56)
    cir.store %39, %0 : !s32i, !cir.ptr<!s32i> loc(#loc103)
    %40 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc58)
    cir.store %40, %1 : !s32i, !cir.ptr<!s32i> loc(#loc104)
    cir.br ^bb6 loc(#loc109)
  ^bb6:  // pred: ^bb5
    %41 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc70)
    %42 = cir.const #cir.int<0> : !s32i loc(#loc71)
    %43 = cir.cmp(gt, %41, %42) : !s32i, !cir.bool loc(#loc110)
    cir.brcond %43 ^bb7, ^bb12 loc(#loc72)
  ^bb7:  // pred: ^bb6
    %44 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc73)
    %45 = cir.const #cir.int<2000> : !s32i loc(#loc74)
    %46 = cir.cmp(le, %44, %45) : !s32i, !cir.bool loc(#loc111)
    cir.brcond %46 ^bb8, ^bb9 loc(#loc72)
  ^bb8:  // pred: ^bb7
    %47 = cir.const #true loc(#loc72)
    cir.br ^bb10(%47 : !cir.bool) loc(#loc72)
  ^bb9:  // pred: ^bb7
    %48 = cir.const #false loc(#loc72)
    cir.br ^bb10(%48 : !cir.bool) loc(#loc72)
  ^bb10(%49: !cir.bool loc("CWE400_Resource_Exhaustion__rand_sleep_31.c":79:23)):  // 2 preds: ^bb8, ^bb9
    cir.br ^bb11 loc(#loc72)
  ^bb11:  // pred: ^bb10
    cir.br ^bb13(%49 : !cir.bool) loc(#loc72)
  ^bb12:  // pred: ^bb6
    %50 = cir.const #false loc(#loc72)
    cir.br ^bb13(%50 : !cir.bool) loc(#loc72)
  ^bb13(%51: !cir.bool loc("CWE400_Resource_Exhaustion__rand_sleep_31.c":79:23)):  // 2 preds: ^bb11, ^bb12
    cir.br ^bb14 loc(#loc72)
  ^bb14:  // pred: ^bb13
    cir.brcond %51 ^bb15, ^bb16 loc(#loc112)
  ^bb15:  // pred: ^bb14
    %52 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc78)
    %53 = cir.cast(integral, %52 : !s32i), !u32i loc(#loc78)
    %54 = cir.call @usleep(%53) : (!u32i) -> !s32i loc(#loc79)
    %55 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 14>> loc(#loc51)
    %56 = cir.cast(array_to_ptrdecay, %55 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc51)
    cir.call @printLine(%56) : (!cir.ptr<!s8i>) -> () loc(#loc80)
    cir.br ^bb17 loc(#loc76)
  ^bb16:  // pred: ^bb14
    %57 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 20>> loc(#loc52)
    %58 = cir.cast(array_to_ptrdecay, %57 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc52)
    cir.call @printLine(%58) : (!cir.ptr<!s8i>) -> () loc(#loc81)
    cir.br ^bb17 loc(#loc69)
  ^bb17:  // 2 preds: ^bb15, ^bb16
    cir.br ^bb18 loc(#loc69)
  ^bb18:  // pred: ^bb17
    cir.br ^bb19 loc(#loc67)
  ^bb19:  // pred: ^bb18
    cir.return loc(#loc54)
  } loc(#loc102)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE400_Resource_Exhaustion/s02/CWE400_Resource_Exhaustion__rand_sleep_31.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("/usr/include/unistd.h":480:1)
#loc4 = loc("/usr/include/unistd.h":480:43)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc7 = loc("CWE400_Resource_Exhaustion__rand_sleep_31.c":42:19)
#loc8 = loc("CWE400_Resource_Exhaustion__rand_sleep_31.c":30:1)
#loc9 = loc("CWE400_Resource_Exhaustion__rand_sleep_31.c":44:1)
#loc10 = loc("CWE400_Resource_Exhaustion__rand_sleep_31.c":38:9)
#loc11 = loc("CWE400_Resource_Exhaustion__rand_sleep_31.c":38:25)
#loc12 = loc("CWE400_Resource_Exhaustion__rand_sleep_31.c":39:9)
#loc13 = loc("CWE400_Resource_Exhaustion__rand_sleep_31.c":39:21)
#loc14 = loc("CWE400_Resource_Exhaustion__rand_sleep_31.c":32:5)
#loc15 = loc("CWE400_Resource_Exhaustion__rand_sleep_31.c":32:9)
#loc16 = loc("CWE400_Resource_Exhaustion__rand_sleep_31.c":34:14)
#loc17 = loc("CWE400_Resource_Exhaustion__rand_sleep_31.c":34:13)
#loc18 = loc("CWE400_Resource_Exhaustion__rand_sleep_31.c":34:5)
#loc20 = loc("CWE400_Resource_Exhaustion__rand_sleep_31.c":36:5)
#loc21 = loc("CWE400_Resource_Exhaustion__rand_sleep_31.c":37:5)
#loc22 = loc("CWE400_Resource_Exhaustion__rand_sleep_31.c":43:5)
#loc23 = loc("CWE400_Resource_Exhaustion__rand_sleep_31.c":41:15)
#loc24 = loc("CWE400_Resource_Exhaustion__rand_sleep_31.c":41:9)
#loc25 = loc("CWE400_Resource_Exhaustion__rand_sleep_31.c":42:9)
#loc26 = loc("CWE400_Resource_Exhaustion__rand_sleep_31.c":91:1)
#loc27 = loc("CWE400_Resource_Exhaustion__rand_sleep_31.c":95:1)
#loc28 = loc("CWE400_Resource_Exhaustion__rand_sleep_31.c":93:5)
#loc29 = loc("CWE400_Resource_Exhaustion__rand_sleep_31.c":93:13)
#loc30 = loc("CWE400_Resource_Exhaustion__rand_sleep_31.c":94:5)
#loc31 = loc("CWE400_Resource_Exhaustion__rand_sleep_31.c":94:13)
#loc32 = loc("CWE400_Resource_Exhaustion__rand_sleep_31.c":51:1)
#loc33 = loc("CWE400_Resource_Exhaustion__rand_sleep_31.c":65:1)
#loc34 = loc("CWE400_Resource_Exhaustion__rand_sleep_31.c":59:9)
#loc35 = loc("CWE400_Resource_Exhaustion__rand_sleep_31.c":59:25)
#loc36 = loc("CWE400_Resource_Exhaustion__rand_sleep_31.c":60:9)
#loc37 = loc("CWE400_Resource_Exhaustion__rand_sleep_31.c":60:21)
#loc38 = loc("CWE400_Resource_Exhaustion__rand_sleep_31.c":53:5)
#loc39 = loc("CWE400_Resource_Exhaustion__rand_sleep_31.c":53:9)
#loc40 = loc("CWE400_Resource_Exhaustion__rand_sleep_31.c":55:14)
#loc41 = loc("CWE400_Resource_Exhaustion__rand_sleep_31.c":55:13)
#loc42 = loc("CWE400_Resource_Exhaustion__rand_sleep_31.c":55:5)
#loc43 = loc("CWE400_Resource_Exhaustion__rand_sleep_31.c":57:13)
#loc44 = loc("CWE400_Resource_Exhaustion__rand_sleep_31.c":57:5)
#loc45 = loc("CWE400_Resource_Exhaustion__rand_sleep_31.c":58:5)
#loc46 = loc("CWE400_Resource_Exhaustion__rand_sleep_31.c":64:5)
#loc47 = loc("CWE400_Resource_Exhaustion__rand_sleep_31.c":62:15)
#loc48 = loc("CWE400_Resource_Exhaustion__rand_sleep_31.c":62:9)
#loc49 = loc("CWE400_Resource_Exhaustion__rand_sleep_31.c":63:19)
#loc50 = loc("CWE400_Resource_Exhaustion__rand_sleep_31.c":63:9)
#loc51 = loc("CWE400_Resource_Exhaustion__rand_sleep_31.c":82:23)
#loc52 = loc("CWE400_Resource_Exhaustion__rand_sleep_31.c":86:23)
#loc53 = loc("CWE400_Resource_Exhaustion__rand_sleep_31.c":68:1)
#loc54 = loc("CWE400_Resource_Exhaustion__rand_sleep_31.c":89:1)
#loc55 = loc("CWE400_Resource_Exhaustion__rand_sleep_31.c":76:9)
#loc56 = loc("CWE400_Resource_Exhaustion__rand_sleep_31.c":76:25)
#loc57 = loc("CWE400_Resource_Exhaustion__rand_sleep_31.c":77:9)
#loc58 = loc("CWE400_Resource_Exhaustion__rand_sleep_31.c":77:21)
#loc59 = loc("CWE400_Resource_Exhaustion__rand_sleep_31.c":70:5)
#loc60 = loc("CWE400_Resource_Exhaustion__rand_sleep_31.c":70:9)
#loc61 = loc("CWE400_Resource_Exhaustion__rand_sleep_31.c":72:14)
#loc62 = loc("CWE400_Resource_Exhaustion__rand_sleep_31.c":72:13)
#loc63 = loc("CWE400_Resource_Exhaustion__rand_sleep_31.c":72:5)
#loc65 = loc("CWE400_Resource_Exhaustion__rand_sleep_31.c":74:5)
#loc66 = loc("CWE400_Resource_Exhaustion__rand_sleep_31.c":75:5)
#loc67 = loc("CWE400_Resource_Exhaustion__rand_sleep_31.c":88:5)
#loc68 = loc("CWE400_Resource_Exhaustion__rand_sleep_31.c":79:9)
#loc69 = loc("CWE400_Resource_Exhaustion__rand_sleep_31.c":87:9)
#loc70 = loc("CWE400_Resource_Exhaustion__rand_sleep_31.c":79:13)
#loc71 = loc("CWE400_Resource_Exhaustion__rand_sleep_31.c":79:21)
#loc73 = loc("CWE400_Resource_Exhaustion__rand_sleep_31.c":79:26)
#loc74 = loc("CWE400_Resource_Exhaustion__rand_sleep_31.c":79:35)
#loc75 = loc("CWE400_Resource_Exhaustion__rand_sleep_31.c":80:9)
#loc76 = loc("CWE400_Resource_Exhaustion__rand_sleep_31.c":83:9)
#loc77 = loc("CWE400_Resource_Exhaustion__rand_sleep_31.c":85:9)
#loc78 = loc("CWE400_Resource_Exhaustion__rand_sleep_31.c":81:19)
#loc79 = loc("CWE400_Resource_Exhaustion__rand_sleep_31.c":81:13)
#loc80 = loc("CWE400_Resource_Exhaustion__rand_sleep_31.c":82:13)
#loc81 = loc("CWE400_Resource_Exhaustion__rand_sleep_31.c":86:13)
#loc82 = loc(fused[#loc1, #loc2])
#loc83 = loc(fused[#loc3, #loc4])
#loc84 = loc(fused[#loc5, #loc6])
#loc85 = loc(fused[#loc8, #loc9])
#loc86 = loc(fused[#loc10, #loc11])
#loc87 = loc(fused[#loc12, #loc13])
#loc88 = loc(fused[#loc14, #loc15])
#loc89 = loc(fused[#loc18, #loc16])
#loc90 = loc(fused[#loc20, #loc19])
#loc91 = loc(fused[#loc21, #loc22])
#loc92 = loc(fused[#loc26, #loc27])
#loc93 = loc(fused[#loc28, #loc29])
#loc94 = loc(fused[#loc30, #loc31])
#loc95 = loc(fused[#loc32, #loc33])
#loc96 = loc(fused[#loc34, #loc35])
#loc97 = loc(fused[#loc36, #loc37])
#loc98 = loc(fused[#loc38, #loc39])
#loc99 = loc(fused[#loc42, #loc40])
#loc100 = loc(fused[#loc44, #loc43])
#loc101 = loc(fused[#loc45, #loc46])
#loc102 = loc(fused[#loc53, #loc54])
#loc103 = loc(fused[#loc55, #loc56])
#loc104 = loc(fused[#loc57, #loc58])
#loc105 = loc(fused[#loc59, #loc60])
#loc106 = loc(fused[#loc63, #loc61])
#loc107 = loc(fused[#loc65, #loc64])
#loc108 = loc(fused[#loc66, #loc67])
#loc109 = loc(fused[#loc68, #loc69])
#loc110 = loc(fused[#loc70, #loc71])
#loc111 = loc(fused[#loc73, #loc74])
#loc112 = loc(fused[#loc75, #loc76, #loc77, #loc69])
