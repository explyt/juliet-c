!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE680_Integer_Overflow_to_Buffer_Overflow/CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_15.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little", "dlti.mangling_mode" = "e">} {
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc169)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc3)
  cir.func private @_Znam(!u64i) -> !cir.ptr<!void> loc(#loc170)
  cir.func private @printIntLine(!s32i) loc(#loc171)
  cir.func @_ZN56CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_153badEv() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc173)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc12)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc13)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc174)
    cir.scope {
      %3 = cir.const #cir.int<6> : !s32i loc(#loc17)
      cir.switch (%3 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %4 = cir.const #cir.int<2147483647> : !s32i loc(#loc19)
          %5 = cir.const #cir.int<2> : !s32i loc(#loc20)
          %6 = cir.binop(div, %4, %5) : !s32i loc(#loc176)
          %7 = cir.const #cir.int<2> : !s32i loc(#loc21)
          %8 = cir.binop(add, %6, %7) nsw : !s32i loc(#loc176)
          cir.store %8, %0 : !s32i, !cir.ptr<!s32i> loc(#loc177)
          cir.break loc(#loc23)
        } loc(#loc18)
        cir.case(default, []) {
          %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc3)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc3)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc25)
          cir.break loc(#loc26)
        } loc(#loc24)
        cir.yield loc(#loc15)
      } loc(#loc15)
    } loc(#loc175)
    cir.scope {
      %3 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataBytes"] {alignment = 8 : i64} loc(#loc179)
      %4 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc180)
      %5 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["intPointer"] {alignment = 8 : i64} loc(#loc181)
      %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc34)
      %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc34)
      %8 = cir.const #cir.int<4> : !u64i loc(#loc182)
      %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc183)
      cir.store %9, %3 : !u64i, !cir.ptr<!u64i> loc(#loc184)
      %10 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc38)
      %11 = cir.call @_Znam(%10) : (!u64i) -> !cir.ptr<!void> loc(#loc39)
      %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc185)
      %13 = cir.cast(bitcast, %12 : !cir.ptr<!s8i>), !cir.ptr<!s32i> loc(#loc185)
      cir.store %13, %5 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc186)
      cir.scope {
        %19 = cir.const #cir.int<0> : !s32i loc(#loc45)
        %20 = cir.cast(integral, %19 : !s32i), !u64i loc(#loc45)
        cir.store %20, %4 : !u64i, !cir.ptr<!u64i> loc(#loc188)
        cir.for : cond {
          %21 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc47)
          %22 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc48)
          %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc48)
          %24 = cir.cmp(lt, %21, %23) : !u64i, !cir.bool loc(#loc189)
          cir.condition(%24) loc(#loc189)
        } body {
          cir.scope {
            %21 = cir.const #cir.int<0> : !s32i loc(#loc50)
            %22 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc51)
            %23 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc52)
            %24 = cir.ptr_stride(%22 : !cir.ptr<!s32i>, %23 : !u64i), !cir.ptr<!s32i> loc(#loc53)
            cir.store %21, %24 : !s32i, !cir.ptr<!s32i> loc(#loc191)
          } loc(#loc190)
          cir.yield loc(#loc44)
        } step {
          %21 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc54)
          %22 = cir.unary(inc, %21) : !u64i, !u64i loc(#loc55)
          cir.store %22, %4 : !u64i, !cir.ptr<!u64i> loc(#loc192)
          cir.yield loc(#loc187)
        } loc(#loc187)
      } loc(#loc187)
      %14 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc56)
      %15 = cir.const #cir.int<0> : !s32i loc(#loc57)
      %16 = cir.ptr_stride(%14 : !cir.ptr<!s32i>, %15 : !s32i), !cir.ptr<!s32i> loc(#loc58)
      %17 = cir.load %16 : !cir.ptr<!s32i>, !s32i loc(#loc56)
      cir.call @printIntLine(%17) : (!s32i) -> () loc(#loc59)
      %18 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc60)
      cir.delete.array %18 : <!s32i> loc(#loc60)
    } loc(#loc178)
    cir.return loc(#loc9)
  } loc(#loc172)
  cir.func internal private @_ZN56CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_15L8goodG2B1Ev() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc194)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc65)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc66)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc195)
    cir.scope {
      %3 = cir.const #cir.int<5> : !s32i loc(#loc70)
      cir.switch (%3 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc72)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc72)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc73)
          cir.break loc(#loc74)
        } loc(#loc71)
        cir.case(default, []) {
          %4 = cir.const #cir.int<20> : !s32i loc(#loc76)
          cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc197)
          cir.break loc(#loc78)
        } loc(#loc75)
        cir.yield loc(#loc68)
      } loc(#loc68)
    } loc(#loc196)
    cir.scope {
      %3 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataBytes"] {alignment = 8 : i64} loc(#loc199)
      %4 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc200)
      %5 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["intPointer"] {alignment = 8 : i64} loc(#loc201)
      %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc86)
      %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc86)
      %8 = cir.const #cir.int<4> : !u64i loc(#loc202)
      %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc203)
      cir.store %9, %3 : !u64i, !cir.ptr<!u64i> loc(#loc204)
      %10 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc90)
      %11 = cir.call @_Znam(%10) : (!u64i) -> !cir.ptr<!void> loc(#loc91)
      %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc205)
      %13 = cir.cast(bitcast, %12 : !cir.ptr<!s8i>), !cir.ptr<!s32i> loc(#loc205)
      cir.store %13, %5 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc206)
      cir.scope {
        %19 = cir.const #cir.int<0> : !s32i loc(#loc97)
        %20 = cir.cast(integral, %19 : !s32i), !u64i loc(#loc97)
        cir.store %20, %4 : !u64i, !cir.ptr<!u64i> loc(#loc208)
        cir.for : cond {
          %21 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc99)
          %22 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc100)
          %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc100)
          %24 = cir.cmp(lt, %21, %23) : !u64i, !cir.bool loc(#loc209)
          cir.condition(%24) loc(#loc209)
        } body {
          cir.scope {
            %21 = cir.const #cir.int<0> : !s32i loc(#loc102)
            %22 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc103)
            %23 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc104)
            %24 = cir.ptr_stride(%22 : !cir.ptr<!s32i>, %23 : !u64i), !cir.ptr<!s32i> loc(#loc105)
            cir.store %21, %24 : !s32i, !cir.ptr<!s32i> loc(#loc211)
          } loc(#loc210)
          cir.yield loc(#loc96)
        } step {
          %21 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc106)
          %22 = cir.unary(inc, %21) : !u64i, !u64i loc(#loc107)
          cir.store %22, %4 : !u64i, !cir.ptr<!u64i> loc(#loc212)
          cir.yield loc(#loc207)
        } loc(#loc207)
      } loc(#loc207)
      %14 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc108)
      %15 = cir.const #cir.int<0> : !s32i loc(#loc109)
      %16 = cir.ptr_stride(%14 : !cir.ptr<!s32i>, %15 : !s32i), !cir.ptr<!s32i> loc(#loc110)
      %17 = cir.load %16 : !cir.ptr<!s32i>, !s32i loc(#loc108)
      cir.call @printIntLine(%17) : (!s32i) -> () loc(#loc111)
      %18 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc112)
      cir.delete.array %18 : <!s32i> loc(#loc112)
    } loc(#loc198)
    cir.return loc(#loc62)
  } loc(#loc193)
  cir.func internal private @_ZN56CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_15L8goodG2B2Ev() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc214)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc117)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc118)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc215)
    cir.scope {
      %3 = cir.const #cir.int<6> : !s32i loc(#loc122)
      cir.switch (%3 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %4 = cir.const #cir.int<20> : !s32i loc(#loc124)
          cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc217)
          cir.break loc(#loc126)
        } loc(#loc123)
        cir.case(default, []) {
          %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc128)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc128)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc129)
          cir.break loc(#loc130)
        } loc(#loc127)
        cir.yield loc(#loc120)
      } loc(#loc120)
    } loc(#loc216)
    cir.scope {
      %3 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataBytes"] {alignment = 8 : i64} loc(#loc219)
      %4 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc220)
      %5 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["intPointer"] {alignment = 8 : i64} loc(#loc221)
      %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc138)
      %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc138)
      %8 = cir.const #cir.int<4> : !u64i loc(#loc222)
      %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc223)
      cir.store %9, %3 : !u64i, !cir.ptr<!u64i> loc(#loc224)
      %10 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc142)
      %11 = cir.call @_Znam(%10) : (!u64i) -> !cir.ptr<!void> loc(#loc143)
      %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc225)
      %13 = cir.cast(bitcast, %12 : !cir.ptr<!s8i>), !cir.ptr<!s32i> loc(#loc225)
      cir.store %13, %5 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc226)
      cir.scope {
        %19 = cir.const #cir.int<0> : !s32i loc(#loc149)
        %20 = cir.cast(integral, %19 : !s32i), !u64i loc(#loc149)
        cir.store %20, %4 : !u64i, !cir.ptr<!u64i> loc(#loc228)
        cir.for : cond {
          %21 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc151)
          %22 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc152)
          %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc152)
          %24 = cir.cmp(lt, %21, %23) : !u64i, !cir.bool loc(#loc229)
          cir.condition(%24) loc(#loc229)
        } body {
          cir.scope {
            %21 = cir.const #cir.int<0> : !s32i loc(#loc154)
            %22 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc155)
            %23 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc156)
            %24 = cir.ptr_stride(%22 : !cir.ptr<!s32i>, %23 : !u64i), !cir.ptr<!s32i> loc(#loc157)
            cir.store %21, %24 : !s32i, !cir.ptr<!s32i> loc(#loc231)
          } loc(#loc230)
          cir.yield loc(#loc148)
        } step {
          %21 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc158)
          %22 = cir.unary(inc, %21) : !u64i, !u64i loc(#loc159)
          cir.store %22, %4 : !u64i, !cir.ptr<!u64i> loc(#loc232)
          cir.yield loc(#loc227)
        } loc(#loc227)
      } loc(#loc227)
      %14 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc160)
      %15 = cir.const #cir.int<0> : !s32i loc(#loc161)
      %16 = cir.ptr_stride(%14 : !cir.ptr<!s32i>, %15 : !s32i), !cir.ptr<!s32i> loc(#loc162)
      %17 = cir.load %16 : !cir.ptr<!s32i>, !s32i loc(#loc160)
      cir.call @printIntLine(%17) : (!s32i) -> () loc(#loc163)
      %18 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc164)
      cir.delete.array %18 : <!s32i> loc(#loc164)
    } loc(#loc218)
    cir.return loc(#loc114)
  } loc(#loc213)
  cir.func @_ZN56CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_154goodEv() extra(#fn_attr) {
    cir.call @_ZN56CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_15L8goodG2B1Ev() : () -> () loc(#loc167)
    cir.call @_ZN56CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_15L8goodG2B2Ev() : () -> () loc(#loc168)
    cir.return loc(#loc166)
  } loc(#loc233)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE680_Integer_Overflow_to_Buffer_Overflow/CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_15.cpp":0:0)
#loc1 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc2 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc3 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_15.cpp":39:19)
#loc4 = loc("/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/new":128:20)
#loc5 = loc("/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/new":129:41)
#loc6 = loc("../../testcasesupport/std_testcase_io.h":18:1)
#loc7 = loc("../../testcasesupport/std_testcase_io.h":18:33)
#loc8 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_15.cpp":24:1)
#loc9 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_15.cpp":55:1)
#loc10 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_15.cpp":26:5)
#loc11 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_15.cpp":26:9)
#loc12 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_15.cpp":28:13)
#loc13 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_15.cpp":28:12)
#loc14 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_15.cpp":28:5)
#loc15 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_15.cpp":29:5)
#loc16 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_15.cpp":41:5)
#loc17 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_15.cpp":29:12)
#loc18 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_15.cpp":31:5)
#loc19 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_15.cpp":33:16)
#loc20 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_15.cpp":33:26)
#loc21 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_15.cpp":33:30)
#loc22 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_15.cpp":33:9)
#loc23 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_15.cpp":36:9)
#loc24 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_15.cpp":37:5)
#loc25 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_15.cpp":39:9)
#loc26 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_15.cpp":40:9)
#loc27 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_15.cpp":42:5)
#loc28 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_15.cpp":54:5)
#loc29 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_15.cpp":43:9)
#loc30 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_15.cpp":43:16)
#loc31 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_15.cpp":43:26)
#loc32 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_15.cpp":44:9)
#loc33 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_15.cpp":44:14)
#loc34 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_15.cpp":46:21)
#loc35 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_15.cpp":46:28)
#loc36 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_15.cpp":46:38)
#loc37 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_15.cpp":46:9)
#loc38 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_15.cpp":47:37)
#loc39 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_15.cpp":24:6)
#loc40 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_15.cpp":47:28)
#loc41 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_15.cpp":47:46)
#loc42 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_15.cpp":47:9)
#loc43 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_15.cpp":48:9)
#loc44 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_15.cpp":51:9)
#loc45 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_15.cpp":48:18)
#loc46 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_15.cpp":48:14)
#loc47 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_15.cpp":48:21)
#loc48 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_15.cpp":48:33)
#loc49 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_15.cpp":49:9)
#loc50 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_15.cpp":50:29)
#loc51 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_15.cpp":50:13)
#loc52 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_15.cpp":50:24)
#loc53 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_15.cpp":50:25)
#loc54 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_15.cpp":48:40)
#loc55 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_15.cpp":48:39)
#loc56 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_15.cpp":52:22)
#loc57 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_15.cpp":52:33)
#loc58 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_15.cpp":52:34)
#loc59 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_15.cpp":52:9)
#loc60 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_15.cpp":53:19)
#loc61 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_15.cpp":62:1)
#loc62 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_15.cpp":91:1)
#loc63 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_15.cpp":64:5)
#loc64 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_15.cpp":64:9)
#loc65 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_15.cpp":66:13)
#loc66 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_15.cpp":66:12)
#loc67 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_15.cpp":66:5)
#loc68 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_15.cpp":67:5)
#loc69 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_15.cpp":77:5)
#loc70 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_15.cpp":67:12)
#loc71 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_15.cpp":69:5)
#loc72 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_15.cpp":71:19)
#loc73 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_15.cpp":71:9)
#loc74 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_15.cpp":72:9)
#loc75 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_15.cpp":73:5)
#loc76 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_15.cpp":75:16)
#loc77 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_15.cpp":75:9)
#loc78 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_15.cpp":76:9)
#loc79 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_15.cpp":78:5)
#loc80 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_15.cpp":90:5)
#loc81 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_15.cpp":79:9)
#loc82 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_15.cpp":79:16)
#loc83 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_15.cpp":79:26)
#loc84 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_15.cpp":80:9)
#loc85 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_15.cpp":80:14)
#loc86 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_15.cpp":82:21)
#loc87 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_15.cpp":82:28)
#loc88 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_15.cpp":82:38)
#loc89 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_15.cpp":82:9)
#loc90 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_15.cpp":83:37)
#loc91 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_15.cpp":62:13)
#loc92 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_15.cpp":83:28)
#loc93 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_15.cpp":83:46)
#loc94 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_15.cpp":83:9)
#loc95 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_15.cpp":84:9)
#loc96 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_15.cpp":87:9)
#loc97 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_15.cpp":84:18)
#loc98 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_15.cpp":84:14)
#loc99 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_15.cpp":84:21)
#loc100 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_15.cpp":84:33)
#loc101 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_15.cpp":85:9)
#loc102 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_15.cpp":86:29)
#loc103 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_15.cpp":86:13)
#loc104 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_15.cpp":86:24)
#loc105 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_15.cpp":86:25)
#loc106 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_15.cpp":84:40)
#loc107 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_15.cpp":84:39)
#loc108 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_15.cpp":88:22)
#loc109 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_15.cpp":88:33)
#loc110 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_15.cpp":88:34)
#loc111 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_15.cpp":88:9)
#loc112 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_15.cpp":89:19)
#loc113 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_15.cpp":94:1)
#loc114 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_15.cpp":123:1)
#loc115 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_15.cpp":96:5)
#loc116 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_15.cpp":96:9)
#loc117 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_15.cpp":98:13)
#loc118 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_15.cpp":98:12)
#loc119 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_15.cpp":98:5)
#loc120 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_15.cpp":99:5)
#loc121 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_15.cpp":109:5)
#loc122 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_15.cpp":99:12)
#loc123 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_15.cpp":101:5)
#loc124 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_15.cpp":103:16)
#loc125 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_15.cpp":103:9)
#loc126 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_15.cpp":104:9)
#loc127 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_15.cpp":105:5)
#loc128 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_15.cpp":107:19)
#loc129 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_15.cpp":107:9)
#loc130 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_15.cpp":108:9)
#loc131 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_15.cpp":110:5)
#loc132 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_15.cpp":122:5)
#loc133 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_15.cpp":111:9)
#loc134 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_15.cpp":111:16)
#loc135 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_15.cpp":111:26)
#loc136 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_15.cpp":112:9)
#loc137 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_15.cpp":112:14)
#loc138 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_15.cpp":114:21)
#loc139 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_15.cpp":114:28)
#loc140 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_15.cpp":114:38)
#loc141 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_15.cpp":114:9)
#loc142 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_15.cpp":115:37)
#loc143 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_15.cpp":94:13)
#loc144 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_15.cpp":115:28)
#loc145 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_15.cpp":115:46)
#loc146 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_15.cpp":115:9)
#loc147 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_15.cpp":116:9)
#loc148 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_15.cpp":119:9)
#loc149 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_15.cpp":116:18)
#loc150 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_15.cpp":116:14)
#loc151 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_15.cpp":116:21)
#loc152 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_15.cpp":116:33)
#loc153 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_15.cpp":117:9)
#loc154 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_15.cpp":118:29)
#loc155 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_15.cpp":118:13)
#loc156 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_15.cpp":118:24)
#loc157 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_15.cpp":118:25)
#loc158 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_15.cpp":116:40)
#loc159 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_15.cpp":116:39)
#loc160 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_15.cpp":120:22)
#loc161 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_15.cpp":120:33)
#loc162 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_15.cpp":120:34)
#loc163 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_15.cpp":120:9)
#loc164 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_15.cpp":121:19)
#loc165 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_15.cpp":125:1)
#loc166 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_15.cpp":129:1)
#loc167 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_15.cpp":127:5)
#loc168 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_15.cpp":128:5)
#loc169 = loc(fused[#loc1, #loc2])
#loc170 = loc(fused[#loc4, #loc5])
#loc171 = loc(fused[#loc6, #loc7])
#loc172 = loc(fused[#loc8, #loc9])
#loc173 = loc(fused[#loc10, #loc11])
#loc174 = loc(fused[#loc14, #loc12])
#loc175 = loc(fused[#loc15, #loc16])
#loc176 = loc(fused[#loc19, #loc20])
#loc177 = loc(fused[#loc22, #loc21])
#loc178 = loc(fused[#loc27, #loc28])
#loc179 = loc(fused[#loc29, #loc30])
#loc180 = loc(fused[#loc29, #loc31])
#loc181 = loc(fused[#loc32, #loc33])
#loc182 = loc(fused[#loc35, #loc36])
#loc183 = loc(fused[#loc34, #loc36])
#loc184 = loc(fused[#loc37, #loc36])
#loc185 = loc(fused[#loc40, #loc41])
#loc186 = loc(fused[#loc42, #loc41])
#loc187 = loc(fused[#loc43, #loc44])
#loc188 = loc(fused[#loc46, #loc45])
#loc189 = loc(fused[#loc47, #loc48])
#loc190 = loc(fused[#loc49, #loc44])
#loc191 = loc(fused[#loc51, #loc50])
#loc192 = loc(fused[#loc55, #loc54])
#loc193 = loc(fused[#loc61, #loc62])
#loc194 = loc(fused[#loc63, #loc64])
#loc195 = loc(fused[#loc67, #loc65])
#loc196 = loc(fused[#loc68, #loc69])
#loc197 = loc(fused[#loc77, #loc76])
#loc198 = loc(fused[#loc79, #loc80])
#loc199 = loc(fused[#loc81, #loc82])
#loc200 = loc(fused[#loc81, #loc83])
#loc201 = loc(fused[#loc84, #loc85])
#loc202 = loc(fused[#loc87, #loc88])
#loc203 = loc(fused[#loc86, #loc88])
#loc204 = loc(fused[#loc89, #loc88])
#loc205 = loc(fused[#loc92, #loc93])
#loc206 = loc(fused[#loc94, #loc93])
#loc207 = loc(fused[#loc95, #loc96])
#loc208 = loc(fused[#loc98, #loc97])
#loc209 = loc(fused[#loc99, #loc100])
#loc210 = loc(fused[#loc101, #loc96])
#loc211 = loc(fused[#loc103, #loc102])
#loc212 = loc(fused[#loc107, #loc106])
#loc213 = loc(fused[#loc113, #loc114])
#loc214 = loc(fused[#loc115, #loc116])
#loc215 = loc(fused[#loc119, #loc117])
#loc216 = loc(fused[#loc120, #loc121])
#loc217 = loc(fused[#loc125, #loc124])
#loc218 = loc(fused[#loc131, #loc132])
#loc219 = loc(fused[#loc133, #loc134])
#loc220 = loc(fused[#loc133, #loc135])
#loc221 = loc(fused[#loc136, #loc137])
#loc222 = loc(fused[#loc139, #loc140])
#loc223 = loc(fused[#loc138, #loc140])
#loc224 = loc(fused[#loc141, #loc140])
#loc225 = loc(fused[#loc144, #loc145])
#loc226 = loc(fused[#loc146, #loc145])
#loc227 = loc(fused[#loc147, #loc148])
#loc228 = loc(fused[#loc150, #loc149])
#loc229 = loc(fused[#loc151, #loc152])
#loc230 = loc(fused[#loc153, #loc148])
#loc231 = loc(fused[#loc155, #loc154])
#loc232 = loc(fused[#loc159, #loc158])
#loc233 = loc(fused[#loc165, #loc166])
