!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
!ty__twoIntsStruct = !cir.record<struct "_twoIntsStruct" {!s32i, !s32i}>
module @"/workspaces/juliet-c/testcases/CWE758_Undefined_Behavior/CWE758_Undefined_Behavior__struct_alloca_use_14.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, "dlti.endianness" = "little", "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64>} {
  cir.global "private" external @globalFive : !s32i {alignment = 4 : i64} loc(#loc88)
  cir.func private @printIntLine(!s32i) loc(#loc89)
  cir.func no_proto @CWE758_Undefined_Behavior__struct_alloca_use_14_bad() extra(#fn_attr) {
    cir.scope {
      %0 = cir.get_global @globalFive : !cir.ptr<!s32i> loc(#loc88)
      %1 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc9)
      %2 = cir.const #cir.int<5> : !s32i loc(#loc10)
      %3 = cir.cmp(eq, %1, %2) : !s32i, !cir.bool loc(#loc92)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["pointer", init] {alignment = 8 : i64} loc(#loc95)
          %5 = cir.const #cir.int<8> : !u64i loc(#loc15)
          %6 = cir.alloca !u8i, !cir.ptr<!u8i>, %5 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc15)
          %7 = cir.alloca !ty__twoIntsStruct, !cir.ptr<!ty__twoIntsStruct>, ["data", init] {alignment = 4 : i64} loc(#loc96)
          %8 = cir.cast(bitcast, %6 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc15)
          %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!ty__twoIntsStruct> loc(#loc15)
          cir.store %9, %4 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc95)
          %10 = cir.load deref %4 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc17)
          cir.copy %10 to %7 : !cir.ptr<!ty__twoIntsStruct> loc(#loc96)
          %11 = cir.get_member %7[0] {name = "intOne"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc18)
          %12 = cir.load %11 : !cir.ptr<!s32i>, !s32i loc(#loc19)
          cir.call @printIntLine(%12) : (!s32i) -> () loc(#loc20)
          %13 = cir.get_member %7[1] {name = "intTwo"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc21)
          %14 = cir.load %13 : !cir.ptr<!s32i>, !s32i loc(#loc22)
          cir.call @printIntLine(%14) : (!s32i) -> () loc(#loc23)
        } loc(#loc94)
      } loc(#loc93)
    } loc(#loc91)
    cir.return loc(#loc6)
  } loc(#loc90)
  cir.func no_proto @CWE758_Undefined_Behavior__struct_alloca_use_14_good() extra(#fn_attr) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<()>> loc(#loc98)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc26)
    %1 = cir.get_global @good2 : !cir.ptr<!cir.func<()>> loc(#loc99)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc28)
    cir.return loc(#loc25)
  } loc(#loc97)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc100)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc32)
  cir.func no_proto internal private @good1() extra(#fn_attr) {
    cir.scope {
      %0 = cir.get_global @globalFive : !cir.ptr<!s32i> loc(#loc88)
      %1 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc37)
      %2 = cir.const #cir.int<5> : !s32i loc(#loc38)
      %3 = cir.cmp(ne, %1, %2) : !s32i, !cir.bool loc(#loc103)
      cir.if %3 {
        %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc32)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc32)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc42)
      } else {
        cir.scope {
          %4 = cir.alloca !ty__twoIntsStruct, !cir.ptr<!ty__twoIntsStruct>, ["data"] {alignment = 4 : i64} loc(#loc106)
          %5 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["pointer", init] {alignment = 8 : i64} loc(#loc107)
          %6 = cir.const #cir.int<8> : !u64i loc(#loc48)
          %7 = cir.alloca !u8i, !cir.ptr<!u8i>, %6 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc48)
          %8 = cir.cast(bitcast, %7 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc48)
          %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!ty__twoIntsStruct> loc(#loc48)
          cir.store %9, %5 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc107)
          %10 = cir.const #cir.int<1> : !s32i loc(#loc49)
          %11 = cir.get_member %4[0] {name = "intOne"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc18)
          cir.store %10, %11 : !s32i, !cir.ptr<!s32i> loc(#loc108)
          %12 = cir.const #cir.int<2> : !s32i loc(#loc51)
          %13 = cir.get_member %4[1] {name = "intTwo"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc21)
          cir.store %12, %13 : !s32i, !cir.ptr<!s32i> loc(#loc109)
          %14 = cir.load deref %5 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc53)
          cir.copy %4 to %14 : !cir.ptr<!ty__twoIntsStruct> loc(#loc53)
          cir.scope {
            %15 = cir.alloca !ty__twoIntsStruct, !cir.ptr<!ty__twoIntsStruct>, ["data", init] {alignment = 4 : i64} loc(#loc111)
            %16 = cir.load deref %5 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc57)
            cir.copy %16 to %15 : !cir.ptr<!ty__twoIntsStruct> loc(#loc111)
            %17 = cir.get_member %15[0] {name = "intOne"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc18)
            %18 = cir.load %17 : !cir.ptr<!s32i>, !s32i loc(#loc58)
            cir.call @printIntLine(%18) : (!s32i) -> () loc(#loc59)
            %19 = cir.get_member %15[1] {name = "intTwo"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc21)
            %20 = cir.load %19 : !cir.ptr<!s32i>, !s32i loc(#loc60)
            cir.call @printIntLine(%20) : (!s32i) -> () loc(#loc61)
          } loc(#loc110)
        } loc(#loc105)
      } loc(#loc104)
    } loc(#loc102)
    cir.return loc(#loc34)
  } loc(#loc101)
  cir.func no_proto internal private @good2() extra(#fn_attr) {
    cir.scope {
      %0 = cir.get_global @globalFive : !cir.ptr<!s32i> loc(#loc88)
      %1 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc66)
      %2 = cir.const #cir.int<5> : !s32i loc(#loc67)
      %3 = cir.cmp(eq, %1, %2) : !s32i, !cir.bool loc(#loc114)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !ty__twoIntsStruct, !cir.ptr<!ty__twoIntsStruct>, ["data"] {alignment = 4 : i64} loc(#loc117)
          %5 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["pointer", init] {alignment = 8 : i64} loc(#loc118)
          %6 = cir.const #cir.int<8> : !u64i loc(#loc74)
          %7 = cir.alloca !u8i, !cir.ptr<!u8i>, %6 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc74)
          %8 = cir.cast(bitcast, %7 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc74)
          %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!ty__twoIntsStruct> loc(#loc74)
          cir.store %9, %5 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc118)
          %10 = cir.const #cir.int<1> : !s32i loc(#loc75)
          %11 = cir.get_member %4[0] {name = "intOne"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc18)
          cir.store %10, %11 : !s32i, !cir.ptr<!s32i> loc(#loc119)
          %12 = cir.const #cir.int<2> : !s32i loc(#loc77)
          %13 = cir.get_member %4[1] {name = "intTwo"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc21)
          cir.store %12, %13 : !s32i, !cir.ptr<!s32i> loc(#loc120)
          %14 = cir.load deref %5 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc79)
          cir.copy %4 to %14 : !cir.ptr<!ty__twoIntsStruct> loc(#loc79)
          cir.scope {
            %15 = cir.alloca !ty__twoIntsStruct, !cir.ptr<!ty__twoIntsStruct>, ["data", init] {alignment = 4 : i64} loc(#loc122)
            %16 = cir.load deref %5 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc83)
            cir.copy %16 to %15 : !cir.ptr<!ty__twoIntsStruct> loc(#loc122)
            %17 = cir.get_member %15[0] {name = "intOne"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc18)
            %18 = cir.load %17 : !cir.ptr<!s32i>, !s32i loc(#loc84)
            cir.call @printIntLine(%18) : (!s32i) -> () loc(#loc85)
            %19 = cir.get_member %15[1] {name = "intTwo"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc21)
            %20 = cir.load %19 : !cir.ptr<!s32i>, !s32i loc(#loc86)
            cir.call @printIntLine(%20) : (!s32i) -> () loc(#loc87)
          } loc(#loc121)
        } loc(#loc116)
      } loc(#loc115)
    } loc(#loc113)
    cir.return loc(#loc63)
  } loc(#loc112)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE758_Undefined_Behavior/CWE758_Undefined_Behavior__struct_alloca_use_14.c":0:0)
#loc1 = loc("../../testcasesupport/std_testcase.h":118:1)
#loc2 = loc("../../testcasesupport/std_testcase.h":118:12)
#loc3 = loc("../../testcasesupport/std_testcase_io.h":18:1)
#loc4 = loc("../../testcasesupport/std_testcase_io.h":18:33)
#loc5 = loc("CWE758_Undefined_Behavior__struct_alloca_use_14.c":20:1)
#loc6 = loc("CWE758_Undefined_Behavior__struct_alloca_use_14.c":31:1)
#loc7 = loc("CWE758_Undefined_Behavior__struct_alloca_use_14.c":22:5)
#loc8 = loc("CWE758_Undefined_Behavior__struct_alloca_use_14.c":30:5)
#loc9 = loc("CWE758_Undefined_Behavior__struct_alloca_use_14.c":22:8)
#loc10 = loc("CWE758_Undefined_Behavior__struct_alloca_use_14.c":22:20)
#loc11 = loc("CWE758_Undefined_Behavior__struct_alloca_use_14.c":23:5)
#loc12 = loc("CWE758_Undefined_Behavior__struct_alloca_use_14.c":24:9)
#loc13 = loc("CWE758_Undefined_Behavior__struct_alloca_use_14.c":29:9)
#loc14 = loc("CWE758_Undefined_Behavior__struct_alloca_use_14.c":25:13)
#loc15 = loc("CWE758_Undefined_Behavior__struct_alloca_use_14.c":25:56)
#loc16 = loc("CWE758_Undefined_Behavior__struct_alloca_use_14.c":26:13)
#loc17 = loc("CWE758_Undefined_Behavior__struct_alloca_use_14.c":26:35)
#loc18 = loc("../../testcasesupport/std_testcase.h":98:9)
#loc19 = loc("CWE758_Undefined_Behavior__struct_alloca_use_14.c":27:31)
#loc20 = loc("CWE758_Undefined_Behavior__struct_alloca_use_14.c":27:13)
#loc21 = loc("../../testcasesupport/std_testcase.h":99:9)
#loc22 = loc("CWE758_Undefined_Behavior__struct_alloca_use_14.c":28:31)
#loc23 = loc("CWE758_Undefined_Behavior__struct_alloca_use_14.c":28:13)
#loc24 = loc("CWE758_Undefined_Behavior__struct_alloca_use_14.c":82:1)
#loc25 = loc("CWE758_Undefined_Behavior__struct_alloca_use_14.c":86:1)
#loc26 = loc("CWE758_Undefined_Behavior__struct_alloca_use_14.c":84:5)
#loc27 = loc("CWE758_Undefined_Behavior__struct_alloca_use_14.c":84:11)
#loc28 = loc("CWE758_Undefined_Behavior__struct_alloca_use_14.c":85:5)
#loc29 = loc("CWE758_Undefined_Behavior__struct_alloca_use_14.c":85:11)
#loc30 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc31 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc32 = loc("CWE758_Undefined_Behavior__struct_alloca_use_14.c":43:19)
#loc33 = loc("CWE758_Undefined_Behavior__struct_alloca_use_14.c":38:1)
#loc34 = loc("CWE758_Undefined_Behavior__struct_alloca_use_14.c":60:1)
#loc35 = loc("CWE758_Undefined_Behavior__struct_alloca_use_14.c":40:5)
#loc36 = loc("CWE758_Undefined_Behavior__struct_alloca_use_14.c":59:5)
#loc37 = loc("CWE758_Undefined_Behavior__struct_alloca_use_14.c":40:8)
#loc38 = loc("CWE758_Undefined_Behavior__struct_alloca_use_14.c":40:20)
#loc39 = loc("CWE758_Undefined_Behavior__struct_alloca_use_14.c":41:5)
#loc40 = loc("CWE758_Undefined_Behavior__struct_alloca_use_14.c":44:5)
#loc41 = loc("CWE758_Undefined_Behavior__struct_alloca_use_14.c":46:5)
#loc42 = loc("CWE758_Undefined_Behavior__struct_alloca_use_14.c":43:9)
#loc43 = loc("CWE758_Undefined_Behavior__struct_alloca_use_14.c":47:9)
#loc44 = loc("CWE758_Undefined_Behavior__struct_alloca_use_14.c":58:9)
#loc45 = loc("CWE758_Undefined_Behavior__struct_alloca_use_14.c":48:13)
#loc46 = loc("CWE758_Undefined_Behavior__struct_alloca_use_14.c":48:27)
#loc47 = loc("CWE758_Undefined_Behavior__struct_alloca_use_14.c":49:13)
#loc48 = loc("CWE758_Undefined_Behavior__struct_alloca_use_14.c":49:56)
#loc49 = loc("CWE758_Undefined_Behavior__struct_alloca_use_14.c":50:27)
#loc50 = loc("CWE758_Undefined_Behavior__struct_alloca_use_14.c":50:13)
#loc51 = loc("CWE758_Undefined_Behavior__struct_alloca_use_14.c":51:27)
#loc52 = loc("CWE758_Undefined_Behavior__struct_alloca_use_14.c":51:13)
#loc53 = loc("CWE758_Undefined_Behavior__struct_alloca_use_14.c":52:14)
#loc54 = loc("CWE758_Undefined_Behavior__struct_alloca_use_14.c":53:13)
#loc55 = loc("CWE758_Undefined_Behavior__struct_alloca_use_14.c":57:13)
#loc56 = loc("CWE758_Undefined_Behavior__struct_alloca_use_14.c":54:17)
#loc57 = loc("CWE758_Undefined_Behavior__struct_alloca_use_14.c":54:39)
#loc58 = loc("CWE758_Undefined_Behavior__struct_alloca_use_14.c":55:35)
#loc59 = loc("CWE758_Undefined_Behavior__struct_alloca_use_14.c":55:17)
#loc60 = loc("CWE758_Undefined_Behavior__struct_alloca_use_14.c":56:35)
#loc61 = loc("CWE758_Undefined_Behavior__struct_alloca_use_14.c":56:17)
#loc62 = loc("CWE758_Undefined_Behavior__struct_alloca_use_14.c":63:1)
#loc63 = loc("CWE758_Undefined_Behavior__struct_alloca_use_14.c":80:1)
#loc64 = loc("CWE758_Undefined_Behavior__struct_alloca_use_14.c":65:5)
#loc65 = loc("CWE758_Undefined_Behavior__struct_alloca_use_14.c":79:5)
#loc66 = loc("CWE758_Undefined_Behavior__struct_alloca_use_14.c":65:8)
#loc67 = loc("CWE758_Undefined_Behavior__struct_alloca_use_14.c":65:20)
#loc68 = loc("CWE758_Undefined_Behavior__struct_alloca_use_14.c":66:5)
#loc69 = loc("CWE758_Undefined_Behavior__struct_alloca_use_14.c":67:9)
#loc70 = loc("CWE758_Undefined_Behavior__struct_alloca_use_14.c":78:9)
#loc71 = loc("CWE758_Undefined_Behavior__struct_alloca_use_14.c":68:13)
#loc72 = loc("CWE758_Undefined_Behavior__struct_alloca_use_14.c":68:27)
#loc73 = loc("CWE758_Undefined_Behavior__struct_alloca_use_14.c":69:13)
#loc74 = loc("CWE758_Undefined_Behavior__struct_alloca_use_14.c":69:56)
#loc75 = loc("CWE758_Undefined_Behavior__struct_alloca_use_14.c":70:27)
#loc76 = loc("CWE758_Undefined_Behavior__struct_alloca_use_14.c":70:13)
#loc77 = loc("CWE758_Undefined_Behavior__struct_alloca_use_14.c":71:27)
#loc78 = loc("CWE758_Undefined_Behavior__struct_alloca_use_14.c":71:13)
#loc79 = loc("CWE758_Undefined_Behavior__struct_alloca_use_14.c":72:14)
#loc80 = loc("CWE758_Undefined_Behavior__struct_alloca_use_14.c":73:13)
#loc81 = loc("CWE758_Undefined_Behavior__struct_alloca_use_14.c":77:13)
#loc82 = loc("CWE758_Undefined_Behavior__struct_alloca_use_14.c":74:17)
#loc83 = loc("CWE758_Undefined_Behavior__struct_alloca_use_14.c":74:39)
#loc84 = loc("CWE758_Undefined_Behavior__struct_alloca_use_14.c":75:35)
#loc85 = loc("CWE758_Undefined_Behavior__struct_alloca_use_14.c":75:17)
#loc86 = loc("CWE758_Undefined_Behavior__struct_alloca_use_14.c":76:35)
#loc87 = loc("CWE758_Undefined_Behavior__struct_alloca_use_14.c":76:17)
#loc88 = loc(fused[#loc1, #loc2])
#loc89 = loc(fused[#loc3, #loc4])
#loc90 = loc(fused[#loc5, #loc6])
#loc91 = loc(fused[#loc7, #loc8])
#loc92 = loc(fused[#loc9, #loc10])
#loc93 = loc(fused[#loc11, #loc8])
#loc94 = loc(fused[#loc12, #loc13])
#loc95 = loc(fused[#loc14, #loc15])
#loc96 = loc(fused[#loc16, #loc17])
#loc97 = loc(fused[#loc24, #loc25])
#loc98 = loc(fused[#loc26, #loc27])
#loc99 = loc(fused[#loc28, #loc29])
#loc100 = loc(fused[#loc30, #loc31])
#loc101 = loc(fused[#loc33, #loc34])
#loc102 = loc(fused[#loc35, #loc36])
#loc103 = loc(fused[#loc37, #loc38])
#loc104 = loc(fused[#loc39, #loc40, #loc41, #loc36])
#loc105 = loc(fused[#loc43, #loc44])
#loc106 = loc(fused[#loc45, #loc46])
#loc107 = loc(fused[#loc47, #loc48])
#loc108 = loc(fused[#loc50, #loc49])
#loc109 = loc(fused[#loc52, #loc51])
#loc110 = loc(fused[#loc54, #loc55])
#loc111 = loc(fused[#loc56, #loc57])
#loc112 = loc(fused[#loc62, #loc63])
#loc113 = loc(fused[#loc64, #loc65])
#loc114 = loc(fused[#loc66, #loc67])
#loc115 = loc(fused[#loc68, #loc65])
#loc116 = loc(fused[#loc69, #loc70])
#loc117 = loc(fused[#loc71, #loc72])
#loc118 = loc(fused[#loc73, #loc74])
#loc119 = loc(fused[#loc76, #loc75])
#loc120 = loc(fused[#loc78, #loc77])
#loc121 = loc(fused[#loc80, #loc81])
#loc122 = loc(fused[#loc82, #loc83])
