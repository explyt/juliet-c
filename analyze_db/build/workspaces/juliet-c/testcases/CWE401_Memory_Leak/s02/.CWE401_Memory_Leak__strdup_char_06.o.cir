!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE401_Memory_Leak/s02/CWE401_Memory_Leak__strdup_char_06.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little", "dlti.mangling_mode" = "e">} {
  cir.global "private" constant cir_private @__const.goodB2G2.myString = #cir.const_array<"myString\00" : !cir.array<!s8i x 9>> : !cir.array<!s8i x 9> loc(#loc155)
  cir.global "private" constant cir_private @__const.goodB2G1.myString = #cir.const_array<"myString\00" : !cir.array<!s8i x 9>> : !cir.array<!s8i x 9> loc(#loc156)
  cir.global "private" constant cir_private @__const.CWE401_Memory_Leak__strdup_char_06_bad.myString = #cir.const_array<"myString\00" : !cir.array<!s8i x 9>> : !cir.array<!s8i x 9> loc(#loc157)
  cir.func private @strdup(!cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc158)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc159)
  cir.func no_proto @CWE401_Memory_Leak__strdup_char_06_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 9>, !cir.ptr<!cir.array<!s8i x 9>>, ["myString"] {alignment = 1 : i64} loc(#loc157)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc161)
    %2 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc15)
    cir.store %2, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc162)
    cir.br ^bb1 loc(#loc163)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.int<5> : !s32i loc(#loc19)
    %4 = cir.const #cir.int<5> : !s32i loc(#loc20)
    %5 = cir.cmp(eq, %3, %4) : !s32i, !cir.bool loc(#loc164)
    cir.brcond %5 ^bb2, ^bb5 loc(#loc165)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc166)
  ^bb3:  // pred: ^bb2
    %6 = cir.get_global @__const.CWE401_Memory_Leak__strdup_char_06_bad.myString : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc157)
    cir.copy %6 to %0 : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc157)
    %7 = cir.get_global @strdup : !cir.ptr<!cir.func<(!cir.ptr<!s8i>) -> !cir.ptr<!s8i>>> loc(#loc24)
    %8 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc25)
    %9 = cir.call @strdup(%8) : (!cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc24)
    cir.store %9, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc167)
    %10 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc28)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc29)
    cir.br ^bb4 loc(#loc23)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc18)
  ^bb5:  // 2 preds: ^bb1, ^bb4
    cir.br ^bb6 loc(#loc18)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc168)
  ^bb7:  // pred: ^bb6
    %11 = cir.const #cir.int<5> : !s32i loc(#loc32)
    %12 = cir.const #cir.int<5> : !s32i loc(#loc33)
    %13 = cir.cmp(eq, %11, %12) : !s32i, !cir.bool loc(#loc169)
    cir.brcond %13 ^bb8, ^bb9 loc(#loc170)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc31)
  ^bb9:  // 2 preds: ^bb7, ^bb8
    cir.br ^bb10 loc(#loc31)
  ^bb10:  // pred: ^bb9
    cir.return loc(#loc12)
  } loc(#loc160)
  cir.func no_proto @CWE401_Memory_Leak__strdup_char_06_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<()>> loc(#loc172)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc37)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<()>> loc(#loc173)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc39)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<()>> loc(#loc174)
    cir.call %2() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc41)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<()>> loc(#loc175)
    cir.call %3() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc43)
    cir.return loc(#loc36)
  } loc(#loc171)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc45)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc176)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 9>, !cir.ptr<!cir.array<!s8i x 9>>, ["myString"] {alignment = 1 : i64} loc(#loc156)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc178)
    %2 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc52)
    cir.store %2, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc179)
    cir.br ^bb1 loc(#loc180)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.int<5> : !s32i loc(#loc56)
    %4 = cir.const #cir.int<5> : !s32i loc(#loc57)
    %5 = cir.cmp(eq, %3, %4) : !s32i, !cir.bool loc(#loc181)
    cir.brcond %5 ^bb2, ^bb5 loc(#loc182)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc183)
  ^bb3:  // pred: ^bb2
    %6 = cir.get_global @__const.goodB2G1.myString : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc156)
    cir.copy %6 to %0 : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc156)
    %7 = cir.get_global @strdup : !cir.ptr<!cir.func<(!cir.ptr<!s8i>) -> !cir.ptr<!s8i>>> loc(#loc61)
    %8 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc62)
    %9 = cir.call @strdup(%8) : (!cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc61)
    cir.store %9, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc184)
    %10 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc65)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc66)
    cir.br ^bb4 loc(#loc60)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc55)
  ^bb5:  // 2 preds: ^bb1, ^bb4
    cir.br ^bb6 loc(#loc55)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc185)
  ^bb7:  // pred: ^bb6
    %11 = cir.const #cir.int<5> : !s32i loc(#loc69)
    %12 = cir.const #cir.int<5> : !s32i loc(#loc70)
    %13 = cir.cmp(ne, %11, %12) : !s32i, !cir.bool loc(#loc186)
    cir.brcond %13 ^bb8, ^bb9 loc(#loc187)
  ^bb8:  // pred: ^bb7
    %14 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc45)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc45)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc74)
    cir.br ^bb10 loc(#loc72)
  ^bb9:  // pred: ^bb7
    %16 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc75)
    %17 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc76)
    %18 = cir.cast(bitcast, %17 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc76)
    cir.call @free(%18) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc75)
    cir.br ^bb10 loc(#loc68)
  ^bb10:  // 2 preds: ^bb8, ^bb9
    cir.br ^bb11 loc(#loc68)
  ^bb11:  // pred: ^bb10
    cir.return loc(#loc49)
  } loc(#loc177)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 9>, !cir.ptr<!cir.array<!s8i x 9>>, ["myString"] {alignment = 1 : i64} loc(#loc155)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc189)
    %2 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc81)
    cir.store %2, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc190)
    cir.br ^bb1 loc(#loc191)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.int<5> : !s32i loc(#loc85)
    %4 = cir.const #cir.int<5> : !s32i loc(#loc86)
    %5 = cir.cmp(eq, %3, %4) : !s32i, !cir.bool loc(#loc192)
    cir.brcond %5 ^bb2, ^bb5 loc(#loc193)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc194)
  ^bb3:  // pred: ^bb2
    %6 = cir.get_global @__const.goodB2G2.myString : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc155)
    cir.copy %6 to %0 : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc155)
    %7 = cir.get_global @strdup : !cir.ptr<!cir.func<(!cir.ptr<!s8i>) -> !cir.ptr<!s8i>>> loc(#loc90)
    %8 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc91)
    %9 = cir.call @strdup(%8) : (!cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc90)
    cir.store %9, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc195)
    %10 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc94)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc95)
    cir.br ^bb4 loc(#loc89)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc84)
  ^bb5:  // 2 preds: ^bb1, ^bb4
    cir.br ^bb6 loc(#loc84)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc196)
  ^bb7:  // pred: ^bb6
    %11 = cir.const #cir.int<5> : !s32i loc(#loc98)
    %12 = cir.const #cir.int<5> : !s32i loc(#loc99)
    %13 = cir.cmp(eq, %11, %12) : !s32i, !cir.bool loc(#loc197)
    cir.brcond %13 ^bb8, ^bb9 loc(#loc198)
  ^bb8:  // pred: ^bb7
    %14 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc101)
    %15 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc102)
    %16 = cir.cast(bitcast, %15 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc102)
    cir.call @free(%16) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc101)
    cir.br ^bb9 loc(#loc97)
  ^bb9:  // 2 preds: ^bb7, ^bb8
    cir.br ^bb10 loc(#loc97)
  ^bb10:  // pred: ^bb9
    cir.return loc(#loc78)
  } loc(#loc188)
  cir.func private @strcpy(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc199)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"a string\00" : !cir.array<!s8i x 9>> : !cir.array<!s8i x 9> {alignment = 1 : i64} loc(#loc105)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc201)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc110)
    cir.store %1, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc202)
    cir.br ^bb1 loc(#loc203)
  ^bb1:  // pred: ^bb0
    %2 = cir.const #cir.int<5> : !s32i loc(#loc114)
    %3 = cir.const #cir.int<5> : !s32i loc(#loc115)
    %4 = cir.cmp(ne, %2, %3) : !s32i, !cir.bool loc(#loc204)
    cir.brcond %4 ^bb2, ^bb3 loc(#loc205)
  ^bb2:  // pred: ^bb1
    %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc119)
    %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc119)
    cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc120)
    cir.br ^bb4 loc(#loc117)
  ^bb3:  // pred: ^bb1
    %7 = cir.const #cir.int<100> : !s32i loc(#loc121)
    %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc121)
    %9 = cir.const #cir.int<1> : !u64i loc(#loc121)
    %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc121)
    %11 = cir.alloca !u8i, !cir.ptr<!u8i>, %10 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc121)
    %12 = cir.cast(bitcast, %11 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc121)
    %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc121)
    cir.store %13, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc206)
    %14 = cir.get_global @strcpy : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i>>> loc(#loc123)
    %15 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc124)
    %16 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc105)
    %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc105)
    %18 = cir.call @strcpy(%15, %17) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc123)
    %19 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc125)
    cir.call @printLine(%19) : (!cir.ptr<!s8i>) -> () loc(#loc126)
    cir.br ^bb4 loc(#loc113)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc113)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc207)
  ^bb6:  // pred: ^bb5
    %20 = cir.const #cir.int<5> : !s32i loc(#loc129)
    %21 = cir.const #cir.int<5> : !s32i loc(#loc130)
    %22 = cir.cmp(eq, %20, %21) : !s32i, !cir.bool loc(#loc208)
    cir.brcond %22 ^bb7, ^bb8 loc(#loc209)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc128)
  ^bb8:  // 2 preds: ^bb6, ^bb7
    cir.br ^bb9 loc(#loc128)
  ^bb9:  // pred: ^bb8
    cir.return loc(#loc107)
  } loc(#loc200)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc211)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc136)
    cir.store %1, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc212)
    cir.br ^bb1 loc(#loc213)
  ^bb1:  // pred: ^bb0
    %2 = cir.const #cir.int<5> : !s32i loc(#loc140)
    %3 = cir.const #cir.int<5> : !s32i loc(#loc141)
    %4 = cir.cmp(eq, %2, %3) : !s32i, !cir.bool loc(#loc214)
    cir.brcond %4 ^bb2, ^bb3 loc(#loc215)
  ^bb2:  // pred: ^bb1
    %5 = cir.const #cir.int<100> : !s32i loc(#loc143)
    %6 = cir.cast(integral, %5 : !s32i), !u64i loc(#loc143)
    %7 = cir.const #cir.int<1> : !u64i loc(#loc143)
    %8 = cir.binop(mul, %6, %7) : !u64i loc(#loc143)
    %9 = cir.alloca !u8i, !cir.ptr<!u8i>, %8 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc143)
    %10 = cir.cast(bitcast, %9 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc143)
    %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc143)
    cir.store %11, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc216)
    %12 = cir.get_global @strcpy : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i>>> loc(#loc145)
    %13 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc146)
    %14 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc147)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc147)
    %16 = cir.call @strcpy(%13, %15) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc145)
    %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc148)
    cir.call @printLine(%17) : (!cir.ptr<!s8i>) -> () loc(#loc149)
    cir.br ^bb3 loc(#loc139)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc139)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc217)
  ^bb5:  // pred: ^bb4
    %18 = cir.const #cir.int<5> : !s32i loc(#loc152)
    %19 = cir.const #cir.int<5> : !s32i loc(#loc153)
    %20 = cir.cmp(eq, %18, %19) : !s32i, !cir.bool loc(#loc218)
    cir.brcond %20 ^bb6, ^bb7 loc(#loc219)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc151)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc151)
  ^bb8:  // pred: ^bb7
    cir.return loc(#loc133)
  } loc(#loc210)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE401_Memory_Leak/s02/CWE401_Memory_Leak__strdup_char_06.c":0:0)
#loc1 = loc("CWE401_Memory_Leak__strdup_char_06.c":90:13)
#loc2 = loc("CWE401_Memory_Leak__strdup_char_06.c":90:31)
#loc3 = loc("CWE401_Memory_Leak__strdup_char_06.c":63:13)
#loc4 = loc("CWE401_Memory_Leak__strdup_char_06.c":63:31)
#loc5 = loc("CWE401_Memory_Leak__strdup_char_06.c":36:13)
#loc6 = loc("CWE401_Memory_Leak__strdup_char_06.c":36:31)
#loc7 = loc("/usr/include/string.h":187:1)
#loc8 = loc("/usr/include/string.h":188:35)
#loc9 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc10 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc11 = loc("CWE401_Memory_Leak__strdup_char_06.c":29:1)
#loc12 = loc("CWE401_Memory_Leak__strdup_char_06.c":49:1)
#loc13 = loc("CWE401_Memory_Leak__strdup_char_06.c":31:5)
#loc14 = loc("CWE401_Memory_Leak__strdup_char_06.c":31:12)
#loc15 = loc("CWE401_Memory_Leak__strdup_char_06.c":32:12)
#loc16 = loc("CWE401_Memory_Leak__strdup_char_06.c":32:5)
#loc17 = loc("CWE401_Memory_Leak__strdup_char_06.c":33:5)
#loc18 = loc("CWE401_Memory_Leak__strdup_char_06.c":42:5)
#loc19 = loc("CWE401_Memory_Leak__strdup_char_06.c":33:8)
#loc20 = loc("CWE401_Memory_Leak__strdup_char_06.c":33:27)
#loc21 = loc("CWE401_Memory_Leak__strdup_char_06.c":34:5)
#loc22 = loc("CWE401_Memory_Leak__strdup_char_06.c":35:9)
#loc23 = loc("CWE401_Memory_Leak__strdup_char_06.c":41:9)
#loc24 = loc("CWE401_Memory_Leak__strdup_char_06.c":38:20)
#loc25 = loc("CWE401_Memory_Leak__strdup_char_06.c":38:27)
#loc26 = loc("CWE401_Memory_Leak__strdup_char_06.c":38:13)
#loc27 = loc("CWE401_Memory_Leak__strdup_char_06.c":38:35)
#loc28 = loc("CWE401_Memory_Leak__strdup_char_06.c":40:23)
#loc29 = loc("CWE401_Memory_Leak__strdup_char_06.c":40:13)
#loc30 = loc("CWE401_Memory_Leak__strdup_char_06.c":43:5)
#loc31 = loc("CWE401_Memory_Leak__strdup_char_06.c":48:5)
#loc32 = loc("CWE401_Memory_Leak__strdup_char_06.c":43:8)
#loc33 = loc("CWE401_Memory_Leak__strdup_char_06.c":43:27)
#loc34 = loc("CWE401_Memory_Leak__strdup_char_06.c":44:5)
#loc35 = loc("CWE401_Memory_Leak__strdup_char_06.c":151:1)
#loc36 = loc("CWE401_Memory_Leak__strdup_char_06.c":157:1)
#loc37 = loc("CWE401_Memory_Leak__strdup_char_06.c":153:5)
#loc38 = loc("CWE401_Memory_Leak__strdup_char_06.c":153:14)
#loc39 = loc("CWE401_Memory_Leak__strdup_char_06.c":154:5)
#loc40 = loc("CWE401_Memory_Leak__strdup_char_06.c":154:14)
#loc41 = loc("CWE401_Memory_Leak__strdup_char_06.c":155:5)
#loc42 = loc("CWE401_Memory_Leak__strdup_char_06.c":155:14)
#loc43 = loc("CWE401_Memory_Leak__strdup_char_06.c":156:5)
#loc44 = loc("CWE401_Memory_Leak__strdup_char_06.c":156:14)
#loc45 = loc("CWE401_Memory_Leak__strdup_char_06.c":73:19)
#loc46 = loc("/usr/include/stdlib.h":687:1)
#loc47 = loc("/usr/include/stdlib.h":687:32)
#loc48 = loc("CWE401_Memory_Leak__strdup_char_06.c":56:1)
#loc49 = loc("CWE401_Memory_Leak__strdup_char_06.c":80:1)
#loc50 = loc("CWE401_Memory_Leak__strdup_char_06.c":58:5)
#loc51 = loc("CWE401_Memory_Leak__strdup_char_06.c":58:12)
#loc52 = loc("CWE401_Memory_Leak__strdup_char_06.c":59:12)
#loc53 = loc("CWE401_Memory_Leak__strdup_char_06.c":59:5)
#loc54 = loc("CWE401_Memory_Leak__strdup_char_06.c":60:5)
#loc55 = loc("CWE401_Memory_Leak__strdup_char_06.c":69:5)
#loc56 = loc("CWE401_Memory_Leak__strdup_char_06.c":60:8)
#loc57 = loc("CWE401_Memory_Leak__strdup_char_06.c":60:27)
#loc58 = loc("CWE401_Memory_Leak__strdup_char_06.c":61:5)
#loc59 = loc("CWE401_Memory_Leak__strdup_char_06.c":62:9)
#loc60 = loc("CWE401_Memory_Leak__strdup_char_06.c":68:9)
#loc61 = loc("CWE401_Memory_Leak__strdup_char_06.c":65:20)
#loc62 = loc("CWE401_Memory_Leak__strdup_char_06.c":65:27)
#loc63 = loc("CWE401_Memory_Leak__strdup_char_06.c":65:13)
#loc64 = loc("CWE401_Memory_Leak__strdup_char_06.c":65:35)
#loc65 = loc("CWE401_Memory_Leak__strdup_char_06.c":67:23)
#loc66 = loc("CWE401_Memory_Leak__strdup_char_06.c":67:13)
#loc67 = loc("CWE401_Memory_Leak__strdup_char_06.c":70:5)
#loc68 = loc("CWE401_Memory_Leak__strdup_char_06.c":79:5)
#loc69 = loc("CWE401_Memory_Leak__strdup_char_06.c":70:8)
#loc70 = loc("CWE401_Memory_Leak__strdup_char_06.c":70:27)
#loc71 = loc("CWE401_Memory_Leak__strdup_char_06.c":71:5)
#loc72 = loc("CWE401_Memory_Leak__strdup_char_06.c":74:5)
#loc73 = loc("CWE401_Memory_Leak__strdup_char_06.c":76:5)
#loc74 = loc("CWE401_Memory_Leak__strdup_char_06.c":73:9)
#loc75 = loc("CWE401_Memory_Leak__strdup_char_06.c":78:9)
#loc76 = loc("CWE401_Memory_Leak__strdup_char_06.c":78:14)
#loc77 = loc("CWE401_Memory_Leak__strdup_char_06.c":83:1)
#loc78 = loc("CWE401_Memory_Leak__strdup_char_06.c":102:1)
#loc79 = loc("CWE401_Memory_Leak__strdup_char_06.c":85:5)
#loc80 = loc("CWE401_Memory_Leak__strdup_char_06.c":85:12)
#loc81 = loc("CWE401_Memory_Leak__strdup_char_06.c":86:12)
#loc82 = loc("CWE401_Memory_Leak__strdup_char_06.c":86:5)
#loc83 = loc("CWE401_Memory_Leak__strdup_char_06.c":87:5)
#loc84 = loc("CWE401_Memory_Leak__strdup_char_06.c":96:5)
#loc85 = loc("CWE401_Memory_Leak__strdup_char_06.c":87:8)
#loc86 = loc("CWE401_Memory_Leak__strdup_char_06.c":87:27)
#loc87 = loc("CWE401_Memory_Leak__strdup_char_06.c":88:5)
#loc88 = loc("CWE401_Memory_Leak__strdup_char_06.c":89:9)
#loc89 = loc("CWE401_Memory_Leak__strdup_char_06.c":95:9)
#loc90 = loc("CWE401_Memory_Leak__strdup_char_06.c":92:20)
#loc91 = loc("CWE401_Memory_Leak__strdup_char_06.c":92:27)
#loc92 = loc("CWE401_Memory_Leak__strdup_char_06.c":92:13)
#loc93 = loc("CWE401_Memory_Leak__strdup_char_06.c":92:35)
#loc94 = loc("CWE401_Memory_Leak__strdup_char_06.c":94:23)
#loc95 = loc("CWE401_Memory_Leak__strdup_char_06.c":94:13)
#loc96 = loc("CWE401_Memory_Leak__strdup_char_06.c":97:5)
#loc97 = loc("CWE401_Memory_Leak__strdup_char_06.c":101:5)
#loc98 = loc("CWE401_Memory_Leak__strdup_char_06.c":97:8)
#loc99 = loc("CWE401_Memory_Leak__strdup_char_06.c":97:27)
#loc100 = loc("CWE401_Memory_Leak__strdup_char_06.c":98:5)
#loc101 = loc("CWE401_Memory_Leak__strdup_char_06.c":100:9)
#loc102 = loc("CWE401_Memory_Leak__strdup_char_06.c":100:14)
#loc103 = loc("/usr/include/string.h":141:1)
#loc104 = loc("/usr/include/string.h":142:14)
#loc105 = loc("CWE401_Memory_Leak__strdup_char_06.c":119:22)
#loc106 = loc("CWE401_Memory_Leak__strdup_char_06.c":105:1)
#loc107 = loc("CWE401_Memory_Leak__strdup_char_06.c":128:1)
#loc108 = loc("CWE401_Memory_Leak__strdup_char_06.c":107:5)
#loc109 = loc("CWE401_Memory_Leak__strdup_char_06.c":107:12)
#loc110 = loc("CWE401_Memory_Leak__strdup_char_06.c":108:12)
#loc111 = loc("CWE401_Memory_Leak__strdup_char_06.c":108:5)
#loc112 = loc("CWE401_Memory_Leak__strdup_char_06.c":109:5)
#loc113 = loc("CWE401_Memory_Leak__strdup_char_06.c":121:5)
#loc114 = loc("CWE401_Memory_Leak__strdup_char_06.c":109:8)
#loc115 = loc("CWE401_Memory_Leak__strdup_char_06.c":109:27)
#loc116 = loc("CWE401_Memory_Leak__strdup_char_06.c":110:5)
#loc117 = loc("CWE401_Memory_Leak__strdup_char_06.c":113:5)
#loc118 = loc("CWE401_Memory_Leak__strdup_char_06.c":115:5)
#loc119 = loc("CWE401_Memory_Leak__strdup_char_06.c":112:19)
#loc120 = loc("CWE401_Memory_Leak__strdup_char_06.c":112:9)
#loc121 = loc("CWE401_Memory_Leak__strdup_char_06.c":117:24)
#loc122 = loc("CWE401_Memory_Leak__strdup_char_06.c":117:9)
#loc123 = loc("CWE401_Memory_Leak__strdup_char_06.c":119:9)
#loc124 = loc("CWE401_Memory_Leak__strdup_char_06.c":119:16)
#loc125 = loc("CWE401_Memory_Leak__strdup_char_06.c":120:19)
#loc126 = loc("CWE401_Memory_Leak__strdup_char_06.c":120:9)
#loc127 = loc("CWE401_Memory_Leak__strdup_char_06.c":122:5)
#loc128 = loc("CWE401_Memory_Leak__strdup_char_06.c":127:5)
#loc129 = loc("CWE401_Memory_Leak__strdup_char_06.c":122:8)
#loc130 = loc("CWE401_Memory_Leak__strdup_char_06.c":122:27)
#loc131 = loc("CWE401_Memory_Leak__strdup_char_06.c":123:5)
#loc132 = loc("CWE401_Memory_Leak__strdup_char_06.c":131:1)
#loc133 = loc("CWE401_Memory_Leak__strdup_char_06.c":149:1)
#loc134 = loc("CWE401_Memory_Leak__strdup_char_06.c":133:5)
#loc135 = loc("CWE401_Memory_Leak__strdup_char_06.c":133:12)
#loc136 = loc("CWE401_Memory_Leak__strdup_char_06.c":134:12)
#loc137 = loc("CWE401_Memory_Leak__strdup_char_06.c":134:5)
#loc138 = loc("CWE401_Memory_Leak__strdup_char_06.c":135:5)
#loc139 = loc("CWE401_Memory_Leak__strdup_char_06.c":142:5)
#loc140 = loc("CWE401_Memory_Leak__strdup_char_06.c":135:8)
#loc141 = loc("CWE401_Memory_Leak__strdup_char_06.c":135:27)
#loc142 = loc("CWE401_Memory_Leak__strdup_char_06.c":136:5)
#loc143 = loc("CWE401_Memory_Leak__strdup_char_06.c":138:24)
#loc144 = loc("CWE401_Memory_Leak__strdup_char_06.c":138:9)
#loc145 = loc("CWE401_Memory_Leak__strdup_char_06.c":140:9)
#loc146 = loc("CWE401_Memory_Leak__strdup_char_06.c":140:16)
#loc147 = loc("CWE401_Memory_Leak__strdup_char_06.c":140:22)
#loc148 = loc("CWE401_Memory_Leak__strdup_char_06.c":141:19)
#loc149 = loc("CWE401_Memory_Leak__strdup_char_06.c":141:9)
#loc150 = loc("CWE401_Memory_Leak__strdup_char_06.c":143:5)
#loc151 = loc("CWE401_Memory_Leak__strdup_char_06.c":148:5)
#loc152 = loc("CWE401_Memory_Leak__strdup_char_06.c":143:8)
#loc153 = loc("CWE401_Memory_Leak__strdup_char_06.c":143:27)
#loc154 = loc("CWE401_Memory_Leak__strdup_char_06.c":144:5)
#loc155 = loc(fused[#loc1, #loc2])
#loc156 = loc(fused[#loc3, #loc4])
#loc157 = loc(fused[#loc5, #loc6])
#loc158 = loc(fused[#loc7, #loc8])
#loc159 = loc(fused[#loc9, #loc10])
#loc160 = loc(fused[#loc11, #loc12])
#loc161 = loc(fused[#loc13, #loc14])
#loc162 = loc(fused[#loc16, #loc15])
#loc163 = loc(fused[#loc17, #loc18])
#loc164 = loc(fused[#loc19, #loc20])
#loc165 = loc(fused[#loc21, #loc18])
#loc166 = loc(fused[#loc22, #loc23])
#loc167 = loc(fused[#loc26, #loc27])
#loc168 = loc(fused[#loc30, #loc31])
#loc169 = loc(fused[#loc32, #loc33])
#loc170 = loc(fused[#loc34, #loc31])
#loc171 = loc(fused[#loc35, #loc36])
#loc172 = loc(fused[#loc37, #loc38])
#loc173 = loc(fused[#loc39, #loc40])
#loc174 = loc(fused[#loc41, #loc42])
#loc175 = loc(fused[#loc43, #loc44])
#loc176 = loc(fused[#loc46, #loc47])
#loc177 = loc(fused[#loc48, #loc49])
#loc178 = loc(fused[#loc50, #loc51])
#loc179 = loc(fused[#loc53, #loc52])
#loc180 = loc(fused[#loc54, #loc55])
#loc181 = loc(fused[#loc56, #loc57])
#loc182 = loc(fused[#loc58, #loc55])
#loc183 = loc(fused[#loc59, #loc60])
#loc184 = loc(fused[#loc63, #loc64])
#loc185 = loc(fused[#loc67, #loc68])
#loc186 = loc(fused[#loc69, #loc70])
#loc187 = loc(fused[#loc71, #loc72, #loc73, #loc68])
#loc188 = loc(fused[#loc77, #loc78])
#loc189 = loc(fused[#loc79, #loc80])
#loc190 = loc(fused[#loc82, #loc81])
#loc191 = loc(fused[#loc83, #loc84])
#loc192 = loc(fused[#loc85, #loc86])
#loc193 = loc(fused[#loc87, #loc84])
#loc194 = loc(fused[#loc88, #loc89])
#loc195 = loc(fused[#loc92, #loc93])
#loc196 = loc(fused[#loc96, #loc97])
#loc197 = loc(fused[#loc98, #loc99])
#loc198 = loc(fused[#loc100, #loc97])
#loc199 = loc(fused[#loc103, #loc104])
#loc200 = loc(fused[#loc106, #loc107])
#loc201 = loc(fused[#loc108, #loc109])
#loc202 = loc(fused[#loc111, #loc110])
#loc203 = loc(fused[#loc112, #loc113])
#loc204 = loc(fused[#loc114, #loc115])
#loc205 = loc(fused[#loc116, #loc117, #loc118, #loc113])
#loc206 = loc(fused[#loc122, #loc121])
#loc207 = loc(fused[#loc127, #loc128])
#loc208 = loc(fused[#loc129, #loc130])
#loc209 = loc(fused[#loc131, #loc128])
#loc210 = loc(fused[#loc132, #loc133])
#loc211 = loc(fused[#loc134, #loc135])
#loc212 = loc(fused[#loc137, #loc136])
#loc213 = loc(fused[#loc138, #loc139])
#loc214 = loc(fused[#loc140, #loc141])
#loc215 = loc(fused[#loc142, #loc139])
#loc216 = loc(fused[#loc144, #loc143])
#loc217 = loc(fused[#loc150, #loc151])
#loc218 = loc(fused[#loc152, #loc153])
#loc219 = loc(fused[#loc154, #loc151])
