!s32i = !cir.int<s, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc7 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_64b.c":21:74)
#loc8 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_64b.c":21:81)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_64b.c":56:78)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_64b.c":56:85)
!ty__twoIntsStruct = !cir.record<struct "_twoIntsStruct" {!s32i, !s32i} #cir.record.decl.ast>
#loc130 = loc(fused[#loc7, #loc8])
#loc152 = loc(fused[#loc69, #loc70])
module @"/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_64b.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr = dense<64> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, "dlti.endianness" = "little", "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @printStructLine(!cir.ptr<!ty__twoIntsStruct>) loc(#loc127)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc128)
  cir.func @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_64b_badSink(%arg0: !cir.ptr<!void> loc(fused[#loc7, #loc8])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dataVoidPtr", init] {alignment = 8 : i64} loc(#loc130)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!cir.ptr<!cir.ptr<!ty__twoIntsStruct>>>, ["dataPtr", init] {alignment = 8 : i64} loc(#loc131)
    %2 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["data", init] {alignment = 8 : i64} loc(#loc132)
    cir.store %arg0, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc13)
    %3 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc10)
    %4 = cir.cast(bitcast, %3 : !cir.ptr<!void>), !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc10)
    cir.store %4, %1 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!cir.ptr<!cir.ptr<!ty__twoIntsStruct>>> loc(#loc131)
    %5 = cir.load deref %1 : !cir.ptr<!cir.ptr<!cir.ptr<!ty__twoIntsStruct>>>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc14)
    %6 = cir.load %5 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc15)
    cir.store %6, %2 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc132)
    cir.scope {
      %7 = cir.alloca !cir.array<!ty__twoIntsStruct x 100>, !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>, ["source"] {alignment = 16 : i64} loc(#loc134)
      cir.scope {
        %8 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc136)
        cir.scope {
          %9 = cir.const #cir.int<0> : !s32i loc(#loc26)
          %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc26)
          cir.store %10, %8 : !u64i, !cir.ptr<!u64i> loc(#loc138)
          cir.for : cond {
            %11 = cir.load %8 : !cir.ptr<!u64i>, !u64i loc(#loc28)
            %12 = cir.const #cir.int<100> : !s32i loc(#loc29)
            %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc29)
            %14 = cir.cmp(lt, %11, %13) : !u64i, !cir.bool loc(#loc139)
            cir.condition(%14) loc(#loc30)
          } body {
            cir.scope {
              %11 = cir.const #cir.int<0> : !s32i loc(#loc32)
              %12 = cir.load %8 : !cir.ptr<!u64i>, !u64i loc(#loc33)
              %13 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc34)
              %14 = cir.ptr_stride(%13 : !cir.ptr<!ty__twoIntsStruct>, %12 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc34)
              %15 = cir.get_member %14[0] {name = "intOne"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc35)
              cir.store %11, %15 : !s32i, !cir.ptr<!s32i> loc(#loc141)
              %16 = cir.const #cir.int<0> : !s32i loc(#loc36)
              %17 = cir.load %8 : !cir.ptr<!u64i>, !u64i loc(#loc37)
              %18 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc38)
              %19 = cir.ptr_stride(%18 : !cir.ptr<!ty__twoIntsStruct>, %17 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc38)
              %20 = cir.get_member %19[1] {name = "intTwo"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc39)
              cir.store %16, %20 : !s32i, !cir.ptr<!s32i> loc(#loc142)
            } loc(#loc140)
            cir.yield loc(#loc25)
          } step {
            %11 = cir.load %8 : !cir.ptr<!u64i>, !u64i loc(#loc40)
            %12 = cir.unary(inc, %11) : !u64i, !u64i loc(#loc41)
            cir.store %12, %8 : !u64i, !cir.ptr<!u64i> loc(#loc143)
            cir.yield loc(#loc137)
          } loc(#loc137)
        } loc(#loc137)
      } loc(#loc135)
      cir.scope {
        %8 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc145)
        cir.scope {
          %15 = cir.const #cir.int<0> : !s32i loc(#loc48)
          %16 = cir.cast(integral, %15 : !s32i), !u64i loc(#loc48)
          cir.store %16, %8 : !u64i, !cir.ptr<!u64i> loc(#loc147)
          cir.for : cond {
            %17 = cir.load %8 : !cir.ptr<!u64i>, !u64i loc(#loc50)
            %18 = cir.const #cir.int<100> : !s32i loc(#loc51)
            %19 = cir.cast(integral, %18 : !s32i), !u64i loc(#loc51)
            %20 = cir.cmp(lt, %17, %19) : !u64i, !cir.bool loc(#loc148)
            cir.condition(%20) loc(#loc52)
          } body {
            cir.scope {
              %17 = cir.load %2 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc54)
              %18 = cir.load %8 : !cir.ptr<!u64i>, !u64i loc(#loc55)
              %19 = cir.ptr_stride(%17 : !cir.ptr<!ty__twoIntsStruct>, %18 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc56)
              %20 = cir.load %8 : !cir.ptr<!u64i>, !u64i loc(#loc57)
              %21 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc58)
              %22 = cir.ptr_stride(%21 : !cir.ptr<!ty__twoIntsStruct>, %20 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc58)
              cir.copy %22 to %19 : !cir.ptr<!ty__twoIntsStruct> loc(#loc56)
            } loc(#loc149)
            cir.yield loc(#loc47)
          } step {
            %17 = cir.load %8 : !cir.ptr<!u64i>, !u64i loc(#loc59)
            %18 = cir.unary(inc, %17) : !u64i, !u64i loc(#loc60)
            cir.store %18, %8 : !u64i, !cir.ptr<!u64i> loc(#loc150)
            cir.yield loc(#loc146)
          } loc(#loc146)
        } loc(#loc146)
        %9 = cir.load %2 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc61)
        %10 = cir.const #cir.int<0> : !s32i loc(#loc62)
        %11 = cir.ptr_stride(%9 : !cir.ptr<!ty__twoIntsStruct>, %10 : !s32i), !cir.ptr<!ty__twoIntsStruct> loc(#loc63)
        cir.call @printStructLine(%11) : (!cir.ptr<!ty__twoIntsStruct>) -> () loc(#loc64)
        %12 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc65)
        %13 = cir.load %2 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc66)
        %14 = cir.cast(bitcast, %13 : !cir.ptr<!ty__twoIntsStruct>), !cir.ptr<!void> loc(#loc66)
        cir.call @free(%14) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc65)
      } loc(#loc144)
    } loc(#loc133)
    cir.return loc(#loc6)
  } loc(#loc129)
  cir.func @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_64b_goodG2BSink(%arg0: !cir.ptr<!void> loc(fused[#loc69, #loc70])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dataVoidPtr", init] {alignment = 8 : i64} loc(#loc152)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!cir.ptr<!cir.ptr<!ty__twoIntsStruct>>>, ["dataPtr", init] {alignment = 8 : i64} loc(#loc153)
    %2 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["data", init] {alignment = 8 : i64} loc(#loc154)
    cir.store %arg0, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc75)
    %3 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc72)
    %4 = cir.cast(bitcast, %3 : !cir.ptr<!void>), !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc72)
    cir.store %4, %1 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!cir.ptr<!cir.ptr<!ty__twoIntsStruct>>> loc(#loc153)
    %5 = cir.load deref %1 : !cir.ptr<!cir.ptr<!cir.ptr<!ty__twoIntsStruct>>>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc76)
    %6 = cir.load %5 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc77)
    cir.store %6, %2 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc154)
    cir.scope {
      %7 = cir.alloca !cir.array<!ty__twoIntsStruct x 100>, !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>, ["source"] {alignment = 16 : i64} loc(#loc156)
      cir.scope {
        %8 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc158)
        cir.scope {
          %9 = cir.const #cir.int<0> : !s32i loc(#loc88)
          %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc88)
          cir.store %10, %8 : !u64i, !cir.ptr<!u64i> loc(#loc160)
          cir.for : cond {
            %11 = cir.load %8 : !cir.ptr<!u64i>, !u64i loc(#loc90)
            %12 = cir.const #cir.int<100> : !s32i loc(#loc91)
            %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc91)
            %14 = cir.cmp(lt, %11, %13) : !u64i, !cir.bool loc(#loc161)
            cir.condition(%14) loc(#loc92)
          } body {
            cir.scope {
              %11 = cir.const #cir.int<0> : !s32i loc(#loc94)
              %12 = cir.load %8 : !cir.ptr<!u64i>, !u64i loc(#loc95)
              %13 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc96)
              %14 = cir.ptr_stride(%13 : !cir.ptr<!ty__twoIntsStruct>, %12 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc96)
              %15 = cir.get_member %14[0] {name = "intOne"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc35)
              cir.store %11, %15 : !s32i, !cir.ptr<!s32i> loc(#loc163)
              %16 = cir.const #cir.int<0> : !s32i loc(#loc97)
              %17 = cir.load %8 : !cir.ptr<!u64i>, !u64i loc(#loc98)
              %18 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc99)
              %19 = cir.ptr_stride(%18 : !cir.ptr<!ty__twoIntsStruct>, %17 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc99)
              %20 = cir.get_member %19[1] {name = "intTwo"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc39)
              cir.store %16, %20 : !s32i, !cir.ptr<!s32i> loc(#loc164)
            } loc(#loc162)
            cir.yield loc(#loc87)
          } step {
            %11 = cir.load %8 : !cir.ptr<!u64i>, !u64i loc(#loc100)
            %12 = cir.unary(inc, %11) : !u64i, !u64i loc(#loc101)
            cir.store %12, %8 : !u64i, !cir.ptr<!u64i> loc(#loc165)
            cir.yield loc(#loc159)
          } loc(#loc159)
        } loc(#loc159)
      } loc(#loc157)
      cir.scope {
        %8 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc167)
        cir.scope {
          %15 = cir.const #cir.int<0> : !s32i loc(#loc108)
          %16 = cir.cast(integral, %15 : !s32i), !u64i loc(#loc108)
          cir.store %16, %8 : !u64i, !cir.ptr<!u64i> loc(#loc169)
          cir.for : cond {
            %17 = cir.load %8 : !cir.ptr<!u64i>, !u64i loc(#loc110)
            %18 = cir.const #cir.int<100> : !s32i loc(#loc111)
            %19 = cir.cast(integral, %18 : !s32i), !u64i loc(#loc111)
            %20 = cir.cmp(lt, %17, %19) : !u64i, !cir.bool loc(#loc170)
            cir.condition(%20) loc(#loc112)
          } body {
            cir.scope {
              %17 = cir.load %2 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc114)
              %18 = cir.load %8 : !cir.ptr<!u64i>, !u64i loc(#loc115)
              %19 = cir.ptr_stride(%17 : !cir.ptr<!ty__twoIntsStruct>, %18 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc116)
              %20 = cir.load %8 : !cir.ptr<!u64i>, !u64i loc(#loc117)
              %21 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc118)
              %22 = cir.ptr_stride(%21 : !cir.ptr<!ty__twoIntsStruct>, %20 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc118)
              cir.copy %22 to %19 : !cir.ptr<!ty__twoIntsStruct> loc(#loc116)
            } loc(#loc171)
            cir.yield loc(#loc107)
          } step {
            %17 = cir.load %8 : !cir.ptr<!u64i>, !u64i loc(#loc119)
            %18 = cir.unary(inc, %17) : !u64i, !u64i loc(#loc120)
            cir.store %18, %8 : !u64i, !cir.ptr<!u64i> loc(#loc172)
            cir.yield loc(#loc168)
          } loc(#loc168)
        } loc(#loc168)
        %9 = cir.load %2 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc121)
        %10 = cir.const #cir.int<0> : !s32i loc(#loc122)
        %11 = cir.ptr_stride(%9 : !cir.ptr<!ty__twoIntsStruct>, %10 : !s32i), !cir.ptr<!ty__twoIntsStruct> loc(#loc123)
        cir.call @printStructLine(%11) : (!cir.ptr<!ty__twoIntsStruct>) -> () loc(#loc124)
        %12 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc125)
        %13 = cir.load %2 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc126)
        %14 = cir.cast(bitcast, %13 : !cir.ptr<!ty__twoIntsStruct>), !cir.ptr<!void> loc(#loc126)
        cir.call @free(%14) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc125)
      } loc(#loc166)
    } loc(#loc155)
    cir.return loc(#loc68)
  } loc(#loc151)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_64b.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":40:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":40:63)
#loc3 = loc("/usr/include/stdlib.h":687:1)
#loc4 = loc("/usr/include/stdlib.h":687:32)
#loc5 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_64b.c":21:1)
#loc6 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_64b.c":49:1)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_64b.c":24:5)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_64b.c":24:52)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_64b.c":26:5)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_64b.c":26:37)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_64b.c":22:1)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_64b.c":26:30)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_64b.c":26:29)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_64b.c":27:5)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_64b.c":48:5)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_64b.c":28:9)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_64b.c":28:33)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_64b.c":29:9)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_64b.c":37:9)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_64b.c":30:13)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_64b.c":30:20)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_64b.c":32:13)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_64b.c":36:13)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_64b.c":32:22)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_64b.c":32:18)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_64b.c":32:25)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_64b.c":32:29)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_64b.c":32:27)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_64b.c":33:13)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_64b.c":34:36)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_64b.c":34:24)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_64b.c":34:17)
#loc35 = loc("../../../testcasesupport/std_testcase.h":98:9)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_64b.c":35:36)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_64b.c":35:24)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_64b.c":35:17)
#loc39 = loc("../../../testcasesupport/std_testcase.h":99:9)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_64b.c":32:35)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_64b.c":32:34)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_64b.c":38:9)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_64b.c":47:9)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_64b.c":39:13)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_64b.c":39:20)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_64b.c":41:13)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_64b.c":44:13)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_64b.c":41:22)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_64b.c":41:18)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_64b.c":41:25)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_64b.c":41:29)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_64b.c":41:27)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_64b.c":42:13)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_64b.c":43:17)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_64b.c":43:22)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_64b.c":43:23)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_64b.c":43:34)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_64b.c":43:27)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_64b.c":41:35)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_64b.c":41:34)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_64b.c":45:30)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_64b.c":45:35)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_64b.c":45:36)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_64b.c":45:13)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_64b.c":46:13)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_64b.c":46:18)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_64b.c":56:1)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_64b.c":84:1)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_64b.c":59:5)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_64b.c":59:52)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_64b.c":61:5)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_64b.c":61:37)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_64b.c":57:1)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_64b.c":61:30)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_64b.c":61:29)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_64b.c":62:5)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_64b.c":83:5)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_64b.c":63:9)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_64b.c":63:33)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_64b.c":64:9)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_64b.c":72:9)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_64b.c":65:13)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_64b.c":65:20)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_64b.c":67:13)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_64b.c":71:13)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_64b.c":67:22)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_64b.c":67:18)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_64b.c":67:25)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_64b.c":67:29)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_64b.c":67:27)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_64b.c":68:13)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_64b.c":69:36)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_64b.c":69:24)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_64b.c":69:17)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_64b.c":70:36)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_64b.c":70:24)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_64b.c":70:17)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_64b.c":67:35)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_64b.c":67:34)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_64b.c":73:9)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_64b.c":82:9)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_64b.c":74:13)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_64b.c":74:20)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_64b.c":76:13)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_64b.c":79:13)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_64b.c":76:22)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_64b.c":76:18)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_64b.c":76:25)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_64b.c":76:29)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_64b.c":76:27)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_64b.c":77:13)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_64b.c":78:17)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_64b.c":78:22)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_64b.c":78:23)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_64b.c":78:34)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_64b.c":78:27)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_64b.c":76:35)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_64b.c":76:34)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_64b.c":80:30)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_64b.c":80:35)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_64b.c":80:36)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_64b.c":80:13)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_64b.c":81:13)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_64b.c":81:18)
#loc127 = loc(fused[#loc1, #loc2])
#loc128 = loc(fused[#loc3, #loc4])
#loc129 = loc(fused[#loc5, #loc6])
#loc131 = loc(fused[#loc9, #loc10])
#loc132 = loc(fused[#loc11, #loc12])
#loc133 = loc(fused[#loc16, #loc17])
#loc134 = loc(fused[#loc18, #loc19])
#loc135 = loc(fused[#loc20, #loc21])
#loc136 = loc(fused[#loc22, #loc23])
#loc137 = loc(fused[#loc24, #loc25])
#loc138 = loc(fused[#loc27, #loc26])
#loc139 = loc(fused[#loc28, #loc29])
#loc140 = loc(fused[#loc31, #loc25])
#loc141 = loc(fused[#loc34, #loc32])
#loc142 = loc(fused[#loc38, #loc36])
#loc143 = loc(fused[#loc41, #loc40])
#loc144 = loc(fused[#loc42, #loc43])
#loc145 = loc(fused[#loc44, #loc45])
#loc146 = loc(fused[#loc46, #loc47])
#loc147 = loc(fused[#loc49, #loc48])
#loc148 = loc(fused[#loc50, #loc51])
#loc149 = loc(fused[#loc53, #loc47])
#loc150 = loc(fused[#loc60, #loc59])
#loc151 = loc(fused[#loc67, #loc68])
#loc153 = loc(fused[#loc71, #loc72])
#loc154 = loc(fused[#loc73, #loc74])
#loc155 = loc(fused[#loc78, #loc79])
#loc156 = loc(fused[#loc80, #loc81])
#loc157 = loc(fused[#loc82, #loc83])
#loc158 = loc(fused[#loc84, #loc85])
#loc159 = loc(fused[#loc86, #loc87])
#loc160 = loc(fused[#loc89, #loc88])
#loc161 = loc(fused[#loc90, #loc91])
#loc162 = loc(fused[#loc93, #loc87])
#loc163 = loc(fused[#loc96, #loc94])
#loc164 = loc(fused[#loc99, #loc97])
#loc165 = loc(fused[#loc101, #loc100])
#loc166 = loc(fused[#loc102, #loc103])
#loc167 = loc(fused[#loc104, #loc105])
#loc168 = loc(fused[#loc106, #loc107])
#loc169 = loc(fused[#loc109, #loc108])
#loc170 = loc(fused[#loc110, #loc111])
#loc171 = loc(fused[#loc113, #loc107])
#loc172 = loc(fused[#loc120, #loc119])
