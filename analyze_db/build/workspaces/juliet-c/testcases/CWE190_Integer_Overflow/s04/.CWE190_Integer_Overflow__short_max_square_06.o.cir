!s16i = !cir.int<s, 16>
!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
module @"/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_max_square_06.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @printIntLine(!s32i) loc(#loc169)
  cir.func no_proto @CWE190_Integer_Overflow__short_max_square_06_bad() extra(#fn_attr) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc171)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc7)
    %2 = cir.cast(integral, %1 : !s32i), !s16i loc(#loc7)
    cir.store %2, %0 : !s16i, !cir.ptr<!s16i> loc(#loc172)
    cir.scope {
      %3 = cir.const #cir.int<5> : !s32i loc(#loc11)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc12)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !cir.bool loc(#loc174)
      cir.if %5 {
        %6 = cir.const #cir.int<32767> : !s32i loc(#loc14)
        %7 = cir.cast(integral, %6 : !s32i), !s16i loc(#loc14)
        cir.store %7, %0 : !s16i, !cir.ptr<!s16i> loc(#loc176)
      } loc(#loc175)
    } loc(#loc173)
    cir.scope {
      %3 = cir.const #cir.int<5> : !s32i loc(#loc18)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc19)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !cir.bool loc(#loc178)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc181)
          %7 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc25)
          %8 = cir.cast(integral, %7 : !s16i), !s32i loc(#loc25)
          %9 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc24)
          %10 = cir.cast(integral, %9 : !s16i), !s32i loc(#loc24)
          %11 = cir.binop(mul, %8, %10) nsw : !s32i loc(#loc25)
          %12 = cir.cast(integral, %11 : !s32i), !s16i loc(#loc25)
          cir.store %12, %6 : !s16i, !cir.ptr<!s16i> loc(#loc181)
          %13 = cir.load %6 : !cir.ptr<!s16i>, !s16i loc(#loc26)
          %14 = cir.cast(integral, %13 : !s16i), !s32i loc(#loc26)
          cir.call @printIntLine(%14) : (!s32i) -> () loc(#loc27)
        } loc(#loc180)
      } loc(#loc179)
    } loc(#loc177)
    cir.return loc(#loc4)
  } loc(#loc170)
  cir.func no_proto @CWE190_Integer_Overflow__short_max_square_06_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<()>> loc(#loc183)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc30)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<()>> loc(#loc184)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc32)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<()>> loc(#loc185)
    cir.call %2() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc34)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<()>> loc(#loc186)
    cir.call %3() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc36)
    cir.return loc(#loc29)
  } loc(#loc182)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc187)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc40)
  cir.func private @sqrt(!cir.double) -> !cir.double extra(#fn_attr1) loc(#loc41)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc42)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc189)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc47)
    %2 = cir.cast(integral, %1 : !s32i), !s16i loc(#loc47)
    cir.store %2, %0 : !s16i, !cir.ptr<!s16i> loc(#loc190)
    cir.scope {
      %3 = cir.const #cir.int<5> : !s32i loc(#loc51)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc52)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !cir.bool loc(#loc192)
      cir.if %5 {
        %6 = cir.const #cir.int<32767> : !s32i loc(#loc54)
        %7 = cir.cast(integral, %6 : !s32i), !s16i loc(#loc54)
        cir.store %7, %0 : !s16i, !cir.ptr<!s16i> loc(#loc194)
      } loc(#loc193)
    } loc(#loc191)
    cir.scope {
      %3 = cir.const #cir.int<5> : !s32i loc(#loc58)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc59)
      %5 = cir.cmp(ne, %3, %4) : !s32i, !cir.bool loc(#loc196)
      cir.if %5 {
        %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc40)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc40)
        cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc63)
      } else {
        cir.scope {
          %6 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc66)
          %7 = cir.cast(integral, %6 : !s16i), !s64i loc(#loc66)
          %8 = cir.cast(integral, %7 : !s64i), !s32i loc(#loc66)
          %9 = cir.abs %8 poison : !s32i loc(#loc67)
          %10 = cir.cast(integral, %9 : !s32i), !s64i loc(#loc67)
          %11 = cir.get_global @sqrt : !cir.ptr<!cir.func<(!cir.double) -> !cir.double>> loc(#loc68)
          %12 = cir.const #cir.int<32767> : !s32i loc(#loc69)
          %13 = cir.cast(int_to_float, %12 : !s32i), !cir.double loc(#loc69)
          %14 = cir.call @sqrt(%13) : (!cir.double) -> !cir.double extra(#fn_attr1) loc(#loc68)
          %15 = cir.cast(float_to_int, %14 : !cir.double), !s64i loc(#loc68)
          %16 = cir.cmp(le, %10, %15) : !s64i, !cir.bool loc(#loc199)
          cir.if %16 {
            %17 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc201)
            %18 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc76)
            %19 = cir.cast(integral, %18 : !s16i), !s32i loc(#loc76)
            %20 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc75)
            %21 = cir.cast(integral, %20 : !s16i), !s32i loc(#loc75)
            %22 = cir.binop(mul, %19, %21) nsw : !s32i loc(#loc76)
            %23 = cir.cast(integral, %22 : !s32i), !s16i loc(#loc76)
            cir.store %23, %17 : !s16i, !cir.ptr<!s16i> loc(#loc201)
            %24 = cir.load %17 : !cir.ptr<!s16i>, !s16i loc(#loc77)
            %25 = cir.cast(integral, %24 : !s16i), !s32i loc(#loc77)
            cir.call @printIntLine(%25) : (!s32i) -> () loc(#loc78)
          } else {
            %17 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc42)
            %18 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc42)
            cir.call @printLine(%18) : (!cir.ptr<!s8i>) -> () loc(#loc79)
          } loc(#loc200)
        } loc(#loc198)
      } loc(#loc197)
    } loc(#loc195)
    cir.return loc(#loc44)
  } loc(#loc188)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc203)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc84)
    %2 = cir.cast(integral, %1 : !s32i), !s16i loc(#loc84)
    cir.store %2, %0 : !s16i, !cir.ptr<!s16i> loc(#loc204)
    cir.scope {
      %3 = cir.const #cir.int<5> : !s32i loc(#loc88)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc89)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !cir.bool loc(#loc206)
      cir.if %5 {
        %6 = cir.const #cir.int<32767> : !s32i loc(#loc91)
        %7 = cir.cast(integral, %6 : !s32i), !s16i loc(#loc91)
        cir.store %7, %0 : !s16i, !cir.ptr<!s16i> loc(#loc208)
      } loc(#loc207)
    } loc(#loc205)
    cir.scope {
      %3 = cir.const #cir.int<5> : !s32i loc(#loc95)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc96)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !cir.bool loc(#loc210)
      cir.if %5 {
        cir.scope {
          %6 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc100)
          %7 = cir.cast(integral, %6 : !s16i), !s64i loc(#loc100)
          %8 = cir.cast(integral, %7 : !s64i), !s32i loc(#loc100)
          %9 = cir.abs %8 poison : !s32i loc(#loc101)
          %10 = cir.cast(integral, %9 : !s32i), !s64i loc(#loc101)
          %11 = cir.get_global @sqrt : !cir.ptr<!cir.func<(!cir.double) -> !cir.double>> loc(#loc102)
          %12 = cir.const #cir.int<32767> : !s32i loc(#loc103)
          %13 = cir.cast(int_to_float, %12 : !s32i), !cir.double loc(#loc103)
          %14 = cir.call @sqrt(%13) : (!cir.double) -> !cir.double extra(#fn_attr1) loc(#loc102)
          %15 = cir.cast(float_to_int, %14 : !cir.double), !s64i loc(#loc102)
          %16 = cir.cmp(le, %10, %15) : !s64i, !cir.bool loc(#loc213)
          cir.if %16 {
            %17 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc215)
            %18 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc110)
            %19 = cir.cast(integral, %18 : !s16i), !s32i loc(#loc110)
            %20 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc109)
            %21 = cir.cast(integral, %20 : !s16i), !s32i loc(#loc109)
            %22 = cir.binop(mul, %19, %21) nsw : !s32i loc(#loc110)
            %23 = cir.cast(integral, %22 : !s32i), !s16i loc(#loc110)
            cir.store %23, %17 : !s16i, !cir.ptr<!s16i> loc(#loc215)
            %24 = cir.load %17 : !cir.ptr<!s16i>, !s16i loc(#loc111)
            %25 = cir.cast(integral, %24 : !s16i), !s32i loc(#loc111)
            cir.call @printIntLine(%25) : (!s32i) -> () loc(#loc112)
          } else {
            %17 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc113)
            %18 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc113)
            cir.call @printLine(%18) : (!cir.ptr<!s8i>) -> () loc(#loc114)
          } loc(#loc214)
        } loc(#loc212)
      } loc(#loc211)
    } loc(#loc209)
    cir.return loc(#loc81)
  } loc(#loc202)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc217)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc119)
    %2 = cir.cast(integral, %1 : !s32i), !s16i loc(#loc119)
    cir.store %2, %0 : !s16i, !cir.ptr<!s16i> loc(#loc218)
    cir.scope {
      %3 = cir.const #cir.int<5> : !s32i loc(#loc123)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc124)
      %5 = cir.cmp(ne, %3, %4) : !s32i, !cir.bool loc(#loc220)
      cir.if %5 {
        %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc128)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc128)
        cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc129)
      } else {
        %6 = cir.const #cir.int<2> : !s32i loc(#loc130)
        %7 = cir.cast(integral, %6 : !s32i), !s16i loc(#loc130)
        cir.store %7, %0 : !s16i, !cir.ptr<!s16i> loc(#loc222)
      } loc(#loc221)
    } loc(#loc219)
    cir.scope {
      %3 = cir.const #cir.int<5> : !s32i loc(#loc134)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc135)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !cir.bool loc(#loc224)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc227)
          %7 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc141)
          %8 = cir.cast(integral, %7 : !s16i), !s32i loc(#loc141)
          %9 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc140)
          %10 = cir.cast(integral, %9 : !s16i), !s32i loc(#loc140)
          %11 = cir.binop(mul, %8, %10) nsw : !s32i loc(#loc141)
          %12 = cir.cast(integral, %11 : !s32i), !s16i loc(#loc141)
          cir.store %12, %6 : !s16i, !cir.ptr<!s16i> loc(#loc227)
          %13 = cir.load %6 : !cir.ptr<!s16i>, !s16i loc(#loc142)
          %14 = cir.cast(integral, %13 : !s16i), !s32i loc(#loc142)
          cir.call @printIntLine(%14) : (!s32i) -> () loc(#loc143)
        } loc(#loc226)
      } loc(#loc225)
    } loc(#loc223)
    cir.return loc(#loc116)
  } loc(#loc216)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc229)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc148)
    %2 = cir.cast(integral, %1 : !s32i), !s16i loc(#loc148)
    cir.store %2, %0 : !s16i, !cir.ptr<!s16i> loc(#loc230)
    cir.scope {
      %3 = cir.const #cir.int<5> : !s32i loc(#loc152)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc153)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !cir.bool loc(#loc232)
      cir.if %5 {
        %6 = cir.const #cir.int<2> : !s32i loc(#loc155)
        %7 = cir.cast(integral, %6 : !s32i), !s16i loc(#loc155)
        cir.store %7, %0 : !s16i, !cir.ptr<!s16i> loc(#loc234)
      } loc(#loc233)
    } loc(#loc231)
    cir.scope {
      %3 = cir.const #cir.int<5> : !s32i loc(#loc159)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc160)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !cir.bool loc(#loc236)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc239)
          %7 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc166)
          %8 = cir.cast(integral, %7 : !s16i), !s32i loc(#loc166)
          %9 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc165)
          %10 = cir.cast(integral, %9 : !s16i), !s32i loc(#loc165)
          %11 = cir.binop(mul, %8, %10) nsw : !s32i loc(#loc166)
          %12 = cir.cast(integral, %11 : !s32i), !s16i loc(#loc166)
          cir.store %12, %6 : !s16i, !cir.ptr<!s16i> loc(#loc239)
          %13 = cir.load %6 : !cir.ptr<!s16i>, !s16i loc(#loc167)
          %14 = cir.cast(integral, %13 : !s16i), !s32i loc(#loc167)
          cir.call @printIntLine(%14) : (!s32i) -> () loc(#loc168)
        } loc(#loc238)
      } loc(#loc237)
    } loc(#loc235)
    cir.return loc(#loc145)
  } loc(#loc228)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_max_square_06.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("CWE190_Integer_Overflow__short_max_square_06.c":29:1)
#loc4 = loc("CWE190_Integer_Overflow__short_max_square_06.c":46:1)
#loc5 = loc("CWE190_Integer_Overflow__short_max_square_06.c":31:5)
#loc6 = loc("CWE190_Integer_Overflow__short_max_square_06.c":31:11)
#loc7 = loc("CWE190_Integer_Overflow__short_max_square_06.c":32:12)
#loc8 = loc("CWE190_Integer_Overflow__short_max_square_06.c":32:5)
#loc9 = loc("CWE190_Integer_Overflow__short_max_square_06.c":33:5)
#loc10 = loc("CWE190_Integer_Overflow__short_max_square_06.c":37:5)
#loc11 = loc("CWE190_Integer_Overflow__short_max_square_06.c":33:8)
#loc12 = loc("CWE190_Integer_Overflow__short_max_square_06.c":33:27)
#loc13 = loc("CWE190_Integer_Overflow__short_max_square_06.c":34:5)
#loc14 = loc("CWE190_Integer_Overflow__short_max_square_06.c":36:16)
#loc15 = loc("CWE190_Integer_Overflow__short_max_square_06.c":36:9)
#loc16 = loc("CWE190_Integer_Overflow__short_max_square_06.c":38:5)
#loc17 = loc("CWE190_Integer_Overflow__short_max_square_06.c":45:5)
#loc18 = loc("CWE190_Integer_Overflow__short_max_square_06.c":38:8)
#loc19 = loc("CWE190_Integer_Overflow__short_max_square_06.c":38:27)
#loc20 = loc("CWE190_Integer_Overflow__short_max_square_06.c":39:5)
#loc21 = loc("CWE190_Integer_Overflow__short_max_square_06.c":40:9)
#loc22 = loc("CWE190_Integer_Overflow__short_max_square_06.c":44:9)
#loc23 = loc("CWE190_Integer_Overflow__short_max_square_06.c":42:13)
#loc24 = loc("CWE190_Integer_Overflow__short_max_square_06.c":42:35)
#loc25 = loc("CWE190_Integer_Overflow__short_max_square_06.c":42:28)
#loc26 = loc("CWE190_Integer_Overflow__short_max_square_06.c":43:26)
#loc27 = loc("CWE190_Integer_Overflow__short_max_square_06.c":43:13)
#loc28 = loc("CWE190_Integer_Overflow__short_max_square_06.c":152:1)
#loc29 = loc("CWE190_Integer_Overflow__short_max_square_06.c":158:1)
#loc30 = loc("CWE190_Integer_Overflow__short_max_square_06.c":154:5)
#loc31 = loc("CWE190_Integer_Overflow__short_max_square_06.c":154:14)
#loc32 = loc("CWE190_Integer_Overflow__short_max_square_06.c":155:5)
#loc33 = loc("CWE190_Integer_Overflow__short_max_square_06.c":155:14)
#loc34 = loc("CWE190_Integer_Overflow__short_max_square_06.c":156:5)
#loc35 = loc("CWE190_Integer_Overflow__short_max_square_06.c":156:14)
#loc36 = loc("CWE190_Integer_Overflow__short_max_square_06.c":157:5)
#loc37 = loc("CWE190_Integer_Overflow__short_max_square_06.c":157:14)
#loc38 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc39 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc40 = loc("CWE190_Integer_Overflow__short_max_square_06.c":65:19)
#loc41 = loc("/usr/include/x86_64-linux-gnu/bits/mathcalls.h":143:1)
#loc42 = loc("CWE190_Integer_Overflow__short_max_square_06.c":77:23)
#loc43 = loc("CWE190_Integer_Overflow__short_max_square_06.c":53:1)
#loc44 = loc("CWE190_Integer_Overflow__short_max_square_06.c":80:1)
#loc45 = loc("CWE190_Integer_Overflow__short_max_square_06.c":55:5)
#loc46 = loc("CWE190_Integer_Overflow__short_max_square_06.c":55:11)
#loc47 = loc("CWE190_Integer_Overflow__short_max_square_06.c":56:12)
#loc48 = loc("CWE190_Integer_Overflow__short_max_square_06.c":56:5)
#loc49 = loc("CWE190_Integer_Overflow__short_max_square_06.c":57:5)
#loc50 = loc("CWE190_Integer_Overflow__short_max_square_06.c":61:5)
#loc51 = loc("CWE190_Integer_Overflow__short_max_square_06.c":57:8)
#loc52 = loc("CWE190_Integer_Overflow__short_max_square_06.c":57:27)
#loc53 = loc("CWE190_Integer_Overflow__short_max_square_06.c":58:5)
#loc54 = loc("CWE190_Integer_Overflow__short_max_square_06.c":60:16)
#loc55 = loc("CWE190_Integer_Overflow__short_max_square_06.c":60:9)
#loc56 = loc("CWE190_Integer_Overflow__short_max_square_06.c":62:5)
#loc57 = loc("CWE190_Integer_Overflow__short_max_square_06.c":79:5)
#loc58 = loc("CWE190_Integer_Overflow__short_max_square_06.c":62:8)
#loc59 = loc("CWE190_Integer_Overflow__short_max_square_06.c":62:27)
#loc60 = loc("CWE190_Integer_Overflow__short_max_square_06.c":63:5)
#loc61 = loc("CWE190_Integer_Overflow__short_max_square_06.c":66:5)
#loc62 = loc("CWE190_Integer_Overflow__short_max_square_06.c":68:5)
#loc63 = loc("CWE190_Integer_Overflow__short_max_square_06.c":65:9)
#loc64 = loc("CWE190_Integer_Overflow__short_max_square_06.c":70:9)
#loc65 = loc("CWE190_Integer_Overflow__short_max_square_06.c":78:9)
#loc66 = loc("CWE190_Integer_Overflow__short_max_square_06.c":70:23)
#loc67 = loc("CWE190_Integer_Overflow__short_max_square_06.c":70:13)
#loc68 = loc("CWE190_Integer_Overflow__short_max_square_06.c":70:38)
#loc69 = loc("CWE190_Integer_Overflow__short_max_square_06.c":70:51)
#loc70 = loc("CWE190_Integer_Overflow__short_max_square_06.c":70:59)
#loc71 = loc("CWE190_Integer_Overflow__short_max_square_06.c":71:9)
#loc72 = loc("CWE190_Integer_Overflow__short_max_square_06.c":74:9)
#loc73 = loc("CWE190_Integer_Overflow__short_max_square_06.c":76:9)
#loc74 = loc("CWE190_Integer_Overflow__short_max_square_06.c":72:13)
#loc75 = loc("CWE190_Integer_Overflow__short_max_square_06.c":72:35)
#loc76 = loc("CWE190_Integer_Overflow__short_max_square_06.c":72:28)
#loc77 = loc("CWE190_Integer_Overflow__short_max_square_06.c":73:26)
#loc78 = loc("CWE190_Integer_Overflow__short_max_square_06.c":73:13)
#loc79 = loc("CWE190_Integer_Overflow__short_max_square_06.c":77:13)
#loc80 = loc("CWE190_Integer_Overflow__short_max_square_06.c":83:1)
#loc81 = loc("CWE190_Integer_Overflow__short_max_square_06.c":105:1)
#loc82 = loc("CWE190_Integer_Overflow__short_max_square_06.c":85:5)
#loc83 = loc("CWE190_Integer_Overflow__short_max_square_06.c":85:11)
#loc84 = loc("CWE190_Integer_Overflow__short_max_square_06.c":86:12)
#loc85 = loc("CWE190_Integer_Overflow__short_max_square_06.c":86:5)
#loc86 = loc("CWE190_Integer_Overflow__short_max_square_06.c":87:5)
#loc87 = loc("CWE190_Integer_Overflow__short_max_square_06.c":91:5)
#loc88 = loc("CWE190_Integer_Overflow__short_max_square_06.c":87:8)
#loc89 = loc("CWE190_Integer_Overflow__short_max_square_06.c":87:27)
#loc90 = loc("CWE190_Integer_Overflow__short_max_square_06.c":88:5)
#loc91 = loc("CWE190_Integer_Overflow__short_max_square_06.c":90:16)
#loc92 = loc("CWE190_Integer_Overflow__short_max_square_06.c":90:9)
#loc93 = loc("CWE190_Integer_Overflow__short_max_square_06.c":92:5)
#loc94 = loc("CWE190_Integer_Overflow__short_max_square_06.c":104:5)
#loc95 = loc("CWE190_Integer_Overflow__short_max_square_06.c":92:8)
#loc96 = loc("CWE190_Integer_Overflow__short_max_square_06.c":92:27)
#loc97 = loc("CWE190_Integer_Overflow__short_max_square_06.c":93:5)
#loc98 = loc("CWE190_Integer_Overflow__short_max_square_06.c":95:9)
#loc99 = loc("CWE190_Integer_Overflow__short_max_square_06.c":103:9)
#loc100 = loc("CWE190_Integer_Overflow__short_max_square_06.c":95:23)
#loc101 = loc("CWE190_Integer_Overflow__short_max_square_06.c":95:13)
#loc102 = loc("CWE190_Integer_Overflow__short_max_square_06.c":95:38)
#loc103 = loc("CWE190_Integer_Overflow__short_max_square_06.c":95:51)
#loc104 = loc("CWE190_Integer_Overflow__short_max_square_06.c":95:59)
#loc105 = loc("CWE190_Integer_Overflow__short_max_square_06.c":96:9)
#loc106 = loc("CWE190_Integer_Overflow__short_max_square_06.c":99:9)
#loc107 = loc("CWE190_Integer_Overflow__short_max_square_06.c":101:9)
#loc108 = loc("CWE190_Integer_Overflow__short_max_square_06.c":97:13)
#loc109 = loc("CWE190_Integer_Overflow__short_max_square_06.c":97:35)
#loc110 = loc("CWE190_Integer_Overflow__short_max_square_06.c":97:28)
#loc111 = loc("CWE190_Integer_Overflow__short_max_square_06.c":98:26)
#loc112 = loc("CWE190_Integer_Overflow__short_max_square_06.c":98:13)
#loc113 = loc("CWE190_Integer_Overflow__short_max_square_06.c":102:23)
#loc114 = loc("CWE190_Integer_Overflow__short_max_square_06.c":102:13)
#loc115 = loc("CWE190_Integer_Overflow__short_max_square_06.c":108:1)
#loc116 = loc("CWE190_Integer_Overflow__short_max_square_06.c":130:1)
#loc117 = loc("CWE190_Integer_Overflow__short_max_square_06.c":110:5)
#loc118 = loc("CWE190_Integer_Overflow__short_max_square_06.c":110:11)
#loc119 = loc("CWE190_Integer_Overflow__short_max_square_06.c":111:12)
#loc120 = loc("CWE190_Integer_Overflow__short_max_square_06.c":111:5)
#loc121 = loc("CWE190_Integer_Overflow__short_max_square_06.c":112:5)
#loc122 = loc("CWE190_Integer_Overflow__short_max_square_06.c":121:5)
#loc123 = loc("CWE190_Integer_Overflow__short_max_square_06.c":112:8)
#loc124 = loc("CWE190_Integer_Overflow__short_max_square_06.c":112:27)
#loc125 = loc("CWE190_Integer_Overflow__short_max_square_06.c":113:5)
#loc126 = loc("CWE190_Integer_Overflow__short_max_square_06.c":116:5)
#loc127 = loc("CWE190_Integer_Overflow__short_max_square_06.c":118:5)
#loc128 = loc("CWE190_Integer_Overflow__short_max_square_06.c":115:19)
#loc129 = loc("CWE190_Integer_Overflow__short_max_square_06.c":115:9)
#loc130 = loc("CWE190_Integer_Overflow__short_max_square_06.c":120:16)
#loc131 = loc("CWE190_Integer_Overflow__short_max_square_06.c":120:9)
#loc132 = loc("CWE190_Integer_Overflow__short_max_square_06.c":122:5)
#loc133 = loc("CWE190_Integer_Overflow__short_max_square_06.c":129:5)
#loc134 = loc("CWE190_Integer_Overflow__short_max_square_06.c":122:8)
#loc135 = loc("CWE190_Integer_Overflow__short_max_square_06.c":122:27)
#loc136 = loc("CWE190_Integer_Overflow__short_max_square_06.c":123:5)
#loc137 = loc("CWE190_Integer_Overflow__short_max_square_06.c":124:9)
#loc138 = loc("CWE190_Integer_Overflow__short_max_square_06.c":128:9)
#loc139 = loc("CWE190_Integer_Overflow__short_max_square_06.c":126:13)
#loc140 = loc("CWE190_Integer_Overflow__short_max_square_06.c":126:35)
#loc141 = loc("CWE190_Integer_Overflow__short_max_square_06.c":126:28)
#loc142 = loc("CWE190_Integer_Overflow__short_max_square_06.c":127:26)
#loc143 = loc("CWE190_Integer_Overflow__short_max_square_06.c":127:13)
#loc144 = loc("CWE190_Integer_Overflow__short_max_square_06.c":133:1)
#loc145 = loc("CWE190_Integer_Overflow__short_max_square_06.c":150:1)
#loc146 = loc("CWE190_Integer_Overflow__short_max_square_06.c":135:5)
#loc147 = loc("CWE190_Integer_Overflow__short_max_square_06.c":135:11)
#loc148 = loc("CWE190_Integer_Overflow__short_max_square_06.c":136:12)
#loc149 = loc("CWE190_Integer_Overflow__short_max_square_06.c":136:5)
#loc150 = loc("CWE190_Integer_Overflow__short_max_square_06.c":137:5)
#loc151 = loc("CWE190_Integer_Overflow__short_max_square_06.c":141:5)
#loc152 = loc("CWE190_Integer_Overflow__short_max_square_06.c":137:8)
#loc153 = loc("CWE190_Integer_Overflow__short_max_square_06.c":137:27)
#loc154 = loc("CWE190_Integer_Overflow__short_max_square_06.c":138:5)
#loc155 = loc("CWE190_Integer_Overflow__short_max_square_06.c":140:16)
#loc156 = loc("CWE190_Integer_Overflow__short_max_square_06.c":140:9)
#loc157 = loc("CWE190_Integer_Overflow__short_max_square_06.c":142:5)
#loc158 = loc("CWE190_Integer_Overflow__short_max_square_06.c":149:5)
#loc159 = loc("CWE190_Integer_Overflow__short_max_square_06.c":142:8)
#loc160 = loc("CWE190_Integer_Overflow__short_max_square_06.c":142:27)
#loc161 = loc("CWE190_Integer_Overflow__short_max_square_06.c":143:5)
#loc162 = loc("CWE190_Integer_Overflow__short_max_square_06.c":144:9)
#loc163 = loc("CWE190_Integer_Overflow__short_max_square_06.c":148:9)
#loc164 = loc("CWE190_Integer_Overflow__short_max_square_06.c":146:13)
#loc165 = loc("CWE190_Integer_Overflow__short_max_square_06.c":146:35)
#loc166 = loc("CWE190_Integer_Overflow__short_max_square_06.c":146:28)
#loc167 = loc("CWE190_Integer_Overflow__short_max_square_06.c":147:26)
#loc168 = loc("CWE190_Integer_Overflow__short_max_square_06.c":147:13)
#loc169 = loc(fused[#loc1, #loc2])
#loc170 = loc(fused[#loc3, #loc4])
#loc171 = loc(fused[#loc5, #loc6])
#loc172 = loc(fused[#loc8, #loc7])
#loc173 = loc(fused[#loc9, #loc10])
#loc174 = loc(fused[#loc11, #loc12])
#loc175 = loc(fused[#loc13, #loc10])
#loc176 = loc(fused[#loc15, #loc14])
#loc177 = loc(fused[#loc16, #loc17])
#loc178 = loc(fused[#loc18, #loc19])
#loc179 = loc(fused[#loc20, #loc17])
#loc180 = loc(fused[#loc21, #loc22])
#loc181 = loc(fused[#loc23, #loc24])
#loc182 = loc(fused[#loc28, #loc29])
#loc183 = loc(fused[#loc30, #loc31])
#loc184 = loc(fused[#loc32, #loc33])
#loc185 = loc(fused[#loc34, #loc35])
#loc186 = loc(fused[#loc36, #loc37])
#loc187 = loc(fused[#loc38, #loc39])
#loc188 = loc(fused[#loc43, #loc44])
#loc189 = loc(fused[#loc45, #loc46])
#loc190 = loc(fused[#loc48, #loc47])
#loc191 = loc(fused[#loc49, #loc50])
#loc192 = loc(fused[#loc51, #loc52])
#loc193 = loc(fused[#loc53, #loc50])
#loc194 = loc(fused[#loc55, #loc54])
#loc195 = loc(fused[#loc56, #loc57])
#loc196 = loc(fused[#loc58, #loc59])
#loc197 = loc(fused[#loc60, #loc61, #loc62, #loc57])
#loc198 = loc(fused[#loc64, #loc65])
#loc199 = loc(fused[#loc67, #loc70])
#loc200 = loc(fused[#loc71, #loc72, #loc73, #loc65])
#loc201 = loc(fused[#loc74, #loc75])
#loc202 = loc(fused[#loc80, #loc81])
#loc203 = loc(fused[#loc82, #loc83])
#loc204 = loc(fused[#loc85, #loc84])
#loc205 = loc(fused[#loc86, #loc87])
#loc206 = loc(fused[#loc88, #loc89])
#loc207 = loc(fused[#loc90, #loc87])
#loc208 = loc(fused[#loc92, #loc91])
#loc209 = loc(fused[#loc93, #loc94])
#loc210 = loc(fused[#loc95, #loc96])
#loc211 = loc(fused[#loc97, #loc94])
#loc212 = loc(fused[#loc98, #loc99])
#loc213 = loc(fused[#loc101, #loc104])
#loc214 = loc(fused[#loc105, #loc106, #loc107, #loc99])
#loc215 = loc(fused[#loc108, #loc109])
#loc216 = loc(fused[#loc115, #loc116])
#loc217 = loc(fused[#loc117, #loc118])
#loc218 = loc(fused[#loc120, #loc119])
#loc219 = loc(fused[#loc121, #loc122])
#loc220 = loc(fused[#loc123, #loc124])
#loc221 = loc(fused[#loc125, #loc126, #loc127, #loc122])
#loc222 = loc(fused[#loc131, #loc130])
#loc223 = loc(fused[#loc132, #loc133])
#loc224 = loc(fused[#loc134, #loc135])
#loc225 = loc(fused[#loc136, #loc133])
#loc226 = loc(fused[#loc137, #loc138])
#loc227 = loc(fused[#loc139, #loc140])
#loc228 = loc(fused[#loc144, #loc145])
#loc229 = loc(fused[#loc146, #loc147])
#loc230 = loc(fused[#loc149, #loc148])
#loc231 = loc(fused[#loc150, #loc151])
#loc232 = loc(fused[#loc152, #loc153])
#loc233 = loc(fused[#loc154, #loc151])
#loc234 = loc(fused[#loc156, #loc155])
#loc235 = loc(fused[#loc157, #loc158])
#loc236 = loc(fused[#loc159, #loc160])
#loc237 = loc(fused[#loc161, #loc158])
#loc238 = loc(fused[#loc162, #loc163])
#loc239 = loc(fused[#loc164, #loc165])
