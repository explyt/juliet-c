!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc174 = loc("CWE510_Trapdoor__ip_based_logic_01.c":205:10)
#loc175 = loc("CWE510_Trapdoor__ip_based_logic_01.c":205:14)
#loc176 = loc("CWE510_Trapdoor__ip_based_logic_01.c":205:20)
#loc177 = loc("CWE510_Trapdoor__ip_based_logic_01.c":205:32)
!ty_in_addr = !cir.struct<struct "in_addr" {!u32i} #cir.record.decl.ast>
#loc358 = loc(fused[#loc174, #loc175])
#loc359 = loc(fused[#loc176, #loc177])
!ty_sockaddr = !cir.struct<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.struct<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE510_Trapdoor/CWE510_Trapdoor__ip_based_logic_01.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc289)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc290)
  cir.func private @bind(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc291)
  cir.func private @listen(!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc292)
  cir.func private @accept(!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc293)
  cir.func private @getsockname(!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i extra(#fn_attr) loc(#loc294)
  cir.func private @strcmp(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc295)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"192.168.30.123\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc15)
  cir.func private @inet_ntoa(!ty_in_addr) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc296)
  cir.func private @send(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc297)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Welcome, admin!\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc20)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Welcome!\00" : !cir.array<!s8i x 9>> : !cir.array<!s8i x 9> {alignment = 1 : i64} loc(#loc21)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc298)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Send failed!\00" : !cir.array<!s8i x 13>> : !cir.array<!s8i x 13> {alignment = 1 : i64} loc(#loc24)
  cir.func private @close(!s32i) -> !s32i loc(#loc299)
  cir.func no_proto @CWE510_Trapdoor__ip_based_logic_01_bad() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc302)
      %1 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["acceptService"] {alignment = 4 : i64} loc(#loc303)
      %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptServiceLen", init] {alignment = 4 : i64} loc(#loc304)
      %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc305)
      %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc306)
      %5 = cir.const #cir.int<16> : !u64i loc(#loc307)
      %6 = cir.cast(integral, %5 : !u64i), !s32i loc(#loc307)
      cir.store %6, %2 : !s32i, !cir.ptr<!s32i> loc(#loc304)
      %7 = cir.const #cir.int<1> : !s32i loc(#loc37)
      %8 = cir.unary(minus, %7) : !s32i, !s32i loc(#loc37)
      cir.store %8, %3 : !s32i, !cir.ptr<!s32i> loc(#loc305)
      %9 = cir.const #cir.int<1> : !s32i loc(#loc39)
      %10 = cir.unary(minus, %9) : !s32i, !s32i loc(#loc39)
      cir.store %10, %4 : !s32i, !cir.ptr<!s32i> loc(#loc306)
      cir.scope {
        cir.do {
          %11 = cir.const #cir.int<2> : !s32i loc(#loc43)
          %12 = cir.const #cir.int<1> : !s32i loc(#loc44)
          %13 = cir.const #cir.int<6> : !s32i loc(#loc45)
          %14 = cir.call @socket(%11, %12, %13) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc46)
          cir.store %14, %3 : !s32i, !cir.ptr<!s32i> loc(#loc309)
          cir.scope {
            %33 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc51)
            %34 = cir.const #cir.int<1> : !s32i loc(#loc52)
            %35 = cir.unary(minus, %34) : !s32i, !s32i loc(#loc52)
            %36 = cir.cmp(eq, %33, %35) : !s32i, !cir.bool loc(#loc311)
            cir.if %36 {
              cir.break loc(#loc54)
            } loc(#loc312)
          } loc(#loc310)
          %15 = cir.cast(bitcast, %0 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc313)
          %16 = cir.const #cir.int<0> : !s32i loc(#loc57)
          %17 = cir.const #cir.int<16> : !u64i loc(#loc314)
          cir.libc.memset %17 bytes from %15 set to %16 : !cir.ptr<!void>, !s32i, !u64i loc(#loc315)
          %18 = cir.const #cir.int<2> : !s32i loc(#loc62)
          %19 = cir.cast(integral, %18 : !s32i), !u16i loc(#loc62)
          %20 = cir.get_member %0[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc63)
          cir.store %19, %20 : !u16i, !cir.ptr<!u16i> loc(#loc316)
          %21 = cir.const #cir.int<0> : !s32i loc(#loc65)
          %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc65)
          %23 = cir.get_member %0[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc66)
          %24 = cir.get_member %23[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc67)
          cir.store %22, %24 : !u32i, !cir.ptr<!u32i> loc(#loc317)
          %25 = cir.const #cir.int<20000> : !s32i loc(#loc69)
          %26 = cir.cast(integral, %25 : !s32i), !u16i loc(#loc69)
          %27 = cir.call @htons(%26) : (!u16i) -> !u16i extra(#fn_attr) loc(#loc70)
          %28 = cir.get_member %0[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc71)
          cir.store %27, %28 : !u16i, !cir.ptr<!u16i> loc(#loc318)
          cir.scope {
            %33 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc76)
            %34 = cir.cast(bitcast, %0 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc320)
            %35 = cir.const #cir.int<16> : !u64i loc(#loc321)
            %36 = cir.cast(integral, %35 : !u64i), !u32i loc(#loc321)
            %37 = cir.call @bind(%33, %34, %36) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc81)
            %38 = cir.const #cir.int<1> : !s32i loc(#loc82)
            %39 = cir.unary(minus, %38) : !s32i, !s32i loc(#loc82)
            %40 = cir.cmp(eq, %37, %39) : !s32i, !cir.bool loc(#loc322)
            cir.if %40 {
              cir.break loc(#loc84)
            } loc(#loc323)
          } loc(#loc319)
          cir.scope {
            %33 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc87)
            %34 = cir.const #cir.int<5> : !s32i loc(#loc88)
            %35 = cir.call @listen(%33, %34) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc89)
            %36 = cir.const #cir.int<1> : !s32i loc(#loc90)
            %37 = cir.unary(minus, %36) : !s32i, !s32i loc(#loc90)
            %38 = cir.cmp(eq, %35, %37) : !s32i, !cir.bool loc(#loc325)
            cir.if %38 {
              cir.break loc(#loc92)
            } loc(#loc326)
          } loc(#loc324)
          %29 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc93)
          %30 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc94)
          %31 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc95)
          %32 = cir.call @accept(%29, %30, %31) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc96)
          cir.store %32, %4 : !s32i, !cir.ptr<!s32i> loc(#loc327)
          cir.scope {
            %33 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc101)
            %34 = cir.const #cir.int<1> : !s32i loc(#loc102)
            %35 = cir.unary(minus, %34) : !s32i, !s32i loc(#loc102)
            %36 = cir.cmp(eq, %33, %35) : !s32i, !cir.bool loc(#loc329)
            cir.if %36 {
              cir.break loc(#loc104)
            } loc(#loc330)
          } loc(#loc328)
          cir.scope {
            %33 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc107)
            %34 = cir.cast(bitcast, %1 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc332)
            %35 = cir.cast(bitcast, %2 : !cir.ptr<!s32i>), !cir.ptr<!u32i> loc(#loc333)
            %36 = cir.call @getsockname(%33, %34, %35) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i extra(#fn_attr) loc(#loc112)
            %37 = cir.const #cir.int<1> : !s32i loc(#loc113)
            %38 = cir.unary(minus, %37) : !s32i, !s32i loc(#loc114)
            %39 = cir.cmp(eq, %36, %38) : !s32i, !cir.bool loc(#loc334)
            cir.if %39 {
              cir.break loc(#loc116)
            } loc(#loc335)
          } loc(#loc331)
          cir.scope {
            %33 = cir.get_global @strcmp : !cir.ptr<!cir.func<!s32i (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc119)
            %34 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc15)
            %35 = cir.cast(array_to_ptrdecay, %34 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc15)
            %36 = cir.get_member %1[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc66)
            %37 = cir.load %36 : !cir.ptr<!ty_in_addr>, !ty_in_addr loc(#loc120)
            %38 = cir.call @inet_ntoa(%37) : (!ty_in_addr) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc120)
            %39 = cir.call @strcmp(%35, %38) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc119)
            %40 = cir.const #cir.int<0> : !s32i loc(#loc121)
            %41 = cir.cmp(eq, %39, %40) : !s32i, !cir.bool loc(#loc337)
            cir.if %41 {
              cir.scope {
                %42 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc127)
                %43 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc20)
                %44 = cir.cast(array_to_ptrdecay, %43 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc20)
                %45 = cir.cast(bitcast, %44 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc20)
                %46 = cir.const #cir.int<15> : !u64i loc(#loc340)
                %47 = cir.const #cir.int<0> : !s32i loc(#loc130)
                %48 = cir.call @send(%42, %45, %46, %47) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc131)
                %49 = cir.const #cir.int<1> : !s32i loc(#loc132)
                %50 = cir.unary(minus, %49) : !s32i, !s32i loc(#loc132)
                %51 = cir.cast(integral, %50 : !s32i), !s64i loc(#loc132)
                %52 = cir.cmp(eq, %48, %51) : !s64i, !cir.bool loc(#loc341)
                cir.if %52 {
                  cir.break loc(#loc134)
                } loc(#loc342)
              } loc(#loc339)
            } else {
              cir.scope {
                %42 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc137)
                %43 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc21)
                %44 = cir.cast(array_to_ptrdecay, %43 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc21)
                %45 = cir.cast(bitcast, %44 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc21)
                %46 = cir.const #cir.int<8> : !u64i loc(#loc344)
                %47 = cir.const #cir.int<0> : !s32i loc(#loc140)
                %48 = cir.call @send(%42, %45, %46, %47) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc141)
                %49 = cir.const #cir.int<1> : !s32i loc(#loc142)
                %50 = cir.unary(minus, %49) : !s32i, !s32i loc(#loc142)
                %51 = cir.cast(integral, %50 : !s32i), !s64i loc(#loc142)
                %52 = cir.cmp(eq, %48, %51) : !s64i, !cir.bool loc(#loc345)
                cir.if %52 {
                  %53 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 13>> loc(#loc24)
                  %54 = cir.cast(array_to_ptrdecay, %53 : !cir.ptr<!cir.array<!s8i x 13>>), !cir.ptr<!s8i> loc(#loc24)
                  cir.call @printLine(%54) : (!cir.ptr<!s8i>) -> () loc(#loc144)
                } loc(#loc346)
              } loc(#loc343)
            } loc(#loc338)
          } loc(#loc336)
          cir.yield loc(#loc42)
        } while {
          %11 = cir.const #cir.int<0> : !s32i loc(#loc145)
          %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc145)
          cir.condition(%12) loc(#loc145)
        } loc(#loc308)
      } loc(#loc308)
      cir.scope {
        %11 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc148)
        %12 = cir.const #cir.int<1> : !s32i loc(#loc149)
        %13 = cir.unary(minus, %12) : !s32i, !s32i loc(#loc149)
        %14 = cir.cmp(ne, %11, %13) : !s32i, !cir.bool loc(#loc348)
        cir.if %14 {
          %15 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc151)
          %16 = cir.call @close(%15) : (!s32i) -> !s32i loc(#loc152)
        } loc(#loc349)
      } loc(#loc347)
      cir.scope {
        %11 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc155)
        %12 = cir.const #cir.int<1> : !s32i loc(#loc156)
        %13 = cir.unary(minus, %12) : !s32i, !s32i loc(#loc156)
        %14 = cir.cmp(ne, %11, %13) : !s32i, !cir.bool loc(#loc351)
        cir.if %14 {
          %15 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc158)
          %16 = cir.call @close(%15) : (!s32i) -> !s32i loc(#loc159)
        } loc(#loc352)
      } loc(#loc350)
    } loc(#loc301)
    cir.return loc(#loc28)
  } loc(#loc300)
  cir.func no_proto @CWE510_Trapdoor__ip_based_logic_01_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<!void ()>> loc(#loc354)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc162)
    cir.return loc(#loc161)
  } loc(#loc353)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc355)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc356)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc168)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc169)
  cir.global "private" constant cir_private dsolocal @".str.6" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc170)
  cir.global "private" constant cir_private dsolocal @".str.7" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc171)
  cir.func @main(%arg0: !s32i loc(fused[#loc174, #loc175]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc176, #loc177])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc358)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc359)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc173)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc178)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc178)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc179)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc180)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc180)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc181)
    %6 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc168)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc168)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc182)
    %8 = cir.get_global @CWE510_Trapdoor__ip_based_logic_01_good : !cir.ptr<!cir.func<!void ()>> loc(#loc360)
    cir.call @CWE510_Trapdoor__ip_based_logic_01_good() : () -> () loc(#loc183)
    %9 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc169)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc169)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc185)
    %11 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc170)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc170)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc186)
    %13 = cir.get_global @CWE510_Trapdoor__ip_based_logic_01_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc361)
    cir.call @CWE510_Trapdoor__ip_based_logic_01_bad() : () -> () loc(#loc187)
    %14 = cir.get_global @".str.7" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc171)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc171)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc189)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc190)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc362)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc362)
    cir.return %17 : !s32i loc(#loc362)
  } loc(#loc357)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc365)
      %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc366)
      %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc367)
      %3 = cir.const #cir.int<1> : !s32i loc(#loc199)
      %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc199)
      cir.store %4, %1 : !s32i, !cir.ptr<!s32i> loc(#loc366)
      %5 = cir.const #cir.int<1> : !s32i loc(#loc201)
      %6 = cir.unary(minus, %5) : !s32i, !s32i loc(#loc201)
      cir.store %6, %2 : !s32i, !cir.ptr<!s32i> loc(#loc367)
      cir.scope {
        cir.do {
          %7 = cir.const #cir.int<2> : !s32i loc(#loc204)
          %8 = cir.const #cir.int<1> : !s32i loc(#loc205)
          %9 = cir.const #cir.int<6> : !s32i loc(#loc206)
          %10 = cir.call @socket(%7, %8, %9) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc207)
          cir.store %10, %1 : !s32i, !cir.ptr<!s32i> loc(#loc369)
          cir.scope {
            %29 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc212)
            %30 = cir.const #cir.int<1> : !s32i loc(#loc213)
            %31 = cir.unary(minus, %30) : !s32i, !s32i loc(#loc213)
            %32 = cir.cmp(eq, %29, %31) : !s32i, !cir.bool loc(#loc371)
            cir.if %32 {
              cir.break loc(#loc215)
            } loc(#loc372)
          } loc(#loc370)
          %11 = cir.cast(bitcast, %0 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc373)
          %12 = cir.const #cir.int<0> : !s32i loc(#loc218)
          %13 = cir.const #cir.int<16> : !u64i loc(#loc374)
          cir.libc.memset %13 bytes from %11 set to %12 : !cir.ptr<!void>, !s32i, !u64i loc(#loc375)
          %14 = cir.const #cir.int<2> : !s32i loc(#loc223)
          %15 = cir.cast(integral, %14 : !s32i), !u16i loc(#loc223)
          %16 = cir.get_member %0[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc63)
          cir.store %15, %16 : !u16i, !cir.ptr<!u16i> loc(#loc376)
          %17 = cir.const #cir.int<0> : !s32i loc(#loc225)
          %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc225)
          %19 = cir.get_member %0[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc66)
          %20 = cir.get_member %19[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc67)
          cir.store %18, %20 : !u32i, !cir.ptr<!u32i> loc(#loc377)
          %21 = cir.const #cir.int<20000> : !s32i loc(#loc227)
          %22 = cir.cast(integral, %21 : !s32i), !u16i loc(#loc227)
          %23 = cir.call @htons(%22) : (!u16i) -> !u16i extra(#fn_attr) loc(#loc228)
          %24 = cir.get_member %0[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc71)
          cir.store %23, %24 : !u16i, !cir.ptr<!u16i> loc(#loc378)
          cir.scope {
            %29 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc233)
            %30 = cir.cast(bitcast, %0 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc380)
            %31 = cir.const #cir.int<16> : !u64i loc(#loc381)
            %32 = cir.cast(integral, %31 : !u64i), !u32i loc(#loc381)
            %33 = cir.call @bind(%29, %30, %32) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc238)
            %34 = cir.const #cir.int<1> : !s32i loc(#loc239)
            %35 = cir.unary(minus, %34) : !s32i, !s32i loc(#loc239)
            %36 = cir.cmp(eq, %33, %35) : !s32i, !cir.bool loc(#loc382)
            cir.if %36 {
              cir.break loc(#loc241)
            } loc(#loc383)
          } loc(#loc379)
          cir.scope {
            %29 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc244)
            %30 = cir.const #cir.int<5> : !s32i loc(#loc245)
            %31 = cir.call @listen(%29, %30) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc246)
            %32 = cir.const #cir.int<1> : !s32i loc(#loc247)
            %33 = cir.unary(minus, %32) : !s32i, !s32i loc(#loc247)
            %34 = cir.cmp(eq, %31, %33) : !s32i, !cir.bool loc(#loc385)
            cir.if %34 {
              cir.break loc(#loc249)
            } loc(#loc386)
          } loc(#loc384)
          %25 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc250)
          %26 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc251)
          %27 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc252)
          %28 = cir.call @accept(%25, %26, %27) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc253)
          cir.store %28, %2 : !s32i, !cir.ptr<!s32i> loc(#loc387)
          cir.scope {
            %29 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc258)
            %30 = cir.const #cir.int<1> : !s32i loc(#loc259)
            %31 = cir.unary(minus, %30) : !s32i, !s32i loc(#loc259)
            %32 = cir.cmp(eq, %29, %31) : !s32i, !cir.bool loc(#loc389)
            cir.if %32 {
              cir.break loc(#loc261)
            } loc(#loc390)
          } loc(#loc388)
          cir.scope {
            %29 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc264)
            %30 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc265)
            %31 = cir.cast(array_to_ptrdecay, %30 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc265)
            %32 = cir.cast(bitcast, %31 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc265)
            %33 = cir.const #cir.int<8> : !u64i loc(#loc392)
            %34 = cir.const #cir.int<0> : !s32i loc(#loc268)
            %35 = cir.call @send(%29, %32, %33, %34) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc269)
            %36 = cir.const #cir.int<1> : !s32i loc(#loc270)
            %37 = cir.unary(minus, %36) : !s32i, !s32i loc(#loc270)
            %38 = cir.cast(integral, %37 : !s32i), !s64i loc(#loc270)
            %39 = cir.cmp(eq, %35, %38) : !s64i, !cir.bool loc(#loc393)
            cir.if %39 {
              %40 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 13>> loc(#loc272)
              %41 = cir.cast(array_to_ptrdecay, %40 : !cir.ptr<!cir.array<!s8i x 13>>), !cir.ptr<!s8i> loc(#loc272)
              cir.call @printLine(%41) : (!cir.ptr<!s8i>) -> () loc(#loc273)
            } loc(#loc394)
          } loc(#loc391)
          cir.yield loc(#loc203)
        } while {
          %7 = cir.const #cir.int<0> : !s32i loc(#loc274)
          %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc274)
          cir.condition(%8) loc(#loc274)
        } loc(#loc368)
      } loc(#loc368)
      cir.scope {
        %7 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc277)
        %8 = cir.const #cir.int<1> : !s32i loc(#loc278)
        %9 = cir.unary(minus, %8) : !s32i, !s32i loc(#loc278)
        %10 = cir.cmp(ne, %7, %9) : !s32i, !cir.bool loc(#loc396)
        cir.if %10 {
          %11 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc280)
          %12 = cir.call @close(%11) : (!s32i) -> !s32i loc(#loc281)
        } loc(#loc397)
      } loc(#loc395)
      cir.scope {
        %7 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc284)
        %8 = cir.const #cir.int<1> : !s32i loc(#loc285)
        %9 = cir.unary(minus, %8) : !s32i, !s32i loc(#loc285)
        %10 = cir.cmp(ne, %7, %9) : !s32i, !cir.bool loc(#loc399)
        cir.if %10 {
          %11 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc287)
          %12 = cir.call @close(%11) : (!s32i) -> !s32i loc(#loc288)
        } loc(#loc400)
      } loc(#loc398)
    } loc(#loc364)
    cir.return loc(#loc193)
  } loc(#loc363)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE510_Trapdoor/CWE510_Trapdoor__ip_based_logic_01.c":0:0)
#loc1 = loc("/usr/include/sys/socket.h":102:1)
#loc2 = loc("/usr/include/sys/socket.h":102:62)
#loc3 = loc("/usr/include/netinet/in.h":404:1)
#loc4 = loc("/usr/include/netinet/in.h":405:40)
#loc5 = loc("/usr/include/sys/socket.h":112:1)
#loc6 = loc("/usr/include/sys/socket.h":113:6)
#loc7 = loc("/usr/include/sys/socket.h":296:1)
#loc8 = loc("/usr/include/sys/socket.h":296:39)
#loc9 = loc("/usr/include/sys/socket.h":306:1)
#loc10 = loc("/usr/include/sys/socket.h":307:38)
#loc11 = loc("/usr/include/sys/socket.h":116:1)
#loc12 = loc("/usr/include/sys/socket.h":117:33)
#loc13 = loc("/usr/include/string.h":156:1)
#loc14 = loc("/usr/include/string.h":157:33)
#loc15 = loc("CWE510_Trapdoor__ip_based_logic_01.c":88:24)
#loc16 = loc("/usr/include/arpa/inet.h":53:1)
#loc17 = loc("/usr/include/arpa/inet.h":53:46)
#loc18 = loc("/usr/include/sys/socket.h":138:1)
#loc19 = loc("/usr/include/sys/socket.h":138:74)
#loc20 = loc("CWE510_Trapdoor__ip_based_logic_01.c":90:40)
#loc21 = loc("CWE510_Trapdoor__ip_based_logic_01.c":98:40)
#loc22 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc23 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc24 = loc("CWE510_Trapdoor__ip_based_logic_01.c":100:31)
#loc25 = loc("/usr/include/unistd.h":358:1)
#loc26 = loc("/usr/include/unistd.h":358:27)
#loc27 = loc("CWE510_Trapdoor__ip_based_logic_01.c":41:1)
#loc28 = loc("CWE510_Trapdoor__ip_based_logic_01.c":120:1)
#loc29 = loc("CWE510_Trapdoor__ip_based_logic_01.c":43:5)
#loc30 = loc("CWE510_Trapdoor__ip_based_logic_01.c":119:5)
#loc31 = loc("CWE510_Trapdoor__ip_based_logic_01.c":48:9)
#loc32 = loc("CWE510_Trapdoor__ip_based_logic_01.c":48:28)
#loc33 = loc("CWE510_Trapdoor__ip_based_logic_01.c":48:37)
#loc34 = loc("CWE510_Trapdoor__ip_based_logic_01.c":49:9)
#loc35 = loc("CWE510_Trapdoor__ip_based_logic_01.c":49:52)
#loc36 = loc("CWE510_Trapdoor__ip_based_logic_01.c":50:9)
#loc37 = loc("CWE510_Trapdoor__ip_based_logic_01.c":50:31)
#loc38 = loc("CWE510_Trapdoor__ip_based_logic_01.c":51:9)
#loc39 = loc("CWE510_Trapdoor__ip_based_logic_01.c":51:31)
#loc40 = loc("CWE510_Trapdoor__ip_based_logic_01.c":49:32)
#loc41 = loc("CWE510_Trapdoor__ip_based_logic_01.c":52:9)
#loc42 = loc("CWE510_Trapdoor__ip_based_logic_01.c":104:17)
#loc43 = loc("CWE510_Trapdoor__ip_based_logic_01.c":61:35)
#loc44 = loc("CWE510_Trapdoor__ip_based_logic_01.c":61:44)
#loc45 = loc("CWE510_Trapdoor__ip_based_logic_01.c":61:57)
#loc46 = loc("CWE510_Trapdoor__ip_based_logic_01.c":61:28)
#loc47 = loc("CWE510_Trapdoor__ip_based_logic_01.c":61:13)
#loc48 = loc("CWE510_Trapdoor__ip_based_logic_01.c":61:68)
#loc49 = loc("CWE510_Trapdoor__ip_based_logic_01.c":62:13)
#loc50 = loc("CWE510_Trapdoor__ip_based_logic_01.c":65:13)
#loc51 = loc("CWE510_Trapdoor__ip_based_logic_01.c":62:17)
#loc52 = loc("CWE510_Trapdoor__ip_based_logic_01.c":62:33)
#loc53 = loc("CWE510_Trapdoor__ip_based_logic_01.c":63:13)
#loc54 = loc("CWE510_Trapdoor__ip_based_logic_01.c":64:17)
#loc55 = loc("CWE510_Trapdoor__ip_based_logic_01.c":66:20)
#loc56 = loc("CWE510_Trapdoor__ip_based_logic_01.c":66:21)
#loc57 = loc("CWE510_Trapdoor__ip_based_logic_01.c":66:30)
#loc58 = loc("CWE510_Trapdoor__ip_based_logic_01.c":66:33)
#loc59 = loc("CWE510_Trapdoor__ip_based_logic_01.c":66:47)
#loc60 = loc("CWE510_Trapdoor__ip_based_logic_01.c":66:13)
#loc61 = loc("CWE510_Trapdoor__ip_based_logic_01.c":66:48)
#loc62 = loc("CWE510_Trapdoor__ip_based_logic_01.c":67:34)
#loc63 = loc("/usr/include/netinet/in.h":249:5)
#loc64 = loc("CWE510_Trapdoor__ip_based_logic_01.c":67:13)
#loc65 = loc("CWE510_Trapdoor__ip_based_logic_01.c":68:39)
#loc66 = loc("/usr/include/netinet/in.h":251:20)
#loc67 = loc("/usr/include/netinet/in.h":33:15)
#loc68 = loc("CWE510_Trapdoor__ip_based_logic_01.c":68:13)
#loc69 = loc("CWE510_Trapdoor__ip_based_logic_01.c":69:38)
#loc70 = loc("CWE510_Trapdoor__ip_based_logic_01.c":69:32)
#loc71 = loc("/usr/include/netinet/in.h":250:15)
#loc72 = loc("CWE510_Trapdoor__ip_based_logic_01.c":69:13)
#loc73 = loc("CWE510_Trapdoor__ip_based_logic_01.c":69:43)
#loc74 = loc("CWE510_Trapdoor__ip_based_logic_01.c":70:13)
#loc75 = loc("CWE510_Trapdoor__ip_based_logic_01.c":73:13)
#loc76 = loc("CWE510_Trapdoor__ip_based_logic_01.c":70:22)
#loc77 = loc("CWE510_Trapdoor__ip_based_logic_01.c":70:54)
#loc78 = loc("CWE510_Trapdoor__ip_based_logic_01.c":70:55)
#loc79 = loc("CWE510_Trapdoor__ip_based_logic_01.c":70:64)
#loc80 = loc("CWE510_Trapdoor__ip_based_logic_01.c":70:78)
#loc81 = loc("CWE510_Trapdoor__ip_based_logic_01.c":70:17)
#loc82 = loc("CWE510_Trapdoor__ip_based_logic_01.c":70:84)
#loc83 = loc("CWE510_Trapdoor__ip_based_logic_01.c":71:13)
#loc84 = loc("CWE510_Trapdoor__ip_based_logic_01.c":72:17)
#loc85 = loc("CWE510_Trapdoor__ip_based_logic_01.c":74:13)
#loc86 = loc("CWE510_Trapdoor__ip_based_logic_01.c":77:13)
#loc87 = loc("CWE510_Trapdoor__ip_based_logic_01.c":74:24)
#loc88 = loc("CWE510_Trapdoor__ip_based_logic_01.c":74:38)
#loc89 = loc("CWE510_Trapdoor__ip_based_logic_01.c":74:17)
#loc90 = loc("CWE510_Trapdoor__ip_based_logic_01.c":74:44)
#loc91 = loc("CWE510_Trapdoor__ip_based_logic_01.c":75:13)
#loc92 = loc("CWE510_Trapdoor__ip_based_logic_01.c":76:17)
#loc93 = loc("CWE510_Trapdoor__ip_based_logic_01.c":78:35)
#loc94 = loc("CWE510_Trapdoor__ip_based_logic_01.c":78:49)
#loc95 = loc("CWE510_Trapdoor__ip_based_logic_01.c":78:55)
#loc96 = loc("CWE510_Trapdoor__ip_based_logic_01.c":78:28)
#loc97 = loc("CWE510_Trapdoor__ip_based_logic_01.c":78:13)
#loc98 = loc("CWE510_Trapdoor__ip_based_logic_01.c":78:59)
#loc99 = loc("CWE510_Trapdoor__ip_based_logic_01.c":79:13)
#loc100 = loc("CWE510_Trapdoor__ip_based_logic_01.c":82:13)
#loc101 = loc("CWE510_Trapdoor__ip_based_logic_01.c":79:17)
#loc102 = loc("CWE510_Trapdoor__ip_based_logic_01.c":79:33)
#loc103 = loc("CWE510_Trapdoor__ip_based_logic_01.c":80:13)
#loc104 = loc("CWE510_Trapdoor__ip_based_logic_01.c":81:17)
#loc105 = loc("CWE510_Trapdoor__ip_based_logic_01.c":83:13)
#loc106 = loc("CWE510_Trapdoor__ip_based_logic_01.c":86:13)
#loc107 = loc("CWE510_Trapdoor__ip_based_logic_01.c":83:29)
#loc108 = loc("CWE510_Trapdoor__ip_based_logic_01.c":83:62)
#loc109 = loc("CWE510_Trapdoor__ip_based_logic_01.c":83:63)
#loc110 = loc("CWE510_Trapdoor__ip_based_logic_01.c":83:78)
#loc111 = loc("CWE510_Trapdoor__ip_based_logic_01.c":83:79)
#loc112 = loc("CWE510_Trapdoor__ip_based_logic_01.c":83:17)
#loc113 = loc("CWE510_Trapdoor__ip_based_logic_01.c":83:101)
#loc114 = loc("CWE510_Trapdoor__ip_based_logic_01.c":83:100)
#loc115 = loc("CWE510_Trapdoor__ip_based_logic_01.c":84:13)
#loc116 = loc("CWE510_Trapdoor__ip_based_logic_01.c":85:17)
#loc117 = loc("CWE510_Trapdoor__ip_based_logic_01.c":88:13)
#loc118 = loc("CWE510_Trapdoor__ip_based_logic_01.c":102:13)
#loc119 = loc("CWE510_Trapdoor__ip_based_logic_01.c":88:17)
#loc120 = loc("CWE510_Trapdoor__ip_based_logic_01.c":88:42)
#loc121 = loc("CWE510_Trapdoor__ip_based_logic_01.c":88:80)
#loc122 = loc("CWE510_Trapdoor__ip_based_logic_01.c":89:13)
#loc123 = loc("CWE510_Trapdoor__ip_based_logic_01.c":95:13)
#loc124 = loc("CWE510_Trapdoor__ip_based_logic_01.c":97:13)
#loc125 = loc("CWE510_Trapdoor__ip_based_logic_01.c":90:17)
#loc126 = loc("CWE510_Trapdoor__ip_based_logic_01.c":94:17)
#loc127 = loc("CWE510_Trapdoor__ip_based_logic_01.c":90:26)
#loc128 = loc("CWE510_Trapdoor__ip_based_logic_01.c":90:55)
#loc129 = loc("CWE510_Trapdoor__ip_based_logic_01.c":90:75)
#loc130 = loc("CWE510_Trapdoor__ip_based_logic_01.c":90:78)
#loc131 = loc("CWE510_Trapdoor__ip_based_logic_01.c":90:21)
#loc132 = loc("CWE510_Trapdoor__ip_based_logic_01.c":90:85)
#loc133 = loc("CWE510_Trapdoor__ip_based_logic_01.c":91:17)
#loc134 = loc("CWE510_Trapdoor__ip_based_logic_01.c":93:21)
#loc135 = loc("CWE510_Trapdoor__ip_based_logic_01.c":98:17)
#loc136 = loc("CWE510_Trapdoor__ip_based_logic_01.c":101:17)
#loc137 = loc("CWE510_Trapdoor__ip_based_logic_01.c":98:26)
#loc138 = loc("CWE510_Trapdoor__ip_based_logic_01.c":98:57)
#loc139 = loc("CWE510_Trapdoor__ip_based_logic_01.c":98:79)
#loc140 = loc("CWE510_Trapdoor__ip_based_logic_01.c":98:82)
#loc141 = loc("CWE510_Trapdoor__ip_based_logic_01.c":98:21)
#loc142 = loc("CWE510_Trapdoor__ip_based_logic_01.c":98:88)
#loc143 = loc("CWE510_Trapdoor__ip_based_logic_01.c":99:17)
#loc144 = loc("CWE510_Trapdoor__ip_based_logic_01.c":100:21)
#loc145 = loc("CWE510_Trapdoor__ip_based_logic_01.c":104:16)
#loc146 = loc("CWE510_Trapdoor__ip_based_logic_01.c":105:9)
#loc147 = loc("CWE510_Trapdoor__ip_based_logic_01.c":108:9)
#loc148 = loc("CWE510_Trapdoor__ip_based_logic_01.c":105:13)
#loc149 = loc("CWE510_Trapdoor__ip_based_logic_01.c":105:29)
#loc150 = loc("CWE510_Trapdoor__ip_based_logic_01.c":106:9)
#loc151 = loc("CWE510_Trapdoor__ip_based_logic_01.c":107:26)
#loc152 = loc("CWE510_Trapdoor__ip_based_logic_01.c":107:13)
#loc153 = loc("CWE510_Trapdoor__ip_based_logic_01.c":109:9)
#loc154 = loc("CWE510_Trapdoor__ip_based_logic_01.c":112:9)
#loc155 = loc("CWE510_Trapdoor__ip_based_logic_01.c":109:13)
#loc156 = loc("CWE510_Trapdoor__ip_based_logic_01.c":109:29)
#loc157 = loc("CWE510_Trapdoor__ip_based_logic_01.c":110:9)
#loc158 = loc("CWE510_Trapdoor__ip_based_logic_01.c":111:26)
#loc159 = loc("CWE510_Trapdoor__ip_based_logic_01.c":111:13)
#loc160 = loc("CWE510_Trapdoor__ip_based_logic_01.c":191:1)
#loc161 = loc("CWE510_Trapdoor__ip_based_logic_01.c":194:1)
#loc162 = loc("CWE510_Trapdoor__ip_based_logic_01.c":193:5)
#loc163 = loc("CWE510_Trapdoor__ip_based_logic_01.c":193:11)
#loc164 = loc("/usr/include/stdlib.h":575:1)
#loc165 = loc("/usr/include/stdlib.h":575:41)
#loc166 = loc("/usr/include/time.h":76:1)
#loc167 = loc("/usr/include/time.h":76:38)
#loc168 = loc("CWE510_Trapdoor__ip_based_logic_01.c":210:15)
#loc169 = loc("CWE510_Trapdoor__ip_based_logic_01.c":212:15)
#loc170 = loc("CWE510_Trapdoor__ip_based_logic_01.c":215:15)
#loc171 = loc("CWE510_Trapdoor__ip_based_logic_01.c":217:15)
#loc172 = loc("CWE510_Trapdoor__ip_based_logic_01.c":205:1)
#loc173 = loc("CWE510_Trapdoor__ip_based_logic_01.c":220:1)
#loc178 = loc("CWE510_Trapdoor__ip_based_logic_01.c":206:1)
#loc179 = loc("CWE510_Trapdoor__ip_based_logic_01.c":208:27)
#loc180 = loc("CWE510_Trapdoor__ip_based_logic_01.c":208:22)
#loc181 = loc("CWE510_Trapdoor__ip_based_logic_01.c":208:5)
#loc182 = loc("CWE510_Trapdoor__ip_based_logic_01.c":210:5)
#loc183 = loc("CWE510_Trapdoor__ip_based_logic_01.c":211:5)
#loc184 = loc("CWE510_Trapdoor__ip_based_logic_01.c":211:45)
#loc185 = loc("CWE510_Trapdoor__ip_based_logic_01.c":212:5)
#loc186 = loc("CWE510_Trapdoor__ip_based_logic_01.c":215:5)
#loc187 = loc("CWE510_Trapdoor__ip_based_logic_01.c":216:5)
#loc188 = loc("CWE510_Trapdoor__ip_based_logic_01.c":216:44)
#loc189 = loc("CWE510_Trapdoor__ip_based_logic_01.c":217:5)
#loc190 = loc("CWE510_Trapdoor__ip_based_logic_01.c":219:12)
#loc191 = loc("CWE510_Trapdoor__ip_based_logic_01.c":219:5)
#loc192 = loc("CWE510_Trapdoor__ip_based_logic_01.c":126:1)
#loc193 = loc("CWE510_Trapdoor__ip_based_logic_01.c":189:1)
#loc194 = loc("CWE510_Trapdoor__ip_based_logic_01.c":128:5)
#loc195 = loc("CWE510_Trapdoor__ip_based_logic_01.c":188:5)
#loc196 = loc("CWE510_Trapdoor__ip_based_logic_01.c":133:9)
#loc197 = loc("CWE510_Trapdoor__ip_based_logic_01.c":133:28)
#loc198 = loc("CWE510_Trapdoor__ip_based_logic_01.c":134:9)
#loc199 = loc("CWE510_Trapdoor__ip_based_logic_01.c":134:31)
#loc200 = loc("CWE510_Trapdoor__ip_based_logic_01.c":135:9)
#loc201 = loc("CWE510_Trapdoor__ip_based_logic_01.c":135:31)
#loc202 = loc("CWE510_Trapdoor__ip_based_logic_01.c":136:9)
#loc203 = loc("CWE510_Trapdoor__ip_based_logic_01.c":173:17)
#loc204 = loc("CWE510_Trapdoor__ip_based_logic_01.c":145:35)
#loc205 = loc("CWE510_Trapdoor__ip_based_logic_01.c":145:44)
#loc206 = loc("CWE510_Trapdoor__ip_based_logic_01.c":145:57)
#loc207 = loc("CWE510_Trapdoor__ip_based_logic_01.c":145:28)
#loc208 = loc("CWE510_Trapdoor__ip_based_logic_01.c":145:13)
#loc209 = loc("CWE510_Trapdoor__ip_based_logic_01.c":145:68)
#loc210 = loc("CWE510_Trapdoor__ip_based_logic_01.c":146:13)
#loc211 = loc("CWE510_Trapdoor__ip_based_logic_01.c":149:13)
#loc212 = loc("CWE510_Trapdoor__ip_based_logic_01.c":146:17)
#loc213 = loc("CWE510_Trapdoor__ip_based_logic_01.c":146:33)
#loc214 = loc("CWE510_Trapdoor__ip_based_logic_01.c":147:13)
#loc215 = loc("CWE510_Trapdoor__ip_based_logic_01.c":148:17)
#loc216 = loc("CWE510_Trapdoor__ip_based_logic_01.c":150:20)
#loc217 = loc("CWE510_Trapdoor__ip_based_logic_01.c":150:21)
#loc218 = loc("CWE510_Trapdoor__ip_based_logic_01.c":150:30)
#loc219 = loc("CWE510_Trapdoor__ip_based_logic_01.c":150:33)
#loc220 = loc("CWE510_Trapdoor__ip_based_logic_01.c":150:47)
#loc221 = loc("CWE510_Trapdoor__ip_based_logic_01.c":150:13)
#loc222 = loc("CWE510_Trapdoor__ip_based_logic_01.c":150:48)
#loc223 = loc("CWE510_Trapdoor__ip_based_logic_01.c":151:34)
#loc224 = loc("CWE510_Trapdoor__ip_based_logic_01.c":151:13)
#loc225 = loc("CWE510_Trapdoor__ip_based_logic_01.c":152:39)
#loc226 = loc("CWE510_Trapdoor__ip_based_logic_01.c":152:13)
#loc227 = loc("CWE510_Trapdoor__ip_based_logic_01.c":153:38)
#loc228 = loc("CWE510_Trapdoor__ip_based_logic_01.c":153:32)
#loc229 = loc("CWE510_Trapdoor__ip_based_logic_01.c":153:13)
#loc230 = loc("CWE510_Trapdoor__ip_based_logic_01.c":153:43)
#loc231 = loc("CWE510_Trapdoor__ip_based_logic_01.c":154:13)
#loc232 = loc("CWE510_Trapdoor__ip_based_logic_01.c":157:13)
#loc233 = loc("CWE510_Trapdoor__ip_based_logic_01.c":154:22)
#loc234 = loc("CWE510_Trapdoor__ip_based_logic_01.c":154:54)
#loc235 = loc("CWE510_Trapdoor__ip_based_logic_01.c":154:55)
#loc236 = loc("CWE510_Trapdoor__ip_based_logic_01.c":154:64)
#loc237 = loc("CWE510_Trapdoor__ip_based_logic_01.c":154:78)
#loc238 = loc("CWE510_Trapdoor__ip_based_logic_01.c":154:17)
#loc239 = loc("CWE510_Trapdoor__ip_based_logic_01.c":154:84)
#loc240 = loc("CWE510_Trapdoor__ip_based_logic_01.c":155:13)
#loc241 = loc("CWE510_Trapdoor__ip_based_logic_01.c":156:17)
#loc242 = loc("CWE510_Trapdoor__ip_based_logic_01.c":158:13)
#loc243 = loc("CWE510_Trapdoor__ip_based_logic_01.c":161:13)
#loc244 = loc("CWE510_Trapdoor__ip_based_logic_01.c":158:24)
#loc245 = loc("CWE510_Trapdoor__ip_based_logic_01.c":158:38)
#loc246 = loc("CWE510_Trapdoor__ip_based_logic_01.c":158:17)
#loc247 = loc("CWE510_Trapdoor__ip_based_logic_01.c":158:44)
#loc248 = loc("CWE510_Trapdoor__ip_based_logic_01.c":159:13)
#loc249 = loc("CWE510_Trapdoor__ip_based_logic_01.c":160:17)
#loc250 = loc("CWE510_Trapdoor__ip_based_logic_01.c":162:35)
#loc251 = loc("CWE510_Trapdoor__ip_based_logic_01.c":162:49)
#loc252 = loc("CWE510_Trapdoor__ip_based_logic_01.c":162:55)
#loc253 = loc("CWE510_Trapdoor__ip_based_logic_01.c":162:28)
#loc254 = loc("CWE510_Trapdoor__ip_based_logic_01.c":162:13)
#loc255 = loc("CWE510_Trapdoor__ip_based_logic_01.c":162:59)
#loc256 = loc("CWE510_Trapdoor__ip_based_logic_01.c":163:13)
#loc257 = loc("CWE510_Trapdoor__ip_based_logic_01.c":166:13)
#loc258 = loc("CWE510_Trapdoor__ip_based_logic_01.c":163:17)
#loc259 = loc("CWE510_Trapdoor__ip_based_logic_01.c":163:33)
#loc260 = loc("CWE510_Trapdoor__ip_based_logic_01.c":164:13)
#loc261 = loc("CWE510_Trapdoor__ip_based_logic_01.c":165:17)
#loc262 = loc("CWE510_Trapdoor__ip_based_logic_01.c":168:13)
#loc263 = loc("CWE510_Trapdoor__ip_based_logic_01.c":171:13)
#loc264 = loc("CWE510_Trapdoor__ip_based_logic_01.c":168:22)
#loc265 = loc("CWE510_Trapdoor__ip_based_logic_01.c":168:36)
#loc266 = loc("CWE510_Trapdoor__ip_based_logic_01.c":168:53)
#loc267 = loc("CWE510_Trapdoor__ip_based_logic_01.c":168:75)
#loc268 = loc("CWE510_Trapdoor__ip_based_logic_01.c":168:78)
#loc269 = loc("CWE510_Trapdoor__ip_based_logic_01.c":168:17)
#loc270 = loc("CWE510_Trapdoor__ip_based_logic_01.c":168:84)
#loc271 = loc("CWE510_Trapdoor__ip_based_logic_01.c":169:13)
#loc272 = loc("CWE510_Trapdoor__ip_based_logic_01.c":170:27)
#loc273 = loc("CWE510_Trapdoor__ip_based_logic_01.c":170:17)
#loc274 = loc("CWE510_Trapdoor__ip_based_logic_01.c":173:16)
#loc275 = loc("CWE510_Trapdoor__ip_based_logic_01.c":174:9)
#loc276 = loc("CWE510_Trapdoor__ip_based_logic_01.c":177:9)
#loc277 = loc("CWE510_Trapdoor__ip_based_logic_01.c":174:13)
#loc278 = loc("CWE510_Trapdoor__ip_based_logic_01.c":174:29)
#loc279 = loc("CWE510_Trapdoor__ip_based_logic_01.c":175:9)
#loc280 = loc("CWE510_Trapdoor__ip_based_logic_01.c":176:26)
#loc281 = loc("CWE510_Trapdoor__ip_based_logic_01.c":176:13)
#loc282 = loc("CWE510_Trapdoor__ip_based_logic_01.c":178:9)
#loc283 = loc("CWE510_Trapdoor__ip_based_logic_01.c":181:9)
#loc284 = loc("CWE510_Trapdoor__ip_based_logic_01.c":178:13)
#loc285 = loc("CWE510_Trapdoor__ip_based_logic_01.c":178:29)
#loc286 = loc("CWE510_Trapdoor__ip_based_logic_01.c":179:9)
#loc287 = loc("CWE510_Trapdoor__ip_based_logic_01.c":180:26)
#loc288 = loc("CWE510_Trapdoor__ip_based_logic_01.c":180:13)
#loc289 = loc(fused[#loc1, #loc2])
#loc290 = loc(fused[#loc3, #loc4])
#loc291 = loc(fused[#loc5, #loc6])
#loc292 = loc(fused[#loc7, #loc8])
#loc293 = loc(fused[#loc9, #loc10])
#loc294 = loc(fused[#loc11, #loc12])
#loc295 = loc(fused[#loc13, #loc14])
#loc296 = loc(fused[#loc16, #loc17])
#loc297 = loc(fused[#loc18, #loc19])
#loc298 = loc(fused[#loc22, #loc23])
#loc299 = loc(fused[#loc25, #loc26])
#loc300 = loc(fused[#loc27, #loc28])
#loc301 = loc(fused[#loc29, #loc30])
#loc302 = loc(fused[#loc31, #loc32])
#loc303 = loc(fused[#loc31, #loc33])
#loc304 = loc(fused[#loc34, #loc35])
#loc305 = loc(fused[#loc36, #loc37])
#loc306 = loc(fused[#loc38, #loc39])
#loc307 = loc(fused[#loc40, #loc35])
#loc308 = loc(fused[#loc41, #loc42])
#loc309 = loc(fused[#loc47, #loc48])
#loc310 = loc(fused[#loc49, #loc50])
#loc311 = loc(fused[#loc51, #loc52])
#loc312 = loc(fused[#loc53, #loc50])
#loc313 = loc(fused[#loc55, #loc56])
#loc314 = loc(fused[#loc58, #loc59])
#loc315 = loc(fused[#loc60, #loc61])
#loc316 = loc(fused[#loc64, #loc62])
#loc317 = loc(fused[#loc68, #loc65])
#loc318 = loc(fused[#loc72, #loc73])
#loc319 = loc(fused[#loc74, #loc75])
#loc320 = loc(fused[#loc77, #loc78])
#loc321 = loc(fused[#loc79, #loc80])
#loc322 = loc(fused[#loc81, #loc82])
#loc323 = loc(fused[#loc83, #loc75])
#loc324 = loc(fused[#loc85, #loc86])
#loc325 = loc(fused[#loc89, #loc90])
#loc326 = loc(fused[#loc91, #loc86])
#loc327 = loc(fused[#loc97, #loc98])
#loc328 = loc(fused[#loc99, #loc100])
#loc329 = loc(fused[#loc101, #loc102])
#loc330 = loc(fused[#loc103, #loc100])
#loc331 = loc(fused[#loc105, #loc106])
#loc332 = loc(fused[#loc108, #loc109])
#loc333 = loc(fused[#loc110, #loc111])
#loc334 = loc(fused[#loc112, #loc113])
#loc335 = loc(fused[#loc115, #loc106])
#loc336 = loc(fused[#loc117, #loc118])
#loc337 = loc(fused[#loc119, #loc121])
#loc338 = loc(fused[#loc122, #loc123, #loc124, #loc118])
#loc339 = loc(fused[#loc125, #loc126])
#loc340 = loc(fused[#loc128, #loc129])
#loc341 = loc(fused[#loc131, #loc132])
#loc342 = loc(fused[#loc133, #loc126])
#loc343 = loc(fused[#loc135, #loc136])
#loc344 = loc(fused[#loc138, #loc139])
#loc345 = loc(fused[#loc141, #loc142])
#loc346 = loc(fused[#loc143, #loc136])
#loc347 = loc(fused[#loc146, #loc147])
#loc348 = loc(fused[#loc148, #loc149])
#loc349 = loc(fused[#loc150, #loc147])
#loc350 = loc(fused[#loc153, #loc154])
#loc351 = loc(fused[#loc155, #loc156])
#loc352 = loc(fused[#loc157, #loc154])
#loc353 = loc(fused[#loc160, #loc161])
#loc354 = loc(fused[#loc162, #loc163])
#loc355 = loc(fused[#loc164, #loc165])
#loc356 = loc(fused[#loc166, #loc167])
#loc357 = loc(fused[#loc172, #loc173])
#loc360 = loc(fused[#loc183, #loc184])
#loc361 = loc(fused[#loc187, #loc188])
#loc362 = loc(fused[#loc191, #loc190])
#loc363 = loc(fused[#loc192, #loc193])
#loc364 = loc(fused[#loc194, #loc195])
#loc365 = loc(fused[#loc196, #loc197])
#loc366 = loc(fused[#loc198, #loc199])
#loc367 = loc(fused[#loc200, #loc201])
#loc368 = loc(fused[#loc202, #loc203])
#loc369 = loc(fused[#loc208, #loc209])
#loc370 = loc(fused[#loc210, #loc211])
#loc371 = loc(fused[#loc212, #loc213])
#loc372 = loc(fused[#loc214, #loc211])
#loc373 = loc(fused[#loc216, #loc217])
#loc374 = loc(fused[#loc219, #loc220])
#loc375 = loc(fused[#loc221, #loc222])
#loc376 = loc(fused[#loc224, #loc223])
#loc377 = loc(fused[#loc226, #loc225])
#loc378 = loc(fused[#loc229, #loc230])
#loc379 = loc(fused[#loc231, #loc232])
#loc380 = loc(fused[#loc234, #loc235])
#loc381 = loc(fused[#loc236, #loc237])
#loc382 = loc(fused[#loc238, #loc239])
#loc383 = loc(fused[#loc240, #loc232])
#loc384 = loc(fused[#loc242, #loc243])
#loc385 = loc(fused[#loc246, #loc247])
#loc386 = loc(fused[#loc248, #loc243])
#loc387 = loc(fused[#loc254, #loc255])
#loc388 = loc(fused[#loc256, #loc257])
#loc389 = loc(fused[#loc258, #loc259])
#loc390 = loc(fused[#loc260, #loc257])
#loc391 = loc(fused[#loc262, #loc263])
#loc392 = loc(fused[#loc266, #loc267])
#loc393 = loc(fused[#loc269, #loc270])
#loc394 = loc(fused[#loc271, #loc263])
#loc395 = loc(fused[#loc275, #loc276])
#loc396 = loc(fused[#loc277, #loc278])
#loc397 = loc(fused[#loc279, #loc276])
#loc398 = loc(fused[#loc282, #loc283])
#loc399 = loc(fused[#loc284, #loc285])
#loc400 = loc(fused[#loc286, #loc283])
