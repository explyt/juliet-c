!s32i = !cir.int<s, 32>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc14 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_65a.c":32:12)
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE680_Integer_Overflow_to_Buffer_Overflow/CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_65a.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_65b_badSink(!s32i) loc(#loc37)
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc38)
  cir.func no_proto @CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_65_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc40)
    %1 = cir.alloca !cir.ptr<!cir.func<!void (!s32i)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!s32i)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc41)
    %2 = cir.get_global @CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_65b_badSink : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc10)
    cir.store %2, %1 : !cir.ptr<!cir.func<!void (!s32i)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!s32i)>>> loc(#loc41)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc11)
    %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc12)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc42)
    %5 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc14)
    %6 = cir.const #cir.int<1> : !s32i loc(#loc14)
    %7 = cir.binop(and, %5, %6) : !s32i loc(#loc14)
    %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc14)
    cir.brcond %8 ^bb1, ^bb2 loc(#loc14)
  ^bb1:  // pred: ^bb0
    %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc14)
    %10 = cir.cast(integral, %9 : !s32i), !u32i loc(#loc14)
    %11 = cir.const #cir.int<30> : !s32i loc(#loc14)
    %12 = cir.shift(left, %10 : !u32i, %11 : !s32i) -> !u32i loc(#loc14)
    %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc14)
    %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc14)
    %15 = cir.const #cir.int<15> : !s32i loc(#loc14)
    %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc14)
    %17 = cir.binop(xor, %12, %16) : !u32i loc(#loc14)
    %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc14)
    %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc14)
    %20 = cir.binop(xor, %17, %19) : !u32i loc(#loc14)
    cir.br ^bb3(%20 : !u32i) loc(#loc14)
  ^bb2:  // pred: ^bb0
    %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc14)
    %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc14)
    %23 = cir.const #cir.int<30> : !s32i loc(#loc14)
    %24 = cir.shift(left, %22 : !u32i, %23 : !s32i) -> !u32i loc(#loc14)
    %25 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc14)
    %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc14)
    %27 = cir.const #cir.int<15> : !s32i loc(#loc14)
    %28 = cir.shift(left, %26 : !u32i, %27 : !s32i) -> !u32i loc(#loc14)
    %29 = cir.binop(xor, %24, %28) : !u32i loc(#loc14)
    %30 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc14)
    %31 = cir.cast(integral, %30 : !s32i), !u32i loc(#loc14)
    %32 = cir.binop(xor, %29, %31) : !u32i loc(#loc14)
    %33 = cir.unary(minus, %32) : !u32i, !u32i loc(#loc14)
    %34 = cir.const #cir.int<1> : !s32i loc(#loc14)
    %35 = cir.cast(integral, %34 : !s32i), !u32i loc(#loc14)
    %36 = cir.binop(sub, %33, %35) : !u32i loc(#loc14)
    cir.br ^bb3(%36 : !u32i) loc(#loc14)
  ^bb3(%37: !u32i loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_65a.c":32:12)):  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc14)
  ^bb4:  // pred: ^bb3
    %38 = cir.cast(integral, %37 : !u32i), !s32i loc(#loc14)
    cir.store %38, %0 : !s32i, !cir.ptr<!s32i> loc(#loc43)
    %39 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<!void (!s32i)>>>, !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc16)
    %40 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc17)
    cir.call %39(%40) : (!cir.ptr<!cir.func<!void (!s32i)>>, !s32i) -> () loc(#loc16)
    cir.return loc(#loc6)
  } loc(#loc39)
  cir.func no_proto @CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_65_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc45)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc20)
    cir.return loc(#loc19)
  } loc(#loc44)
  cir.func private @CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_65b_goodG2BSink(!s32i) loc(#loc46)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc48)
    %1 = cir.alloca !cir.ptr<!cir.func<!void (!s32i)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!s32i)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc49)
    %2 = cir.get_global @CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_65b_goodG2BSink : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc29)
    cir.store %2, %1 : !cir.ptr<!cir.func<!void (!s32i)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!s32i)>>> loc(#loc49)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc30)
    %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc31)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc50)
    %5 = cir.const #cir.int<20> : !s32i loc(#loc33)
    cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc51)
    %6 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<!void (!s32i)>>>, !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc35)
    %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc36)
    cir.call %6(%7) : (!cir.ptr<!cir.func<!void (!s32i)>>, !s32i) -> () loc(#loc35)
    cir.return loc(#loc25)
  } loc(#loc47)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE680_Integer_Overflow_to_Buffer_Overflow/CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_65a.c":0:0)
#loc1 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_65a.c":22:1)
#loc2 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_65a.c":22:82)
#loc3 = loc("/usr/include/stdlib.h":573:1)
#loc4 = loc("/usr/include/stdlib.h":573:24)
#loc5 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_65a.c":24:1)
#loc6 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_65a.c":35:1)
#loc7 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_65a.c":26:5)
#loc8 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_65a.c":26:9)
#loc9 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_65a.c":28:5)
#loc10 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_65a.c":28:29)
#loc11 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_65a.c":30:13)
#loc12 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_65a.c":30:12)
#loc13 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_65a.c":30:5)
#loc15 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_65a.c":32:5)
#loc16 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_65a.c":34:5)
#loc17 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_65a.c":34:13)
#loc18 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_65a.c":55:1)
#loc19 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_65a.c":58:1)
#loc20 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_65a.c":57:5)
#loc21 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_65a.c":57:13)
#loc22 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_65a.c":42:1)
#loc23 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_65a.c":42:86)
#loc24 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_65a.c":44:1)
#loc25 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_65a.c":53:1)
#loc26 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_65a.c":46:5)
#loc27 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_65a.c":46:9)
#loc28 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_65a.c":47:5)
#loc29 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_65a.c":47:29)
#loc30 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_65a.c":49:13)
#loc31 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_65a.c":49:12)
#loc32 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_65a.c":49:5)
#loc33 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_65a.c":51:12)
#loc34 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_65a.c":51:5)
#loc35 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_65a.c":52:5)
#loc36 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_65a.c":52:13)
#loc37 = loc(fused[#loc1, #loc2])
#loc38 = loc(fused[#loc3, #loc4])
#loc39 = loc(fused[#loc5, #loc6])
#loc40 = loc(fused[#loc7, #loc8])
#loc41 = loc(fused[#loc9, #loc10])
#loc42 = loc(fused[#loc13, #loc11])
#loc43 = loc(fused[#loc15, #loc14])
#loc44 = loc(fused[#loc18, #loc19])
#loc45 = loc(fused[#loc20, #loc21])
#loc46 = loc(fused[#loc22, #loc23])
#loc47 = loc(fused[#loc24, #loc25])
#loc48 = loc(fused[#loc26, #loc27])
#loc49 = loc(fused[#loc28, #loc29])
#loc50 = loc(fused[#loc32, #loc30])
#loc51 = loc(fused[#loc34, #loc33])
