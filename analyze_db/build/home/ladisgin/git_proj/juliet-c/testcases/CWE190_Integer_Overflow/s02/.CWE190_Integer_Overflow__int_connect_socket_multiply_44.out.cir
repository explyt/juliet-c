!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc5 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":44:21)
#loc6 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":44:25)
#loc148 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":244:10)
#loc149 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":244:14)
#loc150 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":244:20)
#loc151 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":244:32)
#loc168 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":126:25)
#loc169 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":126:29)
#loc196 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":148:25)
#loc197 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":148:29)
#true = #cir.bool<true> : !cir.bool
!ty_in_addr = !cir.struct<struct "in_addr" {!u32i} #cir.record.decl.ast>
#loc315 = loc(fused[#loc5, #loc6])
#loc370 = loc(fused[#loc148, #loc149])
#loc371 = loc(fused[#loc150, #loc151])
#loc376 = loc(fused[#loc168, #loc169])
#loc387 = loc(fused[#loc196, #loc197])
!ty_sockaddr = !cir.struct<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.struct<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int_connect_socket_multiply_44.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @printIntLine(!s32i) loc(#loc313)
  cir.func internal private @badSink(%arg0: !s32i loc(fused[#loc5, #loc6])) extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc315)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc7)
    cir.scope {
      %1 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc10)
      %2 = cir.const #cir.int<0> : !s32i loc(#loc11)
      %3 = cir.cmp(gt, %1, %2) : !s32i, !cir.bool loc(#loc317)
      cir.if %3 {
        %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc319)
        %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc15)
        %6 = cir.const #cir.int<2> : !s32i loc(#loc14)
        %7 = cir.binop(mul, %5, %6) nsw : !s32i loc(#loc15)
        cir.store %7, %4 : !s32i, !cir.ptr<!s32i> loc(#loc319)
        %8 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc16)
        cir.call @printIntLine(%8) : (!s32i) -> () loc(#loc17)
      } loc(#loc318)
    } loc(#loc316)
    cir.return loc(#loc4)
  } loc(#loc314)
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr1) loc(#loc320)
  cir.func private @inet_addr(!cir.ptr<!s8i>) -> !u32i extra(#fn_attr1) loc(#loc321)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"127.0.0.1\00" : !cir.array<!s8i x 10>> : !cir.array<!s8i x 10> {alignment = 1 : i64} loc(#loc22)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr1) loc(#loc322)
  cir.func private @connect(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc323)
  cir.func private @recv(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc324)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr1) loc(#loc325)
  cir.func private @close(!s32i) -> !s32i loc(#loc326)
  cir.func no_proto @CWE190_Integer_Overflow__int_connect_socket_multiply_44_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc328)
    %1 = cir.alloca !cir.ptr<!cir.func<!void (!s32i)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!s32i)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc329)
    %2 = cir.get_global @badSink : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc38)
    cir.store %2, %1 : !cir.ptr<!cir.func<!void (!s32i)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!s32i)>>> loc(#loc329)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc39)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc330)
    cir.scope {
      %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc332)
      %7 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc333)
      %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["connectSocket", init] {alignment = 4 : i64} loc(#loc334)
      %9 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc335)
      %10 = cir.const #cir.int<1> : !s32i loc(#loc48)
      %11 = cir.unary(minus, %10) : !s32i, !s32i loc(#loc48)
      cir.store %11, %8 : !s32i, !cir.ptr<!s32i> loc(#loc334)
      cir.scope {
        cir.do {
          %12 = cir.const #cir.int<2> : !s32i loc(#loc53)
          %13 = cir.const #cir.int<1> : !s32i loc(#loc54)
          %14 = cir.const #cir.int<6> : !s32i loc(#loc55)
          %15 = cir.call @socket(%12, %13, %14) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr1) loc(#loc56)
          cir.store %15, %8 : !s32i, !cir.ptr<!s32i> loc(#loc337)
          cir.scope {
            %54 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc61)
            %55 = cir.const #cir.int<1> : !s32i loc(#loc62)
            %56 = cir.unary(minus, %55) : !s32i, !s32i loc(#loc62)
            %57 = cir.cmp(eq, %54, %56) : !s32i, !cir.bool loc(#loc339)
            cir.if %57 {
              cir.break loc(#loc64)
            } loc(#loc340)
          } loc(#loc338)
          %16 = cir.cast(bitcast, %7 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc341)
          %17 = cir.const #cir.int<0> : !s32i loc(#loc67)
          %18 = cir.const #cir.int<16> : !u64i loc(#loc342)
          cir.libc.memset %18 bytes from %16 set to %17 : !cir.ptr<!void>, !s32i, !u64i loc(#loc343)
          %19 = cir.const #cir.int<2> : !s32i loc(#loc72)
          %20 = cir.cast(integral, %19 : !s32i), !u16i loc(#loc72)
          %21 = cir.get_member %7[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc73)
          cir.store %20, %21 : !u16i, !cir.ptr<!u16i> loc(#loc344)
          %22 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 10>> loc(#loc22)
          %23 = cir.cast(array_to_ptrdecay, %22 : !cir.ptr<!cir.array<!s8i x 10>>), !cir.ptr<!s8i> loc(#loc22)
          %24 = cir.call @inet_addr(%23) : (!cir.ptr<!s8i>) -> !u32i extra(#fn_attr1) loc(#loc75)
          %25 = cir.get_member %7[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc76)
          %26 = cir.get_member %25[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc77)
          cir.store %24, %26 : !u32i, !cir.ptr<!u32i> loc(#loc345)
          %27 = cir.const #cir.int<27015> : !s32i loc(#loc80)
          %28 = cir.cast(integral, %27 : !s32i), !u16i loc(#loc80)
          %29 = cir.call @htons(%28) : (!u16i) -> !u16i extra(#fn_attr1) loc(#loc81)
          %30 = cir.get_member %7[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc82)
          cir.store %29, %30 : !u16i, !cir.ptr<!u16i> loc(#loc346)
          cir.scope {
            %54 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc87)
            %55 = cir.cast(bitcast, %7 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc348)
            %56 = cir.const #cir.int<16> : !u64i loc(#loc349)
            %57 = cir.cast(integral, %56 : !u64i), !u32i loc(#loc349)
            %58 = cir.call @connect(%54, %55, %57) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc92)
            %59 = cir.const #cir.int<1> : !s32i loc(#loc93)
            %60 = cir.unary(minus, %59) : !s32i, !s32i loc(#loc93)
            %61 = cir.cmp(eq, %58, %60) : !s32i, !cir.bool loc(#loc350)
            cir.if %61 {
              cir.break loc(#loc95)
            } loc(#loc351)
          } loc(#loc347)
          %31 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc96)
          %32 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc97)
          %33 = cir.cast(bitcast, %32 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc97)
          %34 = cir.const #cir.int<3> : !s32i loc(#loc98)
          %35 = cir.cast(integral, %34 : !s32i), !u64i loc(#loc98)
          %36 = cir.const #cir.int<4> : !u64i loc(#loc98)
          %37 = cir.binop(mul, %35, %36) : !u64i loc(#loc98)
          %38 = cir.const #cir.int<2> : !s32i loc(#loc98)
          %39 = cir.cast(integral, %38 : !s32i), !u64i loc(#loc98)
          %40 = cir.binop(add, %37, %39) : !u64i loc(#loc98)
          %41 = cir.const #cir.int<1> : !s32i loc(#loc99)
          %42 = cir.cast(integral, %41 : !s32i), !u64i loc(#loc99)
          %43 = cir.binop(sub, %40, %42) : !u64i loc(#loc352)
          %44 = cir.const #cir.int<0> : !s32i loc(#loc100)
          %45 = cir.call @recv(%31, %33, %43, %44) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc101)
          %46 = cir.cast(integral, %45 : !s64i), !s32i loc(#loc101)
          cir.store %46, %6 : !s32i, !cir.ptr<!s32i> loc(#loc353)
          cir.scope {
            %54 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc106)
            %55 = cir.const #cir.int<1> : !s32i loc(#loc107)
            %56 = cir.unary(minus, %55) : !s32i, !s32i loc(#loc107)
            %57 = cir.cmp(eq, %54, %56) : !s32i, !cir.bool loc(#loc355)
            %58 = cir.ternary(%57, true {
              %59 = cir.const #true loc(#loc108)
              cir.yield %59 : !cir.bool loc(#loc108)
            }, false {
              %59 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc109)
              %60 = cir.const #cir.int<0> : !s32i loc(#loc110)
              %61 = cir.cmp(eq, %59, %60) : !s32i, !cir.bool loc(#loc356)
              %62 = cir.ternary(%61, true {
                %63 = cir.const #true loc(#loc108)
                cir.yield %63 : !cir.bool loc(#loc108)
              }, false {
                %63 = cir.const #false loc(#loc108)
                cir.yield %63 : !cir.bool loc(#loc108)
              }) : (!cir.bool) -> !cir.bool loc(#loc108)
              cir.yield %62 : !cir.bool loc(#loc108)
            }) : (!cir.bool) -> !cir.bool loc(#loc108)
            cir.if %58 {
              cir.break loc(#loc112)
            } loc(#loc357)
          } loc(#loc354)
          %47 = cir.const #cir.int<0> : !s32i loc(#loc113)
          %48 = cir.cast(integral, %47 : !s32i), !s8i loc(#loc113)
          %49 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc114)
          %50 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc115)
          %51 = cir.ptr_stride(%50 : !cir.ptr<!s8i>, %49 : !s32i), !cir.ptr<!s8i> loc(#loc115)
          cir.store %48, %51 : !s8i, !cir.ptr<!s8i> loc(#loc358)
          %52 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc116)
          %53 = cir.call @atoi(%52) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr1) loc(#loc117)
          cir.store %53, %0 : !s32i, !cir.ptr<!s32i> loc(#loc359)
          cir.yield loc(#loc52)
        } while {
          %12 = cir.const #cir.int<0> : !s32i loc(#loc120)
          %13 = cir.cast(int_to_bool, %12 : !s32i), !cir.bool loc(#loc120)
          cir.condition(%13) loc(#loc120)
        } loc(#loc336)
      } loc(#loc336)
      cir.scope {
        %12 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc123)
        %13 = cir.const #cir.int<1> : !s32i loc(#loc124)
        %14 = cir.unary(minus, %13) : !s32i, !s32i loc(#loc124)
        %15 = cir.cmp(ne, %12, %14) : !s32i, !cir.bool loc(#loc361)
        cir.if %15 {
          %16 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc126)
          %17 = cir.call @close(%16) : (!s32i) -> !s32i loc(#loc127)
        } loc(#loc362)
      } loc(#loc360)
    } loc(#loc331)
    %4 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<!void (!s32i)>>>, !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc128)
    %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc129)
    cir.call %4(%5) : (!cir.ptr<!cir.func<!void (!s32i)>>, !s32i) -> () loc(#loc128)
    cir.return loc(#loc34)
  } loc(#loc327)
  cir.func no_proto @CWE190_Integer_Overflow__int_connect_socket_multiply_44_good() extra(#fn_attr) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc364)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc132)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc365)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc134)
    cir.return loc(#loc131)
  } loc(#loc363)
  cir.func private @srand(!u32i) extra(#fn_attr1) loc(#loc366)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc367)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc368)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc142)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc143)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc144)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc145)
  cir.func @main(%arg0: !s32i loc(fused[#loc148, #loc149]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc150, #loc151])) -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc370)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc371)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc147)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc152)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc152)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc153)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc154)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc154)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr1) loc(#loc155)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc142)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc142)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc156)
    %8 = cir.get_global @CWE190_Integer_Overflow__int_connect_socket_multiply_44_good : !cir.ptr<!cir.func<!void ()>> loc(#loc372)
    cir.call @CWE190_Integer_Overflow__int_connect_socket_multiply_44_good() : () -> () loc(#loc157)
    %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc143)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc143)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc159)
    %11 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc144)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc144)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc160)
    %13 = cir.get_global @CWE190_Integer_Overflow__int_connect_socket_multiply_44_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc373)
    cir.call @CWE190_Integer_Overflow__int_connect_socket_multiply_44_bad() : () -> () loc(#loc161)
    %14 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc145)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc145)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc163)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc164)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc374)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc374)
    cir.return %17 : !s32i loc(#loc374)
  } loc(#loc369)
  cir.func internal private @goodG2BSink(%arg0: !s32i loc(fused[#loc168, #loc169])) extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc376)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc170)
    cir.scope {
      %1 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc173)
      %2 = cir.const #cir.int<0> : !s32i loc(#loc174)
      %3 = cir.cmp(gt, %1, %2) : !s32i, !cir.bool loc(#loc378)
      cir.if %3 {
        %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc380)
        %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc178)
        %6 = cir.const #cir.int<2> : !s32i loc(#loc177)
        %7 = cir.binop(mul, %5, %6) nsw : !s32i loc(#loc178)
        cir.store %7, %4 : !s32i, !cir.ptr<!s32i> loc(#loc380)
        %8 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc179)
        cir.call @printIntLine(%8) : (!s32i) -> () loc(#loc180)
      } loc(#loc379)
    } loc(#loc377)
    cir.return loc(#loc167)
  } loc(#loc375)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc382)
    %1 = cir.alloca !cir.ptr<!cir.func<!void (!s32i)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!s32i)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc383)
    %2 = cir.get_global @goodG2BSink : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc186)
    cir.store %2, %1 : !cir.ptr<!cir.func<!void (!s32i)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!s32i)>>> loc(#loc383)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc187)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc384)
    %4 = cir.const #cir.int<2> : !s32i loc(#loc189)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc385)
    %5 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<!void (!s32i)>>>, !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc191)
    %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc192)
    cir.call %5(%6) : (!cir.ptr<!cir.func<!void (!s32i)>>, !s32i) -> () loc(#loc191)
    cir.return loc(#loc182)
  } loc(#loc381)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc193)
  cir.func internal private @goodB2GSink(%arg0: !s32i loc(fused[#loc196, #loc197])) extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc387)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc198)
    cir.scope {
      %1 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc201)
      %2 = cir.const #cir.int<0> : !s32i loc(#loc202)
      %3 = cir.cmp(gt, %1, %2) : !s32i, !cir.bool loc(#loc389)
      cir.if %3 {
        cir.scope {
          %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc206)
          %5 = cir.const #cir.int<2147483647> : !s32i loc(#loc207)
          %6 = cir.const #cir.int<2> : !s32i loc(#loc208)
          %7 = cir.binop(div, %5, %6) : !s32i loc(#loc392)
          %8 = cir.cmp(lt, %4, %7) : !s32i, !cir.bool loc(#loc393)
          cir.if %8 {
            %9 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc395)
            %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc215)
            %11 = cir.const #cir.int<2> : !s32i loc(#loc214)
            %12 = cir.binop(mul, %10, %11) nsw : !s32i loc(#loc215)
            cir.store %12, %9 : !s32i, !cir.ptr<!s32i> loc(#loc395)
            %13 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc216)
            cir.call @printIntLine(%13) : (!s32i) -> () loc(#loc217)
          } else {
            %9 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc193)
            %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc193)
            cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc218)
          } loc(#loc394)
        } loc(#loc391)
      } loc(#loc390)
    } loc(#loc388)
    cir.return loc(#loc195)
  } loc(#loc386)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc397)
    %1 = cir.alloca !cir.ptr<!cir.func<!void (!s32i)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!s32i)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc398)
    %2 = cir.get_global @goodB2GSink : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc224)
    cir.store %2, %1 : !cir.ptr<!cir.func<!void (!s32i)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!s32i)>>> loc(#loc398)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc225)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc399)
    cir.scope {
      %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc401)
      %7 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc402)
      %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["connectSocket", init] {alignment = 4 : i64} loc(#loc403)
      %9 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc404)
      %10 = cir.const #cir.int<1> : !s32i loc(#loc234)
      %11 = cir.unary(minus, %10) : !s32i, !s32i loc(#loc234)
      cir.store %11, %8 : !s32i, !cir.ptr<!s32i> loc(#loc403)
      cir.scope {
        cir.do {
          %12 = cir.const #cir.int<2> : !s32i loc(#loc239)
          %13 = cir.const #cir.int<1> : !s32i loc(#loc240)
          %14 = cir.const #cir.int<6> : !s32i loc(#loc241)
          %15 = cir.call @socket(%12, %13, %14) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr1) loc(#loc242)
          cir.store %15, %8 : !s32i, !cir.ptr<!s32i> loc(#loc406)
          cir.scope {
            %54 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc247)
            %55 = cir.const #cir.int<1> : !s32i loc(#loc248)
            %56 = cir.unary(minus, %55) : !s32i, !s32i loc(#loc248)
            %57 = cir.cmp(eq, %54, %56) : !s32i, !cir.bool loc(#loc408)
            cir.if %57 {
              cir.break loc(#loc250)
            } loc(#loc409)
          } loc(#loc407)
          %16 = cir.cast(bitcast, %7 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc410)
          %17 = cir.const #cir.int<0> : !s32i loc(#loc253)
          %18 = cir.const #cir.int<16> : !u64i loc(#loc411)
          cir.libc.memset %18 bytes from %16 set to %17 : !cir.ptr<!void>, !s32i, !u64i loc(#loc412)
          %19 = cir.const #cir.int<2> : !s32i loc(#loc258)
          %20 = cir.cast(integral, %19 : !s32i), !u16i loc(#loc258)
          %21 = cir.get_member %7[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc73)
          cir.store %20, %21 : !u16i, !cir.ptr<!u16i> loc(#loc413)
          %22 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 10>> loc(#loc260)
          %23 = cir.cast(array_to_ptrdecay, %22 : !cir.ptr<!cir.array<!s8i x 10>>), !cir.ptr<!s8i> loc(#loc260)
          %24 = cir.call @inet_addr(%23) : (!cir.ptr<!s8i>) -> !u32i extra(#fn_attr1) loc(#loc261)
          %25 = cir.get_member %7[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc76)
          %26 = cir.get_member %25[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc77)
          cir.store %24, %26 : !u32i, !cir.ptr<!u32i> loc(#loc414)
          %27 = cir.const #cir.int<27015> : !s32i loc(#loc264)
          %28 = cir.cast(integral, %27 : !s32i), !u16i loc(#loc264)
          %29 = cir.call @htons(%28) : (!u16i) -> !u16i extra(#fn_attr1) loc(#loc265)
          %30 = cir.get_member %7[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc82)
          cir.store %29, %30 : !u16i, !cir.ptr<!u16i> loc(#loc415)
          cir.scope {
            %54 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc270)
            %55 = cir.cast(bitcast, %7 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc417)
            %56 = cir.const #cir.int<16> : !u64i loc(#loc418)
            %57 = cir.cast(integral, %56 : !u64i), !u32i loc(#loc418)
            %58 = cir.call @connect(%54, %55, %57) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc275)
            %59 = cir.const #cir.int<1> : !s32i loc(#loc276)
            %60 = cir.unary(minus, %59) : !s32i, !s32i loc(#loc276)
            %61 = cir.cmp(eq, %58, %60) : !s32i, !cir.bool loc(#loc419)
            cir.if %61 {
              cir.break loc(#loc278)
            } loc(#loc420)
          } loc(#loc416)
          %31 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc279)
          %32 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc280)
          %33 = cir.cast(bitcast, %32 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc280)
          %34 = cir.const #cir.int<3> : !s32i loc(#loc281)
          %35 = cir.cast(integral, %34 : !s32i), !u64i loc(#loc281)
          %36 = cir.const #cir.int<4> : !u64i loc(#loc281)
          %37 = cir.binop(mul, %35, %36) : !u64i loc(#loc281)
          %38 = cir.const #cir.int<2> : !s32i loc(#loc281)
          %39 = cir.cast(integral, %38 : !s32i), !u64i loc(#loc281)
          %40 = cir.binop(add, %37, %39) : !u64i loc(#loc281)
          %41 = cir.const #cir.int<1> : !s32i loc(#loc282)
          %42 = cir.cast(integral, %41 : !s32i), !u64i loc(#loc282)
          %43 = cir.binop(sub, %40, %42) : !u64i loc(#loc421)
          %44 = cir.const #cir.int<0> : !s32i loc(#loc283)
          %45 = cir.call @recv(%31, %33, %43, %44) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc284)
          %46 = cir.cast(integral, %45 : !s64i), !s32i loc(#loc284)
          cir.store %46, %6 : !s32i, !cir.ptr<!s32i> loc(#loc422)
          cir.scope {
            %54 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc289)
            %55 = cir.const #cir.int<1> : !s32i loc(#loc290)
            %56 = cir.unary(minus, %55) : !s32i, !s32i loc(#loc290)
            %57 = cir.cmp(eq, %54, %56) : !s32i, !cir.bool loc(#loc424)
            %58 = cir.ternary(%57, true {
              %59 = cir.const #true loc(#loc291)
              cir.yield %59 : !cir.bool loc(#loc291)
            }, false {
              %59 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc292)
              %60 = cir.const #cir.int<0> : !s32i loc(#loc293)
              %61 = cir.cmp(eq, %59, %60) : !s32i, !cir.bool loc(#loc425)
              %62 = cir.ternary(%61, true {
                %63 = cir.const #true loc(#loc291)
                cir.yield %63 : !cir.bool loc(#loc291)
              }, false {
                %63 = cir.const #false loc(#loc291)
                cir.yield %63 : !cir.bool loc(#loc291)
              }) : (!cir.bool) -> !cir.bool loc(#loc291)
              cir.yield %62 : !cir.bool loc(#loc291)
            }) : (!cir.bool) -> !cir.bool loc(#loc291)
            cir.if %58 {
              cir.break loc(#loc295)
            } loc(#loc426)
          } loc(#loc423)
          %47 = cir.const #cir.int<0> : !s32i loc(#loc296)
          %48 = cir.cast(integral, %47 : !s32i), !s8i loc(#loc296)
          %49 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc297)
          %50 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc298)
          %51 = cir.ptr_stride(%50 : !cir.ptr<!s8i>, %49 : !s32i), !cir.ptr<!s8i> loc(#loc298)
          cir.store %48, %51 : !s8i, !cir.ptr<!s8i> loc(#loc427)
          %52 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc299)
          %53 = cir.call @atoi(%52) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr1) loc(#loc300)
          cir.store %53, %0 : !s32i, !cir.ptr<!s32i> loc(#loc428)
          cir.yield loc(#loc238)
        } while {
          %12 = cir.const #cir.int<0> : !s32i loc(#loc303)
          %13 = cir.cast(int_to_bool, %12 : !s32i), !cir.bool loc(#loc303)
          cir.condition(%13) loc(#loc303)
        } loc(#loc405)
      } loc(#loc405)
      cir.scope {
        %12 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc306)
        %13 = cir.const #cir.int<1> : !s32i loc(#loc307)
        %14 = cir.unary(minus, %13) : !s32i, !s32i loc(#loc307)
        %15 = cir.cmp(ne, %12, %14) : !s32i, !cir.bool loc(#loc430)
        cir.if %15 {
          %16 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc309)
          %17 = cir.call @close(%16) : (!s32i) -> !s32i loc(#loc310)
        } loc(#loc431)
      } loc(#loc429)
    } loc(#loc400)
    %4 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<!void (!s32i)>>>, !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc311)
    %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc312)
    cir.call %4(%5) : (!cir.ptr<!cir.func<!void (!s32i)>>, !s32i) -> () loc(#loc311)
    cir.return loc(#loc220)
  } loc(#loc396)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":44:1)
#loc4 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":52:1)
#loc7 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":45:1)
#loc8 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":46:5)
#loc9 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":51:5)
#loc10 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":46:8)
#loc11 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":46:15)
#loc12 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":47:5)
#loc13 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":49:9)
#loc14 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":49:29)
#loc15 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":49:22)
#loc16 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":50:22)
#loc17 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":50:9)
#loc18 = loc("/usr/include/sys/socket.h":102:1)
#loc19 = loc("/usr/include/sys/socket.h":102:62)
#loc20 = loc("/usr/include/arpa/inet.h":34:1)
#loc21 = loc("/usr/include/arpa/inet.h":34:47)
#loc22 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":87:49)
#loc23 = loc("/usr/include/netinet/in.h":404:1)
#loc24 = loc("/usr/include/netinet/in.h":405:40)
#loc25 = loc("/usr/include/sys/socket.h":126:1)
#loc26 = loc("/usr/include/sys/socket.h":126:75)
#loc27 = loc("/usr/include/sys/socket.h":145:1)
#loc28 = loc("/usr/include/sys/socket.h":145:68)
#loc29 = loc("/usr/include/stdlib.h":105:1)
#loc30 = loc("/usr/include/stdlib.h":106:33)
#loc31 = loc("/usr/include/unistd.h":358:1)
#loc32 = loc("/usr/include/unistd.h":358:27)
#loc33 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":54:1)
#loc34 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":119:1)
#loc35 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":56:5)
#loc36 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":56:9)
#loc37 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":58:5)
#loc38 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":58:29)
#loc39 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":60:12)
#loc40 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":60:5)
#loc41 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":61:5)
#loc42 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":116:5)
#loc43 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":66:9)
#loc44 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":66:13)
#loc45 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":67:9)
#loc46 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":67:28)
#loc47 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":68:9)
#loc48 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":68:32)
#loc49 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":69:9)
#loc50 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":69:41)
#loc51 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":70:9)
#loc52 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":105:17)
#loc53 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":80:36)
#loc54 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":80:45)
#loc55 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":80:58)
#loc56 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":80:29)
#loc57 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":80:13)
#loc58 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":80:69)
#loc59 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":81:13)
#loc60 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":84:13)
#loc61 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":81:17)
#loc62 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":81:34)
#loc63 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":82:13)
#loc64 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":83:17)
#loc65 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":85:20)
#loc66 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":85:21)
#loc67 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":85:30)
#loc68 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":85:33)
#loc69 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":85:47)
#loc70 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":85:13)
#loc71 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":85:48)
#loc72 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":86:34)
#loc73 = loc("/usr/include/netinet/in.h":249:5)
#loc74 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":86:13)
#loc75 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":87:39)
#loc76 = loc("/usr/include/netinet/in.h":251:20)
#loc77 = loc("/usr/include/netinet/in.h":33:15)
#loc78 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":87:13)
#loc79 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":87:59)
#loc80 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":88:38)
#loc81 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":88:32)
#loc82 = loc("/usr/include/netinet/in.h":250:15)
#loc83 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":88:13)
#loc84 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":88:46)
#loc85 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":89:13)
#loc86 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":92:13)
#loc87 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":89:25)
#loc88 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":89:58)
#loc89 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":89:59)
#loc90 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":89:68)
#loc91 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":89:82)
#loc92 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":89:17)
#loc93 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":89:88)
#loc94 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":90:13)
#loc95 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":91:17)
#loc96 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":95:31)
#loc97 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":95:46)
#loc98 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":95:59)
#loc99 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":95:77)
#loc100 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":95:80)
#loc101 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":95:26)
#loc102 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":95:13)
#loc103 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":95:81)
#loc104 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":96:13)
#loc105 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":99:13)
#loc106 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":96:17)
#loc107 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":96:31)
#loc108 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":96:44)
#loc109 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":96:47)
#loc110 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":96:61)
#loc111 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":97:13)
#loc112 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":98:17)
#loc113 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":101:39)
#loc114 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":101:25)
#loc115 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":101:13)
#loc116 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":103:25)
#loc117 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":103:20)
#loc118 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":103:13)
#loc119 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":103:36)
#loc120 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":105:16)
#loc121 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":106:9)
#loc122 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":109:9)
#loc123 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":106:13)
#loc124 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":106:30)
#loc125 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":107:9)
#loc126 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":108:26)
#loc127 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":108:13)
#loc128 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":118:5)
#loc129 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":118:13)
#loc130 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":230:1)
#loc131 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":234:1)
#loc132 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":232:5)
#loc133 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":232:13)
#loc134 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":233:5)
#loc135 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":233:13)
#loc136 = loc("/usr/include/stdlib.h":575:1)
#loc137 = loc("/usr/include/stdlib.h":575:41)
#loc138 = loc("/usr/include/time.h":76:1)
#loc139 = loc("/usr/include/time.h":76:38)
#loc140 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc141 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc142 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":249:15)
#loc143 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":251:15)
#loc144 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":254:15)
#loc145 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":256:15)
#loc146 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":244:1)
#loc147 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":259:1)
#loc152 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":245:1)
#loc153 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":247:27)
#loc154 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":247:22)
#loc155 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":247:5)
#loc156 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":249:5)
#loc157 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":250:5)
#loc158 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":250:66)
#loc159 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":251:5)
#loc160 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":254:5)
#loc161 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":255:5)
#loc162 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":255:65)
#loc163 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":256:5)
#loc164 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":258:12)
#loc165 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":258:5)
#loc166 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":126:1)
#loc167 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":134:1)
#loc170 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":127:1)
#loc171 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":128:5)
#loc172 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":133:5)
#loc173 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":128:8)
#loc174 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":128:15)
#loc175 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":129:5)
#loc176 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":131:9)
#loc177 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":131:29)
#loc178 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":131:22)
#loc179 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":132:22)
#loc180 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":132:9)
#loc181 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":136:1)
#loc182 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":145:1)
#loc183 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":138:5)
#loc184 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":138:9)
#loc185 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":139:5)
#loc186 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":139:29)
#loc187 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":141:12)
#loc188 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":141:5)
#loc189 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":143:12)
#loc190 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":143:5)
#loc191 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":144:5)
#loc192 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":144:13)
#loc193 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":160:23)
#loc194 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":148:1)
#loc195 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":163:1)
#loc198 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":149:1)
#loc199 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":150:5)
#loc200 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":162:5)
#loc201 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":150:8)
#loc202 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":150:15)
#loc203 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":151:5)
#loc204 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":153:9)
#loc205 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":161:9)
#loc206 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":153:13)
#loc207 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":153:21)
#loc208 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":153:29)
#loc209 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":153:30)
#loc210 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":154:9)
#loc211 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":157:9)
#loc212 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":159:9)
#loc213 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":155:13)
#loc214 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":155:33)
#loc215 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":155:26)
#loc216 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":156:26)
#loc217 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":156:13)
#loc218 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":160:13)
#loc219 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":165:1)
#loc220 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":228:1)
#loc221 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":167:5)
#loc222 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":167:9)
#loc223 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":168:5)
#loc224 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":168:29)
#loc225 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":170:12)
#loc226 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":170:5)
#loc227 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":171:5)
#loc228 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":226:5)
#loc229 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":176:9)
#loc230 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":176:13)
#loc231 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":177:9)
#loc232 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":177:28)
#loc233 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":178:9)
#loc234 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":178:32)
#loc235 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":179:9)
#loc236 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":179:41)
#loc237 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":180:9)
#loc238 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":215:17)
#loc239 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":190:36)
#loc240 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":190:45)
#loc241 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":190:58)
#loc242 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":190:29)
#loc243 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":190:13)
#loc244 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":190:69)
#loc245 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":191:13)
#loc246 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":194:13)
#loc247 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":191:17)
#loc248 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":191:34)
#loc249 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":192:13)
#loc250 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":193:17)
#loc251 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":195:20)
#loc252 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":195:21)
#loc253 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":195:30)
#loc254 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":195:33)
#loc255 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":195:47)
#loc256 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":195:13)
#loc257 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":195:48)
#loc258 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":196:34)
#loc259 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":196:13)
#loc260 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":197:49)
#loc261 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":197:39)
#loc262 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":197:13)
#loc263 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":197:59)
#loc264 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":198:38)
#loc265 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":198:32)
#loc266 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":198:13)
#loc267 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":198:46)
#loc268 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":199:13)
#loc269 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":202:13)
#loc270 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":199:25)
#loc271 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":199:58)
#loc272 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":199:59)
#loc273 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":199:68)
#loc274 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":199:82)
#loc275 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":199:17)
#loc276 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":199:88)
#loc277 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":200:13)
#loc278 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":201:17)
#loc279 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":205:31)
#loc280 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":205:46)
#loc281 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":205:59)
#loc282 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":205:77)
#loc283 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":205:80)
#loc284 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":205:26)
#loc285 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":205:13)
#loc286 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":205:81)
#loc287 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":206:13)
#loc288 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":209:13)
#loc289 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":206:17)
#loc290 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":206:31)
#loc291 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":206:44)
#loc292 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":206:47)
#loc293 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":206:61)
#loc294 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":207:13)
#loc295 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":208:17)
#loc296 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":211:39)
#loc297 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":211:25)
#loc298 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":211:13)
#loc299 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":213:25)
#loc300 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":213:20)
#loc301 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":213:13)
#loc302 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":213:36)
#loc303 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":215:16)
#loc304 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":216:9)
#loc305 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":219:9)
#loc306 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":216:13)
#loc307 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":216:30)
#loc308 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":217:9)
#loc309 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":218:26)
#loc310 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":218:13)
#loc311 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":227:5)
#loc312 = loc("CWE190_Integer_Overflow__int_connect_socket_multiply_44.c":227:13)
#loc313 = loc(fused[#loc1, #loc2])
#loc314 = loc(fused[#loc3, #loc4])
#loc316 = loc(fused[#loc8, #loc9])
#loc317 = loc(fused[#loc10, #loc11])
#loc318 = loc(fused[#loc12, #loc9])
#loc319 = loc(fused[#loc13, #loc14])
#loc320 = loc(fused[#loc18, #loc19])
#loc321 = loc(fused[#loc20, #loc21])
#loc322 = loc(fused[#loc23, #loc24])
#loc323 = loc(fused[#loc25, #loc26])
#loc324 = loc(fused[#loc27, #loc28])
#loc325 = loc(fused[#loc29, #loc30])
#loc326 = loc(fused[#loc31, #loc32])
#loc327 = loc(fused[#loc33, #loc34])
#loc328 = loc(fused[#loc35, #loc36])
#loc329 = loc(fused[#loc37, #loc38])
#loc330 = loc(fused[#loc40, #loc39])
#loc331 = loc(fused[#loc41, #loc42])
#loc332 = loc(fused[#loc43, #loc44])
#loc333 = loc(fused[#loc45, #loc46])
#loc334 = loc(fused[#loc47, #loc48])
#loc335 = loc(fused[#loc49, #loc50])
#loc336 = loc(fused[#loc51, #loc52])
#loc337 = loc(fused[#loc57, #loc58])
#loc338 = loc(fused[#loc59, #loc60])
#loc339 = loc(fused[#loc61, #loc62])
#loc340 = loc(fused[#loc63, #loc60])
#loc341 = loc(fused[#loc65, #loc66])
#loc342 = loc(fused[#loc68, #loc69])
#loc343 = loc(fused[#loc70, #loc71])
#loc344 = loc(fused[#loc74, #loc72])
#loc345 = loc(fused[#loc78, #loc79])
#loc346 = loc(fused[#loc83, #loc84])
#loc347 = loc(fused[#loc85, #loc86])
#loc348 = loc(fused[#loc88, #loc89])
#loc349 = loc(fused[#loc90, #loc91])
#loc350 = loc(fused[#loc92, #loc93])
#loc351 = loc(fused[#loc94, #loc86])
#loc352 = loc(fused[#loc98, #loc99])
#loc353 = loc(fused[#loc102, #loc103])
#loc354 = loc(fused[#loc104, #loc105])
#loc355 = loc(fused[#loc106, #loc107])
#loc356 = loc(fused[#loc109, #loc110])
#loc357 = loc(fused[#loc111, #loc105])
#loc358 = loc(fused[#loc115, #loc113])
#loc359 = loc(fused[#loc118, #loc119])
#loc360 = loc(fused[#loc121, #loc122])
#loc361 = loc(fused[#loc123, #loc124])
#loc362 = loc(fused[#loc125, #loc122])
#loc363 = loc(fused[#loc130, #loc131])
#loc364 = loc(fused[#loc132, #loc133])
#loc365 = loc(fused[#loc134, #loc135])
#loc366 = loc(fused[#loc136, #loc137])
#loc367 = loc(fused[#loc138, #loc139])
#loc368 = loc(fused[#loc140, #loc141])
#loc369 = loc(fused[#loc146, #loc147])
#loc372 = loc(fused[#loc157, #loc158])
#loc373 = loc(fused[#loc161, #loc162])
#loc374 = loc(fused[#loc165, #loc164])
#loc375 = loc(fused[#loc166, #loc167])
#loc377 = loc(fused[#loc171, #loc172])
#loc378 = loc(fused[#loc173, #loc174])
#loc379 = loc(fused[#loc175, #loc172])
#loc380 = loc(fused[#loc176, #loc177])
#loc381 = loc(fused[#loc181, #loc182])
#loc382 = loc(fused[#loc183, #loc184])
#loc383 = loc(fused[#loc185, #loc186])
#loc384 = loc(fused[#loc188, #loc187])
#loc385 = loc(fused[#loc190, #loc189])
#loc386 = loc(fused[#loc194, #loc195])
#loc388 = loc(fused[#loc199, #loc200])
#loc389 = loc(fused[#loc201, #loc202])
#loc390 = loc(fused[#loc203, #loc200])
#loc391 = loc(fused[#loc204, #loc205])
#loc392 = loc(fused[#loc207, #loc208])
#loc393 = loc(fused[#loc206, #loc209])
#loc394 = loc(fused[#loc210, #loc211, #loc212, #loc205])
#loc395 = loc(fused[#loc213, #loc214])
#loc396 = loc(fused[#loc219, #loc220])
#loc397 = loc(fused[#loc221, #loc222])
#loc398 = loc(fused[#loc223, #loc224])
#loc399 = loc(fused[#loc226, #loc225])
#loc400 = loc(fused[#loc227, #loc228])
#loc401 = loc(fused[#loc229, #loc230])
#loc402 = loc(fused[#loc231, #loc232])
#loc403 = loc(fused[#loc233, #loc234])
#loc404 = loc(fused[#loc235, #loc236])
#loc405 = loc(fused[#loc237, #loc238])
#loc406 = loc(fused[#loc243, #loc244])
#loc407 = loc(fused[#loc245, #loc246])
#loc408 = loc(fused[#loc247, #loc248])
#loc409 = loc(fused[#loc249, #loc246])
#loc410 = loc(fused[#loc251, #loc252])
#loc411 = loc(fused[#loc254, #loc255])
#loc412 = loc(fused[#loc256, #loc257])
#loc413 = loc(fused[#loc259, #loc258])
#loc414 = loc(fused[#loc262, #loc263])
#loc415 = loc(fused[#loc266, #loc267])
#loc416 = loc(fused[#loc268, #loc269])
#loc417 = loc(fused[#loc271, #loc272])
#loc418 = loc(fused[#loc273, #loc274])
#loc419 = loc(fused[#loc275, #loc276])
#loc420 = loc(fused[#loc277, #loc269])
#loc421 = loc(fused[#loc281, #loc282])
#loc422 = loc(fused[#loc285, #loc286])
#loc423 = loc(fused[#loc287, #loc288])
#loc424 = loc(fused[#loc289, #loc290])
#loc425 = loc(fused[#loc292, #loc293])
#loc426 = loc(fused[#loc294, #loc288])
#loc427 = loc(fused[#loc298, #loc296])
#loc428 = loc(fused[#loc301, #loc302])
#loc429 = loc(fused[#loc304, #loc305])
#loc430 = loc(fused[#loc306, #loc307])
#loc431 = loc(fused[#loc308, #loc305])
