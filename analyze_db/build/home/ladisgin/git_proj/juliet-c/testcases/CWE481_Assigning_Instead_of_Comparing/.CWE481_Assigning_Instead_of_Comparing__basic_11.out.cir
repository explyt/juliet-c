!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc43 = loc("CWE481_Assigning_Instead_of_Comparing__basic_11.c":91:10)
#loc44 = loc("CWE481_Assigning_Instead_of_Comparing__basic_11.c":91:14)
#loc45 = loc("CWE481_Assigning_Instead_of_Comparing__basic_11.c":91:20)
#loc46 = loc("CWE481_Assigning_Instead_of_Comparing__basic_11.c":91:32)
#loc123 = loc(fused[#loc43, #loc44])
#loc124 = loc(fused[#loc45, #loc46])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE481_Assigning_Instead_of_Comparing/CWE481_Assigning_Instead_of_Comparing__basic_11.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i32 = dense<32> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func no_proto private @globalReturnsTrue(...) -> !s32i loc(#loc105)
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc106)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc107)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"i was 5\00" : !cir.array<!s8i x 8>> : !cir.array<!s8i x 8> {alignment = 1 : i64} loc(#loc7)
  cir.func no_proto @CWE481_Assigning_Instead_of_Comparing__basic_11_bad() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc110)
      %1 = cir.cast(bitcast, %0 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc110)
      %2 = cir.call %1() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc12)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc12)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["intRand", init] {alignment = 4 : i64} loc(#loc113)
          %5 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc19)
          cir.store %5, %4 : !s32i, !cir.ptr<!s32i> loc(#loc113)
          cir.scope {
            %6 = cir.const #cir.int<5> : !s32i loc(#loc22)
            cir.store %6, %4 : !s32i, !cir.ptr<!s32i> loc(#loc115)
            %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc24)
            cir.if %7 {
              %8 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 8>> loc(#loc7)
              %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 8>>), !cir.ptr<!s8i> loc(#loc7)
              cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc26)
            } loc(#loc116)
          } loc(#loc114)
        } loc(#loc112)
      } loc(#loc111)
    } loc(#loc109)
    cir.return loc(#loc9)
  } loc(#loc108)
  cir.func no_proto @CWE481_Assigning_Instead_of_Comparing__basic_11_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<!void ()>> loc(#loc118)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc29)
    %1 = cir.get_global @good2 : !cir.ptr<!cir.func<!void ()>> loc(#loc119)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc31)
    cir.return loc(#loc28)
  } loc(#loc117)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc120)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc121)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc37)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc38)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc39)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc40)
  cir.func @main(%arg0: !s32i loc(fused[#loc43, #loc44]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc45, #loc46])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc123)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc124)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc42)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc47)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc47)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc48)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc49)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc49)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc50)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc37)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc37)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc51)
    %8 = cir.get_global @CWE481_Assigning_Instead_of_Comparing__basic_11_good : !cir.ptr<!cir.func<!void ()>> loc(#loc125)
    cir.call @CWE481_Assigning_Instead_of_Comparing__basic_11_good() : () -> () loc(#loc52)
    %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc38)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc38)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc54)
    %11 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc39)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc39)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc55)
    %13 = cir.get_global @CWE481_Assigning_Instead_of_Comparing__basic_11_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc126)
    cir.call @CWE481_Assigning_Instead_of_Comparing__basic_11_bad() : () -> () loc(#loc56)
    %14 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc40)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc40)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc58)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc59)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc127)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc127)
    cir.return %17 : !s32i loc(#loc127)
  } loc(#loc122)
  cir.func no_proto private @globalReturnsFalse(...) -> !s32i loc(#loc128)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc63)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.get_global @globalReturnsFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc131)
      %1 = cir.cast(bitcast, %0 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc131)
      %2 = cir.call %1() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc68)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc68)
      cir.if %3 {
        %4 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc63)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc63)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc73)
      } else {
        cir.scope {
          %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["intRand", init] {alignment = 4 : i64} loc(#loc134)
          %5 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc78)
          cir.store %5, %4 : !s32i, !cir.ptr<!s32i> loc(#loc134)
          cir.scope {
            %6 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc81)
            %7 = cir.const #cir.int<5> : !s32i loc(#loc82)
            %8 = cir.cmp(eq, %6, %7) : !s32i, !cir.bool loc(#loc136)
            cir.if %8 {
              %9 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 8>> loc(#loc84)
              %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 8>>), !cir.ptr<!s8i> loc(#loc84)
              cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc85)
            } loc(#loc137)
          } loc(#loc135)
        } loc(#loc133)
      } loc(#loc132)
    } loc(#loc130)
    cir.return loc(#loc65)
  } loc(#loc129)
  cir.func no_proto internal private @good2() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc140)
      %1 = cir.cast(bitcast, %0 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc140)
      %2 = cir.call %1() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc90)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc90)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["intRand", init] {alignment = 4 : i64} loc(#loc143)
          %5 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc97)
          cir.store %5, %4 : !s32i, !cir.ptr<!s32i> loc(#loc143)
          cir.scope {
            %6 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc100)
            %7 = cir.const #cir.int<5> : !s32i loc(#loc101)
            %8 = cir.cmp(eq, %6, %7) : !s32i, !cir.bool loc(#loc145)
            cir.if %8 {
              %9 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 8>> loc(#loc103)
              %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 8>>), !cir.ptr<!s8i> loc(#loc103)
              cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc104)
            } loc(#loc146)
          } loc(#loc144)
        } loc(#loc142)
      } loc(#loc141)
    } loc(#loc139)
    cir.return loc(#loc87)
  } loc(#loc138)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE481_Assigning_Instead_of_Comparing/CWE481_Assigning_Instead_of_Comparing__basic_11.c":0:0)
#loc1 = loc("../../testcasesupport/std_testcase_io.h":48:1)
#loc2 = loc("../../testcasesupport/std_testcase_io.h":48:23)
#loc3 = loc("/usr/include/stdlib.h":573:1)
#loc4 = loc("/usr/include/stdlib.h":573:24)
#loc5 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc6 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc7 = loc("CWE481_Assigning_Instead_of_Comparing__basic_11.c":29:27)
#loc8 = loc("CWE481_Assigning_Instead_of_Comparing__basic_11.c":20:1)
#loc9 = loc("CWE481_Assigning_Instead_of_Comparing__basic_11.c":33:1)
#loc10 = loc("CWE481_Assigning_Instead_of_Comparing__basic_11.c":22:5)
#loc11 = loc("CWE481_Assigning_Instead_of_Comparing__basic_11.c":32:5)
#loc12 = loc("CWE481_Assigning_Instead_of_Comparing__basic_11.c":22:8)
#loc13 = loc("CWE481_Assigning_Instead_of_Comparing__basic_11.c":22:26)
#loc14 = loc("CWE481_Assigning_Instead_of_Comparing__basic_11.c":23:5)
#loc15 = loc("CWE481_Assigning_Instead_of_Comparing__basic_11.c":24:9)
#loc16 = loc("CWE481_Assigning_Instead_of_Comparing__basic_11.c":31:9)
#loc17 = loc("CWE481_Assigning_Instead_of_Comparing__basic_11.c":25:13)
#loc18 = loc("CWE481_Assigning_Instead_of_Comparing__basic_11.c":25:32)
#loc19 = loc("CWE481_Assigning_Instead_of_Comparing__basic_11.c":25:27)
#loc20 = loc("CWE481_Assigning_Instead_of_Comparing__basic_11.c":27:13)
#loc21 = loc("CWE481_Assigning_Instead_of_Comparing__basic_11.c":30:13)
#loc22 = loc("CWE481_Assigning_Instead_of_Comparing__basic_11.c":27:26)
#loc23 = loc("CWE481_Assigning_Instead_of_Comparing__basic_11.c":27:16)
#loc24 = loc("CWE481_Assigning_Instead_of_Comparing__basic_11.c":27:24)
#loc25 = loc("CWE481_Assigning_Instead_of_Comparing__basic_11.c":28:13)
#loc26 = loc("CWE481_Assigning_Instead_of_Comparing__basic_11.c":29:17)
#loc27 = loc("CWE481_Assigning_Instead_of_Comparing__basic_11.c":76:1)
#loc28 = loc("CWE481_Assigning_Instead_of_Comparing__basic_11.c":80:1)
#loc29 = loc("CWE481_Assigning_Instead_of_Comparing__basic_11.c":78:5)
#loc30 = loc("CWE481_Assigning_Instead_of_Comparing__basic_11.c":78:11)
#loc31 = loc("CWE481_Assigning_Instead_of_Comparing__basic_11.c":79:5)
#loc32 = loc("CWE481_Assigning_Instead_of_Comparing__basic_11.c":79:11)
#loc33 = loc("/usr/include/stdlib.h":575:1)
#loc34 = loc("/usr/include/stdlib.h":575:41)
#loc35 = loc("/usr/include/time.h":76:1)
#loc36 = loc("/usr/include/time.h":76:38)
#loc37 = loc("CWE481_Assigning_Instead_of_Comparing__basic_11.c":96:15)
#loc38 = loc("CWE481_Assigning_Instead_of_Comparing__basic_11.c":98:15)
#loc39 = loc("CWE481_Assigning_Instead_of_Comparing__basic_11.c":101:15)
#loc40 = loc("CWE481_Assigning_Instead_of_Comparing__basic_11.c":103:15)
#loc41 = loc("CWE481_Assigning_Instead_of_Comparing__basic_11.c":91:1)
#loc42 = loc("CWE481_Assigning_Instead_of_Comparing__basic_11.c":106:1)
#loc47 = loc("CWE481_Assigning_Instead_of_Comparing__basic_11.c":92:1)
#loc48 = loc("CWE481_Assigning_Instead_of_Comparing__basic_11.c":94:27)
#loc49 = loc("CWE481_Assigning_Instead_of_Comparing__basic_11.c":94:22)
#loc50 = loc("CWE481_Assigning_Instead_of_Comparing__basic_11.c":94:5)
#loc51 = loc("CWE481_Assigning_Instead_of_Comparing__basic_11.c":96:5)
#loc52 = loc("CWE481_Assigning_Instead_of_Comparing__basic_11.c":97:5)
#loc53 = loc("CWE481_Assigning_Instead_of_Comparing__basic_11.c":97:58)
#loc54 = loc("CWE481_Assigning_Instead_of_Comparing__basic_11.c":98:5)
#loc55 = loc("CWE481_Assigning_Instead_of_Comparing__basic_11.c":101:5)
#loc56 = loc("CWE481_Assigning_Instead_of_Comparing__basic_11.c":102:5)
#loc57 = loc("CWE481_Assigning_Instead_of_Comparing__basic_11.c":102:57)
#loc58 = loc("CWE481_Assigning_Instead_of_Comparing__basic_11.c":103:5)
#loc59 = loc("CWE481_Assigning_Instead_of_Comparing__basic_11.c":105:12)
#loc60 = loc("CWE481_Assigning_Instead_of_Comparing__basic_11.c":105:5)
#loc61 = loc("../../testcasesupport/std_testcase_io.h":50:1)
#loc62 = loc("../../testcasesupport/std_testcase_io.h":50:24)
#loc63 = loc("CWE481_Assigning_Instead_of_Comparing__basic_11.c":45:19)
#loc64 = loc("CWE481_Assigning_Instead_of_Comparing__basic_11.c":40:1)
#loc65 = loc("CWE481_Assigning_Instead_of_Comparing__basic_11.c":58:1)
#loc66 = loc("CWE481_Assigning_Instead_of_Comparing__basic_11.c":42:5)
#loc67 = loc("CWE481_Assigning_Instead_of_Comparing__basic_11.c":57:5)
#loc68 = loc("CWE481_Assigning_Instead_of_Comparing__basic_11.c":42:8)
#loc69 = loc("CWE481_Assigning_Instead_of_Comparing__basic_11.c":42:27)
#loc70 = loc("CWE481_Assigning_Instead_of_Comparing__basic_11.c":43:5)
#loc71 = loc("CWE481_Assigning_Instead_of_Comparing__basic_11.c":46:5)
#loc72 = loc("CWE481_Assigning_Instead_of_Comparing__basic_11.c":48:5)
#loc73 = loc("CWE481_Assigning_Instead_of_Comparing__basic_11.c":45:9)
#loc74 = loc("CWE481_Assigning_Instead_of_Comparing__basic_11.c":49:9)
#loc75 = loc("CWE481_Assigning_Instead_of_Comparing__basic_11.c":56:9)
#loc76 = loc("CWE481_Assigning_Instead_of_Comparing__basic_11.c":50:13)
#loc77 = loc("CWE481_Assigning_Instead_of_Comparing__basic_11.c":50:32)
#loc78 = loc("CWE481_Assigning_Instead_of_Comparing__basic_11.c":50:27)
#loc79 = loc("CWE481_Assigning_Instead_of_Comparing__basic_11.c":52:13)
#loc80 = loc("CWE481_Assigning_Instead_of_Comparing__basic_11.c":55:13)
#loc81 = loc("CWE481_Assigning_Instead_of_Comparing__basic_11.c":52:16)
#loc82 = loc("CWE481_Assigning_Instead_of_Comparing__basic_11.c":52:27)
#loc83 = loc("CWE481_Assigning_Instead_of_Comparing__basic_11.c":53:13)
#loc84 = loc("CWE481_Assigning_Instead_of_Comparing__basic_11.c":54:27)
#loc85 = loc("CWE481_Assigning_Instead_of_Comparing__basic_11.c":54:17)
#loc86 = loc("CWE481_Assigning_Instead_of_Comparing__basic_11.c":61:1)
#loc87 = loc("CWE481_Assigning_Instead_of_Comparing__basic_11.c":74:1)
#loc88 = loc("CWE481_Assigning_Instead_of_Comparing__basic_11.c":63:5)
#loc89 = loc("CWE481_Assigning_Instead_of_Comparing__basic_11.c":73:5)
#loc90 = loc("CWE481_Assigning_Instead_of_Comparing__basic_11.c":63:8)
#loc91 = loc("CWE481_Assigning_Instead_of_Comparing__basic_11.c":63:26)
#loc92 = loc("CWE481_Assigning_Instead_of_Comparing__basic_11.c":64:5)
#loc93 = loc("CWE481_Assigning_Instead_of_Comparing__basic_11.c":65:9)
#loc94 = loc("CWE481_Assigning_Instead_of_Comparing__basic_11.c":72:9)
#loc95 = loc("CWE481_Assigning_Instead_of_Comparing__basic_11.c":66:13)
#loc96 = loc("CWE481_Assigning_Instead_of_Comparing__basic_11.c":66:32)
#loc97 = loc("CWE481_Assigning_Instead_of_Comparing__basic_11.c":66:27)
#loc98 = loc("CWE481_Assigning_Instead_of_Comparing__basic_11.c":68:13)
#loc99 = loc("CWE481_Assigning_Instead_of_Comparing__basic_11.c":71:13)
#loc100 = loc("CWE481_Assigning_Instead_of_Comparing__basic_11.c":68:16)
#loc101 = loc("CWE481_Assigning_Instead_of_Comparing__basic_11.c":68:27)
#loc102 = loc("CWE481_Assigning_Instead_of_Comparing__basic_11.c":69:13)
#loc103 = loc("CWE481_Assigning_Instead_of_Comparing__basic_11.c":70:27)
#loc104 = loc("CWE481_Assigning_Instead_of_Comparing__basic_11.c":70:17)
#loc105 = loc(fused[#loc1, #loc2])
#loc106 = loc(fused[#loc3, #loc4])
#loc107 = loc(fused[#loc5, #loc6])
#loc108 = loc(fused[#loc8, #loc9])
#loc109 = loc(fused[#loc10, #loc11])
#loc110 = loc(fused[#loc12, #loc13])
#loc111 = loc(fused[#loc14, #loc11])
#loc112 = loc(fused[#loc15, #loc16])
#loc113 = loc(fused[#loc17, #loc18])
#loc114 = loc(fused[#loc20, #loc21])
#loc115 = loc(fused[#loc23, #loc22])
#loc116 = loc(fused[#loc25, #loc21])
#loc117 = loc(fused[#loc27, #loc28])
#loc118 = loc(fused[#loc29, #loc30])
#loc119 = loc(fused[#loc31, #loc32])
#loc120 = loc(fused[#loc33, #loc34])
#loc121 = loc(fused[#loc35, #loc36])
#loc122 = loc(fused[#loc41, #loc42])
#loc125 = loc(fused[#loc52, #loc53])
#loc126 = loc(fused[#loc56, #loc57])
#loc127 = loc(fused[#loc60, #loc59])
#loc128 = loc(fused[#loc61, #loc62])
#loc129 = loc(fused[#loc64, #loc65])
#loc130 = loc(fused[#loc66, #loc67])
#loc131 = loc(fused[#loc68, #loc69])
#loc132 = loc(fused[#loc70, #loc71, #loc72, #loc67])
#loc133 = loc(fused[#loc74, #loc75])
#loc134 = loc(fused[#loc76, #loc77])
#loc135 = loc(fused[#loc79, #loc80])
#loc136 = loc(fused[#loc81, #loc82])
#loc137 = loc(fused[#loc83, #loc80])
#loc138 = loc(fused[#loc86, #loc87])
#loc139 = loc(fused[#loc88, #loc89])
#loc140 = loc(fused[#loc90, #loc91])
#loc141 = loc(fused[#loc92, #loc89])
#loc142 = loc(fused[#loc93, #loc94])
#loc143 = loc(fused[#loc95, #loc96])
#loc144 = loc(fused[#loc98, #loc99])
#loc145 = loc(fused[#loc100, #loc101])
#loc146 = loc(fused[#loc102, #loc99])
