!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.record<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.record<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.record<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc14 = loc("CWE617_Reachable_Assertion__fgets_21.c":30:22)
#loc15 = loc("CWE617_Reachable_Assertion__fgets_21.c":30:26)
#loc69 = loc("CWE617_Reachable_Assertion__fgets_21.c":71:27)
#loc70 = loc("CWE617_Reachable_Assertion__fgets_21.c":71:31)
#loc102 = loc("CWE617_Reachable_Assertion__fgets_21.c":98:27)
#loc103 = loc("CWE617_Reachable_Assertion__fgets_21.c":98:31)
#loc134 = loc(fused[#loc14, #loc15])
#loc155 = loc(fused[#loc69, #loc70])
#loc167 = loc(fused[#loc102, #loc103])
!ty__IO_FILE = !cir.record<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/workspaces/juliet-c/testcases/CWE617_Reachable_Assertion/CWE617_Reachable_Assertion__fgets_21.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little", "dlti.mangling_mode" = "e">} {
  cir.global "private" internal dsolocal @badStatic = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc128)
  cir.func private @fgets(!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc129)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc130)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc131)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc132)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"fgets() failed.\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc11)
  cir.func internal private @badSource(%arg0: !s32i loc(fused[#loc14, #loc15])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc134)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc13)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc16)
    cir.scope {
      %4 = cir.get_global @badStatic : !cir.ptr<!s32i> loc(#loc128)
      %5 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc19)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc19)
      cir.if %6 {
        cir.scope {
          %7 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc138)
          %8 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc138)
          cir.store %8, %7 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc138)
          cir.scope {
            %9 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc27)
            %10 = cir.const #cir.int<3> : !s32i loc(#loc28)
            %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc28)
            %12 = cir.const #cir.int<4> : !u64i loc(#loc28)
            %13 = cir.binop(mul, %11, %12) : !u64i loc(#loc28)
            %14 = cir.const #cir.int<2> : !s32i loc(#loc28)
            %15 = cir.cast(integral, %14 : !s32i), !u64i loc(#loc28)
            %16 = cir.binop(add, %13, %15) : !u64i loc(#loc28)
            %17 = cir.cast(integral, %16 : !u64i), !s32i loc(#loc28)
            %18 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc130)
            %19 = cir.load %18 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc29)
            %20 = cir.call @fgets(%9, %17, %19) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc30)
            %21 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc31)
            %22 = cir.cast(bitcast, %21 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc31)
            %23 = cir.cmp(ne, %20, %22) : !cir.ptr<!s8i>, !cir.bool loc(#loc140)
            cir.if %23 {
              %24 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc35)
              %25 = cir.call @atoi(%24) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc36)
              cir.store %25, %0 : !s32i, !cir.ptr<!s32i> loc(#loc142)
            } else {
              %24 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc11)
              %25 = cir.cast(array_to_ptrdecay, %24 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc11)
              cir.call @printLine(%25) : (!cir.ptr<!s8i>) -> () loc(#loc39)
            } loc(#loc141)
          } loc(#loc139)
        } loc(#loc137)
      } loc(#loc136)
    } loc(#loc135)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc40)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc143)
    %3 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc143)
    cir.return %3 : !s32i loc(#loc143)
  } loc(#loc133)
  cir.func private @__assert_fail(!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) extra(#fn_attr) loc(#loc144)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data > ASSERT_VALUE\00" : !cir.array<!s8i x 20>> : !cir.array<!s8i x 20> {alignment = 1 : i64} loc(#loc44)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"CWE617_Reachable_Assertion__fgets_21.c\00" : !cir.array<!s8i x 39>> : !cir.array<!s8i x 39> {alignment = 1 : i64} loc(#loc44)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"void CWE617_Reachable_Assertion__fgets_21_bad()\00" : !cir.array<!s8i x 48>> : !cir.array<!s8i x 48> {alignment = 1 : i64} loc(#loc44)
  cir.func no_proto @CWE617_Reachable_Assertion__fgets_21_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc146)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc49)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc50)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc147)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc52)
    %4 = cir.get_global @badStatic : !cir.ptr<!s32i> loc(#loc128)
    cir.store %3, %4 : !s32i, !cir.ptr<!s32i> loc(#loc148)
    %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc54)
    %6 = cir.call @badSource(%5) : (!s32i) -> !s32i loc(#loc55)
    cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc149)
    %7 = cir.const #cir.int<4> : !u64i loc(#loc44)
    cir.scope {
      cir.scope {
        %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc44)
        %9 = cir.const #cir.int<5> : !s32i loc(#loc44)
        %10 = cir.cmp(gt, %8, %9) : !s32i, !cir.bool loc(#loc44)
        cir.if %10 {
        } else {
          %11 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 20>> loc(#loc44)
          %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc44)
          %13 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 39>> loc(#loc44)
          %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 39>>), !cir.ptr<!s8i> loc(#loc44)
          %15 = cir.const #cir.int<59> : !s32i loc(#loc44)
          %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc44)
          %17 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 48>> loc(#loc44)
          %18 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s8i x 48>>), !cir.ptr<!s8i> loc(#loc44)
          cir.call @__assert_fail(%12, %14, %16, %18) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) -> () extra(#fn_attr) loc(#loc44)
        } loc(#loc44)
      } loc(#loc44)
    } loc(#loc44)
    cir.return loc(#loc46)
  } loc(#loc145)
  cir.func no_proto @CWE617_Reachable_Assertion__fgets_21_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<()>> loc(#loc151)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc60)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<()>> loc(#loc152)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc62)
    cir.return loc(#loc59)
  } loc(#loc150)
  cir.global "private" internal dsolocal @goodG2B1Static = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc153)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc66)
  cir.func internal private @goodG2B1Source(%arg0: !s32i loc(fused[#loc69, #loc70])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc155)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc68)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc71)
    cir.scope {
      %4 = cir.get_global @goodG2B1Static : !cir.ptr<!s32i> loc(#loc153)
      %5 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc74)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc74)
      cir.if %6 {
        %7 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc66)
        %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc66)
        cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc78)
      } else {
        %7 = cir.const #cir.int<5> : !s32i loc(#loc79)
        %8 = cir.const #cir.int<1> : !s32i loc(#loc80)
        %9 = cir.binop(add, %7, %8) nsw : !s32i loc(#loc79)
        cir.store %9, %0 : !s32i, !cir.ptr<!s32i> loc(#loc158)
      } loc(#loc157)
    } loc(#loc156)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc82)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc159)
    %3 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc159)
    cir.return %3 : !s32i loc(#loc159)
  } loc(#loc154)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"void goodG2B1()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc84)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc161)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc89)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc90)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc162)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc92)
    %4 = cir.get_global @goodG2B1Static : !cir.ptr<!s32i> loc(#loc153)
    cir.store %3, %4 : !s32i, !cir.ptr<!s32i> loc(#loc163)
    %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc94)
    %6 = cir.call @goodG2B1Source(%5) : (!s32i) -> !s32i loc(#loc95)
    cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc164)
    %7 = cir.const #cir.int<4> : !u64i loc(#loc84)
    cir.scope {
      cir.scope {
        %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc84)
        %9 = cir.const #cir.int<5> : !s32i loc(#loc84)
        %10 = cir.cmp(gt, %8, %9) : !s32i, !cir.bool loc(#loc84)
        cir.if %10 {
        } else {
          %11 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 20>> loc(#loc84)
          %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc84)
          %13 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 39>> loc(#loc84)
          %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 39>>), !cir.ptr<!s8i> loc(#loc84)
          %15 = cir.const #cir.int<94> : !s32i loc(#loc84)
          %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc84)
          %17 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc84)
          %18 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc84)
          cir.call @__assert_fail(%12, %14, %16, %18) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) -> () extra(#fn_attr) loc(#loc84)
        } loc(#loc84)
      } loc(#loc84)
    } loc(#loc84)
    cir.return loc(#loc86)
  } loc(#loc160)
  cir.global "private" internal dsolocal @goodG2B2Static = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc165)
  cir.func internal private @goodG2B2Source(%arg0: !s32i loc(fused[#loc102, #loc103])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc167)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc101)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc104)
    cir.scope {
      %4 = cir.get_global @goodG2B2Static : !cir.ptr<!s32i> loc(#loc165)
      %5 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc107)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc107)
      cir.if %6 {
        %7 = cir.const #cir.int<5> : !s32i loc(#loc109)
        %8 = cir.const #cir.int<1> : !s32i loc(#loc110)
        %9 = cir.binop(add, %7, %8) nsw : !s32i loc(#loc109)
        cir.store %9, %0 : !s32i, !cir.ptr<!s32i> loc(#loc170)
      } loc(#loc169)
    } loc(#loc168)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc112)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc171)
    %3 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc171)
    cir.return %3 : !s32i loc(#loc171)
  } loc(#loc166)
  cir.global "private" constant cir_private dsolocal @".str.6" = #cir.const_array<"void goodG2B2()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc114)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc173)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc119)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc120)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc174)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc122)
    %4 = cir.get_global @goodG2B2Static : !cir.ptr<!s32i> loc(#loc165)
    cir.store %3, %4 : !s32i, !cir.ptr<!s32i> loc(#loc175)
    %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc124)
    %6 = cir.call @goodG2B2Source(%5) : (!s32i) -> !s32i loc(#loc125)
    cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc176)
    %7 = cir.const #cir.int<4> : !u64i loc(#loc114)
    cir.scope {
      cir.scope {
        %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc114)
        %9 = cir.const #cir.int<5> : !s32i loc(#loc114)
        %10 = cir.cmp(gt, %8, %9) : !s32i, !cir.bool loc(#loc114)
        cir.if %10 {
        } else {
          %11 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 20>> loc(#loc114)
          %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc114)
          %13 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 39>> loc(#loc114)
          %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 39>>), !cir.ptr<!s8i> loc(#loc114)
          %15 = cir.const #cir.int<116> : !s32i loc(#loc114)
          %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc114)
          %17 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc114)
          %18 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc114)
          cir.call @__assert_fail(%12, %14, %16, %18) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) -> () extra(#fn_attr) loc(#loc114)
        } loc(#loc114)
      } loc(#loc114)
    } loc(#loc114)
    cir.return loc(#loc116)
  } loc(#loc172)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE617_Reachable_Assertion/CWE617_Reachable_Assertion__fgets_21.c":0:0)
#loc1 = loc("CWE617_Reachable_Assertion__fgets_21.c":28:1)
#loc2 = loc("CWE617_Reachable_Assertion__fgets_21.c":28:24)
#loc3 = loc("/usr/include/stdio.h":654:1)
#loc4 = loc("/usr/include/stdio.h":655:59)
#loc5 = loc("/usr/include/stdio.h":149:1)
#loc6 = loc("/usr/include/stdio.h":149:14)
#loc7 = loc("/usr/include/stdlib.h":105:1)
#loc8 = loc("/usr/include/stdlib.h":106:33)
#loc9 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc10 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc11 = loc("CWE617_Reachable_Assertion__fgets_21.c":44:27)
#loc12 = loc("CWE617_Reachable_Assertion__fgets_21.c":30:1)
#loc13 = loc("CWE617_Reachable_Assertion__fgets_21.c":49:1)
#loc16 = loc("CWE617_Reachable_Assertion__fgets_21.c":31:1)
#loc17 = loc("CWE617_Reachable_Assertion__fgets_21.c":32:5)
#loc18 = loc("CWE617_Reachable_Assertion__fgets_21.c":47:5)
#loc19 = loc("CWE617_Reachable_Assertion__fgets_21.c":32:8)
#loc20 = loc("CWE617_Reachable_Assertion__fgets_21.c":33:5)
#loc21 = loc("CWE617_Reachable_Assertion__fgets_21.c":34:9)
#loc22 = loc("CWE617_Reachable_Assertion__fgets_21.c":46:9)
#loc23 = loc("CWE617_Reachable_Assertion__fgets_21.c":35:13)
#loc24 = loc("CWE617_Reachable_Assertion__fgets_21.c":35:49)
#loc25 = loc("CWE617_Reachable_Assertion__fgets_21.c":37:13)
#loc26 = loc("CWE617_Reachable_Assertion__fgets_21.c":45:13)
#loc27 = loc("CWE617_Reachable_Assertion__fgets_21.c":37:23)
#loc28 = loc("CWE617_Reachable_Assertion__fgets_21.c":37:36)
#loc29 = loc("CWE617_Reachable_Assertion__fgets_21.c":37:53)
#loc30 = loc("CWE617_Reachable_Assertion__fgets_21.c":37:17)
#loc31 = loc("CWE617_Reachable_Assertion__fgets_21.c":37:63)
#loc32 = loc("CWE617_Reachable_Assertion__fgets_21.c":38:13)
#loc33 = loc("CWE617_Reachable_Assertion__fgets_21.c":41:13)
#loc34 = loc("CWE617_Reachable_Assertion__fgets_21.c":43:13)
#loc35 = loc("CWE617_Reachable_Assertion__fgets_21.c":40:29)
#loc36 = loc("CWE617_Reachable_Assertion__fgets_21.c":40:24)
#loc37 = loc("CWE617_Reachable_Assertion__fgets_21.c":40:17)
#loc38 = loc("CWE617_Reachable_Assertion__fgets_21.c":40:40)
#loc39 = loc("CWE617_Reachable_Assertion__fgets_21.c":44:17)
#loc40 = loc("CWE617_Reachable_Assertion__fgets_21.c":48:12)
#loc41 = loc("CWE617_Reachable_Assertion__fgets_21.c":48:5)
#loc42 = loc("/usr/include/assert.h":69:1)
#loc43 = loc("/usr/include/assert.h":71:43)
#loc44 = loc("CWE617_Reachable_Assertion__fgets_21.c":59:5)
#loc45 = loc("CWE617_Reachable_Assertion__fgets_21.c":51:1)
#loc46 = loc("CWE617_Reachable_Assertion__fgets_21.c":60:1)
#loc47 = loc("CWE617_Reachable_Assertion__fgets_21.c":53:5)
#loc48 = loc("CWE617_Reachable_Assertion__fgets_21.c":53:9)
#loc49 = loc("CWE617_Reachable_Assertion__fgets_21.c":55:13)
#loc50 = loc("CWE617_Reachable_Assertion__fgets_21.c":55:12)
#loc51 = loc("CWE617_Reachable_Assertion__fgets_21.c":55:5)
#loc52 = loc("CWE617_Reachable_Assertion__fgets_21.c":56:17)
#loc53 = loc("CWE617_Reachable_Assertion__fgets_21.c":56:5)
#loc54 = loc("CWE617_Reachable_Assertion__fgets_21.c":57:22)
#loc55 = loc("CWE617_Reachable_Assertion__fgets_21.c":57:12)
#loc56 = loc("CWE617_Reachable_Assertion__fgets_21.c":57:5)
#loc57 = loc("CWE617_Reachable_Assertion__fgets_21.c":57:26)
#loc58 = loc("CWE617_Reachable_Assertion__fgets_21.c":119:1)
#loc59 = loc("CWE617_Reachable_Assertion__fgets_21.c":123:1)
#loc60 = loc("CWE617_Reachable_Assertion__fgets_21.c":121:5)
#loc61 = loc("CWE617_Reachable_Assertion__fgets_21.c":121:14)
#loc62 = loc("CWE617_Reachable_Assertion__fgets_21.c":122:5)
#loc63 = loc("CWE617_Reachable_Assertion__fgets_21.c":122:14)
#loc64 = loc("CWE617_Reachable_Assertion__fgets_21.c":67:1)
#loc65 = loc("CWE617_Reachable_Assertion__fgets_21.c":67:29)
#loc66 = loc("CWE617_Reachable_Assertion__fgets_21.c":76:19)
#loc67 = loc("CWE617_Reachable_Assertion__fgets_21.c":71:1)
#loc68 = loc("CWE617_Reachable_Assertion__fgets_21.c":84:1)
#loc71 = loc("CWE617_Reachable_Assertion__fgets_21.c":72:1)
#loc72 = loc("CWE617_Reachable_Assertion__fgets_21.c":73:5)
#loc73 = loc("CWE617_Reachable_Assertion__fgets_21.c":82:5)
#loc74 = loc("CWE617_Reachable_Assertion__fgets_21.c":73:8)
#loc75 = loc("CWE617_Reachable_Assertion__fgets_21.c":74:5)
#loc76 = loc("CWE617_Reachable_Assertion__fgets_21.c":77:5)
#loc77 = loc("CWE617_Reachable_Assertion__fgets_21.c":79:5)
#loc78 = loc("CWE617_Reachable_Assertion__fgets_21.c":76:9)
#loc79 = loc("CWE617_Reachable_Assertion__fgets_21.c":81:16)
#loc80 = loc("CWE617_Reachable_Assertion__fgets_21.c":81:29)
#loc81 = loc("CWE617_Reachable_Assertion__fgets_21.c":81:9)
#loc82 = loc("CWE617_Reachable_Assertion__fgets_21.c":83:12)
#loc83 = loc("CWE617_Reachable_Assertion__fgets_21.c":83:5)
#loc84 = loc("CWE617_Reachable_Assertion__fgets_21.c":94:5)
#loc85 = loc("CWE617_Reachable_Assertion__fgets_21.c":86:1)
#loc86 = loc("CWE617_Reachable_Assertion__fgets_21.c":95:1)
#loc87 = loc("CWE617_Reachable_Assertion__fgets_21.c":88:5)
#loc88 = loc("CWE617_Reachable_Assertion__fgets_21.c":88:9)
#loc89 = loc("CWE617_Reachable_Assertion__fgets_21.c":90:13)
#loc90 = loc("CWE617_Reachable_Assertion__fgets_21.c":90:12)
#loc91 = loc("CWE617_Reachable_Assertion__fgets_21.c":90:5)
#loc92 = loc("CWE617_Reachable_Assertion__fgets_21.c":91:22)
#loc93 = loc("CWE617_Reachable_Assertion__fgets_21.c":91:5)
#loc94 = loc("CWE617_Reachable_Assertion__fgets_21.c":92:27)
#loc95 = loc("CWE617_Reachable_Assertion__fgets_21.c":92:12)
#loc96 = loc("CWE617_Reachable_Assertion__fgets_21.c":92:5)
#loc97 = loc("CWE617_Reachable_Assertion__fgets_21.c":92:31)
#loc98 = loc("CWE617_Reachable_Assertion__fgets_21.c":68:1)
#loc99 = loc("CWE617_Reachable_Assertion__fgets_21.c":68:29)
#loc100 = loc("CWE617_Reachable_Assertion__fgets_21.c":98:1)
#loc101 = loc("CWE617_Reachable_Assertion__fgets_21.c":106:1)
#loc104 = loc("CWE617_Reachable_Assertion__fgets_21.c":99:1)
#loc105 = loc("CWE617_Reachable_Assertion__fgets_21.c":100:5)
#loc106 = loc("CWE617_Reachable_Assertion__fgets_21.c":104:5)
#loc107 = loc("CWE617_Reachable_Assertion__fgets_21.c":100:8)
#loc108 = loc("CWE617_Reachable_Assertion__fgets_21.c":101:5)
#loc109 = loc("CWE617_Reachable_Assertion__fgets_21.c":103:16)
#loc110 = loc("CWE617_Reachable_Assertion__fgets_21.c":103:29)
#loc111 = loc("CWE617_Reachable_Assertion__fgets_21.c":103:9)
#loc112 = loc("CWE617_Reachable_Assertion__fgets_21.c":105:12)
#loc113 = loc("CWE617_Reachable_Assertion__fgets_21.c":105:5)
#loc114 = loc("CWE617_Reachable_Assertion__fgets_21.c":116:5)
#loc115 = loc("CWE617_Reachable_Assertion__fgets_21.c":108:1)
#loc116 = loc("CWE617_Reachable_Assertion__fgets_21.c":117:1)
#loc117 = loc("CWE617_Reachable_Assertion__fgets_21.c":110:5)
#loc118 = loc("CWE617_Reachable_Assertion__fgets_21.c":110:9)
#loc119 = loc("CWE617_Reachable_Assertion__fgets_21.c":112:13)
#loc120 = loc("CWE617_Reachable_Assertion__fgets_21.c":112:12)
#loc121 = loc("CWE617_Reachable_Assertion__fgets_21.c":112:5)
#loc122 = loc("CWE617_Reachable_Assertion__fgets_21.c":113:22)
#loc123 = loc("CWE617_Reachable_Assertion__fgets_21.c":113:5)
#loc124 = loc("CWE617_Reachable_Assertion__fgets_21.c":114:27)
#loc125 = loc("CWE617_Reachable_Assertion__fgets_21.c":114:12)
#loc126 = loc("CWE617_Reachable_Assertion__fgets_21.c":114:5)
#loc127 = loc("CWE617_Reachable_Assertion__fgets_21.c":114:31)
#loc128 = loc(fused[#loc1, #loc2])
#loc129 = loc(fused[#loc3, #loc4])
#loc130 = loc(fused[#loc5, #loc6])
#loc131 = loc(fused[#loc7, #loc8])
#loc132 = loc(fused[#loc9, #loc10])
#loc133 = loc(fused[#loc12, #loc13])
#loc135 = loc(fused[#loc17, #loc18])
#loc136 = loc(fused[#loc20, #loc18])
#loc137 = loc(fused[#loc21, #loc22])
#loc138 = loc(fused[#loc23, #loc24])
#loc139 = loc(fused[#loc25, #loc26])
#loc140 = loc(fused[#loc30, #loc31])
#loc141 = loc(fused[#loc32, #loc33, #loc34, #loc26])
#loc142 = loc(fused[#loc37, #loc38])
#loc143 = loc(fused[#loc41, #loc40])
#loc144 = loc(fused[#loc42, #loc43])
#loc145 = loc(fused[#loc45, #loc46])
#loc146 = loc(fused[#loc47, #loc48])
#loc147 = loc(fused[#loc51, #loc49])
#loc148 = loc(fused[#loc53, #loc52])
#loc149 = loc(fused[#loc56, #loc57])
#loc150 = loc(fused[#loc58, #loc59])
#loc151 = loc(fused[#loc60, #loc61])
#loc152 = loc(fused[#loc62, #loc63])
#loc153 = loc(fused[#loc64, #loc65])
#loc154 = loc(fused[#loc67, #loc68])
#loc156 = loc(fused[#loc72, #loc73])
#loc157 = loc(fused[#loc75, #loc76, #loc77, #loc73])
#loc158 = loc(fused[#loc81, #loc80])
#loc159 = loc(fused[#loc83, #loc82])
#loc160 = loc(fused[#loc85, #loc86])
#loc161 = loc(fused[#loc87, #loc88])
#loc162 = loc(fused[#loc91, #loc89])
#loc163 = loc(fused[#loc93, #loc92])
#loc164 = loc(fused[#loc96, #loc97])
#loc165 = loc(fused[#loc98, #loc99])
#loc166 = loc(fused[#loc100, #loc101])
#loc168 = loc(fused[#loc105, #loc106])
#loc169 = loc(fused[#loc108, #loc106])
#loc170 = loc(fused[#loc111, #loc110])
#loc171 = loc(fused[#loc113, #loc112])
#loc172 = loc(fused[#loc115, #loc116])
#loc173 = loc(fused[#loc117, #loc118])
#loc174 = loc(fused[#loc121, #loc119])
#loc175 = loc(fused[#loc123, #loc122])
#loc176 = loc(fused[#loc126, #loc127])
