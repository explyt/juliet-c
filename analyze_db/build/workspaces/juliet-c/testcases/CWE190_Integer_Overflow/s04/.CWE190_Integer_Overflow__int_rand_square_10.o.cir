!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#true = #cir.bool<true> : !cir.bool
module @"/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__int_rand_square_10.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64>} {
  cir.global "private" external @globalTrue : !s32i {alignment = 4 : i64} loc(#loc171)
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc172)
  cir.func private @printIntLine(!s32i) loc(#loc173)
  cir.func no_proto @CWE190_Integer_Overflow__int_rand_square_10_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc175)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc11)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc176)
    cir.scope {
      %2 = cir.get_global @globalTrue : !cir.ptr<!s32i> loc(#loc171)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc15)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc15)
      cir.if %4 {
        %5 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
        %6 = cir.const #cir.int<1> : !s32i loc(#loc17)
        %7 = cir.binop(and, %5, %6) : !s32i loc(#loc17)
        %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc17)
        %9 = cir.ternary(%8, true {
          %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
          %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc17)
          %13 = cir.const #cir.int<30> : !s32i loc(#loc17)
          %14 = cir.shift(left, %12 : !u32i, %13 : !s32i) -> !u32i loc(#loc17)
          %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
          %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc17)
          %17 = cir.const #cir.int<15> : !s32i loc(#loc17)
          %18 = cir.shift(left, %16 : !u32i, %17 : !s32i) -> !u32i loc(#loc17)
          %19 = cir.binop(xor, %14, %18) : !u32i loc(#loc17)
          %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
          %21 = cir.cast(integral, %20 : !s32i), !u32i loc(#loc17)
          %22 = cir.binop(xor, %19, %21) : !u32i loc(#loc17)
          cir.yield %22 : !u32i loc(#loc17)
        }, false {
          %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
          %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc17)
          %13 = cir.const #cir.int<30> : !s32i loc(#loc17)
          %14 = cir.shift(left, %12 : !u32i, %13 : !s32i) -> !u32i loc(#loc17)
          %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
          %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc17)
          %17 = cir.const #cir.int<15> : !s32i loc(#loc17)
          %18 = cir.shift(left, %16 : !u32i, %17 : !s32i) -> !u32i loc(#loc17)
          %19 = cir.binop(xor, %14, %18) : !u32i loc(#loc17)
          %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
          %21 = cir.cast(integral, %20 : !s32i), !u32i loc(#loc17)
          %22 = cir.binop(xor, %19, %21) : !u32i loc(#loc17)
          %23 = cir.unary(minus, %22) : !u32i, !u32i loc(#loc17)
          %24 = cir.const #cir.int<1> : !s32i loc(#loc17)
          %25 = cir.cast(integral, %24 : !s32i), !u32i loc(#loc17)
          %26 = cir.binop(sub, %23, %25) : !u32i loc(#loc17)
          cir.yield %26 : !u32i loc(#loc17)
        }) : (!cir.bool) -> !u32i loc(#loc17)
        %10 = cir.cast(integral, %9 : !u32i), !s32i loc(#loc17)
        cir.store %10, %0 : !s32i, !cir.ptr<!s32i> loc(#loc179)
      } loc(#loc178)
    } loc(#loc177)
    cir.scope {
      %2 = cir.get_global @globalTrue : !cir.ptr<!s32i> loc(#loc171)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc21)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc21)
      cir.if %4 {
        cir.scope {
          %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc183)
          %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc27)
          %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc26)
          %8 = cir.binop(mul, %6, %7) nsw : !s32i loc(#loc27)
          cir.store %8, %5 : !s32i, !cir.ptr<!s32i> loc(#loc183)
          %9 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc28)
          cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc29)
        } loc(#loc182)
      } loc(#loc181)
    } loc(#loc180)
    cir.return loc(#loc8)
  } loc(#loc174)
  cir.func no_proto @CWE190_Integer_Overflow__int_rand_square_10_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<()>> loc(#loc185)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc32)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<()>> loc(#loc186)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc34)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<()>> loc(#loc187)
    cir.call %2() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc36)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<()>> loc(#loc188)
    cir.call %3() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc38)
    cir.return loc(#loc31)
  } loc(#loc184)
  cir.global "private" external @globalFalse : !s32i {alignment = 4 : i64} loc(#loc189)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc190)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc44)
  cir.func private @sqrt(!cir.double) -> !cir.double extra(#fn_attr) loc(#loc45)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc46)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc192)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc51)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc193)
    cir.scope {
      %2 = cir.get_global @globalTrue : !cir.ptr<!s32i> loc(#loc171)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc55)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc55)
      cir.if %4 {
        %5 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc57)
        %6 = cir.const #cir.int<1> : !s32i loc(#loc57)
        %7 = cir.binop(and, %5, %6) : !s32i loc(#loc57)
        %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc57)
        %9 = cir.ternary(%8, true {
          %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc57)
          %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc57)
          %13 = cir.const #cir.int<30> : !s32i loc(#loc57)
          %14 = cir.shift(left, %12 : !u32i, %13 : !s32i) -> !u32i loc(#loc57)
          %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc57)
          %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc57)
          %17 = cir.const #cir.int<15> : !s32i loc(#loc57)
          %18 = cir.shift(left, %16 : !u32i, %17 : !s32i) -> !u32i loc(#loc57)
          %19 = cir.binop(xor, %14, %18) : !u32i loc(#loc57)
          %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc57)
          %21 = cir.cast(integral, %20 : !s32i), !u32i loc(#loc57)
          %22 = cir.binop(xor, %19, %21) : !u32i loc(#loc57)
          cir.yield %22 : !u32i loc(#loc57)
        }, false {
          %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc57)
          %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc57)
          %13 = cir.const #cir.int<30> : !s32i loc(#loc57)
          %14 = cir.shift(left, %12 : !u32i, %13 : !s32i) -> !u32i loc(#loc57)
          %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc57)
          %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc57)
          %17 = cir.const #cir.int<15> : !s32i loc(#loc57)
          %18 = cir.shift(left, %16 : !u32i, %17 : !s32i) -> !u32i loc(#loc57)
          %19 = cir.binop(xor, %14, %18) : !u32i loc(#loc57)
          %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc57)
          %21 = cir.cast(integral, %20 : !s32i), !u32i loc(#loc57)
          %22 = cir.binop(xor, %19, %21) : !u32i loc(#loc57)
          %23 = cir.unary(minus, %22) : !u32i, !u32i loc(#loc57)
          %24 = cir.const #cir.int<1> : !s32i loc(#loc57)
          %25 = cir.cast(integral, %24 : !s32i), !u32i loc(#loc57)
          %26 = cir.binop(sub, %23, %25) : !u32i loc(#loc57)
          cir.yield %26 : !u32i loc(#loc57)
        }) : (!cir.bool) -> !u32i loc(#loc57)
        %10 = cir.cast(integral, %9 : !u32i), !s32i loc(#loc57)
        cir.store %10, %0 : !s32i, !cir.ptr<!s32i> loc(#loc196)
      } loc(#loc195)
    } loc(#loc194)
    cir.scope {
      %2 = cir.get_global @globalFalse : !cir.ptr<!s32i> loc(#loc189)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc61)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc61)
      cir.if %4 {
        %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc44)
        %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc44)
        cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc65)
      } else {
        cir.scope {
          %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc68)
          %6 = cir.const #cir.int<2147483647> : !s32i loc(#loc69)
          %7 = cir.unary(minus, %6) nsw : !s32i, !s32i loc(#loc69)
          %8 = cir.const #cir.int<1> : !s32i loc(#loc69)
          %9 = cir.binop(sub, %7, %8) nsw : !s32i loc(#loc69)
          %10 = cir.cmp(gt, %5, %9) : !s32i, !cir.bool loc(#loc200)
          %11 = cir.ternary(%10, true {
            %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc71)
            %13 = cir.abs %12 poison : !s32i loc(#loc72)
            %14 = cir.cast(integral, %13 : !s32i), !s64i loc(#loc72)
            %15 = cir.get_global @sqrt : !cir.ptr<!cir.func<(!cir.double) -> !cir.double>> loc(#loc73)
            %16 = cir.const #cir.int<2147483647> : !s32i loc(#loc74)
            %17 = cir.cast(int_to_float, %16 : !s32i), !cir.double loc(#loc74)
            %18 = cir.call @sqrt(%17) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc73)
            %19 = cir.cast(float_to_int, %18 : !cir.double), !s64i loc(#loc73)
            %20 = cir.cmp(lt, %14, %19) : !s64i, !cir.bool loc(#loc201)
            %21 = cir.ternary(%20, true {
              %22 = cir.const #true loc(#loc70)
              cir.yield %22 : !cir.bool loc(#loc70)
            }, false {
              %22 = cir.const #false loc(#loc70)
              cir.yield %22 : !cir.bool loc(#loc70)
            }) : (!cir.bool) -> !cir.bool loc(#loc70)
            cir.yield %21 : !cir.bool loc(#loc70)
          }, false {
            %12 = cir.const #false loc(#loc70)
            cir.yield %12 : !cir.bool loc(#loc70)
          }) : (!cir.bool) -> !cir.bool loc(#loc70)
          cir.if %11 {
            %12 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc203)
            %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc81)
            %14 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc80)
            %15 = cir.binop(mul, %13, %14) nsw : !s32i loc(#loc81)
            cir.store %15, %12 : !s32i, !cir.ptr<!s32i> loc(#loc203)
            %16 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc82)
            cir.call @printIntLine(%16) : (!s32i) -> () loc(#loc83)
          } else {
            %12 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc46)
            %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc46)
            cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc84)
          } loc(#loc202)
        } loc(#loc199)
      } loc(#loc198)
    } loc(#loc197)
    cir.return loc(#loc48)
  } loc(#loc191)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc205)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc89)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc206)
    cir.scope {
      %2 = cir.get_global @globalTrue : !cir.ptr<!s32i> loc(#loc171)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc93)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc93)
      cir.if %4 {
        %5 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc95)
        %6 = cir.const #cir.int<1> : !s32i loc(#loc95)
        %7 = cir.binop(and, %5, %6) : !s32i loc(#loc95)
        %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc95)
        %9 = cir.ternary(%8, true {
          %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc95)
          %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc95)
          %13 = cir.const #cir.int<30> : !s32i loc(#loc95)
          %14 = cir.shift(left, %12 : !u32i, %13 : !s32i) -> !u32i loc(#loc95)
          %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc95)
          %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc95)
          %17 = cir.const #cir.int<15> : !s32i loc(#loc95)
          %18 = cir.shift(left, %16 : !u32i, %17 : !s32i) -> !u32i loc(#loc95)
          %19 = cir.binop(xor, %14, %18) : !u32i loc(#loc95)
          %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc95)
          %21 = cir.cast(integral, %20 : !s32i), !u32i loc(#loc95)
          %22 = cir.binop(xor, %19, %21) : !u32i loc(#loc95)
          cir.yield %22 : !u32i loc(#loc95)
        }, false {
          %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc95)
          %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc95)
          %13 = cir.const #cir.int<30> : !s32i loc(#loc95)
          %14 = cir.shift(left, %12 : !u32i, %13 : !s32i) -> !u32i loc(#loc95)
          %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc95)
          %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc95)
          %17 = cir.const #cir.int<15> : !s32i loc(#loc95)
          %18 = cir.shift(left, %16 : !u32i, %17 : !s32i) -> !u32i loc(#loc95)
          %19 = cir.binop(xor, %14, %18) : !u32i loc(#loc95)
          %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc95)
          %21 = cir.cast(integral, %20 : !s32i), !u32i loc(#loc95)
          %22 = cir.binop(xor, %19, %21) : !u32i loc(#loc95)
          %23 = cir.unary(minus, %22) : !u32i, !u32i loc(#loc95)
          %24 = cir.const #cir.int<1> : !s32i loc(#loc95)
          %25 = cir.cast(integral, %24 : !s32i), !u32i loc(#loc95)
          %26 = cir.binop(sub, %23, %25) : !u32i loc(#loc95)
          cir.yield %26 : !u32i loc(#loc95)
        }) : (!cir.bool) -> !u32i loc(#loc95)
        %10 = cir.cast(integral, %9 : !u32i), !s32i loc(#loc95)
        cir.store %10, %0 : !s32i, !cir.ptr<!s32i> loc(#loc209)
      } loc(#loc208)
    } loc(#loc207)
    cir.scope {
      %2 = cir.get_global @globalTrue : !cir.ptr<!s32i> loc(#loc171)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc99)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc99)
      cir.if %4 {
        cir.scope {
          %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc103)
          %6 = cir.const #cir.int<2147483647> : !s32i loc(#loc104)
          %7 = cir.unary(minus, %6) nsw : !s32i, !s32i loc(#loc104)
          %8 = cir.const #cir.int<1> : !s32i loc(#loc104)
          %9 = cir.binop(sub, %7, %8) nsw : !s32i loc(#loc104)
          %10 = cir.cmp(gt, %5, %9) : !s32i, !cir.bool loc(#loc213)
          %11 = cir.ternary(%10, true {
            %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc106)
            %13 = cir.abs %12 poison : !s32i loc(#loc107)
            %14 = cir.cast(integral, %13 : !s32i), !s64i loc(#loc107)
            %15 = cir.get_global @sqrt : !cir.ptr<!cir.func<(!cir.double) -> !cir.double>> loc(#loc108)
            %16 = cir.const #cir.int<2147483647> : !s32i loc(#loc109)
            %17 = cir.cast(int_to_float, %16 : !s32i), !cir.double loc(#loc109)
            %18 = cir.call @sqrt(%17) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc108)
            %19 = cir.cast(float_to_int, %18 : !cir.double), !s64i loc(#loc108)
            %20 = cir.cmp(lt, %14, %19) : !s64i, !cir.bool loc(#loc214)
            %21 = cir.ternary(%20, true {
              %22 = cir.const #true loc(#loc105)
              cir.yield %22 : !cir.bool loc(#loc105)
            }, false {
              %22 = cir.const #false loc(#loc105)
              cir.yield %22 : !cir.bool loc(#loc105)
            }) : (!cir.bool) -> !cir.bool loc(#loc105)
            cir.yield %21 : !cir.bool loc(#loc105)
          }, false {
            %12 = cir.const #false loc(#loc105)
            cir.yield %12 : !cir.bool loc(#loc105)
          }) : (!cir.bool) -> !cir.bool loc(#loc105)
          cir.if %11 {
            %12 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc216)
            %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc116)
            %14 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc115)
            %15 = cir.binop(mul, %13, %14) nsw : !s32i loc(#loc116)
            cir.store %15, %12 : !s32i, !cir.ptr<!s32i> loc(#loc216)
            %16 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc117)
            cir.call @printIntLine(%16) : (!s32i) -> () loc(#loc118)
          } else {
            %12 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc119)
            %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc119)
            cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc120)
          } loc(#loc215)
        } loc(#loc212)
      } loc(#loc211)
    } loc(#loc210)
    cir.return loc(#loc86)
  } loc(#loc204)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc218)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc125)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc219)
    cir.scope {
      %2 = cir.get_global @globalFalse : !cir.ptr<!s32i> loc(#loc189)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc129)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc129)
      cir.if %4 {
        %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc133)
        %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc133)
        cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc134)
      } else {
        %5 = cir.const #cir.int<2> : !s32i loc(#loc135)
        cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc222)
      } loc(#loc221)
    } loc(#loc220)
    cir.scope {
      %2 = cir.get_global @globalTrue : !cir.ptr<!s32i> loc(#loc171)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc139)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc139)
      cir.if %4 {
        cir.scope {
          %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc226)
          %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc145)
          %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc144)
          %8 = cir.binop(mul, %6, %7) nsw : !s32i loc(#loc145)
          cir.store %8, %5 : !s32i, !cir.ptr<!s32i> loc(#loc226)
          %9 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc146)
          cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc147)
        } loc(#loc225)
      } loc(#loc224)
    } loc(#loc223)
    cir.return loc(#loc122)
  } loc(#loc217)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc228)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc152)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc229)
    cir.scope {
      %2 = cir.get_global @globalTrue : !cir.ptr<!s32i> loc(#loc171)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc156)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc156)
      cir.if %4 {
        %5 = cir.const #cir.int<2> : !s32i loc(#loc158)
        cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc232)
      } loc(#loc231)
    } loc(#loc230)
    cir.scope {
      %2 = cir.get_global @globalTrue : !cir.ptr<!s32i> loc(#loc171)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc162)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc162)
      cir.if %4 {
        cir.scope {
          %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc236)
          %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc168)
          %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc167)
          %8 = cir.binop(mul, %6, %7) nsw : !s32i loc(#loc168)
          cir.store %8, %5 : !s32i, !cir.ptr<!s32i> loc(#loc236)
          %9 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc169)
          cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc170)
        } loc(#loc235)
      } loc(#loc234)
    } loc(#loc233)
    cir.return loc(#loc149)
  } loc(#loc227)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__int_rand_square_10.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase.h":116:1)
#loc2 = loc("../../../testcasesupport/std_testcase.h":116:12)
#loc3 = loc("/usr/include/stdlib.h":573:1)
#loc4 = loc("/usr/include/stdlib.h":573:24)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc7 = loc("CWE190_Integer_Overflow__int_rand_square_10.c":24:1)
#loc8 = loc("CWE190_Integer_Overflow__int_rand_square_10.c":42:1)
#loc9 = loc("CWE190_Integer_Overflow__int_rand_square_10.c":26:5)
#loc10 = loc("CWE190_Integer_Overflow__int_rand_square_10.c":26:9)
#loc11 = loc("CWE190_Integer_Overflow__int_rand_square_10.c":28:12)
#loc12 = loc("CWE190_Integer_Overflow__int_rand_square_10.c":28:5)
#loc13 = loc("CWE190_Integer_Overflow__int_rand_square_10.c":29:5)
#loc14 = loc("CWE190_Integer_Overflow__int_rand_square_10.c":33:5)
#loc15 = loc("CWE190_Integer_Overflow__int_rand_square_10.c":29:8)
#loc16 = loc("CWE190_Integer_Overflow__int_rand_square_10.c":30:5)
#loc17 = loc("CWE190_Integer_Overflow__int_rand_square_10.c":32:16)
#loc18 = loc("CWE190_Integer_Overflow__int_rand_square_10.c":32:9)
#loc19 = loc("CWE190_Integer_Overflow__int_rand_square_10.c":34:5)
#loc20 = loc("CWE190_Integer_Overflow__int_rand_square_10.c":41:5)
#loc21 = loc("CWE190_Integer_Overflow__int_rand_square_10.c":34:8)
#loc22 = loc("CWE190_Integer_Overflow__int_rand_square_10.c":35:5)
#loc23 = loc("CWE190_Integer_Overflow__int_rand_square_10.c":36:9)
#loc24 = loc("CWE190_Integer_Overflow__int_rand_square_10.c":40:9)
#loc25 = loc("CWE190_Integer_Overflow__int_rand_square_10.c":38:13)
#loc26 = loc("CWE190_Integer_Overflow__int_rand_square_10.c":38:33)
#loc27 = loc("CWE190_Integer_Overflow__int_rand_square_10.c":38:26)
#loc28 = loc("CWE190_Integer_Overflow__int_rand_square_10.c":39:26)
#loc29 = loc("CWE190_Integer_Overflow__int_rand_square_10.c":39:13)
#loc30 = loc("CWE190_Integer_Overflow__int_rand_square_10.c":152:1)
#loc31 = loc("CWE190_Integer_Overflow__int_rand_square_10.c":158:1)
#loc32 = loc("CWE190_Integer_Overflow__int_rand_square_10.c":154:5)
#loc33 = loc("CWE190_Integer_Overflow__int_rand_square_10.c":154:14)
#loc34 = loc("CWE190_Integer_Overflow__int_rand_square_10.c":155:5)
#loc35 = loc("CWE190_Integer_Overflow__int_rand_square_10.c":155:14)
#loc36 = loc("CWE190_Integer_Overflow__int_rand_square_10.c":156:5)
#loc37 = loc("CWE190_Integer_Overflow__int_rand_square_10.c":156:14)
#loc38 = loc("CWE190_Integer_Overflow__int_rand_square_10.c":157:5)
#loc39 = loc("CWE190_Integer_Overflow__int_rand_square_10.c":157:14)
#loc40 = loc("../../../testcasesupport/std_testcase.h":117:1)
#loc41 = loc("../../../testcasesupport/std_testcase.h":117:12)
#loc42 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc43 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc44 = loc("CWE190_Integer_Overflow__int_rand_square_10.c":62:19)
#loc45 = loc("/usr/include/x86_64-linux-gnu/bits/mathcalls.h":143:1)
#loc46 = loc("CWE190_Integer_Overflow__int_rand_square_10.c":74:23)
#loc47 = loc("CWE190_Integer_Overflow__int_rand_square_10.c":49:1)
#loc48 = loc("CWE190_Integer_Overflow__int_rand_square_10.c":77:1)
#loc49 = loc("CWE190_Integer_Overflow__int_rand_square_10.c":51:5)
#loc50 = loc("CWE190_Integer_Overflow__int_rand_square_10.c":51:9)
#loc51 = loc("CWE190_Integer_Overflow__int_rand_square_10.c":53:12)
#loc52 = loc("CWE190_Integer_Overflow__int_rand_square_10.c":53:5)
#loc53 = loc("CWE190_Integer_Overflow__int_rand_square_10.c":54:5)
#loc54 = loc("CWE190_Integer_Overflow__int_rand_square_10.c":58:5)
#loc55 = loc("CWE190_Integer_Overflow__int_rand_square_10.c":54:8)
#loc56 = loc("CWE190_Integer_Overflow__int_rand_square_10.c":55:5)
#loc57 = loc("CWE190_Integer_Overflow__int_rand_square_10.c":57:16)
#loc58 = loc("CWE190_Integer_Overflow__int_rand_square_10.c":57:9)
#loc59 = loc("CWE190_Integer_Overflow__int_rand_square_10.c":59:5)
#loc60 = loc("CWE190_Integer_Overflow__int_rand_square_10.c":76:5)
#loc61 = loc("CWE190_Integer_Overflow__int_rand_square_10.c":59:8)
#loc62 = loc("CWE190_Integer_Overflow__int_rand_square_10.c":60:5)
#loc63 = loc("CWE190_Integer_Overflow__int_rand_square_10.c":63:5)
#loc64 = loc("CWE190_Integer_Overflow__int_rand_square_10.c":65:5)
#loc65 = loc("CWE190_Integer_Overflow__int_rand_square_10.c":62:9)
#loc66 = loc("CWE190_Integer_Overflow__int_rand_square_10.c":67:9)
#loc67 = loc("CWE190_Integer_Overflow__int_rand_square_10.c":75:9)
#loc68 = loc("CWE190_Integer_Overflow__int_rand_square_10.c":67:13)
#loc69 = loc("CWE190_Integer_Overflow__int_rand_square_10.c":67:20)
#loc70 = loc("CWE190_Integer_Overflow__int_rand_square_10.c":67:28)
#loc71 = loc("CWE190_Integer_Overflow__int_rand_square_10.c":67:35)
#loc72 = loc("CWE190_Integer_Overflow__int_rand_square_10.c":67:31)
#loc73 = loc("CWE190_Integer_Overflow__int_rand_square_10.c":67:49)
#loc74 = loc("CWE190_Integer_Overflow__int_rand_square_10.c":67:62)
#loc75 = loc("CWE190_Integer_Overflow__int_rand_square_10.c":67:69)
#loc76 = loc("CWE190_Integer_Overflow__int_rand_square_10.c":68:9)
#loc77 = loc("CWE190_Integer_Overflow__int_rand_square_10.c":71:9)
#loc78 = loc("CWE190_Integer_Overflow__int_rand_square_10.c":73:9)
#loc79 = loc("CWE190_Integer_Overflow__int_rand_square_10.c":69:13)
#loc80 = loc("CWE190_Integer_Overflow__int_rand_square_10.c":69:33)
#loc81 = loc("CWE190_Integer_Overflow__int_rand_square_10.c":69:26)
#loc82 = loc("CWE190_Integer_Overflow__int_rand_square_10.c":70:26)
#loc83 = loc("CWE190_Integer_Overflow__int_rand_square_10.c":70:13)
#loc84 = loc("CWE190_Integer_Overflow__int_rand_square_10.c":74:13)
#loc85 = loc("CWE190_Integer_Overflow__int_rand_square_10.c":80:1)
#loc86 = loc("CWE190_Integer_Overflow__int_rand_square_10.c":103:1)
#loc87 = loc("CWE190_Integer_Overflow__int_rand_square_10.c":82:5)
#loc88 = loc("CWE190_Integer_Overflow__int_rand_square_10.c":82:9)
#loc89 = loc("CWE190_Integer_Overflow__int_rand_square_10.c":84:12)
#loc90 = loc("CWE190_Integer_Overflow__int_rand_square_10.c":84:5)
#loc91 = loc("CWE190_Integer_Overflow__int_rand_square_10.c":85:5)
#loc92 = loc("CWE190_Integer_Overflow__int_rand_square_10.c":89:5)
#loc93 = loc("CWE190_Integer_Overflow__int_rand_square_10.c":85:8)
#loc94 = loc("CWE190_Integer_Overflow__int_rand_square_10.c":86:5)
#loc95 = loc("CWE190_Integer_Overflow__int_rand_square_10.c":88:16)
#loc96 = loc("CWE190_Integer_Overflow__int_rand_square_10.c":88:9)
#loc97 = loc("CWE190_Integer_Overflow__int_rand_square_10.c":90:5)
#loc98 = loc("CWE190_Integer_Overflow__int_rand_square_10.c":102:5)
#loc99 = loc("CWE190_Integer_Overflow__int_rand_square_10.c":90:8)
#loc100 = loc("CWE190_Integer_Overflow__int_rand_square_10.c":91:5)
#loc101 = loc("CWE190_Integer_Overflow__int_rand_square_10.c":93:9)
#loc102 = loc("CWE190_Integer_Overflow__int_rand_square_10.c":101:9)
#loc103 = loc("CWE190_Integer_Overflow__int_rand_square_10.c":93:13)
#loc104 = loc("CWE190_Integer_Overflow__int_rand_square_10.c":93:20)
#loc105 = loc("CWE190_Integer_Overflow__int_rand_square_10.c":93:28)
#loc106 = loc("CWE190_Integer_Overflow__int_rand_square_10.c":93:35)
#loc107 = loc("CWE190_Integer_Overflow__int_rand_square_10.c":93:31)
#loc108 = loc("CWE190_Integer_Overflow__int_rand_square_10.c":93:49)
#loc109 = loc("CWE190_Integer_Overflow__int_rand_square_10.c":93:62)
#loc110 = loc("CWE190_Integer_Overflow__int_rand_square_10.c":93:69)
#loc111 = loc("CWE190_Integer_Overflow__int_rand_square_10.c":94:9)
#loc112 = loc("CWE190_Integer_Overflow__int_rand_square_10.c":97:9)
#loc113 = loc("CWE190_Integer_Overflow__int_rand_square_10.c":99:9)
#loc114 = loc("CWE190_Integer_Overflow__int_rand_square_10.c":95:13)
#loc115 = loc("CWE190_Integer_Overflow__int_rand_square_10.c":95:33)
#loc116 = loc("CWE190_Integer_Overflow__int_rand_square_10.c":95:26)
#loc117 = loc("CWE190_Integer_Overflow__int_rand_square_10.c":96:26)
#loc118 = loc("CWE190_Integer_Overflow__int_rand_square_10.c":96:13)
#loc119 = loc("CWE190_Integer_Overflow__int_rand_square_10.c":100:23)
#loc120 = loc("CWE190_Integer_Overflow__int_rand_square_10.c":100:13)
#loc121 = loc("CWE190_Integer_Overflow__int_rand_square_10.c":106:1)
#loc122 = loc("CWE190_Integer_Overflow__int_rand_square_10.c":129:1)
#loc123 = loc("CWE190_Integer_Overflow__int_rand_square_10.c":108:5)
#loc124 = loc("CWE190_Integer_Overflow__int_rand_square_10.c":108:9)
#loc125 = loc("CWE190_Integer_Overflow__int_rand_square_10.c":110:12)
#loc126 = loc("CWE190_Integer_Overflow__int_rand_square_10.c":110:5)
#loc127 = loc("CWE190_Integer_Overflow__int_rand_square_10.c":111:5)
#loc128 = loc("CWE190_Integer_Overflow__int_rand_square_10.c":120:5)
#loc129 = loc("CWE190_Integer_Overflow__int_rand_square_10.c":111:8)
#loc130 = loc("CWE190_Integer_Overflow__int_rand_square_10.c":112:5)
#loc131 = loc("CWE190_Integer_Overflow__int_rand_square_10.c":115:5)
#loc132 = loc("CWE190_Integer_Overflow__int_rand_square_10.c":117:5)
#loc133 = loc("CWE190_Integer_Overflow__int_rand_square_10.c":114:19)
#loc134 = loc("CWE190_Integer_Overflow__int_rand_square_10.c":114:9)
#loc135 = loc("CWE190_Integer_Overflow__int_rand_square_10.c":119:16)
#loc136 = loc("CWE190_Integer_Overflow__int_rand_square_10.c":119:9)
#loc137 = loc("CWE190_Integer_Overflow__int_rand_square_10.c":121:5)
#loc138 = loc("CWE190_Integer_Overflow__int_rand_square_10.c":128:5)
#loc139 = loc("CWE190_Integer_Overflow__int_rand_square_10.c":121:8)
#loc140 = loc("CWE190_Integer_Overflow__int_rand_square_10.c":122:5)
#loc141 = loc("CWE190_Integer_Overflow__int_rand_square_10.c":123:9)
#loc142 = loc("CWE190_Integer_Overflow__int_rand_square_10.c":127:9)
#loc143 = loc("CWE190_Integer_Overflow__int_rand_square_10.c":125:13)
#loc144 = loc("CWE190_Integer_Overflow__int_rand_square_10.c":125:33)
#loc145 = loc("CWE190_Integer_Overflow__int_rand_square_10.c":125:26)
#loc146 = loc("CWE190_Integer_Overflow__int_rand_square_10.c":126:26)
#loc147 = loc("CWE190_Integer_Overflow__int_rand_square_10.c":126:13)
#loc148 = loc("CWE190_Integer_Overflow__int_rand_square_10.c":132:1)
#loc149 = loc("CWE190_Integer_Overflow__int_rand_square_10.c":150:1)
#loc150 = loc("CWE190_Integer_Overflow__int_rand_square_10.c":134:5)
#loc151 = loc("CWE190_Integer_Overflow__int_rand_square_10.c":134:9)
#loc152 = loc("CWE190_Integer_Overflow__int_rand_square_10.c":136:12)
#loc153 = loc("CWE190_Integer_Overflow__int_rand_square_10.c":136:5)
#loc154 = loc("CWE190_Integer_Overflow__int_rand_square_10.c":137:5)
#loc155 = loc("CWE190_Integer_Overflow__int_rand_square_10.c":141:5)
#loc156 = loc("CWE190_Integer_Overflow__int_rand_square_10.c":137:8)
#loc157 = loc("CWE190_Integer_Overflow__int_rand_square_10.c":138:5)
#loc158 = loc("CWE190_Integer_Overflow__int_rand_square_10.c":140:16)
#loc159 = loc("CWE190_Integer_Overflow__int_rand_square_10.c":140:9)
#loc160 = loc("CWE190_Integer_Overflow__int_rand_square_10.c":142:5)
#loc161 = loc("CWE190_Integer_Overflow__int_rand_square_10.c":149:5)
#loc162 = loc("CWE190_Integer_Overflow__int_rand_square_10.c":142:8)
#loc163 = loc("CWE190_Integer_Overflow__int_rand_square_10.c":143:5)
#loc164 = loc("CWE190_Integer_Overflow__int_rand_square_10.c":144:9)
#loc165 = loc("CWE190_Integer_Overflow__int_rand_square_10.c":148:9)
#loc166 = loc("CWE190_Integer_Overflow__int_rand_square_10.c":146:13)
#loc167 = loc("CWE190_Integer_Overflow__int_rand_square_10.c":146:33)
#loc168 = loc("CWE190_Integer_Overflow__int_rand_square_10.c":146:26)
#loc169 = loc("CWE190_Integer_Overflow__int_rand_square_10.c":147:26)
#loc170 = loc("CWE190_Integer_Overflow__int_rand_square_10.c":147:13)
#loc171 = loc(fused[#loc1, #loc2])
#loc172 = loc(fused[#loc3, #loc4])
#loc173 = loc(fused[#loc5, #loc6])
#loc174 = loc(fused[#loc7, #loc8])
#loc175 = loc(fused[#loc9, #loc10])
#loc176 = loc(fused[#loc12, #loc11])
#loc177 = loc(fused[#loc13, #loc14])
#loc178 = loc(fused[#loc16, #loc14])
#loc179 = loc(fused[#loc18, #loc17])
#loc180 = loc(fused[#loc19, #loc20])
#loc181 = loc(fused[#loc22, #loc20])
#loc182 = loc(fused[#loc23, #loc24])
#loc183 = loc(fused[#loc25, #loc26])
#loc184 = loc(fused[#loc30, #loc31])
#loc185 = loc(fused[#loc32, #loc33])
#loc186 = loc(fused[#loc34, #loc35])
#loc187 = loc(fused[#loc36, #loc37])
#loc188 = loc(fused[#loc38, #loc39])
#loc189 = loc(fused[#loc40, #loc41])
#loc190 = loc(fused[#loc42, #loc43])
#loc191 = loc(fused[#loc47, #loc48])
#loc192 = loc(fused[#loc49, #loc50])
#loc193 = loc(fused[#loc52, #loc51])
#loc194 = loc(fused[#loc53, #loc54])
#loc195 = loc(fused[#loc56, #loc54])
#loc196 = loc(fused[#loc58, #loc57])
#loc197 = loc(fused[#loc59, #loc60])
#loc198 = loc(fused[#loc62, #loc63, #loc64, #loc60])
#loc199 = loc(fused[#loc66, #loc67])
#loc200 = loc(fused[#loc68, #loc69])
#loc201 = loc(fused[#loc72, #loc75])
#loc202 = loc(fused[#loc76, #loc77, #loc78, #loc67])
#loc203 = loc(fused[#loc79, #loc80])
#loc204 = loc(fused[#loc85, #loc86])
#loc205 = loc(fused[#loc87, #loc88])
#loc206 = loc(fused[#loc90, #loc89])
#loc207 = loc(fused[#loc91, #loc92])
#loc208 = loc(fused[#loc94, #loc92])
#loc209 = loc(fused[#loc96, #loc95])
#loc210 = loc(fused[#loc97, #loc98])
#loc211 = loc(fused[#loc100, #loc98])
#loc212 = loc(fused[#loc101, #loc102])
#loc213 = loc(fused[#loc103, #loc104])
#loc214 = loc(fused[#loc107, #loc110])
#loc215 = loc(fused[#loc111, #loc112, #loc113, #loc102])
#loc216 = loc(fused[#loc114, #loc115])
#loc217 = loc(fused[#loc121, #loc122])
#loc218 = loc(fused[#loc123, #loc124])
#loc219 = loc(fused[#loc126, #loc125])
#loc220 = loc(fused[#loc127, #loc128])
#loc221 = loc(fused[#loc130, #loc131, #loc132, #loc128])
#loc222 = loc(fused[#loc136, #loc135])
#loc223 = loc(fused[#loc137, #loc138])
#loc224 = loc(fused[#loc140, #loc138])
#loc225 = loc(fused[#loc141, #loc142])
#loc226 = loc(fused[#loc143, #loc144])
#loc227 = loc(fused[#loc148, #loc149])
#loc228 = loc(fused[#loc150, #loc151])
#loc229 = loc(fused[#loc153, #loc152])
#loc230 = loc(fused[#loc154, #loc155])
#loc231 = loc(fused[#loc157, #loc155])
#loc232 = loc(fused[#loc159, #loc158])
#loc233 = loc(fused[#loc160, #loc161])
#loc234 = loc(fused[#loc163, #loc161])
#loc235 = loc(fused[#loc164, #loc165])
#loc236 = loc(fused[#loc166, #loc167])
