!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
!ty_CWE191_Integer_Underflow__int64_t_min_multiply_34_unionType = !cir.struct<union "CWE191_Integer_Underflow__int64_t_min_multiply_34_unionType" {!s64i, !s64i}>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE191_Integer_Underflow/s01/CWE191_Integer_Underflow__int64_t_min_multiply_34.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @printLongLongLine(!s64i) loc(#loc107)
  cir.func no_proto  @CWE191_Integer_Underflow__int64_t_min_multiply_34_bad() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc109)
    %1 = cir.alloca !ty_CWE191_Integer_Underflow__int64_t_min_multiply_34_unionType, !cir.ptr<!ty_CWE191_Integer_Underflow__int64_t_min_multiply_34_unionType>, ["myUnion"] {alignment = 8 : i64} loc(#loc110)
    %2 = cir.const #cir.int<0> : !s64i loc(#loc9)
    cir.store %2, %0 : !s64i, !cir.ptr<!s64i> loc(#loc111)
    %3 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc11)
    %4 = cir.unary(minus, %3) : !s64i, !s64i loc(#loc11)
    %5 = cir.const #cir.int<1> : !s64i loc(#loc11)
    %6 = cir.binop(sub, %4, %5) nsw : !s64i loc(#loc11)
    cir.store %6, %0 : !s64i, !cir.ptr<!s64i> loc(#loc112)
    %7 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc13)
    %8 = cir.get_member %1[0] {name = "unionFirst"} : !cir.ptr<!ty_CWE191_Integer_Underflow__int64_t_min_multiply_34_unionType> -> !cir.ptr<!s64i> loc(#loc14)
    cir.store %7, %8 : !s64i, !cir.ptr<!s64i> loc(#loc113)
    cir.scope {
      %9 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data", init] {alignment = 8 : i64} loc(#loc115)
      %10 = cir.get_member %1[1] {name = "unionSecond"} : !cir.ptr<!ty_CWE191_Integer_Underflow__int64_t_min_multiply_34_unionType> -> !cir.ptr<!s64i> loc(#loc20)
      %11 = cir.load %10 : !cir.ptr<!s64i>, !s64i loc(#loc19)
      cir.store %11, %9 : !s64i, !cir.ptr<!s64i> loc(#loc115)
      cir.scope {
        %12 = cir.load %9 : !cir.ptr<!s64i>, !s64i loc(#loc23)
        %13 = cir.const #cir.int<0> : !s32i loc(#loc24)
        %14 = cir.cast(integral, %13 : !s32i), !s64i loc(#loc24)
        %15 = cir.cmp(lt, %12, %14) : !s64i, !s32i loc(#loc117)
        %16 = cir.cast(int_to_bool, %15 : !s32i), !cir.bool loc(#loc25)
        cir.if %16 {
          %17 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc119)
          %18 = cir.load %9 : !cir.ptr<!s64i>, !s64i loc(#loc29)
          %19 = cir.const #cir.int<2> : !s32i loc(#loc28)
          %20 = cir.cast(integral, %19 : !s32i), !s64i loc(#loc28)
          %21 = cir.binop(mul, %18, %20) nsw : !s64i loc(#loc29)
          cir.store %21, %17 : !s64i, !cir.ptr<!s64i> loc(#loc119)
          %22 = cir.load %17 : !cir.ptr<!s64i>, !s64i loc(#loc30)
          cir.call @printLongLongLine(%22) : (!s64i) -> () loc(#loc31)
        } loc(#loc118)
      } loc(#loc116)
    } loc(#loc114)
    cir.return loc(#loc4)
  } loc(#loc108)
  cir.func no_proto  @CWE191_Integer_Underflow__int64_t_min_multiply_34_good() extra(#fn_attr) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc121)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc34)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc122)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc36)
    cir.return loc(#loc33)
  } loc(#loc120)
  cir.func no_proto internal private  @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc124)
    %1 = cir.alloca !ty_CWE191_Integer_Underflow__int64_t_min_multiply_34_unionType, !cir.ptr<!ty_CWE191_Integer_Underflow__int64_t_min_multiply_34_unionType>, ["myUnion"] {alignment = 8 : i64} loc(#loc125)
    %2 = cir.const #cir.int<0> : !s64i loc(#loc44)
    cir.store %2, %0 : !s64i, !cir.ptr<!s64i> loc(#loc126)
    %3 = cir.const #cir.int<2> : !s32i loc(#loc46)
    %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc47)
    %5 = cir.cast(integral, %4 : !s32i), !s64i loc(#loc47)
    cir.store %5, %0 : !s64i, !cir.ptr<!s64i> loc(#loc127)
    %6 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc49)
    %7 = cir.get_member %1[0] {name = "unionFirst"} : !cir.ptr<!ty_CWE191_Integer_Underflow__int64_t_min_multiply_34_unionType> -> !cir.ptr<!s64i> loc(#loc14)
    cir.store %6, %7 : !s64i, !cir.ptr<!s64i> loc(#loc128)
    cir.scope {
      %8 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data", init] {alignment = 8 : i64} loc(#loc130)
      %9 = cir.get_member %1[1] {name = "unionSecond"} : !cir.ptr<!ty_CWE191_Integer_Underflow__int64_t_min_multiply_34_unionType> -> !cir.ptr<!s64i> loc(#loc20)
      %10 = cir.load %9 : !cir.ptr<!s64i>, !s64i loc(#loc54)
      cir.store %10, %8 : !s64i, !cir.ptr<!s64i> loc(#loc130)
      cir.scope {
        %11 = cir.load %8 : !cir.ptr<!s64i>, !s64i loc(#loc57)
        %12 = cir.const #cir.int<0> : !s32i loc(#loc58)
        %13 = cir.cast(integral, %12 : !s32i), !s64i loc(#loc58)
        %14 = cir.cmp(lt, %11, %13) : !s64i, !s32i loc(#loc132)
        %15 = cir.cast(int_to_bool, %14 : !s32i), !cir.bool loc(#loc59)
        cir.if %15 {
          %16 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc134)
          %17 = cir.load %8 : !cir.ptr<!s64i>, !s64i loc(#loc63)
          %18 = cir.const #cir.int<2> : !s32i loc(#loc62)
          %19 = cir.cast(integral, %18 : !s32i), !s64i loc(#loc62)
          %20 = cir.binop(mul, %17, %19) nsw : !s64i loc(#loc63)
          cir.store %20, %16 : !s64i, !cir.ptr<!s64i> loc(#loc134)
          %21 = cir.load %16 : !cir.ptr<!s64i>, !s64i loc(#loc64)
          cir.call @printLongLongLine(%21) : (!s64i) -> () loc(#loc65)
        } loc(#loc133)
      } loc(#loc131)
    } loc(#loc129)
    cir.return loc(#loc39)
  } loc(#loc123)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc135)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"data value is too small to perform multiplication.\00" : !cir.array<!s8i x 51>> : !cir.array<!s8i x 51> {alignment = 1 : i64} loc(#loc68)
  cir.func no_proto internal private  @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc137)
    %1 = cir.alloca !ty_CWE191_Integer_Underflow__int64_t_min_multiply_34_unionType, !cir.ptr<!ty_CWE191_Integer_Underflow__int64_t_min_multiply_34_unionType>, ["myUnion"] {alignment = 8 : i64} loc(#loc138)
    %2 = cir.const #cir.int<0> : !s64i loc(#loc75)
    cir.store %2, %0 : !s64i, !cir.ptr<!s64i> loc(#loc139)
    %3 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc77)
    %4 = cir.unary(minus, %3) : !s64i, !s64i loc(#loc77)
    %5 = cir.const #cir.int<1> : !s64i loc(#loc77)
    %6 = cir.binop(sub, %4, %5) nsw : !s64i loc(#loc77)
    cir.store %6, %0 : !s64i, !cir.ptr<!s64i> loc(#loc140)
    %7 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc79)
    %8 = cir.get_member %1[0] {name = "unionFirst"} : !cir.ptr<!ty_CWE191_Integer_Underflow__int64_t_min_multiply_34_unionType> -> !cir.ptr<!s64i> loc(#loc14)
    cir.store %7, %8 : !s64i, !cir.ptr<!s64i> loc(#loc141)
    cir.scope {
      %9 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data", init] {alignment = 8 : i64} loc(#loc143)
      %10 = cir.get_member %1[1] {name = "unionSecond"} : !cir.ptr<!ty_CWE191_Integer_Underflow__int64_t_min_multiply_34_unionType> -> !cir.ptr<!s64i> loc(#loc20)
      %11 = cir.load %10 : !cir.ptr<!s64i>, !s64i loc(#loc84)
      cir.store %11, %9 : !s64i, !cir.ptr<!s64i> loc(#loc143)
      cir.scope {
        %12 = cir.load %9 : !cir.ptr<!s64i>, !s64i loc(#loc87)
        %13 = cir.const #cir.int<0> : !s32i loc(#loc88)
        %14 = cir.cast(integral, %13 : !s32i), !s64i loc(#loc88)
        %15 = cir.cmp(lt, %12, %14) : !s64i, !s32i loc(#loc145)
        %16 = cir.cast(int_to_bool, %15 : !s32i), !cir.bool loc(#loc89)
        cir.if %16 {
          cir.scope {
            %17 = cir.load %9 : !cir.ptr<!s64i>, !s64i loc(#loc93)
            %18 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc94)
            %19 = cir.unary(minus, %18) : !s64i, !s64i loc(#loc94)
            %20 = cir.const #cir.int<1> : !s64i loc(#loc94)
            %21 = cir.binop(sub, %19, %20) nsw : !s64i loc(#loc94)
            %22 = cir.const #cir.int<2> : !s32i loc(#loc95)
            %23 = cir.cast(integral, %22 : !s32i), !s64i loc(#loc95)
            %24 = cir.binop(div, %21, %23) : !s64i loc(#loc148)
            %25 = cir.cmp(gt, %17, %24) : !s64i, !s32i loc(#loc149)
            %26 = cir.cast(int_to_bool, %25 : !s32i), !cir.bool loc(#loc97)
            cir.if %26 {
              %27 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc151)
              %28 = cir.load %9 : !cir.ptr<!s64i>, !s64i loc(#loc103)
              %29 = cir.const #cir.int<2> : !s32i loc(#loc102)
              %30 = cir.cast(integral, %29 : !s32i), !s64i loc(#loc102)
              %31 = cir.binop(mul, %28, %30) nsw : !s64i loc(#loc103)
              cir.store %31, %27 : !s64i, !cir.ptr<!s64i> loc(#loc151)
              %32 = cir.load %27 : !cir.ptr<!s64i>, !s64i loc(#loc104)
              cir.call @printLongLongLine(%32) : (!s64i) -> () loc(#loc105)
            } else {
              %27 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 51>> loc(#loc68)
              %28 = cir.cast(array_to_ptrdecay, %27 : !cir.ptr<!cir.array<!s8i x 51>>), !cir.ptr<!s8i> loc(#loc68)
              cir.call @printLine(%28) : (!cir.ptr<!s8i>) -> () loc(#loc106)
            } loc(#loc150)
          } loc(#loc147)
        } loc(#loc146)
      } loc(#loc144)
    } loc(#loc142)
    cir.return loc(#loc70)
  } loc(#loc136)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE191_Integer_Underflow/s01/CWE191_Integer_Underflow__int64_t_min_multiply_34.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":26:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":26:49)
#loc3 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_34.c":28:1)
#loc4 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_34.c":45:1)
#loc5 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_34.c":30:5)
#loc6 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_34.c":30:13)
#loc7 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_34.c":31:5)
#loc8 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_34.c":31:65)
#loc9 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_34.c":32:12)
#loc10 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_34.c":32:5)
#loc11 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_34.c":34:12)
#loc12 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_34.c":34:5)
#loc13 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_34.c":35:26)
#loc14 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_34.c":22:13)
#loc15 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_34.c":35:5)
#loc16 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_34.c":36:5)
#loc17 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_34.c":44:5)
#loc18 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_34.c":37:9)
#loc19 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_34.c":37:32)
#loc20 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_34.c":23:13)
#loc21 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_34.c":38:9)
#loc22 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_34.c":43:9)
#loc23 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_34.c":38:12)
#loc24 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_34.c":38:19)
#loc25 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_34.c":38:17)
#loc26 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_34.c":39:9)
#loc27 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_34.c":41:13)
#loc28 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_34.c":41:37)
#loc29 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_34.c":41:30)
#loc30 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_34.c":42:31)
#loc31 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_34.c":42:13)
#loc32 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_34.c":98:1)
#loc33 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_34.c":102:1)
#loc34 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_34.c":100:5)
#loc35 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_34.c":100:13)
#loc36 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_34.c":101:5)
#loc37 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_34.c":101:13)
#loc38 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_34.c":52:1)
#loc39 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_34.c":69:1)
#loc40 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_34.c":54:5)
#loc41 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_34.c":54:13)
#loc42 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_34.c":55:5)
#loc43 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_34.c":55:65)
#loc44 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_34.c":56:12)
#loc45 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_34.c":56:5)
#loc46 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_34.c":58:13)
#loc47 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_34.c":58:12)
#loc48 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_34.c":58:5)
#loc49 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_34.c":59:26)
#loc50 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_34.c":59:5)
#loc51 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_34.c":60:5)
#loc52 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_34.c":68:5)
#loc53 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_34.c":61:9)
#loc54 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_34.c":61:32)
#loc55 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_34.c":62:9)
#loc56 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_34.c":67:9)
#loc57 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_34.c":62:12)
#loc58 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_34.c":62:19)
#loc59 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_34.c":62:17)
#loc60 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_34.c":63:9)
#loc61 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_34.c":65:13)
#loc62 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_34.c":65:37)
#loc63 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_34.c":65:30)
#loc64 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_34.c":66:31)
#loc65 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_34.c":66:13)
#loc66 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc67 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc68 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_34.c":92:27)
#loc69 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_34.c":72:1)
#loc70 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_34.c":96:1)
#loc71 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_34.c":74:5)
#loc72 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_34.c":74:13)
#loc73 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_34.c":75:5)
#loc74 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_34.c":75:65)
#loc75 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_34.c":76:12)
#loc76 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_34.c":76:5)
#loc77 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_34.c":78:12)
#loc78 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_34.c":78:5)
#loc79 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_34.c":79:26)
#loc80 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_34.c":79:5)
#loc81 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_34.c":80:5)
#loc82 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_34.c":95:5)
#loc83 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_34.c":81:9)
#loc84 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_34.c":81:32)
#loc85 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_34.c":82:9)
#loc86 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_34.c":94:9)
#loc87 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_34.c":82:12)
#loc88 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_34.c":82:19)
#loc89 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_34.c":82:17)
#loc90 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_34.c":83:9)
#loc91 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_34.c":85:13)
#loc92 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_34.c":93:13)
#loc93 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_34.c":85:17)
#loc94 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_34.c":85:25)
#loc95 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_34.c":85:35)
#loc96 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_34.c":85:36)
#loc97 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_34.c":85:22)
#loc98 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_34.c":86:13)
#loc99 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_34.c":89:13)
#loc100 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_34.c":91:13)
#loc101 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_34.c":87:17)
#loc102 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_34.c":87:41)
#loc103 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_34.c":87:34)
#loc104 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_34.c":88:35)
#loc105 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_34.c":88:17)
#loc106 = loc("CWE191_Integer_Underflow__int64_t_min_multiply_34.c":92:17)
#loc107 = loc(fused[#loc1, #loc2])
#loc108 = loc(fused[#loc3, #loc4])
#loc109 = loc(fused[#loc5, #loc6])
#loc110 = loc(fused[#loc7, #loc8])
#loc111 = loc(fused[#loc10, #loc9])
#loc112 = loc(fused[#loc12, #loc11])
#loc113 = loc(fused[#loc15, #loc13])
#loc114 = loc(fused[#loc16, #loc17])
#loc115 = loc(fused[#loc18, #loc19])
#loc116 = loc(fused[#loc21, #loc22])
#loc117 = loc(fused[#loc23, #loc24])
#loc118 = loc(fused[#loc26, #loc22])
#loc119 = loc(fused[#loc27, #loc28])
#loc120 = loc(fused[#loc32, #loc33])
#loc121 = loc(fused[#loc34, #loc35])
#loc122 = loc(fused[#loc36, #loc37])
#loc123 = loc(fused[#loc38, #loc39])
#loc124 = loc(fused[#loc40, #loc41])
#loc125 = loc(fused[#loc42, #loc43])
#loc126 = loc(fused[#loc45, #loc44])
#loc127 = loc(fused[#loc48, #loc46])
#loc128 = loc(fused[#loc50, #loc49])
#loc129 = loc(fused[#loc51, #loc52])
#loc130 = loc(fused[#loc53, #loc54])
#loc131 = loc(fused[#loc55, #loc56])
#loc132 = loc(fused[#loc57, #loc58])
#loc133 = loc(fused[#loc60, #loc56])
#loc134 = loc(fused[#loc61, #loc62])
#loc135 = loc(fused[#loc66, #loc67])
#loc136 = loc(fused[#loc69, #loc70])
#loc137 = loc(fused[#loc71, #loc72])
#loc138 = loc(fused[#loc73, #loc74])
#loc139 = loc(fused[#loc76, #loc75])
#loc140 = loc(fused[#loc78, #loc77])
#loc141 = loc(fused[#loc80, #loc79])
#loc142 = loc(fused[#loc81, #loc82])
#loc143 = loc(fused[#loc83, #loc84])
#loc144 = loc(fused[#loc85, #loc86])
#loc145 = loc(fused[#loc87, #loc88])
#loc146 = loc(fused[#loc90, #loc86])
#loc147 = loc(fused[#loc91, #loc92])
#loc148 = loc(fused[#loc94, #loc95])
#loc149 = loc(fused[#loc93, #loc96])
#loc150 = loc(fused[#loc98, #loc99, #loc100, #loc92])
#loc151 = loc(fused[#loc101, #loc102])
