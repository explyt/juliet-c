!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone})>
#loc19 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":49:16)
#loc20 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":49:23)
#loc139 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":127:20)
#loc140 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":127:27)
#loc146 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":134:20)
#loc147 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":134:27)
#true = #cir.bool<true> : !cir.bool
!ty_in_addr = !cir.struct<struct "in_addr" {!u32i} #cir.record.decl.ast>
#loc269 = loc(fused[#loc19, #loc20])
#loc313 = loc(fused[#loc139, #loc140])
#loc316 = loc(fused[#loc146, #loc147])
!ty_sockaddr = !cir.struct<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.struct<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__float_listenSocket_62b.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc260)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc261)
  cir.func private @bind(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc262)
  cir.func private @listen(!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc263)
  cir.func private @accept(!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc264)
  cir.func private @recv(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc265)
  cir.func private @atof(!cir.ptr<!s8i>) -> !cir.double extra(#fn_attr) loc(#loc266)
  cir.func private @close(!s32i) -> !s32i loc(#loc267)
  cir.func @_ZN44CWE369_Divide_by_Zero__float_listenSocket_629badSourceERf(%arg0: !cir.ptr<!cir.float> loc(fused[#loc19, #loc20])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!cir.float>, !cir.ptr<!cir.ptr<!cir.float>>, ["data", init, const] {alignment = 8 : i64} loc(#loc269)
    cir.store %arg0, %0 : !cir.ptr<!cir.float>, !cir.ptr<!cir.ptr<!cir.float>> loc(#loc21)
    cir.scope {
      %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc271)
      %2 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc272)
      %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc273)
      %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc274)
      %5 = cir.alloca !cir.array<!s8i x 20>, !cir.ptr<!cir.array<!s8i x 20>>, ["inputBuffer"] {alignment = 16 : i64} loc(#loc275)
      %6 = cir.const #cir.int<1> : !s32i loc(#loc29)
      %7 = cir.unary(minus, %6) : !s32i, !s32i loc(#loc29)
      cir.store %7, %3 : !s32i, !cir.ptr<!s32i> loc(#loc273)
      %8 = cir.const #cir.int<1> : !s32i loc(#loc31)
      %9 = cir.unary(minus, %8) : !s32i, !s32i loc(#loc31)
      cir.store %9, %4 : !s32i, !cir.ptr<!s32i> loc(#loc274)
      cir.scope {
        cir.do {
          %10 = cir.const #cir.int<2> : !s32i loc(#loc36)
          %11 = cir.const #cir.int<1> : !u32i loc(#loc37)
          %12 = cir.cast(integral, %11 : !u32i), !s32i loc(#loc37)
          %13 = cir.const #cir.int<6> : !u32i loc(#loc38)
          %14 = cir.cast(integral, %13 : !u32i), !s32i loc(#loc38)
          %15 = cir.call @socket(%10, %12, %14) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc39)
          cir.store %15, %3 : !s32i, !cir.ptr<!s32i> loc(#loc277)
          cir.scope {
            %52 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc44)
            %53 = cir.const #cir.int<1> : !s32i loc(#loc45)
            %54 = cir.unary(minus, %53) : !s32i, !s32i loc(#loc45)
            %55 = cir.cmp(eq, %52, %54) : !s32i, !cir.bool loc(#loc279)
            cir.if %55 {
              cir.break loc(#loc47)
            } loc(#loc280)
          } loc(#loc278)
          %16 = cir.cast(bitcast, %2 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc281)
          %17 = cir.const #cir.int<0> : !s32i loc(#loc50)
          %18 = cir.const #cir.int<16> : !u64i loc(#loc282)
          cir.libc.memset %18 bytes from %16 set to %17 : !cir.ptr<!void>, !s32i, !u64i loc(#loc283)
          %19 = cir.const #cir.int<2> : !s32i loc(#loc55)
          %20 = cir.cast(integral, %19 : !s32i), !u16i loc(#loc55)
          %21 = cir.get_member %2[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc56)
          cir.store %20, %21 : !u16i, !cir.ptr<!u16i> loc(#loc284)
          %22 = cir.const #cir.int<0> : !s32i loc(#loc58)
          %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc58)
          %24 = cir.get_member %2[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc59)
          %25 = cir.get_member %24[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc60)
          cir.store %23, %25 : !u32i, !cir.ptr<!u32i> loc(#loc285)
          %26 = cir.const #cir.int<27015> : !s32i loc(#loc62)
          %27 = cir.cast(integral, %26 : !s32i), !u16i loc(#loc62)
          %28 = cir.call @htons(%27) : (!u16i) -> !u16i extra(#fn_attr) loc(#loc63)
          %29 = cir.get_member %2[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc64)
          cir.store %28, %29 : !u16i, !cir.ptr<!u16i> loc(#loc286)
          cir.scope {
            %52 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc69)
            %53 = cir.cast(bitcast, %2 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc288)
            %54 = cir.const #cir.int<16> : !u64i loc(#loc289)
            %55 = cir.cast(integral, %54 : !u64i), !u32i loc(#loc289)
            %56 = cir.call @bind(%52, %53, %55) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc74)
            %57 = cir.const #cir.int<1> : !s32i loc(#loc75)
            %58 = cir.unary(minus, %57) : !s32i, !s32i loc(#loc75)
            %59 = cir.cmp(eq, %56, %58) : !s32i, !cir.bool loc(#loc290)
            cir.if %59 {
              cir.break loc(#loc77)
            } loc(#loc291)
          } loc(#loc287)
          cir.scope {
            %52 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc80)
            %53 = cir.const #cir.int<5> : !s32i loc(#loc81)
            %54 = cir.call @listen(%52, %53) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc82)
            %55 = cir.const #cir.int<1> : !s32i loc(#loc83)
            %56 = cir.unary(minus, %55) : !s32i, !s32i loc(#loc83)
            %57 = cir.cmp(eq, %54, %56) : !s32i, !cir.bool loc(#loc293)
            cir.if %57 {
              cir.break loc(#loc85)
            } loc(#loc294)
          } loc(#loc292)
          %30 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc86)
          %31 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc87)
          %32 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc88)
          %33 = cir.call @accept(%30, %31, %32) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc89)
          cir.store %33, %4 : !s32i, !cir.ptr<!s32i> loc(#loc295)
          cir.scope {
            %52 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc94)
            %53 = cir.const #cir.int<1> : !s32i loc(#loc95)
            %54 = cir.unary(minus, %53) : !s32i, !s32i loc(#loc95)
            %55 = cir.cmp(eq, %52, %54) : !s32i, !cir.bool loc(#loc297)
            cir.if %55 {
              cir.break loc(#loc97)
            } loc(#loc298)
          } loc(#loc296)
          %34 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc98)
          %35 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc99)
          %36 = cir.cast(bitcast, %35 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc99)
          %37 = cir.const #cir.int<20> : !s32i loc(#loc100)
          %38 = cir.const #cir.int<1> : !s32i loc(#loc101)
          %39 = cir.binop(sub, %37, %38) nsw : !s32i loc(#loc100)
          %40 = cir.cast(integral, %39 : !s32i), !u64i loc(#loc100)
          %41 = cir.const #cir.int<0> : !s32i loc(#loc102)
          %42 = cir.call @recv(%34, %36, %40, %41) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc103)
          %43 = cir.cast(integral, %42 : !s64i), !s32i loc(#loc103)
          cir.store %43, %1 : !s32i, !cir.ptr<!s32i> loc(#loc299)
          cir.scope {
            %52 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc108)
            %53 = cir.const #cir.int<1> : !s32i loc(#loc109)
            %54 = cir.unary(minus, %53) : !s32i, !s32i loc(#loc109)
            %55 = cir.cmp(eq, %52, %54) : !s32i, !cir.bool loc(#loc301)
            %56 = cir.ternary(%55, true {
              %57 = cir.const #true loc(#loc110)
              cir.yield %57 : !cir.bool loc(#loc110)
            }, false {
              %57 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc111)
              %58 = cir.const #cir.int<0> : !s32i loc(#loc112)
              %59 = cir.cmp(eq, %57, %58) : !s32i, !cir.bool loc(#loc302)
              %60 = cir.ternary(%59, true {
                %61 = cir.const #true loc(#loc110)
                cir.yield %61 : !cir.bool loc(#loc110)
              }, false {
                %61 = cir.const #false loc(#loc110)
                cir.yield %61 : !cir.bool loc(#loc110)
              }) : (!cir.bool) -> !cir.bool loc(#loc110)
              cir.yield %60 : !cir.bool loc(#loc110)
            }) : (!cir.bool) -> !cir.bool loc(#loc110)
            cir.if %56 {
              cir.break loc(#loc114)
            } loc(#loc303)
          } loc(#loc300)
          %44 = cir.const #cir.int<0> : !s8i loc(#loc115)
          %45 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc116)
          %46 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc117)
          %47 = cir.ptr_stride(%46 : !cir.ptr<!s8i>, %45 : !s32i), !cir.ptr<!s8i> loc(#loc117)
          cir.store %44, %47 : !s8i, !cir.ptr<!s8i> loc(#loc304)
          %48 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc118)
          %49 = cir.call @atof(%48) : (!cir.ptr<!s8i>) -> !cir.double extra(#fn_attr) loc(#loc119)
          %50 = cir.cast(floating, %49 : !cir.double), !cir.float loc(#loc119)
          %51 = cir.load %0 : !cir.ptr<!cir.ptr<!cir.float>>, !cir.ptr<!cir.float> loc(#loc120)
          cir.store %50, %51 : !cir.float, !cir.ptr<!cir.float> loc(#loc305)
          cir.yield loc(#loc35)
        } while {
          %10 = cir.const #cir.int<0> : !s32i loc(#loc122)
          %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc122)
          cir.condition(%11) loc(#loc122)
        } loc(#loc276)
      } loc(#loc276)
      cir.scope {
        %10 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc125)
        %11 = cir.const #cir.int<1> : !s32i loc(#loc126)
        %12 = cir.unary(minus, %11) : !s32i, !s32i loc(#loc126)
        %13 = cir.cmp(ne, %10, %12) : !s32i, !cir.bool loc(#loc307)
        cir.if %13 {
          %14 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc128)
          %15 = cir.call @close(%14) : (!s32i) -> !s32i loc(#loc129)
        } loc(#loc308)
      } loc(#loc306)
      cir.scope {
        %10 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc132)
        %11 = cir.const #cir.int<1> : !s32i loc(#loc133)
        %12 = cir.unary(minus, %11) : !s32i, !s32i loc(#loc133)
        %13 = cir.cmp(ne, %10, %12) : !s32i, !cir.bool loc(#loc310)
        cir.if %13 {
          %14 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc135)
          %15 = cir.call @close(%14) : (!s32i) -> !s32i loc(#loc136)
        } loc(#loc311)
      } loc(#loc309)
    } loc(#loc270)
    cir.return loc(#loc18)
  } loc(#loc268)
  cir.func @_ZN44CWE369_Divide_by_Zero__float_listenSocket_6213goodG2BSourceERf(%arg0: !cir.ptr<!cir.float> loc(fused[#loc139, #loc140])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!cir.float>, !cir.ptr<!cir.ptr<!cir.float>>, ["data", init, const] {alignment = 8 : i64} loc(#loc313)
    cir.store %arg0, %0 : !cir.ptr<!cir.float>, !cir.ptr<!cir.ptr<!cir.float>> loc(#loc141)
    %1 = cir.const #cir.fp<2.000000e+00> : !cir.float loc(#loc142)
    %2 = cir.load %0 : !cir.ptr<!cir.ptr<!cir.float>>, !cir.ptr<!cir.float> loc(#loc143)
    cir.store %1, %2 : !cir.float, !cir.ptr<!cir.float> loc(#loc314)
    cir.return loc(#loc138)
  } loc(#loc312)
  cir.func @_ZN44CWE369_Divide_by_Zero__float_listenSocket_6213goodB2GSourceERf(%arg0: !cir.ptr<!cir.float> loc(fused[#loc146, #loc147])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!cir.float>, !cir.ptr<!cir.ptr<!cir.float>>, ["data", init, const] {alignment = 8 : i64} loc(#loc316)
    cir.store %arg0, %0 : !cir.ptr<!cir.float>, !cir.ptr<!cir.ptr<!cir.float>> loc(#loc148)
    cir.scope {
      %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc318)
      %2 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc319)
      %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc320)
      %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc321)
      %5 = cir.alloca !cir.array<!s8i x 20>, !cir.ptr<!cir.array<!s8i x 20>>, ["inputBuffer"] {alignment = 16 : i64} loc(#loc322)
      %6 = cir.const #cir.int<1> : !s32i loc(#loc156)
      %7 = cir.unary(minus, %6) : !s32i, !s32i loc(#loc156)
      cir.store %7, %3 : !s32i, !cir.ptr<!s32i> loc(#loc320)
      %8 = cir.const #cir.int<1> : !s32i loc(#loc158)
      %9 = cir.unary(minus, %8) : !s32i, !s32i loc(#loc158)
      cir.store %9, %4 : !s32i, !cir.ptr<!s32i> loc(#loc321)
      cir.scope {
        cir.do {
          %10 = cir.const #cir.int<2> : !s32i loc(#loc163)
          %11 = cir.const #cir.int<1> : !u32i loc(#loc164)
          %12 = cir.cast(integral, %11 : !u32i), !s32i loc(#loc164)
          %13 = cir.const #cir.int<6> : !u32i loc(#loc165)
          %14 = cir.cast(integral, %13 : !u32i), !s32i loc(#loc165)
          %15 = cir.call @socket(%10, %12, %14) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc166)
          cir.store %15, %3 : !s32i, !cir.ptr<!s32i> loc(#loc324)
          cir.scope {
            %52 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc171)
            %53 = cir.const #cir.int<1> : !s32i loc(#loc172)
            %54 = cir.unary(minus, %53) : !s32i, !s32i loc(#loc172)
            %55 = cir.cmp(eq, %52, %54) : !s32i, !cir.bool loc(#loc326)
            cir.if %55 {
              cir.break loc(#loc174)
            } loc(#loc327)
          } loc(#loc325)
          %16 = cir.cast(bitcast, %2 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc328)
          %17 = cir.const #cir.int<0> : !s32i loc(#loc177)
          %18 = cir.const #cir.int<16> : !u64i loc(#loc329)
          cir.libc.memset %18 bytes from %16 set to %17 : !cir.ptr<!void>, !s32i, !u64i loc(#loc330)
          %19 = cir.const #cir.int<2> : !s32i loc(#loc182)
          %20 = cir.cast(integral, %19 : !s32i), !u16i loc(#loc182)
          %21 = cir.get_member %2[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc56)
          cir.store %20, %21 : !u16i, !cir.ptr<!u16i> loc(#loc331)
          %22 = cir.const #cir.int<0> : !s32i loc(#loc184)
          %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc184)
          %24 = cir.get_member %2[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc59)
          %25 = cir.get_member %24[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc60)
          cir.store %23, %25 : !u32i, !cir.ptr<!u32i> loc(#loc332)
          %26 = cir.const #cir.int<27015> : !s32i loc(#loc186)
          %27 = cir.cast(integral, %26 : !s32i), !u16i loc(#loc186)
          %28 = cir.call @htons(%27) : (!u16i) -> !u16i extra(#fn_attr) loc(#loc187)
          %29 = cir.get_member %2[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc64)
          cir.store %28, %29 : !u16i, !cir.ptr<!u16i> loc(#loc333)
          cir.scope {
            %52 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc192)
            %53 = cir.cast(bitcast, %2 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc335)
            %54 = cir.const #cir.int<16> : !u64i loc(#loc336)
            %55 = cir.cast(integral, %54 : !u64i), !u32i loc(#loc336)
            %56 = cir.call @bind(%52, %53, %55) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc197)
            %57 = cir.const #cir.int<1> : !s32i loc(#loc198)
            %58 = cir.unary(minus, %57) : !s32i, !s32i loc(#loc198)
            %59 = cir.cmp(eq, %56, %58) : !s32i, !cir.bool loc(#loc337)
            cir.if %59 {
              cir.break loc(#loc200)
            } loc(#loc338)
          } loc(#loc334)
          cir.scope {
            %52 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc203)
            %53 = cir.const #cir.int<5> : !s32i loc(#loc204)
            %54 = cir.call @listen(%52, %53) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc205)
            %55 = cir.const #cir.int<1> : !s32i loc(#loc206)
            %56 = cir.unary(minus, %55) : !s32i, !s32i loc(#loc206)
            %57 = cir.cmp(eq, %54, %56) : !s32i, !cir.bool loc(#loc340)
            cir.if %57 {
              cir.break loc(#loc208)
            } loc(#loc341)
          } loc(#loc339)
          %30 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc209)
          %31 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc210)
          %32 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc211)
          %33 = cir.call @accept(%30, %31, %32) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc212)
          cir.store %33, %4 : !s32i, !cir.ptr<!s32i> loc(#loc342)
          cir.scope {
            %52 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc217)
            %53 = cir.const #cir.int<1> : !s32i loc(#loc218)
            %54 = cir.unary(minus, %53) : !s32i, !s32i loc(#loc218)
            %55 = cir.cmp(eq, %52, %54) : !s32i, !cir.bool loc(#loc344)
            cir.if %55 {
              cir.break loc(#loc220)
            } loc(#loc345)
          } loc(#loc343)
          %34 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc221)
          %35 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc222)
          %36 = cir.cast(bitcast, %35 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc222)
          %37 = cir.const #cir.int<20> : !s32i loc(#loc223)
          %38 = cir.const #cir.int<1> : !s32i loc(#loc224)
          %39 = cir.binop(sub, %37, %38) nsw : !s32i loc(#loc223)
          %40 = cir.cast(integral, %39 : !s32i), !u64i loc(#loc223)
          %41 = cir.const #cir.int<0> : !s32i loc(#loc225)
          %42 = cir.call @recv(%34, %36, %40, %41) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc226)
          %43 = cir.cast(integral, %42 : !s64i), !s32i loc(#loc226)
          cir.store %43, %1 : !s32i, !cir.ptr<!s32i> loc(#loc346)
          cir.scope {
            %52 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc231)
            %53 = cir.const #cir.int<1> : !s32i loc(#loc232)
            %54 = cir.unary(minus, %53) : !s32i, !s32i loc(#loc232)
            %55 = cir.cmp(eq, %52, %54) : !s32i, !cir.bool loc(#loc348)
            %56 = cir.ternary(%55, true {
              %57 = cir.const #true loc(#loc233)
              cir.yield %57 : !cir.bool loc(#loc233)
            }, false {
              %57 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc234)
              %58 = cir.const #cir.int<0> : !s32i loc(#loc235)
              %59 = cir.cmp(eq, %57, %58) : !s32i, !cir.bool loc(#loc349)
              %60 = cir.ternary(%59, true {
                %61 = cir.const #true loc(#loc233)
                cir.yield %61 : !cir.bool loc(#loc233)
              }, false {
                %61 = cir.const #false loc(#loc233)
                cir.yield %61 : !cir.bool loc(#loc233)
              }) : (!cir.bool) -> !cir.bool loc(#loc233)
              cir.yield %60 : !cir.bool loc(#loc233)
            }) : (!cir.bool) -> !cir.bool loc(#loc233)
            cir.if %56 {
              cir.break loc(#loc237)
            } loc(#loc350)
          } loc(#loc347)
          %44 = cir.const #cir.int<0> : !s8i loc(#loc238)
          %45 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc239)
          %46 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc240)
          %47 = cir.ptr_stride(%46 : !cir.ptr<!s8i>, %45 : !s32i), !cir.ptr<!s8i> loc(#loc240)
          cir.store %44, %47 : !s8i, !cir.ptr<!s8i> loc(#loc351)
          %48 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc241)
          %49 = cir.call @atof(%48) : (!cir.ptr<!s8i>) -> !cir.double extra(#fn_attr) loc(#loc242)
          %50 = cir.cast(floating, %49 : !cir.double), !cir.float loc(#loc242)
          %51 = cir.load %0 : !cir.ptr<!cir.ptr<!cir.float>>, !cir.ptr<!cir.float> loc(#loc243)
          cir.store %50, %51 : !cir.float, !cir.ptr<!cir.float> loc(#loc352)
          cir.yield loc(#loc162)
        } while {
          %10 = cir.const #cir.int<0> : !s32i loc(#loc245)
          %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc245)
          cir.condition(%11) loc(#loc245)
        } loc(#loc323)
      } loc(#loc323)
      cir.scope {
        %10 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc248)
        %11 = cir.const #cir.int<1> : !s32i loc(#loc249)
        %12 = cir.unary(minus, %11) : !s32i, !s32i loc(#loc249)
        %13 = cir.cmp(ne, %10, %12) : !s32i, !cir.bool loc(#loc354)
        cir.if %13 {
          %14 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc251)
          %15 = cir.call @close(%14) : (!s32i) -> !s32i loc(#loc252)
        } loc(#loc355)
      } loc(#loc353)
      cir.scope {
        %10 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc255)
        %11 = cir.const #cir.int<1> : !s32i loc(#loc256)
        %12 = cir.unary(minus, %11) : !s32i, !s32i loc(#loc256)
        %13 = cir.cmp(ne, %10, %12) : !s32i, !cir.bool loc(#loc357)
        cir.if %13 {
          %14 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc258)
          %15 = cir.call @close(%14) : (!s32i) -> !s32i loc(#loc259)
        } loc(#loc358)
      } loc(#loc356)
    } loc(#loc317)
    cir.return loc(#loc145)
  } loc(#loc315)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":0:0)
#loc1 = loc("/usr/include/sys/socket.h":102:1)
#loc2 = loc("/usr/include/sys/socket.h":102:62)
#loc3 = loc("/usr/include/netinet/in.h":404:1)
#loc4 = loc("/usr/include/netinet/in.h":405:40)
#loc5 = loc("/usr/include/sys/socket.h":112:1)
#loc6 = loc("/usr/include/sys/socket.h":113:6)
#loc7 = loc("/usr/include/sys/socket.h":296:1)
#loc8 = loc("/usr/include/sys/socket.h":296:39)
#loc9 = loc("/usr/include/sys/socket.h":306:1)
#loc10 = loc("/usr/include/sys/socket.h":307:38)
#loc11 = loc("/usr/include/sys/socket.h":145:1)
#loc12 = loc("/usr/include/sys/socket.h":145:68)
#loc13 = loc("/usr/include/stdlib.h":102:1)
#loc14 = loc("/usr/include/stdlib.h":103:33)
#loc15 = loc("/usr/include/unistd.h":358:1)
#loc16 = loc("/usr/include/unistd.h":358:27)
#loc17 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":49:1)
#loc18 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":120:1)
#loc21 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":50:1)
#loc22 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":51:5)
#loc23 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":119:5)
#loc24 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":56:9)
#loc25 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":56:13)
#loc26 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":57:9)
#loc27 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":57:28)
#loc28 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":58:9)
#loc29 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":58:31)
#loc30 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":59:9)
#loc31 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":59:31)
#loc32 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":60:9)
#loc33 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":60:41)
#loc34 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":61:9)
#loc35 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":104:17)
#loc36 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":70:35)
#loc37 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":70:44)
#loc38 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":70:57)
#loc39 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":70:28)
#loc40 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":70:13)
#loc41 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":70:68)
#loc42 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":71:13)
#loc43 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":74:13)
#loc44 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":71:17)
#loc45 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":71:33)
#loc46 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":72:13)
#loc47 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":73:17)
#loc48 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":75:20)
#loc49 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":75:21)
#loc50 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":75:30)
#loc51 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":75:33)
#loc52 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":75:47)
#loc53 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":75:13)
#loc54 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":75:48)
#loc55 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":76:34)
#loc56 = loc("/usr/include/netinet/in.h":249:5)
#loc57 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":76:13)
#loc58 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":77:39)
#loc59 = loc("/usr/include/netinet/in.h":251:20)
#loc60 = loc("/usr/include/netinet/in.h":33:15)
#loc61 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":77:13)
#loc62 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":78:38)
#loc63 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":78:32)
#loc64 = loc("/usr/include/netinet/in.h":250:15)
#loc65 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":78:13)
#loc66 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":78:46)
#loc67 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":79:13)
#loc68 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":82:13)
#loc69 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":79:22)
#loc70 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":79:54)
#loc71 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":79:55)
#loc72 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":79:64)
#loc73 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":79:78)
#loc74 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":79:17)
#loc75 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":79:84)
#loc76 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":80:13)
#loc77 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":81:17)
#loc78 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":83:13)
#loc79 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":86:13)
#loc80 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":83:24)
#loc81 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":83:38)
#loc82 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":83:17)
#loc83 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":83:57)
#loc84 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":84:13)
#loc85 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":85:17)
#loc86 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":87:35)
#loc87 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":87:49)
#loc88 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":87:55)
#loc89 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":87:28)
#loc90 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":87:13)
#loc91 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":87:59)
#loc92 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":88:13)
#loc93 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":91:13)
#loc94 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":88:17)
#loc95 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":88:33)
#loc96 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":89:13)
#loc97 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":90:17)
#loc98 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":94:31)
#loc99 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":94:45)
#loc100 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":94:58)
#loc101 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":94:76)
#loc102 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":94:79)
#loc103 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":94:26)
#loc104 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":94:13)
#loc105 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":94:80)
#loc106 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":95:13)
#loc107 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":98:13)
#loc108 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":95:17)
#loc109 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":95:31)
#loc110 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":95:44)
#loc111 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":95:47)
#loc112 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":95:61)
#loc113 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":96:13)
#loc114 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":97:17)
#loc115 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":100:39)
#loc116 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":100:25)
#loc117 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":100:13)
#loc118 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":102:32)
#loc119 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":102:27)
#loc120 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":102:13)
#loc121 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":102:43)
#loc122 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":104:16)
#loc123 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":105:9)
#loc124 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":108:9)
#loc125 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":105:13)
#loc126 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":105:29)
#loc127 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":106:9)
#loc128 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":107:26)
#loc129 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":107:13)
#loc130 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":109:9)
#loc131 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":112:9)
#loc132 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":109:13)
#loc133 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":109:29)
#loc134 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":110:9)
#loc135 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":111:26)
#loc136 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":111:13)
#loc137 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":127:1)
#loc138 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":131:1)
#loc141 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":128:1)
#loc142 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":130:12)
#loc143 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":130:5)
#loc144 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":134:1)
#loc145 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":205:1)
#loc148 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":135:1)
#loc149 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":136:5)
#loc150 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":204:5)
#loc151 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":141:9)
#loc152 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":141:13)
#loc153 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":142:9)
#loc154 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":142:28)
#loc155 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":143:9)
#loc156 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":143:31)
#loc157 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":144:9)
#loc158 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":144:31)
#loc159 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":145:9)
#loc160 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":145:41)
#loc161 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":146:9)
#loc162 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":189:17)
#loc163 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":155:35)
#loc164 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":155:44)
#loc165 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":155:57)
#loc166 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":155:28)
#loc167 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":155:13)
#loc168 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":155:68)
#loc169 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":156:13)
#loc170 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":159:13)
#loc171 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":156:17)
#loc172 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":156:33)
#loc173 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":157:13)
#loc174 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":158:17)
#loc175 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":160:20)
#loc176 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":160:21)
#loc177 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":160:30)
#loc178 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":160:33)
#loc179 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":160:47)
#loc180 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":160:13)
#loc181 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":160:48)
#loc182 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":161:34)
#loc183 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":161:13)
#loc184 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":162:39)
#loc185 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":162:13)
#loc186 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":163:38)
#loc187 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":163:32)
#loc188 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":163:13)
#loc189 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":163:46)
#loc190 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":164:13)
#loc191 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":167:13)
#loc192 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":164:22)
#loc193 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":164:54)
#loc194 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":164:55)
#loc195 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":164:64)
#loc196 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":164:78)
#loc197 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":164:17)
#loc198 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":164:84)
#loc199 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":165:13)
#loc200 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":166:17)
#loc201 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":168:13)
#loc202 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":171:13)
#loc203 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":168:24)
#loc204 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":168:38)
#loc205 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":168:17)
#loc206 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":168:57)
#loc207 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":169:13)
#loc208 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":170:17)
#loc209 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":172:35)
#loc210 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":172:49)
#loc211 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":172:55)
#loc212 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":172:28)
#loc213 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":172:13)
#loc214 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":172:59)
#loc215 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":173:13)
#loc216 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":176:13)
#loc217 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":173:17)
#loc218 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":173:33)
#loc219 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":174:13)
#loc220 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":175:17)
#loc221 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":179:31)
#loc222 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":179:45)
#loc223 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":179:58)
#loc224 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":179:76)
#loc225 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":179:79)
#loc226 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":179:26)
#loc227 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":179:13)
#loc228 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":179:80)
#loc229 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":180:13)
#loc230 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":183:13)
#loc231 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":180:17)
#loc232 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":180:31)
#loc233 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":180:44)
#loc234 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":180:47)
#loc235 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":180:61)
#loc236 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":181:13)
#loc237 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":182:17)
#loc238 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":185:39)
#loc239 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":185:25)
#loc240 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":185:13)
#loc241 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":187:32)
#loc242 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":187:27)
#loc243 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":187:13)
#loc244 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":187:43)
#loc245 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":189:16)
#loc246 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":190:9)
#loc247 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":193:9)
#loc248 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":190:13)
#loc249 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":190:29)
#loc250 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":191:9)
#loc251 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":192:26)
#loc252 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":192:13)
#loc253 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":194:9)
#loc254 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":197:9)
#loc255 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":194:13)
#loc256 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":194:29)
#loc257 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":195:9)
#loc258 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":196:26)
#loc259 = loc("CWE369_Divide_by_Zero__float_listenSocket_62b.cpp":196:13)
#loc260 = loc(fused[#loc1, #loc2])
#loc261 = loc(fused[#loc3, #loc4])
#loc262 = loc(fused[#loc5, #loc6])
#loc263 = loc(fused[#loc7, #loc8])
#loc264 = loc(fused[#loc9, #loc10])
#loc265 = loc(fused[#loc11, #loc12])
#loc266 = loc(fused[#loc13, #loc14])
#loc267 = loc(fused[#loc15, #loc16])
#loc268 = loc(fused[#loc17, #loc18])
#loc270 = loc(fused[#loc22, #loc23])
#loc271 = loc(fused[#loc24, #loc25])
#loc272 = loc(fused[#loc26, #loc27])
#loc273 = loc(fused[#loc28, #loc29])
#loc274 = loc(fused[#loc30, #loc31])
#loc275 = loc(fused[#loc32, #loc33])
#loc276 = loc(fused[#loc34, #loc35])
#loc277 = loc(fused[#loc40, #loc41])
#loc278 = loc(fused[#loc42, #loc43])
#loc279 = loc(fused[#loc44, #loc45])
#loc280 = loc(fused[#loc46, #loc43])
#loc281 = loc(fused[#loc48, #loc49])
#loc282 = loc(fused[#loc51, #loc52])
#loc283 = loc(fused[#loc53, #loc54])
#loc284 = loc(fused[#loc57, #loc55])
#loc285 = loc(fused[#loc61, #loc58])
#loc286 = loc(fused[#loc65, #loc66])
#loc287 = loc(fused[#loc67, #loc68])
#loc288 = loc(fused[#loc70, #loc71])
#loc289 = loc(fused[#loc72, #loc73])
#loc290 = loc(fused[#loc74, #loc75])
#loc291 = loc(fused[#loc76, #loc68])
#loc292 = loc(fused[#loc78, #loc79])
#loc293 = loc(fused[#loc82, #loc83])
#loc294 = loc(fused[#loc84, #loc79])
#loc295 = loc(fused[#loc90, #loc91])
#loc296 = loc(fused[#loc92, #loc93])
#loc297 = loc(fused[#loc94, #loc95])
#loc298 = loc(fused[#loc96, #loc93])
#loc299 = loc(fused[#loc104, #loc105])
#loc300 = loc(fused[#loc106, #loc107])
#loc301 = loc(fused[#loc108, #loc109])
#loc302 = loc(fused[#loc111, #loc112])
#loc303 = loc(fused[#loc113, #loc107])
#loc304 = loc(fused[#loc117, #loc115])
#loc305 = loc(fused[#loc120, #loc121])
#loc306 = loc(fused[#loc123, #loc124])
#loc307 = loc(fused[#loc125, #loc126])
#loc308 = loc(fused[#loc127, #loc124])
#loc309 = loc(fused[#loc130, #loc131])
#loc310 = loc(fused[#loc132, #loc133])
#loc311 = loc(fused[#loc134, #loc131])
#loc312 = loc(fused[#loc137, #loc138])
#loc314 = loc(fused[#loc143, #loc142])
#loc315 = loc(fused[#loc144, #loc145])
#loc317 = loc(fused[#loc149, #loc150])
#loc318 = loc(fused[#loc151, #loc152])
#loc319 = loc(fused[#loc153, #loc154])
#loc320 = loc(fused[#loc155, #loc156])
#loc321 = loc(fused[#loc157, #loc158])
#loc322 = loc(fused[#loc159, #loc160])
#loc323 = loc(fused[#loc161, #loc162])
#loc324 = loc(fused[#loc167, #loc168])
#loc325 = loc(fused[#loc169, #loc170])
#loc326 = loc(fused[#loc171, #loc172])
#loc327 = loc(fused[#loc173, #loc170])
#loc328 = loc(fused[#loc175, #loc176])
#loc329 = loc(fused[#loc178, #loc179])
#loc330 = loc(fused[#loc180, #loc181])
#loc331 = loc(fused[#loc183, #loc182])
#loc332 = loc(fused[#loc185, #loc184])
#loc333 = loc(fused[#loc188, #loc189])
#loc334 = loc(fused[#loc190, #loc191])
#loc335 = loc(fused[#loc193, #loc194])
#loc336 = loc(fused[#loc195, #loc196])
#loc337 = loc(fused[#loc197, #loc198])
#loc338 = loc(fused[#loc199, #loc191])
#loc339 = loc(fused[#loc201, #loc202])
#loc340 = loc(fused[#loc205, #loc206])
#loc341 = loc(fused[#loc207, #loc202])
#loc342 = loc(fused[#loc213, #loc214])
#loc343 = loc(fused[#loc215, #loc216])
#loc344 = loc(fused[#loc217, #loc218])
#loc345 = loc(fused[#loc219, #loc216])
#loc346 = loc(fused[#loc227, #loc228])
#loc347 = loc(fused[#loc229, #loc230])
#loc348 = loc(fused[#loc231, #loc232])
#loc349 = loc(fused[#loc234, #loc235])
#loc350 = loc(fused[#loc236, #loc230])
#loc351 = loc(fused[#loc240, #loc238])
#loc352 = loc(fused[#loc243, #loc244])
#loc353 = loc(fused[#loc246, #loc247])
#loc354 = loc(fused[#loc248, #loc249])
#loc355 = loc(fused[#loc250, #loc247])
#loc356 = loc(fused[#loc253, #loc254])
#loc357 = loc(fused[#loc255, #loc256])
#loc358 = loc(fused[#loc257, #loc254])
