!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":134:10)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":134:14)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":134:20)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":134:32)
#loc308 = loc(fused[#loc105, #loc106])
#loc309 = loc(fused[#loc107, #loc108])
!ty_CWE122_Heap_Based_Buffer_Overflow__CWE135_34_unionType = !cir.struct<union "CWE122_Heap_Based_Buffer_Overflow__CWE135_34_unionType" {!cir.ptr<!void>, !cir.ptr<!void>}>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc269)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc270)
  cir.func private @wmemset(!cir.ptr<!s32i>, !s32i, !u64i) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc271)
  cir.func private @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc272)
  cir.func private @calloc(!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc273)
  cir.func private @wcscpy(!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc274)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc275)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc276)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__CWE135_34_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc278)
    %1 = cir.alloca !ty_CWE122_Heap_Based_Buffer_Overflow__CWE135_34_unionType, !cir.ptr<!ty_CWE122_Heap_Based_Buffer_Overflow__CWE135_34_unionType>, ["myUnion"] {alignment = 8 : i64} loc(#loc279)
    %2 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc23)
    cir.store %2, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc280)
    cir.scope {
      %5 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc282)
      %6 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc29)
      %7 = cir.const #cir.int<50> : !s32i loc(#loc30)
      %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc30)
      %9 = cir.const #cir.int<4> : !u64i loc(#loc283)
      %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc284)
      %11 = cir.call @malloc(%10) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc29)
      %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc285)
      cir.store %12, %5 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc282)
      cir.scope {
        %28 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc35)
        %29 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc36)
        %30 = cir.cast(bitcast, %29 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc36)
        %31 = cir.cmp(eq, %28, %30) : !cir.ptr<!s32i>, !cir.bool loc(#loc287)
        cir.if %31 {
          %32 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc38)
          %33 = cir.const #cir.int<1> : !s32i loc(#loc39)
          %34 = cir.unary(minus, %33) : !s32i, !s32i loc(#loc40)
          cir.call @exit(%34) : (!s32i) -> () extra(#fn_attr) loc(#loc38)
        } loc(#loc288)
      } loc(#loc286)
      %13 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc41)
      %14 = cir.const #cir.int<65> : !s32i loc(#loc42)
      %15 = cir.const #cir.int<50> : !s32i loc(#loc43)
      %16 = cir.const #cir.int<1> : !s32i loc(#loc44)
      %17 = cir.binop(sub, %15, %16) nsw : !s32i loc(#loc43)
      %18 = cir.cast(integral, %17 : !s32i), !u64i loc(#loc43)
      %19 = cir.call @wmemset(%13, %14, %18) : (!cir.ptr<!s32i>, !s32i, !u64i) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc45)
      %20 = cir.const #cir.int<0> : !s32i loc(#loc46)
      %21 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc47)
      %22 = cir.const #cir.int<50> : !s32i loc(#loc48)
      %23 = cir.const #cir.int<1> : !s32i loc(#loc49)
      %24 = cir.binop(sub, %22, %23) nsw : !s32i loc(#loc48)
      %25 = cir.ptr_stride(%21 : !cir.ptr<!s32i>, %24 : !s32i), !cir.ptr<!s32i> loc(#loc50)
      cir.store %20, %25 : !s32i, !cir.ptr<!s32i> loc(#loc289)
      %26 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc51)
      %27 = cir.cast(bitcast, %26 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc51)
      cir.store %27, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc290)
    } loc(#loc281)
    %3 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc53)
    %4 = cir.get_member %1[0] {name = "unionFirst"} : !cir.ptr<!ty_CWE122_Heap_Based_Buffer_Overflow__CWE135_34_unionType> -> !cir.ptr<!cir.ptr<!void>> loc(#loc54)
    cir.store %3, %4 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc291)
    cir.scope {
      %5 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data", init] {alignment = 8 : i64} loc(#loc293)
      %6 = cir.get_member %1[1] {name = "unionSecond"} : !cir.ptr<!ty_CWE122_Heap_Based_Buffer_Overflow__CWE135_34_unionType> -> !cir.ptr<!cir.ptr<!void>> loc(#loc60)
      %7 = cir.load %6 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc59)
      cir.store %7, %5 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc293)
      cir.scope {
        %8 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc295)
        %9 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc296)
        %10 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc67)
        %11 = cir.load %5 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc68)
        %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc68)
        %13 = cir.call @strlen(%12) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc67)
        cir.store %13, %8 : !u64i, !cir.ptr<!u64i> loc(#loc295)
        %14 = cir.get_global @calloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i, !u64i)>> loc(#loc69)
        %15 = cir.load %8 : !cir.ptr<!u64i>, !u64i loc(#loc70)
        %16 = cir.const #cir.int<1> : !s32i loc(#loc71)
        %17 = cir.cast(integral, %16 : !s32i), !u64i loc(#loc71)
        %18 = cir.binop(add, %15, %17) : !u64i loc(#loc297)
        %19 = cir.const #cir.int<4> : !u64i loc(#loc298)
        %20 = cir.call @calloc(%18, %19) : (!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc69)
        cir.store %20, %9 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc296)
        cir.scope {
          %30 = cir.load %9 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc76)
          %31 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc77)
          %32 = cir.cmp(eq, %30, %31) : !cir.ptr<!void>, !cir.bool loc(#loc300)
          cir.if %32 {
            %33 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc79)
            %34 = cir.const #cir.int<1> : !s32i loc(#loc80)
            %35 = cir.unary(minus, %34) : !s32i, !s32i loc(#loc81)
            cir.call @exit(%35) : (!s32i) -> () extra(#fn_attr) loc(#loc79)
          } loc(#loc301)
        } loc(#loc299)
        %21 = cir.load %9 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc82)
        %22 = cir.cast(bitcast, %21 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc82)
        %23 = cir.load %5 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc83)
        %24 = cir.cast(bitcast, %23 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc83)
        %25 = cir.call @wcscpy(%22, %24) : (!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc84)
        %26 = cir.load %9 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc85)
        %27 = cir.cast(bitcast, %26 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc85)
        cir.call @printLine(%27) : (!cir.ptr<!s8i>) -> () loc(#loc86)
        %28 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc87)
        %29 = cir.load %9 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc88)
        cir.call @free(%29) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc87)
      } loc(#loc294)
    } loc(#loc292)
    cir.return loc(#loc18)
  } loc(#loc277)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__CWE135_34_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc303)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc91)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc304)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc93)
    cir.return loc(#loc90)
  } loc(#loc302)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc305)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc306)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc99)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc100)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc101)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc102)
  cir.func @main(%arg0: !s32i loc(fused[#loc105, #loc106]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc107, #loc108])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc308)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc309)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc104)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc109)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc109)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc110)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc111)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc111)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc112)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc99)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc99)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc113)
    %8 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__CWE135_34_good : !cir.ptr<!cir.func<!void ()>> loc(#loc310)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__CWE135_34_good() : () -> () loc(#loc114)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc100)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc100)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc116)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc101)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc101)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc117)
    %13 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__CWE135_34_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc311)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__CWE135_34_bad() : () -> () loc(#loc118)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc102)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc102)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc120)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc121)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc312)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc312)
    cir.return %17 : !s32i loc(#loc312)
  } loc(#loc307)
  cir.func private @strcpy(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc313)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc315)
    %1 = cir.alloca !ty_CWE122_Heap_Based_Buffer_Overflow__CWE135_34_unionType, !cir.ptr<!ty_CWE122_Heap_Based_Buffer_Overflow__CWE135_34_unionType>, ["myUnion"] {alignment = 8 : i64} loc(#loc316)
    %2 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc131)
    cir.store %2, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc317)
    cir.scope {
      %5 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc319)
      %6 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc137)
      %7 = cir.const #cir.int<50> : !s32i loc(#loc138)
      %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc138)
      %9 = cir.const #cir.int<1> : !u64i loc(#loc320)
      %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc321)
      %11 = cir.call @malloc(%10) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc137)
      %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc322)
      cir.store %12, %5 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc319)
      cir.scope {
        %29 = cir.load %5 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc143)
        %30 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc144)
        %31 = cir.cast(bitcast, %30 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc144)
        %32 = cir.cmp(eq, %29, %31) : !cir.ptr<!s8i>, !cir.bool loc(#loc324)
        cir.if %32 {
          %33 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc146)
          %34 = cir.const #cir.int<1> : !s32i loc(#loc147)
          %35 = cir.unary(minus, %34) : !s32i, !s32i loc(#loc148)
          cir.call @exit(%35) : (!s32i) -> () extra(#fn_attr) loc(#loc146)
        } loc(#loc325)
      } loc(#loc323)
      %13 = cir.load %5 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc149)
      %14 = cir.cast(bitcast, %13 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc149)
      %15 = cir.const #cir.int<65> : !s32i loc(#loc150)
      %16 = cir.const #cir.int<50> : !s32i loc(#loc151)
      %17 = cir.const #cir.int<1> : !s32i loc(#loc152)
      %18 = cir.binop(sub, %16, %17) nsw : !s32i loc(#loc151)
      %19 = cir.cast(integral, %18 : !s32i), !u64i loc(#loc151)
      cir.libc.memset %19 bytes from %14 set to %15 : !cir.ptr<!void>, !s32i, !u64i loc(#loc326)
      %20 = cir.const #cir.int<0> : !s32i loc(#loc155)
      %21 = cir.cast(integral, %20 : !s32i), !s8i loc(#loc155)
      %22 = cir.load %5 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc156)
      %23 = cir.const #cir.int<50> : !s32i loc(#loc157)
      %24 = cir.const #cir.int<1> : !s32i loc(#loc158)
      %25 = cir.binop(sub, %23, %24) nsw : !s32i loc(#loc157)
      %26 = cir.ptr_stride(%22 : !cir.ptr<!s8i>, %25 : !s32i), !cir.ptr<!s8i> loc(#loc159)
      cir.store %21, %26 : !s8i, !cir.ptr<!s8i> loc(#loc327)
      %27 = cir.load %5 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc160)
      %28 = cir.cast(bitcast, %27 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc160)
      cir.store %28, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc328)
    } loc(#loc318)
    %3 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc162)
    %4 = cir.get_member %1[0] {name = "unionFirst"} : !cir.ptr<!ty_CWE122_Heap_Based_Buffer_Overflow__CWE135_34_unionType> -> !cir.ptr<!cir.ptr<!void>> loc(#loc54)
    cir.store %3, %4 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc329)
    cir.scope {
      %5 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data", init] {alignment = 8 : i64} loc(#loc331)
      %6 = cir.get_member %1[1] {name = "unionSecond"} : !cir.ptr<!ty_CWE122_Heap_Based_Buffer_Overflow__CWE135_34_unionType> -> !cir.ptr<!cir.ptr<!void>> loc(#loc60)
      %7 = cir.load %6 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc167)
      cir.store %7, %5 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc331)
      cir.scope {
        %8 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc333)
        %9 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc334)
        %10 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc174)
        %11 = cir.load %5 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc175)
        %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc175)
        %13 = cir.call @strlen(%12) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc174)
        cir.store %13, %8 : !u64i, !cir.ptr<!u64i> loc(#loc333)
        %14 = cir.get_global @calloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i, !u64i)>> loc(#loc176)
        %15 = cir.load %8 : !cir.ptr<!u64i>, !u64i loc(#loc177)
        %16 = cir.const #cir.int<1> : !s32i loc(#loc178)
        %17 = cir.cast(integral, %16 : !s32i), !u64i loc(#loc178)
        %18 = cir.binop(add, %15, %17) : !u64i loc(#loc335)
        %19 = cir.const #cir.int<1> : !s32i loc(#loc179)
        %20 = cir.cast(integral, %19 : !s32i), !u64i loc(#loc179)
        %21 = cir.call @calloc(%18, %20) : (!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc176)
        cir.store %21, %9 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc334)
        cir.scope {
          %32 = cir.load %9 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc182)
          %33 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc183)
          %34 = cir.cmp(eq, %32, %33) : !cir.ptr<!void>, !cir.bool loc(#loc337)
          cir.if %34 {
            %35 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc185)
            %36 = cir.const #cir.int<1> : !s32i loc(#loc186)
            %37 = cir.unary(minus, %36) : !s32i, !s32i loc(#loc187)
            cir.call @exit(%37) : (!s32i) -> () extra(#fn_attr) loc(#loc185)
          } loc(#loc338)
        } loc(#loc336)
        %22 = cir.get_global @strcpy : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc188)
        %23 = cir.load %9 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc189)
        %24 = cir.cast(bitcast, %23 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc189)
        %25 = cir.load %5 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc190)
        %26 = cir.cast(bitcast, %25 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc190)
        %27 = cir.call @strcpy(%24, %26) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc188)
        %28 = cir.load %9 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc191)
        %29 = cir.cast(bitcast, %28 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc191)
        cir.call @printLine(%29) : (!cir.ptr<!s8i>) -> () loc(#loc192)
        %30 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc193)
        %31 = cir.load %9 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc194)
        cir.call @free(%31) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc193)
      } loc(#loc332)
    } loc(#loc330)
    cir.return loc(#loc126)
  } loc(#loc314)
  cir.func private @wcslen(!cir.ptr<!s32i>) -> !u64i extra(#fn_attr) loc(#loc339)
  cir.func private @printWLine(!cir.ptr<!s32i>) loc(#loc340)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc342)
    %1 = cir.alloca !ty_CWE122_Heap_Based_Buffer_Overflow__CWE135_34_unionType, !cir.ptr<!ty_CWE122_Heap_Based_Buffer_Overflow__CWE135_34_unionType>, ["myUnion"] {alignment = 8 : i64} loc(#loc343)
    %2 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc205)
    cir.store %2, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc344)
    cir.scope {
      %5 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc346)
      %6 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc211)
      %7 = cir.const #cir.int<50> : !s32i loc(#loc212)
      %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc212)
      %9 = cir.const #cir.int<4> : !u64i loc(#loc347)
      %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc348)
      %11 = cir.call @malloc(%10) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc211)
      %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc349)
      cir.store %12, %5 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc346)
      cir.scope {
        %28 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc217)
        %29 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc218)
        %30 = cir.cast(bitcast, %29 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc218)
        %31 = cir.cmp(eq, %28, %30) : !cir.ptr<!s32i>, !cir.bool loc(#loc351)
        cir.if %31 {
          %32 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc220)
          %33 = cir.const #cir.int<1> : !s32i loc(#loc221)
          %34 = cir.unary(minus, %33) : !s32i, !s32i loc(#loc222)
          cir.call @exit(%34) : (!s32i) -> () extra(#fn_attr) loc(#loc220)
        } loc(#loc352)
      } loc(#loc350)
      %13 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc223)
      %14 = cir.const #cir.int<65> : !s32i loc(#loc224)
      %15 = cir.const #cir.int<50> : !s32i loc(#loc225)
      %16 = cir.const #cir.int<1> : !s32i loc(#loc226)
      %17 = cir.binop(sub, %15, %16) nsw : !s32i loc(#loc225)
      %18 = cir.cast(integral, %17 : !s32i), !u64i loc(#loc225)
      %19 = cir.call @wmemset(%13, %14, %18) : (!cir.ptr<!s32i>, !s32i, !u64i) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc227)
      %20 = cir.const #cir.int<0> : !s32i loc(#loc228)
      %21 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc229)
      %22 = cir.const #cir.int<50> : !s32i loc(#loc230)
      %23 = cir.const #cir.int<1> : !s32i loc(#loc231)
      %24 = cir.binop(sub, %22, %23) nsw : !s32i loc(#loc230)
      %25 = cir.ptr_stride(%21 : !cir.ptr<!s32i>, %24 : !s32i), !cir.ptr<!s32i> loc(#loc232)
      cir.store %20, %25 : !s32i, !cir.ptr<!s32i> loc(#loc353)
      %26 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc233)
      %27 = cir.cast(bitcast, %26 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc233)
      cir.store %27, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc354)
    } loc(#loc345)
    %3 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc235)
    %4 = cir.get_member %1[0] {name = "unionFirst"} : !cir.ptr<!ty_CWE122_Heap_Based_Buffer_Overflow__CWE135_34_unionType> -> !cir.ptr<!cir.ptr<!void>> loc(#loc54)
    cir.store %3, %4 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc355)
    cir.scope {
      %5 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data", init] {alignment = 8 : i64} loc(#loc357)
      %6 = cir.get_member %1[1] {name = "unionSecond"} : !cir.ptr<!ty_CWE122_Heap_Based_Buffer_Overflow__CWE135_34_unionType> -> !cir.ptr<!cir.ptr<!void>> loc(#loc60)
      %7 = cir.load %6 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc240)
      cir.store %7, %5 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc357)
      cir.scope {
        %8 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc359)
        %9 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc360)
        %10 = cir.get_global @wcslen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s32i>)>> loc(#loc247)
        %11 = cir.load %5 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc248)
        %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc248)
        %13 = cir.call @wcslen(%12) : (!cir.ptr<!s32i>) -> !u64i extra(#fn_attr) loc(#loc247)
        cir.store %13, %8 : !u64i, !cir.ptr<!u64i> loc(#loc359)
        %14 = cir.get_global @calloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i, !u64i)>> loc(#loc249)
        %15 = cir.load %8 : !cir.ptr<!u64i>, !u64i loc(#loc250)
        %16 = cir.const #cir.int<1> : !s32i loc(#loc251)
        %17 = cir.cast(integral, %16 : !s32i), !u64i loc(#loc251)
        %18 = cir.binop(add, %15, %17) : !u64i loc(#loc361)
        %19 = cir.const #cir.int<4> : !u64i loc(#loc362)
        %20 = cir.call @calloc(%18, %19) : (!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc249)
        cir.store %20, %9 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc360)
        cir.scope {
          %30 = cir.load %9 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc256)
          %31 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc257)
          %32 = cir.cmp(eq, %30, %31) : !cir.ptr<!void>, !cir.bool loc(#loc364)
          cir.if %32 {
            %33 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc259)
            %34 = cir.const #cir.int<1> : !s32i loc(#loc260)
            %35 = cir.unary(minus, %34) : !s32i, !s32i loc(#loc261)
            cir.call @exit(%35) : (!s32i) -> () extra(#fn_attr) loc(#loc259)
          } loc(#loc365)
        } loc(#loc363)
        %21 = cir.load %9 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc262)
        %22 = cir.cast(bitcast, %21 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc262)
        %23 = cir.load %5 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc263)
        %24 = cir.cast(bitcast, %23 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc263)
        %25 = cir.call @wcscpy(%22, %24) : (!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc264)
        %26 = cir.load %9 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc265)
        %27 = cir.cast(bitcast, %26 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc265)
        cir.call @printWLine(%27) : (!cir.ptr<!s32i>) -> () loc(#loc266)
        %28 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc267)
        %29 = cir.load %9 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc268)
        cir.call @free(%29) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc267)
      } loc(#loc358)
    } loc(#loc356)
    cir.return loc(#loc200)
  } loc(#loc341)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("/usr/include/wchar.h":296:1)
#loc6 = loc("/usr/include/wchar.h":296:65)
#loc7 = loc("/usr/include/string.h":407:1)
#loc8 = loc("/usr/include/string.h":408:33)
#loc9 = loc("/usr/include/stdlib.h":675:1)
#loc10 = loc("/usr/include/stdlib.h":676:14)
#loc11 = loc("/usr/include/wchar.h":98:1)
#loc12 = loc("/usr/include/wchar.h":100:14)
#loc13 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc14 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc15 = loc("/usr/include/stdlib.h":687:1)
#loc16 = loc("/usr/include/stdlib.h":687:32)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":30:1)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":56:1)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":32:5)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":32:12)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":33:5)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":33:60)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":34:12)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":34:5)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":35:5)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":42:5)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":36:9)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":36:71)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":36:46)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":36:53)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":36:56)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":36:70)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":37:9)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":37:46)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":37:13)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":37:30)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":37:36)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":37:37)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":37:43)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":37:42)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":38:17)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":38:32)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":38:38)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":38:41)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":38:9)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":39:31)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":39:9)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":39:23)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":39:26)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":39:27)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":41:24)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":41:9)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":43:26)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":24:12)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":43:5)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":44:5)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":55:5)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":45:9)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":45:31)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":25:12)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":46:9)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":54:9)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":48:13)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":48:49)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":49:13)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":49:68)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":48:30)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":48:45)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":49:35)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":49:42)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":49:50)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":49:53)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":49:67)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":50:13)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":50:41)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":50:17)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":50:25)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":50:31)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":50:32)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":50:38)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":50:37)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":51:26)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":51:32)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":51:19)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":52:31)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":52:13)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":53:13)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":53:18)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":120:1)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":124:1)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":122:5)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":122:13)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":123:5)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":123:13)
#loc95 = loc("/usr/include/stdlib.h":575:1)
#loc96 = loc("/usr/include/stdlib.h":575:41)
#loc97 = loc("/usr/include/time.h":76:1)
#loc98 = loc("/usr/include/time.h":76:38)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":139:15)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":141:15)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":144:15)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":146:15)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":134:1)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":149:1)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":135:1)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":137:27)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":137:22)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":137:5)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":139:5)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":140:5)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":140:55)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":141:5)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":144:5)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":145:5)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":145:54)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":146:5)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":148:12)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":148:5)
#loc123 = loc("/usr/include/string.h":141:1)
#loc124 = loc("/usr/include/string.h":142:14)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":63:1)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":89:1)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":65:5)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":65:12)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":66:5)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":66:60)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":67:12)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":67:5)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":68:5)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":75:5)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":69:9)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":69:63)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":69:41)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":69:48)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":69:51)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":69:62)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":70:9)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":70:47)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":70:13)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":70:31)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":70:37)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":70:38)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":70:44)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":70:43)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":71:16)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":71:32)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":71:37)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":71:40)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":71:9)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":71:41)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":72:32)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":72:9)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":72:24)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":72:27)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":72:28)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":74:24)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":74:9)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":76:26)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":76:5)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":77:5)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":88:5)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":78:9)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":78:31)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":79:9)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":87:9)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":81:13)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":81:49)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":82:13)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":82:54)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":81:30)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":81:45)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":82:35)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":82:42)
#loc178 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":82:50)
#loc179 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":82:53)
#loc180 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":83:13)
#loc181 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":83:41)
#loc182 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":83:17)
#loc183 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":83:25)
#loc184 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":83:31)
#loc185 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":83:32)
#loc186 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":83:38)
#loc187 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":83:37)
#loc188 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":84:19)
#loc189 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":84:26)
#loc190 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":84:32)
#loc191 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":85:31)
#loc192 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":85:13)
#loc193 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":86:13)
#loc194 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":86:18)
#loc195 = loc("/usr/include/wchar.h":247:1)
#loc196 = loc("/usr/include/wchar.h":247:51)
#loc197 = loc("../../../testcasesupport/std_testcase_io.h":16:1)
#loc198 = loc("../../../testcasesupport/std_testcase_io.h":16:37)
#loc199 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":92:1)
#loc200 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":118:1)
#loc201 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":94:5)
#loc202 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":94:12)
#loc203 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":95:5)
#loc204 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":95:60)
#loc205 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":96:12)
#loc206 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":96:5)
#loc207 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":97:5)
#loc208 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":104:5)
#loc209 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":98:9)
#loc210 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":98:71)
#loc211 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":98:46)
#loc212 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":98:53)
#loc213 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":98:56)
#loc214 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":98:70)
#loc215 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":99:9)
#loc216 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":99:46)
#loc217 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":99:13)
#loc218 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":99:30)
#loc219 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":99:36)
#loc220 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":99:37)
#loc221 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":99:43)
#loc222 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":99:42)
#loc223 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":100:17)
#loc224 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":100:32)
#loc225 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":100:38)
#loc226 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":100:41)
#loc227 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":100:9)
#loc228 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":101:31)
#loc229 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":101:9)
#loc230 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":101:23)
#loc231 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":101:26)
#loc232 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":101:27)
#loc233 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":103:24)
#loc234 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":103:9)
#loc235 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":105:26)
#loc236 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":105:5)
#loc237 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":106:5)
#loc238 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":117:5)
#loc239 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":107:9)
#loc240 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":107:31)
#loc241 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":108:9)
#loc242 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":116:9)
#loc243 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":110:13)
#loc244 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":110:52)
#loc245 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":111:13)
#loc246 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":111:68)
#loc247 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":110:30)
#loc248 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":110:48)
#loc249 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":111:35)
#loc250 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":111:42)
#loc251 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":111:50)
#loc252 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":111:53)
#loc253 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":111:67)
#loc254 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":112:13)
#loc255 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":112:41)
#loc256 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":112:17)
#loc257 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":112:25)
#loc258 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":112:31)
#loc259 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":112:32)
#loc260 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":112:38)
#loc261 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":112:37)
#loc262 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":113:26)
#loc263 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":113:32)
#loc264 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":113:19)
#loc265 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":114:35)
#loc266 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":114:13)
#loc267 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":115:13)
#loc268 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c":115:18)
#loc269 = loc(fused[#loc1, #loc2])
#loc270 = loc(fused[#loc3, #loc4])
#loc271 = loc(fused[#loc5, #loc6])
#loc272 = loc(fused[#loc7, #loc8])
#loc273 = loc(fused[#loc9, #loc10])
#loc274 = loc(fused[#loc11, #loc12])
#loc275 = loc(fused[#loc13, #loc14])
#loc276 = loc(fused[#loc15, #loc16])
#loc277 = loc(fused[#loc17, #loc18])
#loc278 = loc(fused[#loc19, #loc20])
#loc279 = loc(fused[#loc21, #loc22])
#loc280 = loc(fused[#loc24, #loc23])
#loc281 = loc(fused[#loc25, #loc26])
#loc282 = loc(fused[#loc27, #loc28])
#loc283 = loc(fused[#loc31, #loc32])
#loc284 = loc(fused[#loc30, #loc32])
#loc285 = loc(fused[#loc29, #loc28])
#loc286 = loc(fused[#loc33, #loc34])
#loc287 = loc(fused[#loc35, #loc36])
#loc288 = loc(fused[#loc37, #loc34])
#loc289 = loc(fused[#loc47, #loc46])
#loc290 = loc(fused[#loc52, #loc51])
#loc291 = loc(fused[#loc55, #loc53])
#loc292 = loc(fused[#loc56, #loc57])
#loc293 = loc(fused[#loc58, #loc59])
#loc294 = loc(fused[#loc61, #loc62])
#loc295 = loc(fused[#loc63, #loc64])
#loc296 = loc(fused[#loc65, #loc66])
#loc297 = loc(fused[#loc70, #loc71])
#loc298 = loc(fused[#loc72, #loc73])
#loc299 = loc(fused[#loc74, #loc75])
#loc300 = loc(fused[#loc76, #loc77])
#loc301 = loc(fused[#loc78, #loc75])
#loc302 = loc(fused[#loc89, #loc90])
#loc303 = loc(fused[#loc91, #loc92])
#loc304 = loc(fused[#loc93, #loc94])
#loc305 = loc(fused[#loc95, #loc96])
#loc306 = loc(fused[#loc97, #loc98])
#loc307 = loc(fused[#loc103, #loc104])
#loc310 = loc(fused[#loc114, #loc115])
#loc311 = loc(fused[#loc118, #loc119])
#loc312 = loc(fused[#loc122, #loc121])
#loc313 = loc(fused[#loc123, #loc124])
#loc314 = loc(fused[#loc125, #loc126])
#loc315 = loc(fused[#loc127, #loc128])
#loc316 = loc(fused[#loc129, #loc130])
#loc317 = loc(fused[#loc132, #loc131])
#loc318 = loc(fused[#loc133, #loc134])
#loc319 = loc(fused[#loc135, #loc136])
#loc320 = loc(fused[#loc139, #loc140])
#loc321 = loc(fused[#loc138, #loc140])
#loc322 = loc(fused[#loc137, #loc136])
#loc323 = loc(fused[#loc141, #loc142])
#loc324 = loc(fused[#loc143, #loc144])
#loc325 = loc(fused[#loc145, #loc142])
#loc326 = loc(fused[#loc153, #loc154])
#loc327 = loc(fused[#loc156, #loc155])
#loc328 = loc(fused[#loc161, #loc160])
#loc329 = loc(fused[#loc163, #loc162])
#loc330 = loc(fused[#loc164, #loc165])
#loc331 = loc(fused[#loc166, #loc167])
#loc332 = loc(fused[#loc168, #loc169])
#loc333 = loc(fused[#loc170, #loc171])
#loc334 = loc(fused[#loc172, #loc173])
#loc335 = loc(fused[#loc177, #loc178])
#loc336 = loc(fused[#loc180, #loc181])
#loc337 = loc(fused[#loc182, #loc183])
#loc338 = loc(fused[#loc184, #loc181])
#loc339 = loc(fused[#loc195, #loc196])
#loc340 = loc(fused[#loc197, #loc198])
#loc341 = loc(fused[#loc199, #loc200])
#loc342 = loc(fused[#loc201, #loc202])
#loc343 = loc(fused[#loc203, #loc204])
#loc344 = loc(fused[#loc206, #loc205])
#loc345 = loc(fused[#loc207, #loc208])
#loc346 = loc(fused[#loc209, #loc210])
#loc347 = loc(fused[#loc213, #loc214])
#loc348 = loc(fused[#loc212, #loc214])
#loc349 = loc(fused[#loc211, #loc210])
#loc350 = loc(fused[#loc215, #loc216])
#loc351 = loc(fused[#loc217, #loc218])
#loc352 = loc(fused[#loc219, #loc216])
#loc353 = loc(fused[#loc229, #loc228])
#loc354 = loc(fused[#loc234, #loc233])
#loc355 = loc(fused[#loc236, #loc235])
#loc356 = loc(fused[#loc237, #loc238])
#loc357 = loc(fused[#loc239, #loc240])
#loc358 = loc(fused[#loc241, #loc242])
#loc359 = loc(fused[#loc243, #loc244])
#loc360 = loc(fused[#loc245, #loc246])
#loc361 = loc(fused[#loc250, #loc251])
#loc362 = loc(fused[#loc252, #loc253])
#loc363 = loc(fused[#loc254, #loc255])
#loc364 = loc(fused[#loc256, #loc257])
#loc365 = loc(fused[#loc258, #loc255])
