!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc11 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_22b.c":27:60)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_22b.c":27:67)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_22b.c":51:65)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_22b.c":51:72)
#loc67 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_22b.c":71:65)
#loc68 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_22b.c":71:72)
#loc93 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_22b.c":86:64)
#loc94 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_22b.c":86:71)
#loc118 = loc(fused[#loc11, #loc12])
#loc128 = loc(fused[#loc40, #loc41])
#loc136 = loc(fused[#loc67, #loc68])
#loc145 = loc(fused[#loc93, #loc94])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE135_22b.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.global "private" external @CWE121_Stack_Based_Buffer_Overflow__CWE135_22_badGlobal : !s32i {alignment = 4 : i64} loc(#loc113)
  cir.func private @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc114)
  cir.func private @wcscpy(!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc115)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc116)
  cir.func @CWE121_Stack_Based_Buffer_Overflow__CWE135_22_badSink(%arg0: !cir.ptr<!void> loc(fused[#loc11, #loc12])) extra(#fn_attr1) {
    %0 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc119)
    %1 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc120)
    %2 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data", init] {alignment = 8 : i64} loc(#loc118)
    cir.store %arg0, %2 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc17)
    cir.br ^bb1 loc(#loc121)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @CWE121_Stack_Based_Buffer_Overflow__CWE135_22_badGlobal : !cir.ptr<!s32i> loc(#loc113)
    %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc20)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc20)
    cir.brcond %5 ^bb2, ^bb5 loc(#loc122)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc123)
  ^bb3:  // pred: ^bb2
    %6 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc24)
    %7 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc25)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc25)
    %9 = cir.call @strlen(%8) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc24)
    cir.store %9, %0 : !u64i, !cir.ptr<!u64i> loc(#loc119)
    %10 = cir.load %0 : !cir.ptr<!u64i>, !u64i loc(#loc16)
    %11 = cir.const #cir.int<1> : !s32i loc(#loc16)
    %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc16)
    %13 = cir.binop(add, %10, %12) : !u64i loc(#loc16)
    %14 = cir.const #cir.int<4> : !u64i loc(#loc16)
    %15 = cir.binop(mul, %13, %14) : !u64i loc(#loc16)
    %16 = cir.alloca !u8i, !cir.ptr<!u8i>, %15 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc16)
    %17 = cir.cast(bitcast, %16 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc16)
    cir.store %17, %1 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc120)
    %18 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc26)
    %19 = cir.cast(bitcast, %18 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc26)
    %20 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc27)
    %21 = cir.cast(bitcast, %20 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc27)
    %22 = cir.call @wcscpy(%19, %21) : (!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc28)
    %23 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc29)
    %24 = cir.cast(bitcast, %23 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc29)
    cir.call @printLine(%24) : (!cir.ptr<!s8i>) -> () loc(#loc30)
    cir.br ^bb4 loc(#loc23)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc19)
  ^bb5:  // 2 preds: ^bb1, ^bb4
    cir.br ^bb6 loc(#loc19)
  ^bb6:  // pred: ^bb5
    cir.return loc(#loc10)
  } loc(#loc117)
  cir.global "private" external @CWE121_Stack_Based_Buffer_Overflow__CWE135_22_goodB2G1Global : !s32i {alignment = 4 : i64} loc(#loc124)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc33)
  cir.func private @wcslen(!cir.ptr<!s32i>) -> !u64i extra(#fn_attr) loc(#loc125)
  cir.func private @printWLine(!cir.ptr<!s32i>) loc(#loc126)
  cir.func @CWE121_Stack_Based_Buffer_Overflow__CWE135_22_goodB2G1Sink(%arg0: !cir.ptr<!void> loc(fused[#loc40, #loc41])) extra(#fn_attr1) {
    %0 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc129)
    %1 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc130)
    %2 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data", init] {alignment = 8 : i64} loc(#loc128)
    cir.store %arg0, %2 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc46)
    cir.br ^bb1 loc(#loc131)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @CWE121_Stack_Based_Buffer_Overflow__CWE135_22_goodB2G1Global : !cir.ptr<!s32i> loc(#loc124)
    %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc49)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc49)
    cir.brcond %5 ^bb2, ^bb3 loc(#loc132)
  ^bb2:  // pred: ^bb1
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc33)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc33)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc53)
    cir.br ^bb6 loc(#loc51)
  ^bb3:  // pred: ^bb1
    cir.br ^bb4 loc(#loc133)
  ^bb4:  // pred: ^bb3
    %8 = cir.get_global @wcslen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s32i>)>> loc(#loc56)
    %9 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc57)
    %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc57)
    %11 = cir.call @wcslen(%10) : (!cir.ptr<!s32i>) -> !u64i extra(#fn_attr) loc(#loc56)
    cir.store %11, %0 : !u64i, !cir.ptr<!u64i> loc(#loc129)
    %12 = cir.load %0 : !cir.ptr<!u64i>, !u64i loc(#loc45)
    %13 = cir.const #cir.int<1> : !s32i loc(#loc45)
    %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc45)
    %15 = cir.binop(add, %12, %14) : !u64i loc(#loc45)
    %16 = cir.const #cir.int<4> : !u64i loc(#loc45)
    %17 = cir.binop(mul, %15, %16) : !u64i loc(#loc45)
    %18 = cir.alloca !u8i, !cir.ptr<!u8i>, %17 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc45)
    %19 = cir.cast(bitcast, %18 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc45)
    cir.store %19, %1 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc130)
    %20 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc58)
    %21 = cir.cast(bitcast, %20 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc58)
    %22 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc59)
    %23 = cir.cast(bitcast, %22 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc59)
    %24 = cir.call @wcscpy(%21, %23) : (!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc60)
    %25 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc61)
    %26 = cir.cast(bitcast, %25 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc61)
    cir.call @printWLine(%26) : (!cir.ptr<!s32i>) -> () loc(#loc62)
    cir.br ^bb5 loc(#loc55)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc48)
  ^bb6:  // 2 preds: ^bb2, ^bb5
    cir.br ^bb7 loc(#loc48)
  ^bb7:  // pred: ^bb6
    cir.return loc(#loc39)
  } loc(#loc127)
  cir.global "private" external @CWE121_Stack_Based_Buffer_Overflow__CWE135_22_goodB2G2Global : !s32i {alignment = 4 : i64} loc(#loc134)
  cir.func @CWE121_Stack_Based_Buffer_Overflow__CWE135_22_goodB2G2Sink(%arg0: !cir.ptr<!void> loc(fused[#loc67, #loc68])) extra(#fn_attr1) {
    %0 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc137)
    %1 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc138)
    %2 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data", init] {alignment = 8 : i64} loc(#loc136)
    cir.store %arg0, %2 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc73)
    cir.br ^bb1 loc(#loc139)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @CWE121_Stack_Based_Buffer_Overflow__CWE135_22_goodB2G2Global : !cir.ptr<!s32i> loc(#loc134)
    %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc76)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc76)
    cir.brcond %5 ^bb2, ^bb5 loc(#loc140)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc141)
  ^bb3:  // pred: ^bb2
    %6 = cir.get_global @wcslen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s32i>)>> loc(#loc80)
    %7 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc81)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc81)
    %9 = cir.call @wcslen(%8) : (!cir.ptr<!s32i>) -> !u64i extra(#fn_attr) loc(#loc80)
    cir.store %9, %0 : !u64i, !cir.ptr<!u64i> loc(#loc137)
    %10 = cir.load %0 : !cir.ptr<!u64i>, !u64i loc(#loc72)
    %11 = cir.const #cir.int<1> : !s32i loc(#loc72)
    %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc72)
    %13 = cir.binop(add, %10, %12) : !u64i loc(#loc72)
    %14 = cir.const #cir.int<4> : !u64i loc(#loc72)
    %15 = cir.binop(mul, %13, %14) : !u64i loc(#loc72)
    %16 = cir.alloca !u8i, !cir.ptr<!u8i>, %15 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc72)
    %17 = cir.cast(bitcast, %16 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc72)
    cir.store %17, %1 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc138)
    %18 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc82)
    %19 = cir.cast(bitcast, %18 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc82)
    %20 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc83)
    %21 = cir.cast(bitcast, %20 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc83)
    %22 = cir.call @wcscpy(%19, %21) : (!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc84)
    %23 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc85)
    %24 = cir.cast(bitcast, %23 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc85)
    cir.call @printWLine(%24) : (!cir.ptr<!s32i>) -> () loc(#loc86)
    cir.br ^bb4 loc(#loc79)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc75)
  ^bb5:  // 2 preds: ^bb1, ^bb4
    cir.br ^bb6 loc(#loc75)
  ^bb6:  // pred: ^bb5
    cir.return loc(#loc66)
  } loc(#loc135)
  cir.global "private" external @CWE121_Stack_Based_Buffer_Overflow__CWE135_22_goodG2BGlobal : !s32i {alignment = 4 : i64} loc(#loc142)
  cir.func private @strcpy(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc143)
  cir.func @CWE121_Stack_Based_Buffer_Overflow__CWE135_22_goodG2BSink(%arg0: !cir.ptr<!void> loc(fused[#loc93, #loc94])) extra(#fn_attr1) {
    %0 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc146)
    %1 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc147)
    %2 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data", init] {alignment = 8 : i64} loc(#loc145)
    cir.store %arg0, %2 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc99)
    cir.br ^bb1 loc(#loc148)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @CWE121_Stack_Based_Buffer_Overflow__CWE135_22_goodG2BGlobal : !cir.ptr<!s32i> loc(#loc142)
    %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc102)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc102)
    cir.brcond %5 ^bb2, ^bb5 loc(#loc149)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc150)
  ^bb3:  // pred: ^bb2
    %6 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc106)
    %7 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc107)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc107)
    %9 = cir.call @strlen(%8) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc106)
    cir.store %9, %0 : !u64i, !cir.ptr<!u64i> loc(#loc146)
    %10 = cir.load %0 : !cir.ptr<!u64i>, !u64i loc(#loc98)
    %11 = cir.const #cir.int<1> : !s32i loc(#loc98)
    %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc98)
    %13 = cir.binop(add, %10, %12) : !u64i loc(#loc98)
    %14 = cir.const #cir.int<1> : !s32i loc(#loc98)
    %15 = cir.cast(integral, %14 : !s32i), !u64i loc(#loc98)
    %16 = cir.binop(mul, %13, %15) : !u64i loc(#loc98)
    %17 = cir.alloca !u8i, !cir.ptr<!u8i>, %16 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc98)
    %18 = cir.cast(bitcast, %17 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc98)
    cir.store %18, %1 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc147)
    %19 = cir.get_global @strcpy : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc108)
    %20 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc109)
    %21 = cir.cast(bitcast, %20 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc109)
    %22 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc110)
    %23 = cir.cast(bitcast, %22 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc110)
    %24 = cir.call @strcpy(%21, %23) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc108)
    %25 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc111)
    %26 = cir.cast(bitcast, %25 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc111)
    cir.call @printLine(%26) : (!cir.ptr<!s8i>) -> () loc(#loc112)
    cir.br ^bb4 loc(#loc105)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc101)
  ^bb5:  // 2 preds: ^bb1, ^bb4
    cir.br ^bb6 loc(#loc101)
  ^bb6:  // pred: ^bb5
    cir.return loc(#loc92)
  } loc(#loc144)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE135_22b.c":0:0)
#loc1 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_22b.c":25:1)
#loc2 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_22b.c":25:12)
#loc3 = loc("/usr/include/string.h":407:1)
#loc4 = loc("/usr/include/string.h":408:33)
#loc5 = loc("/usr/include/wchar.h":98:1)
#loc6 = loc("/usr/include/wchar.h":100:14)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_22b.c":27:1)
#loc10 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_22b.c":39:1)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_22b.c":33:13)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_22b.c":33:49)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_22b.c":34:13)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_22b.c":34:35)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_22b.c":28:1)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_22b.c":29:5)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_22b.c":38:5)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_22b.c":29:8)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_22b.c":30:5)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_22b.c":31:9)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_22b.c":37:9)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_22b.c":33:30)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_22b.c":33:45)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_22b.c":35:26)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_22b.c":35:32)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_22b.c":35:19)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_22b.c":36:31)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_22b.c":36:13)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_22b.c":46:1)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_22b.c":46:12)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_22b.c":56:19)
#loc34 = loc("/usr/include/wchar.h":247:1)
#loc35 = loc("/usr/include/wchar.h":247:51)
#loc36 = loc("../../../testcasesupport/std_testcase_io.h":16:1)
#loc37 = loc("../../../testcasesupport/std_testcase_io.h":16:37)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_22b.c":51:1)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_22b.c":68:1)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_22b.c":62:13)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_22b.c":62:52)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_22b.c":63:13)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_22b.c":63:35)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_22b.c":52:1)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_22b.c":53:5)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_22b.c":67:5)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_22b.c":53:8)
#loc50 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_22b.c":54:5)
#loc51 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_22b.c":57:5)
#loc52 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_22b.c":59:5)
#loc53 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_22b.c":56:9)
#loc54 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_22b.c":60:9)
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_22b.c":66:9)
#loc56 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_22b.c":62:30)
#loc57 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_22b.c":62:48)
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_22b.c":64:26)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_22b.c":64:32)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_22b.c":64:19)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_22b.c":65:35)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_22b.c":65:13)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_22b.c":47:1)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_22b.c":47:12)
#loc65 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_22b.c":71:1)
#loc66 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_22b.c":83:1)
#loc69 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_22b.c":77:13)
#loc70 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_22b.c":77:52)
#loc71 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_22b.c":78:13)
#loc72 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_22b.c":78:35)
#loc73 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_22b.c":72:1)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_22b.c":73:5)
#loc75 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_22b.c":82:5)
#loc76 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_22b.c":73:8)
#loc77 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_22b.c":74:5)
#loc78 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_22b.c":75:9)
#loc79 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_22b.c":81:9)
#loc80 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_22b.c":77:30)
#loc81 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_22b.c":77:48)
#loc82 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_22b.c":79:26)
#loc83 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_22b.c":79:32)
#loc84 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_22b.c":79:19)
#loc85 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_22b.c":80:35)
#loc86 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_22b.c":80:13)
#loc87 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_22b.c":48:1)
#loc88 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_22b.c":48:12)
#loc89 = loc("/usr/include/string.h":141:1)
#loc90 = loc("/usr/include/string.h":142:14)
#loc91 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_22b.c":86:1)
#loc92 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_22b.c":98:1)
#loc95 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_22b.c":92:13)
#loc96 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_22b.c":92:49)
#loc97 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_22b.c":93:13)
#loc98 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_22b.c":93:35)
#loc99 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_22b.c":87:1)
#loc100 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_22b.c":88:5)
#loc101 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_22b.c":97:5)
#loc102 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_22b.c":88:8)
#loc103 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_22b.c":89:5)
#loc104 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_22b.c":90:9)
#loc105 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_22b.c":96:9)
#loc106 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_22b.c":92:30)
#loc107 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_22b.c":92:45)
#loc108 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_22b.c":94:19)
#loc109 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_22b.c":94:26)
#loc110 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_22b.c":94:32)
#loc111 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_22b.c":95:31)
#loc112 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_22b.c":95:13)
#loc113 = loc(fused[#loc1, #loc2])
#loc114 = loc(fused[#loc3, #loc4])
#loc115 = loc(fused[#loc5, #loc6])
#loc116 = loc(fused[#loc7, #loc8])
#loc117 = loc(fused[#loc9, #loc10])
#loc119 = loc(fused[#loc13, #loc14])
#loc120 = loc(fused[#loc15, #loc16])
#loc121 = loc(fused[#loc18, #loc19])
#loc122 = loc(fused[#loc21, #loc19])
#loc123 = loc(fused[#loc22, #loc23])
#loc124 = loc(fused[#loc31, #loc32])
#loc125 = loc(fused[#loc34, #loc35])
#loc126 = loc(fused[#loc36, #loc37])
#loc127 = loc(fused[#loc38, #loc39])
#loc129 = loc(fused[#loc42, #loc43])
#loc130 = loc(fused[#loc44, #loc45])
#loc131 = loc(fused[#loc47, #loc48])
#loc132 = loc(fused[#loc50, #loc51, #loc52, #loc48])
#loc133 = loc(fused[#loc54, #loc55])
#loc134 = loc(fused[#loc63, #loc64])
#loc135 = loc(fused[#loc65, #loc66])
#loc137 = loc(fused[#loc69, #loc70])
#loc138 = loc(fused[#loc71, #loc72])
#loc139 = loc(fused[#loc74, #loc75])
#loc140 = loc(fused[#loc77, #loc75])
#loc141 = loc(fused[#loc78, #loc79])
#loc142 = loc(fused[#loc87, #loc88])
#loc143 = loc(fused[#loc89, #loc90])
#loc144 = loc(fused[#loc91, #loc92])
#loc146 = loc(fused[#loc95, #loc96])
#loc147 = loc(fused[#loc97, #loc98])
#loc148 = loc(fused[#loc100, #loc101])
#loc149 = loc(fused[#loc103, #loc101])
#loc150 = loc(fused[#loc104, #loc105])
