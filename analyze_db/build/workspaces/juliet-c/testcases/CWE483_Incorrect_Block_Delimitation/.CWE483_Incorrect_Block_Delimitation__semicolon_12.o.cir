!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE483_Incorrect_Block_Delimitation/CWE483_Incorrect_Block_Delimitation__semicolon_12.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e">} {
  cir.func no_proto private @globalReturnsTrueOrFalse(...) -> !s32i loc(#loc122)
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc123)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc124)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"x == 0\00" : !cir.array<!s8i x 7>> : !cir.array<!s8i x 7> {alignment = 1 : i64} loc(#loc7)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"x was 0\0A\00" : !cir.array<!s8i x 9>> : !cir.array<!s8i x 9> {alignment = 1 : i64} loc(#loc8)
  cir.func no_proto @CWE483_Incorrect_Block_Delimitation__semicolon_12_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["x", init] {alignment = 4 : i64} loc(#loc126)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["y", init] {alignment = 4 : i64} loc(#loc127)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["x", init] {alignment = 4 : i64} loc(#loc128)
    %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["y", init] {alignment = 4 : i64} loc(#loc129)
    cir.br ^bb1 loc(#loc130)
  ^bb1:  // pred: ^bb0
    %4 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc131)
    %5 = cir.cast(bitcast, %4 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc131)
    %6 = cir.call %5() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc21)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc21)
    cir.brcond %7 ^bb2, ^bb15 loc(#loc132)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc133)
  ^bb3:  // pred: ^bb2
    %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc28)
    %9 = cir.const #cir.int<3> : !s32i loc(#loc29)
    %10 = cir.binop(rem, %8, %9) : !s32i loc(#loc134)
    cir.store %10, %0 : !s32i, !cir.ptr<!s32i> loc(#loc126)
    %11 = cir.const #cir.int<0> : !s32i loc(#loc14)
    cir.store %11, %1 : !s32i, !cir.ptr<!s32i> loc(#loc127)
    cir.br ^bb4 loc(#loc135)
  ^bb4:  // pred: ^bb3
    %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc32)
    %13 = cir.const #cir.int<0> : !s32i loc(#loc33)
    %14 = cir.cmp(eq, %12, %13) : !s32i, !cir.bool loc(#loc136)
    cir.brcond %14 ^bb5, ^bb6 loc(#loc31)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc31)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc31)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc137)
  ^bb8:  // pred: ^bb7
    %15 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 7>> loc(#loc7)
    %16 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 7>>), !cir.ptr<!s8i> loc(#loc7)
    cir.call @printLine(%16) : (!cir.ptr<!s8i>) -> () loc(#loc36)
    %17 = cir.const #cir.int<1> : !s32i loc(#loc37)
    cir.store %17, %1 : !s32i, !cir.ptr<!s32i> loc(#loc138)
    cir.br ^bb9 loc(#loc35)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc139)
  ^bb10:  // pred: ^bb9
    %18 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc41)
    %19 = cir.cast(int_to_bool, %18 : !s32i), !cir.bool loc(#loc41)
    cir.brcond %19 ^bb11, ^bb12 loc(#loc140)
  ^bb11:  // pred: ^bb10
    %20 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc8)
    %21 = cir.cast(array_to_ptrdecay, %20 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc8)
    cir.call @printLine(%21) : (!cir.ptr<!s8i>) -> () loc(#loc43)
    cir.br ^bb12 loc(#loc40)
  ^bb12:  // 2 preds: ^bb10, ^bb11
    cir.br ^bb13 loc(#loc40)
  ^bb13:  // pred: ^bb12
    cir.br ^bb14 loc(#loc27)
  ^bb14:  // pred: ^bb13
    cir.br ^bb26 loc(#loc24)
  ^bb15:  // pred: ^bb1
    cir.br ^bb16 loc(#loc141)
  ^bb16:  // pred: ^bb15
    %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc46)
    %23 = cir.const #cir.int<3> : !s32i loc(#loc47)
    %24 = cir.binop(rem, %22, %23) : !s32i loc(#loc142)
    cir.store %24, %2 : !s32i, !cir.ptr<!s32i> loc(#loc128)
    %25 = cir.const #cir.int<0> : !s32i loc(#loc18)
    cir.store %25, %3 : !s32i, !cir.ptr<!s32i> loc(#loc129)
    cir.br ^bb17 loc(#loc143)
  ^bb17:  // pred: ^bb16
    %26 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc50)
    %27 = cir.const #cir.int<0> : !s32i loc(#loc51)
    %28 = cir.cmp(eq, %26, %27) : !s32i, !cir.bool loc(#loc144)
    cir.brcond %28 ^bb18, ^bb19 loc(#loc145)
  ^bb18:  // pred: ^bb17
    %29 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 7>> loc(#loc53)
    %30 = cir.cast(array_to_ptrdecay, %29 : !cir.ptr<!cir.array<!s8i x 7>>), !cir.ptr<!s8i> loc(#loc53)
    cir.call @printLine(%30) : (!cir.ptr<!s8i>) -> () loc(#loc54)
    %31 = cir.const #cir.int<1> : !s32i loc(#loc55)
    cir.store %31, %3 : !s32i, !cir.ptr<!s32i> loc(#loc146)
    cir.br ^bb19 loc(#loc49)
  ^bb19:  // 2 preds: ^bb17, ^bb18
    cir.br ^bb20 loc(#loc49)
  ^bb20:  // pred: ^bb19
    cir.br ^bb21 loc(#loc147)
  ^bb21:  // pred: ^bb20
    %32 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc59)
    %33 = cir.cast(int_to_bool, %32 : !s32i), !cir.bool loc(#loc59)
    cir.brcond %33 ^bb22, ^bb23 loc(#loc148)
  ^bb22:  // pred: ^bb21
    %34 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc61)
    %35 = cir.cast(array_to_ptrdecay, %34 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc61)
    cir.call @printLine(%35) : (!cir.ptr<!s8i>) -> () loc(#loc62)
    cir.br ^bb23 loc(#loc58)
  ^bb23:  // 2 preds: ^bb21, ^bb22
    cir.br ^bb24 loc(#loc58)
  ^bb24:  // pred: ^bb23
    cir.br ^bb25 loc(#loc45)
  ^bb25:  // pred: ^bb24
    cir.br ^bb26 loc(#loc20)
  ^bb26:  // 2 preds: ^bb14, ^bb25
    cir.br ^bb27 loc(#loc20)
  ^bb27:  // pred: ^bb26
    cir.return loc(#loc10)
  } loc(#loc125)
  cir.func no_proto @CWE483_Incorrect_Block_Delimitation__semicolon_12_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<()>> loc(#loc150)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc65)
    cir.return loc(#loc64)
  } loc(#loc149)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["x", init] {alignment = 4 : i64} loc(#loc152)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["y", init] {alignment = 4 : i64} loc(#loc153)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["x", init] {alignment = 4 : i64} loc(#loc154)
    %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["y", init] {alignment = 4 : i64} loc(#loc155)
    cir.br ^bb1 loc(#loc156)
  ^bb1:  // pred: ^bb0
    %4 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc157)
    %5 = cir.cast(bitcast, %4 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc157)
    %6 = cir.call %5() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc79)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc79)
    cir.brcond %7 ^bb2, ^bb13 loc(#loc158)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc159)
  ^bb3:  // pred: ^bb2
    %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc86)
    %9 = cir.const #cir.int<3> : !s32i loc(#loc87)
    %10 = cir.binop(rem, %8, %9) : !s32i loc(#loc160)
    cir.store %10, %0 : !s32i, !cir.ptr<!s32i> loc(#loc152)
    %11 = cir.const #cir.int<0> : !s32i loc(#loc72)
    cir.store %11, %1 : !s32i, !cir.ptr<!s32i> loc(#loc153)
    cir.br ^bb4 loc(#loc161)
  ^bb4:  // pred: ^bb3
    %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc90)
    %13 = cir.const #cir.int<0> : !s32i loc(#loc91)
    %14 = cir.cmp(eq, %12, %13) : !s32i, !cir.bool loc(#loc162)
    cir.brcond %14 ^bb5, ^bb6 loc(#loc163)
  ^bb5:  // pred: ^bb4
    %15 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 7>> loc(#loc93)
    %16 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 7>>), !cir.ptr<!s8i> loc(#loc93)
    cir.call @printLine(%16) : (!cir.ptr<!s8i>) -> () loc(#loc94)
    %17 = cir.const #cir.int<1> : !s32i loc(#loc95)
    cir.store %17, %1 : !s32i, !cir.ptr<!s32i> loc(#loc164)
    cir.br ^bb6 loc(#loc89)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc89)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc165)
  ^bb8:  // pred: ^bb7
    %18 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc99)
    %19 = cir.cast(int_to_bool, %18 : !s32i), !cir.bool loc(#loc99)
    cir.brcond %19 ^bb9, ^bb10 loc(#loc166)
  ^bb9:  // pred: ^bb8
    %20 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc101)
    %21 = cir.cast(array_to_ptrdecay, %20 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc101)
    cir.call @printLine(%21) : (!cir.ptr<!s8i>) -> () loc(#loc102)
    cir.br ^bb10 loc(#loc98)
  ^bb10:  // 2 preds: ^bb8, ^bb9
    cir.br ^bb11 loc(#loc98)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc85)
  ^bb12:  // pred: ^bb11
    cir.br ^bb24 loc(#loc82)
  ^bb13:  // pred: ^bb1
    cir.br ^bb14 loc(#loc167)
  ^bb14:  // pred: ^bb13
    %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc105)
    %23 = cir.const #cir.int<3> : !s32i loc(#loc106)
    %24 = cir.binop(rem, %22, %23) : !s32i loc(#loc168)
    cir.store %24, %2 : !s32i, !cir.ptr<!s32i> loc(#loc154)
    %25 = cir.const #cir.int<0> : !s32i loc(#loc76)
    cir.store %25, %3 : !s32i, !cir.ptr<!s32i> loc(#loc155)
    cir.br ^bb15 loc(#loc169)
  ^bb15:  // pred: ^bb14
    %26 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc109)
    %27 = cir.const #cir.int<0> : !s32i loc(#loc110)
    %28 = cir.cmp(eq, %26, %27) : !s32i, !cir.bool loc(#loc170)
    cir.brcond %28 ^bb16, ^bb17 loc(#loc171)
  ^bb16:  // pred: ^bb15
    %29 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 7>> loc(#loc112)
    %30 = cir.cast(array_to_ptrdecay, %29 : !cir.ptr<!cir.array<!s8i x 7>>), !cir.ptr<!s8i> loc(#loc112)
    cir.call @printLine(%30) : (!cir.ptr<!s8i>) -> () loc(#loc113)
    %31 = cir.const #cir.int<1> : !s32i loc(#loc114)
    cir.store %31, %3 : !s32i, !cir.ptr<!s32i> loc(#loc172)
    cir.br ^bb17 loc(#loc108)
  ^bb17:  // 2 preds: ^bb15, ^bb16
    cir.br ^bb18 loc(#loc108)
  ^bb18:  // pred: ^bb17
    cir.br ^bb19 loc(#loc173)
  ^bb19:  // pred: ^bb18
    %32 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc118)
    %33 = cir.cast(int_to_bool, %32 : !s32i), !cir.bool loc(#loc118)
    cir.brcond %33 ^bb20, ^bb21 loc(#loc174)
  ^bb20:  // pred: ^bb19
    %34 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc120)
    %35 = cir.cast(array_to_ptrdecay, %34 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc120)
    cir.call @printLine(%35) : (!cir.ptr<!s8i>) -> () loc(#loc121)
    cir.br ^bb21 loc(#loc117)
  ^bb21:  // 2 preds: ^bb19, ^bb20
    cir.br ^bb22 loc(#loc117)
  ^bb22:  // pred: ^bb21
    cir.br ^bb23 loc(#loc104)
  ^bb23:  // pred: ^bb22
    cir.br ^bb24 loc(#loc78)
  ^bb24:  // 2 preds: ^bb12, ^bb23
    cir.br ^bb25 loc(#loc78)
  ^bb25:  // pred: ^bb24
    cir.return loc(#loc68)
  } loc(#loc151)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE483_Incorrect_Block_Delimitation/CWE483_Incorrect_Block_Delimitation__semicolon_12.c":0:0)
#loc1 = loc("../../testcasesupport/std_testcase_io.h":52:1)
#loc2 = loc("../../testcasesupport/std_testcase_io.h":52:30)
#loc3 = loc("/usr/include/stdlib.h":573:1)
#loc4 = loc("/usr/include/stdlib.h":573:24)
#loc5 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc6 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc7 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_12.c":30:27)
#loc8 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_12.c":35:27)
#loc9 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_12.c":20:1)
#loc10 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_12.c":56:1)
#loc11 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_12.c":25:13)
#loc12 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_12.c":25:32)
#loc13 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_12.c":26:13)
#loc14 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_12.c":26:21)
#loc15 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_12.c":42:13)
#loc16 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_12.c":42:32)
#loc17 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_12.c":43:13)
#loc18 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_12.c":43:21)
#loc19 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_12.c":22:5)
#loc20 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_12.c":55:5)
#loc21 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_12.c":22:8)
#loc22 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_12.c":22:33)
#loc23 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_12.c":23:5)
#loc24 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_12.c":38:5)
#loc25 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_12.c":40:5)
#loc26 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_12.c":24:9)
#loc27 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_12.c":37:9)
#loc28 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_12.c":25:22)
#loc29 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_12.c":25:31)
#loc30 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_12.c":28:13)
#loc31 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_12.c":28:24)
#loc32 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_12.c":28:17)
#loc33 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_12.c":28:22)
#loc34 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_12.c":29:13)
#loc35 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_12.c":32:13)
#loc36 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_12.c":30:17)
#loc37 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_12.c":31:21)
#loc38 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_12.c":31:17)
#loc39 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_12.c":33:13)
#loc40 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_12.c":36:13)
#loc41 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_12.c":33:17)
#loc42 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_12.c":34:13)
#loc43 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_12.c":35:17)
#loc44 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_12.c":41:9)
#loc45 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_12.c":54:9)
#loc46 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_12.c":42:22)
#loc47 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_12.c":42:31)
#loc48 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_12.c":45:13)
#loc49 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_12.c":49:13)
#loc50 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_12.c":45:17)
#loc51 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_12.c":45:22)
#loc52 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_12.c":46:13)
#loc53 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_12.c":47:27)
#loc54 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_12.c":47:17)
#loc55 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_12.c":48:21)
#loc56 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_12.c":48:17)
#loc57 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_12.c":50:13)
#loc58 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_12.c":53:13)
#loc59 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_12.c":50:17)
#loc60 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_12.c":51:13)
#loc61 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_12.c":52:27)
#loc62 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_12.c":52:17)
#loc63 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_12.c":101:1)
#loc64 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_12.c":104:1)
#loc65 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_12.c":103:5)
#loc66 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_12.c":103:11)
#loc67 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_12.c":63:1)
#loc68 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_12.c":99:1)
#loc69 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_12.c":68:13)
#loc70 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_12.c":68:32)
#loc71 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_12.c":69:13)
#loc72 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_12.c":69:21)
#loc73 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_12.c":85:13)
#loc74 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_12.c":85:32)
#loc75 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_12.c":86:13)
#loc76 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_12.c":86:21)
#loc77 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_12.c":65:5)
#loc78 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_12.c":98:5)
#loc79 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_12.c":65:8)
#loc80 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_12.c":65:33)
#loc81 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_12.c":66:5)
#loc82 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_12.c":81:5)
#loc83 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_12.c":83:5)
#loc84 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_12.c":67:9)
#loc85 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_12.c":80:9)
#loc86 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_12.c":68:22)
#loc87 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_12.c":68:31)
#loc88 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_12.c":71:13)
#loc89 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_12.c":75:13)
#loc90 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_12.c":71:17)
#loc91 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_12.c":71:22)
#loc92 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_12.c":72:13)
#loc93 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_12.c":73:27)
#loc94 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_12.c":73:17)
#loc95 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_12.c":74:21)
#loc96 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_12.c":74:17)
#loc97 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_12.c":76:13)
#loc98 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_12.c":79:13)
#loc99 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_12.c":76:17)
#loc100 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_12.c":77:13)
#loc101 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_12.c":78:27)
#loc102 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_12.c":78:17)
#loc103 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_12.c":84:9)
#loc104 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_12.c":97:9)
#loc105 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_12.c":85:22)
#loc106 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_12.c":85:31)
#loc107 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_12.c":88:13)
#loc108 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_12.c":92:13)
#loc109 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_12.c":88:17)
#loc110 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_12.c":88:22)
#loc111 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_12.c":89:13)
#loc112 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_12.c":90:27)
#loc113 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_12.c":90:17)
#loc114 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_12.c":91:21)
#loc115 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_12.c":91:17)
#loc116 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_12.c":93:13)
#loc117 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_12.c":96:13)
#loc118 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_12.c":93:17)
#loc119 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_12.c":94:13)
#loc120 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_12.c":95:27)
#loc121 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_12.c":95:17)
#loc122 = loc(fused[#loc1, #loc2])
#loc123 = loc(fused[#loc3, #loc4])
#loc124 = loc(fused[#loc5, #loc6])
#loc125 = loc(fused[#loc9, #loc10])
#loc126 = loc(fused[#loc11, #loc12])
#loc127 = loc(fused[#loc13, #loc14])
#loc128 = loc(fused[#loc15, #loc16])
#loc129 = loc(fused[#loc17, #loc18])
#loc130 = loc(fused[#loc19, #loc20])
#loc131 = loc(fused[#loc21, #loc22])
#loc132 = loc(fused[#loc23, #loc24, #loc25, #loc20])
#loc133 = loc(fused[#loc26, #loc27])
#loc134 = loc(fused[#loc28, #loc29])
#loc135 = loc(fused[#loc30, #loc31])
#loc136 = loc(fused[#loc32, #loc33])
#loc137 = loc(fused[#loc34, #loc35])
#loc138 = loc(fused[#loc38, #loc37])
#loc139 = loc(fused[#loc39, #loc40])
#loc140 = loc(fused[#loc42, #loc40])
#loc141 = loc(fused[#loc44, #loc45])
#loc142 = loc(fused[#loc46, #loc47])
#loc143 = loc(fused[#loc48, #loc49])
#loc144 = loc(fused[#loc50, #loc51])
#loc145 = loc(fused[#loc52, #loc49])
#loc146 = loc(fused[#loc56, #loc55])
#loc147 = loc(fused[#loc57, #loc58])
#loc148 = loc(fused[#loc60, #loc58])
#loc149 = loc(fused[#loc63, #loc64])
#loc150 = loc(fused[#loc65, #loc66])
#loc151 = loc(fused[#loc67, #loc68])
#loc152 = loc(fused[#loc69, #loc70])
#loc153 = loc(fused[#loc71, #loc72])
#loc154 = loc(fused[#loc73, #loc74])
#loc155 = loc(fused[#loc75, #loc76])
#loc156 = loc(fused[#loc77, #loc78])
#loc157 = loc(fused[#loc79, #loc80])
#loc158 = loc(fused[#loc81, #loc82, #loc83, #loc78])
#loc159 = loc(fused[#loc84, #loc85])
#loc160 = loc(fused[#loc86, #loc87])
#loc161 = loc(fused[#loc88, #loc89])
#loc162 = loc(fused[#loc90, #loc91])
#loc163 = loc(fused[#loc92, #loc89])
#loc164 = loc(fused[#loc96, #loc95])
#loc165 = loc(fused[#loc97, #loc98])
#loc166 = loc(fused[#loc100, #loc98])
#loc167 = loc(fused[#loc103, #loc104])
#loc168 = loc(fused[#loc105, #loc106])
#loc169 = loc(fused[#loc107, #loc108])
#loc170 = loc(fused[#loc109, #loc110])
#loc171 = loc(fused[#loc111, #loc108])
#loc172 = loc(fused[#loc115, #loc114])
#loc173 = loc(fused[#loc116, #loc117])
#loc174 = loc(fused[#loc119, #loc117])
