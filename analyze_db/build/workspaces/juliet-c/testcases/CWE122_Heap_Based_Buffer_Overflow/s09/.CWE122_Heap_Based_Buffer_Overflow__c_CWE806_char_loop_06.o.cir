!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i32 = dense<32> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little", "dlti.mangling_mode" = "e">} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc225)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc226)
  cir.func private @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc227)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc228)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc229)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc231)
    %1 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc15)
    %2 = cir.const #cir.int<100> : !s32i loc(#loc16)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc16)
    %4 = cir.const #cir.int<1> : !u64i loc(#loc232)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc233)
    %6 = cir.call @malloc(%5) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc15)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc234)
    cir.store %7, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc235)
    cir.scope {
      %8 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc23)
      %9 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc24)
      %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc24)
      %11 = cir.cmp(eq, %8, %10) : !cir.ptr<!s8i>, !cir.bool loc(#loc237)
      cir.if %11 {
        %12 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc26)
        %13 = cir.const #cir.int<1> : !s32i loc(#loc27)
        %14 = cir.unary(minus, %13) nsw : !s32i, !s32i loc(#loc28)
        cir.call @exit(%14) : (!s32i) -> () extra(#fn_attr) loc(#loc26)
      } loc(#loc238)
    } loc(#loc236)
    cir.scope {
      %8 = cir.const #cir.int<5> : !s32i loc(#loc31)
      %9 = cir.const #cir.int<5> : !s32i loc(#loc32)
      %10 = cir.cmp(eq, %8, %9) : !s32i, !cir.bool loc(#loc240)
      cir.if %10 {
        %11 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc34)
        %12 = cir.cast(bitcast, %11 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc34)
        %13 = cir.const #cir.int<65> : !s32i loc(#loc35)
        %14 = cir.const #cir.int<100> : !s32i loc(#loc36)
        %15 = cir.const #cir.int<1> : !s32i loc(#loc37)
        %16 = cir.binop(sub, %14, %15) nsw : !s32i loc(#loc36)
        %17 = cir.cast(integral, %16 : !s32i), !u64i loc(#loc36)
        cir.libc.memset %17 bytes from %12 set to %13 : !cir.ptr<!void>, !s32i, !u64i loc(#loc242)
        %18 = cir.const #cir.int<0> : !s32i loc(#loc40)
        %19 = cir.cast(integral, %18 : !s32i), !s8i loc(#loc40)
        %20 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc41)
        %21 = cir.const #cir.int<100> : !s32i loc(#loc42)
        %22 = cir.const #cir.int<1> : !s32i loc(#loc43)
        %23 = cir.binop(sub, %21, %22) nsw : !s32i loc(#loc42)
        %24 = cir.ptr_stride(%20 : !cir.ptr<!s8i>, %23 : !s32i), !cir.ptr<!s8i> loc(#loc44)
        cir.store %19, %24 : !s8i, !cir.ptr<!s8i> loc(#loc243)
      } loc(#loc241)
    } loc(#loc239)
    cir.scope {
      %8 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc245)
      %9 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc246)
      %10 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen"] {alignment = 8 : i64} loc(#loc247)
      %11 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc245)
      cir.store %11, %8 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc245)
      %12 = cir.get_global @strlen : !cir.ptr<!cir.func<(!cir.ptr<!s8i>) -> !u64i>> loc(#loc52)
      %13 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc53)
      %14 = cir.call @strlen(%13) : (!cir.ptr<!s8i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc52)
      cir.store %14, %10 : !u64i, !cir.ptr<!u64i> loc(#loc248)
      cir.scope {
        %26 = cir.const #cir.int<0> : !s32i loc(#loc58)
        %27 = cir.cast(integral, %26 : !s32i), !u64i loc(#loc58)
        cir.store %27, %9 : !u64i, !cir.ptr<!u64i> loc(#loc250)
        cir.for : cond {
          %28 = cir.load %9 : !cir.ptr<!u64i>, !u64i loc(#loc60)
          %29 = cir.load %10 : !cir.ptr<!u64i>, !u64i loc(#loc61)
          %30 = cir.cmp(lt, %28, %29) : !u64i, !cir.bool loc(#loc251)
          cir.condition(%30) loc(#loc62)
        } body {
          cir.scope {
            %28 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc64)
            %29 = cir.load %9 : !cir.ptr<!u64i>, !u64i loc(#loc65)
            %30 = cir.ptr_stride(%28 : !cir.ptr<!s8i>, %29 : !u64i), !cir.ptr<!s8i> loc(#loc66)
            %31 = cir.load %30 : !cir.ptr<!s8i>, !s8i loc(#loc64)
            %32 = cir.load %9 : !cir.ptr<!u64i>, !u64i loc(#loc67)
            %33 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc68)
            %34 = cir.ptr_stride(%33 : !cir.ptr<!s8i>, %32 : !u64i), !cir.ptr<!s8i> loc(#loc68)
            cir.store %31, %34 : !s8i, !cir.ptr<!s8i> loc(#loc253)
          } loc(#loc252)
          cir.yield loc(#loc57)
        } step {
          %28 = cir.load %9 : !cir.ptr<!u64i>, !u64i loc(#loc69)
          %29 = cir.unary(inc, %28) : !u64i, !u64i loc(#loc70)
          cir.store %29, %9 : !u64i, !cir.ptr<!u64i> loc(#loc254)
          cir.yield loc(#loc249)
        } loc(#loc249)
      } loc(#loc249)
      %15 = cir.const #cir.int<0> : !s32i loc(#loc71)
      %16 = cir.cast(integral, %15 : !s32i), !s8i loc(#loc71)
      %17 = cir.const #cir.int<50> : !s32i loc(#loc72)
      %18 = cir.const #cir.int<1> : !s32i loc(#loc73)
      %19 = cir.binop(sub, %17, %18) nsw : !s32i loc(#loc72)
      %20 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc74)
      %21 = cir.ptr_stride(%20 : !cir.ptr<!s8i>, %19 : !s32i), !cir.ptr<!s8i> loc(#loc74)
      cir.store %16, %21 : !s8i, !cir.ptr<!s8i> loc(#loc255)
      %22 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc75)
      cir.call @printLine(%22) : (!cir.ptr<!s8i>) -> () loc(#loc76)
      %23 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc77)
      %24 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc78)
      %25 = cir.cast(bitcast, %24 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc78)
      cir.call @free(%25) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc77)
    } loc(#loc244)
    cir.return loc(#loc12)
  } loc(#loc230)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<()>> loc(#loc257)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc81)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<()>> loc(#loc258)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc83)
    cir.return loc(#loc80)
  } loc(#loc256)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc85)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc260)
    %1 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc90)
    %2 = cir.const #cir.int<100> : !s32i loc(#loc91)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc91)
    %4 = cir.const #cir.int<1> : !u64i loc(#loc261)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc262)
    %6 = cir.call @malloc(%5) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc90)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc263)
    cir.store %7, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc264)
    cir.scope {
      %8 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc98)
      %9 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc99)
      %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc99)
      %11 = cir.cmp(eq, %8, %10) : !cir.ptr<!s8i>, !cir.bool loc(#loc266)
      cir.if %11 {
        %12 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc101)
        %13 = cir.const #cir.int<1> : !s32i loc(#loc102)
        %14 = cir.unary(minus, %13) nsw : !s32i, !s32i loc(#loc103)
        cir.call @exit(%14) : (!s32i) -> () extra(#fn_attr) loc(#loc101)
      } loc(#loc267)
    } loc(#loc265)
    cir.scope {
      %8 = cir.const #cir.int<5> : !s32i loc(#loc106)
      %9 = cir.const #cir.int<5> : !s32i loc(#loc107)
      %10 = cir.cmp(ne, %8, %9) : !s32i, !cir.bool loc(#loc269)
      cir.if %10 {
        %11 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc85)
        %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc85)
        cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc111)
      } else {
        %11 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc112)
        %12 = cir.cast(bitcast, %11 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc112)
        %13 = cir.const #cir.int<65> : !s32i loc(#loc113)
        %14 = cir.const #cir.int<50> : !s32i loc(#loc114)
        %15 = cir.const #cir.int<1> : !s32i loc(#loc115)
        %16 = cir.binop(sub, %14, %15) nsw : !s32i loc(#loc114)
        %17 = cir.cast(integral, %16 : !s32i), !u64i loc(#loc114)
        cir.libc.memset %17 bytes from %12 set to %13 : !cir.ptr<!void>, !s32i, !u64i loc(#loc271)
        %18 = cir.const #cir.int<0> : !s32i loc(#loc118)
        %19 = cir.cast(integral, %18 : !s32i), !s8i loc(#loc118)
        %20 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc119)
        %21 = cir.const #cir.int<50> : !s32i loc(#loc120)
        %22 = cir.const #cir.int<1> : !s32i loc(#loc121)
        %23 = cir.binop(sub, %21, %22) nsw : !s32i loc(#loc120)
        %24 = cir.ptr_stride(%20 : !cir.ptr<!s8i>, %23 : !s32i), !cir.ptr<!s8i> loc(#loc122)
        cir.store %19, %24 : !s8i, !cir.ptr<!s8i> loc(#loc272)
      } loc(#loc270)
    } loc(#loc268)
    cir.scope {
      %8 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc274)
      %9 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc275)
      %10 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen"] {alignment = 8 : i64} loc(#loc276)
      %11 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc274)
      cir.store %11, %8 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc274)
      %12 = cir.get_global @strlen : !cir.ptr<!cir.func<(!cir.ptr<!s8i>) -> !u64i>> loc(#loc130)
      %13 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc131)
      %14 = cir.call @strlen(%13) : (!cir.ptr<!s8i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc130)
      cir.store %14, %10 : !u64i, !cir.ptr<!u64i> loc(#loc277)
      cir.scope {
        %26 = cir.const #cir.int<0> : !s32i loc(#loc136)
        %27 = cir.cast(integral, %26 : !s32i), !u64i loc(#loc136)
        cir.store %27, %9 : !u64i, !cir.ptr<!u64i> loc(#loc279)
        cir.for : cond {
          %28 = cir.load %9 : !cir.ptr<!u64i>, !u64i loc(#loc138)
          %29 = cir.load %10 : !cir.ptr<!u64i>, !u64i loc(#loc139)
          %30 = cir.cmp(lt, %28, %29) : !u64i, !cir.bool loc(#loc280)
          cir.condition(%30) loc(#loc140)
        } body {
          cir.scope {
            %28 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc142)
            %29 = cir.load %9 : !cir.ptr<!u64i>, !u64i loc(#loc143)
            %30 = cir.ptr_stride(%28 : !cir.ptr<!s8i>, %29 : !u64i), !cir.ptr<!s8i> loc(#loc144)
            %31 = cir.load %30 : !cir.ptr<!s8i>, !s8i loc(#loc142)
            %32 = cir.load %9 : !cir.ptr<!u64i>, !u64i loc(#loc145)
            %33 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc146)
            %34 = cir.ptr_stride(%33 : !cir.ptr<!s8i>, %32 : !u64i), !cir.ptr<!s8i> loc(#loc146)
            cir.store %31, %34 : !s8i, !cir.ptr<!s8i> loc(#loc282)
          } loc(#loc281)
          cir.yield loc(#loc135)
        } step {
          %28 = cir.load %9 : !cir.ptr<!u64i>, !u64i loc(#loc147)
          %29 = cir.unary(inc, %28) : !u64i, !u64i loc(#loc148)
          cir.store %29, %9 : !u64i, !cir.ptr<!u64i> loc(#loc283)
          cir.yield loc(#loc278)
        } loc(#loc278)
      } loc(#loc278)
      %15 = cir.const #cir.int<0> : !s32i loc(#loc149)
      %16 = cir.cast(integral, %15 : !s32i), !s8i loc(#loc149)
      %17 = cir.const #cir.int<50> : !s32i loc(#loc150)
      %18 = cir.const #cir.int<1> : !s32i loc(#loc151)
      %19 = cir.binop(sub, %17, %18) nsw : !s32i loc(#loc150)
      %20 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc152)
      %21 = cir.ptr_stride(%20 : !cir.ptr<!s8i>, %19 : !s32i), !cir.ptr<!s8i> loc(#loc152)
      cir.store %16, %21 : !s8i, !cir.ptr<!s8i> loc(#loc284)
      %22 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc153)
      cir.call @printLine(%22) : (!cir.ptr<!s8i>) -> () loc(#loc154)
      %23 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc155)
      %24 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc156)
      %25 = cir.cast(bitcast, %24 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc156)
      cir.call @free(%25) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc155)
    } loc(#loc273)
    cir.return loc(#loc87)
  } loc(#loc259)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc286)
    %1 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc161)
    %2 = cir.const #cir.int<100> : !s32i loc(#loc162)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc162)
    %4 = cir.const #cir.int<1> : !u64i loc(#loc287)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc288)
    %6 = cir.call @malloc(%5) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc161)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc289)
    cir.store %7, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc290)
    cir.scope {
      %8 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc169)
      %9 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc170)
      %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc170)
      %11 = cir.cmp(eq, %8, %10) : !cir.ptr<!s8i>, !cir.bool loc(#loc292)
      cir.if %11 {
        %12 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc172)
        %13 = cir.const #cir.int<1> : !s32i loc(#loc173)
        %14 = cir.unary(minus, %13) nsw : !s32i, !s32i loc(#loc174)
        cir.call @exit(%14) : (!s32i) -> () extra(#fn_attr) loc(#loc172)
      } loc(#loc293)
    } loc(#loc291)
    cir.scope {
      %8 = cir.const #cir.int<5> : !s32i loc(#loc177)
      %9 = cir.const #cir.int<5> : !s32i loc(#loc178)
      %10 = cir.cmp(eq, %8, %9) : !s32i, !cir.bool loc(#loc295)
      cir.if %10 {
        %11 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc180)
        %12 = cir.cast(bitcast, %11 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc180)
        %13 = cir.const #cir.int<65> : !s32i loc(#loc181)
        %14 = cir.const #cir.int<50> : !s32i loc(#loc182)
        %15 = cir.const #cir.int<1> : !s32i loc(#loc183)
        %16 = cir.binop(sub, %14, %15) nsw : !s32i loc(#loc182)
        %17 = cir.cast(integral, %16 : !s32i), !u64i loc(#loc182)
        cir.libc.memset %17 bytes from %12 set to %13 : !cir.ptr<!void>, !s32i, !u64i loc(#loc297)
        %18 = cir.const #cir.int<0> : !s32i loc(#loc186)
        %19 = cir.cast(integral, %18 : !s32i), !s8i loc(#loc186)
        %20 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc187)
        %21 = cir.const #cir.int<50> : !s32i loc(#loc188)
        %22 = cir.const #cir.int<1> : !s32i loc(#loc189)
        %23 = cir.binop(sub, %21, %22) nsw : !s32i loc(#loc188)
        %24 = cir.ptr_stride(%20 : !cir.ptr<!s8i>, %23 : !s32i), !cir.ptr<!s8i> loc(#loc190)
        cir.store %19, %24 : !s8i, !cir.ptr<!s8i> loc(#loc298)
      } loc(#loc296)
    } loc(#loc294)
    cir.scope {
      %8 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc300)
      %9 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc301)
      %10 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen"] {alignment = 8 : i64} loc(#loc302)
      %11 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc300)
      cir.store %11, %8 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc300)
      %12 = cir.get_global @strlen : !cir.ptr<!cir.func<(!cir.ptr<!s8i>) -> !u64i>> loc(#loc198)
      %13 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc199)
      %14 = cir.call @strlen(%13) : (!cir.ptr<!s8i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc198)
      cir.store %14, %10 : !u64i, !cir.ptr<!u64i> loc(#loc303)
      cir.scope {
        %26 = cir.const #cir.int<0> : !s32i loc(#loc204)
        %27 = cir.cast(integral, %26 : !s32i), !u64i loc(#loc204)
        cir.store %27, %9 : !u64i, !cir.ptr<!u64i> loc(#loc305)
        cir.for : cond {
          %28 = cir.load %9 : !cir.ptr<!u64i>, !u64i loc(#loc206)
          %29 = cir.load %10 : !cir.ptr<!u64i>, !u64i loc(#loc207)
          %30 = cir.cmp(lt, %28, %29) : !u64i, !cir.bool loc(#loc306)
          cir.condition(%30) loc(#loc208)
        } body {
          cir.scope {
            %28 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc210)
            %29 = cir.load %9 : !cir.ptr<!u64i>, !u64i loc(#loc211)
            %30 = cir.ptr_stride(%28 : !cir.ptr<!s8i>, %29 : !u64i), !cir.ptr<!s8i> loc(#loc212)
            %31 = cir.load %30 : !cir.ptr<!s8i>, !s8i loc(#loc210)
            %32 = cir.load %9 : !cir.ptr<!u64i>, !u64i loc(#loc213)
            %33 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc214)
            %34 = cir.ptr_stride(%33 : !cir.ptr<!s8i>, %32 : !u64i), !cir.ptr<!s8i> loc(#loc214)
            cir.store %31, %34 : !s8i, !cir.ptr<!s8i> loc(#loc308)
          } loc(#loc307)
          cir.yield loc(#loc203)
        } step {
          %28 = cir.load %9 : !cir.ptr<!u64i>, !u64i loc(#loc215)
          %29 = cir.unary(inc, %28) : !u64i, !u64i loc(#loc216)
          cir.store %29, %9 : !u64i, !cir.ptr<!u64i> loc(#loc309)
          cir.yield loc(#loc304)
        } loc(#loc304)
      } loc(#loc304)
      %15 = cir.const #cir.int<0> : !s32i loc(#loc217)
      %16 = cir.cast(integral, %15 : !s32i), !s8i loc(#loc217)
      %17 = cir.const #cir.int<50> : !s32i loc(#loc218)
      %18 = cir.const #cir.int<1> : !s32i loc(#loc219)
      %19 = cir.binop(sub, %17, %18) nsw : !s32i loc(#loc218)
      %20 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc220)
      %21 = cir.ptr_stride(%20 : !cir.ptr<!s8i>, %19 : !s32i), !cir.ptr<!s8i> loc(#loc220)
      cir.store %16, %21 : !s8i, !cir.ptr<!s8i> loc(#loc310)
      %22 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc221)
      cir.call @printLine(%22) : (!cir.ptr<!s8i>) -> () loc(#loc222)
      %23 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc223)
      %24 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc224)
      %25 = cir.cast(bitcast, %24 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc224)
      cir.call @free(%25) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc223)
    } loc(#loc299)
    cir.return loc(#loc158)
  } loc(#loc285)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("/usr/include/string.h":407:1)
#loc6 = loc("/usr/include/string.h":408:33)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("/usr/include/stdlib.h":687:1)
#loc10 = loc("/usr/include/stdlib.h":687:32)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":27:1)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":51:1)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":29:5)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":29:12)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":30:20)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":30:27)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":30:31)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":30:42)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":30:43)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":30:5)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":31:5)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":31:33)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":31:9)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":31:17)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":31:23)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":31:24)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":31:30)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":31:29)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":32:5)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":37:5)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":32:8)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":32:27)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":33:5)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":35:16)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":35:22)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":35:27)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":35:31)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":35:9)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":35:32)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":36:23)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":36:9)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":36:14)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":36:18)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":36:19)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":38:5)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":50:5)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":39:9)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":39:25)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":40:9)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":40:16)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":40:19)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":41:19)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":41:26)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":41:9)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":41:30)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":43:9)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":46:9)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":43:18)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":43:14)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":43:21)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":43:25)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":43:23)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":44:9)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":45:23)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":45:28)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":45:29)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":45:18)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":45:13)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":43:35)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":43:34)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":47:22)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":47:14)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":47:17)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":47:9)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":48:19)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":48:9)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":49:9)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":49:14)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":116:1)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":120:1)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":118:5)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":118:14)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":119:5)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":119:14)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":66:19)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":58:1)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":87:1)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":60:5)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":60:12)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":61:20)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":61:27)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":61:31)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":61:42)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":61:43)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":61:5)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":62:5)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":62:33)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":62:9)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":62:17)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":62:23)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":62:24)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":62:30)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":62:29)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":63:5)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":73:5)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":63:8)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":63:27)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":64:5)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":67:5)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":69:5)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":66:9)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":71:16)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":71:22)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":71:27)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":71:30)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":71:9)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":71:31)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":72:22)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":72:9)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":72:14)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":72:17)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":72:18)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":74:5)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":86:5)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":75:9)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":75:25)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":76:9)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":76:16)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":76:19)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":77:19)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":77:26)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":77:9)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":77:30)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":79:9)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":82:9)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":79:18)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":79:14)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":79:21)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":79:25)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":79:23)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":80:9)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":81:23)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":81:28)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":81:29)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":81:18)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":81:13)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":79:35)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":79:34)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":83:22)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":83:14)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":83:17)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":83:9)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":84:19)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":84:9)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":85:9)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":85:14)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":90:1)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":114:1)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":92:5)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":92:12)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":93:20)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":93:27)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":93:31)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":93:42)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":93:43)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":93:5)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":94:5)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":94:33)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":94:9)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":94:17)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":94:23)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":94:24)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":94:30)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":94:29)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":95:5)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":100:5)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":95:8)
#loc178 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":95:27)
#loc179 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":96:5)
#loc180 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":98:16)
#loc181 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":98:22)
#loc182 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":98:27)
#loc183 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":98:30)
#loc184 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":98:9)
#loc185 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":98:31)
#loc186 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":99:22)
#loc187 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":99:9)
#loc188 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":99:14)
#loc189 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":99:17)
#loc190 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":99:18)
#loc191 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":101:5)
#loc192 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":113:5)
#loc193 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":102:9)
#loc194 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":102:25)
#loc195 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":103:9)
#loc196 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":103:16)
#loc197 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":103:19)
#loc198 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":104:19)
#loc199 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":104:26)
#loc200 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":104:9)
#loc201 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":104:30)
#loc202 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":106:9)
#loc203 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":109:9)
#loc204 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":106:18)
#loc205 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":106:14)
#loc206 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":106:21)
#loc207 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":106:25)
#loc208 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":106:23)
#loc209 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":107:9)
#loc210 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":108:23)
#loc211 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":108:28)
#loc212 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":108:29)
#loc213 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":108:18)
#loc214 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":108:13)
#loc215 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":106:35)
#loc216 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":106:34)
#loc217 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":110:22)
#loc218 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":110:14)
#loc219 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":110:17)
#loc220 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":110:9)
#loc221 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":111:19)
#loc222 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":111:9)
#loc223 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":112:9)
#loc224 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":112:14)
#loc225 = loc(fused[#loc1, #loc2])
#loc226 = loc(fused[#loc3, #loc4])
#loc227 = loc(fused[#loc5, #loc6])
#loc228 = loc(fused[#loc7, #loc8])
#loc229 = loc(fused[#loc9, #loc10])
#loc230 = loc(fused[#loc11, #loc12])
#loc231 = loc(fused[#loc13, #loc14])
#loc232 = loc(fused[#loc17, #loc18])
#loc233 = loc(fused[#loc16, #loc18])
#loc234 = loc(fused[#loc15, #loc19])
#loc235 = loc(fused[#loc20, #loc19])
#loc236 = loc(fused[#loc21, #loc22])
#loc237 = loc(fused[#loc23, #loc24])
#loc238 = loc(fused[#loc25, #loc22])
#loc239 = loc(fused[#loc29, #loc30])
#loc240 = loc(fused[#loc31, #loc32])
#loc241 = loc(fused[#loc33, #loc30])
#loc242 = loc(fused[#loc38, #loc39])
#loc243 = loc(fused[#loc41, #loc40])
#loc244 = loc(fused[#loc45, #loc46])
#loc245 = loc(fused[#loc47, #loc48])
#loc246 = loc(fused[#loc49, #loc50])
#loc247 = loc(fused[#loc49, #loc51])
#loc248 = loc(fused[#loc54, #loc55])
#loc249 = loc(fused[#loc56, #loc57])
#loc250 = loc(fused[#loc59, #loc58])
#loc251 = loc(fused[#loc60, #loc61])
#loc252 = loc(fused[#loc63, #loc57])
#loc253 = loc(fused[#loc68, #loc66])
#loc254 = loc(fused[#loc70, #loc69])
#loc255 = loc(fused[#loc74, #loc71])
#loc256 = loc(fused[#loc79, #loc80])
#loc257 = loc(fused[#loc81, #loc82])
#loc258 = loc(fused[#loc83, #loc84])
#loc259 = loc(fused[#loc86, #loc87])
#loc260 = loc(fused[#loc88, #loc89])
#loc261 = loc(fused[#loc92, #loc93])
#loc262 = loc(fused[#loc91, #loc93])
#loc263 = loc(fused[#loc90, #loc94])
#loc264 = loc(fused[#loc95, #loc94])
#loc265 = loc(fused[#loc96, #loc97])
#loc266 = loc(fused[#loc98, #loc99])
#loc267 = loc(fused[#loc100, #loc97])
#loc268 = loc(fused[#loc104, #loc105])
#loc269 = loc(fused[#loc106, #loc107])
#loc270 = loc(fused[#loc108, #loc109, #loc110, #loc105])
#loc271 = loc(fused[#loc116, #loc117])
#loc272 = loc(fused[#loc119, #loc118])
#loc273 = loc(fused[#loc123, #loc124])
#loc274 = loc(fused[#loc125, #loc126])
#loc275 = loc(fused[#loc127, #loc128])
#loc276 = loc(fused[#loc127, #loc129])
#loc277 = loc(fused[#loc132, #loc133])
#loc278 = loc(fused[#loc134, #loc135])
#loc279 = loc(fused[#loc137, #loc136])
#loc280 = loc(fused[#loc138, #loc139])
#loc281 = loc(fused[#loc141, #loc135])
#loc282 = loc(fused[#loc146, #loc144])
#loc283 = loc(fused[#loc148, #loc147])
#loc284 = loc(fused[#loc152, #loc149])
#loc285 = loc(fused[#loc157, #loc158])
#loc286 = loc(fused[#loc159, #loc160])
#loc287 = loc(fused[#loc163, #loc164])
#loc288 = loc(fused[#loc162, #loc164])
#loc289 = loc(fused[#loc161, #loc165])
#loc290 = loc(fused[#loc166, #loc165])
#loc291 = loc(fused[#loc167, #loc168])
#loc292 = loc(fused[#loc169, #loc170])
#loc293 = loc(fused[#loc171, #loc168])
#loc294 = loc(fused[#loc175, #loc176])
#loc295 = loc(fused[#loc177, #loc178])
#loc296 = loc(fused[#loc179, #loc176])
#loc297 = loc(fused[#loc184, #loc185])
#loc298 = loc(fused[#loc187, #loc186])
#loc299 = loc(fused[#loc191, #loc192])
#loc300 = loc(fused[#loc193, #loc194])
#loc301 = loc(fused[#loc195, #loc196])
#loc302 = loc(fused[#loc195, #loc197])
#loc303 = loc(fused[#loc200, #loc201])
#loc304 = loc(fused[#loc202, #loc203])
#loc305 = loc(fused[#loc205, #loc204])
#loc306 = loc(fused[#loc206, #loc207])
#loc307 = loc(fused[#loc209, #loc203])
#loc308 = loc(fused[#loc214, #loc212])
#loc309 = loc(fused[#loc216, #loc215])
#loc310 = loc(fused[#loc220, #loc217])
