!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc7 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_22b.c":27:67)
#loc8 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_22b.c":27:80)
#loc30 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_22b.c":49:72)
#loc31 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_22b.c":49:85)
#loc60 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_22b.c":72:72)
#loc61 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_22b.c":72:85)
#loc88 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_22b.c":90:71)
#loc89 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_22b.c":90:84)
#loc105 = loc(fused[#loc7, #loc8])
#loc114 = loc(fused[#loc30, #loc31])
#loc124 = loc(fused[#loc60, #loc61])
#loc134 = loc(fused[#loc88, #loc89])
module @"/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_rand_square_22b.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f16 = dense<16> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e", "dlti.endianness" = "little">} {
  cir.global "private" external @CWE190_Integer_Overflow__unsigned_int_rand_square_22_badGlobal : !s32i {alignment = 4 : i64} loc(#loc102)
  cir.func private @printUnsignedLine(!u32i) loc(#loc103)
  cir.func @CWE190_Integer_Overflow__unsigned_int_rand_square_22_badSink(%arg0: !u32i loc(fused[#loc7, #loc8])) extra(#fn_attr) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data", init] {alignment = 4 : i64} loc(#loc105)
    cir.store %arg0, %0 : !u32i, !cir.ptr<!u32i> loc(#loc9)
    cir.scope {
      %1 = cir.get_global @CWE190_Integer_Overflow__unsigned_int_rand_square_22_badGlobal : !cir.ptr<!s32i> loc(#loc102)
      %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc12)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc12)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc109)
          %5 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc18)
          %6 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc17)
          %7 = cir.binop(mul, %5, %6) : !u32i loc(#loc110)
          cir.store %7, %4 : !u32i, !cir.ptr<!u32i> loc(#loc109)
          %8 = cir.load %4 : !cir.ptr<!u32i>, !u32i loc(#loc19)
          cir.call @printUnsignedLine(%8) : (!u32i) -> () loc(#loc20)
        } loc(#loc108)
      } loc(#loc107)
    } loc(#loc106)
    cir.return loc(#loc6)
  } loc(#loc104)
  cir.global "private" external @CWE190_Integer_Overflow__unsigned_int_rand_square_22_goodB2G1Global : !s32i {alignment = 4 : i64} loc(#loc111)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc112)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc25)
  cir.func private @sqrt(!cir.double) -> !cir.double extra(#fn_attr1) loc(#loc26)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc27)
  cir.func @CWE190_Integer_Overflow__unsigned_int_rand_square_22_goodB2G1Sink(%arg0: !u32i loc(fused[#loc30, #loc31])) extra(#fn_attr) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data", init] {alignment = 4 : i64} loc(#loc114)
    cir.store %arg0, %0 : !u32i, !cir.ptr<!u32i> loc(#loc32)
    cir.scope {
      %1 = cir.get_global @CWE190_Integer_Overflow__unsigned_int_rand_square_22_goodB2G1Global : !cir.ptr<!s32i> loc(#loc111)
      %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc35)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc35)
      cir.if %3 {
        %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc25)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc25)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc39)
      } else {
        cir.scope {
          %4 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc42)
          %5 = cir.cast(integral, %4 : !u32i), !s64i loc(#loc42)
          %6 = cir.cast(integral, %5 : !s64i), !s32i loc(#loc42)
          %7 = cir.abs %6 poison : !s32i loc(#loc43)
          %8 = cir.cast(integral, %7 : !s32i), !s64i loc(#loc43)
          %9 = cir.get_global @sqrt : !cir.ptr<!cir.func<(!cir.double) -> !cir.double>> loc(#loc44)
          %10 = cir.const #cir.int<2147483647> : !s32i loc(#loc45)
          %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc45)
          %12 = cir.const #cir.int<2> : !u32i loc(#loc45)
          %13 = cir.binop(mul, %11, %12) : !u32i loc(#loc45)
          %14 = cir.const #cir.int<1> : !u32i loc(#loc45)
          %15 = cir.binop(add, %13, %14) : !u32i loc(#loc45)
          %16 = cir.cast(int_to_float, %15 : !u32i), !cir.double loc(#loc45)
          %17 = cir.call @sqrt(%16) : (!cir.double) -> !cir.double extra(#fn_attr1) loc(#loc44)
          %18 = cir.cast(float_to_int, %17 : !cir.double), !s64i loc(#loc44)
          %19 = cir.cmp(lt, %8, %18) : !s64i, !cir.bool loc(#loc118)
          cir.if %19 {
            %20 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc120)
            %21 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc52)
            %22 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc51)
            %23 = cir.binop(mul, %21, %22) : !u32i loc(#loc121)
            cir.store %23, %20 : !u32i, !cir.ptr<!u32i> loc(#loc120)
            %24 = cir.load %20 : !cir.ptr<!u32i>, !u32i loc(#loc53)
            cir.call @printUnsignedLine(%24) : (!u32i) -> () loc(#loc54)
          } else {
            %20 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc27)
            %21 = cir.cast(array_to_ptrdecay, %20 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc27)
            cir.call @printLine(%21) : (!cir.ptr<!s8i>) -> () loc(#loc55)
          } loc(#loc119)
        } loc(#loc117)
      } loc(#loc116)
    } loc(#loc115)
    cir.return loc(#loc29)
  } loc(#loc113)
  cir.global "private" external @CWE190_Integer_Overflow__unsigned_int_rand_square_22_goodB2G2Global : !s32i {alignment = 4 : i64} loc(#loc122)
  cir.func @CWE190_Integer_Overflow__unsigned_int_rand_square_22_goodB2G2Sink(%arg0: !u32i loc(fused[#loc60, #loc61])) extra(#fn_attr) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data", init] {alignment = 4 : i64} loc(#loc124)
    cir.store %arg0, %0 : !u32i, !cir.ptr<!u32i> loc(#loc62)
    cir.scope {
      %1 = cir.get_global @CWE190_Integer_Overflow__unsigned_int_rand_square_22_goodB2G2Global : !cir.ptr<!s32i> loc(#loc122)
      %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc65)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc65)
      cir.if %3 {
        cir.scope {
          %4 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc69)
          %5 = cir.cast(integral, %4 : !u32i), !s64i loc(#loc69)
          %6 = cir.cast(integral, %5 : !s64i), !s32i loc(#loc69)
          %7 = cir.abs %6 poison : !s32i loc(#loc70)
          %8 = cir.cast(integral, %7 : !s32i), !s64i loc(#loc70)
          %9 = cir.get_global @sqrt : !cir.ptr<!cir.func<(!cir.double) -> !cir.double>> loc(#loc71)
          %10 = cir.const #cir.int<2147483647> : !s32i loc(#loc72)
          %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc72)
          %12 = cir.const #cir.int<2> : !u32i loc(#loc72)
          %13 = cir.binop(mul, %11, %12) : !u32i loc(#loc72)
          %14 = cir.const #cir.int<1> : !u32i loc(#loc72)
          %15 = cir.binop(add, %13, %14) : !u32i loc(#loc72)
          %16 = cir.cast(int_to_float, %15 : !u32i), !cir.double loc(#loc72)
          %17 = cir.call @sqrt(%16) : (!cir.double) -> !cir.double extra(#fn_attr1) loc(#loc71)
          %18 = cir.cast(float_to_int, %17 : !cir.double), !s64i loc(#loc71)
          %19 = cir.cmp(lt, %8, %18) : !s64i, !cir.bool loc(#loc128)
          cir.if %19 {
            %20 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc130)
            %21 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc79)
            %22 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc78)
            %23 = cir.binop(mul, %21, %22) : !u32i loc(#loc131)
            cir.store %23, %20 : !u32i, !cir.ptr<!u32i> loc(#loc130)
            %24 = cir.load %20 : !cir.ptr<!u32i>, !u32i loc(#loc80)
            cir.call @printUnsignedLine(%24) : (!u32i) -> () loc(#loc81)
          } else {
            %20 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc82)
            %21 = cir.cast(array_to_ptrdecay, %20 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc82)
            cir.call @printLine(%21) : (!cir.ptr<!s8i>) -> () loc(#loc83)
          } loc(#loc129)
        } loc(#loc127)
      } loc(#loc126)
    } loc(#loc125)
    cir.return loc(#loc59)
  } loc(#loc123)
  cir.global "private" external @CWE190_Integer_Overflow__unsigned_int_rand_square_22_goodG2BGlobal : !s32i {alignment = 4 : i64} loc(#loc132)
  cir.func @CWE190_Integer_Overflow__unsigned_int_rand_square_22_goodG2BSink(%arg0: !u32i loc(fused[#loc88, #loc89])) extra(#fn_attr) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data", init] {alignment = 4 : i64} loc(#loc134)
    cir.store %arg0, %0 : !u32i, !cir.ptr<!u32i> loc(#loc90)
    cir.scope {
      %1 = cir.get_global @CWE190_Integer_Overflow__unsigned_int_rand_square_22_goodG2BGlobal : !cir.ptr<!s32i> loc(#loc132)
      %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc93)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc93)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc138)
          %5 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc99)
          %6 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc98)
          %7 = cir.binop(mul, %5, %6) : !u32i loc(#loc139)
          cir.store %7, %4 : !u32i, !cir.ptr<!u32i> loc(#loc138)
          %8 = cir.load %4 : !cir.ptr<!u32i>, !u32i loc(#loc100)
          cir.call @printUnsignedLine(%8) : (!u32i) -> () loc(#loc101)
        } loc(#loc137)
      } loc(#loc136)
    } loc(#loc135)
    cir.return loc(#loc87)
  } loc(#loc133)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_rand_square_22b.c":0:0)
#loc1 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_22b.c":25:1)
#loc2 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_22b.c":25:12)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":34:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":34:47)
#loc5 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_22b.c":27:1)
#loc6 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_22b.c":37:1)
#loc9 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_22b.c":28:1)
#loc10 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_22b.c":29:5)
#loc11 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_22b.c":36:5)
#loc12 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_22b.c":29:8)
#loc13 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_22b.c":30:5)
#loc14 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_22b.c":31:9)
#loc15 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_22b.c":35:9)
#loc16 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_22b.c":33:13)
#loc17 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_22b.c":33:42)
#loc18 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_22b.c":33:35)
#loc19 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_22b.c":34:31)
#loc20 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_22b.c":34:13)
#loc21 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_22b.c":44:1)
#loc22 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_22b.c":44:12)
#loc23 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc24 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc25 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_22b.c":54:19)
#loc26 = loc("/usr/include/x86_64-linux-gnu/bits/mathcalls.h":143:1)
#loc27 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_22b.c":66:23)
#loc28 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_22b.c":49:1)
#loc29 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_22b.c":69:1)
#loc32 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_22b.c":50:1)
#loc33 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_22b.c":51:5)
#loc34 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_22b.c":68:5)
#loc35 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_22b.c":51:8)
#loc36 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_22b.c":52:5)
#loc37 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_22b.c":55:5)
#loc38 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_22b.c":57:5)
#loc39 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_22b.c":54:9)
#loc40 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_22b.c":59:9)
#loc41 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_22b.c":67:9)
#loc42 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_22b.c":59:23)
#loc43 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_22b.c":59:13)
#loc44 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_22b.c":59:37)
#loc45 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_22b.c":59:50)
#loc46 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_22b.c":59:58)
#loc47 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_22b.c":60:9)
#loc48 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_22b.c":63:9)
#loc49 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_22b.c":65:9)
#loc50 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_22b.c":61:13)
#loc51 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_22b.c":61:42)
#loc52 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_22b.c":61:35)
#loc53 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_22b.c":62:31)
#loc54 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_22b.c":62:13)
#loc55 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_22b.c":66:13)
#loc56 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_22b.c":45:1)
#loc57 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_22b.c":45:12)
#loc58 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_22b.c":72:1)
#loc59 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_22b.c":87:1)
#loc62 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_22b.c":73:1)
#loc63 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_22b.c":74:5)
#loc64 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_22b.c":86:5)
#loc65 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_22b.c":74:8)
#loc66 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_22b.c":75:5)
#loc67 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_22b.c":77:9)
#loc68 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_22b.c":85:9)
#loc69 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_22b.c":77:23)
#loc70 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_22b.c":77:13)
#loc71 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_22b.c":77:37)
#loc72 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_22b.c":77:50)
#loc73 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_22b.c":77:58)
#loc74 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_22b.c":78:9)
#loc75 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_22b.c":81:9)
#loc76 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_22b.c":83:9)
#loc77 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_22b.c":79:13)
#loc78 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_22b.c":79:42)
#loc79 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_22b.c":79:35)
#loc80 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_22b.c":80:31)
#loc81 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_22b.c":80:13)
#loc82 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_22b.c":84:23)
#loc83 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_22b.c":84:13)
#loc84 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_22b.c":46:1)
#loc85 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_22b.c":46:12)
#loc86 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_22b.c":90:1)
#loc87 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_22b.c":100:1)
#loc90 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_22b.c":91:1)
#loc91 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_22b.c":92:5)
#loc92 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_22b.c":99:5)
#loc93 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_22b.c":92:8)
#loc94 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_22b.c":93:5)
#loc95 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_22b.c":94:9)
#loc96 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_22b.c":98:9)
#loc97 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_22b.c":96:13)
#loc98 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_22b.c":96:42)
#loc99 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_22b.c":96:35)
#loc100 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_22b.c":97:31)
#loc101 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_22b.c":97:13)
#loc102 = loc(fused[#loc1, #loc2])
#loc103 = loc(fused[#loc3, #loc4])
#loc104 = loc(fused[#loc5, #loc6])
#loc106 = loc(fused[#loc10, #loc11])
#loc107 = loc(fused[#loc13, #loc11])
#loc108 = loc(fused[#loc14, #loc15])
#loc109 = loc(fused[#loc16, #loc17])
#loc110 = loc(fused[#loc18, #loc17])
#loc111 = loc(fused[#loc21, #loc22])
#loc112 = loc(fused[#loc23, #loc24])
#loc113 = loc(fused[#loc28, #loc29])
#loc115 = loc(fused[#loc33, #loc34])
#loc116 = loc(fused[#loc36, #loc37, #loc38, #loc34])
#loc117 = loc(fused[#loc40, #loc41])
#loc118 = loc(fused[#loc43, #loc46])
#loc119 = loc(fused[#loc47, #loc48, #loc49, #loc41])
#loc120 = loc(fused[#loc50, #loc51])
#loc121 = loc(fused[#loc52, #loc51])
#loc122 = loc(fused[#loc56, #loc57])
#loc123 = loc(fused[#loc58, #loc59])
#loc125 = loc(fused[#loc63, #loc64])
#loc126 = loc(fused[#loc66, #loc64])
#loc127 = loc(fused[#loc67, #loc68])
#loc128 = loc(fused[#loc70, #loc73])
#loc129 = loc(fused[#loc74, #loc75, #loc76, #loc68])
#loc130 = loc(fused[#loc77, #loc78])
#loc131 = loc(fused[#loc79, #loc78])
#loc132 = loc(fused[#loc84, #loc85])
#loc133 = loc(fused[#loc86, #loc87])
#loc135 = loc(fused[#loc91, #loc92])
#loc136 = loc(fused[#loc94, #loc92])
#loc137 = loc(fused[#loc95, #loc96])
#loc138 = loc(fused[#loc97, #loc98])
#loc139 = loc(fused[#loc99, #loc98])
