!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.record<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.record<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.record<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
!ty__IO_FILE = !cir.record<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/workspaces/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__float_fgets_11.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr = dense<64> : vector<4xi64>, "dlti.endianness" = "little", "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64>} {
  cir.func no_proto private @globalReturnsTrue(...) -> !s32i loc(#loc233)
  cir.func private @fgets(!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc234)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc235)
  cir.func private @atof(!cir.ptr<!s8i>) -> !cir.double extra(#fn_attr) loc(#loc236)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc237)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"fgets() failed.\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc11)
  cir.func private @printIntLine(!s32i) loc(#loc238)
  cir.func no_proto @CWE369_Divide_by_Zero__float_fgets_11_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 20>, !cir.ptr<!cir.array<!s8i x 20>>, ["inputBuffer"] {alignment = 16 : i64} loc(#loc240)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc241)
    %2 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc242)
    %3 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc22)
    cir.store %3, %2 : !cir.float, !cir.ptr<!cir.float> loc(#loc243)
    cir.br ^bb1 loc(#loc244)
  ^bb1:  // pred: ^bb0
    %4 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc245)
    %5 = cir.cast(bitcast, %4 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc245)
    %6 = cir.call %5() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc26)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc26)
    cir.brcond %7 ^bb2, ^bb10 loc(#loc246)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc247)
  ^bb3:  // pred: ^bb2
    cir.br ^bb4 loc(#loc248)
  ^bb4:  // pred: ^bb3
    %8 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc33)
    %9 = cir.const #cir.int<20> : !s32i loc(#loc34)
    %10 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc235)
    %11 = cir.load %10 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc35)
    %12 = cir.call @fgets(%8, %9, %11) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc36)
    %13 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc37)
    %14 = cir.cast(bitcast, %13 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc37)
    %15 = cir.cmp(ne, %12, %14) : !cir.ptr<!s8i>, !cir.bool loc(#loc249)
    cir.brcond %15 ^bb5, ^bb6 loc(#loc250)
  ^bb5:  // pred: ^bb4
    %16 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc41)
    %17 = cir.call @atof(%16) : (!cir.ptr<!s8i>) -> !cir.double side_effect(pure) extra(#fn_attr) loc(#loc42)
    %18 = cir.cast(floating, %17 : !cir.double), !cir.float loc(#loc42)
    cir.store %18, %2 : !cir.float, !cir.ptr<!cir.float> loc(#loc251)
    cir.br ^bb7 loc(#loc39)
  ^bb6:  // pred: ^bb4
    %19 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc11)
    %20 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc11)
    cir.call @printLine(%20) : (!cir.ptr<!s8i>) -> () loc(#loc45)
    cir.br ^bb7 loc(#loc32)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc32)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc30)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc25)
  ^bb10:  // 2 preds: ^bb1, ^bb9
    cir.br ^bb11 loc(#loc25)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc252)
  ^bb12:  // pred: ^bb11
    %21 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc253)
    %22 = cir.cast(bitcast, %21 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc253)
    %23 = cir.call %22() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc48)
    %24 = cir.cast(int_to_bool, %23 : !s32i), !cir.bool loc(#loc48)
    cir.brcond %24 ^bb13, ^bb16 loc(#loc254)
  ^bb13:  // pred: ^bb12
    cir.br ^bb14 loc(#loc255)
  ^bb14:  // pred: ^bb13
    %25 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc53)
    %26 = cir.load %2 : !cir.ptr<!cir.float>, !cir.float loc(#loc54)
    %27 = cir.cast(floating, %26 : !cir.float), !cir.double loc(#loc54)
    %28 = cir.binop(div, %25, %27) : !cir.double loc(#loc256)
    %29 = cir.cast(float_to_int, %28 : !cir.double), !s32i loc(#loc256)
    cir.store %29, %1 : !s32i, !cir.ptr<!s32i> loc(#loc241)
    %30 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc55)
    cir.call @printIntLine(%30) : (!s32i) -> () loc(#loc56)
    cir.br ^bb15 loc(#loc52)
  ^bb15:  // pred: ^bb14
    cir.br ^bb16 loc(#loc47)
  ^bb16:  // 2 preds: ^bb12, ^bb15
    cir.br ^bb17 loc(#loc47)
  ^bb17:  // pred: ^bb16
    cir.return loc(#loc15)
  } loc(#loc239)
  cir.func no_proto @CWE369_Divide_by_Zero__float_fgets_11_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<()>> loc(#loc258)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc59)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<()>> loc(#loc259)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc61)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<()>> loc(#loc260)
    cir.call %2() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc63)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<()>> loc(#loc261)
    cir.call %3() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc65)
    cir.return loc(#loc58)
  } loc(#loc257)
  cir.func no_proto private @globalReturnsFalse(...) -> !s32i loc(#loc262)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc69)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"This would result in a divide by zero\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc70)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 20>, !cir.ptr<!cir.array<!s8i x 20>>, ["inputBuffer"] {alignment = 16 : i64} loc(#loc264)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc265)
    %2 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc266)
    %3 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc79)
    cir.store %3, %2 : !cir.float, !cir.ptr<!cir.float> loc(#loc267)
    cir.br ^bb1 loc(#loc268)
  ^bb1:  // pred: ^bb0
    %4 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc269)
    %5 = cir.cast(bitcast, %4 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc269)
    %6 = cir.call %5() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc83)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc83)
    cir.brcond %7 ^bb2, ^bb10 loc(#loc270)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc271)
  ^bb3:  // pred: ^bb2
    cir.br ^bb4 loc(#loc272)
  ^bb4:  // pred: ^bb3
    %8 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc90)
    %9 = cir.const #cir.int<20> : !s32i loc(#loc91)
    %10 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc235)
    %11 = cir.load %10 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc92)
    %12 = cir.call @fgets(%8, %9, %11) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc93)
    %13 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc94)
    %14 = cir.cast(bitcast, %13 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc94)
    %15 = cir.cmp(ne, %12, %14) : !cir.ptr<!s8i>, !cir.bool loc(#loc273)
    cir.brcond %15 ^bb5, ^bb6 loc(#loc274)
  ^bb5:  // pred: ^bb4
    %16 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc98)
    %17 = cir.call @atof(%16) : (!cir.ptr<!s8i>) -> !cir.double side_effect(pure) extra(#fn_attr) loc(#loc99)
    %18 = cir.cast(floating, %17 : !cir.double), !cir.float loc(#loc99)
    cir.store %18, %2 : !cir.float, !cir.ptr<!cir.float> loc(#loc275)
    cir.br ^bb7 loc(#loc96)
  ^bb6:  // pred: ^bb4
    %19 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc102)
    %20 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc102)
    cir.call @printLine(%20) : (!cir.ptr<!s8i>) -> () loc(#loc103)
    cir.br ^bb7 loc(#loc89)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc89)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc87)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc82)
  ^bb10:  // 2 preds: ^bb1, ^bb9
    cir.br ^bb11 loc(#loc82)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc276)
  ^bb12:  // pred: ^bb11
    %21 = cir.get_global @globalReturnsFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc277)
    %22 = cir.cast(bitcast, %21 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc277)
    %23 = cir.call %22() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc106)
    %24 = cir.cast(int_to_bool, %23 : !s32i), !cir.bool loc(#loc106)
    cir.brcond %24 ^bb13, ^bb14 loc(#loc278)
  ^bb13:  // pred: ^bb12
    %25 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc69)
    %26 = cir.cast(array_to_ptrdecay, %25 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc69)
    cir.call @printLine(%26) : (!cir.ptr<!s8i>) -> () loc(#loc111)
    cir.br ^bb20 loc(#loc109)
  ^bb14:  // pred: ^bb12
    cir.br ^bb15 loc(#loc279)
  ^bb15:  // pred: ^bb14
    %27 = cir.load %2 : !cir.ptr<!cir.float>, !cir.float loc(#loc114)
    %28 = cir.cast(floating, %27 : !cir.float), !cir.double loc(#loc114)
    %29 = cir.fabs %28 : !cir.double loc(#loc114)
    %30 = cir.const #cir.fp<9.9999999999999995E-7> : !cir.double loc(#loc115)
    %31 = cir.cmp(gt, %29, %30) : !cir.double, !cir.bool loc(#loc280)
    cir.brcond %31 ^bb16, ^bb17 loc(#loc281)
  ^bb16:  // pred: ^bb15
    %32 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc120)
    %33 = cir.load %2 : !cir.ptr<!cir.float>, !cir.float loc(#loc121)
    %34 = cir.cast(floating, %33 : !cir.float), !cir.double loc(#loc121)
    %35 = cir.binop(div, %32, %34) : !cir.double loc(#loc282)
    %36 = cir.cast(float_to_int, %35 : !cir.double), !s32i loc(#loc282)
    cir.store %36, %1 : !s32i, !cir.ptr<!s32i> loc(#loc265)
    %37 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc122)
    cir.call @printIntLine(%37) : (!s32i) -> () loc(#loc123)
    cir.br ^bb18 loc(#loc118)
  ^bb17:  // pred: ^bb15
    %38 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc70)
    %39 = cir.cast(array_to_ptrdecay, %38 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc70)
    cir.call @printLine(%39) : (!cir.ptr<!s8i>) -> () loc(#loc124)
    cir.br ^bb18 loc(#loc113)
  ^bb18:  // 2 preds: ^bb16, ^bb17
    cir.br ^bb19 loc(#loc113)
  ^bb19:  // pred: ^bb18
    cir.br ^bb20 loc(#loc105)
  ^bb20:  // 2 preds: ^bb13, ^bb19
    cir.br ^bb21 loc(#loc105)
  ^bb21:  // pred: ^bb20
    cir.return loc(#loc72)
  } loc(#loc263)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 20>, !cir.ptr<!cir.array<!s8i x 20>>, ["inputBuffer"] {alignment = 16 : i64} loc(#loc284)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc285)
    %2 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc286)
    %3 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc133)
    cir.store %3, %2 : !cir.float, !cir.ptr<!cir.float> loc(#loc287)
    cir.br ^bb1 loc(#loc288)
  ^bb1:  // pred: ^bb0
    %4 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc289)
    %5 = cir.cast(bitcast, %4 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc289)
    %6 = cir.call %5() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc137)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc137)
    cir.brcond %7 ^bb2, ^bb10 loc(#loc290)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc291)
  ^bb3:  // pred: ^bb2
    cir.br ^bb4 loc(#loc292)
  ^bb4:  // pred: ^bb3
    %8 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc144)
    %9 = cir.const #cir.int<20> : !s32i loc(#loc145)
    %10 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc235)
    %11 = cir.load %10 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc146)
    %12 = cir.call @fgets(%8, %9, %11) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc147)
    %13 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc148)
    %14 = cir.cast(bitcast, %13 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc148)
    %15 = cir.cmp(ne, %12, %14) : !cir.ptr<!s8i>, !cir.bool loc(#loc293)
    cir.brcond %15 ^bb5, ^bb6 loc(#loc294)
  ^bb5:  // pred: ^bb4
    %16 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc152)
    %17 = cir.call @atof(%16) : (!cir.ptr<!s8i>) -> !cir.double side_effect(pure) extra(#fn_attr) loc(#loc153)
    %18 = cir.cast(floating, %17 : !cir.double), !cir.float loc(#loc153)
    cir.store %18, %2 : !cir.float, !cir.ptr<!cir.float> loc(#loc295)
    cir.br ^bb7 loc(#loc150)
  ^bb6:  // pred: ^bb4
    %19 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc156)
    %20 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc156)
    cir.call @printLine(%20) : (!cir.ptr<!s8i>) -> () loc(#loc157)
    cir.br ^bb7 loc(#loc143)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc143)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc141)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc136)
  ^bb10:  // 2 preds: ^bb1, ^bb9
    cir.br ^bb11 loc(#loc136)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc296)
  ^bb12:  // pred: ^bb11
    %21 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc297)
    %22 = cir.cast(bitcast, %21 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc297)
    %23 = cir.call %22() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc160)
    %24 = cir.cast(int_to_bool, %23 : !s32i), !cir.bool loc(#loc160)
    cir.brcond %24 ^bb13, ^bb19 loc(#loc298)
  ^bb13:  // pred: ^bb12
    cir.br ^bb14 loc(#loc299)
  ^bb14:  // pred: ^bb13
    %25 = cir.load %2 : !cir.ptr<!cir.float>, !cir.float loc(#loc165)
    %26 = cir.cast(floating, %25 : !cir.float), !cir.double loc(#loc165)
    %27 = cir.fabs %26 : !cir.double loc(#loc165)
    %28 = cir.const #cir.fp<9.9999999999999995E-7> : !cir.double loc(#loc166)
    %29 = cir.cmp(gt, %27, %28) : !cir.double, !cir.bool loc(#loc300)
    cir.brcond %29 ^bb15, ^bb16 loc(#loc301)
  ^bb15:  // pred: ^bb14
    %30 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc171)
    %31 = cir.load %2 : !cir.ptr<!cir.float>, !cir.float loc(#loc172)
    %32 = cir.cast(floating, %31 : !cir.float), !cir.double loc(#loc172)
    %33 = cir.binop(div, %30, %32) : !cir.double loc(#loc302)
    %34 = cir.cast(float_to_int, %33 : !cir.double), !s32i loc(#loc302)
    cir.store %34, %1 : !s32i, !cir.ptr<!s32i> loc(#loc285)
    %35 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc173)
    cir.call @printIntLine(%35) : (!s32i) -> () loc(#loc174)
    cir.br ^bb17 loc(#loc169)
  ^bb16:  // pred: ^bb14
    %36 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc175)
    %37 = cir.cast(array_to_ptrdecay, %36 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc175)
    cir.call @printLine(%37) : (!cir.ptr<!s8i>) -> () loc(#loc176)
    cir.br ^bb17 loc(#loc164)
  ^bb17:  // 2 preds: ^bb15, ^bb16
    cir.br ^bb18 loc(#loc164)
  ^bb18:  // pred: ^bb17
    cir.br ^bb19 loc(#loc159)
  ^bb19:  // 2 preds: ^bb12, ^bb18
    cir.br ^bb20 loc(#loc159)
  ^bb20:  // pred: ^bb19
    cir.return loc(#loc126)
  } loc(#loc283)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc304)
    %1 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc305)
    %2 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc183)
    cir.store %2, %1 : !cir.float, !cir.ptr<!cir.float> loc(#loc306)
    cir.br ^bb1 loc(#loc307)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @globalReturnsFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc308)
    %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc308)
    %5 = cir.call %4() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc187)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc187)
    cir.brcond %6 ^bb2, ^bb3 loc(#loc309)
  ^bb2:  // pred: ^bb1
    %7 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc192)
    %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc192)
    cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc193)
    cir.br ^bb4 loc(#loc190)
  ^bb3:  // pred: ^bb1
    %9 = cir.const #cir.fp<2.000000e+00> : !cir.float loc(#loc194)
    cir.store %9, %1 : !cir.float, !cir.ptr<!cir.float> loc(#loc310)
    cir.br ^bb4 loc(#loc186)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc186)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc311)
  ^bb6:  // pred: ^bb5
    %10 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc312)
    %11 = cir.cast(bitcast, %10 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc312)
    %12 = cir.call %11() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc198)
    %13 = cir.cast(int_to_bool, %12 : !s32i), !cir.bool loc(#loc198)
    cir.brcond %13 ^bb7, ^bb10 loc(#loc313)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc314)
  ^bb8:  // pred: ^bb7
    %14 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc203)
    %15 = cir.load %1 : !cir.ptr<!cir.float>, !cir.float loc(#loc204)
    %16 = cir.cast(floating, %15 : !cir.float), !cir.double loc(#loc204)
    %17 = cir.binop(div, %14, %16) : !cir.double loc(#loc315)
    %18 = cir.cast(float_to_int, %17 : !cir.double), !s32i loc(#loc315)
    cir.store %18, %0 : !s32i, !cir.ptr<!s32i> loc(#loc304)
    %19 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc205)
    cir.call @printIntLine(%19) : (!s32i) -> () loc(#loc206)
    cir.br ^bb9 loc(#loc202)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc197)
  ^bb10:  // 2 preds: ^bb6, ^bb9
    cir.br ^bb11 loc(#loc197)
  ^bb11:  // pred: ^bb10
    cir.return loc(#loc178)
  } loc(#loc303)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc317)
    %1 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc318)
    %2 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc213)
    cir.store %2, %1 : !cir.float, !cir.ptr<!cir.float> loc(#loc319)
    cir.br ^bb1 loc(#loc320)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc321)
    %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc321)
    %5 = cir.call %4() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc217)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc217)
    cir.brcond %6 ^bb2, ^bb3 loc(#loc322)
  ^bb2:  // pred: ^bb1
    %7 = cir.const #cir.fp<2.000000e+00> : !cir.float loc(#loc220)
    cir.store %7, %1 : !cir.float, !cir.ptr<!cir.float> loc(#loc323)
    cir.br ^bb3 loc(#loc216)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc216)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc324)
  ^bb5:  // pred: ^bb4
    %8 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc325)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc325)
    %10 = cir.call %9() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc224)
    %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc224)
    cir.brcond %11 ^bb6, ^bb9 loc(#loc326)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc327)
  ^bb7:  // pred: ^bb6
    %12 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc229)
    %13 = cir.load %1 : !cir.ptr<!cir.float>, !cir.float loc(#loc230)
    %14 = cir.cast(floating, %13 : !cir.float), !cir.double loc(#loc230)
    %15 = cir.binop(div, %12, %14) : !cir.double loc(#loc328)
    %16 = cir.cast(float_to_int, %15 : !cir.double), !s32i loc(#loc328)
    cir.store %16, %0 : !s32i, !cir.ptr<!s32i> loc(#loc317)
    %17 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc231)
    cir.call @printIntLine(%17) : (!s32i) -> () loc(#loc232)
    cir.br ^bb8 loc(#loc228)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc223)
  ^bb9:  // 2 preds: ^bb5, ^bb8
    cir.br ^bb10 loc(#loc223)
  ^bb10:  // pred: ^bb9
    cir.return loc(#loc208)
  } loc(#loc316)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__float_fgets_11.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":48:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":48:23)
#loc3 = loc("/usr/include/stdio.h":654:1)
#loc4 = loc("/usr/include/stdio.h":655:59)
#loc5 = loc("/usr/include/stdio.h":149:1)
#loc6 = loc("/usr/include/stdio.h":149:14)
#loc7 = loc("/usr/include/stdlib.h":102:1)
#loc8 = loc("/usr/include/stdlib.h":103:33)
#loc9 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc10 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc11 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":43:27)
#loc12 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc13 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc14 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":26:1)
#loc15 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":55:1)
#loc16 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":34:13)
#loc17 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":34:45)
#loc18 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":51:13)
#loc19 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":51:44)
#loc20 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":28:5)
#loc21 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":28:11)
#loc22 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":30:12)
#loc23 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":30:5)
#loc24 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":31:5)
#loc25 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":46:5)
#loc26 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":31:8)
#loc27 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":31:26)
#loc28 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":32:5)
#loc29 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":33:9)
#loc30 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":45:9)
#loc31 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":36:13)
#loc32 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":44:13)
#loc33 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":36:23)
#loc34 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":36:36)
#loc35 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":36:53)
#loc36 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":36:17)
#loc37 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":36:63)
#loc38 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":37:13)
#loc39 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":40:13)
#loc40 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":42:13)
#loc41 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":39:36)
#loc42 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":39:31)
#loc43 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":39:17)
#loc44 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":39:47)
#loc45 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":43:17)
#loc46 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":47:5)
#loc47 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":54:5)
#loc48 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":47:8)
#loc49 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":47:26)
#loc50 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":48:5)
#loc51 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":49:9)
#loc52 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":53:9)
#loc53 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":51:32)
#loc54 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":51:40)
#loc55 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":52:26)
#loc56 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":52:13)
#loc57 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":187:1)
#loc58 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":193:1)
#loc59 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":189:5)
#loc60 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":189:14)
#loc61 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":190:5)
#loc62 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":190:14)
#loc63 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":191:5)
#loc64 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":191:14)
#loc65 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":192:5)
#loc66 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":192:14)
#loc67 = loc("../../../testcasesupport/std_testcase_io.h":50:1)
#loc68 = loc("../../../testcasesupport/std_testcase_io.h":50:24)
#loc69 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":86:19)
#loc70 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":98:23)
#loc71 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":62:1)
#loc72 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":101:1)
#loc73 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":70:13)
#loc74 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":70:45)
#loc75 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":93:13)
#loc76 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":93:44)
#loc77 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":64:5)
#loc78 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":64:11)
#loc79 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":66:12)
#loc80 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":66:5)
#loc81 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":67:5)
#loc82 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":82:5)
#loc83 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":67:8)
#loc84 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":67:26)
#loc85 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":68:5)
#loc86 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":69:9)
#loc87 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":81:9)
#loc88 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":72:13)
#loc89 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":80:13)
#loc90 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":72:23)
#loc91 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":72:36)
#loc92 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":72:53)
#loc93 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":72:17)
#loc94 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":72:63)
#loc95 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":73:13)
#loc96 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":76:13)
#loc97 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":78:13)
#loc98 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":75:36)
#loc99 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":75:31)
#loc100 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":75:17)
#loc101 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":75:47)
#loc102 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":79:27)
#loc103 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":79:17)
#loc104 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":83:5)
#loc105 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":100:5)
#loc106 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":83:8)
#loc107 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":83:27)
#loc108 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":84:5)
#loc109 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":87:5)
#loc110 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":89:5)
#loc111 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":86:9)
#loc112 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":91:9)
#loc113 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":99:9)
#loc114 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":91:17)
#loc115 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":91:25)
#loc116 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":91:12)
#loc117 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":92:9)
#loc118 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":95:9)
#loc119 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":97:9)
#loc120 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":93:32)
#loc121 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":93:40)
#loc122 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":94:26)
#loc123 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":94:13)
#loc124 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":98:13)
#loc125 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":104:1)
#loc126 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":138:1)
#loc127 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":112:13)
#loc128 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":112:45)
#loc129 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":130:13)
#loc130 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":130:44)
#loc131 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":106:5)
#loc132 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":106:11)
#loc133 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":108:12)
#loc134 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":108:5)
#loc135 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":109:5)
#loc136 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":124:5)
#loc137 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":109:8)
#loc138 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":109:26)
#loc139 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":110:5)
#loc140 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":111:9)
#loc141 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":123:9)
#loc142 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":114:13)
#loc143 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":122:13)
#loc144 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":114:23)
#loc145 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":114:36)
#loc146 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":114:53)
#loc147 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":114:17)
#loc148 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":114:63)
#loc149 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":115:13)
#loc150 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":118:13)
#loc151 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":120:13)
#loc152 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":117:36)
#loc153 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":117:31)
#loc154 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":117:17)
#loc155 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":117:47)
#loc156 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":121:27)
#loc157 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":121:17)
#loc158 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":125:5)
#loc159 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":137:5)
#loc160 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":125:8)
#loc161 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":125:26)
#loc162 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":126:5)
#loc163 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":128:9)
#loc164 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":136:9)
#loc165 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":128:17)
#loc166 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":128:25)
#loc167 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":128:12)
#loc168 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":129:9)
#loc169 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":132:9)
#loc170 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":134:9)
#loc171 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":130:32)
#loc172 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":130:40)
#loc173 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":131:26)
#loc174 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":131:13)
#loc175 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":135:23)
#loc176 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":135:13)
#loc177 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":141:1)
#loc178 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":164:1)
#loc179 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":160:13)
#loc180 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":160:44)
#loc181 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":143:5)
#loc182 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":143:11)
#loc183 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":145:12)
#loc184 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":145:5)
#loc185 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":146:5)
#loc186 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":155:5)
#loc187 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":146:8)
#loc188 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":146:27)
#loc189 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":147:5)
#loc190 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":150:5)
#loc191 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":152:5)
#loc192 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":149:19)
#loc193 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":149:9)
#loc194 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":154:16)
#loc195 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":154:9)
#loc196 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":156:5)
#loc197 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":163:5)
#loc198 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":156:8)
#loc199 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":156:26)
#loc200 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":157:5)
#loc201 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":158:9)
#loc202 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":162:9)
#loc203 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":160:32)
#loc204 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":160:40)
#loc205 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":161:26)
#loc206 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":161:13)
#loc207 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":167:1)
#loc208 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":185:1)
#loc209 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":181:13)
#loc210 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":181:44)
#loc211 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":169:5)
#loc212 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":169:11)
#loc213 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":171:12)
#loc214 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":171:5)
#loc215 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":172:5)
#loc216 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":176:5)
#loc217 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":172:8)
#loc218 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":172:26)
#loc219 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":173:5)
#loc220 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":175:16)
#loc221 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":175:9)
#loc222 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":177:5)
#loc223 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":184:5)
#loc224 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":177:8)
#loc225 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":177:26)
#loc226 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":178:5)
#loc227 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":179:9)
#loc228 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":183:9)
#loc229 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":181:32)
#loc230 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":181:40)
#loc231 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":182:26)
#loc232 = loc("CWE369_Divide_by_Zero__float_fgets_11.c":182:13)
#loc233 = loc(fused[#loc1, #loc2])
#loc234 = loc(fused[#loc3, #loc4])
#loc235 = loc(fused[#loc5, #loc6])
#loc236 = loc(fused[#loc7, #loc8])
#loc237 = loc(fused[#loc9, #loc10])
#loc238 = loc(fused[#loc12, #loc13])
#loc239 = loc(fused[#loc14, #loc15])
#loc240 = loc(fused[#loc16, #loc17])
#loc241 = loc(fused[#loc18, #loc19])
#loc242 = loc(fused[#loc20, #loc21])
#loc243 = loc(fused[#loc23, #loc22])
#loc244 = loc(fused[#loc24, #loc25])
#loc245 = loc(fused[#loc26, #loc27])
#loc246 = loc(fused[#loc28, #loc25])
#loc247 = loc(fused[#loc29, #loc30])
#loc248 = loc(fused[#loc31, #loc32])
#loc249 = loc(fused[#loc36, #loc37])
#loc250 = loc(fused[#loc38, #loc39, #loc40, #loc32])
#loc251 = loc(fused[#loc43, #loc44])
#loc252 = loc(fused[#loc46, #loc47])
#loc253 = loc(fused[#loc48, #loc49])
#loc254 = loc(fused[#loc50, #loc47])
#loc255 = loc(fused[#loc51, #loc52])
#loc256 = loc(fused[#loc53, #loc54])
#loc257 = loc(fused[#loc57, #loc58])
#loc258 = loc(fused[#loc59, #loc60])
#loc259 = loc(fused[#loc61, #loc62])
#loc260 = loc(fused[#loc63, #loc64])
#loc261 = loc(fused[#loc65, #loc66])
#loc262 = loc(fused[#loc67, #loc68])
#loc263 = loc(fused[#loc71, #loc72])
#loc264 = loc(fused[#loc73, #loc74])
#loc265 = loc(fused[#loc75, #loc76])
#loc266 = loc(fused[#loc77, #loc78])
#loc267 = loc(fused[#loc80, #loc79])
#loc268 = loc(fused[#loc81, #loc82])
#loc269 = loc(fused[#loc83, #loc84])
#loc270 = loc(fused[#loc85, #loc82])
#loc271 = loc(fused[#loc86, #loc87])
#loc272 = loc(fused[#loc88, #loc89])
#loc273 = loc(fused[#loc93, #loc94])
#loc274 = loc(fused[#loc95, #loc96, #loc97, #loc89])
#loc275 = loc(fused[#loc100, #loc101])
#loc276 = loc(fused[#loc104, #loc105])
#loc277 = loc(fused[#loc106, #loc107])
#loc278 = loc(fused[#loc108, #loc109, #loc110, #loc105])
#loc279 = loc(fused[#loc112, #loc113])
#loc280 = loc(fused[#loc116, #loc115])
#loc281 = loc(fused[#loc117, #loc118, #loc119, #loc113])
#loc282 = loc(fused[#loc120, #loc121])
#loc283 = loc(fused[#loc125, #loc126])
#loc284 = loc(fused[#loc127, #loc128])
#loc285 = loc(fused[#loc129, #loc130])
#loc286 = loc(fused[#loc131, #loc132])
#loc287 = loc(fused[#loc134, #loc133])
#loc288 = loc(fused[#loc135, #loc136])
#loc289 = loc(fused[#loc137, #loc138])
#loc290 = loc(fused[#loc139, #loc136])
#loc291 = loc(fused[#loc140, #loc141])
#loc292 = loc(fused[#loc142, #loc143])
#loc293 = loc(fused[#loc147, #loc148])
#loc294 = loc(fused[#loc149, #loc150, #loc151, #loc143])
#loc295 = loc(fused[#loc154, #loc155])
#loc296 = loc(fused[#loc158, #loc159])
#loc297 = loc(fused[#loc160, #loc161])
#loc298 = loc(fused[#loc162, #loc159])
#loc299 = loc(fused[#loc163, #loc164])
#loc300 = loc(fused[#loc167, #loc166])
#loc301 = loc(fused[#loc168, #loc169, #loc170, #loc164])
#loc302 = loc(fused[#loc171, #loc172])
#loc303 = loc(fused[#loc177, #loc178])
#loc304 = loc(fused[#loc179, #loc180])
#loc305 = loc(fused[#loc181, #loc182])
#loc306 = loc(fused[#loc184, #loc183])
#loc307 = loc(fused[#loc185, #loc186])
#loc308 = loc(fused[#loc187, #loc188])
#loc309 = loc(fused[#loc189, #loc190, #loc191, #loc186])
#loc310 = loc(fused[#loc195, #loc194])
#loc311 = loc(fused[#loc196, #loc197])
#loc312 = loc(fused[#loc198, #loc199])
#loc313 = loc(fused[#loc200, #loc197])
#loc314 = loc(fused[#loc201, #loc202])
#loc315 = loc(fused[#loc203, #loc204])
#loc316 = loc(fused[#loc207, #loc208])
#loc317 = loc(fused[#loc209, #loc210])
#loc318 = loc(fused[#loc211, #loc212])
#loc319 = loc(fused[#loc214, #loc213])
#loc320 = loc(fused[#loc215, #loc216])
#loc321 = loc(fused[#loc217, #loc218])
#loc322 = loc(fused[#loc219, #loc216])
#loc323 = loc(fused[#loc221, #loc220])
#loc324 = loc(fused[#loc222, #loc223])
#loc325 = loc(fused[#loc224, #loc225])
#loc326 = loc(fused[#loc226, #loc223])
#loc327 = loc(fused[#loc227, #loc228])
#loc328 = loc(fused[#loc229, #loc230])
