!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_15.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc183)
  cir.func private  @exit(!s32i) extra(#fn_attr) loc(#loc184)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc185)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc7)
  cir.func private  @printIntLine(!s32i) loc(#loc186)
  cir.func private  @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc187)
  cir.func no_proto  @CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_15_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc189)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc16)
    cir.store %1, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc190)
    cir.scope {
      %2 = cir.const #cir.int<6> : !s32i loc(#loc20)
      cir.switch (%2 : !s32i) [
      case (equal, 6) {
        %3 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc21)
        %4 = cir.const #cir.int<10> : !s32i loc(#loc22)
        %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc22)
        %6 = cir.call @malloc(%5) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc21)
        %7 = cir.cast(bitcast, %6 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc192)
        cir.store %7, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc193)
        cir.scope {
          %8 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc27)
          %9 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc28)
          %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc28)
          %11 = cir.cmp(eq, %8, %10) : !cir.ptr<!s32i>, !s32i loc(#loc195)
          %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc29)
          cir.if %12 {
            %13 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc31)
            %14 = cir.const #cir.int<1> : !s32i loc(#loc32)
            %15 = cir.unary(minus, %14) : !s32i, !s32i loc(#loc33)
            cir.call @exit(%15) : (!s32i) -> () extra(#fn_attr) loc(#loc31)
          } loc(#loc196)
        } loc(#loc194)
        cir.break loc(#loc34)
      },
      case (default) {
        %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc7)
        %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc7)
        cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc35)
        cir.break loc(#loc36)
      }
      ] loc(#loc18)
    } loc(#loc191)
    cir.scope {
      %2 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc198)
      %3 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc199)
      %4 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc198)
      cir.store %4, %2 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc198)
      cir.scope {
        %12 = cir.const #cir.int<0> : !s32i loc(#loc45)
        %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc45)
        cir.store %13, %3 : !u64i, !cir.ptr<!u64i> loc(#loc201)
        cir.for : cond {
          %14 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc47)
          %15 = cir.const #cir.int<10> : !s32i loc(#loc48)
          %16 = cir.cast(integral, %15 : !s32i), !u64i loc(#loc48)
          %17 = cir.cmp(lt, %14, %16) : !u64i, !s32i loc(#loc202)
          %18 = cir.cast(int_to_bool, %17 : !s32i), !cir.bool loc(#loc49)
          cir.condition(%18) loc(#loc49)
        } body {
          cir.scope {
            %14 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc51)
            %15 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc52)
            %16 = cir.ptr_stride(%15 : !cir.ptr<!s32i>, %14 : !u64i), !cir.ptr<!s32i> loc(#loc52)
            %17 = cir.load %16 : !cir.ptr<!s32i>, !s32i loc(#loc52)
            %18 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc53)
            %19 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc54)
            %20 = cir.ptr_stride(%18 : !cir.ptr<!s32i>, %19 : !u64i), !cir.ptr<!s32i> loc(#loc55)
            cir.store %17, %20 : !s32i, !cir.ptr<!s32i> loc(#loc204)
          } loc(#loc203)
          cir.yield loc(#loc44)
        } step {
          %14 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc57)
          %15 = cir.unary(inc, %14) : !u64i, !u64i loc(#loc58)
          cir.store %15, %3 : !u64i, !cir.ptr<!u64i> loc(#loc205)
          cir.yield loc(#loc200)
        } loc(#loc200)
      } loc(#loc200)
      %5 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc59)
      %6 = cir.const #cir.int<0> : !s32i loc(#loc60)
      %7 = cir.ptr_stride(%5 : !cir.ptr<!s32i>, %6 : !s32i), !cir.ptr<!s32i> loc(#loc61)
      %8 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc59)
      cir.call @printIntLine(%8) : (!s32i) -> () loc(#loc62)
      %9 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc63)
      %10 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc64)
      %11 = cir.cast(bitcast, %10 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc64)
      cir.call @free(%11) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc63)
    } loc(#loc197)
    cir.return loc(#loc13)
  } loc(#loc188)
  cir.func no_proto  @CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_15_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc207)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc67)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc208)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc69)
    cir.return loc(#loc66)
  } loc(#loc206)
  cir.func no_proto internal private  @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc210)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc75)
    cir.store %1, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc211)
    cir.scope {
      %2 = cir.const #cir.int<5> : !s32i loc(#loc79)
      cir.switch (%2 : !s32i) [
      case (equal, 6) {
        %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc80)
        %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc80)
        cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc81)
        cir.break loc(#loc82)
      },
      case (default) {
        %3 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc83)
        %4 = cir.const #cir.int<10> : !s32i loc(#loc84)
        %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc84)
        %6 = cir.const #cir.int<4> : !u64i loc(#loc213)
        %7 = cir.binop(mul, %5, %6) : !u64i loc(#loc214)
        %8 = cir.call @malloc(%7) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc83)
        %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc215)
        cir.store %9, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc216)
        cir.scope {
          %10 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc91)
          %11 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc92)
          %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc92)
          %13 = cir.cmp(eq, %10, %12) : !cir.ptr<!s32i>, !s32i loc(#loc218)
          %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc93)
          cir.if %14 {
            %15 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc95)
            %16 = cir.const #cir.int<1> : !s32i loc(#loc96)
            %17 = cir.unary(minus, %16) : !s32i, !s32i loc(#loc97)
            cir.call @exit(%17) : (!s32i) -> () extra(#fn_attr) loc(#loc95)
          } loc(#loc219)
        } loc(#loc217)
        cir.break loc(#loc98)
      }
      ] loc(#loc77)
    } loc(#loc212)
    cir.scope {
      %2 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc221)
      %3 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc222)
      %4 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc221)
      cir.store %4, %2 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc221)
      cir.scope {
        %12 = cir.const #cir.int<0> : !s32i loc(#loc107)
        %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc107)
        cir.store %13, %3 : !u64i, !cir.ptr<!u64i> loc(#loc224)
        cir.for : cond {
          %14 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc109)
          %15 = cir.const #cir.int<10> : !s32i loc(#loc110)
          %16 = cir.cast(integral, %15 : !s32i), !u64i loc(#loc110)
          %17 = cir.cmp(lt, %14, %16) : !u64i, !s32i loc(#loc225)
          %18 = cir.cast(int_to_bool, %17 : !s32i), !cir.bool loc(#loc111)
          cir.condition(%18) loc(#loc111)
        } body {
          cir.scope {
            %14 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc113)
            %15 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc114)
            %16 = cir.ptr_stride(%15 : !cir.ptr<!s32i>, %14 : !u64i), !cir.ptr<!s32i> loc(#loc114)
            %17 = cir.load %16 : !cir.ptr<!s32i>, !s32i loc(#loc114)
            %18 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc115)
            %19 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc116)
            %20 = cir.ptr_stride(%18 : !cir.ptr<!s32i>, %19 : !u64i), !cir.ptr<!s32i> loc(#loc117)
            cir.store %17, %20 : !s32i, !cir.ptr<!s32i> loc(#loc227)
          } loc(#loc226)
          cir.yield loc(#loc106)
        } step {
          %14 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc119)
          %15 = cir.unary(inc, %14) : !u64i, !u64i loc(#loc120)
          cir.store %15, %3 : !u64i, !cir.ptr<!u64i> loc(#loc228)
          cir.yield loc(#loc223)
        } loc(#loc223)
      } loc(#loc223)
      %5 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc121)
      %6 = cir.const #cir.int<0> : !s32i loc(#loc122)
      %7 = cir.ptr_stride(%5 : !cir.ptr<!s32i>, %6 : !s32i), !cir.ptr<!s32i> loc(#loc123)
      %8 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc121)
      cir.call @printIntLine(%8) : (!s32i) -> () loc(#loc124)
      %9 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc125)
      %10 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc126)
      %11 = cir.cast(bitcast, %10 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc126)
      cir.call @free(%11) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc125)
    } loc(#loc220)
    cir.return loc(#loc72)
  } loc(#loc209)
  cir.func no_proto internal private  @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc230)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc131)
    cir.store %1, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc231)
    cir.scope {
      %2 = cir.const #cir.int<6> : !s32i loc(#loc135)
      cir.switch (%2 : !s32i) [
      case (equal, 6) {
        %3 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc136)
        %4 = cir.const #cir.int<10> : !s32i loc(#loc137)
        %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc137)
        %6 = cir.const #cir.int<4> : !u64i loc(#loc233)
        %7 = cir.binop(mul, %5, %6) : !u64i loc(#loc234)
        %8 = cir.call @malloc(%7) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc136)
        %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc235)
        cir.store %9, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc236)
        cir.scope {
          %10 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc144)
          %11 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc145)
          %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc145)
          %13 = cir.cmp(eq, %10, %12) : !cir.ptr<!s32i>, !s32i loc(#loc238)
          %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc146)
          cir.if %14 {
            %15 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc148)
            %16 = cir.const #cir.int<1> : !s32i loc(#loc149)
            %17 = cir.unary(minus, %16) : !s32i, !s32i loc(#loc150)
            cir.call @exit(%17) : (!s32i) -> () extra(#fn_attr) loc(#loc148)
          } loc(#loc239)
        } loc(#loc237)
        cir.break loc(#loc151)
      },
      case (default) {
        %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc152)
        %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc152)
        cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc153)
        cir.break loc(#loc154)
      }
      ] loc(#loc133)
    } loc(#loc232)
    cir.scope {
      %2 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc241)
      %3 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc242)
      %4 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc241)
      cir.store %4, %2 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc241)
      cir.scope {
        %12 = cir.const #cir.int<0> : !s32i loc(#loc163)
        %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc163)
        cir.store %13, %3 : !u64i, !cir.ptr<!u64i> loc(#loc244)
        cir.for : cond {
          %14 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc165)
          %15 = cir.const #cir.int<10> : !s32i loc(#loc166)
          %16 = cir.cast(integral, %15 : !s32i), !u64i loc(#loc166)
          %17 = cir.cmp(lt, %14, %16) : !u64i, !s32i loc(#loc245)
          %18 = cir.cast(int_to_bool, %17 : !s32i), !cir.bool loc(#loc167)
          cir.condition(%18) loc(#loc167)
        } body {
          cir.scope {
            %14 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc169)
            %15 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc170)
            %16 = cir.ptr_stride(%15 : !cir.ptr<!s32i>, %14 : !u64i), !cir.ptr<!s32i> loc(#loc170)
            %17 = cir.load %16 : !cir.ptr<!s32i>, !s32i loc(#loc170)
            %18 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc171)
            %19 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc172)
            %20 = cir.ptr_stride(%18 : !cir.ptr<!s32i>, %19 : !u64i), !cir.ptr<!s32i> loc(#loc173)
            cir.store %17, %20 : !s32i, !cir.ptr<!s32i> loc(#loc247)
          } loc(#loc246)
          cir.yield loc(#loc162)
        } step {
          %14 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc175)
          %15 = cir.unary(inc, %14) : !u64i, !u64i loc(#loc176)
          cir.store %15, %3 : !u64i, !cir.ptr<!u64i> loc(#loc248)
          cir.yield loc(#loc243)
        } loc(#loc243)
      } loc(#loc243)
      %5 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc177)
      %6 = cir.const #cir.int<0> : !s32i loc(#loc178)
      %7 = cir.ptr_stride(%5 : !cir.ptr<!s32i>, %6 : !s32i), !cir.ptr<!s32i> loc(#loc179)
      %8 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc177)
      cir.call @printIntLine(%8) : (!s32i) -> () loc(#loc180)
      %9 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc181)
      %10 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc182)
      %11 = cir.cast(bitcast, %10 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc182)
      cir.call @free(%11) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc181)
    } loc(#loc240)
    cir.return loc(#loc128)
  } loc(#loc229)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_15.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc7 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_15.c":34:19)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc9 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc10 = loc("/usr/include/stdlib.h":687:1)
#loc11 = loc("/usr/include/stdlib.h":687:32)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_15.c":21:1)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_15.c":48:1)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_15.c":23:5)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_15.c":23:11)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_15.c":24:12)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_15.c":24:5)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_15.c":25:5)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_15.c":36:5)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_15.c":25:12)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_15.c":29:23)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_15.c":29:30)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_15.c":29:32)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_15.c":29:9)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_15.c":30:9)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_15.c":30:37)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_15.c":30:13)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_15.c":30:21)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_15.c":30:18)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_15.c":30:27)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_15.c":30:28)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_15.c":30:34)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_15.c":30:33)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_15.c":31:9)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_15.c":34:9)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_15.c":35:9)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_15.c":37:5)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_15.c":47:5)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_15.c":38:9)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_15.c":38:28)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_15.c":39:9)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_15.c":39:16)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_15.c":41:9)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_15.c":44:9)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_15.c":41:18)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_15.c":41:14)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_15.c":41:21)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_15.c":41:25)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_15.c":41:23)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_15.c":42:9)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_15.c":43:30)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_15.c":43:23)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_15.c":43:13)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_15.c":43:18)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_15.c":43:19)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_15.c":43:31)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_15.c":41:30)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_15.c":41:29)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_15.c":45:22)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_15.c":45:27)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_15.c":45:28)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_15.c":45:9)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_15.c":46:9)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_15.c":46:14)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_15.c":114:1)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_15.c":118:1)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_15.c":116:5)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_15.c":116:14)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_15.c":117:5)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_15.c":117:14)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_15.c":55:1)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_15.c":82:1)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_15.c":57:5)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_15.c":57:11)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_15.c":58:12)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_15.c":58:5)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_15.c":59:5)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_15.c":70:5)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_15.c":59:12)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_15.c":63:19)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_15.c":63:9)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_15.c":64:9)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_15.c":67:23)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_15.c":67:30)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_15.c":67:33)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_15.c":67:43)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_15.c":67:44)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_15.c":67:9)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_15.c":68:9)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_15.c":68:37)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_15.c":68:13)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_15.c":68:21)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_15.c":68:18)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_15.c":68:27)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_15.c":68:28)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_15.c":68:34)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_15.c":68:33)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_15.c":69:9)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_15.c":71:5)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_15.c":81:5)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_15.c":72:9)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_15.c":72:28)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_15.c":73:9)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_15.c":73:16)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_15.c":75:9)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_15.c":78:9)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_15.c":75:18)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_15.c":75:14)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_15.c":75:21)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_15.c":75:25)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_15.c":75:23)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_15.c":76:9)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_15.c":77:30)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_15.c":77:23)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_15.c":77:13)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_15.c":77:18)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_15.c":77:19)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_15.c":77:31)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_15.c":75:30)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_15.c":75:29)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_15.c":79:22)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_15.c":79:27)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_15.c":79:28)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_15.c":79:9)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_15.c":80:9)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_15.c":80:14)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_15.c":85:1)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_15.c":112:1)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_15.c":87:5)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_15.c":87:11)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_15.c":88:12)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_15.c":88:5)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_15.c":89:5)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_15.c":100:5)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_15.c":89:12)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_15.c":93:23)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_15.c":93:30)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_15.c":93:33)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_15.c":93:43)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_15.c":93:44)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_15.c":93:9)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_15.c":94:9)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_15.c":94:37)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_15.c":94:13)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_15.c":94:21)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_15.c":94:18)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_15.c":94:27)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_15.c":94:28)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_15.c":94:34)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_15.c":94:33)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_15.c":95:9)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_15.c":98:19)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_15.c":98:9)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_15.c":99:9)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_15.c":101:5)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_15.c":111:5)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_15.c":102:9)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_15.c":102:28)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_15.c":103:9)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_15.c":103:16)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_15.c":105:9)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_15.c":108:9)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_15.c":105:18)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_15.c":105:14)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_15.c":105:21)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_15.c":105:25)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_15.c":105:23)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_15.c":106:9)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_15.c":107:30)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_15.c":107:23)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_15.c":107:13)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_15.c":107:18)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_15.c":107:19)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_15.c":107:31)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_15.c":105:30)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_15.c":105:29)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_15.c":109:22)
#loc178 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_15.c":109:27)
#loc179 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_15.c":109:28)
#loc180 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_15.c":109:9)
#loc181 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_15.c":110:9)
#loc182 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_15.c":110:14)
#loc183 = loc(fused[#loc1, #loc2])
#loc184 = loc(fused[#loc3, #loc4])
#loc185 = loc(fused[#loc5, #loc6])
#loc186 = loc(fused[#loc8, #loc9])
#loc187 = loc(fused[#loc10, #loc11])
#loc188 = loc(fused[#loc12, #loc13])
#loc189 = loc(fused[#loc14, #loc15])
#loc190 = loc(fused[#loc17, #loc16])
#loc191 = loc(fused[#loc18, #loc19])
#loc192 = loc(fused[#loc21, #loc23])
#loc193 = loc(fused[#loc24, #loc23])
#loc194 = loc(fused[#loc25, #loc26])
#loc195 = loc(fused[#loc27, #loc28])
#loc196 = loc(fused[#loc30, #loc26])
#loc197 = loc(fused[#loc37, #loc38])
#loc198 = loc(fused[#loc39, #loc40])
#loc199 = loc(fused[#loc41, #loc42])
#loc200 = loc(fused[#loc43, #loc44])
#loc201 = loc(fused[#loc46, #loc45])
#loc202 = loc(fused[#loc47, #loc48])
#loc203 = loc(fused[#loc50, #loc44])
#loc204 = loc(fused[#loc53, #loc56])
#loc205 = loc(fused[#loc58, #loc57])
#loc206 = loc(fused[#loc65, #loc66])
#loc207 = loc(fused[#loc67, #loc68])
#loc208 = loc(fused[#loc69, #loc70])
#loc209 = loc(fused[#loc71, #loc72])
#loc210 = loc(fused[#loc73, #loc74])
#loc211 = loc(fused[#loc76, #loc75])
#loc212 = loc(fused[#loc77, #loc78])
#loc213 = loc(fused[#loc85, #loc86])
#loc214 = loc(fused[#loc84, #loc86])
#loc215 = loc(fused[#loc83, #loc87])
#loc216 = loc(fused[#loc88, #loc87])
#loc217 = loc(fused[#loc89, #loc90])
#loc218 = loc(fused[#loc91, #loc92])
#loc219 = loc(fused[#loc94, #loc90])
#loc220 = loc(fused[#loc99, #loc100])
#loc221 = loc(fused[#loc101, #loc102])
#loc222 = loc(fused[#loc103, #loc104])
#loc223 = loc(fused[#loc105, #loc106])
#loc224 = loc(fused[#loc108, #loc107])
#loc225 = loc(fused[#loc109, #loc110])
#loc226 = loc(fused[#loc112, #loc106])
#loc227 = loc(fused[#loc115, #loc118])
#loc228 = loc(fused[#loc120, #loc119])
#loc229 = loc(fused[#loc127, #loc128])
#loc230 = loc(fused[#loc129, #loc130])
#loc231 = loc(fused[#loc132, #loc131])
#loc232 = loc(fused[#loc133, #loc134])
#loc233 = loc(fused[#loc138, #loc139])
#loc234 = loc(fused[#loc137, #loc139])
#loc235 = loc(fused[#loc136, #loc140])
#loc236 = loc(fused[#loc141, #loc140])
#loc237 = loc(fused[#loc142, #loc143])
#loc238 = loc(fused[#loc144, #loc145])
#loc239 = loc(fused[#loc147, #loc143])
#loc240 = loc(fused[#loc155, #loc156])
#loc241 = loc(fused[#loc157, #loc158])
#loc242 = loc(fused[#loc159, #loc160])
#loc243 = loc(fused[#loc161, #loc162])
#loc244 = loc(fused[#loc164, #loc163])
#loc245 = loc(fused[#loc165, #loc166])
#loc246 = loc(fused[#loc168, #loc162])
#loc247 = loc(fused[#loc171, #loc174])
#loc248 = loc(fused[#loc176, #loc175])
