!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc5 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":22:22)
#loc6 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":22:26)
#loc67 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":97:26)
#loc68 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":97:30)
#loc124 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":61:26)
#loc125 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":61:30)
#true = #cir.bool<true> : !cir.bool
#loc176 = loc(fused[#loc5, #loc6])
#loc201 = loc(fused[#loc67, #loc68])
#loc222 = loc(fused[#loc124, #loc125])
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE124_Buffer_Underwrite/s02/CWE124_Buffer_Underwrite__CWE839_rand_42.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @rand() -> !s32i extra(#fn_attr) loc(#loc174)
  cir.func internal private  @badSource(%arg0: !s32i loc(fused[#loc5, #loc6])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc176)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc4)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc7)
    %2 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc8)
    %4 = cir.binop(and, %2, %3) : !s32i loc(#loc8)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc8)
    %6 = cir.ternary(%5, true {
      %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
      %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc8)
      %12 = cir.const #cir.int<30> : !s32i loc(#loc8)
      %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc8)
      %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
      %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc8)
      %16 = cir.const #cir.int<15> : !s32i loc(#loc8)
      %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc8)
      %18 = cir.binop(xor, %13, %17) : !u32i loc(#loc8)
      %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
      %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc8)
      %21 = cir.binop(xor, %18, %20) : !u32i loc(#loc8)
      cir.yield %21 : !u32i loc(#loc8)
    }, false {
      %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
      %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc8)
      %12 = cir.const #cir.int<30> : !s32i loc(#loc8)
      %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc8)
      %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
      %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc8)
      %16 = cir.const #cir.int<15> : !s32i loc(#loc8)
      %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc8)
      %18 = cir.binop(xor, %13, %17) : !u32i loc(#loc8)
      %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
      %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc8)
      %21 = cir.binop(xor, %18, %20) : !u32i loc(#loc8)
      %22 = cir.unary(minus, %21) : !u32i, !u32i loc(#loc8)
      %23 = cir.const #cir.int<1> : !s32i loc(#loc8)
      %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc8)
      %25 = cir.binop(sub, %22, %24) : !u32i loc(#loc8)
      cir.yield %25 : !u32i loc(#loc8)
    }) : (!cir.bool) -> !u32i loc(#loc8)
    %7 = cir.cast(integral, %6 : !u32i), !s32i loc(#loc8)
    cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc177)
    %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc10)
    cir.store %8, %1 : !s32i, !cir.ptr<!s32i> loc(#loc178)
    %9 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc178)
    cir.return %9 : !s32i loc(#loc178)
  } loc(#loc175)
  cir.func private  @printIntLine(!s32i) loc(#loc179)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc180)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"ERROR: Array index is negative.\00" : !cir.array<!s8i x 32>> : !cir.array<!s8i x 32> {alignment = 1 : i64} loc(#loc16)
  cir.func no_proto  @CWE124_Buffer_Underwrite__CWE839_rand_42_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc182)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc21)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc22)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc183)
    %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc24)
    %4 = cir.call @badSource(%3) : (!s32i) -> !s32i loc(#loc25)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc184)
    cir.scope {
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc186)
      %6 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc187)
      %7 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc187)
      cir.store %7, %6 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc187)
      cir.scope {
        %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc36)
        %9 = cir.const #cir.int<10> : !s32i loc(#loc37)
        %10 = cir.cmp(lt, %8, %9) : !s32i, !s32i loc(#loc189)
        %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc38)
        cir.if %11 {
          %12 = cir.const #cir.int<1> : !s32i loc(#loc42)
          %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc43)
          %14 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc44)
          %15 = cir.ptr_stride(%14 : !cir.ptr<!s32i>, %13 : !s32i), !cir.ptr<!s32i> loc(#loc44)
          cir.store %12, %15 : !s32i, !cir.ptr<!s32i> loc(#loc191)
          cir.scope {
            %16 = cir.const #cir.int<0> : !s32i loc(#loc47)
            cir.store %16, %5 : !s32i, !cir.ptr<!s32i> loc(#loc193)
            cir.for : cond {
              %17 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc49)
              %18 = cir.const #cir.int<10> : !s32i loc(#loc50)
              %19 = cir.cmp(lt, %17, %18) : !s32i, !s32i loc(#loc194)
              %20 = cir.cast(int_to_bool, %19 : !s32i), !cir.bool loc(#loc51)
              cir.condition(%20) loc(#loc51)
            } body {
              cir.scope {
                %17 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc53)
                %18 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc54)
                %19 = cir.ptr_stride(%18 : !cir.ptr<!s32i>, %17 : !s32i), !cir.ptr<!s32i> loc(#loc54)
                %20 = cir.load %19 : !cir.ptr<!s32i>, !s32i loc(#loc54)
                cir.call @printIntLine(%20) : (!s32i) -> () loc(#loc55)
              } loc(#loc195)
              cir.yield loc(#loc46)
            } step {
              %17 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc56)
              %18 = cir.unary(inc, %17) : !s32i, !s32i loc(#loc57)
              cir.store %18, %5 : !s32i, !cir.ptr<!s32i> loc(#loc196)
              cir.yield loc(#loc192)
            } loc(#loc192)
          } loc(#loc192)
        } else {
          %12 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc16)
          %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc16)
          cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc58)
        } loc(#loc190)
      } loc(#loc188)
    } loc(#loc185)
    cir.return loc(#loc18)
  } loc(#loc181)
  cir.func no_proto  @CWE124_Buffer_Underwrite__CWE839_rand_42_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc198)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc61)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc199)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc63)
    cir.return loc(#loc60)
  } loc(#loc197)
  cir.func internal private  @goodB2GSource(%arg0: !s32i loc(fused[#loc67, #loc68])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc201)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc66)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc69)
    %2 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc70)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc70)
    %4 = cir.binop(and, %2, %3) : !s32i loc(#loc70)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc70)
    %6 = cir.ternary(%5, true {
      %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc70)
      %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc70)
      %12 = cir.const #cir.int<30> : !s32i loc(#loc70)
      %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc70)
      %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc70)
      %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc70)
      %16 = cir.const #cir.int<15> : !s32i loc(#loc70)
      %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc70)
      %18 = cir.binop(xor, %13, %17) : !u32i loc(#loc70)
      %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc70)
      %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc70)
      %21 = cir.binop(xor, %18, %20) : !u32i loc(#loc70)
      cir.yield %21 : !u32i loc(#loc70)
    }, false {
      %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc70)
      %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc70)
      %12 = cir.const #cir.int<30> : !s32i loc(#loc70)
      %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc70)
      %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc70)
      %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc70)
      %16 = cir.const #cir.int<15> : !s32i loc(#loc70)
      %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc70)
      %18 = cir.binop(xor, %13, %17) : !u32i loc(#loc70)
      %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc70)
      %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc70)
      %21 = cir.binop(xor, %18, %20) : !u32i loc(#loc70)
      %22 = cir.unary(minus, %21) : !u32i, !u32i loc(#loc70)
      %23 = cir.const #cir.int<1> : !s32i loc(#loc70)
      %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc70)
      %25 = cir.binop(sub, %22, %24) : !u32i loc(#loc70)
      cir.yield %25 : !u32i loc(#loc70)
    }) : (!cir.bool) -> !u32i loc(#loc70)
    %7 = cir.cast(integral, %6 : !u32i), !s32i loc(#loc70)
    cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc202)
    %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc72)
    cir.store %8, %1 : !s32i, !cir.ptr<!s32i> loc(#loc203)
    %9 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc203)
    cir.return %9 : !s32i loc(#loc203)
  } loc(#loc200)
  cir.global "private"  constant internal dsolocal @".str1" = #cir.const_array<"ERROR: Array index is out-of-bounds\00" : !cir.array<!s8i x 36>> : !cir.array<!s8i x 36> {alignment = 1 : i64} loc(#loc74)
  cir.func no_proto internal private  @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc205)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc79)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc80)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc206)
    %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc82)
    %4 = cir.call @goodB2GSource(%3) : (!s32i) -> !s32i loc(#loc83)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc207)
    cir.scope {
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc209)
      %6 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc210)
      %7 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc210)
      cir.store %7, %6 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc210)
      cir.scope {
        %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc94)
        %9 = cir.const #cir.int<0> : !s32i loc(#loc95)
        %10 = cir.cmp(ge, %8, %9) : !s32i, !s32i loc(#loc212)
        %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc96)
        %12 = cir.ternary(%11, true {
          %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc98)
          %14 = cir.const #cir.int<10> : !s32i loc(#loc99)
          %15 = cir.cmp(lt, %13, %14) : !s32i, !s32i loc(#loc213)
          %16 = cir.cast(int_to_bool, %15 : !s32i), !cir.bool loc(#loc101)
          %17 = cir.ternary(%16, true {
            %18 = cir.const #true loc(#loc97)
            cir.yield %18 : !cir.bool loc(#loc97)
          }, false {
            %18 = cir.const #false loc(#loc97)
            cir.yield %18 : !cir.bool loc(#loc97)
          }) : (!cir.bool) -> !cir.bool loc(#loc97)
          cir.yield %17 : !cir.bool loc(#loc97)
        }, false {
          %13 = cir.const #false loc(#loc97)
          cir.yield %13 : !cir.bool loc(#loc97)
        }) : (!cir.bool) -> !cir.bool loc(#loc97)
        cir.if %12 {
          %13 = cir.const #cir.int<1> : !s32i loc(#loc105)
          %14 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc106)
          %15 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc107)
          %16 = cir.ptr_stride(%15 : !cir.ptr<!s32i>, %14 : !s32i), !cir.ptr<!s32i> loc(#loc107)
          cir.store %13, %16 : !s32i, !cir.ptr<!s32i> loc(#loc215)
          cir.scope {
            %17 = cir.const #cir.int<0> : !s32i loc(#loc110)
            cir.store %17, %5 : !s32i, !cir.ptr<!s32i> loc(#loc217)
            cir.for : cond {
              %18 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc112)
              %19 = cir.const #cir.int<10> : !s32i loc(#loc113)
              %20 = cir.cmp(lt, %18, %19) : !s32i, !s32i loc(#loc218)
              %21 = cir.cast(int_to_bool, %20 : !s32i), !cir.bool loc(#loc114)
              cir.condition(%21) loc(#loc114)
            } body {
              cir.scope {
                %18 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc116)
                %19 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc117)
                %20 = cir.ptr_stride(%19 : !cir.ptr<!s32i>, %18 : !s32i), !cir.ptr<!s32i> loc(#loc117)
                %21 = cir.load %20 : !cir.ptr<!s32i>, !s32i loc(#loc117)
                cir.call @printIntLine(%21) : (!s32i) -> () loc(#loc118)
              } loc(#loc219)
              cir.yield loc(#loc109)
            } step {
              %18 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc119)
              %19 = cir.unary(inc, %18) : !s32i, !s32i loc(#loc120)
              cir.store %19, %5 : !s32i, !cir.ptr<!s32i> loc(#loc220)
              cir.yield loc(#loc216)
            } loc(#loc216)
          } loc(#loc216)
        } else {
          %13 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc74)
          %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc74)
          cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc121)
        } loc(#loc214)
      } loc(#loc211)
    } loc(#loc208)
    cir.return loc(#loc76)
  } loc(#loc204)
  cir.func internal private  @goodG2BSource(%arg0: !s32i loc(fused[#loc124, #loc125])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc222)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc123)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc126)
    %2 = cir.const #cir.int<7> : !s32i loc(#loc127)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc223)
    %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc129)
    cir.store %3, %1 : !s32i, !cir.ptr<!s32i> loc(#loc224)
    %4 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc224)
    cir.return %4 : !s32i loc(#loc224)
  } loc(#loc221)
  cir.func no_proto internal private  @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc226)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc135)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc136)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc227)
    %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc138)
    %4 = cir.call @goodG2BSource(%3) : (!s32i) -> !s32i loc(#loc139)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc228)
    cir.scope {
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc230)
      %6 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc231)
      %7 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc231)
      cir.store %7, %6 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc231)
      cir.scope {
        %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc150)
        %9 = cir.const #cir.int<10> : !s32i loc(#loc151)
        %10 = cir.cmp(lt, %8, %9) : !s32i, !s32i loc(#loc233)
        %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc152)
        cir.if %11 {
          %12 = cir.const #cir.int<1> : !s32i loc(#loc156)
          %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc157)
          %14 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc158)
          %15 = cir.ptr_stride(%14 : !cir.ptr<!s32i>, %13 : !s32i), !cir.ptr<!s32i> loc(#loc158)
          cir.store %12, %15 : !s32i, !cir.ptr<!s32i> loc(#loc235)
          cir.scope {
            %16 = cir.const #cir.int<0> : !s32i loc(#loc161)
            cir.store %16, %5 : !s32i, !cir.ptr<!s32i> loc(#loc237)
            cir.for : cond {
              %17 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc163)
              %18 = cir.const #cir.int<10> : !s32i loc(#loc164)
              %19 = cir.cmp(lt, %17, %18) : !s32i, !s32i loc(#loc238)
              %20 = cir.cast(int_to_bool, %19 : !s32i), !cir.bool loc(#loc165)
              cir.condition(%20) loc(#loc165)
            } body {
              cir.scope {
                %17 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc167)
                %18 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc168)
                %19 = cir.ptr_stride(%18 : !cir.ptr<!s32i>, %17 : !s32i), !cir.ptr<!s32i> loc(#loc168)
                %20 = cir.load %19 : !cir.ptr<!s32i>, !s32i loc(#loc168)
                cir.call @printIntLine(%20) : (!s32i) -> () loc(#loc169)
              } loc(#loc239)
              cir.yield loc(#loc160)
            } step {
              %17 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc170)
              %18 = cir.unary(inc, %17) : !s32i, !s32i loc(#loc171)
              cir.store %18, %5 : !s32i, !cir.ptr<!s32i> loc(#loc240)
              cir.yield loc(#loc236)
            } loc(#loc236)
          } loc(#loc236)
        } else {
          %12 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc172)
          %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc172)
          cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc173)
        } loc(#loc234)
      } loc(#loc232)
    } loc(#loc229)
    cir.return loc(#loc132)
  } loc(#loc225)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE124_Buffer_Underwrite/s02/CWE124_Buffer_Underwrite__CWE839_rand_42.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":22:1)
#loc4 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":27:1)
#loc7 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":23:1)
#loc8 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":25:12)
#loc9 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":25:5)
#loc10 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":26:12)
#loc11 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":26:5)
#loc12 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc13 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc14 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc15 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc16 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":51:23)
#loc17 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":29:1)
#loc18 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":54:1)
#loc19 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":31:5)
#loc20 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":31:9)
#loc21 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":33:13)
#loc22 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":33:12)
#loc23 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":33:5)
#loc24 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":34:22)
#loc25 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":34:12)
#loc26 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":34:5)
#loc27 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":34:26)
#loc28 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":35:5)
#loc29 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":53:5)
#loc30 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":36:9)
#loc31 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":36:13)
#loc32 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":37:9)
#loc33 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":37:30)
#loc34 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":40:9)
#loc35 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":52:9)
#loc36 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":40:13)
#loc37 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":40:20)
#loc38 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":40:18)
#loc39 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":41:9)
#loc40 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":48:9)
#loc41 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":50:9)
#loc42 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":42:28)
#loc43 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":42:20)
#loc44 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":42:13)
#loc45 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":44:13)
#loc46 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":47:13)
#loc47 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":44:21)
#loc48 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":44:17)
#loc49 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":44:24)
#loc50 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":44:28)
#loc51 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":44:26)
#loc52 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":45:13)
#loc53 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":46:37)
#loc54 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":46:30)
#loc55 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":46:17)
#loc56 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":44:33)
#loc57 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":44:32)
#loc58 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":51:13)
#loc59 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":130:1)
#loc60 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":134:1)
#loc61 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":132:5)
#loc62 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":132:13)
#loc63 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":133:5)
#loc64 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":133:13)
#loc65 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":97:1)
#loc66 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":102:1)
#loc69 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":98:1)
#loc70 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":100:12)
#loc71 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":100:5)
#loc72 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":101:12)
#loc73 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":101:5)
#loc74 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":125:23)
#loc75 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":104:1)
#loc76 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":128:1)
#loc77 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":106:5)
#loc78 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":106:9)
#loc79 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":108:13)
#loc80 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":108:12)
#loc81 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":108:5)
#loc82 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":109:26)
#loc83 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":109:12)
#loc84 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":109:5)
#loc85 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":109:30)
#loc86 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":110:5)
#loc87 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":127:5)
#loc88 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":111:9)
#loc89 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":111:13)
#loc90 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":112:9)
#loc91 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":112:30)
#loc92 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":114:9)
#loc93 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":126:9)
#loc94 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":114:13)
#loc95 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":114:21)
#loc96 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":114:18)
#loc97 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":114:23)
#loc98 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":114:26)
#loc99 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":114:34)
#loc100 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":114:36)
#loc101 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":114:31)
#loc102 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":115:9)
#loc103 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":122:9)
#loc104 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":124:9)
#loc105 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":116:28)
#loc106 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":116:20)
#loc107 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":116:13)
#loc108 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":118:13)
#loc109 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":121:13)
#loc110 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":118:21)
#loc111 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":118:17)
#loc112 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":118:24)
#loc113 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":118:28)
#loc114 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":118:26)
#loc115 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":119:13)
#loc116 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":120:37)
#loc117 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":120:30)
#loc118 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":120:17)
#loc119 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":118:33)
#loc120 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":118:32)
#loc121 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":125:13)
#loc122 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":61:1)
#loc123 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":67:1)
#loc126 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":62:1)
#loc127 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":65:12)
#loc128 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":65:5)
#loc129 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":66:12)
#loc130 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":66:5)
#loc131 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":69:1)
#loc132 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":94:1)
#loc133 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":71:5)
#loc134 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":71:9)
#loc135 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":73:13)
#loc136 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":73:12)
#loc137 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":73:5)
#loc138 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":74:26)
#loc139 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":74:12)
#loc140 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":74:5)
#loc141 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":74:30)
#loc142 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":75:5)
#loc143 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":93:5)
#loc144 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":76:9)
#loc145 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":76:13)
#loc146 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":77:9)
#loc147 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":77:30)
#loc148 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":80:9)
#loc149 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":92:9)
#loc150 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":80:13)
#loc151 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":80:20)
#loc152 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":80:18)
#loc153 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":81:9)
#loc154 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":88:9)
#loc155 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":90:9)
#loc156 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":82:28)
#loc157 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":82:20)
#loc158 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":82:13)
#loc159 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":84:13)
#loc160 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":87:13)
#loc161 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":84:21)
#loc162 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":84:17)
#loc163 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":84:24)
#loc164 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":84:28)
#loc165 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":84:26)
#loc166 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":85:13)
#loc167 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":86:37)
#loc168 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":86:30)
#loc169 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":86:17)
#loc170 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":84:33)
#loc171 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":84:32)
#loc172 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":91:23)
#loc173 = loc("CWE124_Buffer_Underwrite__CWE839_rand_42.c":91:13)
#loc174 = loc(fused[#loc1, #loc2])
#loc175 = loc(fused[#loc3, #loc4])
#loc177 = loc(fused[#loc9, #loc8])
#loc178 = loc(fused[#loc11, #loc10])
#loc179 = loc(fused[#loc12, #loc13])
#loc180 = loc(fused[#loc14, #loc15])
#loc181 = loc(fused[#loc17, #loc18])
#loc182 = loc(fused[#loc19, #loc20])
#loc183 = loc(fused[#loc23, #loc21])
#loc184 = loc(fused[#loc26, #loc27])
#loc185 = loc(fused[#loc28, #loc29])
#loc186 = loc(fused[#loc30, #loc31])
#loc187 = loc(fused[#loc32, #loc33])
#loc188 = loc(fused[#loc34, #loc35])
#loc189 = loc(fused[#loc36, #loc37])
#loc190 = loc(fused[#loc39, #loc40, #loc41, #loc35])
#loc191 = loc(fused[#loc44, #loc42])
#loc192 = loc(fused[#loc45, #loc46])
#loc193 = loc(fused[#loc48, #loc47])
#loc194 = loc(fused[#loc49, #loc50])
#loc195 = loc(fused[#loc52, #loc46])
#loc196 = loc(fused[#loc57, #loc56])
#loc197 = loc(fused[#loc59, #loc60])
#loc198 = loc(fused[#loc61, #loc62])
#loc199 = loc(fused[#loc63, #loc64])
#loc200 = loc(fused[#loc65, #loc66])
#loc202 = loc(fused[#loc71, #loc70])
#loc203 = loc(fused[#loc73, #loc72])
#loc204 = loc(fused[#loc75, #loc76])
#loc205 = loc(fused[#loc77, #loc78])
#loc206 = loc(fused[#loc81, #loc79])
#loc207 = loc(fused[#loc84, #loc85])
#loc208 = loc(fused[#loc86, #loc87])
#loc209 = loc(fused[#loc88, #loc89])
#loc210 = loc(fused[#loc90, #loc91])
#loc211 = loc(fused[#loc92, #loc93])
#loc212 = loc(fused[#loc94, #loc95])
#loc213 = loc(fused[#loc98, #loc100])
#loc214 = loc(fused[#loc102, #loc103, #loc104, #loc93])
#loc215 = loc(fused[#loc107, #loc105])
#loc216 = loc(fused[#loc108, #loc109])
#loc217 = loc(fused[#loc111, #loc110])
#loc218 = loc(fused[#loc112, #loc113])
#loc219 = loc(fused[#loc115, #loc109])
#loc220 = loc(fused[#loc120, #loc119])
#loc221 = loc(fused[#loc122, #loc123])
#loc223 = loc(fused[#loc128, #loc127])
#loc224 = loc(fused[#loc130, #loc129])
#loc225 = loc(fused[#loc131, #loc132])
#loc226 = loc(fused[#loc133, #loc134])
#loc227 = loc(fused[#loc137, #loc135])
#loc228 = loc(fused[#loc140, #loc141])
#loc229 = loc(fused[#loc142, #loc143])
#loc230 = loc(fused[#loc144, #loc145])
#loc231 = loc(fused[#loc146, #loc147])
#loc232 = loc(fused[#loc148, #loc149])
#loc233 = loc(fused[#loc150, #loc151])
#loc234 = loc(fused[#loc153, #loc154, #loc155, #loc149])
#loc235 = loc(fused[#loc158, #loc156])
#loc236 = loc(fused[#loc159, #loc160])
#loc237 = loc(fused[#loc162, #loc161])
#loc238 = loc(fused[#loc163, #loc164])
#loc239 = loc(fused[#loc166, #loc160])
#loc240 = loc(fused[#loc171, #loc170])
