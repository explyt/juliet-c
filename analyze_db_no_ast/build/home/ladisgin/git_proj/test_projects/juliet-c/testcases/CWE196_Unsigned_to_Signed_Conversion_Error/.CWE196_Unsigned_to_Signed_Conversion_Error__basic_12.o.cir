!s32i = !cir.int<s, 32>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE196_Unsigned_to_Signed_Conversion_Error/CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func no_proto private  @globalReturnsTrueOrFalse(...) -> !s32i loc(#loc147)
  cir.func private  @rand() -> !s32i extra(#fn_attr) loc(#loc148)
  cir.func private  @printIntLine(!s32i) loc(#loc149)
  cir.func private  @exit(!s32i) extra(#fn_attr) loc(#loc150)
  cir.func no_proto  @CWE196_Unsigned_to_Signed_Conversion_Error__basic_12_bad() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc153)
      %1 = cir.cast(bitcast, %0 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc153)
      %2 = cir.call %1() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc13)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc13)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !u32i, !cir.ptr<!u32i>, ["intUnsigned"] {alignment = 4 : i64} loc(#loc156)
          %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["intSigned"] {alignment = 4 : i64} loc(#loc157)
          %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc24)
          %7 = cir.cast(integral, %6 : !s32i), !u32i loc(#loc24)
          cir.store %7, %4 : !u32i, !cir.ptr<!u32i> loc(#loc158)
          cir.scope {
            %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc29)
            %12 = cir.const #cir.int<2> : !s32i loc(#loc30)
            %13 = cir.binop(rem, %11, %12) : !s32i loc(#loc160)
            %14 = cir.const #cir.int<0> : !s32i loc(#loc31)
            %15 = cir.cmp(eq, %13, %14) : !s32i, !s32i loc(#loc161)
            %16 = cir.cast(int_to_bool, %15 : !s32i), !cir.bool loc(#loc32)
            cir.if %16 {
              %17 = cir.const #cir.int<2147483647> : !s32i loc(#loc34)
              %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc34)
              %19 = cir.const #cir.int<2> : !u32i loc(#loc34)
              %20 = cir.binop(mul, %18, %19) : !u32i loc(#loc34)
              %21 = cir.const #cir.int<1> : !u32i loc(#loc34)
              %22 = cir.binop(add, %20, %21) : !u32i loc(#loc34)
              %23 = cir.load %4 : !cir.ptr<!u32i>, !u32i loc(#loc35)
              %24 = cir.binop(sub, %22, %23) : !u32i loc(#loc163)
              cir.store %24, %4 : !u32i, !cir.ptr<!u32i> loc(#loc164)
            } loc(#loc162)
          } loc(#loc159)
          %8 = cir.load %4 : !cir.ptr<!u32i>, !u32i loc(#loc37)
          %9 = cir.cast(integral, %8 : !u32i), !s32i loc(#loc37)
          cir.store %9, %5 : !s32i, !cir.ptr<!s32i> loc(#loc165)
          %10 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc39)
          cir.call @printIntLine(%10) : (!s32i) -> () loc(#loc40)
        } loc(#loc155)
      } else {
        cir.scope {
          %4 = cir.alloca !u32i, !cir.ptr<!u32i>, ["intUnsigned"] {alignment = 4 : i64} loc(#loc167)
          %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["intSigned"] {alignment = 4 : i64} loc(#loc168)
          %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc47)
          %7 = cir.cast(integral, %6 : !s32i), !u32i loc(#loc47)
          cir.store %7, %4 : !u32i, !cir.ptr<!u32i> loc(#loc169)
          cir.scope {
            %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc52)
            %12 = cir.const #cir.int<2> : !s32i loc(#loc53)
            %13 = cir.binop(rem, %11, %12) : !s32i loc(#loc171)
            %14 = cir.const #cir.int<0> : !s32i loc(#loc54)
            %15 = cir.cmp(eq, %13, %14) : !s32i, !s32i loc(#loc172)
            %16 = cir.cast(int_to_bool, %15 : !s32i), !cir.bool loc(#loc55)
            cir.if %16 {
              %17 = cir.const #cir.int<2147483647> : !s32i loc(#loc57)
              %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc57)
              %19 = cir.const #cir.int<2> : !u32i loc(#loc57)
              %20 = cir.binop(mul, %18, %19) : !u32i loc(#loc57)
              %21 = cir.const #cir.int<1> : !u32i loc(#loc57)
              %22 = cir.binop(add, %20, %21) : !u32i loc(#loc57)
              %23 = cir.load %4 : !cir.ptr<!u32i>, !u32i loc(#loc58)
              %24 = cir.binop(sub, %22, %23) : !u32i loc(#loc174)
              cir.store %24, %4 : !u32i, !cir.ptr<!u32i> loc(#loc175)
            } loc(#loc173)
          } loc(#loc170)
          cir.scope {
            %11 = cir.load %4 : !cir.ptr<!u32i>, !u32i loc(#loc62)
            %12 = cir.const #cir.int<2147483647> : !s32i loc(#loc63)
            %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc63)
            %14 = cir.cmp(gt, %11, %13) : !u32i, !s32i loc(#loc177)
            %15 = cir.cast(int_to_bool, %14 : !s32i), !cir.bool loc(#loc64)
            cir.if %15 {
              %16 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc66)
              %17 = cir.const #cir.int<1> : !s32i loc(#loc67)
              cir.call @exit(%17) : (!s32i) -> () extra(#fn_attr) loc(#loc66)
            } loc(#loc178)
          } loc(#loc176)
          %8 = cir.load %4 : !cir.ptr<!u32i>, !u32i loc(#loc68)
          %9 = cir.cast(integral, %8 : !u32i), !s32i loc(#loc68)
          cir.store %9, %5 : !s32i, !cir.ptr<!s32i> loc(#loc179)
          %10 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc70)
          cir.call @printIntLine(%10) : (!s32i) -> () loc(#loc71)
        } loc(#loc166)
      } loc(#loc154)
    } loc(#loc152)
    cir.return loc(#loc10)
  } loc(#loc151)
  cir.func no_proto  @CWE196_Unsigned_to_Signed_Conversion_Error__basic_12_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<!void ()>> loc(#loc181)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc74)
    cir.return loc(#loc73)
  } loc(#loc180)
  cir.func no_proto internal private  @good1() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc184)
      %1 = cir.cast(bitcast, %0 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc184)
      %2 = cir.call %1() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc80)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc80)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !u32i, !cir.ptr<!u32i>, ["intUnsigned"] {alignment = 4 : i64} loc(#loc187)
          %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["intSigned"] {alignment = 4 : i64} loc(#loc188)
          %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc91)
          %7 = cir.cast(integral, %6 : !s32i), !u32i loc(#loc91)
          cir.store %7, %4 : !u32i, !cir.ptr<!u32i> loc(#loc189)
          cir.scope {
            %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc96)
            %12 = cir.const #cir.int<2> : !s32i loc(#loc97)
            %13 = cir.binop(rem, %11, %12) : !s32i loc(#loc191)
            %14 = cir.const #cir.int<0> : !s32i loc(#loc98)
            %15 = cir.cmp(eq, %13, %14) : !s32i, !s32i loc(#loc192)
            %16 = cir.cast(int_to_bool, %15 : !s32i), !cir.bool loc(#loc99)
            cir.if %16 {
              %17 = cir.const #cir.int<2147483647> : !s32i loc(#loc101)
              %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc101)
              %19 = cir.const #cir.int<2> : !u32i loc(#loc101)
              %20 = cir.binop(mul, %18, %19) : !u32i loc(#loc101)
              %21 = cir.const #cir.int<1> : !u32i loc(#loc101)
              %22 = cir.binop(add, %20, %21) : !u32i loc(#loc101)
              %23 = cir.load %4 : !cir.ptr<!u32i>, !u32i loc(#loc102)
              %24 = cir.binop(sub, %22, %23) : !u32i loc(#loc194)
              cir.store %24, %4 : !u32i, !cir.ptr<!u32i> loc(#loc195)
            } loc(#loc193)
          } loc(#loc190)
          cir.scope {
            %11 = cir.load %4 : !cir.ptr<!u32i>, !u32i loc(#loc106)
            %12 = cir.const #cir.int<2147483647> : !s32i loc(#loc107)
            %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc107)
            %14 = cir.cmp(gt, %11, %13) : !u32i, !s32i loc(#loc197)
            %15 = cir.cast(int_to_bool, %14 : !s32i), !cir.bool loc(#loc108)
            cir.if %15 {
              %16 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc110)
              %17 = cir.const #cir.int<1> : !s32i loc(#loc111)
              cir.call @exit(%17) : (!s32i) -> () extra(#fn_attr) loc(#loc110)
            } loc(#loc198)
          } loc(#loc196)
          %8 = cir.load %4 : !cir.ptr<!u32i>, !u32i loc(#loc112)
          %9 = cir.cast(integral, %8 : !u32i), !s32i loc(#loc112)
          cir.store %9, %5 : !s32i, !cir.ptr<!s32i> loc(#loc199)
          %10 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc114)
          cir.call @printIntLine(%10) : (!s32i) -> () loc(#loc115)
        } loc(#loc186)
      } else {
        cir.scope {
          %4 = cir.alloca !u32i, !cir.ptr<!u32i>, ["intUnsigned"] {alignment = 4 : i64} loc(#loc201)
          %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["intSigned"] {alignment = 4 : i64} loc(#loc202)
          %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc122)
          %7 = cir.cast(integral, %6 : !s32i), !u32i loc(#loc122)
          cir.store %7, %4 : !u32i, !cir.ptr<!u32i> loc(#loc203)
          cir.scope {
            %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc127)
            %12 = cir.const #cir.int<2> : !s32i loc(#loc128)
            %13 = cir.binop(rem, %11, %12) : !s32i loc(#loc205)
            %14 = cir.const #cir.int<0> : !s32i loc(#loc129)
            %15 = cir.cmp(eq, %13, %14) : !s32i, !s32i loc(#loc206)
            %16 = cir.cast(int_to_bool, %15 : !s32i), !cir.bool loc(#loc130)
            cir.if %16 {
              %17 = cir.const #cir.int<2147483647> : !s32i loc(#loc132)
              %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc132)
              %19 = cir.const #cir.int<2> : !u32i loc(#loc132)
              %20 = cir.binop(mul, %18, %19) : !u32i loc(#loc132)
              %21 = cir.const #cir.int<1> : !u32i loc(#loc132)
              %22 = cir.binop(add, %20, %21) : !u32i loc(#loc132)
              %23 = cir.load %4 : !cir.ptr<!u32i>, !u32i loc(#loc133)
              %24 = cir.binop(sub, %22, %23) : !u32i loc(#loc208)
              cir.store %24, %4 : !u32i, !cir.ptr<!u32i> loc(#loc209)
            } loc(#loc207)
          } loc(#loc204)
          cir.scope {
            %11 = cir.load %4 : !cir.ptr<!u32i>, !u32i loc(#loc137)
            %12 = cir.const #cir.int<2147483647> : !s32i loc(#loc138)
            %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc138)
            %14 = cir.cmp(gt, %11, %13) : !u32i, !s32i loc(#loc211)
            %15 = cir.cast(int_to_bool, %14 : !s32i), !cir.bool loc(#loc139)
            cir.if %15 {
              %16 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc141)
              %17 = cir.const #cir.int<1> : !s32i loc(#loc142)
              cir.call @exit(%17) : (!s32i) -> () extra(#fn_attr) loc(#loc141)
            } loc(#loc212)
          } loc(#loc210)
          %8 = cir.load %4 : !cir.ptr<!u32i>, !u32i loc(#loc143)
          %9 = cir.cast(integral, %8 : !u32i), !s32i loc(#loc143)
          cir.store %9, %5 : !s32i, !cir.ptr<!s32i> loc(#loc213)
          %10 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc145)
          cir.call @printIntLine(%10) : (!s32i) -> () loc(#loc146)
        } loc(#loc200)
      } loc(#loc185)
    } loc(#loc183)
    cir.return loc(#loc77)
  } loc(#loc182)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE196_Unsigned_to_Signed_Conversion_Error/CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":0:0)
#loc1 = loc("../../testcasesupport/std_testcase_io.h":52:1)
#loc2 = loc("../../testcasesupport/std_testcase_io.h":52:30)
#loc3 = loc("/usr/include/stdlib.h":573:1)
#loc4 = loc("/usr/include/stdlib.h":573:24)
#loc5 = loc("../../testcasesupport/std_testcase_io.h":18:1)
#loc6 = loc("../../testcasesupport/std_testcase_io.h":18:33)
#loc7 = loc("/usr/include/stdlib.h":756:1)
#loc8 = loc("/usr/include/stdlib.h":756:70)
#loc9 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":20:1)
#loc10 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":56:1)
#loc11 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":22:5)
#loc12 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":55:5)
#loc13 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":22:8)
#loc14 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":22:33)
#loc15 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":23:5)
#loc16 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":36:5)
#loc17 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":38:5)
#loc18 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":24:9)
#loc19 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":35:9)
#loc20 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":25:13)
#loc21 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":25:22)
#loc22 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":26:13)
#loc23 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":26:17)
#loc24 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":27:27)
#loc25 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":27:13)
#loc26 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":27:32)
#loc27 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":28:13)
#loc28 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":31:13)
#loc29 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":28:17)
#loc30 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":28:26)
#loc31 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":28:31)
#loc32 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":28:28)
#loc33 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":29:13)
#loc34 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":30:31)
#loc35 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":30:42)
#loc36 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":30:17)
#loc37 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":33:25)
#loc38 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":33:13)
#loc39 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":34:26)
#loc40 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":34:13)
#loc41 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":39:9)
#loc42 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":54:9)
#loc43 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":40:13)
#loc44 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":40:22)
#loc45 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":41:13)
#loc46 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":41:17)
#loc47 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":42:27)
#loc48 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":42:13)
#loc49 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":42:32)
#loc50 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":43:13)
#loc51 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":46:13)
#loc52 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":43:17)
#loc53 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":43:26)
#loc54 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":43:31)
#loc55 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":43:28)
#loc56 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":44:13)
#loc57 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":45:31)
#loc58 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":45:42)
#loc59 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":45:17)
#loc60 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":48:13)
#loc61 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":51:13)
#loc62 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":48:17)
#loc63 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":48:31)
#loc64 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":48:29)
#loc65 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":49:13)
#loc66 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":50:17)
#loc67 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":50:22)
#loc68 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":52:25)
#loc69 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":52:13)
#loc70 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":53:26)
#loc71 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":53:13)
#loc72 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":105:1)
#loc73 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":108:1)
#loc74 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":107:5)
#loc75 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":107:11)
#loc76 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":63:1)
#loc77 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":103:1)
#loc78 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":65:5)
#loc79 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":102:5)
#loc80 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":65:8)
#loc81 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":65:33)
#loc82 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":66:5)
#loc83 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":83:5)
#loc84 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":85:5)
#loc85 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":67:9)
#loc86 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":82:9)
#loc87 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":68:13)
#loc88 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":68:22)
#loc89 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":69:13)
#loc90 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":69:17)
#loc91 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":70:27)
#loc92 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":70:13)
#loc93 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":70:32)
#loc94 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":71:13)
#loc95 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":74:13)
#loc96 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":71:17)
#loc97 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":71:26)
#loc98 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":71:31)
#loc99 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":71:28)
#loc100 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":72:13)
#loc101 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":73:31)
#loc102 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":73:42)
#loc103 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":73:17)
#loc104 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":76:13)
#loc105 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":79:13)
#loc106 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":76:17)
#loc107 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":76:31)
#loc108 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":76:29)
#loc109 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":77:13)
#loc110 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":78:17)
#loc111 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":78:22)
#loc112 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":80:25)
#loc113 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":80:13)
#loc114 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":81:26)
#loc115 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":81:13)
#loc116 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":86:9)
#loc117 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":101:9)
#loc118 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":87:13)
#loc119 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":87:22)
#loc120 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":88:13)
#loc121 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":88:17)
#loc122 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":89:27)
#loc123 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":89:13)
#loc124 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":89:32)
#loc125 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":90:13)
#loc126 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":93:13)
#loc127 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":90:17)
#loc128 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":90:26)
#loc129 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":90:31)
#loc130 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":90:28)
#loc131 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":91:13)
#loc132 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":92:31)
#loc133 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":92:42)
#loc134 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":92:17)
#loc135 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":95:13)
#loc136 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":98:13)
#loc137 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":95:17)
#loc138 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":95:31)
#loc139 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":95:29)
#loc140 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":96:13)
#loc141 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":97:17)
#loc142 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":97:22)
#loc143 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":99:25)
#loc144 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":99:13)
#loc145 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":100:26)
#loc146 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_12.c":100:13)
#loc147 = loc(fused[#loc1, #loc2])
#loc148 = loc(fused[#loc3, #loc4])
#loc149 = loc(fused[#loc5, #loc6])
#loc150 = loc(fused[#loc7, #loc8])
#loc151 = loc(fused[#loc9, #loc10])
#loc152 = loc(fused[#loc11, #loc12])
#loc153 = loc(fused[#loc13, #loc14])
#loc154 = loc(fused[#loc15, #loc16, #loc17, #loc12])
#loc155 = loc(fused[#loc18, #loc19])
#loc156 = loc(fused[#loc20, #loc21])
#loc157 = loc(fused[#loc22, #loc23])
#loc158 = loc(fused[#loc25, #loc26])
#loc159 = loc(fused[#loc27, #loc28])
#loc160 = loc(fused[#loc29, #loc30])
#loc161 = loc(fused[#loc29, #loc31])
#loc162 = loc(fused[#loc33, #loc28])
#loc163 = loc(fused[#loc34, #loc35])
#loc164 = loc(fused[#loc36, #loc35])
#loc165 = loc(fused[#loc38, #loc37])
#loc166 = loc(fused[#loc41, #loc42])
#loc167 = loc(fused[#loc43, #loc44])
#loc168 = loc(fused[#loc45, #loc46])
#loc169 = loc(fused[#loc48, #loc49])
#loc170 = loc(fused[#loc50, #loc51])
#loc171 = loc(fused[#loc52, #loc53])
#loc172 = loc(fused[#loc52, #loc54])
#loc173 = loc(fused[#loc56, #loc51])
#loc174 = loc(fused[#loc57, #loc58])
#loc175 = loc(fused[#loc59, #loc58])
#loc176 = loc(fused[#loc60, #loc61])
#loc177 = loc(fused[#loc62, #loc63])
#loc178 = loc(fused[#loc65, #loc61])
#loc179 = loc(fused[#loc69, #loc68])
#loc180 = loc(fused[#loc72, #loc73])
#loc181 = loc(fused[#loc74, #loc75])
#loc182 = loc(fused[#loc76, #loc77])
#loc183 = loc(fused[#loc78, #loc79])
#loc184 = loc(fused[#loc80, #loc81])
#loc185 = loc(fused[#loc82, #loc83, #loc84, #loc79])
#loc186 = loc(fused[#loc85, #loc86])
#loc187 = loc(fused[#loc87, #loc88])
#loc188 = loc(fused[#loc89, #loc90])
#loc189 = loc(fused[#loc92, #loc93])
#loc190 = loc(fused[#loc94, #loc95])
#loc191 = loc(fused[#loc96, #loc97])
#loc192 = loc(fused[#loc96, #loc98])
#loc193 = loc(fused[#loc100, #loc95])
#loc194 = loc(fused[#loc101, #loc102])
#loc195 = loc(fused[#loc103, #loc102])
#loc196 = loc(fused[#loc104, #loc105])
#loc197 = loc(fused[#loc106, #loc107])
#loc198 = loc(fused[#loc109, #loc105])
#loc199 = loc(fused[#loc113, #loc112])
#loc200 = loc(fused[#loc116, #loc117])
#loc201 = loc(fused[#loc118, #loc119])
#loc202 = loc(fused[#loc120, #loc121])
#loc203 = loc(fused[#loc123, #loc124])
#loc204 = loc(fused[#loc125, #loc126])
#loc205 = loc(fused[#loc127, #loc128])
#loc206 = loc(fused[#loc127, #loc129])
#loc207 = loc(fused[#loc131, #loc126])
#loc208 = loc(fused[#loc132, #loc133])
#loc209 = loc(fused[#loc134, #loc133])
#loc210 = loc(fused[#loc135, #loc136])
#loc211 = loc(fused[#loc137, #loc138])
#loc212 = loc(fused[#loc140, #loc136])
#loc213 = loc(fused[#loc144, #loc143])
