!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<[#cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<0> : !s32i]> : !cir.array<!s32i x 43> {alignment = 4 : i64} loc(#loc1)
  cir.func private  @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc196)
  cir.func private  @wcscpy(!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc197)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc198)
  cir.func no_proto  @CWE121_Stack_Based_Buffer_Overflow__CWE135_06_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc200)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc12)
    cir.store %1, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc201)
    cir.scope {
      %2 = cir.const #cir.int<5> : !s32i loc(#loc16)
      %3 = cir.const #cir.int<5> : !s32i loc(#loc17)
      %4 = cir.cmp(eq, %2, %3) : !s32i, !s32i loc(#loc203)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc18)
      cir.if %5 {
        %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s32i x 43>> loc(#loc1)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s32i x 43>>), !cir.ptr<!s32i> loc(#loc1)
        %8 = cir.cast(bitcast, %7 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc1)
        cir.store %8, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc205)
      } loc(#loc204)
    } loc(#loc202)
    cir.scope {
      %2 = cir.const #cir.int<5> : !s32i loc(#loc23)
      %3 = cir.const #cir.int<5> : !s32i loc(#loc24)
      %4 = cir.cmp(eq, %2, %3) : !s32i, !s32i loc(#loc207)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc25)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc210)
          %7 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc211)
          %8 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc33)
          %9 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc34)
          %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc34)
          %11 = cir.call @strlen(%10) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc33)
          cir.store %11, %6 : !u64i, !cir.ptr<!u64i> loc(#loc210)
          %12 = cir.load %6 : !cir.ptr<!u64i>, !u64i loc(#loc32)
          %13 = cir.const #cir.int<1> : !s32i loc(#loc32)
          %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc32)
          %15 = cir.binop(add, %12, %14) : !u64i loc(#loc32)
          %16 = cir.const #cir.int<4> : !u64i loc(#loc32)
          %17 = cir.binop(mul, %15, %16) : !u64i loc(#loc32)
          %18 = cir.alloca !u8i, !cir.ptr<!u8i>, %17 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc32)
          %19 = cir.cast(bitcast, %18 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc32)
          cir.store %19, %7 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc211)
          %20 = cir.load %7 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc35)
          %21 = cir.cast(bitcast, %20 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc35)
          %22 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc36)
          %23 = cir.cast(bitcast, %22 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc36)
          %24 = cir.call @wcscpy(%21, %23) : (!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc37)
          %25 = cir.load %7 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc38)
          %26 = cir.cast(bitcast, %25 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc38)
          cir.call @printLine(%26) : (!cir.ptr<!s8i>) -> () loc(#loc39)
        } loc(#loc209)
      } loc(#loc208)
    } loc(#loc206)
    cir.return loc(#loc9)
  } loc(#loc199)
  cir.func no_proto  @CWE121_Stack_Based_Buffer_Overflow__CWE135_06_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc213)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc42)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc214)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc44)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc215)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc46)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc216)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc48)
    cir.return loc(#loc41)
  } loc(#loc212)
  cir.global "private"  constant internal dsolocal @".str1" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc50)
  cir.func private  @wcslen(!cir.ptr<!s32i>) -> !u64i extra(#fn_attr) loc(#loc217)
  cir.func private  @printWLine(!cir.ptr<!s32i>) loc(#loc218)
  cir.func no_proto internal private  @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc220)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc59)
    cir.store %1, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc221)
    cir.scope {
      %2 = cir.const #cir.int<5> : !s32i loc(#loc63)
      %3 = cir.const #cir.int<5> : !s32i loc(#loc64)
      %4 = cir.cmp(eq, %2, %3) : !s32i, !s32i loc(#loc223)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc65)
      cir.if %5 {
        %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s32i x 43>> loc(#loc67)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s32i x 43>>), !cir.ptr<!s32i> loc(#loc67)
        %8 = cir.cast(bitcast, %7 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc67)
        cir.store %8, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc225)
      } loc(#loc224)
    } loc(#loc222)
    cir.scope {
      %2 = cir.const #cir.int<5> : !s32i loc(#loc71)
      %3 = cir.const #cir.int<5> : !s32i loc(#loc72)
      %4 = cir.cmp(ne, %2, %3) : !s32i, !s32i loc(#loc227)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc73)
      cir.if %5 {
        %6 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc50)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc50)
        cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc77)
      } else {
        cir.scope {
          %6 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc230)
          %7 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc231)
          %8 = cir.get_global @wcslen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s32i>)>> loc(#loc84)
          %9 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc85)
          %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc85)
          %11 = cir.call @wcslen(%10) : (!cir.ptr<!s32i>) -> !u64i extra(#fn_attr) loc(#loc84)
          cir.store %11, %6 : !u64i, !cir.ptr<!u64i> loc(#loc230)
          %12 = cir.load %6 : !cir.ptr<!u64i>, !u64i loc(#loc83)
          %13 = cir.const #cir.int<1> : !s32i loc(#loc83)
          %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc83)
          %15 = cir.binop(add, %12, %14) : !u64i loc(#loc83)
          %16 = cir.const #cir.int<4> : !u64i loc(#loc83)
          %17 = cir.binop(mul, %15, %16) : !u64i loc(#loc83)
          %18 = cir.alloca !u8i, !cir.ptr<!u8i>, %17 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc83)
          %19 = cir.cast(bitcast, %18 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc83)
          cir.store %19, %7 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc231)
          %20 = cir.load %7 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc86)
          %21 = cir.cast(bitcast, %20 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc86)
          %22 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc87)
          %23 = cir.cast(bitcast, %22 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc87)
          %24 = cir.call @wcscpy(%21, %23) : (!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc88)
          %25 = cir.load %7 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc89)
          %26 = cir.cast(bitcast, %25 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc89)
          cir.call @printWLine(%26) : (!cir.ptr<!s32i>) -> () loc(#loc90)
        } loc(#loc229)
      } loc(#loc228)
    } loc(#loc226)
    cir.return loc(#loc56)
  } loc(#loc219)
  cir.func no_proto internal private  @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc233)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc95)
    cir.store %1, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc234)
    cir.scope {
      %2 = cir.const #cir.int<5> : !s32i loc(#loc99)
      %3 = cir.const #cir.int<5> : !s32i loc(#loc100)
      %4 = cir.cmp(eq, %2, %3) : !s32i, !s32i loc(#loc236)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc101)
      cir.if %5 {
        %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s32i x 43>> loc(#loc103)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s32i x 43>>), !cir.ptr<!s32i> loc(#loc103)
        %8 = cir.cast(bitcast, %7 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc103)
        cir.store %8, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc238)
      } loc(#loc237)
    } loc(#loc235)
    cir.scope {
      %2 = cir.const #cir.int<5> : !s32i loc(#loc107)
      %3 = cir.const #cir.int<5> : !s32i loc(#loc108)
      %4 = cir.cmp(eq, %2, %3) : !s32i, !s32i loc(#loc240)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc109)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc243)
          %7 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc244)
          %8 = cir.get_global @wcslen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s32i>)>> loc(#loc117)
          %9 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc118)
          %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc118)
          %11 = cir.call @wcslen(%10) : (!cir.ptr<!s32i>) -> !u64i extra(#fn_attr) loc(#loc117)
          cir.store %11, %6 : !u64i, !cir.ptr<!u64i> loc(#loc243)
          %12 = cir.load %6 : !cir.ptr<!u64i>, !u64i loc(#loc116)
          %13 = cir.const #cir.int<1> : !s32i loc(#loc116)
          %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc116)
          %15 = cir.binop(add, %12, %14) : !u64i loc(#loc116)
          %16 = cir.const #cir.int<4> : !u64i loc(#loc116)
          %17 = cir.binop(mul, %15, %16) : !u64i loc(#loc116)
          %18 = cir.alloca !u8i, !cir.ptr<!u8i>, %17 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc116)
          %19 = cir.cast(bitcast, %18 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc116)
          cir.store %19, %7 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc244)
          %20 = cir.load %7 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc119)
          %21 = cir.cast(bitcast, %20 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc119)
          %22 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc120)
          %23 = cir.cast(bitcast, %22 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc120)
          %24 = cir.call @wcscpy(%21, %23) : (!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc121)
          %25 = cir.load %7 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc122)
          %26 = cir.cast(bitcast, %25 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc122)
          cir.call @printWLine(%26) : (!cir.ptr<!s32i>) -> () loc(#loc123)
        } loc(#loc242)
      } loc(#loc241)
    } loc(#loc239)
    cir.return loc(#loc92)
  } loc(#loc232)
  cir.global "private"  constant internal dsolocal @".str2" = #cir.const_array<"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\00" : !cir.array<!s8i x 43>> : !cir.array<!s8i x 43> {alignment = 1 : i64} loc(#loc124)
  cir.func private  @strcpy(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc245)
  cir.func no_proto internal private  @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc247)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc131)
    cir.store %1, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc248)
    cir.scope {
      %2 = cir.const #cir.int<5> : !s32i loc(#loc135)
      %3 = cir.const #cir.int<5> : !s32i loc(#loc136)
      %4 = cir.cmp(ne, %2, %3) : !s32i, !s32i loc(#loc250)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc137)
      cir.if %5 {
        %6 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc141)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc141)
        cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc142)
      } else {
        %6 = cir.get_global @".str2" : !cir.ptr<!cir.array<!s8i x 43>> loc(#loc124)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 43>>), !cir.ptr<!s8i> loc(#loc124)
        %8 = cir.cast(bitcast, %7 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc124)
        cir.store %8, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc252)
      } loc(#loc251)
    } loc(#loc249)
    cir.scope {
      %2 = cir.const #cir.int<5> : !s32i loc(#loc146)
      %3 = cir.const #cir.int<5> : !s32i loc(#loc147)
      %4 = cir.cmp(eq, %2, %3) : !s32i, !s32i loc(#loc254)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc148)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc257)
          %7 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc258)
          %8 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc156)
          %9 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc157)
          %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc157)
          %11 = cir.call @strlen(%10) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc156)
          cir.store %11, %6 : !u64i, !cir.ptr<!u64i> loc(#loc257)
          %12 = cir.load %6 : !cir.ptr<!u64i>, !u64i loc(#loc155)
          %13 = cir.const #cir.int<1> : !s32i loc(#loc155)
          %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc155)
          %15 = cir.binop(add, %12, %14) : !u64i loc(#loc155)
          %16 = cir.const #cir.int<1> : !s32i loc(#loc155)
          %17 = cir.cast(integral, %16 : !s32i), !u64i loc(#loc155)
          %18 = cir.binop(mul, %15, %17) : !u64i loc(#loc155)
          %19 = cir.alloca !u8i, !cir.ptr<!u8i>, %18 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc155)
          %20 = cir.cast(bitcast, %19 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc155)
          cir.store %20, %7 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc258)
          %21 = cir.get_global @strcpy : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc158)
          %22 = cir.load %7 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc159)
          %23 = cir.cast(bitcast, %22 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc159)
          %24 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc160)
          %25 = cir.cast(bitcast, %24 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc160)
          %26 = cir.call @strcpy(%23, %25) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc158)
          %27 = cir.load %7 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc161)
          %28 = cir.cast(bitcast, %27 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc161)
          cir.call @printLine(%28) : (!cir.ptr<!s8i>) -> () loc(#loc162)
        } loc(#loc256)
      } loc(#loc255)
    } loc(#loc253)
    cir.return loc(#loc128)
  } loc(#loc246)
  cir.func no_proto internal private  @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc260)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc167)
    cir.store %1, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc261)
    cir.scope {
      %2 = cir.const #cir.int<5> : !s32i loc(#loc171)
      %3 = cir.const #cir.int<5> : !s32i loc(#loc172)
      %4 = cir.cmp(eq, %2, %3) : !s32i, !s32i loc(#loc263)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc173)
      cir.if %5 {
        %6 = cir.get_global @".str2" : !cir.ptr<!cir.array<!s8i x 43>> loc(#loc175)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 43>>), !cir.ptr<!s8i> loc(#loc175)
        %8 = cir.cast(bitcast, %7 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc175)
        cir.store %8, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc265)
      } loc(#loc264)
    } loc(#loc262)
    cir.scope {
      %2 = cir.const #cir.int<5> : !s32i loc(#loc179)
      %3 = cir.const #cir.int<5> : !s32i loc(#loc180)
      %4 = cir.cmp(eq, %2, %3) : !s32i, !s32i loc(#loc267)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc181)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc270)
          %7 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc271)
          %8 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc189)
          %9 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc190)
          %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc190)
          %11 = cir.call @strlen(%10) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc189)
          cir.store %11, %6 : !u64i, !cir.ptr<!u64i> loc(#loc270)
          %12 = cir.load %6 : !cir.ptr<!u64i>, !u64i loc(#loc188)
          %13 = cir.const #cir.int<1> : !s32i loc(#loc188)
          %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc188)
          %15 = cir.binop(add, %12, %14) : !u64i loc(#loc188)
          %16 = cir.const #cir.int<1> : !s32i loc(#loc188)
          %17 = cir.cast(integral, %16 : !s32i), !u64i loc(#loc188)
          %18 = cir.binop(mul, %15, %17) : !u64i loc(#loc188)
          %19 = cir.alloca !u8i, !cir.ptr<!u8i>, %18 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc188)
          %20 = cir.cast(bitcast, %19 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc188)
          cir.store %20, %7 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc271)
          %21 = cir.get_global @strcpy : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc191)
          %22 = cir.load %7 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc192)
          %23 = cir.cast(bitcast, %22 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc192)
          %24 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc193)
          %25 = cir.cast(bitcast, %24 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc193)
          %26 = cir.call @strcpy(%23, %25) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc191)
          %27 = cir.load %7 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc194)
          %28 = cir.cast(bitcast, %27 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc194)
          cir.call @printLine(%28) : (!cir.ptr<!s8i>) -> () loc(#loc195)
        } loc(#loc269)
      } loc(#loc268)
    } loc(#loc266)
    cir.return loc(#loc164)
  } loc(#loc259)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":0:0)
#loc1 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":39:24)
#loc2 = loc("/usr/include/string.h":407:1)
#loc3 = loc("/usr/include/string.h":408:33)
#loc4 = loc("/usr/include/wchar.h":98:1)
#loc5 = loc("/usr/include/wchar.h":100:14)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc8 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":32:1)
#loc9 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":51:1)
#loc10 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":34:5)
#loc11 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":34:12)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":35:12)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":35:5)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":36:5)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":40:5)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":36:8)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":36:27)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":36:25)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":37:5)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":39:9)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":41:5)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":50:5)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":41:8)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":41:27)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":41:25)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":42:5)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":43:9)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":49:9)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":45:13)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":45:49)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":46:13)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":46:35)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":45:30)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":45:45)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":47:26)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":47:32)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":47:19)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":48:31)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":48:13)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":155:1)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":161:1)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":157:5)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":157:14)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":158:5)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":158:14)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":159:5)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":159:14)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":160:5)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":160:14)
#loc50 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":70:19)
#loc51 = loc("/usr/include/wchar.h":247:1)
#loc52 = loc("/usr/include/wchar.h":247:51)
#loc53 = loc("../../../testcasesupport/std_testcase_io.h":16:1)
#loc54 = loc("../../../testcasesupport/std_testcase_io.h":16:37)
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":58:1)
#loc56 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":82:1)
#loc57 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":60:5)
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":60:12)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":61:12)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":61:5)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":62:5)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":66:5)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":62:8)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":62:27)
#loc65 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":62:25)
#loc66 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":63:5)
#loc67 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":65:24)
#loc68 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":65:9)
#loc69 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":67:5)
#loc70 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":81:5)
#loc71 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":67:8)
#loc72 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":67:27)
#loc73 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":67:25)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":68:5)
#loc75 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":71:5)
#loc76 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":73:5)
#loc77 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":70:9)
#loc78 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":74:9)
#loc79 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":80:9)
#loc80 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":76:13)
#loc81 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":76:52)
#loc82 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":77:13)
#loc83 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":77:35)
#loc84 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":76:30)
#loc85 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":76:48)
#loc86 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":78:26)
#loc87 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":78:32)
#loc88 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":78:19)
#loc89 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":79:35)
#loc90 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":79:13)
#loc91 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":85:1)
#loc92 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":104:1)
#loc93 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":87:5)
#loc94 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":87:12)
#loc95 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":88:12)
#loc96 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":88:5)
#loc97 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":89:5)
#loc98 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":93:5)
#loc99 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":89:8)
#loc100 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":89:27)
#loc101 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":89:25)
#loc102 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":90:5)
#loc103 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":92:24)
#loc104 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":92:9)
#loc105 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":94:5)
#loc106 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":103:5)
#loc107 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":94:8)
#loc108 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":94:27)
#loc109 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":94:25)
#loc110 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":95:5)
#loc111 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":96:9)
#loc112 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":102:9)
#loc113 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":98:13)
#loc114 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":98:52)
#loc115 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":99:13)
#loc116 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":99:35)
#loc117 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":98:30)
#loc118 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":98:48)
#loc119 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":100:26)
#loc120 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":100:32)
#loc121 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":100:19)
#loc122 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":101:35)
#loc123 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":101:13)
#loc124 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":119:24)
#loc125 = loc("/usr/include/string.h":141:1)
#loc126 = loc("/usr/include/string.h":142:14)
#loc127 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":107:1)
#loc128 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":131:1)
#loc129 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":109:5)
#loc130 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":109:12)
#loc131 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":110:12)
#loc132 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":110:5)
#loc133 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":111:5)
#loc134 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":120:5)
#loc135 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":111:8)
#loc136 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":111:27)
#loc137 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":111:25)
#loc138 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":112:5)
#loc139 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":115:5)
#loc140 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":117:5)
#loc141 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":114:19)
#loc142 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":114:9)
#loc143 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":119:9)
#loc144 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":121:5)
#loc145 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":130:5)
#loc146 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":121:8)
#loc147 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":121:27)
#loc148 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":121:25)
#loc149 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":122:5)
#loc150 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":123:9)
#loc151 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":129:9)
#loc152 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":125:13)
#loc153 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":125:49)
#loc154 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":126:13)
#loc155 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":126:35)
#loc156 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":125:30)
#loc157 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":125:45)
#loc158 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":127:19)
#loc159 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":127:26)
#loc160 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":127:32)
#loc161 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":128:31)
#loc162 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":128:13)
#loc163 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":134:1)
#loc164 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":153:1)
#loc165 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":136:5)
#loc166 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":136:12)
#loc167 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":137:12)
#loc168 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":137:5)
#loc169 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":138:5)
#loc170 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":142:5)
#loc171 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":138:8)
#loc172 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":138:27)
#loc173 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":138:25)
#loc174 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":139:5)
#loc175 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":141:24)
#loc176 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":141:9)
#loc177 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":143:5)
#loc178 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":152:5)
#loc179 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":143:8)
#loc180 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":143:27)
#loc181 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":143:25)
#loc182 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":144:5)
#loc183 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":145:9)
#loc184 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":151:9)
#loc185 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":147:13)
#loc186 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":147:49)
#loc187 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":148:13)
#loc188 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":148:35)
#loc189 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":147:30)
#loc190 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":147:45)
#loc191 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":149:19)
#loc192 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":149:26)
#loc193 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":149:32)
#loc194 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":150:31)
#loc195 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c":150:13)
#loc196 = loc(fused[#loc2, #loc3])
#loc197 = loc(fused[#loc4, #loc5])
#loc198 = loc(fused[#loc6, #loc7])
#loc199 = loc(fused[#loc8, #loc9])
#loc200 = loc(fused[#loc10, #loc11])
#loc201 = loc(fused[#loc13, #loc12])
#loc202 = loc(fused[#loc14, #loc15])
#loc203 = loc(fused[#loc16, #loc17])
#loc204 = loc(fused[#loc19, #loc15])
#loc205 = loc(fused[#loc20, #loc1])
#loc206 = loc(fused[#loc21, #loc22])
#loc207 = loc(fused[#loc23, #loc24])
#loc208 = loc(fused[#loc26, #loc22])
#loc209 = loc(fused[#loc27, #loc28])
#loc210 = loc(fused[#loc29, #loc30])
#loc211 = loc(fused[#loc31, #loc32])
#loc212 = loc(fused[#loc40, #loc41])
#loc213 = loc(fused[#loc42, #loc43])
#loc214 = loc(fused[#loc44, #loc45])
#loc215 = loc(fused[#loc46, #loc47])
#loc216 = loc(fused[#loc48, #loc49])
#loc217 = loc(fused[#loc51, #loc52])
#loc218 = loc(fused[#loc53, #loc54])
#loc219 = loc(fused[#loc55, #loc56])
#loc220 = loc(fused[#loc57, #loc58])
#loc221 = loc(fused[#loc60, #loc59])
#loc222 = loc(fused[#loc61, #loc62])
#loc223 = loc(fused[#loc63, #loc64])
#loc224 = loc(fused[#loc66, #loc62])
#loc225 = loc(fused[#loc68, #loc67])
#loc226 = loc(fused[#loc69, #loc70])
#loc227 = loc(fused[#loc71, #loc72])
#loc228 = loc(fused[#loc74, #loc75, #loc76, #loc70])
#loc229 = loc(fused[#loc78, #loc79])
#loc230 = loc(fused[#loc80, #loc81])
#loc231 = loc(fused[#loc82, #loc83])
#loc232 = loc(fused[#loc91, #loc92])
#loc233 = loc(fused[#loc93, #loc94])
#loc234 = loc(fused[#loc96, #loc95])
#loc235 = loc(fused[#loc97, #loc98])
#loc236 = loc(fused[#loc99, #loc100])
#loc237 = loc(fused[#loc102, #loc98])
#loc238 = loc(fused[#loc104, #loc103])
#loc239 = loc(fused[#loc105, #loc106])
#loc240 = loc(fused[#loc107, #loc108])
#loc241 = loc(fused[#loc110, #loc106])
#loc242 = loc(fused[#loc111, #loc112])
#loc243 = loc(fused[#loc113, #loc114])
#loc244 = loc(fused[#loc115, #loc116])
#loc245 = loc(fused[#loc125, #loc126])
#loc246 = loc(fused[#loc127, #loc128])
#loc247 = loc(fused[#loc129, #loc130])
#loc248 = loc(fused[#loc132, #loc131])
#loc249 = loc(fused[#loc133, #loc134])
#loc250 = loc(fused[#loc135, #loc136])
#loc251 = loc(fused[#loc138, #loc139, #loc140, #loc134])
#loc252 = loc(fused[#loc143, #loc124])
#loc253 = loc(fused[#loc144, #loc145])
#loc254 = loc(fused[#loc146, #loc147])
#loc255 = loc(fused[#loc149, #loc145])
#loc256 = loc(fused[#loc150, #loc151])
#loc257 = loc(fused[#loc152, #loc153])
#loc258 = loc(fused[#loc154, #loc155])
#loc259 = loc(fused[#loc163, #loc164])
#loc260 = loc(fused[#loc165, #loc166])
#loc261 = loc(fused[#loc168, #loc167])
#loc262 = loc(fused[#loc169, #loc170])
#loc263 = loc(fused[#loc171, #loc172])
#loc264 = loc(fused[#loc174, #loc170])
#loc265 = loc(fused[#loc176, #loc175])
#loc266 = loc(fused[#loc177, #loc178])
#loc267 = loc(fused[#loc179, #loc180])
#loc268 = loc(fused[#loc182, #loc178])
#loc269 = loc(fused[#loc183, #loc184])
#loc270 = loc(fused[#loc185, #loc186])
#loc271 = loc(fused[#loc187, #loc188])
