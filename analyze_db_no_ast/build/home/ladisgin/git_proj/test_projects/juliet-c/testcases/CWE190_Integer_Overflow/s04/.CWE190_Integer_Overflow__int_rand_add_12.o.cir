!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__int_rand_add_12.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func no_proto private  @globalReturnsTrueOrFalse(...) -> !s32i loc(#loc153)
  cir.func private  @rand() -> !s32i extra(#fn_attr) loc(#loc154)
  cir.func private  @printIntLine(!s32i) loc(#loc155)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc156)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc9)
  cir.func no_proto  @CWE190_Integer_Overflow__int_rand_add_12_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc158)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc14)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc159)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc161)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc161)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc18)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc18)
      cir.if %5 {
        %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc23)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc23)
        %8 = cir.binop(and, %6, %7) : !s32i loc(#loc23)
        %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc23)
        %10 = cir.ternary(%9, true {
          %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc23)
          %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc23)
          %14 = cir.const #cir.int<30> : !s32i loc(#loc23)
          %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc23)
          %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc23)
          %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc23)
          %18 = cir.const #cir.int<15> : !s32i loc(#loc23)
          %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc23)
          %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc23)
          %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc23)
          %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc23)
          %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc23)
          cir.yield %23 : !u32i loc(#loc23)
        }, false {
          %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc23)
          %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc23)
          %14 = cir.const #cir.int<30> : !s32i loc(#loc23)
          %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc23)
          %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc23)
          %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc23)
          %18 = cir.const #cir.int<15> : !s32i loc(#loc23)
          %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc23)
          %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc23)
          %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc23)
          %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc23)
          %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc23)
          %24 = cir.unary(minus, %23) : !u32i, !u32i loc(#loc23)
          %25 = cir.const #cir.int<1> : !s32i loc(#loc23)
          %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc23)
          %27 = cir.binop(sub, %24, %26) : !u32i loc(#loc23)
          cir.yield %27 : !u32i loc(#loc23)
        }) : (!cir.bool) -> !u32i loc(#loc23)
        %11 = cir.cast(integral, %10 : !u32i), !s32i loc(#loc23)
        cir.store %11, %0 : !s32i, !cir.ptr<!s32i> loc(#loc163)
      } else {
        %6 = cir.const #cir.int<2> : !s32i loc(#loc25)
        cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc164)
      } loc(#loc162)
    } loc(#loc160)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc166)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc166)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc29)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc29)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc169)
          %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc38)
          %8 = cir.const #cir.int<1> : !s32i loc(#loc37)
          %9 = cir.binop(add, %7, %8) nsw : !s32i loc(#loc38)
          cir.store %9, %6 : !s32i, !cir.ptr<!s32i> loc(#loc169)
          %10 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc39)
          cir.call @printIntLine(%10) : (!s32i) -> () loc(#loc40)
        } loc(#loc168)
      } else {
        cir.scope {
          %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc43)
          %7 = cir.const #cir.int<2147483647> : !s32i loc(#loc44)
          %8 = cir.cmp(lt, %6, %7) : !s32i, !s32i loc(#loc171)
          %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc45)
          cir.if %9 {
            %10 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc173)
            %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc51)
            %12 = cir.const #cir.int<1> : !s32i loc(#loc50)
            %13 = cir.binop(add, %11, %12) nsw : !s32i loc(#loc51)
            cir.store %13, %10 : !s32i, !cir.ptr<!s32i> loc(#loc173)
            %14 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc52)
            cir.call @printIntLine(%14) : (!s32i) -> () loc(#loc53)
          } else {
            %10 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc9)
            %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc9)
            cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc54)
          } loc(#loc172)
        } loc(#loc170)
      } loc(#loc167)
    } loc(#loc165)
    cir.return loc(#loc11)
  } loc(#loc157)
  cir.func no_proto  @CWE190_Integer_Overflow__int_rand_add_12_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc175)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc57)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc176)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc59)
    cir.return loc(#loc56)
  } loc(#loc174)
  cir.func no_proto internal private  @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc178)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc65)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc179)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc181)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc181)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc69)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc69)
      cir.if %5 {
        %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc74)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc74)
        %8 = cir.binop(and, %6, %7) : !s32i loc(#loc74)
        %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc74)
        %10 = cir.ternary(%9, true {
          %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc74)
          %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc74)
          %14 = cir.const #cir.int<30> : !s32i loc(#loc74)
          %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc74)
          %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc74)
          %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc74)
          %18 = cir.const #cir.int<15> : !s32i loc(#loc74)
          %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc74)
          %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc74)
          %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc74)
          %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc74)
          %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc74)
          cir.yield %23 : !u32i loc(#loc74)
        }, false {
          %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc74)
          %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc74)
          %14 = cir.const #cir.int<30> : !s32i loc(#loc74)
          %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc74)
          %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc74)
          %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc74)
          %18 = cir.const #cir.int<15> : !s32i loc(#loc74)
          %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc74)
          %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc74)
          %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc74)
          %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc74)
          %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc74)
          %24 = cir.unary(minus, %23) : !u32i, !u32i loc(#loc74)
          %25 = cir.const #cir.int<1> : !s32i loc(#loc74)
          %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc74)
          %27 = cir.binop(sub, %24, %26) : !u32i loc(#loc74)
          cir.yield %27 : !u32i loc(#loc74)
        }) : (!cir.bool) -> !u32i loc(#loc74)
        %11 = cir.cast(integral, %10 : !u32i), !s32i loc(#loc74)
        cir.store %11, %0 : !s32i, !cir.ptr<!s32i> loc(#loc183)
      } else {
        %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc76)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc76)
        %8 = cir.binop(and, %6, %7) : !s32i loc(#loc76)
        %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc76)
        %10 = cir.ternary(%9, true {
          %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc76)
          %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc76)
          %14 = cir.const #cir.int<30> : !s32i loc(#loc76)
          %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc76)
          %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc76)
          %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc76)
          %18 = cir.const #cir.int<15> : !s32i loc(#loc76)
          %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc76)
          %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc76)
          %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc76)
          %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc76)
          %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc76)
          cir.yield %23 : !u32i loc(#loc76)
        }, false {
          %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc76)
          %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc76)
          %14 = cir.const #cir.int<30> : !s32i loc(#loc76)
          %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc76)
          %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc76)
          %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc76)
          %18 = cir.const #cir.int<15> : !s32i loc(#loc76)
          %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc76)
          %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc76)
          %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc76)
          %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc76)
          %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc76)
          %24 = cir.unary(minus, %23) : !u32i, !u32i loc(#loc76)
          %25 = cir.const #cir.int<1> : !s32i loc(#loc76)
          %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc76)
          %27 = cir.binop(sub, %24, %26) : !u32i loc(#loc76)
          cir.yield %27 : !u32i loc(#loc76)
        }) : (!cir.bool) -> !u32i loc(#loc76)
        %11 = cir.cast(integral, %10 : !u32i), !s32i loc(#loc76)
        cir.store %11, %0 : !s32i, !cir.ptr<!s32i> loc(#loc184)
      } loc(#loc182)
    } loc(#loc180)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc186)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc186)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc80)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc80)
      cir.if %5 {
        cir.scope {
          %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc87)
          %7 = cir.const #cir.int<2147483647> : !s32i loc(#loc88)
          %8 = cir.cmp(lt, %6, %7) : !s32i, !s32i loc(#loc189)
          %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc89)
          cir.if %9 {
            %10 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc191)
            %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc95)
            %12 = cir.const #cir.int<1> : !s32i loc(#loc94)
            %13 = cir.binop(add, %11, %12) nsw : !s32i loc(#loc95)
            cir.store %13, %10 : !s32i, !cir.ptr<!s32i> loc(#loc191)
            %14 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc96)
            cir.call @printIntLine(%14) : (!s32i) -> () loc(#loc97)
          } else {
            %10 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc98)
            %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc98)
            cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc99)
          } loc(#loc190)
        } loc(#loc188)
      } else {
        cir.scope {
          %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc102)
          %7 = cir.const #cir.int<2147483647> : !s32i loc(#loc103)
          %8 = cir.cmp(lt, %6, %7) : !s32i, !s32i loc(#loc193)
          %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc104)
          cir.if %9 {
            %10 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc195)
            %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc110)
            %12 = cir.const #cir.int<1> : !s32i loc(#loc109)
            %13 = cir.binop(add, %11, %12) nsw : !s32i loc(#loc110)
            cir.store %13, %10 : !s32i, !cir.ptr<!s32i> loc(#loc195)
            %14 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc111)
            cir.call @printIntLine(%14) : (!s32i) -> () loc(#loc112)
          } else {
            %10 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc113)
            %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc113)
            cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc114)
          } loc(#loc194)
        } loc(#loc192)
      } loc(#loc187)
    } loc(#loc185)
    cir.return loc(#loc62)
  } loc(#loc177)
  cir.func no_proto internal private  @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc197)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc119)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc198)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc200)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc200)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc123)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc123)
      cir.if %5 {
        %6 = cir.const #cir.int<2> : !s32i loc(#loc128)
        cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc202)
      } else {
        %6 = cir.const #cir.int<2> : !s32i loc(#loc130)
        cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc203)
      } loc(#loc201)
    } loc(#loc199)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc205)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc205)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc134)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc134)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc208)
          %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc143)
          %8 = cir.const #cir.int<1> : !s32i loc(#loc142)
          %9 = cir.binop(add, %7, %8) nsw : !s32i loc(#loc143)
          cir.store %9, %6 : !s32i, !cir.ptr<!s32i> loc(#loc208)
          %10 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc144)
          cir.call @printIntLine(%10) : (!s32i) -> () loc(#loc145)
        } loc(#loc207)
      } else {
        cir.scope {
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc210)
          %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc150)
          %8 = cir.const #cir.int<1> : !s32i loc(#loc149)
          %9 = cir.binop(add, %7, %8) nsw : !s32i loc(#loc150)
          cir.store %9, %6 : !s32i, !cir.ptr<!s32i> loc(#loc210)
          %10 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc151)
          cir.call @printIntLine(%10) : (!s32i) -> () loc(#loc152)
        } loc(#loc209)
      } loc(#loc206)
    } loc(#loc204)
    cir.return loc(#loc116)
  } loc(#loc196)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__int_rand_add_12.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":52:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":52:30)
#loc3 = loc("/usr/include/stdlib.h":573:1)
#loc4 = loc("/usr/include/stdlib.h":573:24)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("CWE190_Integer_Overflow__int_rand_add_12.c":55:23)
#loc10 = loc("CWE190_Integer_Overflow__int_rand_add_12.c":22:1)
#loc11 = loc("CWE190_Integer_Overflow__int_rand_add_12.c":58:1)
#loc12 = loc("CWE190_Integer_Overflow__int_rand_add_12.c":24:5)
#loc13 = loc("CWE190_Integer_Overflow__int_rand_add_12.c":24:9)
#loc14 = loc("CWE190_Integer_Overflow__int_rand_add_12.c":26:12)
#loc15 = loc("CWE190_Integer_Overflow__int_rand_add_12.c":26:5)
#loc16 = loc("CWE190_Integer_Overflow__int_rand_add_12.c":27:5)
#loc17 = loc("CWE190_Integer_Overflow__int_rand_add_12.c":36:5)
#loc18 = loc("CWE190_Integer_Overflow__int_rand_add_12.c":27:8)
#loc19 = loc("CWE190_Integer_Overflow__int_rand_add_12.c":27:33)
#loc20 = loc("CWE190_Integer_Overflow__int_rand_add_12.c":28:5)
#loc21 = loc("CWE190_Integer_Overflow__int_rand_add_12.c":31:5)
#loc22 = loc("CWE190_Integer_Overflow__int_rand_add_12.c":33:5)
#loc23 = loc("CWE190_Integer_Overflow__int_rand_add_12.c":30:16)
#loc24 = loc("CWE190_Integer_Overflow__int_rand_add_12.c":30:9)
#loc25 = loc("CWE190_Integer_Overflow__int_rand_add_12.c":35:16)
#loc26 = loc("CWE190_Integer_Overflow__int_rand_add_12.c":35:9)
#loc27 = loc("CWE190_Integer_Overflow__int_rand_add_12.c":37:5)
#loc28 = loc("CWE190_Integer_Overflow__int_rand_add_12.c":57:5)
#loc29 = loc("CWE190_Integer_Overflow__int_rand_add_12.c":37:8)
#loc30 = loc("CWE190_Integer_Overflow__int_rand_add_12.c":37:33)
#loc31 = loc("CWE190_Integer_Overflow__int_rand_add_12.c":38:5)
#loc32 = loc("CWE190_Integer_Overflow__int_rand_add_12.c":44:5)
#loc33 = loc("CWE190_Integer_Overflow__int_rand_add_12.c":46:5)
#loc34 = loc("CWE190_Integer_Overflow__int_rand_add_12.c":39:9)
#loc35 = loc("CWE190_Integer_Overflow__int_rand_add_12.c":43:9)
#loc36 = loc("CWE190_Integer_Overflow__int_rand_add_12.c":41:13)
#loc37 = loc("CWE190_Integer_Overflow__int_rand_add_12.c":41:33)
#loc38 = loc("CWE190_Integer_Overflow__int_rand_add_12.c":41:26)
#loc39 = loc("CWE190_Integer_Overflow__int_rand_add_12.c":42:26)
#loc40 = loc("CWE190_Integer_Overflow__int_rand_add_12.c":42:13)
#loc41 = loc("CWE190_Integer_Overflow__int_rand_add_12.c":48:9)
#loc42 = loc("CWE190_Integer_Overflow__int_rand_add_12.c":56:9)
#loc43 = loc("CWE190_Integer_Overflow__int_rand_add_12.c":48:13)
#loc44 = loc("CWE190_Integer_Overflow__int_rand_add_12.c":48:20)
#loc45 = loc("CWE190_Integer_Overflow__int_rand_add_12.c":48:18)
#loc46 = loc("CWE190_Integer_Overflow__int_rand_add_12.c":49:9)
#loc47 = loc("CWE190_Integer_Overflow__int_rand_add_12.c":52:9)
#loc48 = loc("CWE190_Integer_Overflow__int_rand_add_12.c":54:9)
#loc49 = loc("CWE190_Integer_Overflow__int_rand_add_12.c":50:13)
#loc50 = loc("CWE190_Integer_Overflow__int_rand_add_12.c":50:33)
#loc51 = loc("CWE190_Integer_Overflow__int_rand_add_12.c":50:26)
#loc52 = loc("CWE190_Integer_Overflow__int_rand_add_12.c":51:26)
#loc53 = loc("CWE190_Integer_Overflow__int_rand_add_12.c":51:13)
#loc54 = loc("CWE190_Integer_Overflow__int_rand_add_12.c":55:13)
#loc55 = loc("CWE190_Integer_Overflow__int_rand_add_12.c":146:1)
#loc56 = loc("CWE190_Integer_Overflow__int_rand_add_12.c":150:1)
#loc57 = loc("CWE190_Integer_Overflow__int_rand_add_12.c":148:5)
#loc58 = loc("CWE190_Integer_Overflow__int_rand_add_12.c":148:13)
#loc59 = loc("CWE190_Integer_Overflow__int_rand_add_12.c":149:5)
#loc60 = loc("CWE190_Integer_Overflow__int_rand_add_12.c":149:13)
#loc61 = loc("CWE190_Integer_Overflow__int_rand_add_12.c":67:1)
#loc62 = loc("CWE190_Integer_Overflow__int_rand_add_12.c":108:1)
#loc63 = loc("CWE190_Integer_Overflow__int_rand_add_12.c":69:5)
#loc64 = loc("CWE190_Integer_Overflow__int_rand_add_12.c":69:9)
#loc65 = loc("CWE190_Integer_Overflow__int_rand_add_12.c":71:12)
#loc66 = loc("CWE190_Integer_Overflow__int_rand_add_12.c":71:5)
#loc67 = loc("CWE190_Integer_Overflow__int_rand_add_12.c":72:5)
#loc68 = loc("CWE190_Integer_Overflow__int_rand_add_12.c":81:5)
#loc69 = loc("CWE190_Integer_Overflow__int_rand_add_12.c":72:8)
#loc70 = loc("CWE190_Integer_Overflow__int_rand_add_12.c":72:33)
#loc71 = loc("CWE190_Integer_Overflow__int_rand_add_12.c":73:5)
#loc72 = loc("CWE190_Integer_Overflow__int_rand_add_12.c":76:5)
#loc73 = loc("CWE190_Integer_Overflow__int_rand_add_12.c":78:5)
#loc74 = loc("CWE190_Integer_Overflow__int_rand_add_12.c":75:16)
#loc75 = loc("CWE190_Integer_Overflow__int_rand_add_12.c":75:9)
#loc76 = loc("CWE190_Integer_Overflow__int_rand_add_12.c":80:16)
#loc77 = loc("CWE190_Integer_Overflow__int_rand_add_12.c":80:9)
#loc78 = loc("CWE190_Integer_Overflow__int_rand_add_12.c":82:5)
#loc79 = loc("CWE190_Integer_Overflow__int_rand_add_12.c":107:5)
#loc80 = loc("CWE190_Integer_Overflow__int_rand_add_12.c":82:8)
#loc81 = loc("CWE190_Integer_Overflow__int_rand_add_12.c":82:33)
#loc82 = loc("CWE190_Integer_Overflow__int_rand_add_12.c":83:5)
#loc83 = loc("CWE190_Integer_Overflow__int_rand_add_12.c":94:5)
#loc84 = loc("CWE190_Integer_Overflow__int_rand_add_12.c":96:5)
#loc85 = loc("CWE190_Integer_Overflow__int_rand_add_12.c":85:9)
#loc86 = loc("CWE190_Integer_Overflow__int_rand_add_12.c":93:9)
#loc87 = loc("CWE190_Integer_Overflow__int_rand_add_12.c":85:13)
#loc88 = loc("CWE190_Integer_Overflow__int_rand_add_12.c":85:20)
#loc89 = loc("CWE190_Integer_Overflow__int_rand_add_12.c":85:18)
#loc90 = loc("CWE190_Integer_Overflow__int_rand_add_12.c":86:9)
#loc91 = loc("CWE190_Integer_Overflow__int_rand_add_12.c":89:9)
#loc92 = loc("CWE190_Integer_Overflow__int_rand_add_12.c":91:9)
#loc93 = loc("CWE190_Integer_Overflow__int_rand_add_12.c":87:13)
#loc94 = loc("CWE190_Integer_Overflow__int_rand_add_12.c":87:33)
#loc95 = loc("CWE190_Integer_Overflow__int_rand_add_12.c":87:26)
#loc96 = loc("CWE190_Integer_Overflow__int_rand_add_12.c":88:26)
#loc97 = loc("CWE190_Integer_Overflow__int_rand_add_12.c":88:13)
#loc98 = loc("CWE190_Integer_Overflow__int_rand_add_12.c":92:23)
#loc99 = loc("CWE190_Integer_Overflow__int_rand_add_12.c":92:13)
#loc100 = loc("CWE190_Integer_Overflow__int_rand_add_12.c":98:9)
#loc101 = loc("CWE190_Integer_Overflow__int_rand_add_12.c":106:9)
#loc102 = loc("CWE190_Integer_Overflow__int_rand_add_12.c":98:13)
#loc103 = loc("CWE190_Integer_Overflow__int_rand_add_12.c":98:20)
#loc104 = loc("CWE190_Integer_Overflow__int_rand_add_12.c":98:18)
#loc105 = loc("CWE190_Integer_Overflow__int_rand_add_12.c":99:9)
#loc106 = loc("CWE190_Integer_Overflow__int_rand_add_12.c":102:9)
#loc107 = loc("CWE190_Integer_Overflow__int_rand_add_12.c":104:9)
#loc108 = loc("CWE190_Integer_Overflow__int_rand_add_12.c":100:13)
#loc109 = loc("CWE190_Integer_Overflow__int_rand_add_12.c":100:33)
#loc110 = loc("CWE190_Integer_Overflow__int_rand_add_12.c":100:26)
#loc111 = loc("CWE190_Integer_Overflow__int_rand_add_12.c":101:26)
#loc112 = loc("CWE190_Integer_Overflow__int_rand_add_12.c":101:13)
#loc113 = loc("CWE190_Integer_Overflow__int_rand_add_12.c":105:23)
#loc114 = loc("CWE190_Integer_Overflow__int_rand_add_12.c":105:13)
#loc115 = loc("CWE190_Integer_Overflow__int_rand_add_12.c":113:1)
#loc116 = loc("CWE190_Integer_Overflow__int_rand_add_12.c":144:1)
#loc117 = loc("CWE190_Integer_Overflow__int_rand_add_12.c":115:5)
#loc118 = loc("CWE190_Integer_Overflow__int_rand_add_12.c":115:9)
#loc119 = loc("CWE190_Integer_Overflow__int_rand_add_12.c":117:12)
#loc120 = loc("CWE190_Integer_Overflow__int_rand_add_12.c":117:5)
#loc121 = loc("CWE190_Integer_Overflow__int_rand_add_12.c":118:5)
#loc122 = loc("CWE190_Integer_Overflow__int_rand_add_12.c":127:5)
#loc123 = loc("CWE190_Integer_Overflow__int_rand_add_12.c":118:8)
#loc124 = loc("CWE190_Integer_Overflow__int_rand_add_12.c":118:33)
#loc125 = loc("CWE190_Integer_Overflow__int_rand_add_12.c":119:5)
#loc126 = loc("CWE190_Integer_Overflow__int_rand_add_12.c":122:5)
#loc127 = loc("CWE190_Integer_Overflow__int_rand_add_12.c":124:5)
#loc128 = loc("CWE190_Integer_Overflow__int_rand_add_12.c":121:16)
#loc129 = loc("CWE190_Integer_Overflow__int_rand_add_12.c":121:9)
#loc130 = loc("CWE190_Integer_Overflow__int_rand_add_12.c":126:16)
#loc131 = loc("CWE190_Integer_Overflow__int_rand_add_12.c":126:9)
#loc132 = loc("CWE190_Integer_Overflow__int_rand_add_12.c":128:5)
#loc133 = loc("CWE190_Integer_Overflow__int_rand_add_12.c":143:5)
#loc134 = loc("CWE190_Integer_Overflow__int_rand_add_12.c":128:8)
#loc135 = loc("CWE190_Integer_Overflow__int_rand_add_12.c":128:33)
#loc136 = loc("CWE190_Integer_Overflow__int_rand_add_12.c":129:5)
#loc137 = loc("CWE190_Integer_Overflow__int_rand_add_12.c":135:5)
#loc138 = loc("CWE190_Integer_Overflow__int_rand_add_12.c":137:5)
#loc139 = loc("CWE190_Integer_Overflow__int_rand_add_12.c":130:9)
#loc140 = loc("CWE190_Integer_Overflow__int_rand_add_12.c":134:9)
#loc141 = loc("CWE190_Integer_Overflow__int_rand_add_12.c":132:13)
#loc142 = loc("CWE190_Integer_Overflow__int_rand_add_12.c":132:33)
#loc143 = loc("CWE190_Integer_Overflow__int_rand_add_12.c":132:26)
#loc144 = loc("CWE190_Integer_Overflow__int_rand_add_12.c":133:26)
#loc145 = loc("CWE190_Integer_Overflow__int_rand_add_12.c":133:13)
#loc146 = loc("CWE190_Integer_Overflow__int_rand_add_12.c":138:9)
#loc147 = loc("CWE190_Integer_Overflow__int_rand_add_12.c":142:9)
#loc148 = loc("CWE190_Integer_Overflow__int_rand_add_12.c":140:13)
#loc149 = loc("CWE190_Integer_Overflow__int_rand_add_12.c":140:33)
#loc150 = loc("CWE190_Integer_Overflow__int_rand_add_12.c":140:26)
#loc151 = loc("CWE190_Integer_Overflow__int_rand_add_12.c":141:26)
#loc152 = loc("CWE190_Integer_Overflow__int_rand_add_12.c":141:13)
#loc153 = loc(fused[#loc1, #loc2])
#loc154 = loc(fused[#loc3, #loc4])
#loc155 = loc(fused[#loc5, #loc6])
#loc156 = loc(fused[#loc7, #loc8])
#loc157 = loc(fused[#loc10, #loc11])
#loc158 = loc(fused[#loc12, #loc13])
#loc159 = loc(fused[#loc15, #loc14])
#loc160 = loc(fused[#loc16, #loc17])
#loc161 = loc(fused[#loc18, #loc19])
#loc162 = loc(fused[#loc20, #loc21, #loc22, #loc17])
#loc163 = loc(fused[#loc24, #loc23])
#loc164 = loc(fused[#loc26, #loc25])
#loc165 = loc(fused[#loc27, #loc28])
#loc166 = loc(fused[#loc29, #loc30])
#loc167 = loc(fused[#loc31, #loc32, #loc33, #loc28])
#loc168 = loc(fused[#loc34, #loc35])
#loc169 = loc(fused[#loc36, #loc37])
#loc170 = loc(fused[#loc41, #loc42])
#loc171 = loc(fused[#loc43, #loc44])
#loc172 = loc(fused[#loc46, #loc47, #loc48, #loc42])
#loc173 = loc(fused[#loc49, #loc50])
#loc174 = loc(fused[#loc55, #loc56])
#loc175 = loc(fused[#loc57, #loc58])
#loc176 = loc(fused[#loc59, #loc60])
#loc177 = loc(fused[#loc61, #loc62])
#loc178 = loc(fused[#loc63, #loc64])
#loc179 = loc(fused[#loc66, #loc65])
#loc180 = loc(fused[#loc67, #loc68])
#loc181 = loc(fused[#loc69, #loc70])
#loc182 = loc(fused[#loc71, #loc72, #loc73, #loc68])
#loc183 = loc(fused[#loc75, #loc74])
#loc184 = loc(fused[#loc77, #loc76])
#loc185 = loc(fused[#loc78, #loc79])
#loc186 = loc(fused[#loc80, #loc81])
#loc187 = loc(fused[#loc82, #loc83, #loc84, #loc79])
#loc188 = loc(fused[#loc85, #loc86])
#loc189 = loc(fused[#loc87, #loc88])
#loc190 = loc(fused[#loc90, #loc91, #loc92, #loc86])
#loc191 = loc(fused[#loc93, #loc94])
#loc192 = loc(fused[#loc100, #loc101])
#loc193 = loc(fused[#loc102, #loc103])
#loc194 = loc(fused[#loc105, #loc106, #loc107, #loc101])
#loc195 = loc(fused[#loc108, #loc109])
#loc196 = loc(fused[#loc115, #loc116])
#loc197 = loc(fused[#loc117, #loc118])
#loc198 = loc(fused[#loc120, #loc119])
#loc199 = loc(fused[#loc121, #loc122])
#loc200 = loc(fused[#loc123, #loc124])
#loc201 = loc(fused[#loc125, #loc126, #loc127, #loc122])
#loc202 = loc(fused[#loc129, #loc128])
#loc203 = loc(fused[#loc131, #loc130])
#loc204 = loc(fused[#loc132, #loc133])
#loc205 = loc(fused[#loc134, #loc135])
#loc206 = loc(fused[#loc136, #loc137, #loc138, #loc133])
#loc207 = loc(fused[#loc139, #loc140])
#loc208 = loc(fused[#loc141, #loc142])
#loc209 = loc(fused[#loc146, #loc147])
#loc210 = loc(fused[#loc148, #loc149])
