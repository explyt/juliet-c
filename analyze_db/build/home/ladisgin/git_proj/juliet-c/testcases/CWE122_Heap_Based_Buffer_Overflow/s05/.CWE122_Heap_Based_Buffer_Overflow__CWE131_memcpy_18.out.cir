!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_18.c":77:10)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_18.c":77:14)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_18.c":77:20)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_18.c":77:32)
#loc145 = loc(fused[#loc63, #loc64])
#loc146 = loc(fused[#loc65, #loc66])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_18.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr = dense<64> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc121)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc122)
  cir.func private @printIntLine(!s32i) loc(#loc123)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc124)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_18_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc126)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc13)
    cir.store %1, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc127)
    cir.goto "source" loc(#loc128)
  ^bb1:  // no predecessors
    cir.label "source" loc(#loc17)
    %2 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc18)
    %3 = cir.const #cir.int<10> : !s32i loc(#loc19)
    %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc19)
    %5 = cir.call @malloc(%4) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc18)
    %6 = cir.cast(bitcast, %5 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc129)
    cir.store %6, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc130)
    cir.scope {
      %7 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc24)
      %8 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc25)
      %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc25)
      %10 = cir.cmp(eq, %7, %9) : !cir.ptr<!s32i>, !cir.bool loc(#loc132)
      cir.if %10 {
        %11 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc27)
        %12 = cir.const #cir.int<1> : !s32i loc(#loc28)
        %13 = cir.unary(minus, %12) : !s32i, !s32i loc(#loc29)
        cir.call @exit(%13) : (!s32i) -> () extra(#fn_attr) loc(#loc27)
      } loc(#loc133)
    } loc(#loc131)
    cir.scope {
      %7 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc135)
      %8 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc135)
      cir.store %8, %7 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc135)
      %9 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc34)
      %10 = cir.cast(bitcast, %9 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc34)
      %11 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc35)
      %12 = cir.cast(bitcast, %11 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc35)
      %13 = cir.const #cir.int<10> : !s32i loc(#loc36)
      %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc36)
      %15 = cir.const #cir.int<4> : !u64i loc(#loc136)
      %16 = cir.binop(mul, %14, %15) : !u64i loc(#loc137)
      cir.libc.memcpy %16 bytes from %12 to %10 : !u64i, !cir.ptr<!void> -> !cir.ptr<!void> loc(#loc138)
      %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc41)
      %18 = cir.const #cir.int<0> : !s32i loc(#loc42)
      %19 = cir.ptr_stride(%17 : !cir.ptr<!s32i>, %18 : !s32i), !cir.ptr<!s32i> loc(#loc43)
      %20 = cir.load %19 : !cir.ptr<!s32i>, !s32i loc(#loc41)
      cir.call @printIntLine(%20) : (!s32i) -> () loc(#loc44)
      %21 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc45)
      %22 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc46)
      %23 = cir.cast(bitcast, %22 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc46)
      cir.call @free(%23) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc45)
    } loc(#loc134)
    cir.return loc(#loc10)
  } loc(#loc125)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_18_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc140)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc49)
    cir.return loc(#loc48)
  } loc(#loc139)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc141)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc142)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc143)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc57)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc58)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc59)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc60)
  cir.func @main(%arg0: !s32i loc(fused[#loc63, #loc64]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc65, #loc66])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc145)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc146)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc62)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc67)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc67)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc68)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc69)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc69)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc70)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc57)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc57)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc71)
    %8 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_18_good : !cir.ptr<!cir.func<!void ()>> loc(#loc147)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_18_good() : () -> () loc(#loc72)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc58)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc58)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc74)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc59)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc59)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc75)
    %13 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_18_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc148)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_18_bad() : () -> () loc(#loc76)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc60)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc60)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc78)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc79)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc149)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc149)
    cir.return %17 : !s32i loc(#loc149)
  } loc(#loc144)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc151)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc85)
    cir.store %1, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc152)
    cir.goto "source" loc(#loc153)
  ^bb1:  // no predecessors
    cir.label "source" loc(#loc89)
    %2 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc90)
    %3 = cir.const #cir.int<10> : !s32i loc(#loc91)
    %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc91)
    %5 = cir.const #cir.int<4> : !u64i loc(#loc154)
    %6 = cir.binop(mul, %4, %5) : !u64i loc(#loc155)
    %7 = cir.call @malloc(%6) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc90)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc156)
    cir.store %8, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc157)
    cir.scope {
      %9 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc98)
      %10 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc99)
      %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc99)
      %12 = cir.cmp(eq, %9, %11) : !cir.ptr<!s32i>, !cir.bool loc(#loc159)
      cir.if %12 {
        %13 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc101)
        %14 = cir.const #cir.int<1> : !s32i loc(#loc102)
        %15 = cir.unary(minus, %14) : !s32i, !s32i loc(#loc103)
        cir.call @exit(%15) : (!s32i) -> () extra(#fn_attr) loc(#loc101)
      } loc(#loc160)
    } loc(#loc158)
    cir.scope {
      %9 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc162)
      %10 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc162)
      cir.store %10, %9 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc162)
      %11 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc108)
      %12 = cir.cast(bitcast, %11 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc108)
      %13 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc109)
      %14 = cir.cast(bitcast, %13 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc109)
      %15 = cir.const #cir.int<10> : !s32i loc(#loc110)
      %16 = cir.cast(integral, %15 : !s32i), !u64i loc(#loc110)
      %17 = cir.const #cir.int<4> : !u64i loc(#loc163)
      %18 = cir.binop(mul, %16, %17) : !u64i loc(#loc164)
      cir.libc.memcpy %18 bytes from %14 to %12 : !u64i, !cir.ptr<!void> -> !cir.ptr<!void> loc(#loc165)
      %19 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc115)
      %20 = cir.const #cir.int<0> : !s32i loc(#loc116)
      %21 = cir.ptr_stride(%19 : !cir.ptr<!s32i>, %20 : !s32i), !cir.ptr<!s32i> loc(#loc117)
      %22 = cir.load %21 : !cir.ptr<!s32i>, !s32i loc(#loc115)
      cir.call @printIntLine(%22) : (!s32i) -> () loc(#loc118)
      %23 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc119)
      %24 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc120)
      %25 = cir.cast(bitcast, %24 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc120)
      cir.call @free(%25) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc119)
    } loc(#loc161)
    cir.return loc(#loc82)
  } loc(#loc150)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_18.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc7 = loc("/usr/include/stdlib.h":687:1)
#loc8 = loc("/usr/include/stdlib.h":687:32)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_18.c":21:1)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_18.c":37:1)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_18.c":23:5)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_18.c":23:11)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_18.c":24:12)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_18.c":24:5)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_18.c":25:5)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_18.c":25:10)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_18.c":26:1)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_18.c":28:19)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_18.c":28:26)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_18.c":28:28)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_18.c":28:5)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_18.c":29:5)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_18.c":29:33)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_18.c":29:9)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_18.c":29:17)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_18.c":29:23)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_18.c":29:24)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_18.c":29:30)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_18.c":29:29)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_18.c":30:5)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_18.c":36:5)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_18.c":31:9)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_18.c":31:28)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_18.c":33:16)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_18.c":33:22)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_18.c":33:30)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_18.c":33:33)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_18.c":33:43)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_18.c":33:9)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_18.c":33:44)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_18.c":34:22)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_18.c":34:27)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_18.c":34:28)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_18.c":34:9)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_18.c":35:9)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_18.c":35:14)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_18.c":62:1)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_18.c":65:1)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_18.c":64:5)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_18.c":64:13)
#loc51 = loc("/usr/include/stdlib.h":575:1)
#loc52 = loc("/usr/include/stdlib.h":575:41)
#loc53 = loc("/usr/include/time.h":76:1)
#loc54 = loc("/usr/include/time.h":76:38)
#loc55 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc56 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_18.c":82:15)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_18.c":84:15)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_18.c":87:15)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_18.c":89:15)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_18.c":77:1)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_18.c":92:1)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_18.c":78:1)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_18.c":80:27)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_18.c":80:22)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_18.c":80:5)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_18.c":82:5)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_18.c":83:5)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_18.c":83:62)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_18.c":84:5)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_18.c":87:5)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_18.c":88:5)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_18.c":88:61)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_18.c":89:5)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_18.c":91:12)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_18.c":91:5)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_18.c":44:1)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_18.c":60:1)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_18.c":46:5)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_18.c":46:11)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_18.c":47:12)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_18.c":47:5)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_18.c":48:5)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_18.c":48:10)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_18.c":49:1)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_18.c":51:19)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_18.c":51:26)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_18.c":51:29)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_18.c":51:39)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_18.c":51:40)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_18.c":51:5)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_18.c":52:5)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_18.c":52:33)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_18.c":52:9)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_18.c":52:17)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_18.c":52:23)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_18.c":52:24)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_18.c":52:30)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_18.c":52:29)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_18.c":53:5)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_18.c":59:5)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_18.c":54:9)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_18.c":54:28)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_18.c":56:16)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_18.c":56:22)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_18.c":56:30)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_18.c":56:33)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_18.c":56:43)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_18.c":56:9)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_18.c":56:44)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_18.c":57:22)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_18.c":57:27)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_18.c":57:28)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_18.c":57:9)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_18.c":58:9)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_18.c":58:14)
#loc121 = loc(fused[#loc1, #loc2])
#loc122 = loc(fused[#loc3, #loc4])
#loc123 = loc(fused[#loc5, #loc6])
#loc124 = loc(fused[#loc7, #loc8])
#loc125 = loc(fused[#loc9, #loc10])
#loc126 = loc(fused[#loc11, #loc12])
#loc127 = loc(fused[#loc14, #loc13])
#loc128 = loc(fused[#loc15, #loc16])
#loc129 = loc(fused[#loc18, #loc20])
#loc130 = loc(fused[#loc21, #loc20])
#loc131 = loc(fused[#loc22, #loc23])
#loc132 = loc(fused[#loc24, #loc25])
#loc133 = loc(fused[#loc26, #loc23])
#loc134 = loc(fused[#loc30, #loc31])
#loc135 = loc(fused[#loc32, #loc33])
#loc136 = loc(fused[#loc37, #loc38])
#loc137 = loc(fused[#loc36, #loc38])
#loc138 = loc(fused[#loc39, #loc40])
#loc139 = loc(fused[#loc47, #loc48])
#loc140 = loc(fused[#loc49, #loc50])
#loc141 = loc(fused[#loc51, #loc52])
#loc142 = loc(fused[#loc53, #loc54])
#loc143 = loc(fused[#loc55, #loc56])
#loc144 = loc(fused[#loc61, #loc62])
#loc147 = loc(fused[#loc72, #loc73])
#loc148 = loc(fused[#loc76, #loc77])
#loc149 = loc(fused[#loc80, #loc79])
#loc150 = loc(fused[#loc81, #loc82])
#loc151 = loc(fused[#loc83, #loc84])
#loc152 = loc(fused[#loc86, #loc85])
#loc153 = loc(fused[#loc87, #loc88])
#loc154 = loc(fused[#loc92, #loc93])
#loc155 = loc(fused[#loc91, #loc93])
#loc156 = loc(fused[#loc90, #loc94])
#loc157 = loc(fused[#loc95, #loc94])
#loc158 = loc(fused[#loc96, #loc97])
#loc159 = loc(fused[#loc98, #loc99])
#loc160 = loc(fused[#loc100, #loc97])
#loc161 = loc(fused[#loc104, #loc105])
#loc162 = loc(fused[#loc106, #loc107])
#loc163 = loc(fused[#loc111, #loc112])
#loc164 = loc(fused[#loc110, #loc112])
#loc165 = loc(fused[#loc113, #loc114])
