!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE457_Use_of_Uninitialized_Variable/s01/CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc277)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc3)
  cir.func private  @printDoubleLine(!cir.double) loc(#loc278)
  cir.func no_proto  @CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15_bad() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!cir.double>, !cir.ptr<!cir.ptr<!cir.double>>, ["data"] {alignment = 8 : i64} loc(#loc280)
    %1 = cir.const #cir.int<10> : !s32i loc(#loc10)
    %2 = cir.cast(integral, %1 : !s32i), !u64i loc(#loc10)
    %3 = cir.const #cir.int<8> : !u64i loc(#loc10)
    %4 = cir.binop(mul, %2, %3) : !u64i loc(#loc10)
    %5 = cir.alloca !u8i, !cir.ptr<!u8i>, %4 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc10)
    %6 = cir.cast(bitcast, %5 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc10)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!void>), !cir.ptr<!cir.double> loc(#loc10)
    cir.store %7, %0 : !cir.ptr<!cir.double>, !cir.ptr<!cir.ptr<!cir.double>> loc(#loc281)
    cir.scope {
      %8 = cir.const #cir.int<6> : !s32i loc(#loc14)
      cir.switch (%8 : !s32i) [
      case (equal, 6) {
        cir.break loc(#loc15)
      },
      case (default) {
        %9 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc3)
        %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc3)
        cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc16)
        cir.break loc(#loc17)
      }
      ] loc(#loc12)
    } loc(#loc282)
    cir.scope {
      %8 = cir.const #cir.int<7> : !s32i loc(#loc20)
      cir.switch (%8 : !s32i) [
      case (equal, 7) {
        cir.scope {
          %9 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc285)
          cir.scope {
            %10 = cir.const #cir.int<0> : !s32i loc(#loc27)
            cir.store %10, %9 : !s32i, !cir.ptr<!s32i> loc(#loc287)
            cir.for : cond {
              %11 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc29)
              %12 = cir.const #cir.int<10> : !s32i loc(#loc30)
              %13 = cir.cmp(lt, %11, %12) : !s32i, !s32i loc(#loc288)
              %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc31)
              cir.condition(%14) loc(#loc31)
            } body {
              cir.scope {
                %11 = cir.load %0 : !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.double> loc(#loc33)
                %12 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc34)
                %13 = cir.ptr_stride(%11 : !cir.ptr<!cir.double>, %12 : !s32i), !cir.ptr<!cir.double> loc(#loc35)
                %14 = cir.load %13 : !cir.ptr<!cir.double>, !cir.double loc(#loc33)
                cir.call @printDoubleLine(%14) : (!cir.double) -> () loc(#loc36)
              } loc(#loc289)
              cir.yield loc(#loc26)
            } step {
              %11 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc37)
              %12 = cir.unary(inc, %11) : !s32i, !s32i loc(#loc38)
              cir.store %12, %9 : !s32i, !cir.ptr<!s32i> loc(#loc290)
              cir.yield loc(#loc286)
            } loc(#loc286)
          } loc(#loc286)
        } loc(#loc284)
        cir.break loc(#loc39)
      },
      case (default) {
        %9 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc40)
        %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc40)
        cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc41)
        cir.break loc(#loc42)
      }
      ] loc(#loc18)
    } loc(#loc283)
    cir.return loc(#loc7)
  } loc(#loc279)
  cir.func no_proto  @CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc292)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc45)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc293)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc47)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc294)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc49)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc295)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc51)
    cir.return loc(#loc44)
  } loc(#loc291)
  cir.func no_proto internal private  @goodB2G1() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!cir.double>, !cir.ptr<!cir.ptr<!cir.double>>, ["data"] {alignment = 8 : i64} loc(#loc297)
    %1 = cir.const #cir.int<10> : !s32i loc(#loc57)
    %2 = cir.cast(integral, %1 : !s32i), !u64i loc(#loc57)
    %3 = cir.const #cir.int<8> : !u64i loc(#loc57)
    %4 = cir.binop(mul, %2, %3) : !u64i loc(#loc57)
    %5 = cir.alloca !u8i, !cir.ptr<!u8i>, %4 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc57)
    %6 = cir.cast(bitcast, %5 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc57)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!void>), !cir.ptr<!cir.double> loc(#loc57)
    cir.store %7, %0 : !cir.ptr<!cir.double>, !cir.ptr<!cir.ptr<!cir.double>> loc(#loc298)
    cir.scope {
      %8 = cir.const #cir.int<6> : !s32i loc(#loc61)
      cir.switch (%8 : !s32i) [
      case (equal, 6) {
        cir.break loc(#loc62)
      },
      case (default) {
        %9 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc63)
        %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc63)
        cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc64)
        cir.break loc(#loc65)
      }
      ] loc(#loc59)
    } loc(#loc299)
    cir.scope {
      %8 = cir.const #cir.int<8> : !s32i loc(#loc68)
      cir.switch (%8 : !s32i) [
      case (equal, 7) {
        %9 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc69)
        %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc69)
        cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc70)
        cir.break loc(#loc71)
      },
      case (default) {
        cir.scope {
          %9 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc302)
          cir.scope {
            %10 = cir.const #cir.int<0> : !s32i loc(#loc78)
            cir.store %10, %9 : !s32i, !cir.ptr<!s32i> loc(#loc304)
            cir.for : cond {
              %11 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc80)
              %12 = cir.const #cir.int<10> : !s32i loc(#loc81)
              %13 = cir.cmp(lt, %11, %12) : !s32i, !s32i loc(#loc305)
              %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc82)
              cir.condition(%14) loc(#loc82)
            } body {
              cir.scope {
                %11 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc84)
                %12 = cir.cast(int_to_float, %11 : !s32i), !cir.double loc(#loc84)
                %13 = cir.load %0 : !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.double> loc(#loc85)
                %14 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc86)
                %15 = cir.ptr_stride(%13 : !cir.ptr<!cir.double>, %14 : !s32i), !cir.ptr<!cir.double> loc(#loc87)
                cir.store %12, %15 : !cir.double, !cir.ptr<!cir.double> loc(#loc307)
              } loc(#loc306)
              cir.yield loc(#loc77)
            } step {
              %11 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc88)
              %12 = cir.unary(inc, %11) : !s32i, !s32i loc(#loc89)
              cir.store %12, %9 : !s32i, !cir.ptr<!s32i> loc(#loc308)
              cir.yield loc(#loc303)
            } loc(#loc303)
          } loc(#loc303)
        } loc(#loc301)
        cir.scope {
          %9 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc310)
          cir.scope {
            %10 = cir.const #cir.int<0> : !s32i loc(#loc96)
            cir.store %10, %9 : !s32i, !cir.ptr<!s32i> loc(#loc312)
            cir.for : cond {
              %11 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc98)
              %12 = cir.const #cir.int<10> : !s32i loc(#loc99)
              %13 = cir.cmp(lt, %11, %12) : !s32i, !s32i loc(#loc313)
              %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc100)
              cir.condition(%14) loc(#loc100)
            } body {
              cir.scope {
                %11 = cir.load %0 : !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.double> loc(#loc102)
                %12 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc103)
                %13 = cir.ptr_stride(%11 : !cir.ptr<!cir.double>, %12 : !s32i), !cir.ptr<!cir.double> loc(#loc104)
                %14 = cir.load %13 : !cir.ptr<!cir.double>, !cir.double loc(#loc102)
                cir.call @printDoubleLine(%14) : (!cir.double) -> () loc(#loc105)
              } loc(#loc314)
              cir.yield loc(#loc95)
            } step {
              %11 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc106)
              %12 = cir.unary(inc, %11) : !s32i, !s32i loc(#loc107)
              cir.store %12, %9 : !s32i, !cir.ptr<!s32i> loc(#loc315)
              cir.yield loc(#loc311)
            } loc(#loc311)
          } loc(#loc311)
        } loc(#loc309)
        cir.break loc(#loc108)
      }
      ] loc(#loc66)
    } loc(#loc300)
    cir.return loc(#loc54)
  } loc(#loc296)
  cir.func no_proto internal private  @goodB2G2() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!cir.double>, !cir.ptr<!cir.ptr<!cir.double>>, ["data"] {alignment = 8 : i64} loc(#loc317)
    %1 = cir.const #cir.int<10> : !s32i loc(#loc113)
    %2 = cir.cast(integral, %1 : !s32i), !u64i loc(#loc113)
    %3 = cir.const #cir.int<8> : !u64i loc(#loc113)
    %4 = cir.binop(mul, %2, %3) : !u64i loc(#loc113)
    %5 = cir.alloca !u8i, !cir.ptr<!u8i>, %4 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc113)
    %6 = cir.cast(bitcast, %5 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc113)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!void>), !cir.ptr<!cir.double> loc(#loc113)
    cir.store %7, %0 : !cir.ptr<!cir.double>, !cir.ptr<!cir.ptr<!cir.double>> loc(#loc318)
    cir.scope {
      %8 = cir.const #cir.int<6> : !s32i loc(#loc117)
      cir.switch (%8 : !s32i) [
      case (equal, 6) {
        cir.break loc(#loc118)
      },
      case (default) {
        %9 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc119)
        %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc119)
        cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc120)
        cir.break loc(#loc121)
      }
      ] loc(#loc115)
    } loc(#loc319)
    cir.scope {
      %8 = cir.const #cir.int<7> : !s32i loc(#loc124)
      cir.switch (%8 : !s32i) [
      case (equal, 7) {
        cir.scope {
          %9 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc322)
          cir.scope {
            %10 = cir.const #cir.int<0> : !s32i loc(#loc131)
            cir.store %10, %9 : !s32i, !cir.ptr<!s32i> loc(#loc324)
            cir.for : cond {
              %11 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc133)
              %12 = cir.const #cir.int<10> : !s32i loc(#loc134)
              %13 = cir.cmp(lt, %11, %12) : !s32i, !s32i loc(#loc325)
              %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc135)
              cir.condition(%14) loc(#loc135)
            } body {
              cir.scope {
                %11 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc137)
                %12 = cir.cast(int_to_float, %11 : !s32i), !cir.double loc(#loc137)
                %13 = cir.load %0 : !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.double> loc(#loc138)
                %14 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc139)
                %15 = cir.ptr_stride(%13 : !cir.ptr<!cir.double>, %14 : !s32i), !cir.ptr<!cir.double> loc(#loc140)
                cir.store %12, %15 : !cir.double, !cir.ptr<!cir.double> loc(#loc327)
              } loc(#loc326)
              cir.yield loc(#loc130)
            } step {
              %11 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc141)
              %12 = cir.unary(inc, %11) : !s32i, !s32i loc(#loc142)
              cir.store %12, %9 : !s32i, !cir.ptr<!s32i> loc(#loc328)
              cir.yield loc(#loc323)
            } loc(#loc323)
          } loc(#loc323)
        } loc(#loc321)
        cir.scope {
          %9 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc330)
          cir.scope {
            %10 = cir.const #cir.int<0> : !s32i loc(#loc149)
            cir.store %10, %9 : !s32i, !cir.ptr<!s32i> loc(#loc332)
            cir.for : cond {
              %11 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc151)
              %12 = cir.const #cir.int<10> : !s32i loc(#loc152)
              %13 = cir.cmp(lt, %11, %12) : !s32i, !s32i loc(#loc333)
              %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc153)
              cir.condition(%14) loc(#loc153)
            } body {
              cir.scope {
                %11 = cir.load %0 : !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.double> loc(#loc155)
                %12 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc156)
                %13 = cir.ptr_stride(%11 : !cir.ptr<!cir.double>, %12 : !s32i), !cir.ptr<!cir.double> loc(#loc157)
                %14 = cir.load %13 : !cir.ptr<!cir.double>, !cir.double loc(#loc155)
                cir.call @printDoubleLine(%14) : (!cir.double) -> () loc(#loc158)
              } loc(#loc334)
              cir.yield loc(#loc148)
            } step {
              %11 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc159)
              %12 = cir.unary(inc, %11) : !s32i, !s32i loc(#loc160)
              cir.store %12, %9 : !s32i, !cir.ptr<!s32i> loc(#loc335)
              cir.yield loc(#loc331)
            } loc(#loc331)
          } loc(#loc331)
        } loc(#loc329)
        cir.break loc(#loc161)
      },
      case (default) {
        %9 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc162)
        %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc162)
        cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc163)
        cir.break loc(#loc164)
      }
      ] loc(#loc122)
    } loc(#loc320)
    cir.return loc(#loc110)
  } loc(#loc316)
  cir.func no_proto internal private  @goodG2B1() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!cir.double>, !cir.ptr<!cir.ptr<!cir.double>>, ["data"] {alignment = 8 : i64} loc(#loc337)
    %1 = cir.const #cir.int<10> : !s32i loc(#loc169)
    %2 = cir.cast(integral, %1 : !s32i), !u64i loc(#loc169)
    %3 = cir.const #cir.int<8> : !u64i loc(#loc169)
    %4 = cir.binop(mul, %2, %3) : !u64i loc(#loc169)
    %5 = cir.alloca !u8i, !cir.ptr<!u8i>, %4 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc169)
    %6 = cir.cast(bitcast, %5 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc169)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!void>), !cir.ptr<!cir.double> loc(#loc169)
    cir.store %7, %0 : !cir.ptr<!cir.double>, !cir.ptr<!cir.ptr<!cir.double>> loc(#loc338)
    cir.scope {
      %8 = cir.const #cir.int<5> : !s32i loc(#loc173)
      cir.switch (%8 : !s32i) [
      case (equal, 6) {
        %9 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc174)
        %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc174)
        cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc175)
        cir.break loc(#loc176)
      },
      case (default) {
        cir.scope {
          %9 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc341)
          cir.scope {
            %10 = cir.const #cir.int<0> : !s32i loc(#loc183)
            cir.store %10, %9 : !s32i, !cir.ptr<!s32i> loc(#loc343)
            cir.for : cond {
              %11 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc185)
              %12 = cir.const #cir.int<10> : !s32i loc(#loc186)
              %13 = cir.cmp(lt, %11, %12) : !s32i, !s32i loc(#loc344)
              %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc187)
              cir.condition(%14) loc(#loc187)
            } body {
              cir.scope {
                %11 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc189)
                %12 = cir.cast(int_to_float, %11 : !s32i), !cir.double loc(#loc189)
                %13 = cir.load %0 : !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.double> loc(#loc190)
                %14 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc191)
                %15 = cir.ptr_stride(%13 : !cir.ptr<!cir.double>, %14 : !s32i), !cir.ptr<!cir.double> loc(#loc192)
                cir.store %12, %15 : !cir.double, !cir.ptr<!cir.double> loc(#loc346)
              } loc(#loc345)
              cir.yield loc(#loc182)
            } step {
              %11 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc193)
              %12 = cir.unary(inc, %11) : !s32i, !s32i loc(#loc194)
              cir.store %12, %9 : !s32i, !cir.ptr<!s32i> loc(#loc347)
              cir.yield loc(#loc342)
            } loc(#loc342)
          } loc(#loc342)
        } loc(#loc340)
        cir.break loc(#loc195)
      }
      ] loc(#loc171)
    } loc(#loc339)
    cir.scope {
      %8 = cir.const #cir.int<7> : !s32i loc(#loc198)
      cir.switch (%8 : !s32i) [
      case (equal, 7) {
        cir.scope {
          %9 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc350)
          cir.scope {
            %10 = cir.const #cir.int<0> : !s32i loc(#loc205)
            cir.store %10, %9 : !s32i, !cir.ptr<!s32i> loc(#loc352)
            cir.for : cond {
              %11 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc207)
              %12 = cir.const #cir.int<10> : !s32i loc(#loc208)
              %13 = cir.cmp(lt, %11, %12) : !s32i, !s32i loc(#loc353)
              %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc209)
              cir.condition(%14) loc(#loc209)
            } body {
              cir.scope {
                %11 = cir.load %0 : !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.double> loc(#loc211)
                %12 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc212)
                %13 = cir.ptr_stride(%11 : !cir.ptr<!cir.double>, %12 : !s32i), !cir.ptr<!cir.double> loc(#loc213)
                %14 = cir.load %13 : !cir.ptr<!cir.double>, !cir.double loc(#loc211)
                cir.call @printDoubleLine(%14) : (!cir.double) -> () loc(#loc214)
              } loc(#loc354)
              cir.yield loc(#loc204)
            } step {
              %11 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc215)
              %12 = cir.unary(inc, %11) : !s32i, !s32i loc(#loc216)
              cir.store %12, %9 : !s32i, !cir.ptr<!s32i> loc(#loc355)
              cir.yield loc(#loc351)
            } loc(#loc351)
          } loc(#loc351)
        } loc(#loc349)
        cir.break loc(#loc217)
      },
      case (default) {
        %9 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc218)
        %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc218)
        cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc219)
        cir.break loc(#loc220)
      }
      ] loc(#loc196)
    } loc(#loc348)
    cir.return loc(#loc166)
  } loc(#loc336)
  cir.func no_proto internal private  @goodG2B2() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!cir.double>, !cir.ptr<!cir.ptr<!cir.double>>, ["data"] {alignment = 8 : i64} loc(#loc357)
    %1 = cir.const #cir.int<10> : !s32i loc(#loc225)
    %2 = cir.cast(integral, %1 : !s32i), !u64i loc(#loc225)
    %3 = cir.const #cir.int<8> : !u64i loc(#loc225)
    %4 = cir.binop(mul, %2, %3) : !u64i loc(#loc225)
    %5 = cir.alloca !u8i, !cir.ptr<!u8i>, %4 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc225)
    %6 = cir.cast(bitcast, %5 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc225)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!void>), !cir.ptr<!cir.double> loc(#loc225)
    cir.store %7, %0 : !cir.ptr<!cir.double>, !cir.ptr<!cir.ptr<!cir.double>> loc(#loc358)
    cir.scope {
      %8 = cir.const #cir.int<6> : !s32i loc(#loc229)
      cir.switch (%8 : !s32i) [
      case (equal, 6) {
        cir.scope {
          %9 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc361)
          cir.scope {
            %10 = cir.const #cir.int<0> : !s32i loc(#loc236)
            cir.store %10, %9 : !s32i, !cir.ptr<!s32i> loc(#loc363)
            cir.for : cond {
              %11 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc238)
              %12 = cir.const #cir.int<10> : !s32i loc(#loc239)
              %13 = cir.cmp(lt, %11, %12) : !s32i, !s32i loc(#loc364)
              %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc240)
              cir.condition(%14) loc(#loc240)
            } body {
              cir.scope {
                %11 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc242)
                %12 = cir.cast(int_to_float, %11 : !s32i), !cir.double loc(#loc242)
                %13 = cir.load %0 : !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.double> loc(#loc243)
                %14 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc244)
                %15 = cir.ptr_stride(%13 : !cir.ptr<!cir.double>, %14 : !s32i), !cir.ptr<!cir.double> loc(#loc245)
                cir.store %12, %15 : !cir.double, !cir.ptr<!cir.double> loc(#loc366)
              } loc(#loc365)
              cir.yield loc(#loc235)
            } step {
              %11 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc246)
              %12 = cir.unary(inc, %11) : !s32i, !s32i loc(#loc247)
              cir.store %12, %9 : !s32i, !cir.ptr<!s32i> loc(#loc367)
              cir.yield loc(#loc362)
            } loc(#loc362)
          } loc(#loc362)
        } loc(#loc360)
        cir.break loc(#loc248)
      },
      case (default) {
        %9 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc249)
        %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc249)
        cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc250)
        cir.break loc(#loc251)
      }
      ] loc(#loc227)
    } loc(#loc359)
    cir.scope {
      %8 = cir.const #cir.int<7> : !s32i loc(#loc254)
      cir.switch (%8 : !s32i) [
      case (equal, 7) {
        cir.scope {
          %9 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc370)
          cir.scope {
            %10 = cir.const #cir.int<0> : !s32i loc(#loc261)
            cir.store %10, %9 : !s32i, !cir.ptr<!s32i> loc(#loc372)
            cir.for : cond {
              %11 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc263)
              %12 = cir.const #cir.int<10> : !s32i loc(#loc264)
              %13 = cir.cmp(lt, %11, %12) : !s32i, !s32i loc(#loc373)
              %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc265)
              cir.condition(%14) loc(#loc265)
            } body {
              cir.scope {
                %11 = cir.load %0 : !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.double> loc(#loc267)
                %12 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc268)
                %13 = cir.ptr_stride(%11 : !cir.ptr<!cir.double>, %12 : !s32i), !cir.ptr<!cir.double> loc(#loc269)
                %14 = cir.load %13 : !cir.ptr<!cir.double>, !cir.double loc(#loc267)
                cir.call @printDoubleLine(%14) : (!cir.double) -> () loc(#loc270)
              } loc(#loc374)
              cir.yield loc(#loc260)
            } step {
              %11 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc271)
              %12 = cir.unary(inc, %11) : !s32i, !s32i loc(#loc272)
              cir.store %12, %9 : !s32i, !cir.ptr<!s32i> loc(#loc375)
              cir.yield loc(#loc371)
            } loc(#loc371)
          } loc(#loc371)
        } loc(#loc369)
        cir.break loc(#loc273)
      },
      case (default) {
        %9 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc274)
        %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc274)
        cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc275)
        cir.break loc(#loc276)
      }
      ] loc(#loc252)
    } loc(#loc368)
    cir.return loc(#loc222)
  } loc(#loc356)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE457_Use_of_Uninitialized_Variable/s01/CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc3 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":34:19)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":38:1)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":38:41)
#loc6 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":22:1)
#loc7 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":54:1)
#loc8 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":24:5)
#loc9 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":24:14)
#loc10 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":25:22)
#loc11 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":25:5)
#loc12 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":26:5)
#loc13 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":36:5)
#loc14 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":26:12)
#loc15 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":31:9)
#loc16 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":34:9)
#loc17 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":35:9)
#loc18 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":37:5)
#loc19 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":53:5)
#loc20 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":37:12)
#loc21 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":41:5)
#loc22 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":47:5)
#loc23 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":42:9)
#loc24 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":42:13)
#loc25 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":43:9)
#loc26 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":46:9)
#loc27 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":43:15)
#loc28 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":43:13)
#loc29 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":43:18)
#loc30 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":43:20)
#loc31 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":43:19)
#loc32 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":44:9)
#loc33 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":45:29)
#loc34 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":45:34)
#loc35 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":45:35)
#loc36 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":45:13)
#loc37 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":43:25)
#loc38 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":43:24)
#loc39 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":48:5)
#loc40 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":51:19)
#loc41 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":51:9)
#loc42 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":52:9)
#loc43 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":226:1)
#loc44 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":232:1)
#loc45 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":228:5)
#loc46 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":228:14)
#loc47 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":229:5)
#loc48 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":229:14)
#loc49 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":230:5)
#loc50 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":230:14)
#loc51 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":231:5)
#loc52 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":231:14)
#loc53 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":61:1)
#loc54 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":100:1)
#loc55 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":63:5)
#loc56 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":63:14)
#loc57 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":64:22)
#loc58 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":64:5)
#loc59 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":65:5)
#loc60 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":75:5)
#loc61 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":65:12)
#loc62 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":70:9)
#loc63 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":73:19)
#loc64 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":73:9)
#loc65 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":74:9)
#loc66 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":76:5)
#loc67 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":99:5)
#loc68 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":76:12)
#loc69 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":80:19)
#loc70 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":80:9)
#loc71 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":81:9)
#loc72 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":84:5)
#loc73 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":90:5)
#loc74 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":85:9)
#loc75 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":85:13)
#loc76 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":86:9)
#loc77 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":89:9)
#loc78 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":86:15)
#loc79 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":86:13)
#loc80 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":86:18)
#loc81 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":86:20)
#loc82 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":86:19)
#loc83 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":87:9)
#loc84 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":88:31)
#loc85 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":88:13)
#loc86 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":88:18)
#loc87 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":88:19)
#loc88 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":86:25)
#loc89 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":86:24)
#loc90 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":91:5)
#loc91 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":97:5)
#loc92 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":92:9)
#loc93 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":92:13)
#loc94 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":93:9)
#loc95 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":96:9)
#loc96 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":93:15)
#loc97 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":93:13)
#loc98 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":93:18)
#loc99 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":93:20)
#loc100 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":93:19)
#loc101 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":94:9)
#loc102 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":95:29)
#loc103 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":95:34)
#loc104 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":95:35)
#loc105 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":95:13)
#loc106 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":93:25)
#loc107 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":93:24)
#loc108 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":98:5)
#loc109 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":103:1)
#loc110 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":142:1)
#loc111 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":105:5)
#loc112 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":105:14)
#loc113 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":106:22)
#loc114 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":106:5)
#loc115 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":107:5)
#loc116 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":117:5)
#loc117 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":107:12)
#loc118 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":112:9)
#loc119 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":115:19)
#loc120 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":115:9)
#loc121 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":116:9)
#loc122 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":118:5)
#loc123 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":141:5)
#loc124 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":118:12)
#loc125 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":122:5)
#loc126 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":128:5)
#loc127 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":123:9)
#loc128 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":123:13)
#loc129 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":124:9)
#loc130 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":127:9)
#loc131 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":124:15)
#loc132 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":124:13)
#loc133 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":124:18)
#loc134 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":124:20)
#loc135 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":124:19)
#loc136 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":125:9)
#loc137 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":126:31)
#loc138 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":126:13)
#loc139 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":126:18)
#loc140 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":126:19)
#loc141 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":124:25)
#loc142 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":124:24)
#loc143 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":129:5)
#loc144 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":135:5)
#loc145 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":130:9)
#loc146 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":130:13)
#loc147 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":131:9)
#loc148 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":134:9)
#loc149 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":131:15)
#loc150 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":131:13)
#loc151 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":131:18)
#loc152 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":131:20)
#loc153 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":131:19)
#loc154 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":132:9)
#loc155 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":133:29)
#loc156 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":133:34)
#loc157 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":133:35)
#loc158 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":133:13)
#loc159 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":131:25)
#loc160 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":131:24)
#loc161 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":136:5)
#loc162 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":139:19)
#loc163 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":139:9)
#loc164 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":140:9)
#loc165 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":145:1)
#loc166 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":183:1)
#loc167 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":147:5)
#loc168 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":147:14)
#loc169 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":148:22)
#loc170 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":148:5)
#loc171 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":149:5)
#loc172 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":165:5)
#loc173 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":149:12)
#loc174 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":153:19)
#loc175 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":153:9)
#loc176 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":154:9)
#loc177 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":157:5)
#loc178 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":163:5)
#loc179 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":158:9)
#loc180 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":158:13)
#loc181 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":159:9)
#loc182 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":162:9)
#loc183 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":159:15)
#loc184 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":159:13)
#loc185 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":159:18)
#loc186 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":159:20)
#loc187 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":159:19)
#loc188 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":160:9)
#loc189 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":161:31)
#loc190 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":161:13)
#loc191 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":161:18)
#loc192 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":161:19)
#loc193 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":159:25)
#loc194 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":159:24)
#loc195 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":164:5)
#loc196 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":166:5)
#loc197 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":182:5)
#loc198 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":166:12)
#loc199 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":170:5)
#loc200 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":176:5)
#loc201 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":171:9)
#loc202 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":171:13)
#loc203 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":172:9)
#loc204 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":175:9)
#loc205 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":172:15)
#loc206 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":172:13)
#loc207 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":172:18)
#loc208 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":172:20)
#loc209 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":172:19)
#loc210 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":173:9)
#loc211 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":174:29)
#loc212 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":174:34)
#loc213 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":174:35)
#loc214 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":174:13)
#loc215 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":172:25)
#loc216 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":172:24)
#loc217 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":177:5)
#loc218 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":180:19)
#loc219 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":180:9)
#loc220 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":181:9)
#loc221 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":186:1)
#loc222 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":224:1)
#loc223 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":188:5)
#loc224 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":188:14)
#loc225 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":189:22)
#loc226 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":189:5)
#loc227 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":190:5)
#loc228 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":206:5)
#loc229 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":190:12)
#loc230 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":194:5)
#loc231 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":200:5)
#loc232 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":195:9)
#loc233 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":195:13)
#loc234 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":196:9)
#loc235 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":199:9)
#loc236 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":196:15)
#loc237 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":196:13)
#loc238 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":196:18)
#loc239 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":196:20)
#loc240 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":196:19)
#loc241 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":197:9)
#loc242 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":198:31)
#loc243 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":198:13)
#loc244 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":198:18)
#loc245 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":198:19)
#loc246 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":196:25)
#loc247 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":196:24)
#loc248 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":201:5)
#loc249 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":204:19)
#loc250 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":204:9)
#loc251 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":205:9)
#loc252 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":207:5)
#loc253 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":223:5)
#loc254 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":207:12)
#loc255 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":211:5)
#loc256 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":217:5)
#loc257 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":212:9)
#loc258 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":212:13)
#loc259 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":213:9)
#loc260 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":216:9)
#loc261 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":213:15)
#loc262 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":213:13)
#loc263 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":213:18)
#loc264 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":213:20)
#loc265 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":213:19)
#loc266 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":214:9)
#loc267 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":215:29)
#loc268 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":215:34)
#loc269 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":215:35)
#loc270 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":215:13)
#loc271 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":213:25)
#loc272 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":213:24)
#loc273 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":218:5)
#loc274 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":221:19)
#loc275 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":221:9)
#loc276 = loc("CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_15.c":222:9)
#loc277 = loc(fused[#loc1, #loc2])
#loc278 = loc(fused[#loc4, #loc5])
#loc279 = loc(fused[#loc6, #loc7])
#loc280 = loc(fused[#loc8, #loc9])
#loc281 = loc(fused[#loc11, #loc10])
#loc282 = loc(fused[#loc12, #loc13])
#loc283 = loc(fused[#loc18, #loc19])
#loc284 = loc(fused[#loc21, #loc22])
#loc285 = loc(fused[#loc23, #loc24])
#loc286 = loc(fused[#loc25, #loc26])
#loc287 = loc(fused[#loc28, #loc27])
#loc288 = loc(fused[#loc29, #loc30])
#loc289 = loc(fused[#loc32, #loc26])
#loc290 = loc(fused[#loc38, #loc37])
#loc291 = loc(fused[#loc43, #loc44])
#loc292 = loc(fused[#loc45, #loc46])
#loc293 = loc(fused[#loc47, #loc48])
#loc294 = loc(fused[#loc49, #loc50])
#loc295 = loc(fused[#loc51, #loc52])
#loc296 = loc(fused[#loc53, #loc54])
#loc297 = loc(fused[#loc55, #loc56])
#loc298 = loc(fused[#loc58, #loc57])
#loc299 = loc(fused[#loc59, #loc60])
#loc300 = loc(fused[#loc66, #loc67])
#loc301 = loc(fused[#loc72, #loc73])
#loc302 = loc(fused[#loc74, #loc75])
#loc303 = loc(fused[#loc76, #loc77])
#loc304 = loc(fused[#loc79, #loc78])
#loc305 = loc(fused[#loc80, #loc81])
#loc306 = loc(fused[#loc83, #loc77])
#loc307 = loc(fused[#loc85, #loc84])
#loc308 = loc(fused[#loc89, #loc88])
#loc309 = loc(fused[#loc90, #loc91])
#loc310 = loc(fused[#loc92, #loc93])
#loc311 = loc(fused[#loc94, #loc95])
#loc312 = loc(fused[#loc97, #loc96])
#loc313 = loc(fused[#loc98, #loc99])
#loc314 = loc(fused[#loc101, #loc95])
#loc315 = loc(fused[#loc107, #loc106])
#loc316 = loc(fused[#loc109, #loc110])
#loc317 = loc(fused[#loc111, #loc112])
#loc318 = loc(fused[#loc114, #loc113])
#loc319 = loc(fused[#loc115, #loc116])
#loc320 = loc(fused[#loc122, #loc123])
#loc321 = loc(fused[#loc125, #loc126])
#loc322 = loc(fused[#loc127, #loc128])
#loc323 = loc(fused[#loc129, #loc130])
#loc324 = loc(fused[#loc132, #loc131])
#loc325 = loc(fused[#loc133, #loc134])
#loc326 = loc(fused[#loc136, #loc130])
#loc327 = loc(fused[#loc138, #loc137])
#loc328 = loc(fused[#loc142, #loc141])
#loc329 = loc(fused[#loc143, #loc144])
#loc330 = loc(fused[#loc145, #loc146])
#loc331 = loc(fused[#loc147, #loc148])
#loc332 = loc(fused[#loc150, #loc149])
#loc333 = loc(fused[#loc151, #loc152])
#loc334 = loc(fused[#loc154, #loc148])
#loc335 = loc(fused[#loc160, #loc159])
#loc336 = loc(fused[#loc165, #loc166])
#loc337 = loc(fused[#loc167, #loc168])
#loc338 = loc(fused[#loc170, #loc169])
#loc339 = loc(fused[#loc171, #loc172])
#loc340 = loc(fused[#loc177, #loc178])
#loc341 = loc(fused[#loc179, #loc180])
#loc342 = loc(fused[#loc181, #loc182])
#loc343 = loc(fused[#loc184, #loc183])
#loc344 = loc(fused[#loc185, #loc186])
#loc345 = loc(fused[#loc188, #loc182])
#loc346 = loc(fused[#loc190, #loc189])
#loc347 = loc(fused[#loc194, #loc193])
#loc348 = loc(fused[#loc196, #loc197])
#loc349 = loc(fused[#loc199, #loc200])
#loc350 = loc(fused[#loc201, #loc202])
#loc351 = loc(fused[#loc203, #loc204])
#loc352 = loc(fused[#loc206, #loc205])
#loc353 = loc(fused[#loc207, #loc208])
#loc354 = loc(fused[#loc210, #loc204])
#loc355 = loc(fused[#loc216, #loc215])
#loc356 = loc(fused[#loc221, #loc222])
#loc357 = loc(fused[#loc223, #loc224])
#loc358 = loc(fused[#loc226, #loc225])
#loc359 = loc(fused[#loc227, #loc228])
#loc360 = loc(fused[#loc230, #loc231])
#loc361 = loc(fused[#loc232, #loc233])
#loc362 = loc(fused[#loc234, #loc235])
#loc363 = loc(fused[#loc237, #loc236])
#loc364 = loc(fused[#loc238, #loc239])
#loc365 = loc(fused[#loc241, #loc235])
#loc366 = loc(fused[#loc243, #loc242])
#loc367 = loc(fused[#loc247, #loc246])
#loc368 = loc(fused[#loc252, #loc253])
#loc369 = loc(fused[#loc255, #loc256])
#loc370 = loc(fused[#loc257, #loc258])
#loc371 = loc(fused[#loc259, #loc260])
#loc372 = loc(fused[#loc262, #loc261])
#loc373 = loc(fused[#loc263, #loc264])
#loc374 = loc(fused[#loc266, #loc260])
#loc375 = loc(fused[#loc272, #loc271])
