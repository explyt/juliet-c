!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_01.c":83:10)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_01.c":83:14)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_01.c":83:20)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_01.c":83:32)
#loc157 = loc(fused[#loc67, #loc68])
#loc158 = loc(fused[#loc69, #loc70])
!ty__charVoid = !cir.struct<struct "_charVoid" {!cir.array<!s8i x 16>, !cir.ptr<!void>, !cir.ptr<!void>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s01/CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_01.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i32 = dense<32> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc129)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc130)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"0123456789abcdef0123456789abcde\00" : !cir.array<!s8i x 32>> : !cir.array<!s8i x 32> {alignment = 1 : i64} loc(#loc5)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc131)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_01_bad() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.alloca !cir.ptr<!ty__charVoid>, !cir.ptr<!cir.ptr<!ty__charVoid>>, ["structCharVoid", init] {alignment = 8 : i64} loc(#loc134)
      %1 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc14)
      %2 = cir.const #cir.int<32> : !u64i loc(#loc135)
      %3 = cir.call @malloc(%2) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc14)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!void>), !cir.ptr<!ty__charVoid> loc(#loc136)
      cir.store %4, %0 : !cir.ptr<!ty__charVoid>, !cir.ptr<!cir.ptr<!ty__charVoid>> loc(#loc134)
      cir.scope {
        %41 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__charVoid>>, !cir.ptr<!ty__charVoid> loc(#loc19)
        %42 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc20)
        %43 = cir.cast(bitcast, %42 : !cir.ptr<!void>), !cir.ptr<!ty__charVoid> loc(#loc20)
        %44 = cir.cmp(eq, %41, %43) : !cir.ptr<!ty__charVoid>, !cir.bool loc(#loc138)
        cir.if %44 {
          %45 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc22)
          %46 = cir.const #cir.int<1> : !s32i loc(#loc23)
          %47 = cir.unary(minus, %46) : !s32i, !s32i loc(#loc24)
          cir.call @exit(%47) : (!s32i) -> () extra(#fn_attr) loc(#loc22)
        } loc(#loc139)
      } loc(#loc137)
      %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc5)
      %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc5)
      %7 = cir.cast(bitcast, %6 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc5)
      %8 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__charVoid>>, !cir.ptr<!ty__charVoid> loc(#loc25)
      %9 = cir.get_member %8[1] {name = "voidSecond"} : !cir.ptr<!ty__charVoid> -> !cir.ptr<!cir.ptr<!void>> loc(#loc26)
      cir.store %7, %9 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc140)
      %10 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__charVoid>>, !cir.ptr<!ty__charVoid> loc(#loc27)
      %11 = cir.get_member %10[1] {name = "voidSecond"} : !cir.ptr<!ty__charVoid> -> !cir.ptr<!cir.ptr<!void>> loc(#loc26)
      %12 = cir.load %11 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc28)
      %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc141)
      cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc29)
      %14 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__charVoid>>, !cir.ptr<!ty__charVoid> loc(#loc30)
      %15 = cir.get_member %14[0] {name = "charFirst"} : !cir.ptr<!ty__charVoid> -> !cir.ptr<!cir.array<!s8i x 16>> loc(#loc31)
      %16 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc142)
      %17 = cir.cast(bitcast, %16 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc142)
      %18 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc33)
      %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc33)
      %20 = cir.cast(bitcast, %19 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc33)
      %21 = cir.const #cir.int<32> : !u64i loc(#loc143)
      cir.libc.memmove %21 bytes from %20 to %17 : !cir.ptr<!void>, !u64i loc(#loc144)
      %22 = cir.const #cir.int<0> : !s32i loc(#loc38)
      %23 = cir.cast(integral, %22 : !s32i), !s8i loc(#loc38)
      %24 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__charVoid>>, !cir.ptr<!ty__charVoid> loc(#loc39)
      %25 = cir.get_member %24[0] {name = "charFirst"} : !cir.ptr<!ty__charVoid> -> !cir.ptr<!cir.array<!s8i x 16>> loc(#loc31)
      %26 = cir.const #cir.int<16> : !u64i loc(#loc145)
      %27 = cir.const #cir.int<1> : !u64i loc(#loc146)
      %28 = cir.binop(div, %26, %27) : !u64i loc(#loc147)
      %29 = cir.const #cir.int<1> : !s32i loc(#loc44)
      %30 = cir.cast(integral, %29 : !s32i), !u64i loc(#loc44)
      %31 = cir.binop(sub, %28, %30) : !u64i loc(#loc148)
      %32 = cir.cast(array_to_ptrdecay, %25 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc39)
      %33 = cir.ptr_stride(%32 : !cir.ptr<!s8i>, %31 : !u64i), !cir.ptr<!s8i> loc(#loc46)
      cir.store %23, %33 : !s8i, !cir.ptr<!s8i> loc(#loc149)
      %34 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__charVoid>>, !cir.ptr<!ty__charVoid> loc(#loc47)
      %35 = cir.get_member %34[0] {name = "charFirst"} : !cir.ptr<!ty__charVoid> -> !cir.ptr<!cir.array<!s8i x 16>> loc(#loc31)
      %36 = cir.cast(array_to_ptrdecay, %35 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc150)
      cir.call @printLine(%36) : (!cir.ptr<!s8i>) -> () loc(#loc49)
      %37 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__charVoid>>, !cir.ptr<!ty__charVoid> loc(#loc50)
      %38 = cir.get_member %37[1] {name = "voidSecond"} : !cir.ptr<!ty__charVoid> -> !cir.ptr<!cir.ptr<!void>> loc(#loc26)
      %39 = cir.load %38 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc51)
      %40 = cir.cast(bitcast, %39 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc151)
      cir.call @printLine(%40) : (!cir.ptr<!s8i>) -> () loc(#loc52)
    } loc(#loc133)
    cir.return loc(#loc9)
  } loc(#loc132)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_01_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<!void ()>> loc(#loc153)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc55)
    cir.return loc(#loc54)
  } loc(#loc152)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc154)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc155)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc61)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc62)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc63)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc64)
  cir.func @main(%arg0: !s32i loc(fused[#loc67, #loc68]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc69, #loc70])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc157)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc158)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc66)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc71)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc71)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc72)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc73)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc73)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc74)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc61)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc61)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc75)
    %8 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_01_good : !cir.ptr<!cir.func<!void ()>> loc(#loc159)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_01_good() : () -> () loc(#loc76)
    %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc62)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc62)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc78)
    %11 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc63)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc63)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc79)
    %13 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_01_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc160)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_01_bad() : () -> () loc(#loc80)
    %14 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc64)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc64)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc82)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc83)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc161)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc161)
    cir.return %17 : !s32i loc(#loc161)
  } loc(#loc156)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.alloca !cir.ptr<!ty__charVoid>, !cir.ptr<!cir.ptr<!ty__charVoid>>, ["structCharVoid", init] {alignment = 8 : i64} loc(#loc164)
      %1 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc91)
      %2 = cir.const #cir.int<32> : !u64i loc(#loc165)
      %3 = cir.call @malloc(%2) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc91)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!void>), !cir.ptr<!ty__charVoid> loc(#loc166)
      cir.store %4, %0 : !cir.ptr<!ty__charVoid>, !cir.ptr<!cir.ptr<!ty__charVoid>> loc(#loc164)
      cir.scope {
        %41 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__charVoid>>, !cir.ptr<!ty__charVoid> loc(#loc96)
        %42 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc97)
        %43 = cir.cast(bitcast, %42 : !cir.ptr<!void>), !cir.ptr<!ty__charVoid> loc(#loc97)
        %44 = cir.cmp(eq, %41, %43) : !cir.ptr<!ty__charVoid>, !cir.bool loc(#loc168)
        cir.if %44 {
          %45 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc99)
          %46 = cir.const #cir.int<1> : !s32i loc(#loc100)
          %47 = cir.unary(minus, %46) : !s32i, !s32i loc(#loc101)
          cir.call @exit(%47) : (!s32i) -> () extra(#fn_attr) loc(#loc99)
        } loc(#loc169)
      } loc(#loc167)
      %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc102)
      %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc102)
      %7 = cir.cast(bitcast, %6 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc102)
      %8 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__charVoid>>, !cir.ptr<!ty__charVoid> loc(#loc103)
      %9 = cir.get_member %8[1] {name = "voidSecond"} : !cir.ptr<!ty__charVoid> -> !cir.ptr<!cir.ptr<!void>> loc(#loc26)
      cir.store %7, %9 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc170)
      %10 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__charVoid>>, !cir.ptr<!ty__charVoid> loc(#loc104)
      %11 = cir.get_member %10[1] {name = "voidSecond"} : !cir.ptr<!ty__charVoid> -> !cir.ptr<!cir.ptr<!void>> loc(#loc26)
      %12 = cir.load %11 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc105)
      %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc171)
      cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc106)
      %14 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__charVoid>>, !cir.ptr<!ty__charVoid> loc(#loc107)
      %15 = cir.get_member %14[0] {name = "charFirst"} : !cir.ptr<!ty__charVoid> -> !cir.ptr<!cir.array<!s8i x 16>> loc(#loc31)
      %16 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc172)
      %17 = cir.cast(bitcast, %16 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc172)
      %18 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc109)
      %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc109)
      %20 = cir.cast(bitcast, %19 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc109)
      %21 = cir.const #cir.int<16> : !u64i loc(#loc173)
      cir.libc.memmove %21 bytes from %20 to %17 : !cir.ptr<!void>, !u64i loc(#loc174)
      %22 = cir.const #cir.int<0> : !s32i loc(#loc114)
      %23 = cir.cast(integral, %22 : !s32i), !s8i loc(#loc114)
      %24 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__charVoid>>, !cir.ptr<!ty__charVoid> loc(#loc115)
      %25 = cir.get_member %24[0] {name = "charFirst"} : !cir.ptr<!ty__charVoid> -> !cir.ptr<!cir.array<!s8i x 16>> loc(#loc31)
      %26 = cir.const #cir.int<16> : !u64i loc(#loc175)
      %27 = cir.const #cir.int<1> : !u64i loc(#loc176)
      %28 = cir.binop(div, %26, %27) : !u64i loc(#loc177)
      %29 = cir.const #cir.int<1> : !s32i loc(#loc120)
      %30 = cir.cast(integral, %29 : !s32i), !u64i loc(#loc120)
      %31 = cir.binop(sub, %28, %30) : !u64i loc(#loc178)
      %32 = cir.cast(array_to_ptrdecay, %25 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc115)
      %33 = cir.ptr_stride(%32 : !cir.ptr<!s8i>, %31 : !u64i), !cir.ptr<!s8i> loc(#loc122)
      cir.store %23, %33 : !s8i, !cir.ptr<!s8i> loc(#loc179)
      %34 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__charVoid>>, !cir.ptr<!ty__charVoid> loc(#loc123)
      %35 = cir.get_member %34[0] {name = "charFirst"} : !cir.ptr<!ty__charVoid> -> !cir.ptr<!cir.array<!s8i x 16>> loc(#loc31)
      %36 = cir.cast(array_to_ptrdecay, %35 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc180)
      cir.call @printLine(%36) : (!cir.ptr<!s8i>) -> () loc(#loc125)
      %37 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__charVoid>>, !cir.ptr<!ty__charVoid> loc(#loc126)
      %38 = cir.get_member %37[1] {name = "voidSecond"} : !cir.ptr<!ty__charVoid> -> !cir.ptr<!cir.ptr<!void>> loc(#loc26)
      %39 = cir.load %38 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc127)
      %40 = cir.cast(bitcast, %39 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc181)
      cir.call @printLine(%40) : (!cir.ptr<!s8i>) -> () loc(#loc128)
    } loc(#loc163)
    cir.return loc(#loc86)
  } loc(#loc162)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s01/CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_01.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_01.c":38:46)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc8 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_01.c":33:1)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_01.c":47:1)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_01.c":35:5)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_01.c":46:5)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_01.c":36:9)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_01.c":36:72)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_01.c":36:49)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_01.c":36:56)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_01.c":36:71)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_01.c":37:9)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_01.c":37:47)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_01.c":37:13)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_01.c":37:31)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_01.c":37:37)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_01.c":37:38)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_01.c":37:44)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_01.c":37:43)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_01.c":38:9)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_01.c":27:12)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_01.c":40:27)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_01.c":40:43)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_01.c":40:9)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_01.c":42:17)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_01.c":26:10)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_01.c":42:33)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_01.c":42:44)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_01.c":42:53)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_01.c":42:75)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_01.c":42:9)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_01.c":42:76)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_01.c":43:89)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_01.c":43:9)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_01.c":43:36)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_01.c":43:68)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_01.c":43:70)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_01.c":43:81)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_01.c":43:84)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_01.c":43:35)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_01.c":43:25)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_01.c":44:27)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_01.c":44:43)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_01.c":44:9)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_01.c":45:27)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_01.c":45:43)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_01.c":45:9)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_01.c":69:1)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_01.c":72:1)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_01.c":71:5)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_01.c":71:11)
#loc57 = loc("/usr/include/stdlib.h":575:1)
#loc58 = loc("/usr/include/stdlib.h":575:41)
#loc59 = loc("/usr/include/time.h":76:1)
#loc60 = loc("/usr/include/time.h":76:38)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_01.c":88:15)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_01.c":90:15)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_01.c":93:15)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_01.c":95:15)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_01.c":83:1)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_01.c":98:1)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_01.c":84:1)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_01.c":86:27)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_01.c":86:22)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_01.c":86:5)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_01.c":88:5)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_01.c":89:5)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_01.c":89:74)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_01.c":90:5)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_01.c":93:5)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_01.c":94:5)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_01.c":94:73)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_01.c":95:5)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_01.c":97:12)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_01.c":97:5)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_01.c":53:1)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_01.c":67:1)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_01.c":55:5)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_01.c":66:5)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_01.c":56:9)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_01.c":56:72)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_01.c":56:49)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_01.c":56:56)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_01.c":56:71)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_01.c":57:9)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_01.c":57:47)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_01.c":57:13)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_01.c":57:31)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_01.c":57:37)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_01.c":57:38)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_01.c":57:44)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_01.c":57:43)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_01.c":58:46)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_01.c":58:9)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_01.c":60:27)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_01.c":60:43)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_01.c":60:9)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_01.c":62:17)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_01.c":62:33)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_01.c":62:44)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_01.c":62:53)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_01.c":62:85)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_01.c":62:9)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_01.c":62:86)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_01.c":63:89)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_01.c":63:9)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_01.c":63:36)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_01.c":63:68)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_01.c":63:70)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_01.c":63:81)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_01.c":63:84)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_01.c":63:35)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_01.c":63:25)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_01.c":64:27)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_01.c":64:43)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_01.c":64:9)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_01.c":65:27)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_01.c":65:43)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_01.c":65:9)
#loc129 = loc(fused[#loc1, #loc2])
#loc130 = loc(fused[#loc3, #loc4])
#loc131 = loc(fused[#loc6, #loc7])
#loc132 = loc(fused[#loc8, #loc9])
#loc133 = loc(fused[#loc10, #loc11])
#loc134 = loc(fused[#loc12, #loc13])
#loc135 = loc(fused[#loc15, #loc16])
#loc136 = loc(fused[#loc14, #loc13])
#loc137 = loc(fused[#loc17, #loc18])
#loc138 = loc(fused[#loc19, #loc20])
#loc139 = loc(fused[#loc21, #loc18])
#loc140 = loc(fused[#loc25, #loc5])
#loc141 = loc(fused[#loc27, #loc28])
#loc142 = loc(fused[#loc30, #loc32])
#loc143 = loc(fused[#loc34, #loc35])
#loc144 = loc(fused[#loc36, #loc37])
#loc145 = loc(fused[#loc40, #loc41])
#loc146 = loc(fused[#loc42, #loc43])
#loc147 = loc(fused[#loc40, #loc43])
#loc148 = loc(fused[#loc45, #loc44])
#loc149 = loc(fused[#loc39, #loc38])
#loc150 = loc(fused[#loc47, #loc48])
#loc151 = loc(fused[#loc50, #loc51])
#loc152 = loc(fused[#loc53, #loc54])
#loc153 = loc(fused[#loc55, #loc56])
#loc154 = loc(fused[#loc57, #loc58])
#loc155 = loc(fused[#loc59, #loc60])
#loc156 = loc(fused[#loc65, #loc66])
#loc159 = loc(fused[#loc76, #loc77])
#loc160 = loc(fused[#loc80, #loc81])
#loc161 = loc(fused[#loc84, #loc83])
#loc162 = loc(fused[#loc85, #loc86])
#loc163 = loc(fused[#loc87, #loc88])
#loc164 = loc(fused[#loc89, #loc90])
#loc165 = loc(fused[#loc92, #loc93])
#loc166 = loc(fused[#loc91, #loc90])
#loc167 = loc(fused[#loc94, #loc95])
#loc168 = loc(fused[#loc96, #loc97])
#loc169 = loc(fused[#loc98, #loc95])
#loc170 = loc(fused[#loc103, #loc102])
#loc171 = loc(fused[#loc104, #loc105])
#loc172 = loc(fused[#loc107, #loc108])
#loc173 = loc(fused[#loc110, #loc111])
#loc174 = loc(fused[#loc112, #loc113])
#loc175 = loc(fused[#loc116, #loc117])
#loc176 = loc(fused[#loc118, #loc119])
#loc177 = loc(fused[#loc116, #loc119])
#loc178 = loc(fused[#loc121, #loc120])
#loc179 = loc(fused[#loc115, #loc114])
#loc180 = loc(fused[#loc123, #loc124])
#loc181 = loc(fused[#loc126, #loc127])
