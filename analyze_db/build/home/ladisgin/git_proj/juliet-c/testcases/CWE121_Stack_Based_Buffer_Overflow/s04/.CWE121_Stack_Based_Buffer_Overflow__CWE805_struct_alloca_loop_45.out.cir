!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_45.c":118:10)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_45.c":118:14)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_45.c":118:20)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_45.c":118:32)
!ty__twoIntsStruct = !cir.struct<struct "_twoIntsStruct" {!s32i, !s32i} #cir.record.decl.ast>
#loc187 = loc(fused[#loc33, #loc34])
#loc188 = loc(fused[#loc35, #loc36])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s04/CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_45.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.global "private" internal dsolocal @CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_45_badData = #cir.ptr<null> : !cir.ptr<!ty__twoIntsStruct> {alignment = 8 : i64} loc(#loc173)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_45_bad() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["data"] {alignment = 8 : i64} loc(#loc175)
    %1 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc176)
    %2 = cir.const #cir.int<50> : !s32i loc(#loc8)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc8)
    %4 = cir.const #cir.int<8> : !u64i loc(#loc8)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc8)
    %6 = cir.alloca !u8i, !cir.ptr<!u8i>, %5 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc8)
    %7 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc177)
    %8 = cir.cast(bitcast, %6 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc8)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!ty__twoIntsStruct> loc(#loc8)
    cir.store %9, %1 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc176)
    %10 = cir.const #cir.int<100> : !s32i loc(#loc10)
    %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc10)
    %12 = cir.const #cir.int<8> : !u64i loc(#loc10)
    %13 = cir.binop(mul, %11, %12) : !u64i loc(#loc10)
    %14 = cir.alloca !u8i, !cir.ptr<!u8i>, %13 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc10)
    %15 = cir.cast(bitcast, %14 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc10)
    %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!ty__twoIntsStruct> loc(#loc10)
    cir.store %16, %7 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc177)
    %17 = cir.load %1 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc11)
    cir.store %17, %0 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc178)
    %18 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc13)
    %19 = cir.get_global @CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_45_badData : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc173)
    cir.store %18, %19 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc179)
    %20 = cir.get_global @badSink : !cir.ptr<!cir.func<!void ()>> loc(#loc180)
    cir.call %20() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc15)
    cir.return loc(#loc4)
  } loc(#loc174)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_45_good() extra(#fn_attr) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc182)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc19)
    cir.return loc(#loc18)
  } loc(#loc181)
  cir.func private @srand(!u32i) extra(#fn_attr1) loc(#loc183)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc184)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc185)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc27)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc28)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc29)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc30)
  cir.func @main(%arg0: !s32i loc(fused[#loc33, #loc34]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc35, #loc36])) -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc187)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc188)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc32)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc37)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc37)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc38)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc39)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc39)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr1) loc(#loc40)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc27)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc27)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc41)
    %8 = cir.get_global @CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_45_good : !cir.ptr<!cir.func<!void ()>> loc(#loc189)
    cir.call @CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_45_good() : () -> () loc(#loc42)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc28)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc28)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc44)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc29)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc29)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc45)
    %13 = cir.get_global @CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_45_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc190)
    cir.call @CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_45_bad() : () -> () loc(#loc46)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc30)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc30)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc48)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc49)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc191)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc191)
    cir.return %17 : !s32i loc(#loc191)
  } loc(#loc186)
  cir.func private @printStructLine(!cir.ptr<!ty__twoIntsStruct>) loc(#loc192)
  cir.func no_proto internal private @badSink() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["data", init] {alignment = 8 : i64} loc(#loc194)
    %1 = cir.get_global @CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_45_badData : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc173)
    %2 = cir.load %1 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc56)
    cir.store %2, %0 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc194)
    cir.scope {
      %3 = cir.alloca !cir.array<!ty__twoIntsStruct x 100>, !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>, ["source"] {alignment = 16 : i64} loc(#loc196)
      cir.scope {
        %4 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc198)
        cir.scope {
          %5 = cir.const #cir.int<0> : !s32i loc(#loc67)
          %6 = cir.cast(integral, %5 : !s32i), !u64i loc(#loc67)
          cir.store %6, %4 : !u64i, !cir.ptr<!u64i> loc(#loc200)
          cir.for : cond {
            %7 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc69)
            %8 = cir.const #cir.int<100> : !s32i loc(#loc70)
            %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc70)
            %10 = cir.cmp(lt, %7, %9) : !u64i, !cir.bool loc(#loc201)
            cir.condition(%10) loc(#loc71)
          } body {
            cir.scope {
              %7 = cir.const #cir.int<0> : !s32i loc(#loc73)
              %8 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc74)
              %9 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc75)
              %10 = cir.ptr_stride(%9 : !cir.ptr<!ty__twoIntsStruct>, %8 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc75)
              %11 = cir.get_member %10[0] {name = "intOne"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc76)
              cir.store %7, %11 : !s32i, !cir.ptr<!s32i> loc(#loc203)
              %12 = cir.const #cir.int<0> : !s32i loc(#loc77)
              %13 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc78)
              %14 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc79)
              %15 = cir.ptr_stride(%14 : !cir.ptr<!ty__twoIntsStruct>, %13 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc79)
              %16 = cir.get_member %15[1] {name = "intTwo"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc80)
              cir.store %12, %16 : !s32i, !cir.ptr<!s32i> loc(#loc204)
            } loc(#loc202)
            cir.yield loc(#loc66)
          } step {
            %7 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc81)
            %8 = cir.unary(inc, %7) : !u64i, !u64i loc(#loc82)
            cir.store %8, %4 : !u64i, !cir.ptr<!u64i> loc(#loc205)
            cir.yield loc(#loc199)
          } loc(#loc199)
        } loc(#loc199)
      } loc(#loc197)
      cir.scope {
        %4 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc207)
        cir.scope {
          %8 = cir.const #cir.int<0> : !s32i loc(#loc89)
          %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc89)
          cir.store %9, %4 : !u64i, !cir.ptr<!u64i> loc(#loc209)
          cir.for : cond {
            %10 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc91)
            %11 = cir.const #cir.int<100> : !s32i loc(#loc92)
            %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc92)
            %13 = cir.cmp(lt, %10, %12) : !u64i, !cir.bool loc(#loc210)
            cir.condition(%13) loc(#loc93)
          } body {
            cir.scope {
              %10 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc95)
              %11 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc96)
              %12 = cir.ptr_stride(%10 : !cir.ptr<!ty__twoIntsStruct>, %11 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc97)
              %13 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc98)
              %14 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc99)
              %15 = cir.ptr_stride(%14 : !cir.ptr<!ty__twoIntsStruct>, %13 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc99)
              cir.copy %15 to %12 : !cir.ptr<!ty__twoIntsStruct> loc(#loc97)
            } loc(#loc211)
            cir.yield loc(#loc88)
          } step {
            %10 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc100)
            %11 = cir.unary(inc, %10) : !u64i, !u64i loc(#loc101)
            cir.store %11, %4 : !u64i, !cir.ptr<!u64i> loc(#loc212)
            cir.yield loc(#loc208)
          } loc(#loc208)
        } loc(#loc208)
        %5 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc102)
        %6 = cir.const #cir.int<0> : !s32i loc(#loc103)
        %7 = cir.ptr_stride(%5 : !cir.ptr<!ty__twoIntsStruct>, %6 : !s32i), !cir.ptr<!ty__twoIntsStruct> loc(#loc104)
        cir.call @printStructLine(%7) : (!cir.ptr<!ty__twoIntsStruct>) -> () loc(#loc105)
      } loc(#loc206)
    } loc(#loc195)
    cir.return loc(#loc54)
  } loc(#loc193)
  cir.global "private" internal dsolocal @CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_45_goodG2BData = #cir.ptr<null> : !cir.ptr<!ty__twoIntsStruct> {alignment = 8 : i64} loc(#loc213)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["data"] {alignment = 8 : i64} loc(#loc215)
    %1 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc216)
    %2 = cir.const #cir.int<50> : !s32i loc(#loc113)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc113)
    %4 = cir.const #cir.int<8> : !u64i loc(#loc113)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc113)
    %6 = cir.alloca !u8i, !cir.ptr<!u8i>, %5 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc113)
    %7 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc217)
    %8 = cir.cast(bitcast, %6 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc113)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!ty__twoIntsStruct> loc(#loc113)
    cir.store %9, %1 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc216)
    %10 = cir.const #cir.int<100> : !s32i loc(#loc115)
    %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc115)
    %12 = cir.const #cir.int<8> : !u64i loc(#loc115)
    %13 = cir.binop(mul, %11, %12) : !u64i loc(#loc115)
    %14 = cir.alloca !u8i, !cir.ptr<!u8i>, %13 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc115)
    %15 = cir.cast(bitcast, %14 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc115)
    %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!ty__twoIntsStruct> loc(#loc115)
    cir.store %16, %7 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc217)
    %17 = cir.load %7 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc116)
    cir.store %17, %0 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc218)
    %18 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc118)
    %19 = cir.get_global @CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_45_goodG2BData : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc213)
    cir.store %18, %19 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc219)
    %20 = cir.get_global @goodG2BSink : !cir.ptr<!cir.func<!void ()>> loc(#loc220)
    cir.call %20() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc120)
    cir.return loc(#loc109)
  } loc(#loc214)
  cir.func no_proto internal private @goodG2BSink() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["data", init] {alignment = 8 : i64} loc(#loc222)
    %1 = cir.get_global @CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_45_goodG2BData : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc213)
    %2 = cir.load %1 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc125)
    cir.store %2, %0 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc222)
    cir.scope {
      %3 = cir.alloca !cir.array<!ty__twoIntsStruct x 100>, !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>, ["source"] {alignment = 16 : i64} loc(#loc224)
      cir.scope {
        %4 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc226)
        cir.scope {
          %5 = cir.const #cir.int<0> : !s32i loc(#loc136)
          %6 = cir.cast(integral, %5 : !s32i), !u64i loc(#loc136)
          cir.store %6, %4 : !u64i, !cir.ptr<!u64i> loc(#loc228)
          cir.for : cond {
            %7 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc138)
            %8 = cir.const #cir.int<100> : !s32i loc(#loc139)
            %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc139)
            %10 = cir.cmp(lt, %7, %9) : !u64i, !cir.bool loc(#loc229)
            cir.condition(%10) loc(#loc140)
          } body {
            cir.scope {
              %7 = cir.const #cir.int<0> : !s32i loc(#loc142)
              %8 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc143)
              %9 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc144)
              %10 = cir.ptr_stride(%9 : !cir.ptr<!ty__twoIntsStruct>, %8 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc144)
              %11 = cir.get_member %10[0] {name = "intOne"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc76)
              cir.store %7, %11 : !s32i, !cir.ptr<!s32i> loc(#loc231)
              %12 = cir.const #cir.int<0> : !s32i loc(#loc145)
              %13 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc146)
              %14 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc147)
              %15 = cir.ptr_stride(%14 : !cir.ptr<!ty__twoIntsStruct>, %13 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc147)
              %16 = cir.get_member %15[1] {name = "intTwo"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc80)
              cir.store %12, %16 : !s32i, !cir.ptr<!s32i> loc(#loc232)
            } loc(#loc230)
            cir.yield loc(#loc135)
          } step {
            %7 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc148)
            %8 = cir.unary(inc, %7) : !u64i, !u64i loc(#loc149)
            cir.store %8, %4 : !u64i, !cir.ptr<!u64i> loc(#loc233)
            cir.yield loc(#loc227)
          } loc(#loc227)
        } loc(#loc227)
      } loc(#loc225)
      cir.scope {
        %4 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc235)
        cir.scope {
          %8 = cir.const #cir.int<0> : !s32i loc(#loc156)
          %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc156)
          cir.store %9, %4 : !u64i, !cir.ptr<!u64i> loc(#loc237)
          cir.for : cond {
            %10 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc158)
            %11 = cir.const #cir.int<100> : !s32i loc(#loc159)
            %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc159)
            %13 = cir.cmp(lt, %10, %12) : !u64i, !cir.bool loc(#loc238)
            cir.condition(%13) loc(#loc160)
          } body {
            cir.scope {
              %10 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc162)
              %11 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc163)
              %12 = cir.ptr_stride(%10 : !cir.ptr<!ty__twoIntsStruct>, %11 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc164)
              %13 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc165)
              %14 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc166)
              %15 = cir.ptr_stride(%14 : !cir.ptr<!ty__twoIntsStruct>, %13 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc166)
              cir.copy %15 to %12 : !cir.ptr<!ty__twoIntsStruct> loc(#loc164)
            } loc(#loc239)
            cir.yield loc(#loc155)
          } step {
            %10 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc167)
            %11 = cir.unary(inc, %10) : !u64i, !u64i loc(#loc168)
            cir.store %11, %4 : !u64i, !cir.ptr<!u64i> loc(#loc240)
            cir.yield loc(#loc236)
          } loc(#loc236)
        } loc(#loc236)
        %5 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc169)
        %6 = cir.const #cir.int<0> : !s32i loc(#loc170)
        %7 = cir.ptr_stride(%5 : !cir.ptr<!ty__twoIntsStruct>, %6 : !s32i), !cir.ptr<!ty__twoIntsStruct> loc(#loc171)
        cir.call @printStructLine(%7) : (!cir.ptr<!ty__twoIntsStruct>) -> () loc(#loc172)
      } loc(#loc234)
    } loc(#loc223)
    cir.return loc(#loc123)
  } loc(#loc221)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s04/CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_45.c":0:0)
#loc1 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_45.c":19:1)
#loc2 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_45.c":19:24)
#loc3 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_45.c":50:1)
#loc4 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_45.c":60:1)
#loc5 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_45.c":52:5)
#loc6 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_45.c":52:21)
#loc7 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_45.c":53:5)
#loc8 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_45.c":53:54)
#loc9 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_45.c":54:5)
#loc10 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_45.c":54:55)
#loc11 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_45.c":57:12)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_45.c":57:5)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_45.c":58:80)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_45.c":58:5)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_45.c":59:5)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_45.c":59:13)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_45.c":104:1)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_45.c":107:1)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_45.c":106:5)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_45.c":106:13)
#loc21 = loc("/usr/include/stdlib.h":575:1)
#loc22 = loc("/usr/include/stdlib.h":575:41)
#loc23 = loc("/usr/include/time.h":76:1)
#loc24 = loc("/usr/include/time.h":76:38)
#loc25 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc26 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_45.c":123:15)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_45.c":125:15)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_45.c":128:15)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_45.c":130:15)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_45.c":118:1)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_45.c":133:1)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_45.c":119:1)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_45.c":121:27)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_45.c":121:22)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_45.c":121:5)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_45.c":123:5)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_45.c":124:5)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_45.c":124:75)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_45.c":125:5)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_45.c":128:5)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_45.c":129:5)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_45.c":129:74)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_45.c":130:5)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_45.c":132:12)
#loc50 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_45.c":132:5)
#loc51 = loc("../../../testcasesupport/std_testcase_io.h":40:1)
#loc52 = loc("../../../testcasesupport/std_testcase_io.h":40:63)
#loc53 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_45.c":24:1)
#loc54 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_45.c":48:1)
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_45.c":26:5)
#loc56 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_45.c":26:28)
#loc57 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_45.c":27:5)
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_45.c":47:5)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_45.c":28:9)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_45.c":28:33)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_45.c":29:9)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_45.c":37:9)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_45.c":30:13)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_45.c":30:20)
#loc65 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_45.c":32:13)
#loc66 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_45.c":36:13)
#loc67 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_45.c":32:22)
#loc68 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_45.c":32:18)
#loc69 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_45.c":32:25)
#loc70 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_45.c":32:29)
#loc71 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_45.c":32:27)
#loc72 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_45.c":33:13)
#loc73 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_45.c":34:36)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_45.c":34:24)
#loc75 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_45.c":34:17)
#loc76 = loc("../../../testcasesupport/std_testcase.h":98:9)
#loc77 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_45.c":35:36)
#loc78 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_45.c":35:24)
#loc79 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_45.c":35:17)
#loc80 = loc("../../../testcasesupport/std_testcase.h":99:9)
#loc81 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_45.c":32:35)
#loc82 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_45.c":32:34)
#loc83 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_45.c":38:9)
#loc84 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_45.c":46:9)
#loc85 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_45.c":39:13)
#loc86 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_45.c":39:20)
#loc87 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_45.c":41:13)
#loc88 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_45.c":44:13)
#loc89 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_45.c":41:22)
#loc90 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_45.c":41:18)
#loc91 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_45.c":41:25)
#loc92 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_45.c":41:29)
#loc93 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_45.c":41:27)
#loc94 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_45.c":42:13)
#loc95 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_45.c":43:17)
#loc96 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_45.c":43:22)
#loc97 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_45.c":43:23)
#loc98 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_45.c":43:34)
#loc99 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_45.c":43:27)
#loc100 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_45.c":41:35)
#loc101 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_45.c":41:34)
#loc102 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_45.c":45:30)
#loc103 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_45.c":45:35)
#loc104 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_45.c":45:36)
#loc105 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_45.c":45:13)
#loc106 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_45.c":20:1)
#loc107 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_45.c":20:24)
#loc108 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_45.c":93:1)
#loc109 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_45.c":102:1)
#loc110 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_45.c":95:5)
#loc111 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_45.c":95:21)
#loc112 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_45.c":96:5)
#loc113 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_45.c":96:54)
#loc114 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_45.c":97:5)
#loc115 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_45.c":97:55)
#loc116 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_45.c":99:12)
#loc117 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_45.c":99:5)
#loc118 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_45.c":100:84)
#loc119 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_45.c":100:5)
#loc120 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_45.c":101:5)
#loc121 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_45.c":101:17)
#loc122 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_45.c":67:1)
#loc123 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_45.c":91:1)
#loc124 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_45.c":69:5)
#loc125 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_45.c":69:28)
#loc126 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_45.c":70:5)
#loc127 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_45.c":90:5)
#loc128 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_45.c":71:9)
#loc129 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_45.c":71:33)
#loc130 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_45.c":72:9)
#loc131 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_45.c":80:9)
#loc132 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_45.c":73:13)
#loc133 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_45.c":73:20)
#loc134 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_45.c":75:13)
#loc135 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_45.c":79:13)
#loc136 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_45.c":75:22)
#loc137 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_45.c":75:18)
#loc138 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_45.c":75:25)
#loc139 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_45.c":75:29)
#loc140 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_45.c":75:27)
#loc141 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_45.c":76:13)
#loc142 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_45.c":77:36)
#loc143 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_45.c":77:24)
#loc144 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_45.c":77:17)
#loc145 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_45.c":78:36)
#loc146 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_45.c":78:24)
#loc147 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_45.c":78:17)
#loc148 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_45.c":75:35)
#loc149 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_45.c":75:34)
#loc150 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_45.c":81:9)
#loc151 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_45.c":89:9)
#loc152 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_45.c":82:13)
#loc153 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_45.c":82:20)
#loc154 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_45.c":84:13)
#loc155 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_45.c":87:13)
#loc156 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_45.c":84:22)
#loc157 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_45.c":84:18)
#loc158 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_45.c":84:25)
#loc159 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_45.c":84:29)
#loc160 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_45.c":84:27)
#loc161 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_45.c":85:13)
#loc162 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_45.c":86:17)
#loc163 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_45.c":86:22)
#loc164 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_45.c":86:23)
#loc165 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_45.c":86:34)
#loc166 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_45.c":86:27)
#loc167 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_45.c":84:35)
#loc168 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_45.c":84:34)
#loc169 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_45.c":88:30)
#loc170 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_45.c":88:35)
#loc171 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_45.c":88:36)
#loc172 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_45.c":88:13)
#loc173 = loc(fused[#loc1, #loc2])
#loc174 = loc(fused[#loc3, #loc4])
#loc175 = loc(fused[#loc5, #loc6])
#loc176 = loc(fused[#loc7, #loc8])
#loc177 = loc(fused[#loc9, #loc10])
#loc178 = loc(fused[#loc12, #loc11])
#loc179 = loc(fused[#loc14, #loc13])
#loc180 = loc(fused[#loc15, #loc16])
#loc181 = loc(fused[#loc17, #loc18])
#loc182 = loc(fused[#loc19, #loc20])
#loc183 = loc(fused[#loc21, #loc22])
#loc184 = loc(fused[#loc23, #loc24])
#loc185 = loc(fused[#loc25, #loc26])
#loc186 = loc(fused[#loc31, #loc32])
#loc189 = loc(fused[#loc42, #loc43])
#loc190 = loc(fused[#loc46, #loc47])
#loc191 = loc(fused[#loc50, #loc49])
#loc192 = loc(fused[#loc51, #loc52])
#loc193 = loc(fused[#loc53, #loc54])
#loc194 = loc(fused[#loc55, #loc56])
#loc195 = loc(fused[#loc57, #loc58])
#loc196 = loc(fused[#loc59, #loc60])
#loc197 = loc(fused[#loc61, #loc62])
#loc198 = loc(fused[#loc63, #loc64])
#loc199 = loc(fused[#loc65, #loc66])
#loc200 = loc(fused[#loc68, #loc67])
#loc201 = loc(fused[#loc69, #loc70])
#loc202 = loc(fused[#loc72, #loc66])
#loc203 = loc(fused[#loc75, #loc73])
#loc204 = loc(fused[#loc79, #loc77])
#loc205 = loc(fused[#loc82, #loc81])
#loc206 = loc(fused[#loc83, #loc84])
#loc207 = loc(fused[#loc85, #loc86])
#loc208 = loc(fused[#loc87, #loc88])
#loc209 = loc(fused[#loc90, #loc89])
#loc210 = loc(fused[#loc91, #loc92])
#loc211 = loc(fused[#loc94, #loc88])
#loc212 = loc(fused[#loc101, #loc100])
#loc213 = loc(fused[#loc106, #loc107])
#loc214 = loc(fused[#loc108, #loc109])
#loc215 = loc(fused[#loc110, #loc111])
#loc216 = loc(fused[#loc112, #loc113])
#loc217 = loc(fused[#loc114, #loc115])
#loc218 = loc(fused[#loc117, #loc116])
#loc219 = loc(fused[#loc119, #loc118])
#loc220 = loc(fused[#loc120, #loc121])
#loc221 = loc(fused[#loc122, #loc123])
#loc222 = loc(fused[#loc124, #loc125])
#loc223 = loc(fused[#loc126, #loc127])
#loc224 = loc(fused[#loc128, #loc129])
#loc225 = loc(fused[#loc130, #loc131])
#loc226 = loc(fused[#loc132, #loc133])
#loc227 = loc(fused[#loc134, #loc135])
#loc228 = loc(fused[#loc137, #loc136])
#loc229 = loc(fused[#loc138, #loc139])
#loc230 = loc(fused[#loc141, #loc135])
#loc231 = loc(fused[#loc144, #loc142])
#loc232 = loc(fused[#loc147, #loc145])
#loc233 = loc(fused[#loc149, #loc148])
#loc234 = loc(fused[#loc150, #loc151])
#loc235 = loc(fused[#loc152, #loc153])
#loc236 = loc(fused[#loc154, #loc155])
#loc237 = loc(fused[#loc157, #loc156])
#loc238 = loc(fused[#loc158, #loc159])
#loc239 = loc(fused[#loc161, #loc155])
#loc240 = loc(fused[#loc168, #loc167])
