!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.record<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.record<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.record<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc12 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_21.c":25:21)
#loc13 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_21.c":25:26)
#loc57 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_21.c":58:26)
#loc58 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_21.c":58:31)
#loc104 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_21.c":94:26)
#loc105 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_21.c":94:31)
#loc149 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_21.c":125:25)
#loc150 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_21.c":125:30)
#loc184 = loc(fused[#loc12, #loc13])
#loc202 = loc(fused[#loc57, #loc58])
#loc219 = loc(fused[#loc104, #loc105])
#loc236 = loc(fused[#loc149, #loc150])
!ty__IO_FILE = !cir.record<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/workspaces/juliet-c/testcases/CWE191_Integer_Underflow/s01/CWE191_Integer_Underflow__char_fscanf_multiply_21.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @__isoc99_fscanf(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i loc(#loc179)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc180)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"%c\00" : !cir.array<!s8i x 3>> : !cir.array<!s8i x 3> {alignment = 1 : i64} loc(#loc5)
  cir.global "private" internal dsolocal @badStatic = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc181)
  cir.func private @printHexCharLine(!s8i) loc(#loc182)
  cir.func internal private @badSink(%arg0: !s8i loc(fused[#loc12, #loc13])) extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data", init] {alignment = 1 : i64} loc(#loc184)
    cir.store %arg0, %0 : !s8i, !cir.ptr<!s8i> loc(#loc14)
    cir.scope {
      %1 = cir.get_global @badStatic : !cir.ptr<!s32i> loc(#loc181)
      %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc17)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc17)
      cir.if %3 {
        cir.scope {
          %4 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc21)
          %5 = cir.cast(integral, %4 : !s8i), !s32i loc(#loc21)
          %6 = cir.const #cir.int<0> : !s32i loc(#loc22)
          %7 = cir.cmp(lt, %5, %6) : !s32i, !cir.bool loc(#loc188)
          cir.if %7 {
            %8 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc190)
            %9 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc26)
            %10 = cir.cast(integral, %9 : !s8i), !s32i loc(#loc26)
            %11 = cir.const #cir.int<2> : !s32i loc(#loc25)
            %12 = cir.binop(mul, %10, %11) nsw : !s32i loc(#loc26)
            %13 = cir.cast(integral, %12 : !s32i), !s8i loc(#loc26)
            cir.store %13, %8 : !s8i, !cir.ptr<!s8i> loc(#loc190)
            %14 = cir.load %8 : !cir.ptr<!s8i>, !s8i loc(#loc27)
            cir.call @printHexCharLine(%14) : (!s8i) -> () loc(#loc28)
          } loc(#loc189)
        } loc(#loc187)
      } loc(#loc186)
    } loc(#loc185)
    cir.return loc(#loc11)
  } loc(#loc183)
  cir.func no_proto @CWE191_Integer_Underflow__char_fscanf_multiply_21_bad() extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc192)
    %1 = cir.const #cir.int<32> : !s32i loc(#loc33)
    %2 = cir.cast(integral, %1 : !s32i), !s8i loc(#loc33)
    cir.store %2, %0 : !s8i, !cir.ptr<!s8i> loc(#loc193)
    %3 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc35)
    %4 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc180)
    %5 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc36)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc5)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc5)
    %8 = cir.call @__isoc99_fscanf(%5, %7, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i loc(#loc35)
    %9 = cir.const #cir.int<1> : !s32i loc(#loc37)
    %10 = cir.get_global @badStatic : !cir.ptr<!s32i> loc(#loc181)
    cir.store %9, %10 : !s32i, !cir.ptr<!s32i> loc(#loc194)
    %11 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc39)
    cir.call @badSink(%11) : (!s8i) -> () loc(#loc40)
    cir.return loc(#loc30)
  } loc(#loc191)
  cir.func no_proto @CWE191_Integer_Underflow__char_fscanf_multiply_21_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<()>> loc(#loc196)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc43)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<()>> loc(#loc197)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc45)
    %2 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc198)
    cir.call %2() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc47)
    cir.return loc(#loc42)
  } loc(#loc195)
  cir.global "private" internal dsolocal @goodB2G1Static = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc199)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc200)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc53)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"data value is too small to perform multiplication.\00" : !cir.array<!s8i x 51>> : !cir.array<!s8i x 51> {alignment = 1 : i64} loc(#loc54)
  cir.func internal private @goodB2G1Sink(%arg0: !s8i loc(fused[#loc57, #loc58])) extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data", init] {alignment = 1 : i64} loc(#loc202)
    cir.store %arg0, %0 : !s8i, !cir.ptr<!s8i> loc(#loc59)
    cir.scope {
      %1 = cir.get_global @goodB2G1Static : !cir.ptr<!s32i> loc(#loc199)
      %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc62)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc62)
      cir.if %3 {
        %4 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc53)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc53)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc66)
      } else {
        cir.scope {
          %4 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc69)
          %5 = cir.cast(integral, %4 : !s8i), !s32i loc(#loc69)
          %6 = cir.const #cir.int<0> : !s32i loc(#loc70)
          %7 = cir.cmp(lt, %5, %6) : !s32i, !cir.bool loc(#loc206)
          cir.if %7 {
            cir.scope {
              %8 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc74)
              %9 = cir.cast(integral, %8 : !s8i), !s32i loc(#loc74)
              %10 = cir.const #cir.int<127> : !s32i loc(#loc75)
              %11 = cir.unary(minus, %10) nsw : !s32i, !s32i loc(#loc75)
              %12 = cir.const #cir.int<1> : !s32i loc(#loc75)
              %13 = cir.binop(sub, %11, %12) nsw : !s32i loc(#loc75)
              %14 = cir.const #cir.int<2> : !s32i loc(#loc76)
              %15 = cir.binop(div, %13, %14) : !s32i loc(#loc209)
              %16 = cir.cmp(gt, %9, %15) : !s32i, !cir.bool loc(#loc210)
              cir.if %16 {
                %17 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc212)
                %18 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc83)
                %19 = cir.cast(integral, %18 : !s8i), !s32i loc(#loc83)
                %20 = cir.const #cir.int<2> : !s32i loc(#loc82)
                %21 = cir.binop(mul, %19, %20) nsw : !s32i loc(#loc83)
                %22 = cir.cast(integral, %21 : !s32i), !s8i loc(#loc83)
                cir.store %22, %17 : !s8i, !cir.ptr<!s8i> loc(#loc212)
                %23 = cir.load %17 : !cir.ptr<!s8i>, !s8i loc(#loc84)
                cir.call @printHexCharLine(%23) : (!s8i) -> () loc(#loc85)
              } else {
                %17 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 51>> loc(#loc54)
                %18 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s8i x 51>>), !cir.ptr<!s8i> loc(#loc54)
                cir.call @printLine(%18) : (!cir.ptr<!s8i>) -> () loc(#loc86)
              } loc(#loc211)
            } loc(#loc208)
          } loc(#loc207)
        } loc(#loc205)
      } loc(#loc204)
    } loc(#loc203)
    cir.return loc(#loc56)
  } loc(#loc201)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc214)
    %1 = cir.const #cir.int<32> : !s32i loc(#loc91)
    %2 = cir.cast(integral, %1 : !s32i), !s8i loc(#loc91)
    cir.store %2, %0 : !s8i, !cir.ptr<!s8i> loc(#loc215)
    %3 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc93)
    %4 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc180)
    %5 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc94)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc95)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc95)
    %8 = cir.call @__isoc99_fscanf(%5, %7, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i loc(#loc93)
    %9 = cir.const #cir.int<0> : !s32i loc(#loc96)
    %10 = cir.get_global @goodB2G1Static : !cir.ptr<!s32i> loc(#loc199)
    cir.store %9, %10 : !s32i, !cir.ptr<!s32i> loc(#loc216)
    %11 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc98)
    cir.call @goodB2G1Sink(%11) : (!s8i) -> () loc(#loc99)
    cir.return loc(#loc88)
  } loc(#loc213)
  cir.global "private" internal dsolocal @goodB2G2Static = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc217)
  cir.func internal private @goodB2G2Sink(%arg0: !s8i loc(fused[#loc104, #loc105])) extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data", init] {alignment = 1 : i64} loc(#loc219)
    cir.store %arg0, %0 : !s8i, !cir.ptr<!s8i> loc(#loc106)
    cir.scope {
      %1 = cir.get_global @goodB2G2Static : !cir.ptr<!s32i> loc(#loc217)
      %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc109)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc109)
      cir.if %3 {
        cir.scope {
          %4 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc113)
          %5 = cir.cast(integral, %4 : !s8i), !s32i loc(#loc113)
          %6 = cir.const #cir.int<0> : !s32i loc(#loc114)
          %7 = cir.cmp(lt, %5, %6) : !s32i, !cir.bool loc(#loc223)
          cir.if %7 {
            cir.scope {
              %8 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc118)
              %9 = cir.cast(integral, %8 : !s8i), !s32i loc(#loc118)
              %10 = cir.const #cir.int<127> : !s32i loc(#loc119)
              %11 = cir.unary(minus, %10) nsw : !s32i, !s32i loc(#loc119)
              %12 = cir.const #cir.int<1> : !s32i loc(#loc119)
              %13 = cir.binop(sub, %11, %12) nsw : !s32i loc(#loc119)
              %14 = cir.const #cir.int<2> : !s32i loc(#loc120)
              %15 = cir.binop(div, %13, %14) : !s32i loc(#loc226)
              %16 = cir.cmp(gt, %9, %15) : !s32i, !cir.bool loc(#loc227)
              cir.if %16 {
                %17 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc229)
                %18 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc127)
                %19 = cir.cast(integral, %18 : !s8i), !s32i loc(#loc127)
                %20 = cir.const #cir.int<2> : !s32i loc(#loc126)
                %21 = cir.binop(mul, %19, %20) nsw : !s32i loc(#loc127)
                %22 = cir.cast(integral, %21 : !s32i), !s8i loc(#loc127)
                cir.store %22, %17 : !s8i, !cir.ptr<!s8i> loc(#loc229)
                %23 = cir.load %17 : !cir.ptr<!s8i>, !s8i loc(#loc128)
                cir.call @printHexCharLine(%23) : (!s8i) -> () loc(#loc129)
              } else {
                %17 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 51>> loc(#loc130)
                %18 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s8i x 51>>), !cir.ptr<!s8i> loc(#loc130)
                cir.call @printLine(%18) : (!cir.ptr<!s8i>) -> () loc(#loc131)
              } loc(#loc228)
            } loc(#loc225)
          } loc(#loc224)
        } loc(#loc222)
      } loc(#loc221)
    } loc(#loc220)
    cir.return loc(#loc103)
  } loc(#loc218)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc231)
    %1 = cir.const #cir.int<32> : !s32i loc(#loc136)
    %2 = cir.cast(integral, %1 : !s32i), !s8i loc(#loc136)
    cir.store %2, %0 : !s8i, !cir.ptr<!s8i> loc(#loc232)
    %3 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc138)
    %4 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc180)
    %5 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc139)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc140)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc140)
    %8 = cir.call @__isoc99_fscanf(%5, %7, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i loc(#loc138)
    %9 = cir.const #cir.int<1> : !s32i loc(#loc141)
    %10 = cir.get_global @goodB2G2Static : !cir.ptr<!s32i> loc(#loc217)
    cir.store %9, %10 : !s32i, !cir.ptr<!s32i> loc(#loc233)
    %11 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc143)
    cir.call @goodB2G2Sink(%11) : (!s8i) -> () loc(#loc144)
    cir.return loc(#loc133)
  } loc(#loc230)
  cir.global "private" internal dsolocal @goodG2BStatic = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc234)
  cir.func internal private @goodG2BSink(%arg0: !s8i loc(fused[#loc149, #loc150])) extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data", init] {alignment = 1 : i64} loc(#loc236)
    cir.store %arg0, %0 : !s8i, !cir.ptr<!s8i> loc(#loc151)
    cir.scope {
      %1 = cir.get_global @goodG2BStatic : !cir.ptr<!s32i> loc(#loc234)
      %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc154)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc154)
      cir.if %3 {
        cir.scope {
          %4 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc158)
          %5 = cir.cast(integral, %4 : !s8i), !s32i loc(#loc158)
          %6 = cir.const #cir.int<0> : !s32i loc(#loc159)
          %7 = cir.cmp(lt, %5, %6) : !s32i, !cir.bool loc(#loc240)
          cir.if %7 {
            %8 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc242)
            %9 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc163)
            %10 = cir.cast(integral, %9 : !s8i), !s32i loc(#loc163)
            %11 = cir.const #cir.int<2> : !s32i loc(#loc162)
            %12 = cir.binop(mul, %10, %11) nsw : !s32i loc(#loc163)
            %13 = cir.cast(integral, %12 : !s32i), !s8i loc(#loc163)
            cir.store %13, %8 : !s8i, !cir.ptr<!s8i> loc(#loc242)
            %14 = cir.load %8 : !cir.ptr<!s8i>, !s8i loc(#loc164)
            cir.call @printHexCharLine(%14) : (!s8i) -> () loc(#loc165)
          } loc(#loc241)
        } loc(#loc239)
      } loc(#loc238)
    } loc(#loc237)
    cir.return loc(#loc148)
  } loc(#loc235)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc244)
    %1 = cir.const #cir.int<32> : !s32i loc(#loc170)
    %2 = cir.cast(integral, %1 : !s32i), !s8i loc(#loc170)
    cir.store %2, %0 : !s8i, !cir.ptr<!s8i> loc(#loc245)
    %3 = cir.const #cir.int<2> : !s32i loc(#loc172)
    %4 = cir.unary(minus, %3) nsw : !s32i, !s32i loc(#loc173)
    %5 = cir.cast(integral, %4 : !s32i), !s8i loc(#loc173)
    cir.store %5, %0 : !s8i, !cir.ptr<!s8i> loc(#loc246)
    %6 = cir.const #cir.int<1> : !s32i loc(#loc175)
    %7 = cir.get_global @goodG2BStatic : !cir.ptr<!s32i> loc(#loc234)
    cir.store %6, %7 : !s32i, !cir.ptr<!s32i> loc(#loc247)
    %8 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc177)
    cir.call @goodG2BSink(%8) : (!s8i) -> () loc(#loc178)
    cir.return loc(#loc167)
  } loc(#loc243)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE191_Integer_Underflow/s01/CWE191_Integer_Underflow__char_fscanf_multiply_21.c":0:0)
#loc1 = loc("/usr/include/stdio.h":463:1)
#loc2 = loc("/usr/include/stdio.h":465:33)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_21.c":43:20)
#loc6 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_21.c":23:1)
#loc7 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_21.c":23:24)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":30:1)
#loc9 = loc("../../../testcasesupport/std_testcase_io.h":30:35)
#loc10 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_21.c":25:1)
#loc11 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_21.c":36:1)
#loc14 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_21.c":26:1)
#loc15 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_21.c":27:5)
#loc16 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_21.c":35:5)
#loc17 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_21.c":27:8)
#loc18 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_21.c":28:5)
#loc19 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_21.c":29:9)
#loc20 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_21.c":34:9)
#loc21 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_21.c":29:12)
#loc22 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_21.c":29:19)
#loc23 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_21.c":30:9)
#loc24 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_21.c":32:13)
#loc25 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_21.c":32:34)
#loc26 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_21.c":32:27)
#loc27 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_21.c":33:30)
#loc28 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_21.c":33:13)
#loc29 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_21.c":38:1)
#loc30 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_21.c":46:1)
#loc31 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_21.c":40:5)
#loc32 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_21.c":40:10)
#loc33 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_21.c":41:12)
#loc34 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_21.c":41:5)
#loc35 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_21.c":43:5)
#loc36 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_21.c":43:13)
#loc37 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_21.c":44:17)
#loc38 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_21.c":44:5)
#loc39 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_21.c":45:13)
#loc40 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_21.c":45:5)
#loc41 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_21.c":148:1)
#loc42 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_21.c":153:1)
#loc43 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_21.c":150:5)
#loc44 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_21.c":150:14)
#loc45 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_21.c":151:5)
#loc46 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_21.c":151:14)
#loc47 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_21.c":152:5)
#loc48 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_21.c":152:13)
#loc49 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_21.c":53:1)
#loc50 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_21.c":53:29)
#loc51 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc52 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc53 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_21.c":63:19)
#loc54 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_21.c":77:27)
#loc55 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_21.c":58:1)
#loc56 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_21.c":81:1)
#loc59 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_21.c":59:1)
#loc60 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_21.c":60:5)
#loc61 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_21.c":80:5)
#loc62 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_21.c":60:8)
#loc63 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_21.c":61:5)
#loc64 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_21.c":64:5)
#loc65 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_21.c":66:5)
#loc66 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_21.c":63:9)
#loc67 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_21.c":67:9)
#loc68 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_21.c":79:9)
#loc69 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_21.c":67:12)
#loc70 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_21.c":67:19)
#loc71 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_21.c":68:9)
#loc72 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_21.c":70:13)
#loc73 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_21.c":78:13)
#loc74 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_21.c":70:17)
#loc75 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_21.c":70:25)
#loc76 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_21.c":70:34)
#loc77 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_21.c":70:35)
#loc78 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_21.c":71:13)
#loc79 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_21.c":74:13)
#loc80 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_21.c":76:13)
#loc81 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_21.c":72:17)
#loc82 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_21.c":72:38)
#loc83 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_21.c":72:31)
#loc84 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_21.c":73:34)
#loc85 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_21.c":73:17)
#loc86 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_21.c":77:17)
#loc87 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_21.c":83:1)
#loc88 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_21.c":91:1)
#loc89 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_21.c":85:5)
#loc90 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_21.c":85:10)
#loc91 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_21.c":86:12)
#loc92 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_21.c":86:5)
#loc93 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_21.c":88:5)
#loc94 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_21.c":88:13)
#loc95 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_21.c":88:20)
#loc96 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_21.c":89:22)
#loc97 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_21.c":89:5)
#loc98 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_21.c":90:18)
#loc99 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_21.c":90:5)
#loc100 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_21.c":54:1)
#loc101 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_21.c":54:29)
#loc102 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_21.c":94:1)
#loc103 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_21.c":112:1)
#loc106 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_21.c":95:1)
#loc107 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_21.c":96:5)
#loc108 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_21.c":111:5)
#loc109 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_21.c":96:8)
#loc110 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_21.c":97:5)
#loc111 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_21.c":98:9)
#loc112 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_21.c":110:9)
#loc113 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_21.c":98:12)
#loc114 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_21.c":98:19)
#loc115 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_21.c":99:9)
#loc116 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_21.c":101:13)
#loc117 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_21.c":109:13)
#loc118 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_21.c":101:17)
#loc119 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_21.c":101:25)
#loc120 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_21.c":101:34)
#loc121 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_21.c":101:35)
#loc122 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_21.c":102:13)
#loc123 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_21.c":105:13)
#loc124 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_21.c":107:13)
#loc125 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_21.c":103:17)
#loc126 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_21.c":103:38)
#loc127 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_21.c":103:31)
#loc128 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_21.c":104:34)
#loc129 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_21.c":104:17)
#loc130 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_21.c":108:27)
#loc131 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_21.c":108:17)
#loc132 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_21.c":114:1)
#loc133 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_21.c":122:1)
#loc134 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_21.c":116:5)
#loc135 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_21.c":116:10)
#loc136 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_21.c":117:12)
#loc137 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_21.c":117:5)
#loc138 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_21.c":119:5)
#loc139 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_21.c":119:13)
#loc140 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_21.c":119:20)
#loc141 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_21.c":120:22)
#loc142 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_21.c":120:5)
#loc143 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_21.c":121:18)
#loc144 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_21.c":121:5)
#loc145 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_21.c":55:1)
#loc146 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_21.c":55:28)
#loc147 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_21.c":125:1)
#loc148 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_21.c":136:1)
#loc151 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_21.c":126:1)
#loc152 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_21.c":127:5)
#loc153 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_21.c":135:5)
#loc154 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_21.c":127:8)
#loc155 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_21.c":128:5)
#loc156 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_21.c":129:9)
#loc157 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_21.c":134:9)
#loc158 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_21.c":129:12)
#loc159 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_21.c":129:19)
#loc160 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_21.c":130:9)
#loc161 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_21.c":132:13)
#loc162 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_21.c":132:34)
#loc163 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_21.c":132:27)
#loc164 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_21.c":133:30)
#loc165 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_21.c":133:13)
#loc166 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_21.c":138:1)
#loc167 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_21.c":146:1)
#loc168 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_21.c":140:5)
#loc169 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_21.c":140:10)
#loc170 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_21.c":141:12)
#loc171 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_21.c":141:5)
#loc172 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_21.c":143:13)
#loc173 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_21.c":143:12)
#loc174 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_21.c":143:5)
#loc175 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_21.c":144:21)
#loc176 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_21.c":144:5)
#loc177 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_21.c":145:17)
#loc178 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_21.c":145:5)
#loc179 = loc(fused[#loc1, #loc2])
#loc180 = loc(fused[#loc3, #loc4])
#loc181 = loc(fused[#loc6, #loc7])
#loc182 = loc(fused[#loc8, #loc9])
#loc183 = loc(fused[#loc10, #loc11])
#loc185 = loc(fused[#loc15, #loc16])
#loc186 = loc(fused[#loc18, #loc16])
#loc187 = loc(fused[#loc19, #loc20])
#loc188 = loc(fused[#loc21, #loc22])
#loc189 = loc(fused[#loc23, #loc20])
#loc190 = loc(fused[#loc24, #loc25])
#loc191 = loc(fused[#loc29, #loc30])
#loc192 = loc(fused[#loc31, #loc32])
#loc193 = loc(fused[#loc34, #loc33])
#loc194 = loc(fused[#loc38, #loc37])
#loc195 = loc(fused[#loc41, #loc42])
#loc196 = loc(fused[#loc43, #loc44])
#loc197 = loc(fused[#loc45, #loc46])
#loc198 = loc(fused[#loc47, #loc48])
#loc199 = loc(fused[#loc49, #loc50])
#loc200 = loc(fused[#loc51, #loc52])
#loc201 = loc(fused[#loc55, #loc56])
#loc203 = loc(fused[#loc60, #loc61])
#loc204 = loc(fused[#loc63, #loc64, #loc65, #loc61])
#loc205 = loc(fused[#loc67, #loc68])
#loc206 = loc(fused[#loc69, #loc70])
#loc207 = loc(fused[#loc71, #loc68])
#loc208 = loc(fused[#loc72, #loc73])
#loc209 = loc(fused[#loc75, #loc76])
#loc210 = loc(fused[#loc74, #loc77])
#loc211 = loc(fused[#loc78, #loc79, #loc80, #loc73])
#loc212 = loc(fused[#loc81, #loc82])
#loc213 = loc(fused[#loc87, #loc88])
#loc214 = loc(fused[#loc89, #loc90])
#loc215 = loc(fused[#loc92, #loc91])
#loc216 = loc(fused[#loc97, #loc96])
#loc217 = loc(fused[#loc100, #loc101])
#loc218 = loc(fused[#loc102, #loc103])
#loc220 = loc(fused[#loc107, #loc108])
#loc221 = loc(fused[#loc110, #loc108])
#loc222 = loc(fused[#loc111, #loc112])
#loc223 = loc(fused[#loc113, #loc114])
#loc224 = loc(fused[#loc115, #loc112])
#loc225 = loc(fused[#loc116, #loc117])
#loc226 = loc(fused[#loc119, #loc120])
#loc227 = loc(fused[#loc118, #loc121])
#loc228 = loc(fused[#loc122, #loc123, #loc124, #loc117])
#loc229 = loc(fused[#loc125, #loc126])
#loc230 = loc(fused[#loc132, #loc133])
#loc231 = loc(fused[#loc134, #loc135])
#loc232 = loc(fused[#loc137, #loc136])
#loc233 = loc(fused[#loc142, #loc141])
#loc234 = loc(fused[#loc145, #loc146])
#loc235 = loc(fused[#loc147, #loc148])
#loc237 = loc(fused[#loc152, #loc153])
#loc238 = loc(fused[#loc155, #loc153])
#loc239 = loc(fused[#loc156, #loc157])
#loc240 = loc(fused[#loc158, #loc159])
#loc241 = loc(fused[#loc160, #loc157])
#loc242 = loc(fused[#loc161, #loc162])
#loc243 = loc(fused[#loc166, #loc167])
#loc244 = loc(fused[#loc168, #loc169])
#loc245 = loc(fused[#loc171, #loc170])
#loc246 = loc(fused[#loc174, #loc172])
#loc247 = loc(fused[#loc176, #loc175])
