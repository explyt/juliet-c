!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc42 = loc("CWE190_Integer_Overflow__int64_t_rand_square_18.c":102:10)
#loc43 = loc("CWE190_Integer_Overflow__int64_t_rand_square_18.c":102:14)
#loc44 = loc("CWE190_Integer_Overflow__int64_t_rand_square_18.c":102:20)
#loc45 = loc("CWE190_Integer_Overflow__int64_t_rand_square_18.c":102:32)
#loc129 = loc(fused[#loc42, #loc43])
#loc130 = loc(fused[#loc44, #loc45])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int64_t_rand_square_18.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc113)
  cir.func private @printLongLongLine(!s64i) loc(#loc114)
  cir.func no_proto @CWE190_Integer_Overflow__int64_t_rand_square_18_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc116)
    %1 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc117)
    %2 = cir.const #cir.int<0> : !s64i loc(#loc11)
    cir.store %2, %0 : !s64i, !cir.ptr<!s64i> loc(#loc118)
    cir.goto "source" loc(#loc119)
  ^bb1:  // no predecessors
    cir.label "source" loc(#loc15)
    %3 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc16)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc16)
    %5 = cir.binop(and, %3, %4) : !s32i loc(#loc16)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc16)
    %7 = cir.ternary(%6, true {
      %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc16)
      %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc16)
      %15 = cir.const #cir.int<60> : !s32i loc(#loc16)
      %16 = cir.shift(left, %14 : !u64i, %15 : !s32i) -> !u64i loc(#loc16)
      %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc16)
      %18 = cir.cast(integral, %17 : !s32i), !u64i loc(#loc16)
      %19 = cir.const #cir.int<45> : !s32i loc(#loc16)
      %20 = cir.shift(left, %18 : !u64i, %19 : !s32i) -> !u64i loc(#loc16)
      %21 = cir.binop(xor, %16, %20) : !u64i loc(#loc16)
      %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc16)
      %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc16)
      %24 = cir.const #cir.int<30> : !s32i loc(#loc16)
      %25 = cir.shift(left, %23 : !u64i, %24 : !s32i) -> !u64i loc(#loc16)
      %26 = cir.binop(xor, %21, %25) : !u64i loc(#loc16)
      %27 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc16)
      %28 = cir.cast(integral, %27 : !s32i), !u64i loc(#loc16)
      %29 = cir.const #cir.int<15> : !s32i loc(#loc16)
      %30 = cir.shift(left, %28 : !u64i, %29 : !s32i) -> !u64i loc(#loc16)
      %31 = cir.binop(xor, %26, %30) : !u64i loc(#loc16)
      %32 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc16)
      %33 = cir.cast(integral, %32 : !s32i), !u64i loc(#loc16)
      %34 = cir.binop(xor, %31, %33) : !u64i loc(#loc16)
      cir.yield %34 : !u64i loc(#loc16)
    }, false {
      %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc16)
      %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc16)
      %15 = cir.const #cir.int<60> : !s32i loc(#loc16)
      %16 = cir.shift(left, %14 : !u64i, %15 : !s32i) -> !u64i loc(#loc16)
      %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc16)
      %18 = cir.cast(integral, %17 : !s32i), !u64i loc(#loc16)
      %19 = cir.const #cir.int<45> : !s32i loc(#loc16)
      %20 = cir.shift(left, %18 : !u64i, %19 : !s32i) -> !u64i loc(#loc16)
      %21 = cir.binop(xor, %16, %20) : !u64i loc(#loc16)
      %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc16)
      %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc16)
      %24 = cir.const #cir.int<30> : !s32i loc(#loc16)
      %25 = cir.shift(left, %23 : !u64i, %24 : !s32i) -> !u64i loc(#loc16)
      %26 = cir.binop(xor, %21, %25) : !u64i loc(#loc16)
      %27 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc16)
      %28 = cir.cast(integral, %27 : !s32i), !u64i loc(#loc16)
      %29 = cir.const #cir.int<15> : !s32i loc(#loc16)
      %30 = cir.shift(left, %28 : !u64i, %29 : !s32i) -> !u64i loc(#loc16)
      %31 = cir.binop(xor, %26, %30) : !u64i loc(#loc16)
      %32 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc16)
      %33 = cir.cast(integral, %32 : !s32i), !u64i loc(#loc16)
      %34 = cir.binop(xor, %31, %33) : !u64i loc(#loc16)
      %35 = cir.unary(minus, %34) : !u64i, !u64i loc(#loc16)
      %36 = cir.const #cir.int<1> : !s32i loc(#loc16)
      %37 = cir.cast(integral, %36 : !s32i), !u64i loc(#loc16)
      %38 = cir.binop(sub, %35, %37) : !u64i loc(#loc16)
      cir.yield %38 : !u64i loc(#loc16)
    }) : (!cir.bool) -> !u64i loc(#loc16)
    %8 = cir.cast(integral, %7 : !u64i), !s64i loc(#loc16)
    cir.store %8, %0 : !s64i, !cir.ptr<!s64i> loc(#loc120)
    cir.goto "sink" loc(#loc121)
  ^bb2:  // no predecessors
    cir.label "sink" loc(#loc20)
    %9 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc21)
    %10 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc10)
    %11 = cir.binop(mul, %9, %10) nsw : !s64i loc(#loc21)
    cir.store %11, %1 : !s64i, !cir.ptr<!s64i> loc(#loc117)
    %12 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc22)
    cir.call @printLongLongLine(%12) : (!s64i) -> () loc(#loc23)
    cir.return loc(#loc6)
  } loc(#loc115)
  cir.func no_proto @CWE190_Integer_Overflow__int64_t_rand_square_18_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc123)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc26)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc124)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc28)
    cir.return loc(#loc25)
  } loc(#loc122)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc125)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc126)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc127)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc36)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc37)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc38)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc39)
  cir.func @main(%arg0: !s32i loc(fused[#loc42, #loc43]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc44, #loc45])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc129)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc130)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc41)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc46)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc46)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc47)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc48)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc48)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc49)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc36)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc36)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc50)
    %8 = cir.get_global @CWE190_Integer_Overflow__int64_t_rand_square_18_good : !cir.ptr<!cir.func<!void ()>> loc(#loc131)
    cir.call @CWE190_Integer_Overflow__int64_t_rand_square_18_good() : () -> () loc(#loc51)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc37)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc37)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc53)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc38)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc38)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc54)
    %13 = cir.get_global @CWE190_Integer_Overflow__int64_t_rand_square_18_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc132)
    cir.call @CWE190_Integer_Overflow__int64_t_rand_square_18_bad() : () -> () loc(#loc55)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc39)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc39)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc57)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc58)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc133)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc133)
    cir.return %17 : !s32i loc(#loc133)
  } loc(#loc128)
  cir.func private @imaxabs(!s64i) -> !s64i extra(#fn_attr) loc(#loc134)
  cir.func private @sqrtl(!cir.long_double<!cir.f80>) -> !cir.long_double<!cir.f80> extra(#fn_attr) loc(#loc62)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc63)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc136)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc68)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc137)
    cir.goto "source" loc(#loc138)
  ^bb1:  // no predecessors
    cir.label "source" loc(#loc72)
    %2 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc73)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc73)
    %4 = cir.binop(and, %2, %3) : !s32i loc(#loc73)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc73)
    %6 = cir.ternary(%5, true {
      %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc73)
      %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc73)
      %10 = cir.const #cir.int<60> : !s32i loc(#loc73)
      %11 = cir.shift(left, %9 : !u64i, %10 : !s32i) -> !u64i loc(#loc73)
      %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc73)
      %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc73)
      %14 = cir.const #cir.int<45> : !s32i loc(#loc73)
      %15 = cir.shift(left, %13 : !u64i, %14 : !s32i) -> !u64i loc(#loc73)
      %16 = cir.binop(xor, %11, %15) : !u64i loc(#loc73)
      %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc73)
      %18 = cir.cast(integral, %17 : !s32i), !u64i loc(#loc73)
      %19 = cir.const #cir.int<30> : !s32i loc(#loc73)
      %20 = cir.shift(left, %18 : !u64i, %19 : !s32i) -> !u64i loc(#loc73)
      %21 = cir.binop(xor, %16, %20) : !u64i loc(#loc73)
      %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc73)
      %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc73)
      %24 = cir.const #cir.int<15> : !s32i loc(#loc73)
      %25 = cir.shift(left, %23 : !u64i, %24 : !s32i) -> !u64i loc(#loc73)
      %26 = cir.binop(xor, %21, %25) : !u64i loc(#loc73)
      %27 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc73)
      %28 = cir.cast(integral, %27 : !s32i), !u64i loc(#loc73)
      %29 = cir.binop(xor, %26, %28) : !u64i loc(#loc73)
      cir.yield %29 : !u64i loc(#loc73)
    }, false {
      %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc73)
      %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc73)
      %10 = cir.const #cir.int<60> : !s32i loc(#loc73)
      %11 = cir.shift(left, %9 : !u64i, %10 : !s32i) -> !u64i loc(#loc73)
      %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc73)
      %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc73)
      %14 = cir.const #cir.int<45> : !s32i loc(#loc73)
      %15 = cir.shift(left, %13 : !u64i, %14 : !s32i) -> !u64i loc(#loc73)
      %16 = cir.binop(xor, %11, %15) : !u64i loc(#loc73)
      %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc73)
      %18 = cir.cast(integral, %17 : !s32i), !u64i loc(#loc73)
      %19 = cir.const #cir.int<30> : !s32i loc(#loc73)
      %20 = cir.shift(left, %18 : !u64i, %19 : !s32i) -> !u64i loc(#loc73)
      %21 = cir.binop(xor, %16, %20) : !u64i loc(#loc73)
      %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc73)
      %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc73)
      %24 = cir.const #cir.int<15> : !s32i loc(#loc73)
      %25 = cir.shift(left, %23 : !u64i, %24 : !s32i) -> !u64i loc(#loc73)
      %26 = cir.binop(xor, %21, %25) : !u64i loc(#loc73)
      %27 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc73)
      %28 = cir.cast(integral, %27 : !s32i), !u64i loc(#loc73)
      %29 = cir.binop(xor, %26, %28) : !u64i loc(#loc73)
      %30 = cir.unary(minus, %29) : !u64i, !u64i loc(#loc73)
      %31 = cir.const #cir.int<1> : !s32i loc(#loc73)
      %32 = cir.cast(integral, %31 : !s32i), !u64i loc(#loc73)
      %33 = cir.binop(sub, %30, %32) : !u64i loc(#loc73)
      cir.yield %33 : !u64i loc(#loc73)
    }) : (!cir.bool) -> !u64i loc(#loc73)
    %7 = cir.cast(integral, %6 : !u64i), !s64i loc(#loc73)
    cir.store %7, %0 : !s64i, !cir.ptr<!s64i> loc(#loc139)
    cir.goto "sink" loc(#loc140)
  ^bb2:  // no predecessors
    cir.label "sink" loc(#loc77)
    cir.scope {
      %8 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc80)
      %9 = cir.call @imaxabs(%8) : (!s64i) -> !s64i extra(#fn_attr) loc(#loc81)
      %10 = cir.cast(int_to_float, %9 : !s64i), !cir.long_double<!cir.f80> loc(#loc81)
      %11 = cir.get_global @sqrtl : !cir.ptr<!cir.func<!cir.long_double<!cir.f80> (!cir.long_double<!cir.f80>)>> loc(#loc82)
      %12 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc83)
      %13 = cir.cast(int_to_float, %12 : !s64i), !cir.long_double<!cir.f80> loc(#loc83)
      %14 = cir.call @sqrtl(%13) : (!cir.long_double<!cir.f80>) -> !cir.long_double<!cir.f80> extra(#fn_attr) loc(#loc82)
      %15 = cir.cmp(le, %10, %14) : !cir.long_double<!cir.f80>, !cir.bool loc(#loc142)
      cir.if %15 {
        %16 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc144)
        %17 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc90)
        %18 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc89)
        %19 = cir.binop(mul, %17, %18) nsw : !s64i loc(#loc90)
        cir.store %19, %16 : !s64i, !cir.ptr<!s64i> loc(#loc144)
        %20 = cir.load %16 : !cir.ptr<!s64i>, !s64i loc(#loc91)
        cir.call @printLongLongLine(%20) : (!s64i) -> () loc(#loc92)
      } else {
        %16 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc63)
        %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc63)
        cir.call @printLine(%17) : (!cir.ptr<!s8i>) -> () loc(#loc93)
      } loc(#loc143)
    } loc(#loc141)
    cir.return loc(#loc65)
  } loc(#loc135)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc146)
    %1 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc147)
    %2 = cir.const #cir.int<0> : !s64i loc(#loc100)
    cir.store %2, %0 : !s64i, !cir.ptr<!s64i> loc(#loc148)
    cir.goto "source" loc(#loc149)
  ^bb1:  // no predecessors
    cir.label "source" loc(#loc104)
    %3 = cir.const #cir.int<2> : !s32i loc(#loc105)
    %4 = cir.cast(integral, %3 : !s32i), !s64i loc(#loc105)
    cir.store %4, %0 : !s64i, !cir.ptr<!s64i> loc(#loc150)
    cir.goto "sink" loc(#loc151)
  ^bb2:  // no predecessors
    cir.label "sink" loc(#loc109)
    %5 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc110)
    %6 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc99)
    %7 = cir.binop(mul, %5, %6) nsw : !s64i loc(#loc110)
    cir.store %7, %1 : !s64i, !cir.ptr<!s64i> loc(#loc147)
    %8 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc111)
    cir.call @printLongLongLine(%8) : (!s64i) -> () loc(#loc112)
    cir.return loc(#loc95)
  } loc(#loc145)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int64_t_rand_square_18.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":26:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":26:49)
#loc5 = loc("CWE190_Integer_Overflow__int64_t_rand_square_18.c":25:1)
#loc6 = loc("CWE190_Integer_Overflow__int64_t_rand_square_18.c":40:1)
#loc7 = loc("CWE190_Integer_Overflow__int64_t_rand_square_18.c":27:5)
#loc8 = loc("CWE190_Integer_Overflow__int64_t_rand_square_18.c":27:13)
#loc9 = loc("CWE190_Integer_Overflow__int64_t_rand_square_18.c":37:9)
#loc10 = loc("CWE190_Integer_Overflow__int64_t_rand_square_18.c":37:33)
#loc11 = loc("CWE190_Integer_Overflow__int64_t_rand_square_18.c":28:12)
#loc12 = loc("CWE190_Integer_Overflow__int64_t_rand_square_18.c":28:5)
#loc13 = loc("CWE190_Integer_Overflow__int64_t_rand_square_18.c":29:5)
#loc14 = loc("CWE190_Integer_Overflow__int64_t_rand_square_18.c":29:10)
#loc15 = loc("CWE190_Integer_Overflow__int64_t_rand_square_18.c":30:1)
#loc16 = loc("CWE190_Integer_Overflow__int64_t_rand_square_18.c":32:21)
#loc17 = loc("CWE190_Integer_Overflow__int64_t_rand_square_18.c":32:5)
#loc18 = loc("CWE190_Integer_Overflow__int64_t_rand_square_18.c":33:5)
#loc19 = loc("CWE190_Integer_Overflow__int64_t_rand_square_18.c":33:10)
#loc20 = loc("CWE190_Integer_Overflow__int64_t_rand_square_18.c":34:1)
#loc21 = loc("CWE190_Integer_Overflow__int64_t_rand_square_18.c":37:26)
#loc22 = loc("CWE190_Integer_Overflow__int64_t_rand_square_18.c":38:27)
#loc23 = loc("CWE190_Integer_Overflow__int64_t_rand_square_18.c":38:9)
#loc24 = loc("CWE190_Integer_Overflow__int64_t_rand_square_18.c":87:1)
#loc25 = loc("CWE190_Integer_Overflow__int64_t_rand_square_18.c":91:1)
#loc26 = loc("CWE190_Integer_Overflow__int64_t_rand_square_18.c":89:5)
#loc27 = loc("CWE190_Integer_Overflow__int64_t_rand_square_18.c":89:13)
#loc28 = loc("CWE190_Integer_Overflow__int64_t_rand_square_18.c":90:5)
#loc29 = loc("CWE190_Integer_Overflow__int64_t_rand_square_18.c":90:13)
#loc30 = loc("/usr/include/stdlib.h":575:1)
#loc31 = loc("/usr/include/stdlib.h":575:41)
#loc32 = loc("/usr/include/time.h":76:1)
#loc33 = loc("/usr/include/time.h":76:38)
#loc34 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc35 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc36 = loc("CWE190_Integer_Overflow__int64_t_rand_square_18.c":107:15)
#loc37 = loc("CWE190_Integer_Overflow__int64_t_rand_square_18.c":109:15)
#loc38 = loc("CWE190_Integer_Overflow__int64_t_rand_square_18.c":112:15)
#loc39 = loc("CWE190_Integer_Overflow__int64_t_rand_square_18.c":114:15)
#loc40 = loc("CWE190_Integer_Overflow__int64_t_rand_square_18.c":102:1)
#loc41 = loc("CWE190_Integer_Overflow__int64_t_rand_square_18.c":117:1)
#loc46 = loc("CWE190_Integer_Overflow__int64_t_rand_square_18.c":103:1)
#loc47 = loc("CWE190_Integer_Overflow__int64_t_rand_square_18.c":105:27)
#loc48 = loc("CWE190_Integer_Overflow__int64_t_rand_square_18.c":105:22)
#loc49 = loc("CWE190_Integer_Overflow__int64_t_rand_square_18.c":105:5)
#loc50 = loc("CWE190_Integer_Overflow__int64_t_rand_square_18.c":107:5)
#loc51 = loc("CWE190_Integer_Overflow__int64_t_rand_square_18.c":108:5)
#loc52 = loc("CWE190_Integer_Overflow__int64_t_rand_square_18.c":108:58)
#loc53 = loc("CWE190_Integer_Overflow__int64_t_rand_square_18.c":109:5)
#loc54 = loc("CWE190_Integer_Overflow__int64_t_rand_square_18.c":112:5)
#loc55 = loc("CWE190_Integer_Overflow__int64_t_rand_square_18.c":113:5)
#loc56 = loc("CWE190_Integer_Overflow__int64_t_rand_square_18.c":113:57)
#loc57 = loc("CWE190_Integer_Overflow__int64_t_rand_square_18.c":114:5)
#loc58 = loc("CWE190_Integer_Overflow__int64_t_rand_square_18.c":116:12)
#loc59 = loc("CWE190_Integer_Overflow__int64_t_rand_square_18.c":116:5)
#loc60 = loc("/usr/include/inttypes.h":351:1)
#loc61 = loc("/usr/include/inttypes.h":351:74)
#loc62 = loc("/usr/include/bits/mathcalls.h":158:1)
#loc63 = loc("CWE190_Integer_Overflow__int64_t_rand_square_18.c":65:19)
#loc64 = loc("CWE190_Integer_Overflow__int64_t_rand_square_18.c":47:1)
#loc65 = loc("CWE190_Integer_Overflow__int64_t_rand_square_18.c":67:1)
#loc66 = loc("CWE190_Integer_Overflow__int64_t_rand_square_18.c":49:5)
#loc67 = loc("CWE190_Integer_Overflow__int64_t_rand_square_18.c":49:13)
#loc68 = loc("CWE190_Integer_Overflow__int64_t_rand_square_18.c":50:12)
#loc69 = loc("CWE190_Integer_Overflow__int64_t_rand_square_18.c":50:5)
#loc70 = loc("CWE190_Integer_Overflow__int64_t_rand_square_18.c":51:5)
#loc71 = loc("CWE190_Integer_Overflow__int64_t_rand_square_18.c":51:10)
#loc72 = loc("CWE190_Integer_Overflow__int64_t_rand_square_18.c":52:1)
#loc73 = loc("CWE190_Integer_Overflow__int64_t_rand_square_18.c":54:21)
#loc74 = loc("CWE190_Integer_Overflow__int64_t_rand_square_18.c":54:5)
#loc75 = loc("CWE190_Integer_Overflow__int64_t_rand_square_18.c":55:5)
#loc76 = loc("CWE190_Integer_Overflow__int64_t_rand_square_18.c":55:10)
#loc77 = loc("CWE190_Integer_Overflow__int64_t_rand_square_18.c":56:1)
#loc78 = loc("CWE190_Integer_Overflow__int64_t_rand_square_18.c":58:5)
#loc79 = loc("CWE190_Integer_Overflow__int64_t_rand_square_18.c":66:5)
#loc80 = loc("CWE190_Integer_Overflow__int64_t_rand_square_18.c":58:27)
#loc81 = loc("CWE190_Integer_Overflow__int64_t_rand_square_18.c":58:9)
#loc82 = loc("CWE190_Integer_Overflow__int64_t_rand_square_18.c":58:36)
#loc83 = loc("CWE190_Integer_Overflow__int64_t_rand_square_18.c":58:42)
#loc84 = loc("CWE190_Integer_Overflow__int64_t_rand_square_18.c":58:51)
#loc85 = loc("CWE190_Integer_Overflow__int64_t_rand_square_18.c":59:5)
#loc86 = loc("CWE190_Integer_Overflow__int64_t_rand_square_18.c":62:5)
#loc87 = loc("CWE190_Integer_Overflow__int64_t_rand_square_18.c":64:5)
#loc88 = loc("CWE190_Integer_Overflow__int64_t_rand_square_18.c":60:9)
#loc89 = loc("CWE190_Integer_Overflow__int64_t_rand_square_18.c":60:33)
#loc90 = loc("CWE190_Integer_Overflow__int64_t_rand_square_18.c":60:26)
#loc91 = loc("CWE190_Integer_Overflow__int64_t_rand_square_18.c":61:27)
#loc92 = loc("CWE190_Integer_Overflow__int64_t_rand_square_18.c":61:9)
#loc93 = loc("CWE190_Integer_Overflow__int64_t_rand_square_18.c":65:9)
#loc94 = loc("CWE190_Integer_Overflow__int64_t_rand_square_18.c":70:1)
#loc95 = loc("CWE190_Integer_Overflow__int64_t_rand_square_18.c":85:1)
#loc96 = loc("CWE190_Integer_Overflow__int64_t_rand_square_18.c":72:5)
#loc97 = loc("CWE190_Integer_Overflow__int64_t_rand_square_18.c":72:13)
#loc98 = loc("CWE190_Integer_Overflow__int64_t_rand_square_18.c":82:9)
#loc99 = loc("CWE190_Integer_Overflow__int64_t_rand_square_18.c":82:33)
#loc100 = loc("CWE190_Integer_Overflow__int64_t_rand_square_18.c":73:12)
#loc101 = loc("CWE190_Integer_Overflow__int64_t_rand_square_18.c":73:5)
#loc102 = loc("CWE190_Integer_Overflow__int64_t_rand_square_18.c":74:5)
#loc103 = loc("CWE190_Integer_Overflow__int64_t_rand_square_18.c":74:10)
#loc104 = loc("CWE190_Integer_Overflow__int64_t_rand_square_18.c":75:1)
#loc105 = loc("CWE190_Integer_Overflow__int64_t_rand_square_18.c":77:12)
#loc106 = loc("CWE190_Integer_Overflow__int64_t_rand_square_18.c":77:5)
#loc107 = loc("CWE190_Integer_Overflow__int64_t_rand_square_18.c":78:5)
#loc108 = loc("CWE190_Integer_Overflow__int64_t_rand_square_18.c":78:10)
#loc109 = loc("CWE190_Integer_Overflow__int64_t_rand_square_18.c":79:1)
#loc110 = loc("CWE190_Integer_Overflow__int64_t_rand_square_18.c":82:26)
#loc111 = loc("CWE190_Integer_Overflow__int64_t_rand_square_18.c":83:27)
#loc112 = loc("CWE190_Integer_Overflow__int64_t_rand_square_18.c":83:9)
#loc113 = loc(fused[#loc1, #loc2])
#loc114 = loc(fused[#loc3, #loc4])
#loc115 = loc(fused[#loc5, #loc6])
#loc116 = loc(fused[#loc7, #loc8])
#loc117 = loc(fused[#loc9, #loc10])
#loc118 = loc(fused[#loc12, #loc11])
#loc119 = loc(fused[#loc13, #loc14])
#loc120 = loc(fused[#loc17, #loc16])
#loc121 = loc(fused[#loc18, #loc19])
#loc122 = loc(fused[#loc24, #loc25])
#loc123 = loc(fused[#loc26, #loc27])
#loc124 = loc(fused[#loc28, #loc29])
#loc125 = loc(fused[#loc30, #loc31])
#loc126 = loc(fused[#loc32, #loc33])
#loc127 = loc(fused[#loc34, #loc35])
#loc128 = loc(fused[#loc40, #loc41])
#loc131 = loc(fused[#loc51, #loc52])
#loc132 = loc(fused[#loc55, #loc56])
#loc133 = loc(fused[#loc59, #loc58])
#loc134 = loc(fused[#loc60, #loc61])
#loc135 = loc(fused[#loc64, #loc65])
#loc136 = loc(fused[#loc66, #loc67])
#loc137 = loc(fused[#loc69, #loc68])
#loc138 = loc(fused[#loc70, #loc71])
#loc139 = loc(fused[#loc74, #loc73])
#loc140 = loc(fused[#loc75, #loc76])
#loc141 = loc(fused[#loc78, #loc79])
#loc142 = loc(fused[#loc81, #loc84])
#loc143 = loc(fused[#loc85, #loc86, #loc87, #loc79])
#loc144 = loc(fused[#loc88, #loc89])
#loc145 = loc(fused[#loc94, #loc95])
#loc146 = loc(fused[#loc96, #loc97])
#loc147 = loc(fused[#loc98, #loc99])
#loc148 = loc(fused[#loc101, #loc100])
#loc149 = loc(fused[#loc102, #loc103])
#loc150 = loc(fused[#loc106, #loc105])
#loc151 = loc(fused[#loc107, #loc108])
