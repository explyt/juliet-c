!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc28 = loc("CWE190_Integer_Overflow__int_rand_square_12.c":32:16)
#loc48 = loc("CWE190_Integer_Overflow__int_rand_square_12.c":50:28)
#loc84 = loc("CWE190_Integer_Overflow__int_rand_square_12.c":77:16)
#loc86 = loc("CWE190_Integer_Overflow__int_rand_square_12.c":82:16)
#loc99 = loc("CWE190_Integer_Overflow__int_rand_square_12.c":87:28)
#loc117 = loc("CWE190_Integer_Overflow__int_rand_square_12.c":100:28)
#true = #cir.bool<true> : !cir.bool
module @"/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__int_rand_square_12.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func no_proto private @globalReturnsTrueOrFalse(...) -> !s32i loc(#loc169)
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc170)
  cir.func private @printIntLine(!s32i) loc(#loc171)
  cir.func private @sqrt(!cir.double) -> !cir.double extra(#fn_attr) loc(#loc7)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc172)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc10)
  cir.func no_proto @CWE190_Integer_Overflow__int_rand_square_12_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc174)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc175)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc176)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc19)
    cir.store %3, %2 : !s32i, !cir.ptr<!s32i> loc(#loc177)
    cir.br ^bb1 loc(#loc178)
  ^bb1:  // pred: ^bb0
    %4 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc179)
    %5 = cir.cast(bitcast, %4 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc179)
    %6 = cir.call %5() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc23)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc23)
    cir.brcond %7 ^bb2, ^bb7 loc(#loc180)
  ^bb2:  // pred: ^bb1
    %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc28)
    %9 = cir.const #cir.int<1> : !s32i loc(#loc28)
    %10 = cir.binop(and, %8, %9) : !s32i loc(#loc28)
    %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc28)
    cir.brcond %11 ^bb3, ^bb4 loc(#loc28)
  ^bb3:  // pred: ^bb2
    %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc28)
    %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc28)
    %14 = cir.const #cir.int<30> : !s32i loc(#loc28)
    %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc28)
    %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc28)
    %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc28)
    %18 = cir.const #cir.int<15> : !s32i loc(#loc28)
    %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc28)
    %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc28)
    %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc28)
    %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc28)
    %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc28)
    cir.br ^bb5(%23 : !u32i) loc(#loc28)
  ^bb4:  // pred: ^bb2
    %24 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc28)
    %25 = cir.cast(integral, %24 : !s32i), !u32i loc(#loc28)
    %26 = cir.const #cir.int<30> : !s32i loc(#loc28)
    %27 = cir.shift(left, %25 : !u32i, %26 : !s32i) -> !u32i loc(#loc28)
    %28 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc28)
    %29 = cir.cast(integral, %28 : !s32i), !u32i loc(#loc28)
    %30 = cir.const #cir.int<15> : !s32i loc(#loc28)
    %31 = cir.shift(left, %29 : !u32i, %30 : !s32i) -> !u32i loc(#loc28)
    %32 = cir.binop(xor, %27, %31) : !u32i loc(#loc28)
    %33 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc28)
    %34 = cir.cast(integral, %33 : !s32i), !u32i loc(#loc28)
    %35 = cir.binop(xor, %32, %34) : !u32i loc(#loc28)
    %36 = cir.unary(minus, %35) : !u32i, !u32i loc(#loc28)
    %37 = cir.const #cir.int<1> : !s32i loc(#loc28)
    %38 = cir.cast(integral, %37 : !s32i), !u32i loc(#loc28)
    %39 = cir.binop(sub, %36, %38) : !u32i loc(#loc28)
    cir.br ^bb5(%39 : !u32i) loc(#loc28)
  ^bb5(%40: !u32i loc("CWE190_Integer_Overflow__int_rand_square_12.c":32:16)):  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc28)
  ^bb6:  // pred: ^bb5
    %41 = cir.cast(integral, %40 : !u32i), !s32i loc(#loc28)
    cir.store %41, %2 : !s32i, !cir.ptr<!s32i> loc(#loc181)
    cir.br ^bb8 loc(#loc26)
  ^bb7:  // pred: ^bb1
    %42 = cir.const #cir.int<2> : !s32i loc(#loc30)
    cir.store %42, %2 : !s32i, !cir.ptr<!s32i> loc(#loc182)
    cir.br ^bb8 loc(#loc22)
  ^bb8:  // 2 preds: ^bb6, ^bb7
    cir.br ^bb9 loc(#loc22)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc183)
  ^bb10:  // pred: ^bb9
    %43 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc184)
    %44 = cir.cast(bitcast, %43 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc184)
    %45 = cir.call %44() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc34)
    %46 = cir.cast(int_to_bool, %45 : !s32i), !cir.bool loc(#loc34)
    cir.brcond %46 ^bb11, ^bb14 loc(#loc185)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc186)
  ^bb12:  // pred: ^bb11
    %47 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc41)
    %48 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc14)
    %49 = cir.binop(mul, %47, %48) nsw : !s32i loc(#loc41)
    cir.store %49, %0 : !s32i, !cir.ptr<!s32i> loc(#loc174)
    %50 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc42)
    cir.call @printIntLine(%50) : (!s32i) -> () loc(#loc43)
    cir.br ^bb13 loc(#loc40)
  ^bb13:  // pred: ^bb12
    cir.br ^bb28 loc(#loc37)
  ^bb14:  // pred: ^bb10
    cir.br ^bb15 loc(#loc187)
  ^bb15:  // pred: ^bb14
    %51 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc46)
    %52 = cir.const #cir.int<2147483647> : !s32i loc(#loc47)
    %53 = cir.unary(minus, %52) nsw : !s32i, !s32i loc(#loc47)
    %54 = cir.const #cir.int<1> : !s32i loc(#loc47)
    %55 = cir.binop(sub, %53, %54) nsw : !s32i loc(#loc47)
    %56 = cir.cmp(gt, %51, %55) : !s32i, !cir.bool loc(#loc188)
    cir.brcond %56 ^bb16, ^bb21 loc(#loc48)
  ^bb16:  // pred: ^bb15
    %57 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc49)
    %58 = cir.abs %57 poison : !s32i loc(#loc50)
    %59 = cir.cast(integral, %58 : !s32i), !s64i loc(#loc50)
    %60 = cir.get_global @sqrt : !cir.ptr<!cir.func<(!cir.double) -> !cir.double>> loc(#loc51)
    %61 = cir.const #cir.int<2147483647> : !s32i loc(#loc52)
    %62 = cir.cast(int_to_float, %61 : !s32i), !cir.double loc(#loc52)
    %63 = cir.call @sqrt(%62) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc51)
    %64 = cir.cast(float_to_int, %63 : !cir.double), !s64i loc(#loc51)
    %65 = cir.cmp(lt, %59, %64) : !s64i, !cir.bool loc(#loc189)
    cir.brcond %65 ^bb17, ^bb18 loc(#loc48)
  ^bb17:  // pred: ^bb16
    %66 = cir.const #true loc(#loc48)
    cir.br ^bb19(%66 : !cir.bool) loc(#loc48)
  ^bb18:  // pred: ^bb16
    %67 = cir.const #false loc(#loc48)
    cir.br ^bb19(%67 : !cir.bool) loc(#loc48)
  ^bb19(%68: !cir.bool loc("CWE190_Integer_Overflow__int_rand_square_12.c":50:28)):  // 2 preds: ^bb17, ^bb18
    cir.br ^bb20 loc(#loc48)
  ^bb20:  // pred: ^bb19
    cir.br ^bb22(%68 : !cir.bool) loc(#loc48)
  ^bb21:  // pred: ^bb15
    %69 = cir.const #false loc(#loc48)
    cir.br ^bb22(%69 : !cir.bool) loc(#loc48)
  ^bb22(%70: !cir.bool loc("CWE190_Integer_Overflow__int_rand_square_12.c":50:28)):  // 2 preds: ^bb20, ^bb21
    cir.br ^bb23 loc(#loc48)
  ^bb23:  // pred: ^bb22
    cir.brcond %70 ^bb24, ^bb25 loc(#loc190)
  ^bb24:  // pred: ^bb23
    %71 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc57)
    %72 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc16)
    %73 = cir.binop(mul, %71, %72) nsw : !s32i loc(#loc57)
    cir.store %73, %1 : !s32i, !cir.ptr<!s32i> loc(#loc175)
    %74 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc58)
    cir.call @printIntLine(%74) : (!s32i) -> () loc(#loc59)
    cir.br ^bb26 loc(#loc55)
  ^bb25:  // pred: ^bb23
    %75 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc10)
    %76 = cir.cast(array_to_ptrdecay, %75 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc10)
    cir.call @printLine(%76) : (!cir.ptr<!s8i>) -> () loc(#loc60)
    cir.br ^bb26 loc(#loc45)
  ^bb26:  // 2 preds: ^bb24, ^bb25
    cir.br ^bb27 loc(#loc45)
  ^bb27:  // pred: ^bb26
    cir.br ^bb28 loc(#loc33)
  ^bb28:  // 2 preds: ^bb13, ^bb27
    cir.br ^bb29 loc(#loc33)
  ^bb29:  // pred: ^bb28
    cir.return loc(#loc12)
  } loc(#loc173)
  cir.func no_proto @CWE190_Integer_Overflow__int_rand_square_12_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc192)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc63)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc193)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc65)
    cir.return loc(#loc62)
  } loc(#loc191)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc195)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc196)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc197)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc75)
    cir.store %3, %2 : !s32i, !cir.ptr<!s32i> loc(#loc198)
    cir.br ^bb1 loc(#loc199)
  ^bb1:  // pred: ^bb0
    %4 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc200)
    %5 = cir.cast(bitcast, %4 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc200)
    %6 = cir.call %5() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc79)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc79)
    cir.brcond %7 ^bb2, ^bb7 loc(#loc201)
  ^bb2:  // pred: ^bb1
    %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc84)
    %9 = cir.const #cir.int<1> : !s32i loc(#loc84)
    %10 = cir.binop(and, %8, %9) : !s32i loc(#loc84)
    %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc84)
    cir.brcond %11 ^bb3, ^bb4 loc(#loc84)
  ^bb3:  // pred: ^bb2
    %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc84)
    %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc84)
    %14 = cir.const #cir.int<30> : !s32i loc(#loc84)
    %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc84)
    %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc84)
    %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc84)
    %18 = cir.const #cir.int<15> : !s32i loc(#loc84)
    %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc84)
    %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc84)
    %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc84)
    %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc84)
    %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc84)
    cir.br ^bb5(%23 : !u32i) loc(#loc84)
  ^bb4:  // pred: ^bb2
    %24 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc84)
    %25 = cir.cast(integral, %24 : !s32i), !u32i loc(#loc84)
    %26 = cir.const #cir.int<30> : !s32i loc(#loc84)
    %27 = cir.shift(left, %25 : !u32i, %26 : !s32i) -> !u32i loc(#loc84)
    %28 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc84)
    %29 = cir.cast(integral, %28 : !s32i), !u32i loc(#loc84)
    %30 = cir.const #cir.int<15> : !s32i loc(#loc84)
    %31 = cir.shift(left, %29 : !u32i, %30 : !s32i) -> !u32i loc(#loc84)
    %32 = cir.binop(xor, %27, %31) : !u32i loc(#loc84)
    %33 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc84)
    %34 = cir.cast(integral, %33 : !s32i), !u32i loc(#loc84)
    %35 = cir.binop(xor, %32, %34) : !u32i loc(#loc84)
    %36 = cir.unary(minus, %35) : !u32i, !u32i loc(#loc84)
    %37 = cir.const #cir.int<1> : !s32i loc(#loc84)
    %38 = cir.cast(integral, %37 : !s32i), !u32i loc(#loc84)
    %39 = cir.binop(sub, %36, %38) : !u32i loc(#loc84)
    cir.br ^bb5(%39 : !u32i) loc(#loc84)
  ^bb5(%40: !u32i loc("CWE190_Integer_Overflow__int_rand_square_12.c":77:16)):  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc84)
  ^bb6:  // pred: ^bb5
    %41 = cir.cast(integral, %40 : !u32i), !s32i loc(#loc84)
    cir.store %41, %2 : !s32i, !cir.ptr<!s32i> loc(#loc202)
    cir.br ^bb12 loc(#loc82)
  ^bb7:  // pred: ^bb1
    %42 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc86)
    %43 = cir.const #cir.int<1> : !s32i loc(#loc86)
    %44 = cir.binop(and, %42, %43) : !s32i loc(#loc86)
    %45 = cir.cast(int_to_bool, %44 : !s32i), !cir.bool loc(#loc86)
    cir.brcond %45 ^bb8, ^bb9 loc(#loc86)
  ^bb8:  // pred: ^bb7
    %46 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc86)
    %47 = cir.cast(integral, %46 : !s32i), !u32i loc(#loc86)
    %48 = cir.const #cir.int<30> : !s32i loc(#loc86)
    %49 = cir.shift(left, %47 : !u32i, %48 : !s32i) -> !u32i loc(#loc86)
    %50 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc86)
    %51 = cir.cast(integral, %50 : !s32i), !u32i loc(#loc86)
    %52 = cir.const #cir.int<15> : !s32i loc(#loc86)
    %53 = cir.shift(left, %51 : !u32i, %52 : !s32i) -> !u32i loc(#loc86)
    %54 = cir.binop(xor, %49, %53) : !u32i loc(#loc86)
    %55 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc86)
    %56 = cir.cast(integral, %55 : !s32i), !u32i loc(#loc86)
    %57 = cir.binop(xor, %54, %56) : !u32i loc(#loc86)
    cir.br ^bb10(%57 : !u32i) loc(#loc86)
  ^bb9:  // pred: ^bb7
    %58 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc86)
    %59 = cir.cast(integral, %58 : !s32i), !u32i loc(#loc86)
    %60 = cir.const #cir.int<30> : !s32i loc(#loc86)
    %61 = cir.shift(left, %59 : !u32i, %60 : !s32i) -> !u32i loc(#loc86)
    %62 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc86)
    %63 = cir.cast(integral, %62 : !s32i), !u32i loc(#loc86)
    %64 = cir.const #cir.int<15> : !s32i loc(#loc86)
    %65 = cir.shift(left, %63 : !u32i, %64 : !s32i) -> !u32i loc(#loc86)
    %66 = cir.binop(xor, %61, %65) : !u32i loc(#loc86)
    %67 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc86)
    %68 = cir.cast(integral, %67 : !s32i), !u32i loc(#loc86)
    %69 = cir.binop(xor, %66, %68) : !u32i loc(#loc86)
    %70 = cir.unary(minus, %69) : !u32i, !u32i loc(#loc86)
    %71 = cir.const #cir.int<1> : !s32i loc(#loc86)
    %72 = cir.cast(integral, %71 : !s32i), !u32i loc(#loc86)
    %73 = cir.binop(sub, %70, %72) : !u32i loc(#loc86)
    cir.br ^bb10(%73 : !u32i) loc(#loc86)
  ^bb10(%74: !u32i loc("CWE190_Integer_Overflow__int_rand_square_12.c":82:16)):  // 2 preds: ^bb8, ^bb9
    cir.br ^bb11 loc(#loc86)
  ^bb11:  // pred: ^bb10
    %75 = cir.cast(integral, %74 : !u32i), !s32i loc(#loc86)
    cir.store %75, %2 : !s32i, !cir.ptr<!s32i> loc(#loc203)
    cir.br ^bb12 loc(#loc78)
  ^bb12:  // 2 preds: ^bb6, ^bb11
    cir.br ^bb13 loc(#loc78)
  ^bb13:  // pred: ^bb12
    cir.br ^bb14 loc(#loc204)
  ^bb14:  // pred: ^bb13
    %76 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc205)
    %77 = cir.cast(bitcast, %76 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc205)
    %78 = cir.call %77() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc90)
    %79 = cir.cast(int_to_bool, %78 : !s32i), !cir.bool loc(#loc90)
    cir.brcond %79 ^bb15, ^bb29 loc(#loc206)
  ^bb15:  // pred: ^bb14
    cir.br ^bb16 loc(#loc207)
  ^bb16:  // pred: ^bb15
    %80 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc97)
    %81 = cir.const #cir.int<2147483647> : !s32i loc(#loc98)
    %82 = cir.unary(minus, %81) nsw : !s32i, !s32i loc(#loc98)
    %83 = cir.const #cir.int<1> : !s32i loc(#loc98)
    %84 = cir.binop(sub, %82, %83) nsw : !s32i loc(#loc98)
    %85 = cir.cmp(gt, %80, %84) : !s32i, !cir.bool loc(#loc208)
    cir.brcond %85 ^bb17, ^bb22 loc(#loc99)
  ^bb17:  // pred: ^bb16
    %86 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc100)
    %87 = cir.abs %86 poison : !s32i loc(#loc101)
    %88 = cir.cast(integral, %87 : !s32i), !s64i loc(#loc101)
    %89 = cir.get_global @sqrt : !cir.ptr<!cir.func<(!cir.double) -> !cir.double>> loc(#loc102)
    %90 = cir.const #cir.int<2147483647> : !s32i loc(#loc103)
    %91 = cir.cast(int_to_float, %90 : !s32i), !cir.double loc(#loc103)
    %92 = cir.call @sqrt(%91) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc102)
    %93 = cir.cast(float_to_int, %92 : !cir.double), !s64i loc(#loc102)
    %94 = cir.cmp(lt, %88, %93) : !s64i, !cir.bool loc(#loc209)
    cir.brcond %94 ^bb18, ^bb19 loc(#loc99)
  ^bb18:  // pred: ^bb17
    %95 = cir.const #true loc(#loc99)
    cir.br ^bb20(%95 : !cir.bool) loc(#loc99)
  ^bb19:  // pred: ^bb17
    %96 = cir.const #false loc(#loc99)
    cir.br ^bb20(%96 : !cir.bool) loc(#loc99)
  ^bb20(%97: !cir.bool loc("CWE190_Integer_Overflow__int_rand_square_12.c":87:28)):  // 2 preds: ^bb18, ^bb19
    cir.br ^bb21 loc(#loc99)
  ^bb21:  // pred: ^bb20
    cir.br ^bb23(%97 : !cir.bool) loc(#loc99)
  ^bb22:  // pred: ^bb16
    %98 = cir.const #false loc(#loc99)
    cir.br ^bb23(%98 : !cir.bool) loc(#loc99)
  ^bb23(%99: !cir.bool loc("CWE190_Integer_Overflow__int_rand_square_12.c":87:28)):  // 2 preds: ^bb21, ^bb22
    cir.br ^bb24 loc(#loc99)
  ^bb24:  // pred: ^bb23
    cir.brcond %99 ^bb25, ^bb26 loc(#loc210)
  ^bb25:  // pred: ^bb24
    %100 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc108)
    %101 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc70)
    %102 = cir.binop(mul, %100, %101) nsw : !s32i loc(#loc108)
    cir.store %102, %0 : !s32i, !cir.ptr<!s32i> loc(#loc195)
    %103 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc109)
    cir.call @printIntLine(%103) : (!s32i) -> () loc(#loc110)
    cir.br ^bb27 loc(#loc106)
  ^bb26:  // pred: ^bb24
    %104 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc111)
    %105 = cir.cast(array_to_ptrdecay, %104 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc111)
    cir.call @printLine(%105) : (!cir.ptr<!s8i>) -> () loc(#loc112)
    cir.br ^bb27 loc(#loc96)
  ^bb27:  // 2 preds: ^bb25, ^bb26
    cir.br ^bb28 loc(#loc96)
  ^bb28:  // pred: ^bb27
    cir.br ^bb43 loc(#loc93)
  ^bb29:  // pred: ^bb14
    cir.br ^bb30 loc(#loc211)
  ^bb30:  // pred: ^bb29
    %106 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc115)
    %107 = cir.const #cir.int<2147483647> : !s32i loc(#loc116)
    %108 = cir.unary(minus, %107) nsw : !s32i, !s32i loc(#loc116)
    %109 = cir.const #cir.int<1> : !s32i loc(#loc116)
    %110 = cir.binop(sub, %108, %109) nsw : !s32i loc(#loc116)
    %111 = cir.cmp(gt, %106, %110) : !s32i, !cir.bool loc(#loc212)
    cir.brcond %111 ^bb31, ^bb36 loc(#loc117)
  ^bb31:  // pred: ^bb30
    %112 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc118)
    %113 = cir.abs %112 poison : !s32i loc(#loc119)
    %114 = cir.cast(integral, %113 : !s32i), !s64i loc(#loc119)
    %115 = cir.get_global @sqrt : !cir.ptr<!cir.func<(!cir.double) -> !cir.double>> loc(#loc120)
    %116 = cir.const #cir.int<2147483647> : !s32i loc(#loc121)
    %117 = cir.cast(int_to_float, %116 : !s32i), !cir.double loc(#loc121)
    %118 = cir.call @sqrt(%117) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc120)
    %119 = cir.cast(float_to_int, %118 : !cir.double), !s64i loc(#loc120)
    %120 = cir.cmp(lt, %114, %119) : !s64i, !cir.bool loc(#loc213)
    cir.brcond %120 ^bb32, ^bb33 loc(#loc117)
  ^bb32:  // pred: ^bb31
    %121 = cir.const #true loc(#loc117)
    cir.br ^bb34(%121 : !cir.bool) loc(#loc117)
  ^bb33:  // pred: ^bb31
    %122 = cir.const #false loc(#loc117)
    cir.br ^bb34(%122 : !cir.bool) loc(#loc117)
  ^bb34(%123: !cir.bool loc("CWE190_Integer_Overflow__int_rand_square_12.c":100:28)):  // 2 preds: ^bb32, ^bb33
    cir.br ^bb35 loc(#loc117)
  ^bb35:  // pred: ^bb34
    cir.br ^bb37(%123 : !cir.bool) loc(#loc117)
  ^bb36:  // pred: ^bb30
    %124 = cir.const #false loc(#loc117)
    cir.br ^bb37(%124 : !cir.bool) loc(#loc117)
  ^bb37(%125: !cir.bool loc("CWE190_Integer_Overflow__int_rand_square_12.c":100:28)):  // 2 preds: ^bb35, ^bb36
    cir.br ^bb38 loc(#loc117)
  ^bb38:  // pred: ^bb37
    cir.brcond %125 ^bb39, ^bb40 loc(#loc214)
  ^bb39:  // pred: ^bb38
    %126 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc126)
    %127 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc72)
    %128 = cir.binop(mul, %126, %127) nsw : !s32i loc(#loc126)
    cir.store %128, %1 : !s32i, !cir.ptr<!s32i> loc(#loc196)
    %129 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc127)
    cir.call @printIntLine(%129) : (!s32i) -> () loc(#loc128)
    cir.br ^bb41 loc(#loc124)
  ^bb40:  // pred: ^bb38
    %130 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc129)
    %131 = cir.cast(array_to_ptrdecay, %130 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc129)
    cir.call @printLine(%131) : (!cir.ptr<!s8i>) -> () loc(#loc130)
    cir.br ^bb41 loc(#loc114)
  ^bb41:  // 2 preds: ^bb39, ^bb40
    cir.br ^bb42 loc(#loc114)
  ^bb42:  // pred: ^bb41
    cir.br ^bb43 loc(#loc89)
  ^bb43:  // 2 preds: ^bb28, ^bb42
    cir.br ^bb44 loc(#loc89)
  ^bb44:  // pred: ^bb43
    cir.return loc(#loc68)
  } loc(#loc194)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc216)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc217)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc218)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc139)
    cir.store %3, %2 : !s32i, !cir.ptr<!s32i> loc(#loc219)
    cir.br ^bb1 loc(#loc220)
  ^bb1:  // pred: ^bb0
    %4 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc221)
    %5 = cir.cast(bitcast, %4 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc221)
    %6 = cir.call %5() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc143)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc143)
    cir.brcond %7 ^bb2, ^bb3 loc(#loc222)
  ^bb2:  // pred: ^bb1
    %8 = cir.const #cir.int<2> : !s32i loc(#loc148)
    cir.store %8, %2 : !s32i, !cir.ptr<!s32i> loc(#loc223)
    cir.br ^bb4 loc(#loc146)
  ^bb3:  // pred: ^bb1
    %9 = cir.const #cir.int<2> : !s32i loc(#loc150)
    cir.store %9, %2 : !s32i, !cir.ptr<!s32i> loc(#loc224)
    cir.br ^bb4 loc(#loc142)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc142)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc225)
  ^bb6:  // pred: ^bb5
    %10 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc226)
    %11 = cir.cast(bitcast, %10 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc226)
    %12 = cir.call %11() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc154)
    %13 = cir.cast(int_to_bool, %12 : !s32i), !cir.bool loc(#loc154)
    cir.brcond %13 ^bb7, ^bb10 loc(#loc227)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc228)
  ^bb8:  // pred: ^bb7
    %14 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc161)
    %15 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc134)
    %16 = cir.binop(mul, %14, %15) nsw : !s32i loc(#loc161)
    cir.store %16, %0 : !s32i, !cir.ptr<!s32i> loc(#loc216)
    %17 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc162)
    cir.call @printIntLine(%17) : (!s32i) -> () loc(#loc163)
    cir.br ^bb9 loc(#loc160)
  ^bb9:  // pred: ^bb8
    cir.br ^bb13 loc(#loc157)
  ^bb10:  // pred: ^bb6
    cir.br ^bb11 loc(#loc229)
  ^bb11:  // pred: ^bb10
    %18 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc166)
    %19 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc136)
    %20 = cir.binop(mul, %18, %19) nsw : !s32i loc(#loc166)
    cir.store %20, %1 : !s32i, !cir.ptr<!s32i> loc(#loc217)
    %21 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc167)
    cir.call @printIntLine(%21) : (!s32i) -> () loc(#loc168)
    cir.br ^bb12 loc(#loc165)
  ^bb12:  // pred: ^bb11
    cir.br ^bb13 loc(#loc153)
  ^bb13:  // 2 preds: ^bb9, ^bb12
    cir.br ^bb14 loc(#loc153)
  ^bb14:  // pred: ^bb13
    cir.return loc(#loc132)
  } loc(#loc215)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__int_rand_square_12.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":52:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":52:30)
#loc3 = loc("/usr/include/stdlib.h":573:1)
#loc4 = loc("/usr/include/stdlib.h":573:24)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc7 = loc("/usr/include/x86_64-linux-gnu/bits/mathcalls.h":143:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc9 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc10 = loc("CWE190_Integer_Overflow__int_rand_square_12.c":57:23)
#loc11 = loc("CWE190_Integer_Overflow__int_rand_square_12.c":24:1)
#loc12 = loc("CWE190_Integer_Overflow__int_rand_square_12.c":60:1)
#loc13 = loc("CWE190_Integer_Overflow__int_rand_square_12.c":43:13)
#loc14 = loc("CWE190_Integer_Overflow__int_rand_square_12.c":43:33)
#loc15 = loc("CWE190_Integer_Overflow__int_rand_square_12.c":52:13)
#loc16 = loc("CWE190_Integer_Overflow__int_rand_square_12.c":52:33)
#loc17 = loc("CWE190_Integer_Overflow__int_rand_square_12.c":26:5)
#loc18 = loc("CWE190_Integer_Overflow__int_rand_square_12.c":26:9)
#loc19 = loc("CWE190_Integer_Overflow__int_rand_square_12.c":28:12)
#loc20 = loc("CWE190_Integer_Overflow__int_rand_square_12.c":28:5)
#loc21 = loc("CWE190_Integer_Overflow__int_rand_square_12.c":29:5)
#loc22 = loc("CWE190_Integer_Overflow__int_rand_square_12.c":38:5)
#loc23 = loc("CWE190_Integer_Overflow__int_rand_square_12.c":29:8)
#loc24 = loc("CWE190_Integer_Overflow__int_rand_square_12.c":29:33)
#loc25 = loc("CWE190_Integer_Overflow__int_rand_square_12.c":30:5)
#loc26 = loc("CWE190_Integer_Overflow__int_rand_square_12.c":33:5)
#loc27 = loc("CWE190_Integer_Overflow__int_rand_square_12.c":35:5)
#loc29 = loc("CWE190_Integer_Overflow__int_rand_square_12.c":32:9)
#loc30 = loc("CWE190_Integer_Overflow__int_rand_square_12.c":37:16)
#loc31 = loc("CWE190_Integer_Overflow__int_rand_square_12.c":37:9)
#loc32 = loc("CWE190_Integer_Overflow__int_rand_square_12.c":39:5)
#loc33 = loc("CWE190_Integer_Overflow__int_rand_square_12.c":59:5)
#loc34 = loc("CWE190_Integer_Overflow__int_rand_square_12.c":39:8)
#loc35 = loc("CWE190_Integer_Overflow__int_rand_square_12.c":39:33)
#loc36 = loc("CWE190_Integer_Overflow__int_rand_square_12.c":40:5)
#loc37 = loc("CWE190_Integer_Overflow__int_rand_square_12.c":46:5)
#loc38 = loc("CWE190_Integer_Overflow__int_rand_square_12.c":48:5)
#loc39 = loc("CWE190_Integer_Overflow__int_rand_square_12.c":41:9)
#loc40 = loc("CWE190_Integer_Overflow__int_rand_square_12.c":45:9)
#loc41 = loc("CWE190_Integer_Overflow__int_rand_square_12.c":43:26)
#loc42 = loc("CWE190_Integer_Overflow__int_rand_square_12.c":44:26)
#loc43 = loc("CWE190_Integer_Overflow__int_rand_square_12.c":44:13)
#loc44 = loc("CWE190_Integer_Overflow__int_rand_square_12.c":50:9)
#loc45 = loc("CWE190_Integer_Overflow__int_rand_square_12.c":58:9)
#loc46 = loc("CWE190_Integer_Overflow__int_rand_square_12.c":50:13)
#loc47 = loc("CWE190_Integer_Overflow__int_rand_square_12.c":50:20)
#loc49 = loc("CWE190_Integer_Overflow__int_rand_square_12.c":50:35)
#loc50 = loc("CWE190_Integer_Overflow__int_rand_square_12.c":50:31)
#loc51 = loc("CWE190_Integer_Overflow__int_rand_square_12.c":50:49)
#loc52 = loc("CWE190_Integer_Overflow__int_rand_square_12.c":50:62)
#loc53 = loc("CWE190_Integer_Overflow__int_rand_square_12.c":50:69)
#loc54 = loc("CWE190_Integer_Overflow__int_rand_square_12.c":51:9)
#loc55 = loc("CWE190_Integer_Overflow__int_rand_square_12.c":54:9)
#loc56 = loc("CWE190_Integer_Overflow__int_rand_square_12.c":56:9)
#loc57 = loc("CWE190_Integer_Overflow__int_rand_square_12.c":52:26)
#loc58 = loc("CWE190_Integer_Overflow__int_rand_square_12.c":53:26)
#loc59 = loc("CWE190_Integer_Overflow__int_rand_square_12.c":53:13)
#loc60 = loc("CWE190_Integer_Overflow__int_rand_square_12.c":57:13)
#loc61 = loc("CWE190_Integer_Overflow__int_rand_square_12.c":148:1)
#loc62 = loc("CWE190_Integer_Overflow__int_rand_square_12.c":152:1)
#loc63 = loc("CWE190_Integer_Overflow__int_rand_square_12.c":150:5)
#loc64 = loc("CWE190_Integer_Overflow__int_rand_square_12.c":150:13)
#loc65 = loc("CWE190_Integer_Overflow__int_rand_square_12.c":151:5)
#loc66 = loc("CWE190_Integer_Overflow__int_rand_square_12.c":151:13)
#loc67 = loc("CWE190_Integer_Overflow__int_rand_square_12.c":69:1)
#loc68 = loc("CWE190_Integer_Overflow__int_rand_square_12.c":110:1)
#loc69 = loc("CWE190_Integer_Overflow__int_rand_square_12.c":89:13)
#loc70 = loc("CWE190_Integer_Overflow__int_rand_square_12.c":89:33)
#loc71 = loc("CWE190_Integer_Overflow__int_rand_square_12.c":102:13)
#loc72 = loc("CWE190_Integer_Overflow__int_rand_square_12.c":102:33)
#loc73 = loc("CWE190_Integer_Overflow__int_rand_square_12.c":71:5)
#loc74 = loc("CWE190_Integer_Overflow__int_rand_square_12.c":71:9)
#loc75 = loc("CWE190_Integer_Overflow__int_rand_square_12.c":73:12)
#loc76 = loc("CWE190_Integer_Overflow__int_rand_square_12.c":73:5)
#loc77 = loc("CWE190_Integer_Overflow__int_rand_square_12.c":74:5)
#loc78 = loc("CWE190_Integer_Overflow__int_rand_square_12.c":83:5)
#loc79 = loc("CWE190_Integer_Overflow__int_rand_square_12.c":74:8)
#loc80 = loc("CWE190_Integer_Overflow__int_rand_square_12.c":74:33)
#loc81 = loc("CWE190_Integer_Overflow__int_rand_square_12.c":75:5)
#loc82 = loc("CWE190_Integer_Overflow__int_rand_square_12.c":78:5)
#loc83 = loc("CWE190_Integer_Overflow__int_rand_square_12.c":80:5)
#loc85 = loc("CWE190_Integer_Overflow__int_rand_square_12.c":77:9)
#loc87 = loc("CWE190_Integer_Overflow__int_rand_square_12.c":82:9)
#loc88 = loc("CWE190_Integer_Overflow__int_rand_square_12.c":84:5)
#loc89 = loc("CWE190_Integer_Overflow__int_rand_square_12.c":109:5)
#loc90 = loc("CWE190_Integer_Overflow__int_rand_square_12.c":84:8)
#loc91 = loc("CWE190_Integer_Overflow__int_rand_square_12.c":84:33)
#loc92 = loc("CWE190_Integer_Overflow__int_rand_square_12.c":85:5)
#loc93 = loc("CWE190_Integer_Overflow__int_rand_square_12.c":96:5)
#loc94 = loc("CWE190_Integer_Overflow__int_rand_square_12.c":98:5)
#loc95 = loc("CWE190_Integer_Overflow__int_rand_square_12.c":87:9)
#loc96 = loc("CWE190_Integer_Overflow__int_rand_square_12.c":95:9)
#loc97 = loc("CWE190_Integer_Overflow__int_rand_square_12.c":87:13)
#loc98 = loc("CWE190_Integer_Overflow__int_rand_square_12.c":87:20)
#loc100 = loc("CWE190_Integer_Overflow__int_rand_square_12.c":87:35)
#loc101 = loc("CWE190_Integer_Overflow__int_rand_square_12.c":87:31)
#loc102 = loc("CWE190_Integer_Overflow__int_rand_square_12.c":87:49)
#loc103 = loc("CWE190_Integer_Overflow__int_rand_square_12.c":87:62)
#loc104 = loc("CWE190_Integer_Overflow__int_rand_square_12.c":87:69)
#loc105 = loc("CWE190_Integer_Overflow__int_rand_square_12.c":88:9)
#loc106 = loc("CWE190_Integer_Overflow__int_rand_square_12.c":91:9)
#loc107 = loc("CWE190_Integer_Overflow__int_rand_square_12.c":93:9)
#loc108 = loc("CWE190_Integer_Overflow__int_rand_square_12.c":89:26)
#loc109 = loc("CWE190_Integer_Overflow__int_rand_square_12.c":90:26)
#loc110 = loc("CWE190_Integer_Overflow__int_rand_square_12.c":90:13)
#loc111 = loc("CWE190_Integer_Overflow__int_rand_square_12.c":94:23)
#loc112 = loc("CWE190_Integer_Overflow__int_rand_square_12.c":94:13)
#loc113 = loc("CWE190_Integer_Overflow__int_rand_square_12.c":100:9)
#loc114 = loc("CWE190_Integer_Overflow__int_rand_square_12.c":108:9)
#loc115 = loc("CWE190_Integer_Overflow__int_rand_square_12.c":100:13)
#loc116 = loc("CWE190_Integer_Overflow__int_rand_square_12.c":100:20)
#loc118 = loc("CWE190_Integer_Overflow__int_rand_square_12.c":100:35)
#loc119 = loc("CWE190_Integer_Overflow__int_rand_square_12.c":100:31)
#loc120 = loc("CWE190_Integer_Overflow__int_rand_square_12.c":100:49)
#loc121 = loc("CWE190_Integer_Overflow__int_rand_square_12.c":100:62)
#loc122 = loc("CWE190_Integer_Overflow__int_rand_square_12.c":100:69)
#loc123 = loc("CWE190_Integer_Overflow__int_rand_square_12.c":101:9)
#loc124 = loc("CWE190_Integer_Overflow__int_rand_square_12.c":104:9)
#loc125 = loc("CWE190_Integer_Overflow__int_rand_square_12.c":106:9)
#loc126 = loc("CWE190_Integer_Overflow__int_rand_square_12.c":102:26)
#loc127 = loc("CWE190_Integer_Overflow__int_rand_square_12.c":103:26)
#loc128 = loc("CWE190_Integer_Overflow__int_rand_square_12.c":103:13)
#loc129 = loc("CWE190_Integer_Overflow__int_rand_square_12.c":107:23)
#loc130 = loc("CWE190_Integer_Overflow__int_rand_square_12.c":107:13)
#loc131 = loc("CWE190_Integer_Overflow__int_rand_square_12.c":115:1)
#loc132 = loc("CWE190_Integer_Overflow__int_rand_square_12.c":146:1)
#loc133 = loc("CWE190_Integer_Overflow__int_rand_square_12.c":134:13)
#loc134 = loc("CWE190_Integer_Overflow__int_rand_square_12.c":134:33)
#loc135 = loc("CWE190_Integer_Overflow__int_rand_square_12.c":142:13)
#loc136 = loc("CWE190_Integer_Overflow__int_rand_square_12.c":142:33)
#loc137 = loc("CWE190_Integer_Overflow__int_rand_square_12.c":117:5)
#loc138 = loc("CWE190_Integer_Overflow__int_rand_square_12.c":117:9)
#loc139 = loc("CWE190_Integer_Overflow__int_rand_square_12.c":119:12)
#loc140 = loc("CWE190_Integer_Overflow__int_rand_square_12.c":119:5)
#loc141 = loc("CWE190_Integer_Overflow__int_rand_square_12.c":120:5)
#loc142 = loc("CWE190_Integer_Overflow__int_rand_square_12.c":129:5)
#loc143 = loc("CWE190_Integer_Overflow__int_rand_square_12.c":120:8)
#loc144 = loc("CWE190_Integer_Overflow__int_rand_square_12.c":120:33)
#loc145 = loc("CWE190_Integer_Overflow__int_rand_square_12.c":121:5)
#loc146 = loc("CWE190_Integer_Overflow__int_rand_square_12.c":124:5)
#loc147 = loc("CWE190_Integer_Overflow__int_rand_square_12.c":126:5)
#loc148 = loc("CWE190_Integer_Overflow__int_rand_square_12.c":123:16)
#loc149 = loc("CWE190_Integer_Overflow__int_rand_square_12.c":123:9)
#loc150 = loc("CWE190_Integer_Overflow__int_rand_square_12.c":128:16)
#loc151 = loc("CWE190_Integer_Overflow__int_rand_square_12.c":128:9)
#loc152 = loc("CWE190_Integer_Overflow__int_rand_square_12.c":130:5)
#loc153 = loc("CWE190_Integer_Overflow__int_rand_square_12.c":145:5)
#loc154 = loc("CWE190_Integer_Overflow__int_rand_square_12.c":130:8)
#loc155 = loc("CWE190_Integer_Overflow__int_rand_square_12.c":130:33)
#loc156 = loc("CWE190_Integer_Overflow__int_rand_square_12.c":131:5)
#loc157 = loc("CWE190_Integer_Overflow__int_rand_square_12.c":137:5)
#loc158 = loc("CWE190_Integer_Overflow__int_rand_square_12.c":139:5)
#loc159 = loc("CWE190_Integer_Overflow__int_rand_square_12.c":132:9)
#loc160 = loc("CWE190_Integer_Overflow__int_rand_square_12.c":136:9)
#loc161 = loc("CWE190_Integer_Overflow__int_rand_square_12.c":134:26)
#loc162 = loc("CWE190_Integer_Overflow__int_rand_square_12.c":135:26)
#loc163 = loc("CWE190_Integer_Overflow__int_rand_square_12.c":135:13)
#loc164 = loc("CWE190_Integer_Overflow__int_rand_square_12.c":140:9)
#loc165 = loc("CWE190_Integer_Overflow__int_rand_square_12.c":144:9)
#loc166 = loc("CWE190_Integer_Overflow__int_rand_square_12.c":142:26)
#loc167 = loc("CWE190_Integer_Overflow__int_rand_square_12.c":143:26)
#loc168 = loc("CWE190_Integer_Overflow__int_rand_square_12.c":143:13)
#loc169 = loc(fused[#loc1, #loc2])
#loc170 = loc(fused[#loc3, #loc4])
#loc171 = loc(fused[#loc5, #loc6])
#loc172 = loc(fused[#loc8, #loc9])
#loc173 = loc(fused[#loc11, #loc12])
#loc174 = loc(fused[#loc13, #loc14])
#loc175 = loc(fused[#loc15, #loc16])
#loc176 = loc(fused[#loc17, #loc18])
#loc177 = loc(fused[#loc20, #loc19])
#loc178 = loc(fused[#loc21, #loc22])
#loc179 = loc(fused[#loc23, #loc24])
#loc180 = loc(fused[#loc25, #loc26, #loc27, #loc22])
#loc181 = loc(fused[#loc29, #loc28])
#loc182 = loc(fused[#loc31, #loc30])
#loc183 = loc(fused[#loc32, #loc33])
#loc184 = loc(fused[#loc34, #loc35])
#loc185 = loc(fused[#loc36, #loc37, #loc38, #loc33])
#loc186 = loc(fused[#loc39, #loc40])
#loc187 = loc(fused[#loc44, #loc45])
#loc188 = loc(fused[#loc46, #loc47])
#loc189 = loc(fused[#loc50, #loc53])
#loc190 = loc(fused[#loc54, #loc55, #loc56, #loc45])
#loc191 = loc(fused[#loc61, #loc62])
#loc192 = loc(fused[#loc63, #loc64])
#loc193 = loc(fused[#loc65, #loc66])
#loc194 = loc(fused[#loc67, #loc68])
#loc195 = loc(fused[#loc69, #loc70])
#loc196 = loc(fused[#loc71, #loc72])
#loc197 = loc(fused[#loc73, #loc74])
#loc198 = loc(fused[#loc76, #loc75])
#loc199 = loc(fused[#loc77, #loc78])
#loc200 = loc(fused[#loc79, #loc80])
#loc201 = loc(fused[#loc81, #loc82, #loc83, #loc78])
#loc202 = loc(fused[#loc85, #loc84])
#loc203 = loc(fused[#loc87, #loc86])
#loc204 = loc(fused[#loc88, #loc89])
#loc205 = loc(fused[#loc90, #loc91])
#loc206 = loc(fused[#loc92, #loc93, #loc94, #loc89])
#loc207 = loc(fused[#loc95, #loc96])
#loc208 = loc(fused[#loc97, #loc98])
#loc209 = loc(fused[#loc101, #loc104])
#loc210 = loc(fused[#loc105, #loc106, #loc107, #loc96])
#loc211 = loc(fused[#loc113, #loc114])
#loc212 = loc(fused[#loc115, #loc116])
#loc213 = loc(fused[#loc119, #loc122])
#loc214 = loc(fused[#loc123, #loc124, #loc125, #loc114])
#loc215 = loc(fused[#loc131, #loc132])
#loc216 = loc(fused[#loc133, #loc134])
#loc217 = loc(fused[#loc135, #loc136])
#loc218 = loc(fused[#loc137, #loc138])
#loc219 = loc(fused[#loc140, #loc139])
#loc220 = loc(fused[#loc141, #loc142])
#loc221 = loc(fused[#loc143, #loc144])
#loc222 = loc(fused[#loc145, #loc146, #loc147, #loc142])
#loc223 = loc(fused[#loc149, #loc148])
#loc224 = loc(fused[#loc151, #loc150])
#loc225 = loc(fused[#loc152, #loc153])
#loc226 = loc(fused[#loc154, #loc155])
#loc227 = loc(fused[#loc156, #loc157, #loc158, #loc153])
#loc228 = loc(fused[#loc159, #loc160])
#loc229 = loc(fused[#loc164, #loc165])
