!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE191_Integer_Underflow/s03/CWE191_Integer_Underflow__int_rand_multiply_18.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr = dense<64> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e", "dlti.endianness" = "little">} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc97)
  cir.func private @printIntLine(!s32i) loc(#loc98)
  cir.func no_proto @CWE191_Integer_Underflow__int_rand_multiply_18_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc100)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc9)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc101)
    cir.goto "source" loc(#loc102)
  ^bb1:  // no predecessors
    cir.label "source" loc(#loc13)
    %2 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc14)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc14)
    %4 = cir.binop(and, %2, %3) : !s32i loc(#loc14)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc14)
    %6 = cir.ternary(%5, true {
      %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc14)
      %9 = cir.cast(integral, %8 : !s32i), !u32i loc(#loc14)
      %10 = cir.const #cir.int<30> : !s32i loc(#loc14)
      %11 = cir.shift(left, %9 : !u32i, %10 : !s32i) -> !u32i loc(#loc14)
      %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc14)
      %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc14)
      %14 = cir.const #cir.int<15> : !s32i loc(#loc14)
      %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc14)
      %16 = cir.binop(xor, %11, %15) : !u32i loc(#loc14)
      %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc14)
      %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc14)
      %19 = cir.binop(xor, %16, %18) : !u32i loc(#loc14)
      cir.yield %19 : !u32i loc(#loc14)
    }, false {
      %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc14)
      %9 = cir.cast(integral, %8 : !s32i), !u32i loc(#loc14)
      %10 = cir.const #cir.int<30> : !s32i loc(#loc14)
      %11 = cir.shift(left, %9 : !u32i, %10 : !s32i) -> !u32i loc(#loc14)
      %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc14)
      %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc14)
      %14 = cir.const #cir.int<15> : !s32i loc(#loc14)
      %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc14)
      %16 = cir.binop(xor, %11, %15) : !u32i loc(#loc14)
      %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc14)
      %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc14)
      %19 = cir.binop(xor, %16, %18) : !u32i loc(#loc14)
      %20 = cir.unary(minus, %19) : !u32i, !u32i loc(#loc14)
      %21 = cir.const #cir.int<1> : !s32i loc(#loc14)
      %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc14)
      %23 = cir.binop(sub, %20, %22) : !u32i loc(#loc14)
      cir.yield %23 : !u32i loc(#loc14)
    }) : (!cir.bool) -> !u32i loc(#loc14)
    %7 = cir.cast(integral, %6 : !u32i), !s32i loc(#loc14)
    cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc103)
    cir.goto "sink" loc(#loc104)
  ^bb2:  // no predecessors
    cir.label "sink" loc(#loc18)
    cir.scope {
      %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc21)
      %9 = cir.const #cir.int<0> : !s32i loc(#loc22)
      %10 = cir.cmp(lt, %8, %9) : !s32i, !cir.bool loc(#loc106)
      cir.if %10 {
        %11 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc108)
        %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc26)
        %13 = cir.const #cir.int<2> : !s32i loc(#loc25)
        %14 = cir.binop(mul, %12, %13) nsw : !s32i loc(#loc26)
        cir.store %14, %11 : !s32i, !cir.ptr<!s32i> loc(#loc108)
        %15 = cir.load %11 : !cir.ptr<!s32i>, !s32i loc(#loc27)
        cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc28)
      } loc(#loc107)
    } loc(#loc105)
    cir.return loc(#loc6)
  } loc(#loc99)
  cir.func no_proto @CWE191_Integer_Underflow__int_rand_multiply_18_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc110)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc31)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc111)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc33)
    cir.return loc(#loc30)
  } loc(#loc109)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc112)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data value is too small to perform multiplication.\00" : !cir.array<!s8i x 51>> : !cir.array<!s8i x 51> {alignment = 1 : i64} loc(#loc37)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc114)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc42)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc115)
    cir.goto "source" loc(#loc116)
  ^bb1:  // no predecessors
    cir.label "source" loc(#loc46)
    %2 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc47)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc47)
    %4 = cir.binop(and, %2, %3) : !s32i loc(#loc47)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc47)
    %6 = cir.ternary(%5, true {
      %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc47)
      %9 = cir.cast(integral, %8 : !s32i), !u32i loc(#loc47)
      %10 = cir.const #cir.int<30> : !s32i loc(#loc47)
      %11 = cir.shift(left, %9 : !u32i, %10 : !s32i) -> !u32i loc(#loc47)
      %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc47)
      %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc47)
      %14 = cir.const #cir.int<15> : !s32i loc(#loc47)
      %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc47)
      %16 = cir.binop(xor, %11, %15) : !u32i loc(#loc47)
      %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc47)
      %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc47)
      %19 = cir.binop(xor, %16, %18) : !u32i loc(#loc47)
      cir.yield %19 : !u32i loc(#loc47)
    }, false {
      %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc47)
      %9 = cir.cast(integral, %8 : !s32i), !u32i loc(#loc47)
      %10 = cir.const #cir.int<30> : !s32i loc(#loc47)
      %11 = cir.shift(left, %9 : !u32i, %10 : !s32i) -> !u32i loc(#loc47)
      %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc47)
      %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc47)
      %14 = cir.const #cir.int<15> : !s32i loc(#loc47)
      %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc47)
      %16 = cir.binop(xor, %11, %15) : !u32i loc(#loc47)
      %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc47)
      %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc47)
      %19 = cir.binop(xor, %16, %18) : !u32i loc(#loc47)
      %20 = cir.unary(minus, %19) : !u32i, !u32i loc(#loc47)
      %21 = cir.const #cir.int<1> : !s32i loc(#loc47)
      %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc47)
      %23 = cir.binop(sub, %20, %22) : !u32i loc(#loc47)
      cir.yield %23 : !u32i loc(#loc47)
    }) : (!cir.bool) -> !u32i loc(#loc47)
    %7 = cir.cast(integral, %6 : !u32i), !s32i loc(#loc47)
    cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc117)
    cir.goto "sink" loc(#loc118)
  ^bb2:  // no predecessors
    cir.label "sink" loc(#loc51)
    cir.scope {
      %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc54)
      %9 = cir.const #cir.int<0> : !s32i loc(#loc55)
      %10 = cir.cmp(lt, %8, %9) : !s32i, !cir.bool loc(#loc120)
      cir.if %10 {
        cir.scope {
          %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc59)
          %12 = cir.const #cir.int<2147483647> : !s32i loc(#loc60)
          %13 = cir.unary(minus, %12) nsw : !s32i, !s32i loc(#loc60)
          %14 = cir.const #cir.int<1> : !s32i loc(#loc60)
          %15 = cir.binop(sub, %13, %14) nsw : !s32i loc(#loc60)
          %16 = cir.const #cir.int<2> : !s32i loc(#loc61)
          %17 = cir.binop(div, %15, %16) : !s32i loc(#loc123)
          %18 = cir.cmp(gt, %11, %17) : !s32i, !cir.bool loc(#loc124)
          cir.if %18 {
            %19 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc126)
            %20 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc68)
            %21 = cir.const #cir.int<2> : !s32i loc(#loc67)
            %22 = cir.binop(mul, %20, %21) nsw : !s32i loc(#loc68)
            cir.store %22, %19 : !s32i, !cir.ptr<!s32i> loc(#loc126)
            %23 = cir.load %19 : !cir.ptr<!s32i>, !s32i loc(#loc69)
            cir.call @printIntLine(%23) : (!s32i) -> () loc(#loc70)
          } else {
            %19 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 51>> loc(#loc37)
            %20 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 51>>), !cir.ptr<!s8i> loc(#loc37)
            cir.call @printLine(%20) : (!cir.ptr<!s8i>) -> () loc(#loc71)
          } loc(#loc125)
        } loc(#loc122)
      } loc(#loc121)
    } loc(#loc119)
    cir.return loc(#loc39)
  } loc(#loc113)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc128)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc76)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc129)
    cir.goto "source" loc(#loc130)
  ^bb1:  // no predecessors
    cir.label "source" loc(#loc80)
    %2 = cir.const #cir.int<2> : !s32i loc(#loc81)
    %3 = cir.unary(minus, %2) nsw : !s32i, !s32i loc(#loc82)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc131)
    cir.goto "sink" loc(#loc132)
  ^bb2:  // no predecessors
    cir.label "sink" loc(#loc86)
    cir.scope {
      %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc89)
      %5 = cir.const #cir.int<0> : !s32i loc(#loc90)
      %6 = cir.cmp(lt, %4, %5) : !s32i, !cir.bool loc(#loc134)
      cir.if %6 {
        %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc136)
        %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc94)
        %9 = cir.const #cir.int<2> : !s32i loc(#loc93)
        %10 = cir.binop(mul, %8, %9) nsw : !s32i loc(#loc94)
        cir.store %10, %7 : !s32i, !cir.ptr<!s32i> loc(#loc136)
        %11 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc95)
        cir.call @printIntLine(%11) : (!s32i) -> () loc(#loc96)
      } loc(#loc135)
    } loc(#loc133)
    cir.return loc(#loc73)
  } loc(#loc127)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE191_Integer_Underflow/s03/CWE191_Integer_Underflow__int_rand_multiply_18.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc5 = loc("CWE191_Integer_Underflow__int_rand_multiply_18.c":22:1)
#loc6 = loc("CWE191_Integer_Underflow__int_rand_multiply_18.c":39:1)
#loc7 = loc("CWE191_Integer_Underflow__int_rand_multiply_18.c":24:5)
#loc8 = loc("CWE191_Integer_Underflow__int_rand_multiply_18.c":24:9)
#loc9 = loc("CWE191_Integer_Underflow__int_rand_multiply_18.c":26:12)
#loc10 = loc("CWE191_Integer_Underflow__int_rand_multiply_18.c":26:5)
#loc11 = loc("CWE191_Integer_Underflow__int_rand_multiply_18.c":27:5)
#loc12 = loc("CWE191_Integer_Underflow__int_rand_multiply_18.c":27:10)
#loc13 = loc("CWE191_Integer_Underflow__int_rand_multiply_18.c":28:1)
#loc14 = loc("CWE191_Integer_Underflow__int_rand_multiply_18.c":30:12)
#loc15 = loc("CWE191_Integer_Underflow__int_rand_multiply_18.c":30:5)
#loc16 = loc("CWE191_Integer_Underflow__int_rand_multiply_18.c":31:5)
#loc17 = loc("CWE191_Integer_Underflow__int_rand_multiply_18.c":31:10)
#loc18 = loc("CWE191_Integer_Underflow__int_rand_multiply_18.c":32:1)
#loc19 = loc("CWE191_Integer_Underflow__int_rand_multiply_18.c":33:5)
#loc20 = loc("CWE191_Integer_Underflow__int_rand_multiply_18.c":38:5)
#loc21 = loc("CWE191_Integer_Underflow__int_rand_multiply_18.c":33:8)
#loc22 = loc("CWE191_Integer_Underflow__int_rand_multiply_18.c":33:15)
#loc23 = loc("CWE191_Integer_Underflow__int_rand_multiply_18.c":34:5)
#loc24 = loc("CWE191_Integer_Underflow__int_rand_multiply_18.c":36:9)
#loc25 = loc("CWE191_Integer_Underflow__int_rand_multiply_18.c":36:29)
#loc26 = loc("CWE191_Integer_Underflow__int_rand_multiply_18.c":36:22)
#loc27 = loc("CWE191_Integer_Underflow__int_rand_multiply_18.c":37:22)
#loc28 = loc("CWE191_Integer_Underflow__int_rand_multiply_18.c":37:9)
#loc29 = loc("CWE191_Integer_Underflow__int_rand_multiply_18.c":92:1)
#loc30 = loc("CWE191_Integer_Underflow__int_rand_multiply_18.c":96:1)
#loc31 = loc("CWE191_Integer_Underflow__int_rand_multiply_18.c":94:5)
#loc32 = loc("CWE191_Integer_Underflow__int_rand_multiply_18.c":94:13)
#loc33 = loc("CWE191_Integer_Underflow__int_rand_multiply_18.c":95:5)
#loc34 = loc("CWE191_Integer_Underflow__int_rand_multiply_18.c":95:13)
#loc35 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc36 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc37 = loc("CWE191_Integer_Underflow__int_rand_multiply_18.c":67:23)
#loc38 = loc("CWE191_Integer_Underflow__int_rand_multiply_18.c":46:1)
#loc39 = loc("CWE191_Integer_Underflow__int_rand_multiply_18.c":70:1)
#loc40 = loc("CWE191_Integer_Underflow__int_rand_multiply_18.c":48:5)
#loc41 = loc("CWE191_Integer_Underflow__int_rand_multiply_18.c":48:9)
#loc42 = loc("CWE191_Integer_Underflow__int_rand_multiply_18.c":50:12)
#loc43 = loc("CWE191_Integer_Underflow__int_rand_multiply_18.c":50:5)
#loc44 = loc("CWE191_Integer_Underflow__int_rand_multiply_18.c":51:5)
#loc45 = loc("CWE191_Integer_Underflow__int_rand_multiply_18.c":51:10)
#loc46 = loc("CWE191_Integer_Underflow__int_rand_multiply_18.c":52:1)
#loc47 = loc("CWE191_Integer_Underflow__int_rand_multiply_18.c":54:12)
#loc48 = loc("CWE191_Integer_Underflow__int_rand_multiply_18.c":54:5)
#loc49 = loc("CWE191_Integer_Underflow__int_rand_multiply_18.c":55:5)
#loc50 = loc("CWE191_Integer_Underflow__int_rand_multiply_18.c":55:10)
#loc51 = loc("CWE191_Integer_Underflow__int_rand_multiply_18.c":56:1)
#loc52 = loc("CWE191_Integer_Underflow__int_rand_multiply_18.c":57:5)
#loc53 = loc("CWE191_Integer_Underflow__int_rand_multiply_18.c":69:5)
#loc54 = loc("CWE191_Integer_Underflow__int_rand_multiply_18.c":57:8)
#loc55 = loc("CWE191_Integer_Underflow__int_rand_multiply_18.c":57:15)
#loc56 = loc("CWE191_Integer_Underflow__int_rand_multiply_18.c":58:5)
#loc57 = loc("CWE191_Integer_Underflow__int_rand_multiply_18.c":60:9)
#loc58 = loc("CWE191_Integer_Underflow__int_rand_multiply_18.c":68:9)
#loc59 = loc("CWE191_Integer_Underflow__int_rand_multiply_18.c":60:13)
#loc60 = loc("CWE191_Integer_Underflow__int_rand_multiply_18.c":60:21)
#loc61 = loc("CWE191_Integer_Underflow__int_rand_multiply_18.c":60:29)
#loc62 = loc("CWE191_Integer_Underflow__int_rand_multiply_18.c":60:30)
#loc63 = loc("CWE191_Integer_Underflow__int_rand_multiply_18.c":61:9)
#loc64 = loc("CWE191_Integer_Underflow__int_rand_multiply_18.c":64:9)
#loc65 = loc("CWE191_Integer_Underflow__int_rand_multiply_18.c":66:9)
#loc66 = loc("CWE191_Integer_Underflow__int_rand_multiply_18.c":62:13)
#loc67 = loc("CWE191_Integer_Underflow__int_rand_multiply_18.c":62:33)
#loc68 = loc("CWE191_Integer_Underflow__int_rand_multiply_18.c":62:26)
#loc69 = loc("CWE191_Integer_Underflow__int_rand_multiply_18.c":63:26)
#loc70 = loc("CWE191_Integer_Underflow__int_rand_multiply_18.c":63:13)
#loc71 = loc("CWE191_Integer_Underflow__int_rand_multiply_18.c":67:13)
#loc72 = loc("CWE191_Integer_Underflow__int_rand_multiply_18.c":73:1)
#loc73 = loc("CWE191_Integer_Underflow__int_rand_multiply_18.c":90:1)
#loc74 = loc("CWE191_Integer_Underflow__int_rand_multiply_18.c":75:5)
#loc75 = loc("CWE191_Integer_Underflow__int_rand_multiply_18.c":75:9)
#loc76 = loc("CWE191_Integer_Underflow__int_rand_multiply_18.c":77:12)
#loc77 = loc("CWE191_Integer_Underflow__int_rand_multiply_18.c":77:5)
#loc78 = loc("CWE191_Integer_Underflow__int_rand_multiply_18.c":78:5)
#loc79 = loc("CWE191_Integer_Underflow__int_rand_multiply_18.c":78:10)
#loc80 = loc("CWE191_Integer_Underflow__int_rand_multiply_18.c":79:1)
#loc81 = loc("CWE191_Integer_Underflow__int_rand_multiply_18.c":81:13)
#loc82 = loc("CWE191_Integer_Underflow__int_rand_multiply_18.c":81:12)
#loc83 = loc("CWE191_Integer_Underflow__int_rand_multiply_18.c":81:5)
#loc84 = loc("CWE191_Integer_Underflow__int_rand_multiply_18.c":82:5)
#loc85 = loc("CWE191_Integer_Underflow__int_rand_multiply_18.c":82:10)
#loc86 = loc("CWE191_Integer_Underflow__int_rand_multiply_18.c":83:1)
#loc87 = loc("CWE191_Integer_Underflow__int_rand_multiply_18.c":84:5)
#loc88 = loc("CWE191_Integer_Underflow__int_rand_multiply_18.c":89:5)
#loc89 = loc("CWE191_Integer_Underflow__int_rand_multiply_18.c":84:8)
#loc90 = loc("CWE191_Integer_Underflow__int_rand_multiply_18.c":84:15)
#loc91 = loc("CWE191_Integer_Underflow__int_rand_multiply_18.c":85:5)
#loc92 = loc("CWE191_Integer_Underflow__int_rand_multiply_18.c":87:9)
#loc93 = loc("CWE191_Integer_Underflow__int_rand_multiply_18.c":87:29)
#loc94 = loc("CWE191_Integer_Underflow__int_rand_multiply_18.c":87:22)
#loc95 = loc("CWE191_Integer_Underflow__int_rand_multiply_18.c":88:22)
#loc96 = loc("CWE191_Integer_Underflow__int_rand_multiply_18.c":88:9)
#loc97 = loc(fused[#loc1, #loc2])
#loc98 = loc(fused[#loc3, #loc4])
#loc99 = loc(fused[#loc5, #loc6])
#loc100 = loc(fused[#loc7, #loc8])
#loc101 = loc(fused[#loc10, #loc9])
#loc102 = loc(fused[#loc11, #loc12])
#loc103 = loc(fused[#loc15, #loc14])
#loc104 = loc(fused[#loc16, #loc17])
#loc105 = loc(fused[#loc19, #loc20])
#loc106 = loc(fused[#loc21, #loc22])
#loc107 = loc(fused[#loc23, #loc20])
#loc108 = loc(fused[#loc24, #loc25])
#loc109 = loc(fused[#loc29, #loc30])
#loc110 = loc(fused[#loc31, #loc32])
#loc111 = loc(fused[#loc33, #loc34])
#loc112 = loc(fused[#loc35, #loc36])
#loc113 = loc(fused[#loc38, #loc39])
#loc114 = loc(fused[#loc40, #loc41])
#loc115 = loc(fused[#loc43, #loc42])
#loc116 = loc(fused[#loc44, #loc45])
#loc117 = loc(fused[#loc48, #loc47])
#loc118 = loc(fused[#loc49, #loc50])
#loc119 = loc(fused[#loc52, #loc53])
#loc120 = loc(fused[#loc54, #loc55])
#loc121 = loc(fused[#loc56, #loc53])
#loc122 = loc(fused[#loc57, #loc58])
#loc123 = loc(fused[#loc60, #loc61])
#loc124 = loc(fused[#loc59, #loc62])
#loc125 = loc(fused[#loc63, #loc64, #loc65, #loc58])
#loc126 = loc(fused[#loc66, #loc67])
#loc127 = loc(fused[#loc72, #loc73])
#loc128 = loc(fused[#loc74, #loc75])
#loc129 = loc(fused[#loc77, #loc76])
#loc130 = loc(fused[#loc78, #loc79])
#loc131 = loc(fused[#loc83, #loc81])
#loc132 = loc(fused[#loc84, #loc85])
#loc133 = loc(fused[#loc87, #loc88])
#loc134 = loc(fused[#loc89, #loc90])
#loc135 = loc(fused[#loc91, #loc88])
#loc136 = loc(fused[#loc92, #loc93])
