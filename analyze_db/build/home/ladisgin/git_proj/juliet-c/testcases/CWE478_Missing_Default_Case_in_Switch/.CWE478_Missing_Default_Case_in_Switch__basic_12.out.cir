!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc75 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":129:10)
#loc76 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":129:14)
#loc77 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":129:20)
#loc78 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":129:32)
#loc176 = loc(fused[#loc75, #loc76])
#loc177 = loc(fused[#loc77, #loc78])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE478_Missing_Default_Case_in_Switch/CWE478_Missing_Default_Case_in_Switch__basic_12.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func no_proto private @globalReturnsTrueOrFalse(...) -> !s32i loc(#loc148)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"shouldn't see this value\00" : !cir.array<!s8i x 25>> : !cir.array<!s8i x 25> {alignment = 1 : i64} loc(#loc3)
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc149)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"0\00" : !cir.array<!s8i x 2>> : !cir.array<!s8i x 2> {alignment = 1 : i64} loc(#loc6)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"1\00" : !cir.array<!s8i x 2>> : !cir.array<!s8i x 2> {alignment = 1 : i64} loc(#loc7)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc150)
  cir.func no_proto @CWE478_Missing_Default_Case_in_Switch__basic_12_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["charString", init] {alignment = 8 : i64} loc(#loc152)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["x"] {alignment = 4 : i64} loc(#loc153)
    %2 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["charString", init] {alignment = 8 : i64} loc(#loc154)
    %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["x"] {alignment = 4 : i64} loc(#loc155)
    cir.br ^bb1 loc(#loc156)
  ^bb1:  // pred: ^bb0
    %4 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc157)
    %5 = cir.cast(bitcast, %4 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc157)
    %6 = cir.call %5() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc21)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc21)
    cir.brcond %7 ^bb2, ^bb12 loc(#loc158)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc159)
  ^bb3:  // pred: ^bb2
    %8 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 25>> loc(#loc3)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 25>>), !cir.ptr<!s8i> loc(#loc3)
    cir.store %9, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc152)
    %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc28)
    %11 = cir.const #cir.int<3> : !s32i loc(#loc29)
    %12 = cir.binop(rem, %10, %11) : !s32i loc(#loc160)
    cir.store %12, %1 : !s32i, !cir.ptr<!s32i> loc(#loc161)
    cir.br ^bb4 loc(#loc162)
  ^bb4:  // pred: ^bb3
    %13 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc34)
    cir.br ^bb5 loc(#loc32)
  ^bb5:  // pred: ^bb4
    cir.switch.flat %13 : !s32i, ^bb9 [
      0: ^bb7,
      1: ^bb8
    ] loc(#loc32)
  ^bb6:  // no predecessors
    cir.br ^bb7 loc(#loc35)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    %14 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 2>> loc(#loc6)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 2>>), !cir.ptr<!s8i> loc(#loc6)
    cir.store %15, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc163)
    cir.br ^bb9 loc(#loc37)
  ^bb8:  // pred: ^bb5
    %16 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 2>> loc(#loc7)
    %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 2>>), !cir.ptr<!s8i> loc(#loc7)
    cir.store %17, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc164)
    cir.br ^bb9 loc(#loc39)
  ^bb9:  // 3 preds: ^bb5, ^bb7, ^bb8
    cir.br ^bb10 loc(#loc33)
  ^bb10:  // pred: ^bb9
    %18 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc40)
    cir.call @printLine(%18) : (!cir.ptr<!s8i>) -> () loc(#loc41)
    cir.br ^bb11 loc(#loc27)
  ^bb11:  // pred: ^bb10
    cir.br ^bb23 loc(#loc24)
  ^bb12:  // pred: ^bb1
    cir.br ^bb13 loc(#loc165)
  ^bb13:  // pred: ^bb12
    %19 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 25>> loc(#loc16)
    %20 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 25>>), !cir.ptr<!s8i> loc(#loc16)
    cir.store %20, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc154)
    %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc44)
    %22 = cir.const #cir.int<3> : !s32i loc(#loc45)
    %23 = cir.binop(rem, %21, %22) : !s32i loc(#loc166)
    cir.store %23, %3 : !s32i, !cir.ptr<!s32i> loc(#loc167)
    cir.br ^bb14 loc(#loc168)
  ^bb14:  // pred: ^bb13
    %24 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc50)
    cir.br ^bb15 loc(#loc48)
  ^bb15:  // pred: ^bb14
    cir.switch.flat %24 : !s32i, ^bb19 [
      0: ^bb17,
      1: ^bb18
    ] loc(#loc48)
  ^bb16:  // no predecessors
    cir.br ^bb17 loc(#loc51)
  ^bb17:  // 2 preds: ^bb15, ^bb16
    %25 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 2>> loc(#loc52)
    %26 = cir.cast(array_to_ptrdecay, %25 : !cir.ptr<!cir.array<!s8i x 2>>), !cir.ptr<!s8i> loc(#loc52)
    cir.store %26, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc169)
    cir.br ^bb20 loc(#loc54)
  ^bb18:  // pred: ^bb15
    %27 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 2>> loc(#loc55)
    %28 = cir.cast(array_to_ptrdecay, %27 : !cir.ptr<!cir.array<!s8i x 2>>), !cir.ptr<!s8i> loc(#loc55)
    cir.store %28, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc170)
    cir.br ^bb20 loc(#loc57)
  ^bb19:  // pred: ^bb15
    cir.return loc(#loc58)
  ^bb20:  // 2 preds: ^bb17, ^bb18
    cir.br ^bb21 loc(#loc49)
  ^bb21:  // pred: ^bb20
    %29 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc59)
    cir.call @printLine(%29) : (!cir.ptr<!s8i>) -> () loc(#loc60)
    cir.br ^bb22 loc(#loc43)
  ^bb22:  // pred: ^bb21
    cir.br ^bb23 loc(#loc20)
  ^bb23:  // 2 preds: ^bb11, ^bb22
    cir.br ^bb24 loc(#loc20)
  ^bb24:  // pred: ^bb23
    cir.return loc(#loc11)
  } loc(#loc151)
  cir.func no_proto @CWE478_Missing_Default_Case_in_Switch__basic_12_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<!void ()>> loc(#loc172)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc63)
    cir.return loc(#loc62)
  } loc(#loc171)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc173)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc174)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc69)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc70)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc71)
  cir.global "private" constant cir_private dsolocal @".str.6" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc72)
  cir.func @main(%arg0: !s32i loc(fused[#loc75, #loc76]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc77, #loc78])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc176)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc177)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc74)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc79)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc79)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc80)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc81)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc81)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc82)
    %6 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc69)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc69)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc83)
    %8 = cir.get_global @CWE478_Missing_Default_Case_in_Switch__basic_12_good : !cir.ptr<!cir.func<!void ()>> loc(#loc178)
    cir.call @CWE478_Missing_Default_Case_in_Switch__basic_12_good() : () -> () loc(#loc84)
    %9 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc70)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc70)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc86)
    %11 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc71)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc71)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc87)
    %13 = cir.get_global @CWE478_Missing_Default_Case_in_Switch__basic_12_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc179)
    cir.call @CWE478_Missing_Default_Case_in_Switch__basic_12_bad() : () -> () loc(#loc88)
    %14 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc72)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc72)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc90)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc91)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc180)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc180)
    cir.return %17 : !s32i loc(#loc180)
  } loc(#loc175)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["charString", init] {alignment = 8 : i64} loc(#loc182)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["x"] {alignment = 4 : i64} loc(#loc183)
    %2 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["charString", init] {alignment = 8 : i64} loc(#loc184)
    %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["x"] {alignment = 4 : i64} loc(#loc185)
    cir.br ^bb1 loc(#loc186)
  ^bb1:  // pred: ^bb0
    %4 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc187)
    %5 = cir.cast(bitcast, %4 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc187)
    %6 = cir.call %5() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc105)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc105)
    cir.brcond %7 ^bb2, ^bb13 loc(#loc188)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc189)
  ^bb3:  // pred: ^bb2
    %8 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 25>> loc(#loc96)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 25>>), !cir.ptr<!s8i> loc(#loc96)
    cir.store %9, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc182)
    %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc112)
    %11 = cir.const #cir.int<3> : !s32i loc(#loc113)
    %12 = cir.binop(rem, %10, %11) : !s32i loc(#loc190)
    cir.store %12, %1 : !s32i, !cir.ptr<!s32i> loc(#loc191)
    cir.br ^bb4 loc(#loc192)
  ^bb4:  // pred: ^bb3
    %13 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc118)
    cir.br ^bb5 loc(#loc116)
  ^bb5:  // pred: ^bb4
    cir.switch.flat %13 : !s32i, ^bb9 [
      0: ^bb7,
      1: ^bb8
    ] loc(#loc116)
  ^bb6:  // no predecessors
    cir.br ^bb7 loc(#loc119)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    %14 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 2>> loc(#loc120)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 2>>), !cir.ptr<!s8i> loc(#loc120)
    cir.store %15, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc193)
    cir.br ^bb10 loc(#loc122)
  ^bb8:  // pred: ^bb5
    %16 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 2>> loc(#loc123)
    %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 2>>), !cir.ptr<!s8i> loc(#loc123)
    cir.store %17, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc194)
    cir.br ^bb10 loc(#loc125)
  ^bb9:  // pred: ^bb5
    cir.return loc(#loc126)
  ^bb10:  // 2 preds: ^bb7, ^bb8
    cir.br ^bb11 loc(#loc117)
  ^bb11:  // pred: ^bb10
    %18 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc127)
    cir.call @printLine(%18) : (!cir.ptr<!s8i>) -> () loc(#loc128)
    cir.br ^bb12 loc(#loc111)
  ^bb12:  // pred: ^bb11
    cir.br ^bb24 loc(#loc108)
  ^bb13:  // pred: ^bb1
    cir.br ^bb14 loc(#loc195)
  ^bb14:  // pred: ^bb13
    %19 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 25>> loc(#loc100)
    %20 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 25>>), !cir.ptr<!s8i> loc(#loc100)
    cir.store %20, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc184)
    %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc131)
    %22 = cir.const #cir.int<3> : !s32i loc(#loc132)
    %23 = cir.binop(rem, %21, %22) : !s32i loc(#loc196)
    cir.store %23, %3 : !s32i, !cir.ptr<!s32i> loc(#loc197)
    cir.br ^bb15 loc(#loc198)
  ^bb15:  // pred: ^bb14
    %24 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc137)
    cir.br ^bb16 loc(#loc135)
  ^bb16:  // pred: ^bb15
    cir.switch.flat %24 : !s32i, ^bb20 [
      0: ^bb18,
      1: ^bb19
    ] loc(#loc135)
  ^bb17:  // no predecessors
    cir.br ^bb18 loc(#loc138)
  ^bb18:  // 2 preds: ^bb16, ^bb17
    %25 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 2>> loc(#loc139)
    %26 = cir.cast(array_to_ptrdecay, %25 : !cir.ptr<!cir.array<!s8i x 2>>), !cir.ptr<!s8i> loc(#loc139)
    cir.store %26, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc199)
    cir.br ^bb21 loc(#loc141)
  ^bb19:  // pred: ^bb16
    %27 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 2>> loc(#loc142)
    %28 = cir.cast(array_to_ptrdecay, %27 : !cir.ptr<!cir.array<!s8i x 2>>), !cir.ptr<!s8i> loc(#loc142)
    cir.store %28, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc200)
    cir.br ^bb21 loc(#loc144)
  ^bb20:  // pred: ^bb16
    cir.return loc(#loc145)
  ^bb21:  // 2 preds: ^bb18, ^bb19
    cir.br ^bb22 loc(#loc136)
  ^bb22:  // pred: ^bb21
    %29 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc146)
    cir.call @printLine(%29) : (!cir.ptr<!s8i>) -> () loc(#loc147)
    cir.br ^bb23 loc(#loc130)
  ^bb23:  // pred: ^bb22
    cir.br ^bb24 loc(#loc104)
  ^bb24:  // 2 preds: ^bb12, ^bb23
    cir.br ^bb25 loc(#loc104)
  ^bb25:  // pred: ^bb24
    cir.return loc(#loc94)
  } loc(#loc181)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE478_Missing_Default_Case_in_Switch/CWE478_Missing_Default_Case_in_Switch__basic_12.c":0:0)
#loc1 = loc("../../testcasesupport/std_testcase_io.h":52:1)
#loc2 = loc("../../testcasesupport/std_testcase_io.h":52:30)
#loc3 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":25:38)
#loc4 = loc("/usr/include/stdlib.h":573:1)
#loc5 = loc("/usr/include/stdlib.h":573:24)
#loc6 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":31:30)
#loc7 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":34:30)
#loc8 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc9 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc10 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":20:1)
#loc11 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":62:1)
#loc12 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":25:13)
#loc13 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":26:13)
#loc14 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":26:17)
#loc15 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":44:13)
#loc16 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":44:38)
#loc17 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":45:13)
#loc18 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":45:17)
#loc19 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":22:5)
#loc20 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":61:5)
#loc21 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":22:8)
#loc22 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":22:33)
#loc23 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":23:5)
#loc24 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":40:5)
#loc25 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":42:5)
#loc26 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":24:9)
#loc27 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":39:9)
#loc28 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":27:18)
#loc29 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":27:27)
#loc30 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":27:13)
#loc31 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":27:28)
#loc32 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":28:13)
#loc33 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":37:13)
#loc34 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":28:21)
#loc35 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":30:13)
#loc36 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":31:17)
#loc37 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":32:17)
#loc38 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":34:17)
#loc39 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":35:17)
#loc40 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":38:23)
#loc41 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":38:13)
#loc42 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":43:9)
#loc43 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":60:9)
#loc44 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":46:18)
#loc45 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":46:27)
#loc46 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":46:13)
#loc47 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":46:28)
#loc48 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":47:13)
#loc49 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":58:13)
#loc50 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":47:21)
#loc51 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":49:13)
#loc52 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":50:30)
#loc53 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":50:17)
#loc54 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":51:17)
#loc55 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":53:30)
#loc56 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":53:17)
#loc57 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":54:17)
#loc58 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":57:17)
#loc59 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":59:23)
#loc60 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":59:13)
#loc61 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":115:1)
#loc62 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":118:1)
#loc63 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":117:5)
#loc64 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":117:11)
#loc65 = loc("/usr/include/stdlib.h":575:1)
#loc66 = loc("/usr/include/stdlib.h":575:41)
#loc67 = loc("/usr/include/time.h":76:1)
#loc68 = loc("/usr/include/time.h":76:38)
#loc69 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":134:15)
#loc70 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":136:15)
#loc71 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":139:15)
#loc72 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":141:15)
#loc73 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":129:1)
#loc74 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":144:1)
#loc79 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":130:1)
#loc80 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":132:27)
#loc81 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":132:22)
#loc82 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":132:5)
#loc83 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":134:5)
#loc84 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":135:5)
#loc85 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":135:58)
#loc86 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":136:5)
#loc87 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":139:5)
#loc88 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":140:5)
#loc89 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":140:57)
#loc90 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":141:5)
#loc91 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":143:12)
#loc92 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":143:5)
#loc93 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":69:1)
#loc94 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":113:1)
#loc95 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":74:13)
#loc96 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":74:38)
#loc97 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":75:13)
#loc98 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":75:17)
#loc99 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":95:13)
#loc100 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":95:38)
#loc101 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":96:13)
#loc102 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":96:17)
#loc103 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":71:5)
#loc104 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":112:5)
#loc105 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":71:8)
#loc106 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":71:33)
#loc107 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":72:5)
#loc108 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":91:5)
#loc109 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":93:5)
#loc110 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":73:9)
#loc111 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":90:9)
#loc112 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":76:18)
#loc113 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":76:27)
#loc114 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":76:13)
#loc115 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":76:28)
#loc116 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":77:13)
#loc117 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":88:13)
#loc118 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":77:21)
#loc119 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":79:13)
#loc120 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":80:30)
#loc121 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":80:17)
#loc122 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":81:17)
#loc123 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":83:30)
#loc124 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":83:17)
#loc125 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":84:17)
#loc126 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":87:17)
#loc127 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":89:23)
#loc128 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":89:13)
#loc129 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":94:9)
#loc130 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":111:9)
#loc131 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":97:18)
#loc132 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":97:27)
#loc133 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":97:13)
#loc134 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":97:28)
#loc135 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":98:13)
#loc136 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":109:13)
#loc137 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":98:21)
#loc138 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":100:13)
#loc139 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":101:30)
#loc140 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":101:17)
#loc141 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":102:17)
#loc142 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":104:30)
#loc143 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":104:17)
#loc144 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":105:17)
#loc145 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":108:17)
#loc146 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":110:23)
#loc147 = loc("CWE478_Missing_Default_Case_in_Switch__basic_12.c":110:13)
#loc148 = loc(fused[#loc1, #loc2])
#loc149 = loc(fused[#loc4, #loc5])
#loc150 = loc(fused[#loc8, #loc9])
#loc151 = loc(fused[#loc10, #loc11])
#loc152 = loc(fused[#loc12, #loc3])
#loc153 = loc(fused[#loc13, #loc14])
#loc154 = loc(fused[#loc15, #loc16])
#loc155 = loc(fused[#loc17, #loc18])
#loc156 = loc(fused[#loc19, #loc20])
#loc157 = loc(fused[#loc21, #loc22])
#loc158 = loc(fused[#loc23, #loc24, #loc25, #loc20])
#loc159 = loc(fused[#loc26, #loc27])
#loc160 = loc(fused[#loc28, #loc29])
#loc161 = loc(fused[#loc30, #loc31])
#loc162 = loc(fused[#loc32, #loc33])
#loc163 = loc(fused[#loc36, #loc6])
#loc164 = loc(fused[#loc38, #loc7])
#loc165 = loc(fused[#loc42, #loc43])
#loc166 = loc(fused[#loc44, #loc45])
#loc167 = loc(fused[#loc46, #loc47])
#loc168 = loc(fused[#loc48, #loc49])
#loc169 = loc(fused[#loc53, #loc52])
#loc170 = loc(fused[#loc56, #loc55])
#loc171 = loc(fused[#loc61, #loc62])
#loc172 = loc(fused[#loc63, #loc64])
#loc173 = loc(fused[#loc65, #loc66])
#loc174 = loc(fused[#loc67, #loc68])
#loc175 = loc(fused[#loc73, #loc74])
#loc178 = loc(fused[#loc84, #loc85])
#loc179 = loc(fused[#loc88, #loc89])
#loc180 = loc(fused[#loc92, #loc91])
#loc181 = loc(fused[#loc93, #loc94])
#loc182 = loc(fused[#loc95, #loc96])
#loc183 = loc(fused[#loc97, #loc98])
#loc184 = loc(fused[#loc99, #loc100])
#loc185 = loc(fused[#loc101, #loc102])
#loc186 = loc(fused[#loc103, #loc104])
#loc187 = loc(fused[#loc105, #loc106])
#loc188 = loc(fused[#loc107, #loc108, #loc109, #loc104])
#loc189 = loc(fused[#loc110, #loc111])
#loc190 = loc(fused[#loc112, #loc113])
#loc191 = loc(fused[#loc114, #loc115])
#loc192 = loc(fused[#loc116, #loc117])
#loc193 = loc(fused[#loc121, #loc120])
#loc194 = loc(fused[#loc124, #loc123])
#loc195 = loc(fused[#loc129, #loc130])
#loc196 = loc(fused[#loc131, #loc132])
#loc197 = loc(fused[#loc133, #loc134])
#loc198 = loc(fused[#loc135, #loc136])
#loc199 = loc(fused[#loc140, #loc139])
#loc200 = loc(fused[#loc143, #loc142])
