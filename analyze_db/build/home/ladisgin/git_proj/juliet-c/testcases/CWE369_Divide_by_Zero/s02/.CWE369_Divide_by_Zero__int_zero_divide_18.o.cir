!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE369_Divide_by_Zero/s02/CWE369_Divide_by_Zero__int_zero_divide_18.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @printIntLine(!s32i) loc(#loc68)
  cir.func no_proto @CWE369_Divide_by_Zero__int_zero_divide_18_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc70)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc7)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc8)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc71)
    cir.br ^bb1 loc(#loc72)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.int<0> : !s32i loc(#loc12)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc73)
    cir.br ^bb2 loc(#loc74)
  ^bb2:  // pred: ^bb1
    %4 = cir.const #cir.int<100> : !s32i loc(#loc16)
    %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc17)
    %6 = cir.binop(div, %4, %5) : !s32i loc(#loc75)
    cir.call @printIntLine(%6) : (!s32i) -> () loc(#loc18)
    cir.return loc(#loc4)
  } loc(#loc69)
  cir.func no_proto @CWE369_Divide_by_Zero__int_zero_divide_18_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc77)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc21)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc78)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc23)
    cir.return loc(#loc20)
  } loc(#loc76)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc79)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"This would result in a divide by zero\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc27)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc81)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc32)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc33)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc82)
    cir.br ^bb1 loc(#loc83)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.int<0> : !s32i loc(#loc37)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc84)
    cir.br ^bb2 loc(#loc85)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc86)
  ^bb3:  // pred: ^bb2
    %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc43)
    %5 = cir.const #cir.int<0> : !s32i loc(#loc44)
    %6 = cir.cmp(ne, %4, %5) : !s32i, !cir.bool loc(#loc87)
    cir.brcond %6 ^bb4, ^bb5 loc(#loc88)
  ^bb4:  // pred: ^bb3
    %7 = cir.const #cir.int<100> : !s32i loc(#loc48)
    %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc49)
    %9 = cir.binop(div, %7, %8) : !s32i loc(#loc89)
    cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc50)
    cir.br ^bb6 loc(#loc46)
  ^bb5:  // pred: ^bb3
    %10 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc27)
    %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc27)
    cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc51)
    cir.br ^bb6 loc(#loc42)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc42)
  ^bb7:  // pred: ^bb6
    cir.return loc(#loc29)
  } loc(#loc80)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc91)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc56)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc57)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc92)
    cir.br ^bb1 loc(#loc93)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.int<7> : !s32i loc(#loc61)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc94)
    cir.br ^bb2 loc(#loc95)
  ^bb2:  // pred: ^bb1
    %4 = cir.const #cir.int<100> : !s32i loc(#loc65)
    %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc66)
    %6 = cir.binop(div, %4, %5) : !s32i loc(#loc96)
    cir.call @printIntLine(%6) : (!s32i) -> () loc(#loc67)
    cir.return loc(#loc53)
  } loc(#loc90)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE369_Divide_by_Zero/s02/CWE369_Divide_by_Zero__int_zero_divide_18.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("CWE369_Divide_by_Zero__int_zero_divide_18.c":22:1)
#loc4 = loc("CWE369_Divide_by_Zero__int_zero_divide_18.c":35:1)
#loc5 = loc("CWE369_Divide_by_Zero__int_zero_divide_18.c":24:5)
#loc6 = loc("CWE369_Divide_by_Zero__int_zero_divide_18.c":24:9)
#loc7 = loc("CWE369_Divide_by_Zero__int_zero_divide_18.c":26:13)
#loc8 = loc("CWE369_Divide_by_Zero__int_zero_divide_18.c":26:12)
#loc9 = loc("CWE369_Divide_by_Zero__int_zero_divide_18.c":26:5)
#loc10 = loc("CWE369_Divide_by_Zero__int_zero_divide_18.c":27:5)
#loc11 = loc("CWE369_Divide_by_Zero__int_zero_divide_18.c":27:10)
#loc12 = loc("CWE369_Divide_by_Zero__int_zero_divide_18.c":30:12)
#loc13 = loc("CWE369_Divide_by_Zero__int_zero_divide_18.c":30:5)
#loc14 = loc("CWE369_Divide_by_Zero__int_zero_divide_18.c":31:5)
#loc15 = loc("CWE369_Divide_by_Zero__int_zero_divide_18.c":31:10)
#loc16 = loc("CWE369_Divide_by_Zero__int_zero_divide_18.c":34:18)
#loc17 = loc("CWE369_Divide_by_Zero__int_zero_divide_18.c":34:24)
#loc18 = loc("CWE369_Divide_by_Zero__int_zero_divide_18.c":34:5)
#loc19 = loc("CWE369_Divide_by_Zero__int_zero_divide_18.c":80:1)
#loc20 = loc("CWE369_Divide_by_Zero__int_zero_divide_18.c":84:1)
#loc21 = loc("CWE369_Divide_by_Zero__int_zero_divide_18.c":82:5)
#loc22 = loc("CWE369_Divide_by_Zero__int_zero_divide_18.c":82:13)
#loc23 = loc("CWE369_Divide_by_Zero__int_zero_divide_18.c":83:5)
#loc24 = loc("CWE369_Divide_by_Zero__int_zero_divide_18.c":83:13)
#loc25 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc26 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc27 = loc("CWE369_Divide_by_Zero__int_zero_divide_18.c":60:19)
#loc28 = loc("CWE369_Divide_by_Zero__int_zero_divide_18.c":42:1)
#loc29 = loc("CWE369_Divide_by_Zero__int_zero_divide_18.c":62:1)
#loc30 = loc("CWE369_Divide_by_Zero__int_zero_divide_18.c":44:5)
#loc31 = loc("CWE369_Divide_by_Zero__int_zero_divide_18.c":44:9)
#loc32 = loc("CWE369_Divide_by_Zero__int_zero_divide_18.c":46:13)
#loc33 = loc("CWE369_Divide_by_Zero__int_zero_divide_18.c":46:12)
#loc34 = loc("CWE369_Divide_by_Zero__int_zero_divide_18.c":46:5)
#loc35 = loc("CWE369_Divide_by_Zero__int_zero_divide_18.c":47:5)
#loc36 = loc("CWE369_Divide_by_Zero__int_zero_divide_18.c":47:10)
#loc37 = loc("CWE369_Divide_by_Zero__int_zero_divide_18.c":50:12)
#loc38 = loc("CWE369_Divide_by_Zero__int_zero_divide_18.c":50:5)
#loc39 = loc("CWE369_Divide_by_Zero__int_zero_divide_18.c":51:5)
#loc40 = loc("CWE369_Divide_by_Zero__int_zero_divide_18.c":51:10)
#loc41 = loc("CWE369_Divide_by_Zero__int_zero_divide_18.c":54:5)
#loc42 = loc("CWE369_Divide_by_Zero__int_zero_divide_18.c":61:5)
#loc43 = loc("CWE369_Divide_by_Zero__int_zero_divide_18.c":54:9)
#loc44 = loc("CWE369_Divide_by_Zero__int_zero_divide_18.c":54:17)
#loc45 = loc("CWE369_Divide_by_Zero__int_zero_divide_18.c":55:5)
#loc46 = loc("CWE369_Divide_by_Zero__int_zero_divide_18.c":57:5)
#loc47 = loc("CWE369_Divide_by_Zero__int_zero_divide_18.c":59:5)
#loc48 = loc("CWE369_Divide_by_Zero__int_zero_divide_18.c":56:22)
#loc49 = loc("CWE369_Divide_by_Zero__int_zero_divide_18.c":56:28)
#loc50 = loc("CWE369_Divide_by_Zero__int_zero_divide_18.c":56:9)
#loc51 = loc("CWE369_Divide_by_Zero__int_zero_divide_18.c":60:9)
#loc52 = loc("CWE369_Divide_by_Zero__int_zero_divide_18.c":65:1)
#loc53 = loc("CWE369_Divide_by_Zero__int_zero_divide_18.c":78:1)
#loc54 = loc("CWE369_Divide_by_Zero__int_zero_divide_18.c":67:5)
#loc55 = loc("CWE369_Divide_by_Zero__int_zero_divide_18.c":67:9)
#loc56 = loc("CWE369_Divide_by_Zero__int_zero_divide_18.c":69:13)
#loc57 = loc("CWE369_Divide_by_Zero__int_zero_divide_18.c":69:12)
#loc58 = loc("CWE369_Divide_by_Zero__int_zero_divide_18.c":69:5)
#loc59 = loc("CWE369_Divide_by_Zero__int_zero_divide_18.c":70:5)
#loc60 = loc("CWE369_Divide_by_Zero__int_zero_divide_18.c":70:10)
#loc61 = loc("CWE369_Divide_by_Zero__int_zero_divide_18.c":73:12)
#loc62 = loc("CWE369_Divide_by_Zero__int_zero_divide_18.c":73:5)
#loc63 = loc("CWE369_Divide_by_Zero__int_zero_divide_18.c":74:5)
#loc64 = loc("CWE369_Divide_by_Zero__int_zero_divide_18.c":74:10)
#loc65 = loc("CWE369_Divide_by_Zero__int_zero_divide_18.c":77:18)
#loc66 = loc("CWE369_Divide_by_Zero__int_zero_divide_18.c":77:24)
#loc67 = loc("CWE369_Divide_by_Zero__int_zero_divide_18.c":77:5)
#loc68 = loc(fused[#loc1, #loc2])
#loc69 = loc(fused[#loc3, #loc4])
#loc70 = loc(fused[#loc5, #loc6])
#loc71 = loc(fused[#loc9, #loc7])
#loc72 = loc(fused[#loc10, #loc11])
#loc73 = loc(fused[#loc13, #loc12])
#loc74 = loc(fused[#loc14, #loc15])
#loc75 = loc(fused[#loc16, #loc17])
#loc76 = loc(fused[#loc19, #loc20])
#loc77 = loc(fused[#loc21, #loc22])
#loc78 = loc(fused[#loc23, #loc24])
#loc79 = loc(fused[#loc25, #loc26])
#loc80 = loc(fused[#loc28, #loc29])
#loc81 = loc(fused[#loc30, #loc31])
#loc82 = loc(fused[#loc34, #loc32])
#loc83 = loc(fused[#loc35, #loc36])
#loc84 = loc(fused[#loc38, #loc37])
#loc85 = loc(fused[#loc39, #loc40])
#loc86 = loc(fused[#loc41, #loc42])
#loc87 = loc(fused[#loc43, #loc44])
#loc88 = loc(fused[#loc45, #loc46, #loc47, #loc42])
#loc89 = loc(fused[#loc48, #loc49])
#loc90 = loc(fused[#loc52, #loc53])
#loc91 = loc(fused[#loc54, #loc55])
#loc92 = loc(fused[#loc58, #loc56])
#loc93 = loc(fused[#loc59, #loc60])
#loc94 = loc(fused[#loc62, #loc61])
#loc95 = loc(fused[#loc63, #loc64])
#loc96 = loc(fused[#loc65, #loc66])
