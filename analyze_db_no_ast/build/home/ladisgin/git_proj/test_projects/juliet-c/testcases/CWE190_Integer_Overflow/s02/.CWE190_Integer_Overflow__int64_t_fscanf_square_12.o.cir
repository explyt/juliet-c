!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.struct<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.struct<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.struct<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
!ty__IO_FILE = !cir.struct<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int64_t_fscanf_square_12.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func no_proto private  @globalReturnsTrueOrFalse(...) -> !s32i loc(#loc173)
  cir.func private  @__isoc99_fscanf(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i loc(#loc174)
  cir.global "private"  external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc175)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"%ld\00" : !cir.array<!s8i x 4>> : !cir.array<!s8i x 4> {alignment = 1 : i64} loc(#loc176)
  cir.func private  @printLongLongLine(!s64i) loc(#loc177)
  cir.func private  @imaxabs(!s64i) -> !s64i extra(#fn_attr) loc(#loc178)
  cir.func private  @sqrtl(!cir.long_double<!cir.f80>) -> !cir.long_double<!cir.f80> extra(#fn_attr) loc(#loc13)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc179)
  cir.global "private"  constant internal dsolocal @".str1" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc16)
  cir.func no_proto  @CWE190_Integer_Overflow__int64_t_fscanf_square_12_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc181)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc21)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc182)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc184)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc184)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc25)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc25)
      cir.if %5 {
        %6 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc30)
        %7 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc175)
        %8 = cir.load %7 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc31)
        %9 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc176)
        %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc176)
        %11 = cir.call @__isoc99_fscanf(%8, %10, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s64i>) -> !s32i loc(#loc30)
      } else {
        %6 = cir.const #cir.int<2> : !s32i loc(#loc32)
        %7 = cir.cast(integral, %6 : !s32i), !s64i loc(#loc32)
        cir.store %7, %0 : !s64i, !cir.ptr<!s64i> loc(#loc186)
      } loc(#loc185)
    } loc(#loc183)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc188)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc188)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc36)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc36)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc191)
          %7 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc45)
          %8 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc44)
          %9 = cir.binop(mul, %7, %8) nsw : !s64i loc(#loc45)
          cir.store %9, %6 : !s64i, !cir.ptr<!s64i> loc(#loc191)
          %10 = cir.load %6 : !cir.ptr<!s64i>, !s64i loc(#loc46)
          cir.call @printLongLongLine(%10) : (!s64i) -> () loc(#loc47)
        } loc(#loc190)
      } else {
        cir.scope {
          %6 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc50)
          %7 = cir.call @imaxabs(%6) : (!s64i) -> !s64i extra(#fn_attr) loc(#loc51)
          %8 = cir.cast(int_to_float, %7 : !s64i), !cir.long_double<!cir.f80> loc(#loc51)
          %9 = cir.get_global @sqrtl : !cir.ptr<!cir.func<!cir.long_double<!cir.f80> (!cir.long_double<!cir.f80>)>> loc(#loc52)
          %10 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc53)
          %11 = cir.cast(int_to_float, %10 : !s64i), !cir.long_double<!cir.f80> loc(#loc53)
          %12 = cir.call @sqrtl(%11) : (!cir.long_double<!cir.f80>) -> !cir.long_double<!cir.f80> extra(#fn_attr) loc(#loc52)
          %13 = cir.cmp(le, %8, %12) : !cir.long_double<!cir.f80>, !s32i loc(#loc193)
          %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc55)
          cir.if %14 {
            %15 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc195)
            %16 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc61)
            %17 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc60)
            %18 = cir.binop(mul, %16, %17) nsw : !s64i loc(#loc61)
            cir.store %18, %15 : !s64i, !cir.ptr<!s64i> loc(#loc195)
            %19 = cir.load %15 : !cir.ptr<!s64i>, !s64i loc(#loc62)
            cir.call @printLongLongLine(%19) : (!s64i) -> () loc(#loc63)
          } else {
            %15 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc16)
            %16 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc16)
            cir.call @printLine(%16) : (!cir.ptr<!s8i>) -> () loc(#loc64)
          } loc(#loc194)
        } loc(#loc192)
      } loc(#loc189)
    } loc(#loc187)
    cir.return loc(#loc18)
  } loc(#loc180)
  cir.func no_proto  @CWE190_Integer_Overflow__int64_t_fscanf_square_12_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc197)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc67)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc198)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc69)
    cir.return loc(#loc66)
  } loc(#loc196)
  cir.func no_proto internal private  @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc200)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc75)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc201)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc203)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc203)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc79)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc79)
      cir.if %5 {
        %6 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc84)
        %7 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc175)
        %8 = cir.load %7 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc85)
        %9 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc205)
        %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc205)
        %11 = cir.call @__isoc99_fscanf(%8, %10, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s64i>) -> !s32i loc(#loc84)
      } else {
        %6 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc88)
        %7 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc175)
        %8 = cir.load %7 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc89)
        %9 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc206)
        %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc206)
        %11 = cir.call @__isoc99_fscanf(%8, %10, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s64i>) -> !s32i loc(#loc88)
      } loc(#loc204)
    } loc(#loc202)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc208)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc208)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc94)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc94)
      cir.if %5 {
        cir.scope {
          %6 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc101)
          %7 = cir.call @imaxabs(%6) : (!s64i) -> !s64i extra(#fn_attr) loc(#loc102)
          %8 = cir.cast(int_to_float, %7 : !s64i), !cir.long_double<!cir.f80> loc(#loc102)
          %9 = cir.get_global @sqrtl : !cir.ptr<!cir.func<!cir.long_double<!cir.f80> (!cir.long_double<!cir.f80>)>> loc(#loc103)
          %10 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc104)
          %11 = cir.cast(int_to_float, %10 : !s64i), !cir.long_double<!cir.f80> loc(#loc104)
          %12 = cir.call @sqrtl(%11) : (!cir.long_double<!cir.f80>) -> !cir.long_double<!cir.f80> extra(#fn_attr) loc(#loc103)
          %13 = cir.cmp(le, %8, %12) : !cir.long_double<!cir.f80>, !s32i loc(#loc211)
          %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc106)
          cir.if %14 {
            %15 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc213)
            %16 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc112)
            %17 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc111)
            %18 = cir.binop(mul, %16, %17) nsw : !s64i loc(#loc112)
            cir.store %18, %15 : !s64i, !cir.ptr<!s64i> loc(#loc213)
            %19 = cir.load %15 : !cir.ptr<!s64i>, !s64i loc(#loc113)
            cir.call @printLongLongLine(%19) : (!s64i) -> () loc(#loc114)
          } else {
            %15 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc115)
            %16 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc115)
            cir.call @printLine(%16) : (!cir.ptr<!s8i>) -> () loc(#loc116)
          } loc(#loc212)
        } loc(#loc210)
      } else {
        cir.scope {
          %6 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc119)
          %7 = cir.call @imaxabs(%6) : (!s64i) -> !s64i extra(#fn_attr) loc(#loc120)
          %8 = cir.cast(int_to_float, %7 : !s64i), !cir.long_double<!cir.f80> loc(#loc120)
          %9 = cir.get_global @sqrtl : !cir.ptr<!cir.func<!cir.long_double<!cir.f80> (!cir.long_double<!cir.f80>)>> loc(#loc121)
          %10 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc122)
          %11 = cir.cast(int_to_float, %10 : !s64i), !cir.long_double<!cir.f80> loc(#loc122)
          %12 = cir.call @sqrtl(%11) : (!cir.long_double<!cir.f80>) -> !cir.long_double<!cir.f80> extra(#fn_attr) loc(#loc121)
          %13 = cir.cmp(le, %8, %12) : !cir.long_double<!cir.f80>, !s32i loc(#loc215)
          %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc124)
          cir.if %14 {
            %15 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc217)
            %16 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc130)
            %17 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc129)
            %18 = cir.binop(mul, %16, %17) nsw : !s64i loc(#loc130)
            cir.store %18, %15 : !s64i, !cir.ptr<!s64i> loc(#loc217)
            %19 = cir.load %15 : !cir.ptr<!s64i>, !s64i loc(#loc131)
            cir.call @printLongLongLine(%19) : (!s64i) -> () loc(#loc132)
          } else {
            %15 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc133)
            %16 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc133)
            cir.call @printLine(%16) : (!cir.ptr<!s8i>) -> () loc(#loc134)
          } loc(#loc216)
        } loc(#loc214)
      } loc(#loc209)
    } loc(#loc207)
    cir.return loc(#loc72)
  } loc(#loc199)
  cir.func no_proto internal private  @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc219)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc139)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc220)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc222)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc222)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc143)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc143)
      cir.if %5 {
        %6 = cir.const #cir.int<2> : !s32i loc(#loc148)
        %7 = cir.cast(integral, %6 : !s32i), !s64i loc(#loc148)
        cir.store %7, %0 : !s64i, !cir.ptr<!s64i> loc(#loc224)
      } else {
        %6 = cir.const #cir.int<2> : !s32i loc(#loc150)
        %7 = cir.cast(integral, %6 : !s32i), !s64i loc(#loc150)
        cir.store %7, %0 : !s64i, !cir.ptr<!s64i> loc(#loc225)
      } loc(#loc223)
    } loc(#loc221)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc227)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc227)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc154)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc154)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc230)
          %7 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc163)
          %8 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc162)
          %9 = cir.binop(mul, %7, %8) nsw : !s64i loc(#loc163)
          cir.store %9, %6 : !s64i, !cir.ptr<!s64i> loc(#loc230)
          %10 = cir.load %6 : !cir.ptr<!s64i>, !s64i loc(#loc164)
          cir.call @printLongLongLine(%10) : (!s64i) -> () loc(#loc165)
        } loc(#loc229)
      } else {
        cir.scope {
          %6 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc232)
          %7 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc170)
          %8 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc169)
          %9 = cir.binop(mul, %7, %8) nsw : !s64i loc(#loc170)
          cir.store %9, %6 : !s64i, !cir.ptr<!s64i> loc(#loc232)
          %10 = cir.load %6 : !cir.ptr<!s64i>, !s64i loc(#loc171)
          cir.call @printLongLongLine(%10) : (!s64i) -> () loc(#loc172)
        } loc(#loc231)
      } loc(#loc228)
    } loc(#loc226)
    cir.return loc(#loc136)
  } loc(#loc218)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int64_t_fscanf_square_12.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":52:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":52:30)
#loc3 = loc("/usr/include/stdio.h":463:1)
#loc4 = loc("/usr/include/stdio.h":465:33)
#loc5 = loc("/usr/include/stdio.h":149:1)
#loc6 = loc("/usr/include/stdio.h":149:14)
#loc7 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_12.c":32:24)
#loc8 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_12.c":32:28)
#loc9 = loc("../../../testcasesupport/std_testcase_io.h":26:1)
#loc10 = loc("../../../testcasesupport/std_testcase_io.h":26:49)
#loc11 = loc("/usr/include/inttypes.h":351:1)
#loc12 = loc("/usr/include/inttypes.h":351:74)
#loc13 = loc("/usr/include/bits/mathcalls.h":143:1)
#loc14 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc15 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc16 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_12.c":57:23)
#loc17 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_12.c":25:1)
#loc18 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_12.c":60:1)
#loc19 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_12.c":27:5)
#loc20 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_12.c":27:13)
#loc21 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_12.c":28:12)
#loc22 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_12.c":28:5)
#loc23 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_12.c":29:5)
#loc24 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_12.c":38:5)
#loc25 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_12.c":29:8)
#loc26 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_12.c":29:33)
#loc27 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_12.c":30:5)
#loc28 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_12.c":33:5)
#loc29 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_12.c":35:5)
#loc30 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_12.c":32:9)
#loc31 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_12.c":32:17)
#loc32 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_12.c":37:16)
#loc33 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_12.c":37:9)
#loc34 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_12.c":39:5)
#loc35 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_12.c":59:5)
#loc36 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_12.c":39:8)
#loc37 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_12.c":39:33)
#loc38 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_12.c":40:5)
#loc39 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_12.c":46:5)
#loc40 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_12.c":48:5)
#loc41 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_12.c":41:9)
#loc42 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_12.c":45:9)
#loc43 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_12.c":43:13)
#loc44 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_12.c":43:37)
#loc45 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_12.c":43:30)
#loc46 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_12.c":44:31)
#loc47 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_12.c":44:13)
#loc48 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_12.c":50:9)
#loc49 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_12.c":58:9)
#loc50 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_12.c":50:31)
#loc51 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_12.c":50:13)
#loc52 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_12.c":50:40)
#loc53 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_12.c":50:46)
#loc54 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_12.c":50:55)
#loc55 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_12.c":50:37)
#loc56 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_12.c":51:9)
#loc57 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_12.c":54:9)
#loc58 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_12.c":56:9)
#loc59 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_12.c":52:13)
#loc60 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_12.c":52:37)
#loc61 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_12.c":52:30)
#loc62 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_12.c":53:31)
#loc63 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_12.c":53:13)
#loc64 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_12.c":57:13)
#loc65 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_12.c":146:1)
#loc66 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_12.c":150:1)
#loc67 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_12.c":148:5)
#loc68 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_12.c":148:13)
#loc69 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_12.c":149:5)
#loc70 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_12.c":149:13)
#loc71 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_12.c":69:1)
#loc72 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_12.c":109:1)
#loc73 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_12.c":71:5)
#loc74 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_12.c":71:13)
#loc75 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_12.c":72:12)
#loc76 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_12.c":72:5)
#loc77 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_12.c":73:5)
#loc78 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_12.c":82:5)
#loc79 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_12.c":73:8)
#loc80 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_12.c":73:33)
#loc81 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_12.c":74:5)
#loc82 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_12.c":77:5)
#loc83 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_12.c":79:5)
#loc84 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_12.c":76:9)
#loc85 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_12.c":76:17)
#loc86 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_12.c":76:24)
#loc87 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_12.c":76:28)
#loc88 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_12.c":81:9)
#loc89 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_12.c":81:17)
#loc90 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_12.c":81:24)
#loc91 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_12.c":81:28)
#loc92 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_12.c":83:5)
#loc93 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_12.c":108:5)
#loc94 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_12.c":83:8)
#loc95 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_12.c":83:33)
#loc96 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_12.c":84:5)
#loc97 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_12.c":95:5)
#loc98 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_12.c":97:5)
#loc99 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_12.c":86:9)
#loc100 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_12.c":94:9)
#loc101 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_12.c":86:31)
#loc102 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_12.c":86:13)
#loc103 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_12.c":86:40)
#loc104 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_12.c":86:46)
#loc105 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_12.c":86:55)
#loc106 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_12.c":86:37)
#loc107 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_12.c":87:9)
#loc108 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_12.c":90:9)
#loc109 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_12.c":92:9)
#loc110 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_12.c":88:13)
#loc111 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_12.c":88:37)
#loc112 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_12.c":88:30)
#loc113 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_12.c":89:31)
#loc114 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_12.c":89:13)
#loc115 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_12.c":93:23)
#loc116 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_12.c":93:13)
#loc117 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_12.c":99:9)
#loc118 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_12.c":107:9)
#loc119 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_12.c":99:31)
#loc120 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_12.c":99:13)
#loc121 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_12.c":99:40)
#loc122 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_12.c":99:46)
#loc123 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_12.c":99:55)
#loc124 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_12.c":99:37)
#loc125 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_12.c":100:9)
#loc126 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_12.c":103:9)
#loc127 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_12.c":105:9)
#loc128 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_12.c":101:13)
#loc129 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_12.c":101:37)
#loc130 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_12.c":101:30)
#loc131 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_12.c":102:31)
#loc132 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_12.c":102:13)
#loc133 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_12.c":106:23)
#loc134 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_12.c":106:13)
#loc135 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_12.c":114:1)
#loc136 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_12.c":144:1)
#loc137 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_12.c":116:5)
#loc138 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_12.c":116:13)
#loc139 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_12.c":117:12)
#loc140 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_12.c":117:5)
#loc141 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_12.c":118:5)
#loc142 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_12.c":127:5)
#loc143 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_12.c":118:8)
#loc144 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_12.c":118:33)
#loc145 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_12.c":119:5)
#loc146 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_12.c":122:5)
#loc147 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_12.c":124:5)
#loc148 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_12.c":121:16)
#loc149 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_12.c":121:9)
#loc150 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_12.c":126:16)
#loc151 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_12.c":126:9)
#loc152 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_12.c":128:5)
#loc153 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_12.c":143:5)
#loc154 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_12.c":128:8)
#loc155 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_12.c":128:33)
#loc156 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_12.c":129:5)
#loc157 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_12.c":135:5)
#loc158 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_12.c":137:5)
#loc159 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_12.c":130:9)
#loc160 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_12.c":134:9)
#loc161 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_12.c":132:13)
#loc162 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_12.c":132:37)
#loc163 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_12.c":132:30)
#loc164 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_12.c":133:31)
#loc165 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_12.c":133:13)
#loc166 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_12.c":138:9)
#loc167 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_12.c":142:9)
#loc168 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_12.c":140:13)
#loc169 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_12.c":140:37)
#loc170 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_12.c":140:30)
#loc171 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_12.c":141:31)
#loc172 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_12.c":141:13)
#loc173 = loc(fused[#loc1, #loc2])
#loc174 = loc(fused[#loc3, #loc4])
#loc175 = loc(fused[#loc5, #loc6])
#loc176 = loc(fused[#loc7, #loc8])
#loc177 = loc(fused[#loc9, #loc10])
#loc178 = loc(fused[#loc11, #loc12])
#loc179 = loc(fused[#loc14, #loc15])
#loc180 = loc(fused[#loc17, #loc18])
#loc181 = loc(fused[#loc19, #loc20])
#loc182 = loc(fused[#loc22, #loc21])
#loc183 = loc(fused[#loc23, #loc24])
#loc184 = loc(fused[#loc25, #loc26])
#loc185 = loc(fused[#loc27, #loc28, #loc29, #loc24])
#loc186 = loc(fused[#loc33, #loc32])
#loc187 = loc(fused[#loc34, #loc35])
#loc188 = loc(fused[#loc36, #loc37])
#loc189 = loc(fused[#loc38, #loc39, #loc40, #loc35])
#loc190 = loc(fused[#loc41, #loc42])
#loc191 = loc(fused[#loc43, #loc44])
#loc192 = loc(fused[#loc48, #loc49])
#loc193 = loc(fused[#loc51, #loc54])
#loc194 = loc(fused[#loc56, #loc57, #loc58, #loc49])
#loc195 = loc(fused[#loc59, #loc60])
#loc196 = loc(fused[#loc65, #loc66])
#loc197 = loc(fused[#loc67, #loc68])
#loc198 = loc(fused[#loc69, #loc70])
#loc199 = loc(fused[#loc71, #loc72])
#loc200 = loc(fused[#loc73, #loc74])
#loc201 = loc(fused[#loc76, #loc75])
#loc202 = loc(fused[#loc77, #loc78])
#loc203 = loc(fused[#loc79, #loc80])
#loc204 = loc(fused[#loc81, #loc82, #loc83, #loc78])
#loc205 = loc(fused[#loc86, #loc87])
#loc206 = loc(fused[#loc90, #loc91])
#loc207 = loc(fused[#loc92, #loc93])
#loc208 = loc(fused[#loc94, #loc95])
#loc209 = loc(fused[#loc96, #loc97, #loc98, #loc93])
#loc210 = loc(fused[#loc99, #loc100])
#loc211 = loc(fused[#loc102, #loc105])
#loc212 = loc(fused[#loc107, #loc108, #loc109, #loc100])
#loc213 = loc(fused[#loc110, #loc111])
#loc214 = loc(fused[#loc117, #loc118])
#loc215 = loc(fused[#loc120, #loc123])
#loc216 = loc(fused[#loc125, #loc126, #loc127, #loc118])
#loc217 = loc(fused[#loc128, #loc129])
#loc218 = loc(fused[#loc135, #loc136])
#loc219 = loc(fused[#loc137, #loc138])
#loc220 = loc(fused[#loc140, #loc139])
#loc221 = loc(fused[#loc141, #loc142])
#loc222 = loc(fused[#loc143, #loc144])
#loc223 = loc(fused[#loc145, #loc146, #loc147, #loc142])
#loc224 = loc(fused[#loc149, #loc148])
#loc225 = loc(fused[#loc151, #loc150])
#loc226 = loc(fused[#loc152, #loc153])
#loc227 = loc(fused[#loc154, #loc155])
#loc228 = loc(fused[#loc156, #loc157, #loc158, #loc153])
#loc229 = loc(fused[#loc159, #loc160])
#loc230 = loc(fused[#loc161, #loc162])
#loc231 = loc(fused[#loc166, #loc167])
#loc232 = loc(fused[#loc168, #loc169])
