!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#true = #cir.bool<true> : !cir.bool
!ty_in_addr = !cir.record<struct "in_addr" {!u32i} #cir.record.decl.ast>
!ty_sockaddr = !cir.record<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.record<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s01/CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc227)
  cir.func private @inet_addr(!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc228)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"127.0.0.1\00" : !cir.array<!s8i x 10>> : !cir.array<!s8i x 10> {alignment = 1 : i64} loc(#loc5)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc229)
  cir.func private @connect(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc230)
  cir.func private @recv(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc231)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc232)
  cir.func private @close(!s32i) -> !s32i loc(#loc233)
  cir.func private @_ZN63CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_637badSinkEPi(!cir.ptr<!s32i>) loc(#loc234)
  cir.func @_ZN63CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_633badEv() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc236)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc22)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc23)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc237)
    cir.scope {
      %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc239)
      %4 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc240)
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["connectSocket", init] {alignment = 4 : i64} loc(#loc241)
      %6 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc242)
      %7 = cir.const #cir.int<1> : !s32i loc(#loc32)
      %8 = cir.unary(minus, %7) nsw : !s32i, !s32i loc(#loc32)
      cir.store %8, %5 : !s32i, !cir.ptr<!s32i> loc(#loc241)
      cir.scope {
        cir.do {
          cir.scope {
            %9 = cir.const #cir.int<2> : !s32i loc(#loc39)
            %10 = cir.const #cir.int<1> : !u32i loc(#loc40)
            %11 = cir.cast(integral, %10 : !u32i), !s32i loc(#loc40)
            %12 = cir.const #cir.int<6> : !u32i loc(#loc41)
            %13 = cir.cast(integral, %12 : !u32i), !s32i loc(#loc41)
            %14 = cir.call @socket(%9, %11, %13) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc42)
            cir.store %14, %5 : !s32i, !cir.ptr<!s32i> loc(#loc245)
            cir.scope {
              %52 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc47)
              %53 = cir.const #cir.int<1> : !s32i loc(#loc48)
              %54 = cir.unary(minus, %53) nsw : !s32i, !s32i loc(#loc48)
              %55 = cir.cmp(eq, %52, %54) : !s32i, !cir.bool loc(#loc247)
              cir.if %55 {
                cir.break loc(#loc50)
              } loc(#loc248)
            } loc(#loc246)
            %15 = cir.cast(bitcast, %4 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc249)
            %16 = cir.const #cir.int<0> : !s32i loc(#loc53)
            %17 = cir.const #cir.int<16> : !u64i loc(#loc250)
            cir.libc.memset %17 bytes from %15 set to %16 : !cir.ptr<!void>, !s32i, !u64i loc(#loc251)
            %18 = cir.const #cir.int<2> : !s32i loc(#loc58)
            %19 = cir.cast(integral, %18 : !s32i), !u16i loc(#loc58)
            %20 = cir.get_member %4[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc59)
            cir.store %19, %20 : !u16i, !cir.ptr<!u16i> loc(#loc252)
            %21 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 10>> loc(#loc5)
            %22 = cir.cast(array_to_ptrdecay, %21 : !cir.ptr<!cir.array<!s8i x 10>>), !cir.ptr<!s8i> loc(#loc5)
            %23 = cir.call @inet_addr(%22) : (!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc61)
            %24 = cir.get_member %4[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc62)
            %25 = cir.get_member %24[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc63)
            cir.store %23, %25 : !u32i, !cir.ptr<!u32i> loc(#loc253)
            %26 = cir.const #cir.int<27015> : !s32i loc(#loc66)
            %27 = cir.cast(integral, %26 : !s32i), !u16i loc(#loc66)
            %28 = cir.call @htons(%27) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc67)
            %29 = cir.get_member %4[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc68)
            cir.store %28, %29 : !u16i, !cir.ptr<!u16i> loc(#loc254)
            cir.scope {
              %52 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc73)
              %53 = cir.cast(bitcast, %4 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc256)
              %54 = cir.const #cir.int<16> : !u64i loc(#loc257)
              %55 = cir.cast(integral, %54 : !u64i), !u32i loc(#loc257)
              %56 = cir.call @connect(%52, %53, %55) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc78)
              %57 = cir.const #cir.int<1> : !s32i loc(#loc79)
              %58 = cir.unary(minus, %57) nsw : !s32i, !s32i loc(#loc79)
              %59 = cir.cmp(eq, %56, %58) : !s32i, !cir.bool loc(#loc258)
              cir.if %59 {
                cir.break loc(#loc81)
              } loc(#loc259)
            } loc(#loc255)
            %30 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc82)
            %31 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc83)
            %32 = cir.cast(bitcast, %31 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc83)
            %33 = cir.const #cir.int<3> : !s32i loc(#loc84)
            %34 = cir.cast(integral, %33 : !s32i), !u64i loc(#loc84)
            %35 = cir.const #cir.int<4> : !u64i loc(#loc84)
            %36 = cir.binop(mul, %34, %35) : !u64i loc(#loc84)
            %37 = cir.const #cir.int<2> : !s32i loc(#loc84)
            %38 = cir.cast(integral, %37 : !s32i), !u64i loc(#loc84)
            %39 = cir.binop(add, %36, %38) : !u64i loc(#loc84)
            %40 = cir.const #cir.int<1> : !s32i loc(#loc85)
            %41 = cir.cast(integral, %40 : !s32i), !u64i loc(#loc85)
            %42 = cir.binop(sub, %39, %41) : !u64i loc(#loc260)
            %43 = cir.const #cir.int<0> : !s32i loc(#loc86)
            %44 = cir.call @recv(%30, %32, %42, %43) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc87)
            %45 = cir.cast(integral, %44 : !s64i), !s32i loc(#loc87)
            cir.store %45, %3 : !s32i, !cir.ptr<!s32i> loc(#loc261)
            cir.scope {
              %52 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc92)
              %53 = cir.const #cir.int<1> : !s32i loc(#loc93)
              %54 = cir.unary(minus, %53) nsw : !s32i, !s32i loc(#loc93)
              %55 = cir.cmp(eq, %52, %54) : !s32i, !cir.bool loc(#loc263)
              %56 = cir.ternary(%55, true {
                %57 = cir.const #true loc(#loc94)
                cir.yield %57 : !cir.bool loc(#loc94)
              }, false {
                %57 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc95)
                %58 = cir.const #cir.int<0> : !s32i loc(#loc96)
                %59 = cir.cmp(eq, %57, %58) : !s32i, !cir.bool loc(#loc264)
                %60 = cir.ternary(%59, true {
                  %61 = cir.const #true loc(#loc94)
                  cir.yield %61 : !cir.bool loc(#loc94)
                }, false {
                  %61 = cir.const #false loc(#loc94)
                  cir.yield %61 : !cir.bool loc(#loc94)
                }) : (!cir.bool) -> !cir.bool loc(#loc94)
                cir.yield %60 : !cir.bool loc(#loc94)
              }) : (!cir.bool) -> !cir.bool loc(#loc94)
              cir.if %56 {
                cir.break loc(#loc98)
              } loc(#loc265)
            } loc(#loc262)
            %46 = cir.const #cir.int<0> : !s8i loc(#loc99)
            %47 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc100)
            %48 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc101)
            %49 = cir.ptr_stride(%48 : !cir.ptr<!s8i>, %47 : !s32i), !cir.ptr<!s8i> loc(#loc101)
            cir.store %46, %49 : !s8i, !cir.ptr<!s8i> loc(#loc266)
            %50 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc102)
            %51 = cir.call @atoi(%50) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc103)
            cir.store %51, %0 : !s32i, !cir.ptr<!s32i> loc(#loc267)
          } loc(#loc244)
          cir.yield loc(#loc36)
        } while {
          %9 = cir.const #cir.int<0> : !s32i loc(#loc106)
          %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc106)
          cir.condition(%10) loc(#loc106)
        } loc(#loc243)
      } loc(#loc243)
      cir.scope {
        %9 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc109)
        %10 = cir.const #cir.int<1> : !s32i loc(#loc110)
        %11 = cir.unary(minus, %10) nsw : !s32i, !s32i loc(#loc110)
        %12 = cir.cmp(ne, %9, %11) : !s32i, !cir.bool loc(#loc269)
        cir.if %12 {
          %13 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc112)
          %14 = cir.call @close(%13) : (!s32i) -> !s32i loc(#loc113)
        } loc(#loc270)
      } loc(#loc268)
    } loc(#loc238)
    cir.call @_ZN63CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_637badSinkEPi(%0) : (!cir.ptr<!s32i>) -> () loc(#loc114)
    cir.return loc(#loc19)
  } loc(#loc235)
  cir.func private @_ZN63CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_6311goodG2BSinkEPi(!cir.ptr<!s32i>) loc(#loc271)
  cir.func internal private @_ZN63CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63L7goodG2BEv() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc273)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc121)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc122)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc274)
    %3 = cir.const #cir.int<7> : !s32i loc(#loc124)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc275)
    cir.call @_ZN63CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_6311goodG2BSinkEPi(%0) : (!cir.ptr<!s32i>) -> () loc(#loc126)
    cir.return loc(#loc118)
  } loc(#loc272)
  cir.func private @_ZN63CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_6311goodB2GSinkEPi(!cir.ptr<!s32i>) loc(#loc276)
  cir.func internal private @_ZN63CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63L7goodB2GEv() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc278)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc133)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc134)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc279)
    cir.scope {
      %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc281)
      %4 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc282)
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["connectSocket", init] {alignment = 4 : i64} loc(#loc283)
      %6 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc284)
      %7 = cir.const #cir.int<1> : !s32i loc(#loc143)
      %8 = cir.unary(minus, %7) nsw : !s32i, !s32i loc(#loc143)
      cir.store %8, %5 : !s32i, !cir.ptr<!s32i> loc(#loc283)
      cir.scope {
        cir.do {
          cir.scope {
            %9 = cir.const #cir.int<2> : !s32i loc(#loc150)
            %10 = cir.const #cir.int<1> : !u32i loc(#loc151)
            %11 = cir.cast(integral, %10 : !u32i), !s32i loc(#loc151)
            %12 = cir.const #cir.int<6> : !u32i loc(#loc152)
            %13 = cir.cast(integral, %12 : !u32i), !s32i loc(#loc152)
            %14 = cir.call @socket(%9, %11, %13) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc153)
            cir.store %14, %5 : !s32i, !cir.ptr<!s32i> loc(#loc287)
            cir.scope {
              %52 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc158)
              %53 = cir.const #cir.int<1> : !s32i loc(#loc159)
              %54 = cir.unary(minus, %53) nsw : !s32i, !s32i loc(#loc159)
              %55 = cir.cmp(eq, %52, %54) : !s32i, !cir.bool loc(#loc289)
              cir.if %55 {
                cir.break loc(#loc161)
              } loc(#loc290)
            } loc(#loc288)
            %15 = cir.cast(bitcast, %4 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc291)
            %16 = cir.const #cir.int<0> : !s32i loc(#loc164)
            %17 = cir.const #cir.int<16> : !u64i loc(#loc292)
            cir.libc.memset %17 bytes from %15 set to %16 : !cir.ptr<!void>, !s32i, !u64i loc(#loc293)
            %18 = cir.const #cir.int<2> : !s32i loc(#loc169)
            %19 = cir.cast(integral, %18 : !s32i), !u16i loc(#loc169)
            %20 = cir.get_member %4[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc59)
            cir.store %19, %20 : !u16i, !cir.ptr<!u16i> loc(#loc294)
            %21 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 10>> loc(#loc171)
            %22 = cir.cast(array_to_ptrdecay, %21 : !cir.ptr<!cir.array<!s8i x 10>>), !cir.ptr<!s8i> loc(#loc171)
            %23 = cir.call @inet_addr(%22) : (!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc172)
            %24 = cir.get_member %4[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc62)
            %25 = cir.get_member %24[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc63)
            cir.store %23, %25 : !u32i, !cir.ptr<!u32i> loc(#loc295)
            %26 = cir.const #cir.int<27015> : !s32i loc(#loc175)
            %27 = cir.cast(integral, %26 : !s32i), !u16i loc(#loc175)
            %28 = cir.call @htons(%27) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc176)
            %29 = cir.get_member %4[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc68)
            cir.store %28, %29 : !u16i, !cir.ptr<!u16i> loc(#loc296)
            cir.scope {
              %52 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc181)
              %53 = cir.cast(bitcast, %4 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc298)
              %54 = cir.const #cir.int<16> : !u64i loc(#loc299)
              %55 = cir.cast(integral, %54 : !u64i), !u32i loc(#loc299)
              %56 = cir.call @connect(%52, %53, %55) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc186)
              %57 = cir.const #cir.int<1> : !s32i loc(#loc187)
              %58 = cir.unary(minus, %57) nsw : !s32i, !s32i loc(#loc187)
              %59 = cir.cmp(eq, %56, %58) : !s32i, !cir.bool loc(#loc300)
              cir.if %59 {
                cir.break loc(#loc189)
              } loc(#loc301)
            } loc(#loc297)
            %30 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc190)
            %31 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc191)
            %32 = cir.cast(bitcast, %31 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc191)
            %33 = cir.const #cir.int<3> : !s32i loc(#loc192)
            %34 = cir.cast(integral, %33 : !s32i), !u64i loc(#loc192)
            %35 = cir.const #cir.int<4> : !u64i loc(#loc192)
            %36 = cir.binop(mul, %34, %35) : !u64i loc(#loc192)
            %37 = cir.const #cir.int<2> : !s32i loc(#loc192)
            %38 = cir.cast(integral, %37 : !s32i), !u64i loc(#loc192)
            %39 = cir.binop(add, %36, %38) : !u64i loc(#loc192)
            %40 = cir.const #cir.int<1> : !s32i loc(#loc193)
            %41 = cir.cast(integral, %40 : !s32i), !u64i loc(#loc193)
            %42 = cir.binop(sub, %39, %41) : !u64i loc(#loc302)
            %43 = cir.const #cir.int<0> : !s32i loc(#loc194)
            %44 = cir.call @recv(%30, %32, %42, %43) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc195)
            %45 = cir.cast(integral, %44 : !s64i), !s32i loc(#loc195)
            cir.store %45, %3 : !s32i, !cir.ptr<!s32i> loc(#loc303)
            cir.scope {
              %52 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc200)
              %53 = cir.const #cir.int<1> : !s32i loc(#loc201)
              %54 = cir.unary(minus, %53) nsw : !s32i, !s32i loc(#loc201)
              %55 = cir.cmp(eq, %52, %54) : !s32i, !cir.bool loc(#loc305)
              %56 = cir.ternary(%55, true {
                %57 = cir.const #true loc(#loc202)
                cir.yield %57 : !cir.bool loc(#loc202)
              }, false {
                %57 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc203)
                %58 = cir.const #cir.int<0> : !s32i loc(#loc204)
                %59 = cir.cmp(eq, %57, %58) : !s32i, !cir.bool loc(#loc306)
                %60 = cir.ternary(%59, true {
                  %61 = cir.const #true loc(#loc202)
                  cir.yield %61 : !cir.bool loc(#loc202)
                }, false {
                  %61 = cir.const #false loc(#loc202)
                  cir.yield %61 : !cir.bool loc(#loc202)
                }) : (!cir.bool) -> !cir.bool loc(#loc202)
                cir.yield %60 : !cir.bool loc(#loc202)
              }) : (!cir.bool) -> !cir.bool loc(#loc202)
              cir.if %56 {
                cir.break loc(#loc206)
              } loc(#loc307)
            } loc(#loc304)
            %46 = cir.const #cir.int<0> : !s8i loc(#loc207)
            %47 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc208)
            %48 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc209)
            %49 = cir.ptr_stride(%48 : !cir.ptr<!s8i>, %47 : !s32i), !cir.ptr<!s8i> loc(#loc209)
            cir.store %46, %49 : !s8i, !cir.ptr<!s8i> loc(#loc308)
            %50 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc210)
            %51 = cir.call @atoi(%50) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc211)
            cir.store %51, %0 : !s32i, !cir.ptr<!s32i> loc(#loc309)
          } loc(#loc286)
          cir.yield loc(#loc147)
        } while {
          %9 = cir.const #cir.int<0> : !s32i loc(#loc214)
          %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc214)
          cir.condition(%10) loc(#loc214)
        } loc(#loc285)
      } loc(#loc285)
      cir.scope {
        %9 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc217)
        %10 = cir.const #cir.int<1> : !s32i loc(#loc218)
        %11 = cir.unary(minus, %10) nsw : !s32i, !s32i loc(#loc218)
        %12 = cir.cmp(ne, %9, %11) : !s32i, !cir.bool loc(#loc311)
        cir.if %12 {
          %13 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc220)
          %14 = cir.call @close(%13) : (!s32i) -> !s32i loc(#loc221)
        } loc(#loc312)
      } loc(#loc310)
    } loc(#loc280)
    cir.call @_ZN63CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_6311goodB2GSinkEPi(%0) : (!cir.ptr<!s32i>) -> () loc(#loc222)
    cir.return loc(#loc130)
  } loc(#loc277)
  cir.func @_ZN63CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_634goodEv() extra(#fn_attr1) {
    cir.call @_ZN63CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63L7goodG2BEv() : () -> () loc(#loc225)
    cir.call @_ZN63CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63L7goodB2GEv() : () -> () loc(#loc226)
    cir.return loc(#loc224)
  } loc(#loc313)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s01/CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":0:0)
#loc1 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:1)
#loc2 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:62)
#loc3 = loc("/usr/include/arpa/inet.h":34:1)
#loc4 = loc("/usr/include/arpa/inet.h":34:47)
#loc5 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":81:49)
#loc6 = loc("/usr/include/netinet/in.h":402:1)
#loc7 = loc("/usr/include/netinet/in.h":403:40)
#loc8 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":126:1)
#loc9 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":126:75)
#loc10 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":145:1)
#loc11 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":145:68)
#loc12 = loc("/usr/include/stdlib.h":105:1)
#loc13 = loc("/usr/include/stdlib.h":106:33)
#loc14 = loc("/usr/include/unistd.h":358:1)
#loc15 = loc("/usr/include/unistd.h":358:27)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":48:1)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":48:27)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":50:1)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":112:1)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":52:5)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":52:9)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":54:13)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":54:12)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":54:5)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":55:5)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":110:5)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":60:9)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":60:13)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":61:9)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":61:28)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":62:9)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":62:32)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":63:9)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":63:41)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":64:9)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":99:17)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":65:9)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":98:9)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":74:36)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":74:45)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":74:58)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":74:29)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":74:13)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":74:69)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":75:13)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":78:13)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":75:17)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":75:34)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":76:13)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":77:17)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":79:20)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":79:21)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":79:30)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":79:33)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":79:47)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":79:13)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":79:48)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":80:34)
#loc59 = loc("/usr/include/netinet/in.h":249:5)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":80:13)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":81:39)
#loc62 = loc("/usr/include/netinet/in.h":251:20)
#loc63 = loc("/usr/include/netinet/in.h":33:15)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":81:13)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":81:59)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":82:38)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":82:32)
#loc68 = loc("/usr/include/netinet/in.h":250:15)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":82:13)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":82:46)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":83:13)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":86:13)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":83:25)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":83:58)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":83:59)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":83:68)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":83:82)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":83:17)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":83:88)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":84:13)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":85:17)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":89:31)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":89:46)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":89:59)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":89:77)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":89:80)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":89:26)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":89:13)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":89:81)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":90:13)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":93:13)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":90:17)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":90:31)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":90:44)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":90:47)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":90:61)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":91:13)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":92:17)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":95:39)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":95:25)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":95:13)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":97:25)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":97:20)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":97:13)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":97:36)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":99:16)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":100:9)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":103:9)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":100:13)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":100:30)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":101:9)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":102:26)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":102:13)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":111:5)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":119:1)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":119:28)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":121:1)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":130:1)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":123:5)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":123:9)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":125:13)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":125:12)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":125:5)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":128:12)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":128:5)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":129:5)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":133:1)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":133:28)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":135:1)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":197:1)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":137:5)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":137:9)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":139:13)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":139:12)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":139:5)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":140:5)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":195:5)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":145:9)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":145:13)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":146:9)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":146:28)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":147:9)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":147:32)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":148:9)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":148:41)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":149:9)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":184:17)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":150:9)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":183:9)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":159:36)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":159:45)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":159:58)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":159:29)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":159:13)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":159:69)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":160:13)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":163:13)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":160:17)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":160:34)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":161:13)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":162:17)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":164:20)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":164:21)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":164:30)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":164:33)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":164:47)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":164:13)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":164:48)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":165:34)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":165:13)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":166:49)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":166:39)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":166:13)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":166:59)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":167:38)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":167:32)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":167:13)
#loc178 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":167:46)
#loc179 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":168:13)
#loc180 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":171:13)
#loc181 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":168:25)
#loc182 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":168:58)
#loc183 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":168:59)
#loc184 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":168:68)
#loc185 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":168:82)
#loc186 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":168:17)
#loc187 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":168:88)
#loc188 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":169:13)
#loc189 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":170:17)
#loc190 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":174:31)
#loc191 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":174:46)
#loc192 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":174:59)
#loc193 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":174:77)
#loc194 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":174:80)
#loc195 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":174:26)
#loc196 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":174:13)
#loc197 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":174:81)
#loc198 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":175:13)
#loc199 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":178:13)
#loc200 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":175:17)
#loc201 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":175:31)
#loc202 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":175:44)
#loc203 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":175:47)
#loc204 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":175:61)
#loc205 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":176:13)
#loc206 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":177:17)
#loc207 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":180:39)
#loc208 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":180:25)
#loc209 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":180:13)
#loc210 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":182:25)
#loc211 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":182:20)
#loc212 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":182:13)
#loc213 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":182:36)
#loc214 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":184:16)
#loc215 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":185:9)
#loc216 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":188:9)
#loc217 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":185:13)
#loc218 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":185:30)
#loc219 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":186:9)
#loc220 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":187:26)
#loc221 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":187:13)
#loc222 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":196:5)
#loc223 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":199:1)
#loc224 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":203:1)
#loc225 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":201:5)
#loc226 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63a.cpp":202:5)
#loc227 = loc(fused[#loc1, #loc2])
#loc228 = loc(fused[#loc3, #loc4])
#loc229 = loc(fused[#loc6, #loc7])
#loc230 = loc(fused[#loc8, #loc9])
#loc231 = loc(fused[#loc10, #loc11])
#loc232 = loc(fused[#loc12, #loc13])
#loc233 = loc(fused[#loc14, #loc15])
#loc234 = loc(fused[#loc16, #loc17])
#loc235 = loc(fused[#loc18, #loc19])
#loc236 = loc(fused[#loc20, #loc21])
#loc237 = loc(fused[#loc24, #loc22])
#loc238 = loc(fused[#loc25, #loc26])
#loc239 = loc(fused[#loc27, #loc28])
#loc240 = loc(fused[#loc29, #loc30])
#loc241 = loc(fused[#loc31, #loc32])
#loc242 = loc(fused[#loc33, #loc34])
#loc243 = loc(fused[#loc35, #loc36])
#loc244 = loc(fused[#loc37, #loc38])
#loc245 = loc(fused[#loc43, #loc44])
#loc246 = loc(fused[#loc45, #loc46])
#loc247 = loc(fused[#loc47, #loc48])
#loc248 = loc(fused[#loc49, #loc46])
#loc249 = loc(fused[#loc51, #loc52])
#loc250 = loc(fused[#loc54, #loc55])
#loc251 = loc(fused[#loc56, #loc57])
#loc252 = loc(fused[#loc60, #loc58])
#loc253 = loc(fused[#loc64, #loc65])
#loc254 = loc(fused[#loc69, #loc70])
#loc255 = loc(fused[#loc71, #loc72])
#loc256 = loc(fused[#loc74, #loc75])
#loc257 = loc(fused[#loc76, #loc77])
#loc258 = loc(fused[#loc78, #loc79])
#loc259 = loc(fused[#loc80, #loc72])
#loc260 = loc(fused[#loc84, #loc85])
#loc261 = loc(fused[#loc88, #loc89])
#loc262 = loc(fused[#loc90, #loc91])
#loc263 = loc(fused[#loc92, #loc93])
#loc264 = loc(fused[#loc95, #loc96])
#loc265 = loc(fused[#loc97, #loc91])
#loc266 = loc(fused[#loc101, #loc99])
#loc267 = loc(fused[#loc104, #loc105])
#loc268 = loc(fused[#loc107, #loc108])
#loc269 = loc(fused[#loc109, #loc110])
#loc270 = loc(fused[#loc111, #loc108])
#loc271 = loc(fused[#loc115, #loc116])
#loc272 = loc(fused[#loc117, #loc118])
#loc273 = loc(fused[#loc119, #loc120])
#loc274 = loc(fused[#loc123, #loc121])
#loc275 = loc(fused[#loc125, #loc124])
#loc276 = loc(fused[#loc127, #loc128])
#loc277 = loc(fused[#loc129, #loc130])
#loc278 = loc(fused[#loc131, #loc132])
#loc279 = loc(fused[#loc135, #loc133])
#loc280 = loc(fused[#loc136, #loc137])
#loc281 = loc(fused[#loc138, #loc139])
#loc282 = loc(fused[#loc140, #loc141])
#loc283 = loc(fused[#loc142, #loc143])
#loc284 = loc(fused[#loc144, #loc145])
#loc285 = loc(fused[#loc146, #loc147])
#loc286 = loc(fused[#loc148, #loc149])
#loc287 = loc(fused[#loc154, #loc155])
#loc288 = loc(fused[#loc156, #loc157])
#loc289 = loc(fused[#loc158, #loc159])
#loc290 = loc(fused[#loc160, #loc157])
#loc291 = loc(fused[#loc162, #loc163])
#loc292 = loc(fused[#loc165, #loc166])
#loc293 = loc(fused[#loc167, #loc168])
#loc294 = loc(fused[#loc170, #loc169])
#loc295 = loc(fused[#loc173, #loc174])
#loc296 = loc(fused[#loc177, #loc178])
#loc297 = loc(fused[#loc179, #loc180])
#loc298 = loc(fused[#loc182, #loc183])
#loc299 = loc(fused[#loc184, #loc185])
#loc300 = loc(fused[#loc186, #loc187])
#loc301 = loc(fused[#loc188, #loc180])
#loc302 = loc(fused[#loc192, #loc193])
#loc303 = loc(fused[#loc196, #loc197])
#loc304 = loc(fused[#loc198, #loc199])
#loc305 = loc(fused[#loc200, #loc201])
#loc306 = loc(fused[#loc203, #loc204])
#loc307 = loc(fused[#loc205, #loc199])
#loc308 = loc(fused[#loc209, #loc207])
#loc309 = loc(fused[#loc212, #loc213])
#loc310 = loc(fused[#loc215, #loc216])
#loc311 = loc(fused[#loc217, #loc218])
#loc312 = loc(fused[#loc219, #loc216])
#loc313 = loc(fused[#loc223, #loc224])
