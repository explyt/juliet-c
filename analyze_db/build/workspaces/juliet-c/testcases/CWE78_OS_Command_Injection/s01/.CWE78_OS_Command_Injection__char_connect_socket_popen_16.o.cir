!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.record<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.record<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.record<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#true = #cir.bool<true> : !cir.bool
!ty_in_addr = !cir.record<struct "in_addr" {!u32i} #cir.record.decl.ast>
!ty__IO_FILE = !cir.record<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
!ty_sockaddr = !cir.record<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.record<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/workspaces/juliet-c/testcases/CWE78_OS_Command_Injection/s01/CWE78_OS_Command_Injection__char_connect_socket_popen_16.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i32 = dense<32> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, "dlti.endianness" = "little", "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64>} {
  cir.global "private" constant cir_private @__const.goodG2B.data_buf = #cir.const_array<"ls " : !cir.array<!s8i x 3>, trailing_zeros> : !cir.array<!s8i x 100> loc(#loc214)
  cir.global "private" constant cir_private @__const.CWE78_OS_Command_Injection__char_connect_socket_popen_16_bad.data_buf = #cir.const_array<"ls " : !cir.array<!s8i x 3>, trailing_zeros> : !cir.array<!s8i x 100> loc(#loc215)
  cir.func private @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc216)
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc217)
  cir.func private @inet_addr(!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc218)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"127.0.0.1\00" : !cir.array<!s8i x 10>> : !cir.array<!s8i x 10> {alignment = 1 : i64} loc(#loc11)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc219)
  cir.func private @connect(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc220)
  cir.func private @recv(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc221)
  cir.func private @strchr(!cir.ptr<!s8i>, !s32i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc222)
  cir.func private @close(!s32i) -> !s32i loc(#loc223)
  cir.func private @popen(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!ty__IO_FILE> loc(#loc224)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"w\00" : !cir.array<!s8i x 2>> : !cir.array<!s8i x 2> {alignment = 1 : i64} loc(#loc24)
  cir.func private @pclose(!cir.ptr<!ty__IO_FILE>) -> !s32i loc(#loc225)
  cir.func no_proto @CWE78_OS_Command_Injection__char_connect_socket_popen_16_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc227)
    %1 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["data_buf"] {alignment = 16 : i64} loc(#loc215)
    %2 = cir.get_global @__const.CWE78_OS_Command_Injection__char_connect_socket_popen_16_bad.data_buf : !cir.ptr<!cir.array<!s8i x 100>> loc(#loc215)
    cir.copy %2 to %1 : !cir.ptr<!cir.array<!s8i x 100>> loc(#loc215)
    %3 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc31)
    cir.store %3, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc228)
    cir.scope {
      cir.while {
        %4 = cir.const #cir.int<1> : !s32i loc(#loc35)
        %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc35)
        cir.condition(%5) loc(#loc35)
      } do {
        cir.scope {
          cir.scope {
            %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc232)
            %5 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc233)
            %6 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["replace"] {alignment = 8 : i64} loc(#loc234)
            %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["connectSocket", init] {alignment = 4 : i64} loc(#loc235)
            %8 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc236)
            %9 = cir.const #cir.int<1> : !s32i loc(#loc46)
            %10 = cir.unary(minus, %9) nsw : !s32i, !s32i loc(#loc46)
            cir.store %10, %7 : !s32i, !cir.ptr<!s32i> loc(#loc235)
            %11 = cir.get_global @strlen : !cir.ptr<!cir.func<(!cir.ptr<!s8i>) -> !u64i>> loc(#loc49)
            %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc50)
            %13 = cir.call @strlen(%12) : (!cir.ptr<!s8i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc49)
            cir.store %13, %8 : !u64i, !cir.ptr<!u64i> loc(#loc236)
            cir.scope {
              cir.do {
                cir.scope {
                  %14 = cir.const #cir.int<2> : !s32i loc(#loc55)
                  %15 = cir.const #cir.int<1> : !s32i loc(#loc56)
                  %16 = cir.const #cir.int<6> : !s32i loc(#loc57)
                  %17 = cir.call @socket(%14, %15, %16) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc58)
                  cir.store %17, %7 : !s32i, !cir.ptr<!s32i> loc(#loc239)
                  cir.scope {
                    %68 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc63)
                    %69 = cir.const #cir.int<1> : !s32i loc(#loc64)
                    %70 = cir.unary(minus, %69) nsw : !s32i, !s32i loc(#loc64)
                    %71 = cir.cmp(eq, %68, %70) : !s32i, !cir.bool loc(#loc241)
                    cir.if %71 {
                      cir.break loc(#loc66)
                    } loc(#loc242)
                  } loc(#loc240)
                  %18 = cir.cast(bitcast, %5 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc243)
                  %19 = cir.const #cir.int<0> : !s32i loc(#loc69)
                  %20 = cir.const #cir.int<16> : !u64i loc(#loc244)
                  cir.libc.memset %20 bytes from %18 set to %19 : !cir.ptr<!void>, !s32i, !u64i loc(#loc245)
                  %21 = cir.const #cir.int<2> : !s32i loc(#loc74)
                  %22 = cir.cast(integral, %21 : !s32i), !u16i loc(#loc74)
                  %23 = cir.get_member %5[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc75)
                  cir.store %22, %23 : !u16i, !cir.ptr<!u16i> loc(#loc246)
                  %24 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 10>> loc(#loc11)
                  %25 = cir.cast(array_to_ptrdecay, %24 : !cir.ptr<!cir.array<!s8i x 10>>), !cir.ptr<!s8i> loc(#loc11)
                  %26 = cir.call @inet_addr(%25) : (!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc77)
                  %27 = cir.get_member %5[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc78)
                  %28 = cir.get_member %27[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc79)
                  cir.store %26, %28 : !u32i, !cir.ptr<!u32i> loc(#loc247)
                  %29 = cir.const #cir.int<27015> : !s32i loc(#loc82)
                  %30 = cir.cast(integral, %29 : !s32i), !u16i loc(#loc82)
                  %31 = cir.call @htons(%30) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc83)
                  %32 = cir.get_member %5[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc84)
                  cir.store %31, %32 : !u16i, !cir.ptr<!u16i> loc(#loc248)
                  cir.scope {
                    %68 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc89)
                    %69 = cir.cast(bitcast, %5 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc250)
                    %70 = cir.const #cir.int<16> : !u64i loc(#loc251)
                    %71 = cir.cast(integral, %70 : !u64i), !u32i loc(#loc251)
                    %72 = cir.call @connect(%68, %69, %71) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc94)
                    %73 = cir.const #cir.int<1> : !s32i loc(#loc95)
                    %74 = cir.unary(minus, %73) nsw : !s32i, !s32i loc(#loc95)
                    %75 = cir.cmp(eq, %72, %74) : !s32i, !cir.bool loc(#loc252)
                    cir.if %75 {
                      cir.break loc(#loc97)
                    } loc(#loc253)
                  } loc(#loc249)
                  %33 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc98)
                  %34 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc99)
                  %35 = cir.load %8 : !cir.ptr<!u64i>, !u64i loc(#loc100)
                  %36 = cir.ptr_stride(%34 : !cir.ptr<!s8i>, %35 : !u64i), !cir.ptr<!s8i> loc(#loc101)
                  %37 = cir.cast(bitcast, %36 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc254)
                  %38 = cir.const #cir.int<1> : !u64i loc(#loc255)
                  %39 = cir.const #cir.int<100> : !s32i loc(#loc106)
                  %40 = cir.cast(integral, %39 : !s32i), !u64i loc(#loc106)
                  %41 = cir.load %8 : !cir.ptr<!u64i>, !u64i loc(#loc107)
                  %42 = cir.binop(sub, %40, %41) : !u64i loc(#loc256)
                  %43 = cir.const #cir.int<1> : !s32i loc(#loc108)
                  %44 = cir.cast(integral, %43 : !s32i), !u64i loc(#loc108)
                  %45 = cir.binop(sub, %42, %44) : !u64i loc(#loc257)
                  %46 = cir.binop(mul, %38, %45) : !u64i loc(#loc258)
                  %47 = cir.const #cir.int<0> : !s32i loc(#loc110)
                  %48 = cir.call @recv(%33, %37, %46, %47) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc111)
                  %49 = cir.cast(integral, %48 : !s64i), !s32i loc(#loc111)
                  cir.store %49, %4 : !s32i, !cir.ptr<!s32i> loc(#loc259)
                  cir.scope {
                    %68 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc116)
                    %69 = cir.const #cir.int<1> : !s32i loc(#loc117)
                    %70 = cir.unary(minus, %69) nsw : !s32i, !s32i loc(#loc117)
                    %71 = cir.cmp(eq, %68, %70) : !s32i, !cir.bool loc(#loc261)
                    %72 = cir.ternary(%71, true {
                      %73 = cir.const #true loc(#loc118)
                      cir.yield %73 : !cir.bool loc(#loc118)
                    }, false {
                      %73 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc119)
                      %74 = cir.const #cir.int<0> : !s32i loc(#loc120)
                      %75 = cir.cmp(eq, %73, %74) : !s32i, !cir.bool loc(#loc262)
                      %76 = cir.ternary(%75, true {
                        %77 = cir.const #true loc(#loc118)
                        cir.yield %77 : !cir.bool loc(#loc118)
                      }, false {
                        %77 = cir.const #false loc(#loc118)
                        cir.yield %77 : !cir.bool loc(#loc118)
                      }) : (!cir.bool) -> !cir.bool loc(#loc118)
                      cir.yield %76 : !cir.bool loc(#loc118)
                    }) : (!cir.bool) -> !cir.bool loc(#loc118)
                    cir.if %72 {
                      cir.break loc(#loc122)
                    } loc(#loc263)
                  } loc(#loc260)
                  %50 = cir.const #cir.int<0> : !s32i loc(#loc123)
                  %51 = cir.cast(integral, %50 : !s32i), !s8i loc(#loc123)
                  %52 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc124)
                  %53 = cir.load %8 : !cir.ptr<!u64i>, !u64i loc(#loc125)
                  %54 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc126)
                  %55 = cir.cast(integral, %54 : !s32i), !u64i loc(#loc126)
                  %56 = cir.const #cir.int<1> : !u64i loc(#loc264)
                  %57 = cir.binop(div, %55, %56) : !u64i loc(#loc265)
                  %58 = cir.binop(add, %53, %57) : !u64i loc(#loc266)
                  %59 = cir.ptr_stride(%52 : !cir.ptr<!s8i>, %58 : !u64i), !cir.ptr<!s8i> loc(#loc129)
                  cir.store %51, %59 : !s8i, !cir.ptr<!s8i> loc(#loc267)
                  %60 = cir.get_global @strchr : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !s32i) -> !cir.ptr<!s8i>>> loc(#loc130)
                  %61 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc131)
                  %62 = cir.const #cir.int<13> : !s32i loc(#loc132)
                  %63 = cir.call @strchr(%61, %62) : (!cir.ptr<!s8i>, !s32i) -> !cir.ptr<!s8i> side_effect(pure) extra(#fn_attr) loc(#loc130)
                  cir.store %63, %6 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc268)
                  cir.scope {
                    %68 = cir.load %6 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc137)
                    %69 = cir.cast(ptr_to_bool, %68 : !cir.ptr<!s8i>), !cir.bool loc(#loc137)
                    cir.if %69 {
                      %70 = cir.const #cir.int<0> : !s32i loc(#loc139)
                      %71 = cir.cast(integral, %70 : !s32i), !s8i loc(#loc139)
                      %72 = cir.load deref %6 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc140)
                      cir.store %71, %72 : !s8i, !cir.ptr<!s8i> loc(#loc271)
                    } loc(#loc270)
                  } loc(#loc269)
                  %64 = cir.get_global @strchr : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !s32i) -> !cir.ptr<!s8i>>> loc(#loc142)
                  %65 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc143)
                  %66 = cir.const #cir.int<10> : !s32i loc(#loc144)
                  %67 = cir.call @strchr(%65, %66) : (!cir.ptr<!s8i>, !s32i) -> !cir.ptr<!s8i> side_effect(pure) extra(#fn_attr) loc(#loc142)
                  cir.store %67, %6 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc272)
                  cir.scope {
                    %68 = cir.load %6 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc149)
                    %69 = cir.cast(ptr_to_bool, %68 : !cir.ptr<!s8i>), !cir.bool loc(#loc149)
                    cir.if %69 {
                      %70 = cir.const #cir.int<0> : !s32i loc(#loc151)
                      %71 = cir.cast(integral, %70 : !s32i), !s8i loc(#loc151)
                      %72 = cir.load deref %6 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc152)
                      cir.store %71, %72 : !s8i, !cir.ptr<!s8i> loc(#loc275)
                    } loc(#loc274)
                  } loc(#loc273)
                } loc(#loc238)
                cir.yield loc(#loc52)
              } while {
                %14 = cir.const #cir.int<0> : !s32i loc(#loc154)
                %15 = cir.cast(int_to_bool, %14 : !s32i), !cir.bool loc(#loc154)
                cir.condition(%15) loc(#loc154)
              } loc(#loc237)
            } loc(#loc237)
            cir.scope {
              %14 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc157)
              %15 = cir.const #cir.int<1> : !s32i loc(#loc158)
              %16 = cir.unary(minus, %15) nsw : !s32i, !s32i loc(#loc158)
              %17 = cir.cmp(ne, %14, %16) : !s32i, !cir.bool loc(#loc277)
              cir.if %17 {
                %18 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc160)
                %19 = cir.call @close(%18) : (!s32i) -> !s32i loc(#loc161)
              } loc(#loc278)
            } loc(#loc276)
          } loc(#loc231)
          cir.break loc(#loc162)
        } loc(#loc230)
        cir.yield loc(#loc34)
      } loc(#loc229)
    } loc(#loc229)
    cir.scope {
      %4 = cir.alloca !cir.ptr<!ty__IO_FILE>, !cir.ptr<!cir.ptr<!ty__IO_FILE>>, ["pipe"] {alignment = 8 : i64} loc(#loc280)
      %5 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc167)
      %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 2>> loc(#loc24)
      %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 2>>), !cir.ptr<!s8i> loc(#loc24)
      %8 = cir.call @popen(%5, %7) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!ty__IO_FILE> loc(#loc168)
      cir.store %8, %4 : !cir.ptr<!ty__IO_FILE>, !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc281)
      cir.scope {
        %9 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc173)
        %10 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc174)
        %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!ty__IO_FILE> loc(#loc174)
        %12 = cir.cmp(ne, %9, %11) : !cir.ptr<!ty__IO_FILE>, !cir.bool loc(#loc283)
        cir.if %12 {
          %13 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc176)
          %14 = cir.call @pclose(%13) : (!cir.ptr<!ty__IO_FILE>) -> !s32i loc(#loc177)
        } loc(#loc284)
      } loc(#loc282)
    } loc(#loc279)
    cir.return loc(#loc28)
  } loc(#loc226)
  cir.func no_proto @CWE78_OS_Command_Injection__char_connect_socket_popen_16_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc286)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc180)
    cir.return loc(#loc179)
  } loc(#loc285)
  cir.func private @strcat(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc287)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"*.*\00" : !cir.array<!s8i x 4>> : !cir.array<!s8i x 4> {alignment = 1 : i64} loc(#loc184)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc289)
    %1 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["data_buf"] {alignment = 16 : i64} loc(#loc214)
    %2 = cir.get_global @__const.goodG2B.data_buf : !cir.ptr<!cir.array<!s8i x 100>> loc(#loc214)
    cir.copy %2 to %1 : !cir.ptr<!cir.array<!s8i x 100>> loc(#loc214)
    %3 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc189)
    cir.store %3, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc290)
    cir.scope {
      cir.while {
        %4 = cir.const #cir.int<1> : !s32i loc(#loc193)
        %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc193)
        cir.condition(%5) loc(#loc193)
      } do {
        cir.scope {
          %4 = cir.get_global @strcat : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i>>> loc(#loc195)
          %5 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc196)
          %6 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc184)
          %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc184)
          %8 = cir.call @strcat(%5, %7) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc195)
          cir.break loc(#loc197)
        } loc(#loc292)
        cir.yield loc(#loc192)
      } loc(#loc291)
    } loc(#loc291)
    cir.scope {
      %4 = cir.alloca !cir.ptr<!ty__IO_FILE>, !cir.ptr<!cir.ptr<!ty__IO_FILE>>, ["pipe"] {alignment = 8 : i64} loc(#loc294)
      %5 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc202)
      %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 2>> loc(#loc203)
      %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 2>>), !cir.ptr<!s8i> loc(#loc203)
      %8 = cir.call @popen(%5, %7) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!ty__IO_FILE> loc(#loc204)
      cir.store %8, %4 : !cir.ptr<!ty__IO_FILE>, !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc295)
      cir.scope {
        %9 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc209)
        %10 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc210)
        %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!ty__IO_FILE> loc(#loc210)
        %12 = cir.cmp(ne, %9, %11) : !cir.ptr<!ty__IO_FILE>, !cir.bool loc(#loc297)
        cir.if %12 {
          %13 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc212)
          %14 = cir.call @pclose(%13) : (!cir.ptr<!ty__IO_FILE>) -> !s32i loc(#loc213)
        } loc(#loc298)
      } loc(#loc296)
    } loc(#loc293)
    cir.return loc(#loc186)
  } loc(#loc288)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE78_OS_Command_Injection/s01/CWE78_OS_Command_Injection__char_connect_socket_popen_16.c":0:0)
#loc1 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_16.c":154:5)
#loc2 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_16.c":154:26)
#loc3 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_16.c":62:5)
#loc4 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_16.c":62:26)
#loc5 = loc("/usr/include/string.h":407:1)
#loc6 = loc("/usr/include/string.h":408:33)
#loc7 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:1)
#loc8 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:62)
#loc9 = loc("/usr/include/arpa/inet.h":34:1)
#loc10 = loc("/usr/include/arpa/inet.h":34:47)
#loc11 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_16.c":93:53)
#loc12 = loc("/usr/include/netinet/in.h":402:1)
#loc13 = loc("/usr/include/netinet/in.h":403:40)
#loc14 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":126:1)
#loc15 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":126:75)
#loc16 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":145:1)
#loc17 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":145:68)
#loc18 = loc("/usr/include/string.h":246:1)
#loc19 = loc("/usr/include/string.h":247:33)
#loc20 = loc("/usr/include/unistd.h":358:1)
#loc21 = loc("/usr/include/unistd.h":358:27)
#loc22 = loc("/usr/include/stdio.h":903:1)
#loc23 = loc("/usr/include/stdio.h":904:3)
#loc24 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_16.c":138:28)
#loc25 = loc("/usr/include/stdio.h":897:1)
#loc26 = loc("/usr/include/stdio.h":897:36)
#loc27 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_16.c":59:1)
#loc28 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_16.c":144:1)
#loc29 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_16.c":61:5)
#loc30 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_16.c":61:12)
#loc31 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_16.c":63:12)
#loc32 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_16.c":63:5)
#loc33 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_16.c":64:5)
#loc34 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_16.c":134:5)
#loc35 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_16.c":64:11)
#loc36 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_16.c":65:5)
#loc37 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_16.c":66:9)
#loc38 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_16.c":132:9)
#loc39 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_16.c":71:13)
#loc40 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_16.c":71:17)
#loc41 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_16.c":72:13)
#loc42 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_16.c":72:32)
#loc43 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_16.c":73:13)
#loc44 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_16.c":73:19)
#loc45 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_16.c":74:13)
#loc46 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_16.c":74:36)
#loc47 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_16.c":75:13)
#loc48 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_16.c":75:41)
#loc49 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_16.c":75:30)
#loc50 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_16.c":75:37)
#loc51 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_16.c":76:13)
#loc52 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_16.c":121:21)
#loc53 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_16.c":77:13)
#loc54 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_16.c":120:13)
#loc55 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_16.c":86:40)
#loc56 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_16.c":86:49)
#loc57 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_16.c":86:62)
#loc58 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_16.c":86:33)
#loc59 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_16.c":86:17)
#loc60 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_16.c":86:73)
#loc61 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_16.c":87:17)
#loc62 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_16.c":90:17)
#loc63 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_16.c":87:21)
#loc64 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_16.c":87:38)
#loc65 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_16.c":88:17)
#loc66 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_16.c":89:21)
#loc67 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_16.c":91:24)
#loc68 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_16.c":91:25)
#loc69 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_16.c":91:34)
#loc70 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_16.c":91:37)
#loc71 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_16.c":91:51)
#loc72 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_16.c":91:17)
#loc73 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_16.c":91:52)
#loc74 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_16.c":92:38)
#loc75 = loc("/usr/include/netinet/in.h":249:5)
#loc76 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_16.c":92:17)
#loc77 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_16.c":93:43)
#loc78 = loc("/usr/include/netinet/in.h":251:20)
#loc79 = loc("/usr/include/netinet/in.h":33:15)
#loc80 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_16.c":93:17)
#loc81 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_16.c":93:63)
#loc82 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_16.c":94:42)
#loc83 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_16.c":94:36)
#loc84 = loc("/usr/include/netinet/in.h":250:15)
#loc85 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_16.c":94:17)
#loc86 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_16.c":94:50)
#loc87 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_16.c":95:17)
#loc88 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_16.c":98:17)
#loc89 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_16.c":95:29)
#loc90 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_16.c":95:62)
#loc91 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_16.c":95:63)
#loc92 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_16.c":95:72)
#loc93 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_16.c":95:86)
#loc94 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_16.c":95:21)
#loc95 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_16.c":95:92)
#loc96 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_16.c":96:17)
#loc97 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_16.c":97:21)
#loc98 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_16.c":102:35)
#loc99 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_16.c":102:59)
#loc100 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_16.c":102:66)
#loc101 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_16.c":102:64)
#loc102 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_16.c":102:50)
#loc103 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_16.c":102:73)
#loc104 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_16.c":102:76)
#loc105 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_16.c":102:87)
#loc106 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_16.c":102:92)
#loc107 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_16.c":102:98)
#loc108 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_16.c":102:108)
#loc109 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_16.c":102:109)
#loc110 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_16.c":102:112)
#loc111 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_16.c":102:30)
#loc112 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_16.c":102:17)
#loc113 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_16.c":102:113)
#loc114 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_16.c":103:17)
#loc115 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_16.c":106:17)
#loc116 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_16.c":103:21)
#loc117 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_16.c":103:35)
#loc118 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_16.c":103:48)
#loc119 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_16.c":103:51)
#loc120 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_16.c":103:65)
#loc121 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_16.c":104:17)
#loc122 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_16.c":105:21)
#loc123 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_16.c":108:61)
#loc124 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_16.c":108:17)
#loc125 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_16.c":108:22)
#loc126 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_16.c":108:32)
#loc127 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_16.c":108:45)
#loc128 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_16.c":108:56)
#loc129 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_16.c":108:57)
#loc130 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_16.c":110:27)
#loc131 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_16.c":110:34)
#loc132 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_16.c":110:40)
#loc133 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_16.c":110:17)
#loc134 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_16.c":110:44)
#loc135 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_16.c":111:17)
#loc136 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_16.c":114:17)
#loc137 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_16.c":111:21)
#loc138 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_16.c":112:17)
#loc139 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_16.c":113:32)
#loc140 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_16.c":113:22)
#loc141 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_16.c":113:21)
#loc142 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_16.c":115:27)
#loc143 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_16.c":115:34)
#loc144 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_16.c":115:40)
#loc145 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_16.c":115:17)
#loc146 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_16.c":115:44)
#loc147 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_16.c":116:17)
#loc148 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_16.c":119:17)
#loc149 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_16.c":116:21)
#loc150 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_16.c":117:17)
#loc151 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_16.c":118:32)
#loc152 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_16.c":118:22)
#loc153 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_16.c":118:21)
#loc154 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_16.c":121:20)
#loc155 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_16.c":122:13)
#loc156 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_16.c":125:13)
#loc157 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_16.c":122:17)
#loc158 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_16.c":122:34)
#loc159 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_16.c":123:13)
#loc160 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_16.c":124:30)
#loc161 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_16.c":124:17)
#loc162 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_16.c":133:9)
#loc163 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_16.c":135:5)
#loc164 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_16.c":143:5)
#loc165 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_16.c":136:9)
#loc166 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_16.c":136:15)
#loc167 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_16.c":138:22)
#loc168 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_16.c":138:16)
#loc169 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_16.c":138:9)
#loc170 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_16.c":138:31)
#loc171 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_16.c":139:9)
#loc172 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_16.c":142:9)
#loc173 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_16.c":139:13)
#loc174 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_16.c":139:21)
#loc175 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_16.c":140:9)
#loc176 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_16.c":141:20)
#loc177 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_16.c":141:13)
#loc178 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_16.c":173:1)
#loc179 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_16.c":176:1)
#loc180 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_16.c":175:5)
#loc181 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_16.c":175:13)
#loc182 = loc("/usr/include/string.h":149:1)
#loc183 = loc("/usr/include/string.h":150:14)
#loc184 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_16.c":159:22)
#loc185 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_16.c":151:1)
#loc186 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_16.c":171:1)
#loc187 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_16.c":153:5)
#loc188 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_16.c":153:12)
#loc189 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_16.c":155:12)
#loc190 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_16.c":155:5)
#loc191 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_16.c":156:5)
#loc192 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_16.c":161:5)
#loc193 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_16.c":156:11)
#loc194 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_16.c":157:5)
#loc195 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_16.c":159:9)
#loc196 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_16.c":159:16)
#loc197 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_16.c":160:9)
#loc198 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_16.c":162:5)
#loc199 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_16.c":170:5)
#loc200 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_16.c":163:9)
#loc201 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_16.c":163:15)
#loc202 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_16.c":165:22)
#loc203 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_16.c":165:28)
#loc204 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_16.c":165:16)
#loc205 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_16.c":165:9)
#loc206 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_16.c":165:31)
#loc207 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_16.c":166:9)
#loc208 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_16.c":169:9)
#loc209 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_16.c":166:13)
#loc210 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_16.c":166:21)
#loc211 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_16.c":167:9)
#loc212 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_16.c":168:20)
#loc213 = loc("CWE78_OS_Command_Injection__char_connect_socket_popen_16.c":168:13)
#loc214 = loc(fused[#loc1, #loc2])
#loc215 = loc(fused[#loc3, #loc4])
#loc216 = loc(fused[#loc5, #loc6])
#loc217 = loc(fused[#loc7, #loc8])
#loc218 = loc(fused[#loc9, #loc10])
#loc219 = loc(fused[#loc12, #loc13])
#loc220 = loc(fused[#loc14, #loc15])
#loc221 = loc(fused[#loc16, #loc17])
#loc222 = loc(fused[#loc18, #loc19])
#loc223 = loc(fused[#loc20, #loc21])
#loc224 = loc(fused[#loc22, #loc23])
#loc225 = loc(fused[#loc25, #loc26])
#loc226 = loc(fused[#loc27, #loc28])
#loc227 = loc(fused[#loc29, #loc30])
#loc228 = loc(fused[#loc32, #loc31])
#loc229 = loc(fused[#loc33, #loc34])
#loc230 = loc(fused[#loc36, #loc34])
#loc231 = loc(fused[#loc37, #loc38])
#loc232 = loc(fused[#loc39, #loc40])
#loc233 = loc(fused[#loc41, #loc42])
#loc234 = loc(fused[#loc43, #loc44])
#loc235 = loc(fused[#loc45, #loc46])
#loc236 = loc(fused[#loc47, #loc48])
#loc237 = loc(fused[#loc51, #loc52])
#loc238 = loc(fused[#loc53, #loc54])
#loc239 = loc(fused[#loc59, #loc60])
#loc240 = loc(fused[#loc61, #loc62])
#loc241 = loc(fused[#loc63, #loc64])
#loc242 = loc(fused[#loc65, #loc62])
#loc243 = loc(fused[#loc67, #loc68])
#loc244 = loc(fused[#loc70, #loc71])
#loc245 = loc(fused[#loc72, #loc73])
#loc246 = loc(fused[#loc76, #loc74])
#loc247 = loc(fused[#loc80, #loc81])
#loc248 = loc(fused[#loc85, #loc86])
#loc249 = loc(fused[#loc87, #loc88])
#loc250 = loc(fused[#loc90, #loc91])
#loc251 = loc(fused[#loc92, #loc93])
#loc252 = loc(fused[#loc94, #loc95])
#loc253 = loc(fused[#loc96, #loc88])
#loc254 = loc(fused[#loc102, #loc103])
#loc255 = loc(fused[#loc104, #loc105])
#loc256 = loc(fused[#loc106, #loc107])
#loc257 = loc(fused[#loc106, #loc108])
#loc258 = loc(fused[#loc104, #loc109])
#loc259 = loc(fused[#loc112, #loc113])
#loc260 = loc(fused[#loc114, #loc115])
#loc261 = loc(fused[#loc116, #loc117])
#loc262 = loc(fused[#loc119, #loc120])
#loc263 = loc(fused[#loc121, #loc115])
#loc264 = loc(fused[#loc127, #loc128])
#loc265 = loc(fused[#loc126, #loc128])
#loc266 = loc(fused[#loc125, #loc128])
#loc267 = loc(fused[#loc124, #loc123])
#loc268 = loc(fused[#loc133, #loc134])
#loc269 = loc(fused[#loc135, #loc136])
#loc270 = loc(fused[#loc138, #loc136])
#loc271 = loc(fused[#loc141, #loc139])
#loc272 = loc(fused[#loc145, #loc146])
#loc273 = loc(fused[#loc147, #loc148])
#loc274 = loc(fused[#loc150, #loc148])
#loc275 = loc(fused[#loc153, #loc151])
#loc276 = loc(fused[#loc155, #loc156])
#loc277 = loc(fused[#loc157, #loc158])
#loc278 = loc(fused[#loc159, #loc156])
#loc279 = loc(fused[#loc163, #loc164])
#loc280 = loc(fused[#loc165, #loc166])
#loc281 = loc(fused[#loc169, #loc170])
#loc282 = loc(fused[#loc171, #loc172])
#loc283 = loc(fused[#loc173, #loc174])
#loc284 = loc(fused[#loc175, #loc172])
#loc285 = loc(fused[#loc178, #loc179])
#loc286 = loc(fused[#loc180, #loc181])
#loc287 = loc(fused[#loc182, #loc183])
#loc288 = loc(fused[#loc185, #loc186])
#loc289 = loc(fused[#loc187, #loc188])
#loc290 = loc(fused[#loc190, #loc189])
#loc291 = loc(fused[#loc191, #loc192])
#loc292 = loc(fused[#loc194, #loc192])
#loc293 = loc(fused[#loc198, #loc199])
#loc294 = loc(fused[#loc200, #loc201])
#loc295 = loc(fused[#loc205, #loc206])
#loc296 = loc(fused[#loc207, #loc208])
#loc297 = loc(fused[#loc209, #loc210])
#loc298 = loc(fused[#loc211, #loc208])
