!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc21 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":50:22)
#loc22 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":50:26)
#loc176 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":147:27)
#loc177 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":147:31)
#loc209 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":174:27)
#loc210 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":174:31)
#true = #cir.bool<true> : !cir.bool
!ty_in_addr = !cir.record<struct "in_addr" {!u32i} #cir.record.decl.ast>
#loc245 = loc(fused[#loc21, #loc22])
#loc305 = loc(fused[#loc176, #loc177])
#loc317 = loc(fused[#loc209, #loc210])
!ty_sockaddr = !cir.record<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.record<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/workspaces/juliet-c/testcases/CWE617_Reachable_Assertion/CWE617_Reachable_Assertion__listen_socket_21.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e">} {
  cir.global "private" internal dsolocal @badStatic = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc235)
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc236)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc237)
  cir.func private @bind(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc238)
  cir.func private @listen(!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc239)
  cir.func private @accept(!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc240)
  cir.func private @recv(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc241)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc242)
  cir.func private @close(!s32i) -> !s32i loc(#loc243)
  cir.func internal private @badSource(%arg0: !s32i loc(fused[#loc21, #loc22])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc245)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc20)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc23)
    cir.scope {
      %4 = cir.get_global @badStatic : !cir.ptr<!s32i> loc(#loc235)
      %5 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc26)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc26)
      cir.if %6 {
        cir.scope {
          %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc249)
          %8 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc250)
          %9 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc251)
          %10 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc252)
          %11 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc253)
          %12 = cir.const #cir.int<1> : !s32i loc(#loc35)
          %13 = cir.unary(minus, %12) nsw : !s32i, !s32i loc(#loc35)
          cir.store %13, %9 : !s32i, !cir.ptr<!s32i> loc(#loc251)
          %14 = cir.const #cir.int<1> : !s32i loc(#loc37)
          %15 = cir.unary(minus, %14) nsw : !s32i, !s32i loc(#loc37)
          cir.store %15, %10 : !s32i, !cir.ptr<!s32i> loc(#loc252)
          cir.scope {
            cir.do {
              cir.scope {
                %16 = cir.const #cir.int<2> : !s32i loc(#loc44)
                %17 = cir.const #cir.int<1> : !s32i loc(#loc45)
                %18 = cir.const #cir.int<6> : !s32i loc(#loc46)
                %19 = cir.call @socket(%16, %17, %18) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc47)
                cir.store %19, %9 : !s32i, !cir.ptr<!s32i> loc(#loc256)
                cir.scope {
                  %61 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc52)
                  %62 = cir.const #cir.int<1> : !s32i loc(#loc53)
                  %63 = cir.unary(minus, %62) nsw : !s32i, !s32i loc(#loc53)
                  %64 = cir.cmp(eq, %61, %63) : !s32i, !cir.bool loc(#loc258)
                  cir.if %64 {
                    cir.break loc(#loc55)
                  } loc(#loc259)
                } loc(#loc257)
                %20 = cir.cast(bitcast, %8 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc260)
                %21 = cir.const #cir.int<0> : !s32i loc(#loc58)
                %22 = cir.const #cir.int<16> : !u64i loc(#loc261)
                cir.libc.memset %22 bytes from %20 set to %21 : !cir.ptr<!void>, !s32i, !u64i loc(#loc262)
                %23 = cir.const #cir.int<2> : !s32i loc(#loc63)
                %24 = cir.cast(integral, %23 : !s32i), !u16i loc(#loc63)
                %25 = cir.get_member %8[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc64)
                cir.store %24, %25 : !u16i, !cir.ptr<!u16i> loc(#loc263)
                %26 = cir.const #cir.int<0> : !s32i loc(#loc66)
                %27 = cir.cast(integral, %26 : !s32i), !u32i loc(#loc66)
                %28 = cir.get_member %8[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc67)
                %29 = cir.get_member %28[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc68)
                cir.store %27, %29 : !u32i, !cir.ptr<!u32i> loc(#loc264)
                %30 = cir.const #cir.int<27015> : !s32i loc(#loc70)
                %31 = cir.cast(integral, %30 : !s32i), !u16i loc(#loc70)
                %32 = cir.call @htons(%31) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc71)
                %33 = cir.get_member %8[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc72)
                cir.store %32, %33 : !u16i, !cir.ptr<!u16i> loc(#loc265)
                cir.scope {
                  %61 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc77)
                  %62 = cir.cast(bitcast, %8 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc267)
                  %63 = cir.const #cir.int<16> : !u64i loc(#loc268)
                  %64 = cir.cast(integral, %63 : !u64i), !u32i loc(#loc268)
                  %65 = cir.call @bind(%61, %62, %64) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc82)
                  %66 = cir.const #cir.int<1> : !s32i loc(#loc83)
                  %67 = cir.unary(minus, %66) nsw : !s32i, !s32i loc(#loc83)
                  %68 = cir.cmp(eq, %65, %67) : !s32i, !cir.bool loc(#loc269)
                  cir.if %68 {
                    cir.break loc(#loc85)
                  } loc(#loc270)
                } loc(#loc266)
                cir.scope {
                  %61 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc88)
                  %62 = cir.const #cir.int<5> : !s32i loc(#loc89)
                  %63 = cir.call @listen(%61, %62) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc90)
                  %64 = cir.const #cir.int<1> : !s32i loc(#loc91)
                  %65 = cir.unary(minus, %64) nsw : !s32i, !s32i loc(#loc91)
                  %66 = cir.cmp(eq, %63, %65) : !s32i, !cir.bool loc(#loc272)
                  cir.if %66 {
                    cir.break loc(#loc93)
                  } loc(#loc273)
                } loc(#loc271)
                %34 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc94)
                %35 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc95)
                %36 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc96)
                %37 = cir.call @accept(%34, %35, %36) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc97)
                cir.store %37, %10 : !s32i, !cir.ptr<!s32i> loc(#loc274)
                cir.scope {
                  %61 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc102)
                  %62 = cir.const #cir.int<1> : !s32i loc(#loc103)
                  %63 = cir.unary(minus, %62) nsw : !s32i, !s32i loc(#loc103)
                  %64 = cir.cmp(eq, %61, %63) : !s32i, !cir.bool loc(#loc276)
                  cir.if %64 {
                    cir.break loc(#loc105)
                  } loc(#loc277)
                } loc(#loc275)
                %38 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc106)
                %39 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc107)
                %40 = cir.cast(bitcast, %39 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc107)
                %41 = cir.const #cir.int<3> : !s32i loc(#loc108)
                %42 = cir.cast(integral, %41 : !s32i), !u64i loc(#loc108)
                %43 = cir.const #cir.int<4> : !u64i loc(#loc108)
                %44 = cir.binop(mul, %42, %43) : !u64i loc(#loc108)
                %45 = cir.const #cir.int<2> : !s32i loc(#loc108)
                %46 = cir.cast(integral, %45 : !s32i), !u64i loc(#loc108)
                %47 = cir.binop(add, %44, %46) : !u64i loc(#loc108)
                %48 = cir.const #cir.int<1> : !s32i loc(#loc109)
                %49 = cir.cast(integral, %48 : !s32i), !u64i loc(#loc109)
                %50 = cir.binop(sub, %47, %49) : !u64i loc(#loc278)
                %51 = cir.const #cir.int<0> : !s32i loc(#loc110)
                %52 = cir.call @recv(%38, %40, %50, %51) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc111)
                %53 = cir.cast(integral, %52 : !s64i), !s32i loc(#loc111)
                cir.store %53, %7 : !s32i, !cir.ptr<!s32i> loc(#loc279)
                cir.scope {
                  %61 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc116)
                  %62 = cir.const #cir.int<1> : !s32i loc(#loc117)
                  %63 = cir.unary(minus, %62) nsw : !s32i, !s32i loc(#loc117)
                  %64 = cir.cmp(eq, %61, %63) : !s32i, !cir.bool loc(#loc281)
                  %65 = cir.ternary(%64, true {
                    %66 = cir.const #true loc(#loc118)
                    cir.yield %66 : !cir.bool loc(#loc118)
                  }, false {
                    %66 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc119)
                    %67 = cir.const #cir.int<0> : !s32i loc(#loc120)
                    %68 = cir.cmp(eq, %66, %67) : !s32i, !cir.bool loc(#loc282)
                    %69 = cir.ternary(%68, true {
                      %70 = cir.const #true loc(#loc118)
                      cir.yield %70 : !cir.bool loc(#loc118)
                    }, false {
                      %70 = cir.const #false loc(#loc118)
                      cir.yield %70 : !cir.bool loc(#loc118)
                    }) : (!cir.bool) -> !cir.bool loc(#loc118)
                    cir.yield %69 : !cir.bool loc(#loc118)
                  }) : (!cir.bool) -> !cir.bool loc(#loc118)
                  cir.if %65 {
                    cir.break loc(#loc122)
                  } loc(#loc283)
                } loc(#loc280)
                %54 = cir.const #cir.int<0> : !s32i loc(#loc123)
                %55 = cir.cast(integral, %54 : !s32i), !s8i loc(#loc123)
                %56 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc124)
                %57 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc125)
                %58 = cir.ptr_stride(%57 : !cir.ptr<!s8i>, %56 : !s32i), !cir.ptr<!s8i> loc(#loc125)
                cir.store %55, %58 : !s8i, !cir.ptr<!s8i> loc(#loc284)
                %59 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc126)
                %60 = cir.call @atoi(%59) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc127)
                cir.store %60, %0 : !s32i, !cir.ptr<!s32i> loc(#loc285)
              } loc(#loc255)
              cir.yield loc(#loc41)
            } while {
              %16 = cir.const #cir.int<0> : !s32i loc(#loc130)
              %17 = cir.cast(int_to_bool, %16 : !s32i), !cir.bool loc(#loc130)
              cir.condition(%17) loc(#loc130)
            } loc(#loc254)
          } loc(#loc254)
          cir.scope {
            %16 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc133)
            %17 = cir.const #cir.int<1> : !s32i loc(#loc134)
            %18 = cir.unary(minus, %17) nsw : !s32i, !s32i loc(#loc134)
            %19 = cir.cmp(ne, %16, %18) : !s32i, !cir.bool loc(#loc287)
            cir.if %19 {
              %20 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc136)
              %21 = cir.call @close(%20) : (!s32i) -> !s32i loc(#loc137)
            } loc(#loc288)
          } loc(#loc286)
          cir.scope {
            %16 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc140)
            %17 = cir.const #cir.int<1> : !s32i loc(#loc141)
            %18 = cir.unary(minus, %17) nsw : !s32i, !s32i loc(#loc141)
            %19 = cir.cmp(ne, %16, %18) : !s32i, !cir.bool loc(#loc290)
            cir.if %19 {
              %20 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc143)
              %21 = cir.call @close(%20) : (!s32i) -> !s32i loc(#loc144)
            } loc(#loc291)
          } loc(#loc289)
        } loc(#loc248)
      } loc(#loc247)
    } loc(#loc246)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc145)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc292)
    %3 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc292)
    cir.return %3 : !s32i loc(#loc292)
  } loc(#loc244)
  cir.func private @__assert_fail(!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) extra(#fn_attr) loc(#loc293)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data > ASSERT_VALUE\00" : !cir.array<!s8i x 20>> : !cir.array<!s8i x 20> {alignment = 1 : i64} loc(#loc149)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"CWE617_Reachable_Assertion__listen_socket_21.c\00" : !cir.array<!s8i x 47>> : !cir.array<!s8i x 47> {alignment = 1 : i64} loc(#loc149)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"void CWE617_Reachable_Assertion__listen_socket_21_bad()\00" : !cir.array<!s8i x 56>> : !cir.array<!s8i x 56> {alignment = 1 : i64} loc(#loc149)
  cir.func no_proto @CWE617_Reachable_Assertion__listen_socket_21_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc295)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc154)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc155)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc296)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc157)
    %4 = cir.get_global @badStatic : !cir.ptr<!s32i> loc(#loc235)
    cir.store %3, %4 : !s32i, !cir.ptr<!s32i> loc(#loc297)
    %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc159)
    %6 = cir.call @badSource(%5) : (!s32i) -> !s32i loc(#loc160)
    cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc298)
    %7 = cir.const #cir.int<4> : !u64i loc(#loc149)
    cir.scope {
      cir.scope {
        %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc149)
        %9 = cir.const #cir.int<5> : !s32i loc(#loc149)
        %10 = cir.cmp(gt, %8, %9) : !s32i, !cir.bool loc(#loc149)
        cir.if %10 {
        } else {
          %11 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 20>> loc(#loc149)
          %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc149)
          %13 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 47>> loc(#loc149)
          %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 47>>), !cir.ptr<!s8i> loc(#loc149)
          %15 = cir.const #cir.int<135> : !s32i loc(#loc149)
          %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc149)
          %17 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 56>> loc(#loc149)
          %18 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s8i x 56>>), !cir.ptr<!s8i> loc(#loc149)
          cir.call @__assert_fail(%12, %14, %16, %18) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) -> () extra(#fn_attr) loc(#loc149)
        } loc(#loc149)
      } loc(#loc149)
    } loc(#loc149)
    cir.return loc(#loc151)
  } loc(#loc294)
  cir.func no_proto @CWE617_Reachable_Assertion__listen_socket_21_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<()>> loc(#loc300)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc165)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<()>> loc(#loc301)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc167)
    cir.return loc(#loc164)
  } loc(#loc299)
  cir.global "private" internal dsolocal @goodG2B1Static = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc302)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc303)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc173)
  cir.func internal private @goodG2B1Source(%arg0: !s32i loc(fused[#loc176, #loc177])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc305)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc175)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc178)
    cir.scope {
      %4 = cir.get_global @goodG2B1Static : !cir.ptr<!s32i> loc(#loc302)
      %5 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc181)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc181)
      cir.if %6 {
        %7 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc173)
        %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc173)
        cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc185)
      } else {
        %7 = cir.const #cir.int<5> : !s32i loc(#loc186)
        %8 = cir.const #cir.int<1> : !s32i loc(#loc187)
        %9 = cir.binop(add, %7, %8) nsw : !s32i loc(#loc186)
        cir.store %9, %0 : !s32i, !cir.ptr<!s32i> loc(#loc308)
      } loc(#loc307)
    } loc(#loc306)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc189)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc309)
    %3 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc309)
    cir.return %3 : !s32i loc(#loc309)
  } loc(#loc304)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"void goodG2B1()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc191)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc311)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc196)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc197)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc312)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc199)
    %4 = cir.get_global @goodG2B1Static : !cir.ptr<!s32i> loc(#loc302)
    cir.store %3, %4 : !s32i, !cir.ptr<!s32i> loc(#loc313)
    %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc201)
    %6 = cir.call @goodG2B1Source(%5) : (!s32i) -> !s32i loc(#loc202)
    cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc314)
    %7 = cir.const #cir.int<4> : !u64i loc(#loc191)
    cir.scope {
      cir.scope {
        %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc191)
        %9 = cir.const #cir.int<5> : !s32i loc(#loc191)
        %10 = cir.cmp(gt, %8, %9) : !s32i, !cir.bool loc(#loc191)
        cir.if %10 {
        } else {
          %11 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 20>> loc(#loc191)
          %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc191)
          %13 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 47>> loc(#loc191)
          %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 47>>), !cir.ptr<!s8i> loc(#loc191)
          %15 = cir.const #cir.int<170> : !s32i loc(#loc191)
          %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc191)
          %17 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc191)
          %18 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc191)
          cir.call @__assert_fail(%12, %14, %16, %18) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) -> () extra(#fn_attr) loc(#loc191)
        } loc(#loc191)
      } loc(#loc191)
    } loc(#loc191)
    cir.return loc(#loc193)
  } loc(#loc310)
  cir.global "private" internal dsolocal @goodG2B2Static = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc315)
  cir.func internal private @goodG2B2Source(%arg0: !s32i loc(fused[#loc209, #loc210])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc317)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc208)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc211)
    cir.scope {
      %4 = cir.get_global @goodG2B2Static : !cir.ptr<!s32i> loc(#loc315)
      %5 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc214)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc214)
      cir.if %6 {
        %7 = cir.const #cir.int<5> : !s32i loc(#loc216)
        %8 = cir.const #cir.int<1> : !s32i loc(#loc217)
        %9 = cir.binop(add, %7, %8) nsw : !s32i loc(#loc216)
        cir.store %9, %0 : !s32i, !cir.ptr<!s32i> loc(#loc320)
      } loc(#loc319)
    } loc(#loc318)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc219)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc321)
    %3 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc321)
    cir.return %3 : !s32i loc(#loc321)
  } loc(#loc316)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"void goodG2B2()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc221)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc323)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc226)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc227)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc324)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc229)
    %4 = cir.get_global @goodG2B2Static : !cir.ptr<!s32i> loc(#loc315)
    cir.store %3, %4 : !s32i, !cir.ptr<!s32i> loc(#loc325)
    %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc231)
    %6 = cir.call @goodG2B2Source(%5) : (!s32i) -> !s32i loc(#loc232)
    cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc326)
    %7 = cir.const #cir.int<4> : !u64i loc(#loc221)
    cir.scope {
      cir.scope {
        %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc221)
        %9 = cir.const #cir.int<5> : !s32i loc(#loc221)
        %10 = cir.cmp(gt, %8, %9) : !s32i, !cir.bool loc(#loc221)
        cir.if %10 {
        } else {
          %11 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 20>> loc(#loc221)
          %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc221)
          %13 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 47>> loc(#loc221)
          %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 47>>), !cir.ptr<!s8i> loc(#loc221)
          %15 = cir.const #cir.int<192> : !s32i loc(#loc221)
          %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc221)
          %17 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc221)
          %18 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc221)
          cir.call @__assert_fail(%12, %14, %16, %18) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) -> () extra(#fn_attr) loc(#loc221)
        } loc(#loc221)
      } loc(#loc221)
    } loc(#loc221)
    cir.return loc(#loc223)
  } loc(#loc322)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE617_Reachable_Assertion/CWE617_Reachable_Assertion__listen_socket_21.c":0:0)
#loc1 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":48:1)
#loc2 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":48:24)
#loc3 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:1)
#loc4 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:62)
#loc5 = loc("/usr/include/netinet/in.h":402:1)
#loc6 = loc("/usr/include/netinet/in.h":403:40)
#loc7 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":112:1)
#loc8 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":113:6)
#loc9 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":296:1)
#loc10 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":296:39)
#loc11 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":306:1)
#loc12 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":307:38)
#loc13 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":145:1)
#loc14 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":145:68)
#loc15 = loc("/usr/include/stdlib.h":105:1)
#loc16 = loc("/usr/include/stdlib.h":106:33)
#loc17 = loc("/usr/include/unistd.h":358:1)
#loc18 = loc("/usr/include/unistd.h":358:27)
#loc19 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":50:1)
#loc20 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":125:1)
#loc23 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":51:1)
#loc24 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":52:5)
#loc25 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":123:5)
#loc26 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":52:8)
#loc27 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":53:5)
#loc28 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":54:9)
#loc29 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":122:9)
#loc30 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":59:13)
#loc31 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":59:17)
#loc32 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":60:13)
#loc33 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":60:32)
#loc34 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":61:13)
#loc35 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":61:35)
#loc36 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":62:13)
#loc37 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":62:35)
#loc38 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":63:13)
#loc39 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":63:45)
#loc40 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":64:13)
#loc41 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":107:21)
#loc42 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":65:13)
#loc43 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":106:13)
#loc44 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":74:39)
#loc45 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":74:48)
#loc46 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":74:61)
#loc47 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":74:32)
#loc48 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":74:17)
#loc49 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":74:72)
#loc50 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":75:17)
#loc51 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":78:17)
#loc52 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":75:21)
#loc53 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":75:37)
#loc54 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":76:17)
#loc55 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":77:21)
#loc56 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":79:24)
#loc57 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":79:25)
#loc58 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":79:34)
#loc59 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":79:37)
#loc60 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":79:51)
#loc61 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":79:17)
#loc62 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":79:52)
#loc63 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":80:38)
#loc64 = loc("/usr/include/netinet/in.h":249:5)
#loc65 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":80:17)
#loc66 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":81:43)
#loc67 = loc("/usr/include/netinet/in.h":251:20)
#loc68 = loc("/usr/include/netinet/in.h":33:15)
#loc69 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":81:17)
#loc70 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":82:42)
#loc71 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":82:36)
#loc72 = loc("/usr/include/netinet/in.h":250:15)
#loc73 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":82:17)
#loc74 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":82:50)
#loc75 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":83:17)
#loc76 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":86:17)
#loc77 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":83:26)
#loc78 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":83:58)
#loc79 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":83:59)
#loc80 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":83:68)
#loc81 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":83:82)
#loc82 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":83:21)
#loc83 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":83:88)
#loc84 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":84:17)
#loc85 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":85:21)
#loc86 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":87:17)
#loc87 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":90:17)
#loc88 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":87:28)
#loc89 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":87:42)
#loc90 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":87:21)
#loc91 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":87:61)
#loc92 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":88:17)
#loc93 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":89:21)
#loc94 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":91:39)
#loc95 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":91:53)
#loc96 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":91:59)
#loc97 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":91:32)
#loc98 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":91:17)
#loc99 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":91:63)
#loc100 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":92:17)
#loc101 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":95:17)
#loc102 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":92:21)
#loc103 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":92:37)
#loc104 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":93:17)
#loc105 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":94:21)
#loc106 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":97:35)
#loc107 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":97:49)
#loc108 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":97:62)
#loc109 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":97:80)
#loc110 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":97:83)
#loc111 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":97:30)
#loc112 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":97:17)
#loc113 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":97:84)
#loc114 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":98:17)
#loc115 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":101:17)
#loc116 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":98:21)
#loc117 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":98:35)
#loc118 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":98:48)
#loc119 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":98:51)
#loc120 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":98:65)
#loc121 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":99:17)
#loc122 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":100:21)
#loc123 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":103:43)
#loc124 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":103:29)
#loc125 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":103:17)
#loc126 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":105:29)
#loc127 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":105:24)
#loc128 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":105:17)
#loc129 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":105:40)
#loc130 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":107:20)
#loc131 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":108:13)
#loc132 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":111:13)
#loc133 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":108:17)
#loc134 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":108:33)
#loc135 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":109:13)
#loc136 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":110:30)
#loc137 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":110:17)
#loc138 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":112:13)
#loc139 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":115:13)
#loc140 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":112:17)
#loc141 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":112:33)
#loc142 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":113:13)
#loc143 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":114:30)
#loc144 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":114:17)
#loc145 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":124:12)
#loc146 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":124:5)
#loc147 = loc("/usr/include/assert.h":69:1)
#loc148 = loc("/usr/include/assert.h":71:43)
#loc149 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":135:5)
#loc150 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":127:1)
#loc151 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":136:1)
#loc152 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":129:5)
#loc153 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":129:9)
#loc154 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":131:13)
#loc155 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":131:12)
#loc156 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":131:5)
#loc157 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":132:17)
#loc158 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":132:5)
#loc159 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":133:22)
#loc160 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":133:12)
#loc161 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":133:5)
#loc162 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":133:26)
#loc163 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":195:1)
#loc164 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":199:1)
#loc165 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":197:5)
#loc166 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":197:14)
#loc167 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":198:5)
#loc168 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":198:14)
#loc169 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":143:1)
#loc170 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":143:29)
#loc171 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc172 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc173 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":152:19)
#loc174 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":147:1)
#loc175 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":160:1)
#loc178 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":148:1)
#loc179 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":149:5)
#loc180 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":158:5)
#loc181 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":149:8)
#loc182 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":150:5)
#loc183 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":153:5)
#loc184 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":155:5)
#loc185 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":152:9)
#loc186 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":157:16)
#loc187 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":157:29)
#loc188 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":157:9)
#loc189 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":159:12)
#loc190 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":159:5)
#loc191 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":170:5)
#loc192 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":162:1)
#loc193 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":171:1)
#loc194 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":164:5)
#loc195 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":164:9)
#loc196 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":166:13)
#loc197 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":166:12)
#loc198 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":166:5)
#loc199 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":167:22)
#loc200 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":167:5)
#loc201 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":168:27)
#loc202 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":168:12)
#loc203 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":168:5)
#loc204 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":168:31)
#loc205 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":144:1)
#loc206 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":144:29)
#loc207 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":174:1)
#loc208 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":182:1)
#loc211 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":175:1)
#loc212 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":176:5)
#loc213 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":180:5)
#loc214 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":176:8)
#loc215 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":177:5)
#loc216 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":179:16)
#loc217 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":179:29)
#loc218 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":179:9)
#loc219 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":181:12)
#loc220 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":181:5)
#loc221 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":192:5)
#loc222 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":184:1)
#loc223 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":193:1)
#loc224 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":186:5)
#loc225 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":186:9)
#loc226 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":188:13)
#loc227 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":188:12)
#loc228 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":188:5)
#loc229 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":189:22)
#loc230 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":189:5)
#loc231 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":190:27)
#loc232 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":190:12)
#loc233 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":190:5)
#loc234 = loc("CWE617_Reachable_Assertion__listen_socket_21.c":190:31)
#loc235 = loc(fused[#loc1, #loc2])
#loc236 = loc(fused[#loc3, #loc4])
#loc237 = loc(fused[#loc5, #loc6])
#loc238 = loc(fused[#loc7, #loc8])
#loc239 = loc(fused[#loc9, #loc10])
#loc240 = loc(fused[#loc11, #loc12])
#loc241 = loc(fused[#loc13, #loc14])
#loc242 = loc(fused[#loc15, #loc16])
#loc243 = loc(fused[#loc17, #loc18])
#loc244 = loc(fused[#loc19, #loc20])
#loc246 = loc(fused[#loc24, #loc25])
#loc247 = loc(fused[#loc27, #loc25])
#loc248 = loc(fused[#loc28, #loc29])
#loc249 = loc(fused[#loc30, #loc31])
#loc250 = loc(fused[#loc32, #loc33])
#loc251 = loc(fused[#loc34, #loc35])
#loc252 = loc(fused[#loc36, #loc37])
#loc253 = loc(fused[#loc38, #loc39])
#loc254 = loc(fused[#loc40, #loc41])
#loc255 = loc(fused[#loc42, #loc43])
#loc256 = loc(fused[#loc48, #loc49])
#loc257 = loc(fused[#loc50, #loc51])
#loc258 = loc(fused[#loc52, #loc53])
#loc259 = loc(fused[#loc54, #loc51])
#loc260 = loc(fused[#loc56, #loc57])
#loc261 = loc(fused[#loc59, #loc60])
#loc262 = loc(fused[#loc61, #loc62])
#loc263 = loc(fused[#loc65, #loc63])
#loc264 = loc(fused[#loc69, #loc66])
#loc265 = loc(fused[#loc73, #loc74])
#loc266 = loc(fused[#loc75, #loc76])
#loc267 = loc(fused[#loc78, #loc79])
#loc268 = loc(fused[#loc80, #loc81])
#loc269 = loc(fused[#loc82, #loc83])
#loc270 = loc(fused[#loc84, #loc76])
#loc271 = loc(fused[#loc86, #loc87])
#loc272 = loc(fused[#loc90, #loc91])
#loc273 = loc(fused[#loc92, #loc87])
#loc274 = loc(fused[#loc98, #loc99])
#loc275 = loc(fused[#loc100, #loc101])
#loc276 = loc(fused[#loc102, #loc103])
#loc277 = loc(fused[#loc104, #loc101])
#loc278 = loc(fused[#loc108, #loc109])
#loc279 = loc(fused[#loc112, #loc113])
#loc280 = loc(fused[#loc114, #loc115])
#loc281 = loc(fused[#loc116, #loc117])
#loc282 = loc(fused[#loc119, #loc120])
#loc283 = loc(fused[#loc121, #loc115])
#loc284 = loc(fused[#loc125, #loc123])
#loc285 = loc(fused[#loc128, #loc129])
#loc286 = loc(fused[#loc131, #loc132])
#loc287 = loc(fused[#loc133, #loc134])
#loc288 = loc(fused[#loc135, #loc132])
#loc289 = loc(fused[#loc138, #loc139])
#loc290 = loc(fused[#loc140, #loc141])
#loc291 = loc(fused[#loc142, #loc139])
#loc292 = loc(fused[#loc146, #loc145])
#loc293 = loc(fused[#loc147, #loc148])
#loc294 = loc(fused[#loc150, #loc151])
#loc295 = loc(fused[#loc152, #loc153])
#loc296 = loc(fused[#loc156, #loc154])
#loc297 = loc(fused[#loc158, #loc157])
#loc298 = loc(fused[#loc161, #loc162])
#loc299 = loc(fused[#loc163, #loc164])
#loc300 = loc(fused[#loc165, #loc166])
#loc301 = loc(fused[#loc167, #loc168])
#loc302 = loc(fused[#loc169, #loc170])
#loc303 = loc(fused[#loc171, #loc172])
#loc304 = loc(fused[#loc174, #loc175])
#loc306 = loc(fused[#loc179, #loc180])
#loc307 = loc(fused[#loc182, #loc183, #loc184, #loc180])
#loc308 = loc(fused[#loc188, #loc187])
#loc309 = loc(fused[#loc190, #loc189])
#loc310 = loc(fused[#loc192, #loc193])
#loc311 = loc(fused[#loc194, #loc195])
#loc312 = loc(fused[#loc198, #loc196])
#loc313 = loc(fused[#loc200, #loc199])
#loc314 = loc(fused[#loc203, #loc204])
#loc315 = loc(fused[#loc205, #loc206])
#loc316 = loc(fused[#loc207, #loc208])
#loc318 = loc(fused[#loc212, #loc213])
#loc319 = loc(fused[#loc215, #loc213])
#loc320 = loc(fused[#loc218, #loc217])
#loc321 = loc(fused[#loc220, #loc219])
#loc322 = loc(fused[#loc222, #loc223])
#loc323 = loc(fused[#loc224, #loc225])
#loc324 = loc(fused[#loc228, #loc226])
#loc325 = loc(fused[#loc230, #loc229])
#loc326 = loc(fused[#loc233, #loc234])
