!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
module @"/workspaces/juliet-c/testcases/CWE680_Integer_Overflow_to_Buffer_Overflow/CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_08.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<271> = dense<32> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e">} {
  cir.func internal private @_ZL17staticReturnsTruev() -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc2)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc3)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc170)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc170)
    cir.return %2 : !s32i loc(#loc170)
  } loc(#loc169)
  cir.func private @rand() -> !s32i extra(#fn_attr1) loc(#loc171)
  cir.func private @_Znam(!u64i) -> !cir.ptr<!void> loc(#loc172)
  cir.func private @printIntLine(!s32i) loc(#loc173)
  cir.func @_ZN55CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_083badEv() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc175)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc15)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc16)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc176)
    cir.scope {
      %3 = cir.call @_ZL17staticReturnsTruev() : () -> !s32i loc(#loc20)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc178)
      cir.if %4 {
        %5 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc23)
        %6 = cir.const #cir.int<1> : !s32i loc(#loc23)
        %7 = cir.binop(and, %5, %6) : !s32i loc(#loc23)
        %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc23)
        %9 = cir.ternary(%8, true {
          %11 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc23)
          %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc23)
          %13 = cir.const #cir.int<30> : !s32i loc(#loc23)
          %14 = cir.shift(left, %12 : !u32i, %13 : !s32i) -> !u32i loc(#loc23)
          %15 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc23)
          %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc23)
          %17 = cir.const #cir.int<15> : !s32i loc(#loc23)
          %18 = cir.shift(left, %16 : !u32i, %17 : !s32i) -> !u32i loc(#loc23)
          %19 = cir.binop(xor, %14, %18) : !u32i loc(#loc23)
          %20 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc23)
          %21 = cir.cast(integral, %20 : !s32i), !u32i loc(#loc23)
          %22 = cir.binop(xor, %19, %21) : !u32i loc(#loc23)
          cir.yield %22 : !u32i loc(#loc23)
        }, false {
          %11 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc23)
          %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc23)
          %13 = cir.const #cir.int<30> : !s32i loc(#loc23)
          %14 = cir.shift(left, %12 : !u32i, %13 : !s32i) -> !u32i loc(#loc23)
          %15 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc23)
          %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc23)
          %17 = cir.const #cir.int<15> : !s32i loc(#loc23)
          %18 = cir.shift(left, %16 : !u32i, %17 : !s32i) -> !u32i loc(#loc23)
          %19 = cir.binop(xor, %14, %18) : !u32i loc(#loc23)
          %20 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc23)
          %21 = cir.cast(integral, %20 : !s32i), !u32i loc(#loc23)
          %22 = cir.binop(xor, %19, %21) : !u32i loc(#loc23)
          %23 = cir.unary(minus, %22) : !u32i, !u32i loc(#loc23)
          %24 = cir.const #cir.int<1> : !s32i loc(#loc23)
          %25 = cir.cast(integral, %24 : !s32i), !u32i loc(#loc23)
          %26 = cir.binop(sub, %23, %25) : !u32i loc(#loc23)
          cir.yield %26 : !u32i loc(#loc23)
        }) : (!cir.bool) -> !u32i loc(#loc23)
        %10 = cir.cast(integral, %9 : !u32i), !s32i loc(#loc23)
        cir.store %10, %0 : !s32i, !cir.ptr<!s32i> loc(#loc180)
      } loc(#loc179)
    } loc(#loc177)
    cir.scope {
      %3 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataBytes"] {alignment = 8 : i64} loc(#loc182)
      %4 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc183)
      %5 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["intPointer"] {alignment = 8 : i64} loc(#loc184)
      %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc32)
      %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc32)
      %8 = cir.const #cir.int<4> : !u64i loc(#loc185)
      %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc186)
      cir.store %9, %3 : !u64i, !cir.ptr<!u64i> loc(#loc187)
      %10 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc36)
      %11 = cir.call @_Znam(%10) : (!u64i) -> !cir.ptr<!void> loc(#loc37)
      %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc188)
      %13 = cir.cast(bitcast, %12 : !cir.ptr<!s8i>), !cir.ptr<!s32i> loc(#loc188)
      cir.store %13, %5 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc189)
      cir.scope {
        %19 = cir.const #cir.int<0> : !s32i loc(#loc43)
        %20 = cir.cast(integral, %19 : !s32i), !u64i loc(#loc43)
        cir.store %20, %4 : !u64i, !cir.ptr<!u64i> loc(#loc191)
        cir.for : cond {
          %21 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc45)
          %22 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc46)
          %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc46)
          %24 = cir.cmp(lt, %21, %23) : !u64i, !cir.bool loc(#loc192)
          cir.condition(%24) loc(#loc192)
        } body {
          cir.scope {
            %21 = cir.const #cir.int<0> : !s32i loc(#loc48)
            %22 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc49)
            %23 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc50)
            %24 = cir.ptr_stride(%22 : !cir.ptr<!s32i>, %23 : !u64i), !cir.ptr<!s32i> loc(#loc51)
            cir.store %21, %24 : !s32i, !cir.ptr<!s32i> loc(#loc194)
          } loc(#loc193)
          cir.yield loc(#loc42)
        } step {
          %21 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc52)
          %22 = cir.unary(inc, %21) : !u64i, !u64i loc(#loc53)
          cir.store %22, %4 : !u64i, !cir.ptr<!u64i> loc(#loc195)
          cir.yield loc(#loc190)
        } loc(#loc190)
      } loc(#loc190)
      %14 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc54)
      %15 = cir.const #cir.int<0> : !s32i loc(#loc55)
      %16 = cir.ptr_stride(%14 : !cir.ptr<!s32i>, %15 : !s32i), !cir.ptr<!s32i> loc(#loc56)
      %17 = cir.load %16 : !cir.ptr<!s32i>, !s32i loc(#loc54)
      cir.call @printIntLine(%17) : (!s32i) -> () loc(#loc57)
      %18 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc58)
      cir.delete.array %18 : <!s32i> loc(#loc58)
    } loc(#loc181)
    cir.return loc(#loc12)
  } loc(#loc174)
  cir.func internal private @_ZL18staticReturnsFalsev() -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc60)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc61)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc197)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc197)
    cir.return %2 : !s32i loc(#loc197)
  } loc(#loc196)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc198)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc65)
  cir.func internal private @_ZN55CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_08L8goodG2B1Ev() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc200)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc70)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc71)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc201)
    cir.scope {
      %3 = cir.call @_ZL18staticReturnsFalsev() : () -> !s32i loc(#loc75)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc203)
      cir.if %4 {
        %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc65)
        %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc65)
        cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc80)
      } else {
        %5 = cir.const #cir.int<20> : !s32i loc(#loc81)
        cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc205)
      } loc(#loc204)
    } loc(#loc202)
    cir.scope {
      %3 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataBytes"] {alignment = 8 : i64} loc(#loc207)
      %4 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc208)
      %5 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["intPointer"] {alignment = 8 : i64} loc(#loc209)
      %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc90)
      %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc90)
      %8 = cir.const #cir.int<4> : !u64i loc(#loc210)
      %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc211)
      cir.store %9, %3 : !u64i, !cir.ptr<!u64i> loc(#loc212)
      %10 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc94)
      %11 = cir.call @_Znam(%10) : (!u64i) -> !cir.ptr<!void> loc(#loc95)
      %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc213)
      %13 = cir.cast(bitcast, %12 : !cir.ptr<!s8i>), !cir.ptr<!s32i> loc(#loc213)
      cir.store %13, %5 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc214)
      cir.scope {
        %19 = cir.const #cir.int<0> : !s32i loc(#loc101)
        %20 = cir.cast(integral, %19 : !s32i), !u64i loc(#loc101)
        cir.store %20, %4 : !u64i, !cir.ptr<!u64i> loc(#loc216)
        cir.for : cond {
          %21 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc103)
          %22 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc104)
          %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc104)
          %24 = cir.cmp(lt, %21, %23) : !u64i, !cir.bool loc(#loc217)
          cir.condition(%24) loc(#loc217)
        } body {
          cir.scope {
            %21 = cir.const #cir.int<0> : !s32i loc(#loc106)
            %22 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc107)
            %23 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc108)
            %24 = cir.ptr_stride(%22 : !cir.ptr<!s32i>, %23 : !u64i), !cir.ptr<!s32i> loc(#loc109)
            cir.store %21, %24 : !s32i, !cir.ptr<!s32i> loc(#loc219)
          } loc(#loc218)
          cir.yield loc(#loc100)
        } step {
          %21 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc110)
          %22 = cir.unary(inc, %21) : !u64i, !u64i loc(#loc111)
          cir.store %22, %4 : !u64i, !cir.ptr<!u64i> loc(#loc220)
          cir.yield loc(#loc215)
        } loc(#loc215)
      } loc(#loc215)
      %14 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc112)
      %15 = cir.const #cir.int<0> : !s32i loc(#loc113)
      %16 = cir.ptr_stride(%14 : !cir.ptr<!s32i>, %15 : !s32i), !cir.ptr<!s32i> loc(#loc114)
      %17 = cir.load %16 : !cir.ptr<!s32i>, !s32i loc(#loc112)
      cir.call @printIntLine(%17) : (!s32i) -> () loc(#loc115)
      %18 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc116)
      cir.delete.array %18 : <!s32i> loc(#loc116)
    } loc(#loc206)
    cir.return loc(#loc67)
  } loc(#loc199)
  cir.func internal private @_ZN55CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_08L8goodG2B2Ev() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc222)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc121)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc122)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc223)
    cir.scope {
      %3 = cir.call @_ZL17staticReturnsTruev() : () -> !s32i loc(#loc126)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc225)
      cir.if %4 {
        %5 = cir.const #cir.int<20> : !s32i loc(#loc129)
        cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc227)
      } loc(#loc226)
    } loc(#loc224)
    cir.scope {
      %3 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataBytes"] {alignment = 8 : i64} loc(#loc229)
      %4 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc230)
      %5 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["intPointer"] {alignment = 8 : i64} loc(#loc231)
      %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc138)
      %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc138)
      %8 = cir.const #cir.int<4> : !u64i loc(#loc232)
      %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc233)
      cir.store %9, %3 : !u64i, !cir.ptr<!u64i> loc(#loc234)
      %10 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc142)
      %11 = cir.call @_Znam(%10) : (!u64i) -> !cir.ptr<!void> loc(#loc143)
      %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc235)
      %13 = cir.cast(bitcast, %12 : !cir.ptr<!s8i>), !cir.ptr<!s32i> loc(#loc235)
      cir.store %13, %5 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc236)
      cir.scope {
        %19 = cir.const #cir.int<0> : !s32i loc(#loc149)
        %20 = cir.cast(integral, %19 : !s32i), !u64i loc(#loc149)
        cir.store %20, %4 : !u64i, !cir.ptr<!u64i> loc(#loc238)
        cir.for : cond {
          %21 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc151)
          %22 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc152)
          %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc152)
          %24 = cir.cmp(lt, %21, %23) : !u64i, !cir.bool loc(#loc239)
          cir.condition(%24) loc(#loc239)
        } body {
          cir.scope {
            %21 = cir.const #cir.int<0> : !s32i loc(#loc154)
            %22 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc155)
            %23 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc156)
            %24 = cir.ptr_stride(%22 : !cir.ptr<!s32i>, %23 : !u64i), !cir.ptr<!s32i> loc(#loc157)
            cir.store %21, %24 : !s32i, !cir.ptr<!s32i> loc(#loc241)
          } loc(#loc240)
          cir.yield loc(#loc148)
        } step {
          %21 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc158)
          %22 = cir.unary(inc, %21) : !u64i, !u64i loc(#loc159)
          cir.store %22, %4 : !u64i, !cir.ptr<!u64i> loc(#loc242)
          cir.yield loc(#loc237)
        } loc(#loc237)
      } loc(#loc237)
      %14 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc160)
      %15 = cir.const #cir.int<0> : !s32i loc(#loc161)
      %16 = cir.ptr_stride(%14 : !cir.ptr<!s32i>, %15 : !s32i), !cir.ptr<!s32i> loc(#loc162)
      %17 = cir.load %16 : !cir.ptr<!s32i>, !s32i loc(#loc160)
      cir.call @printIntLine(%17) : (!s32i) -> () loc(#loc163)
      %18 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc164)
      cir.delete.array %18 : <!s32i> loc(#loc164)
    } loc(#loc228)
    cir.return loc(#loc118)
  } loc(#loc221)
  cir.func @_ZN55CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_084goodEv() extra(#fn_attr) {
    cir.call @_ZN55CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_08L8goodG2B1Ev() : () -> () loc(#loc167)
    cir.call @_ZN55CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_08L8goodG2B2Ev() : () -> () loc(#loc168)
    cir.return loc(#loc166)
  } loc(#loc243)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE680_Integer_Overflow_to_Buffer_Overflow/CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_08.cpp":0:0)
#loc1 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_08.cpp":22:1)
#loc2 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_08.cpp":25:1)
#loc3 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_08.cpp":24:12)
#loc4 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_08.cpp":24:5)
#loc5 = loc("/usr/include/stdlib.h":573:1)
#loc6 = loc("/usr/include/stdlib.h":573:24)
#loc7 = loc("/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/new":128:20)
#loc8 = loc("/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/new":129:41)
#loc9 = loc("../../testcasesupport/std_testcase_io.h":18:1)
#loc10 = loc("../../testcasesupport/std_testcase_io.h":18:33)
#loc11 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_08.cpp":37:1)
#loc12 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_08.cpp":60:1)
#loc13 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_08.cpp":39:5)
#loc14 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_08.cpp":39:9)
#loc15 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_08.cpp":41:13)
#loc16 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_08.cpp":41:12)
#loc17 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_08.cpp":41:5)
#loc18 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_08.cpp":42:5)
#loc19 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_08.cpp":46:5)
#loc20 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_08.cpp":42:8)
#loc21 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_08.cpp":42:26)
#loc22 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_08.cpp":43:5)
#loc23 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_08.cpp":45:16)
#loc24 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_08.cpp":45:9)
#loc25 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_08.cpp":47:5)
#loc26 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_08.cpp":59:5)
#loc27 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_08.cpp":48:9)
#loc28 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_08.cpp":48:16)
#loc29 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_08.cpp":48:26)
#loc30 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_08.cpp":49:9)
#loc31 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_08.cpp":49:14)
#loc32 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_08.cpp":51:21)
#loc33 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_08.cpp":51:28)
#loc34 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_08.cpp":51:38)
#loc35 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_08.cpp":51:9)
#loc36 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_08.cpp":52:37)
#loc37 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_08.cpp":37:6)
#loc38 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_08.cpp":52:28)
#loc39 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_08.cpp":52:46)
#loc40 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_08.cpp":52:9)
#loc41 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_08.cpp":53:9)
#loc42 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_08.cpp":56:9)
#loc43 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_08.cpp":53:18)
#loc44 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_08.cpp":53:14)
#loc45 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_08.cpp":53:21)
#loc46 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_08.cpp":53:33)
#loc47 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_08.cpp":54:9)
#loc48 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_08.cpp":55:29)
#loc49 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_08.cpp":55:13)
#loc50 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_08.cpp":55:24)
#loc51 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_08.cpp":55:25)
#loc52 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_08.cpp":53:40)
#loc53 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_08.cpp":53:39)
#loc54 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_08.cpp":57:22)
#loc55 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_08.cpp":57:33)
#loc56 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_08.cpp":57:34)
#loc57 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_08.cpp":57:9)
#loc58 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_08.cpp":58:19)
#loc59 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_08.cpp":27:1)
#loc60 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_08.cpp":30:1)
#loc61 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_08.cpp":29:12)
#loc62 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_08.cpp":29:5)
#loc63 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc64 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc65 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_08.cpp":75:19)
#loc66 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_08.cpp":67:1)
#loc67 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_08.cpp":95:1)
#loc68 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_08.cpp":69:5)
#loc69 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_08.cpp":69:9)
#loc70 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_08.cpp":71:13)
#loc71 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_08.cpp":71:12)
#loc72 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_08.cpp":71:5)
#loc73 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_08.cpp":72:5)
#loc74 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_08.cpp":81:5)
#loc75 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_08.cpp":72:8)
#loc76 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_08.cpp":72:27)
#loc77 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_08.cpp":73:5)
#loc78 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_08.cpp":76:5)
#loc79 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_08.cpp":78:5)
#loc80 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_08.cpp":75:9)
#loc81 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_08.cpp":80:16)
#loc82 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_08.cpp":80:9)
#loc83 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_08.cpp":82:5)
#loc84 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_08.cpp":94:5)
#loc85 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_08.cpp":83:9)
#loc86 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_08.cpp":83:16)
#loc87 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_08.cpp":83:26)
#loc88 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_08.cpp":84:9)
#loc89 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_08.cpp":84:14)
#loc90 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_08.cpp":86:21)
#loc91 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_08.cpp":86:28)
#loc92 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_08.cpp":86:38)
#loc93 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_08.cpp":86:9)
#loc94 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_08.cpp":87:37)
#loc95 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_08.cpp":67:13)
#loc96 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_08.cpp":87:28)
#loc97 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_08.cpp":87:46)
#loc98 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_08.cpp":87:9)
#loc99 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_08.cpp":88:9)
#loc100 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_08.cpp":91:9)
#loc101 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_08.cpp":88:18)
#loc102 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_08.cpp":88:14)
#loc103 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_08.cpp":88:21)
#loc104 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_08.cpp":88:33)
#loc105 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_08.cpp":89:9)
#loc106 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_08.cpp":90:29)
#loc107 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_08.cpp":90:13)
#loc108 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_08.cpp":90:24)
#loc109 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_08.cpp":90:25)
#loc110 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_08.cpp":88:40)
#loc111 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_08.cpp":88:39)
#loc112 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_08.cpp":92:22)
#loc113 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_08.cpp":92:33)
#loc114 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_08.cpp":92:34)
#loc115 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_08.cpp":92:9)
#loc116 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_08.cpp":93:19)
#loc117 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_08.cpp":98:1)
#loc118 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_08.cpp":121:1)
#loc119 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_08.cpp":100:5)
#loc120 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_08.cpp":100:9)
#loc121 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_08.cpp":102:13)
#loc122 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_08.cpp":102:12)
#loc123 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_08.cpp":102:5)
#loc124 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_08.cpp":103:5)
#loc125 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_08.cpp":107:5)
#loc126 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_08.cpp":103:8)
#loc127 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_08.cpp":103:26)
#loc128 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_08.cpp":104:5)
#loc129 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_08.cpp":106:16)
#loc130 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_08.cpp":106:9)
#loc131 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_08.cpp":108:5)
#loc132 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_08.cpp":120:5)
#loc133 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_08.cpp":109:9)
#loc134 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_08.cpp":109:16)
#loc135 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_08.cpp":109:26)
#loc136 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_08.cpp":110:9)
#loc137 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_08.cpp":110:14)
#loc138 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_08.cpp":112:21)
#loc139 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_08.cpp":112:28)
#loc140 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_08.cpp":112:38)
#loc141 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_08.cpp":112:9)
#loc142 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_08.cpp":113:37)
#loc143 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_08.cpp":98:13)
#loc144 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_08.cpp":113:28)
#loc145 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_08.cpp":113:46)
#loc146 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_08.cpp":113:9)
#loc147 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_08.cpp":114:9)
#loc148 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_08.cpp":117:9)
#loc149 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_08.cpp":114:18)
#loc150 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_08.cpp":114:14)
#loc151 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_08.cpp":114:21)
#loc152 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_08.cpp":114:33)
#loc153 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_08.cpp":115:9)
#loc154 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_08.cpp":116:29)
#loc155 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_08.cpp":116:13)
#loc156 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_08.cpp":116:24)
#loc157 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_08.cpp":116:25)
#loc158 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_08.cpp":114:40)
#loc159 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_08.cpp":114:39)
#loc160 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_08.cpp":118:22)
#loc161 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_08.cpp":118:33)
#loc162 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_08.cpp":118:34)
#loc163 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_08.cpp":118:9)
#loc164 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_08.cpp":119:19)
#loc165 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_08.cpp":123:1)
#loc166 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_08.cpp":127:1)
#loc167 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_08.cpp":125:5)
#loc168 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_08.cpp":126:5)
#loc169 = loc(fused[#loc1, #loc2])
#loc170 = loc(fused[#loc4, #loc3])
#loc171 = loc(fused[#loc5, #loc6])
#loc172 = loc(fused[#loc7, #loc8])
#loc173 = loc(fused[#loc9, #loc10])
#loc174 = loc(fused[#loc11, #loc12])
#loc175 = loc(fused[#loc13, #loc14])
#loc176 = loc(fused[#loc17, #loc15])
#loc177 = loc(fused[#loc18, #loc19])
#loc178 = loc(fused[#loc20, #loc21])
#loc179 = loc(fused[#loc22, #loc19])
#loc180 = loc(fused[#loc24, #loc23])
#loc181 = loc(fused[#loc25, #loc26])
#loc182 = loc(fused[#loc27, #loc28])
#loc183 = loc(fused[#loc27, #loc29])
#loc184 = loc(fused[#loc30, #loc31])
#loc185 = loc(fused[#loc33, #loc34])
#loc186 = loc(fused[#loc32, #loc34])
#loc187 = loc(fused[#loc35, #loc34])
#loc188 = loc(fused[#loc38, #loc39])
#loc189 = loc(fused[#loc40, #loc39])
#loc190 = loc(fused[#loc41, #loc42])
#loc191 = loc(fused[#loc44, #loc43])
#loc192 = loc(fused[#loc45, #loc46])
#loc193 = loc(fused[#loc47, #loc42])
#loc194 = loc(fused[#loc49, #loc48])
#loc195 = loc(fused[#loc53, #loc52])
#loc196 = loc(fused[#loc59, #loc60])
#loc197 = loc(fused[#loc62, #loc61])
#loc198 = loc(fused[#loc63, #loc64])
#loc199 = loc(fused[#loc66, #loc67])
#loc200 = loc(fused[#loc68, #loc69])
#loc201 = loc(fused[#loc72, #loc70])
#loc202 = loc(fused[#loc73, #loc74])
#loc203 = loc(fused[#loc75, #loc76])
#loc204 = loc(fused[#loc77, #loc78, #loc79, #loc74])
#loc205 = loc(fused[#loc82, #loc81])
#loc206 = loc(fused[#loc83, #loc84])
#loc207 = loc(fused[#loc85, #loc86])
#loc208 = loc(fused[#loc85, #loc87])
#loc209 = loc(fused[#loc88, #loc89])
#loc210 = loc(fused[#loc91, #loc92])
#loc211 = loc(fused[#loc90, #loc92])
#loc212 = loc(fused[#loc93, #loc92])
#loc213 = loc(fused[#loc96, #loc97])
#loc214 = loc(fused[#loc98, #loc97])
#loc215 = loc(fused[#loc99, #loc100])
#loc216 = loc(fused[#loc102, #loc101])
#loc217 = loc(fused[#loc103, #loc104])
#loc218 = loc(fused[#loc105, #loc100])
#loc219 = loc(fused[#loc107, #loc106])
#loc220 = loc(fused[#loc111, #loc110])
#loc221 = loc(fused[#loc117, #loc118])
#loc222 = loc(fused[#loc119, #loc120])
#loc223 = loc(fused[#loc123, #loc121])
#loc224 = loc(fused[#loc124, #loc125])
#loc225 = loc(fused[#loc126, #loc127])
#loc226 = loc(fused[#loc128, #loc125])
#loc227 = loc(fused[#loc130, #loc129])
#loc228 = loc(fused[#loc131, #loc132])
#loc229 = loc(fused[#loc133, #loc134])
#loc230 = loc(fused[#loc133, #loc135])
#loc231 = loc(fused[#loc136, #loc137])
#loc232 = loc(fused[#loc139, #loc140])
#loc233 = loc(fused[#loc138, #loc140])
#loc234 = loc(fused[#loc141, #loc140])
#loc235 = loc(fused[#loc144, #loc145])
#loc236 = loc(fused[#loc146, #loc145])
#loc237 = loc(fused[#loc147, #loc148])
#loc238 = loc(fused[#loc150, #loc149])
#loc239 = loc(fused[#loc151, #loc152])
#loc240 = loc(fused[#loc153, #loc148])
#loc241 = loc(fused[#loc155, #loc154])
#loc242 = loc(fused[#loc159, #loc158])
#loc243 = loc(fused[#loc165, #loc166])
