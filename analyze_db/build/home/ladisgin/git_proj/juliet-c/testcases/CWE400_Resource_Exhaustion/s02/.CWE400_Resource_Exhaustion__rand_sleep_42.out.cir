!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc5 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":30:22)
#loc6 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":30:26)
#loc8 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":33:13)
#loc47 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":112:10)
#loc48 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":112:14)
#loc49 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":112:20)
#loc50 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":112:32)
#loc67 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":72:26)
#loc68 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":72:30)
#loc70 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":75:13)
#loc91 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":86:19)
#loc103 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":53:26)
#loc104 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":53:30)
#true = #cir.bool<true> : !cir.bool
#loc127 = loc(fused[#loc5, #loc6])
#loc142 = loc(fused[#loc47, #loc48])
#loc143 = loc(fused[#loc49, #loc50])
#loc148 = loc(fused[#loc67, #loc68])
#loc160 = loc(fused[#loc103, #loc104])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE400_Resource_Exhaustion/s02/CWE400_Resource_Exhaustion__rand_sleep_42.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc125)
  cir.func internal private @badSource(%arg0: !s32i loc(fused[#loc5, #loc6])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count", init] {alignment = 4 : i64} loc(#loc127)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc4)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc7)
    %2 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc8)
    %4 = cir.binop(and, %2, %3) : !s32i loc(#loc8)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc8)
    cir.brcond %5 ^bb1, ^bb2 loc(#loc8)
  ^bb1:  // pred: ^bb0
    %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
    %7 = cir.cast(integral, %6 : !s32i), !u32i loc(#loc8)
    %8 = cir.const #cir.int<30> : !s32i loc(#loc8)
    %9 = cir.shift(left, %7 : !u32i, %8 : !s32i) -> !u32i loc(#loc8)
    %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
    %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc8)
    %12 = cir.const #cir.int<15> : !s32i loc(#loc8)
    %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc8)
    %14 = cir.binop(xor, %9, %13) : !u32i loc(#loc8)
    %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
    %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc8)
    %17 = cir.binop(xor, %14, %16) : !u32i loc(#loc8)
    cir.br ^bb3(%17 : !u32i) loc(#loc8)
  ^bb2:  // pred: ^bb0
    %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
    %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc8)
    %20 = cir.const #cir.int<30> : !s32i loc(#loc8)
    %21 = cir.shift(left, %19 : !u32i, %20 : !s32i) -> !u32i loc(#loc8)
    %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
    %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc8)
    %24 = cir.const #cir.int<15> : !s32i loc(#loc8)
    %25 = cir.shift(left, %23 : !u32i, %24 : !s32i) -> !u32i loc(#loc8)
    %26 = cir.binop(xor, %21, %25) : !u32i loc(#loc8)
    %27 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
    %28 = cir.cast(integral, %27 : !s32i), !u32i loc(#loc8)
    %29 = cir.binop(xor, %26, %28) : !u32i loc(#loc8)
    %30 = cir.unary(minus, %29) : !u32i, !u32i loc(#loc8)
    %31 = cir.const #cir.int<1> : !s32i loc(#loc8)
    %32 = cir.cast(integral, %31 : !s32i), !u32i loc(#loc8)
    %33 = cir.binop(sub, %30, %32) : !u32i loc(#loc8)
    cir.br ^bb3(%33 : !u32i) loc(#loc8)
  ^bb3(%34: !u32i loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":33:13)):  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc8)
  ^bb4:  // pred: ^bb3
    %35 = cir.cast(integral, %34 : !u32i), !s32i loc(#loc8)
    cir.store %35, %0 : !s32i, !cir.ptr<!s32i> loc(#loc128)
    %36 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc10)
    cir.store %36, %1 : !s32i, !cir.ptr<!s32i> loc(#loc129)
    %37 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc129)
    cir.return %37 : !s32i loc(#loc129)
  } loc(#loc126)
  cir.func private @usleep(!u32i) -> !s32i loc(#loc130)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc131)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Sleep time possibly too long\00" : !cir.array<!s8i x 29>> : !cir.array<!s8i x 29> {alignment = 1 : i64} loc(#loc16)
  cir.func no_proto @CWE400_Resource_Exhaustion__rand_sleep_42_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count"] {alignment = 4 : i64} loc(#loc133)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc21)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc22)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc134)
    %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc24)
    %4 = cir.call @badSource(%3) : (!s32i) -> !s32i loc(#loc25)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc135)
    %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc28)
    %6 = cir.cast(integral, %5 : !s32i), !u32i loc(#loc28)
    %7 = cir.call @usleep(%6) : (!u32i) -> !s32i loc(#loc29)
    %8 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 29>> loc(#loc16)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 29>>), !cir.ptr<!s8i> loc(#loc16)
    cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc30)
    cir.return loc(#loc18)
  } loc(#loc132)
  cir.func no_proto @CWE400_Resource_Exhaustion__rand_sleep_42_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc137)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc33)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc138)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc35)
    cir.return loc(#loc32)
  } loc(#loc136)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc139)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc140)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc41)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc42)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc43)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc44)
  cir.func @main(%arg0: !s32i loc(fused[#loc47, #loc48]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc49, #loc50])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc142)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc143)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc46)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc51)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc51)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc52)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc53)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc53)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc54)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc41)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc41)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc55)
    %8 = cir.get_global @CWE400_Resource_Exhaustion__rand_sleep_42_good : !cir.ptr<!cir.func<!void ()>> loc(#loc144)
    cir.call @CWE400_Resource_Exhaustion__rand_sleep_42_good() : () -> () loc(#loc56)
    %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc42)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc42)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc58)
    %11 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc43)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc43)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc59)
    %13 = cir.get_global @CWE400_Resource_Exhaustion__rand_sleep_42_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc145)
    cir.call @CWE400_Resource_Exhaustion__rand_sleep_42_bad() : () -> () loc(#loc60)
    %14 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc44)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc44)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc62)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc63)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc146)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc146)
    cir.return %17 : !s32i loc(#loc146)
  } loc(#loc141)
  cir.func internal private @goodB2GSource(%arg0: !s32i loc(fused[#loc67, #loc68])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count", init] {alignment = 4 : i64} loc(#loc148)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc66)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc69)
    %2 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc70)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc70)
    %4 = cir.binop(and, %2, %3) : !s32i loc(#loc70)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc70)
    cir.brcond %5 ^bb1, ^bb2 loc(#loc70)
  ^bb1:  // pred: ^bb0
    %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc70)
    %7 = cir.cast(integral, %6 : !s32i), !u32i loc(#loc70)
    %8 = cir.const #cir.int<30> : !s32i loc(#loc70)
    %9 = cir.shift(left, %7 : !u32i, %8 : !s32i) -> !u32i loc(#loc70)
    %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc70)
    %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc70)
    %12 = cir.const #cir.int<15> : !s32i loc(#loc70)
    %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc70)
    %14 = cir.binop(xor, %9, %13) : !u32i loc(#loc70)
    %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc70)
    %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc70)
    %17 = cir.binop(xor, %14, %16) : !u32i loc(#loc70)
    cir.br ^bb3(%17 : !u32i) loc(#loc70)
  ^bb2:  // pred: ^bb0
    %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc70)
    %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc70)
    %20 = cir.const #cir.int<30> : !s32i loc(#loc70)
    %21 = cir.shift(left, %19 : !u32i, %20 : !s32i) -> !u32i loc(#loc70)
    %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc70)
    %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc70)
    %24 = cir.const #cir.int<15> : !s32i loc(#loc70)
    %25 = cir.shift(left, %23 : !u32i, %24 : !s32i) -> !u32i loc(#loc70)
    %26 = cir.binop(xor, %21, %25) : !u32i loc(#loc70)
    %27 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc70)
    %28 = cir.cast(integral, %27 : !s32i), !u32i loc(#loc70)
    %29 = cir.binop(xor, %26, %28) : !u32i loc(#loc70)
    %30 = cir.unary(minus, %29) : !u32i, !u32i loc(#loc70)
    %31 = cir.const #cir.int<1> : !s32i loc(#loc70)
    %32 = cir.cast(integral, %31 : !s32i), !u32i loc(#loc70)
    %33 = cir.binop(sub, %30, %32) : !u32i loc(#loc70)
    cir.br ^bb3(%33 : !u32i) loc(#loc70)
  ^bb3(%34: !u32i loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":75:13)):  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc70)
  ^bb4:  // pred: ^bb3
    %35 = cir.cast(integral, %34 : !u32i), !s32i loc(#loc70)
    cir.store %35, %0 : !s32i, !cir.ptr<!s32i> loc(#loc149)
    %36 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc72)
    cir.store %36, %1 : !s32i, !cir.ptr<!s32i> loc(#loc150)
    %37 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc150)
    cir.return %37 : !s32i loc(#loc150)
  } loc(#loc147)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"Sleep time OK\00" : !cir.array<!s8i x 14>> : !cir.array<!s8i x 14> {alignment = 1 : i64} loc(#loc74)
  cir.global "private" constant cir_private dsolocal @".str.6" = #cir.const_array<"Sleep time too long\00" : !cir.array<!s8i x 20>> : !cir.array<!s8i x 20> {alignment = 1 : i64} loc(#loc75)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count"] {alignment = 4 : i64} loc(#loc152)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc80)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc81)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc153)
    %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc83)
    %4 = cir.call @goodB2GSource(%3) : (!s32i) -> !s32i loc(#loc84)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc154)
    cir.br ^bb1 loc(#loc155)
  ^bb1:  // pred: ^bb0
    %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc89)
    %6 = cir.const #cir.int<0> : !s32i loc(#loc90)
    %7 = cir.cmp(gt, %5, %6) : !s32i, !cir.bool loc(#loc156)
    cir.brcond %7 ^bb2, ^bb7 loc(#loc91)
  ^bb2:  // pred: ^bb1
    %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc92)
    %9 = cir.const #cir.int<2000> : !s32i loc(#loc93)
    %10 = cir.cmp(le, %8, %9) : !s32i, !cir.bool loc(#loc157)
    cir.brcond %10 ^bb3, ^bb4 loc(#loc91)
  ^bb3:  // pred: ^bb2
    %11 = cir.const #true loc(#loc91)
    cir.br ^bb5(%11 : !cir.bool) loc(#loc91)
  ^bb4:  // pred: ^bb2
    %12 = cir.const #false loc(#loc91)
    cir.br ^bb5(%12 : !cir.bool) loc(#loc91)
  ^bb5(%13: !cir.bool loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":86:19)):  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc91)
  ^bb6:  // pred: ^bb5
    cir.br ^bb8(%13 : !cir.bool) loc(#loc91)
  ^bb7:  // pred: ^bb1
    %14 = cir.const #false loc(#loc91)
    cir.br ^bb8(%14 : !cir.bool) loc(#loc91)
  ^bb8(%15: !cir.bool loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":86:19)):  // 2 preds: ^bb6, ^bb7
    cir.br ^bb9 loc(#loc91)
  ^bb9:  // pred: ^bb8
    cir.brcond %15 ^bb10, ^bb11 loc(#loc158)
  ^bb10:  // pred: ^bb9
    %16 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc97)
    %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc97)
    %18 = cir.call @usleep(%17) : (!u32i) -> !s32i loc(#loc98)
    %19 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 14>> loc(#loc74)
    %20 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc74)
    cir.call @printLine(%20) : (!cir.ptr<!s8i>) -> () loc(#loc99)
    cir.br ^bb12 loc(#loc95)
  ^bb11:  // pred: ^bb9
    %21 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 20>> loc(#loc75)
    %22 = cir.cast(array_to_ptrdecay, %21 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc75)
    cir.call @printLine(%22) : (!cir.ptr<!s8i>) -> () loc(#loc100)
    cir.br ^bb12 loc(#loc88)
  ^bb12:  // 2 preds: ^bb10, ^bb11
    cir.br ^bb13 loc(#loc88)
  ^bb13:  // pred: ^bb12
    cir.return loc(#loc77)
  } loc(#loc151)
  cir.func internal private @goodG2BSource(%arg0: !s32i loc(fused[#loc103, #loc104])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count", init] {alignment = 4 : i64} loc(#loc160)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc102)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc105)
    %2 = cir.const #cir.int<20> : !s32i loc(#loc106)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc161)
    %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc108)
    cir.store %3, %1 : !s32i, !cir.ptr<!s32i> loc(#loc162)
    %4 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc162)
    cir.return %4 : !s32i loc(#loc162)
  } loc(#loc159)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count"] {alignment = 4 : i64} loc(#loc164)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc114)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc115)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc165)
    %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc117)
    %4 = cir.call @goodG2BSource(%3) : (!s32i) -> !s32i loc(#loc118)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc166)
    %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc121)
    %6 = cir.cast(integral, %5 : !s32i), !u32i loc(#loc121)
    %7 = cir.call @usleep(%6) : (!u32i) -> !s32i loc(#loc122)
    %8 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 29>> loc(#loc123)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 29>>), !cir.ptr<!s8i> loc(#loc123)
    cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc124)
    cir.return loc(#loc111)
  } loc(#loc163)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE400_Resource_Exhaustion/s02/CWE400_Resource_Exhaustion__rand_sleep_42.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":30:1)
#loc4 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":35:1)
#loc7 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":31:1)
#loc9 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":33:5)
#loc10 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":34:12)
#loc11 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":34:5)
#loc12 = loc("/usr/include/unistd.h":480:1)
#loc13 = loc("/usr/include/unistd.h":480:43)
#loc14 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc15 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc16 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":45:15)
#loc17 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":37:1)
#loc18 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":46:1)
#loc19 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":39:5)
#loc20 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":39:9)
#loc21 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":41:14)
#loc22 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":41:13)
#loc23 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":41:5)
#loc24 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":42:23)
#loc25 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":42:13)
#loc26 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":42:5)
#loc27 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":42:28)
#loc28 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":44:11)
#loc29 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":44:5)
#loc30 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":45:5)
#loc31 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":97:1)
#loc32 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":101:1)
#loc33 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":99:5)
#loc34 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":99:13)
#loc35 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":100:5)
#loc36 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":100:13)
#loc37 = loc("/usr/include/stdlib.h":575:1)
#loc38 = loc("/usr/include/stdlib.h":575:41)
#loc39 = loc("/usr/include/time.h":76:1)
#loc40 = loc("/usr/include/time.h":76:38)
#loc41 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":117:15)
#loc42 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":119:15)
#loc43 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":122:15)
#loc44 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":124:15)
#loc45 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":112:1)
#loc46 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":127:1)
#loc51 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":113:1)
#loc52 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":115:27)
#loc53 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":115:22)
#loc54 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":115:5)
#loc55 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":117:5)
#loc56 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":118:5)
#loc57 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":118:52)
#loc58 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":119:5)
#loc59 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":122:5)
#loc60 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":123:5)
#loc61 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":123:51)
#loc62 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":124:5)
#loc63 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":126:12)
#loc64 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":126:5)
#loc65 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":72:1)
#loc66 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":77:1)
#loc69 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":73:1)
#loc71 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":75:5)
#loc72 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":76:12)
#loc73 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":76:5)
#loc74 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":89:19)
#loc75 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":93:19)
#loc76 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":79:1)
#loc77 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":95:1)
#loc78 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":81:5)
#loc79 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":81:9)
#loc80 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":83:14)
#loc81 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":83:13)
#loc82 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":83:5)
#loc83 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":84:27)
#loc84 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":84:13)
#loc85 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":84:5)
#loc86 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":84:32)
#loc87 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":86:5)
#loc88 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":94:5)
#loc89 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":86:9)
#loc90 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":86:17)
#loc92 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":86:22)
#loc93 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":86:31)
#loc94 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":87:5)
#loc95 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":90:5)
#loc96 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":92:5)
#loc97 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":88:15)
#loc98 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":88:9)
#loc99 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":89:9)
#loc100 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":93:9)
#loc101 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":53:1)
#loc102 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":58:1)
#loc105 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":54:1)
#loc106 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":56:13)
#loc107 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":56:5)
#loc108 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":57:12)
#loc109 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":57:5)
#loc110 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":60:1)
#loc111 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":69:1)
#loc112 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":62:5)
#loc113 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":62:9)
#loc114 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":64:14)
#loc115 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":64:13)
#loc116 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":64:5)
#loc117 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":65:27)
#loc118 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":65:13)
#loc119 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":65:5)
#loc120 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":65:32)
#loc121 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":67:11)
#loc122 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":67:5)
#loc123 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":68:15)
#loc124 = loc("CWE400_Resource_Exhaustion__rand_sleep_42.c":68:5)
#loc125 = loc(fused[#loc1, #loc2])
#loc126 = loc(fused[#loc3, #loc4])
#loc128 = loc(fused[#loc9, #loc8])
#loc129 = loc(fused[#loc11, #loc10])
#loc130 = loc(fused[#loc12, #loc13])
#loc131 = loc(fused[#loc14, #loc15])
#loc132 = loc(fused[#loc17, #loc18])
#loc133 = loc(fused[#loc19, #loc20])
#loc134 = loc(fused[#loc23, #loc21])
#loc135 = loc(fused[#loc26, #loc27])
#loc136 = loc(fused[#loc31, #loc32])
#loc137 = loc(fused[#loc33, #loc34])
#loc138 = loc(fused[#loc35, #loc36])
#loc139 = loc(fused[#loc37, #loc38])
#loc140 = loc(fused[#loc39, #loc40])
#loc141 = loc(fused[#loc45, #loc46])
#loc144 = loc(fused[#loc56, #loc57])
#loc145 = loc(fused[#loc60, #loc61])
#loc146 = loc(fused[#loc64, #loc63])
#loc147 = loc(fused[#loc65, #loc66])
#loc149 = loc(fused[#loc71, #loc70])
#loc150 = loc(fused[#loc73, #loc72])
#loc151 = loc(fused[#loc76, #loc77])
#loc152 = loc(fused[#loc78, #loc79])
#loc153 = loc(fused[#loc82, #loc80])
#loc154 = loc(fused[#loc85, #loc86])
#loc155 = loc(fused[#loc87, #loc88])
#loc156 = loc(fused[#loc89, #loc90])
#loc157 = loc(fused[#loc92, #loc93])
#loc158 = loc(fused[#loc94, #loc95, #loc96, #loc88])
#loc159 = loc(fused[#loc101, #loc102])
#loc161 = loc(fused[#loc107, #loc106])
#loc162 = loc(fused[#loc109, #loc108])
#loc163 = loc(fused[#loc110, #loc111])
#loc164 = loc(fused[#loc112, #loc113])
#loc165 = loc(fused[#loc116, #loc114])
#loc166 = loc(fused[#loc119, #loc120])
