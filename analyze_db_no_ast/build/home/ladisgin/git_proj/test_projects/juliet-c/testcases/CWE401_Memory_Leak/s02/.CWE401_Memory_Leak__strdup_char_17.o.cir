!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE401_Memory_Leak/s02/CWE401_Memory_Leak__strdup_char_17.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @strdup(!cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc131)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc132)
  cir.func no_proto  @CWE401_Memory_Leak__strdup_char_17_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc134)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["j"] {alignment = 4 : i64} loc(#loc135)
    %2 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc136)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc12)
    cir.store %3, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc137)
    cir.scope {
      %4 = cir.const #cir.int<0> : !s32i loc(#loc16)
      cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc139)
      cir.for : cond {
        %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc18)
        %6 = cir.const #cir.int<1> : !s32i loc(#loc19)
        %7 = cir.cmp(lt, %5, %6) : !s32i, !s32i loc(#loc140)
        %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc20)
        cir.condition(%8) loc(#loc20)
      } body {
        cir.scope {
          cir.scope {
            %5 = cir.alloca !cir.array<!s8i x 9>, !cir.ptr<!cir.array<!s8i x 9>>, ["myString"] {alignment = 1 : i64} loc(#loc143)
            %6 = cir.const #cir.const_array<"myString\00" : !cir.array<!s8i x 9>> : !cir.array<!s8i x 9> loc(#loc143)
            cir.store %6, %5 : !cir.array<!s8i x 9>, !cir.ptr<!cir.array<!s8i x 9>> loc(#loc143)
            %7 = cir.get_global @strdup : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>)>> loc(#loc26)
            %8 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc27)
            %9 = cir.call @strdup(%8) : (!cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc26)
            cir.store %9, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc144)
            %10 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc30)
            cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc31)
          } loc(#loc142)
        } loc(#loc141)
        cir.yield loc(#loc15)
      } step {
        %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc32)
        %6 = cir.unary(inc, %5) : !s32i, !s32i loc(#loc33)
        cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc145)
        cir.yield loc(#loc138)
      } loc(#loc138)
    } loc(#loc138)
    cir.scope {
      %4 = cir.const #cir.int<0> : !s32i loc(#loc36)
      cir.store %4, %1 : !s32i, !cir.ptr<!s32i> loc(#loc147)
      cir.for : cond {
        %5 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc38)
        %6 = cir.const #cir.int<1> : !s32i loc(#loc39)
        %7 = cir.cmp(lt, %5, %6) : !s32i, !s32i loc(#loc148)
        %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc40)
        cir.condition(%8) loc(#loc40)
      } body {
        cir.scope {
        } loc(#loc149)
        cir.yield loc(#loc35)
      } step {
        %5 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc42)
        %6 = cir.unary(inc, %5) : !s32i, !s32i loc(#loc43)
        cir.store %6, %1 : !s32i, !cir.ptr<!s32i> loc(#loc150)
        cir.yield loc(#loc146)
      } loc(#loc146)
    } loc(#loc146)
    cir.return loc(#loc6)
  } loc(#loc133)
  cir.func no_proto  @CWE401_Memory_Leak__strdup_char_17_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc152)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc46)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc153)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc48)
    cir.return loc(#loc45)
  } loc(#loc151)
  cir.func private  @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc154)
  cir.func no_proto internal private  @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc156)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["k"] {alignment = 4 : i64} loc(#loc157)
    %2 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc158)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc59)
    cir.store %3, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc159)
    cir.scope {
      %4 = cir.const #cir.int<0> : !s32i loc(#loc63)
      cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc161)
      cir.for : cond {
        %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc65)
        %6 = cir.const #cir.int<1> : !s32i loc(#loc66)
        %7 = cir.cmp(lt, %5, %6) : !s32i, !s32i loc(#loc162)
        %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc67)
        cir.condition(%8) loc(#loc67)
      } body {
        cir.scope {
          cir.scope {
            %5 = cir.alloca !cir.array<!s8i x 9>, !cir.ptr<!cir.array<!s8i x 9>>, ["myString"] {alignment = 1 : i64} loc(#loc165)
            %6 = cir.const #cir.const_array<"myString\00" : !cir.array<!s8i x 9>> : !cir.array<!s8i x 9> loc(#loc165)
            cir.store %6, %5 : !cir.array<!s8i x 9>, !cir.ptr<!cir.array<!s8i x 9>> loc(#loc165)
            %7 = cir.get_global @strdup : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>)>> loc(#loc73)
            %8 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc74)
            %9 = cir.call @strdup(%8) : (!cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc73)
            cir.store %9, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc166)
            %10 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc77)
            cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc78)
          } loc(#loc164)
        } loc(#loc163)
        cir.yield loc(#loc62)
      } step {
        %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc79)
        %6 = cir.unary(inc, %5) : !s32i, !s32i loc(#loc80)
        cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc167)
        cir.yield loc(#loc160)
      } loc(#loc160)
    } loc(#loc160)
    cir.scope {
      %4 = cir.const #cir.int<0> : !s32i loc(#loc83)
      cir.store %4, %1 : !s32i, !cir.ptr<!s32i> loc(#loc169)
      cir.for : cond {
        %5 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc85)
        %6 = cir.const #cir.int<1> : !s32i loc(#loc86)
        %7 = cir.cmp(lt, %5, %6) : !s32i, !s32i loc(#loc170)
        %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc87)
        cir.condition(%8) loc(#loc87)
      } body {
        cir.scope {
          %5 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc89)
          %6 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc90)
          %7 = cir.cast(bitcast, %6 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc90)
          cir.call @free(%7) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc89)
        } loc(#loc171)
        cir.yield loc(#loc82)
      } step {
        %5 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc91)
        %6 = cir.unary(inc, %5) : !s32i, !s32i loc(#loc92)
        cir.store %6, %1 : !s32i, !cir.ptr<!s32i> loc(#loc172)
        cir.yield loc(#loc168)
      } loc(#loc168)
    } loc(#loc168)
    cir.return loc(#loc53)
  } loc(#loc155)
  cir.func private  @strcpy(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc173)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"a string\00" : !cir.array<!s8i x 9>> : !cir.array<!s8i x 9> {alignment = 1 : i64} loc(#loc95)
  cir.func no_proto internal private  @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["h"] {alignment = 4 : i64} loc(#loc175)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["j"] {alignment = 4 : i64} loc(#loc176)
    %2 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc177)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc103)
    cir.store %3, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc178)
    cir.scope {
      %4 = cir.const #cir.int<0> : !s32i loc(#loc107)
      cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc180)
      cir.for : cond {
        %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc109)
        %6 = cir.const #cir.int<1> : !s32i loc(#loc110)
        %7 = cir.cmp(lt, %5, %6) : !s32i, !s32i loc(#loc181)
        %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc111)
        cir.condition(%8) loc(#loc111)
      } body {
        cir.scope {
          %5 = cir.const #cir.int<100> : !s32i loc(#loc113)
          %6 = cir.cast(integral, %5 : !s32i), !u64i loc(#loc113)
          %7 = cir.const #cir.int<1> : !u64i loc(#loc113)
          %8 = cir.binop(mul, %6, %7) : !u64i loc(#loc113)
          %9 = cir.alloca !u8i, !cir.ptr<!u8i>, %8 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc113)
          %10 = cir.cast(bitcast, %9 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc113)
          %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc113)
          cir.store %11, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc183)
          %12 = cir.get_global @strcpy : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc115)
          %13 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc116)
          %14 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc95)
          %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc95)
          %16 = cir.call @strcpy(%13, %15) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc115)
          %17 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc117)
          cir.call @printLine(%17) : (!cir.ptr<!s8i>) -> () loc(#loc118)
        } loc(#loc182)
        cir.yield loc(#loc106)
      } step {
        %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc119)
        %6 = cir.unary(inc, %5) : !s32i, !s32i loc(#loc120)
        cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc184)
        cir.yield loc(#loc179)
      } loc(#loc179)
    } loc(#loc179)
    cir.scope {
      %4 = cir.const #cir.int<0> : !s32i loc(#loc123)
      cir.store %4, %1 : !s32i, !cir.ptr<!s32i> loc(#loc186)
      cir.for : cond {
        %5 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc125)
        %6 = cir.const #cir.int<1> : !s32i loc(#loc126)
        %7 = cir.cmp(lt, %5, %6) : !s32i, !s32i loc(#loc187)
        %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc127)
        cir.condition(%8) loc(#loc127)
      } body {
        cir.scope {
        } loc(#loc188)
        cir.yield loc(#loc122)
      } step {
        %5 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc129)
        %6 = cir.unary(inc, %5) : !s32i, !s32i loc(#loc130)
        cir.store %6, %1 : !s32i, !cir.ptr<!s32i> loc(#loc189)
        cir.yield loc(#loc185)
      } loc(#loc185)
    } loc(#loc185)
    cir.return loc(#loc97)
  } loc(#loc174)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE401_Memory_Leak/s02/CWE401_Memory_Leak__strdup_char_17.c":0:0)
#loc1 = loc("/usr/include/string.h":187:1)
#loc2 = loc("/usr/include/string.h":188:35)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc5 = loc("CWE401_Memory_Leak__strdup_char_17.c":24:1)
#loc6 = loc("CWE401_Memory_Leak__strdup_char_17.c":45:1)
#loc7 = loc("CWE401_Memory_Leak__strdup_char_17.c":26:5)
#loc8 = loc("CWE401_Memory_Leak__strdup_char_17.c":26:9)
#loc9 = loc("CWE401_Memory_Leak__strdup_char_17.c":26:11)
#loc10 = loc("CWE401_Memory_Leak__strdup_char_17.c":27:5)
#loc11 = loc("CWE401_Memory_Leak__strdup_char_17.c":27:12)
#loc12 = loc("CWE401_Memory_Leak__strdup_char_17.c":28:12)
#loc13 = loc("CWE401_Memory_Leak__strdup_char_17.c":28:5)
#loc14 = loc("CWE401_Memory_Leak__strdup_char_17.c":29:5)
#loc15 = loc("CWE401_Memory_Leak__strdup_char_17.c":38:5)
#loc16 = loc("CWE401_Memory_Leak__strdup_char_17.c":29:13)
#loc17 = loc("CWE401_Memory_Leak__strdup_char_17.c":29:9)
#loc18 = loc("CWE401_Memory_Leak__strdup_char_17.c":29:16)
#loc19 = loc("CWE401_Memory_Leak__strdup_char_17.c":29:20)
#loc20 = loc("CWE401_Memory_Leak__strdup_char_17.c":29:18)
#loc21 = loc("CWE401_Memory_Leak__strdup_char_17.c":30:5)
#loc22 = loc("CWE401_Memory_Leak__strdup_char_17.c":31:9)
#loc23 = loc("CWE401_Memory_Leak__strdup_char_17.c":37:9)
#loc24 = loc("CWE401_Memory_Leak__strdup_char_17.c":32:13)
#loc25 = loc("CWE401_Memory_Leak__strdup_char_17.c":32:31)
#loc26 = loc("CWE401_Memory_Leak__strdup_char_17.c":34:20)
#loc27 = loc("CWE401_Memory_Leak__strdup_char_17.c":34:27)
#loc28 = loc("CWE401_Memory_Leak__strdup_char_17.c":34:13)
#loc29 = loc("CWE401_Memory_Leak__strdup_char_17.c":34:35)
#loc30 = loc("CWE401_Memory_Leak__strdup_char_17.c":36:23)
#loc31 = loc("CWE401_Memory_Leak__strdup_char_17.c":36:13)
#loc32 = loc("CWE401_Memory_Leak__strdup_char_17.c":29:24)
#loc33 = loc("CWE401_Memory_Leak__strdup_char_17.c":29:23)
#loc34 = loc("CWE401_Memory_Leak__strdup_char_17.c":39:5)
#loc35 = loc("CWE401_Memory_Leak__strdup_char_17.c":44:5)
#loc36 = loc("CWE401_Memory_Leak__strdup_char_17.c":39:13)
#loc37 = loc("CWE401_Memory_Leak__strdup_char_17.c":39:9)
#loc38 = loc("CWE401_Memory_Leak__strdup_char_17.c":39:16)
#loc39 = loc("CWE401_Memory_Leak__strdup_char_17.c":39:20)
#loc40 = loc("CWE401_Memory_Leak__strdup_char_17.c":39:18)
#loc41 = loc("CWE401_Memory_Leak__strdup_char_17.c":40:5)
#loc42 = loc("CWE401_Memory_Leak__strdup_char_17.c":39:24)
#loc43 = loc("CWE401_Memory_Leak__strdup_char_17.c":39:23)
#loc44 = loc("CWE401_Memory_Leak__strdup_char_17.c":96:1)
#loc45 = loc("CWE401_Memory_Leak__strdup_char_17.c":100:1)
#loc46 = loc("CWE401_Memory_Leak__strdup_char_17.c":98:5)
#loc47 = loc("CWE401_Memory_Leak__strdup_char_17.c":98:13)
#loc48 = loc("CWE401_Memory_Leak__strdup_char_17.c":99:5)
#loc49 = loc("CWE401_Memory_Leak__strdup_char_17.c":99:13)
#loc50 = loc("/usr/include/stdlib.h":687:1)
#loc51 = loc("/usr/include/stdlib.h":687:32)
#loc52 = loc("CWE401_Memory_Leak__strdup_char_17.c":52:1)
#loc53 = loc("CWE401_Memory_Leak__strdup_char_17.c":72:1)
#loc54 = loc("CWE401_Memory_Leak__strdup_char_17.c":54:5)
#loc55 = loc("CWE401_Memory_Leak__strdup_char_17.c":54:9)
#loc56 = loc("CWE401_Memory_Leak__strdup_char_17.c":54:11)
#loc57 = loc("CWE401_Memory_Leak__strdup_char_17.c":55:5)
#loc58 = loc("CWE401_Memory_Leak__strdup_char_17.c":55:12)
#loc59 = loc("CWE401_Memory_Leak__strdup_char_17.c":56:12)
#loc60 = loc("CWE401_Memory_Leak__strdup_char_17.c":56:5)
#loc61 = loc("CWE401_Memory_Leak__strdup_char_17.c":57:5)
#loc62 = loc("CWE401_Memory_Leak__strdup_char_17.c":66:5)
#loc63 = loc("CWE401_Memory_Leak__strdup_char_17.c":57:13)
#loc64 = loc("CWE401_Memory_Leak__strdup_char_17.c":57:9)
#loc65 = loc("CWE401_Memory_Leak__strdup_char_17.c":57:16)
#loc66 = loc("CWE401_Memory_Leak__strdup_char_17.c":57:20)
#loc67 = loc("CWE401_Memory_Leak__strdup_char_17.c":57:18)
#loc68 = loc("CWE401_Memory_Leak__strdup_char_17.c":58:5)
#loc69 = loc("CWE401_Memory_Leak__strdup_char_17.c":59:9)
#loc70 = loc("CWE401_Memory_Leak__strdup_char_17.c":65:9)
#loc71 = loc("CWE401_Memory_Leak__strdup_char_17.c":60:13)
#loc72 = loc("CWE401_Memory_Leak__strdup_char_17.c":60:31)
#loc73 = loc("CWE401_Memory_Leak__strdup_char_17.c":62:20)
#loc74 = loc("CWE401_Memory_Leak__strdup_char_17.c":62:27)
#loc75 = loc("CWE401_Memory_Leak__strdup_char_17.c":62:13)
#loc76 = loc("CWE401_Memory_Leak__strdup_char_17.c":62:35)
#loc77 = loc("CWE401_Memory_Leak__strdup_char_17.c":64:23)
#loc78 = loc("CWE401_Memory_Leak__strdup_char_17.c":64:13)
#loc79 = loc("CWE401_Memory_Leak__strdup_char_17.c":57:24)
#loc80 = loc("CWE401_Memory_Leak__strdup_char_17.c":57:23)
#loc81 = loc("CWE401_Memory_Leak__strdup_char_17.c":67:5)
#loc82 = loc("CWE401_Memory_Leak__strdup_char_17.c":71:5)
#loc83 = loc("CWE401_Memory_Leak__strdup_char_17.c":67:13)
#loc84 = loc("CWE401_Memory_Leak__strdup_char_17.c":67:9)
#loc85 = loc("CWE401_Memory_Leak__strdup_char_17.c":67:16)
#loc86 = loc("CWE401_Memory_Leak__strdup_char_17.c":67:20)
#loc87 = loc("CWE401_Memory_Leak__strdup_char_17.c":67:18)
#loc88 = loc("CWE401_Memory_Leak__strdup_char_17.c":68:5)
#loc89 = loc("CWE401_Memory_Leak__strdup_char_17.c":70:9)
#loc90 = loc("CWE401_Memory_Leak__strdup_char_17.c":70:14)
#loc91 = loc("CWE401_Memory_Leak__strdup_char_17.c":67:24)
#loc92 = loc("CWE401_Memory_Leak__strdup_char_17.c":67:23)
#loc93 = loc("/usr/include/string.h":141:1)
#loc94 = loc("/usr/include/string.h":142:14)
#loc95 = loc("CWE401_Memory_Leak__strdup_char_17.c":85:22)
#loc96 = loc("CWE401_Memory_Leak__strdup_char_17.c":75:1)
#loc97 = loc("CWE401_Memory_Leak__strdup_char_17.c":94:1)
#loc98 = loc("CWE401_Memory_Leak__strdup_char_17.c":77:5)
#loc99 = loc("CWE401_Memory_Leak__strdup_char_17.c":77:9)
#loc100 = loc("CWE401_Memory_Leak__strdup_char_17.c":77:11)
#loc101 = loc("CWE401_Memory_Leak__strdup_char_17.c":78:5)
#loc102 = loc("CWE401_Memory_Leak__strdup_char_17.c":78:12)
#loc103 = loc("CWE401_Memory_Leak__strdup_char_17.c":79:12)
#loc104 = loc("CWE401_Memory_Leak__strdup_char_17.c":79:5)
#loc105 = loc("CWE401_Memory_Leak__strdup_char_17.c":80:5)
#loc106 = loc("CWE401_Memory_Leak__strdup_char_17.c":87:5)
#loc107 = loc("CWE401_Memory_Leak__strdup_char_17.c":80:13)
#loc108 = loc("CWE401_Memory_Leak__strdup_char_17.c":80:9)
#loc109 = loc("CWE401_Memory_Leak__strdup_char_17.c":80:16)
#loc110 = loc("CWE401_Memory_Leak__strdup_char_17.c":80:20)
#loc111 = loc("CWE401_Memory_Leak__strdup_char_17.c":80:18)
#loc112 = loc("CWE401_Memory_Leak__strdup_char_17.c":81:5)
#loc113 = loc("CWE401_Memory_Leak__strdup_char_17.c":83:24)
#loc114 = loc("CWE401_Memory_Leak__strdup_char_17.c":83:9)
#loc115 = loc("CWE401_Memory_Leak__strdup_char_17.c":85:9)
#loc116 = loc("CWE401_Memory_Leak__strdup_char_17.c":85:16)
#loc117 = loc("CWE401_Memory_Leak__strdup_char_17.c":86:19)
#loc118 = loc("CWE401_Memory_Leak__strdup_char_17.c":86:9)
#loc119 = loc("CWE401_Memory_Leak__strdup_char_17.c":80:24)
#loc120 = loc("CWE401_Memory_Leak__strdup_char_17.c":80:23)
#loc121 = loc("CWE401_Memory_Leak__strdup_char_17.c":88:5)
#loc122 = loc("CWE401_Memory_Leak__strdup_char_17.c":93:5)
#loc123 = loc("CWE401_Memory_Leak__strdup_char_17.c":88:13)
#loc124 = loc("CWE401_Memory_Leak__strdup_char_17.c":88:9)
#loc125 = loc("CWE401_Memory_Leak__strdup_char_17.c":88:16)
#loc126 = loc("CWE401_Memory_Leak__strdup_char_17.c":88:20)
#loc127 = loc("CWE401_Memory_Leak__strdup_char_17.c":88:18)
#loc128 = loc("CWE401_Memory_Leak__strdup_char_17.c":89:5)
#loc129 = loc("CWE401_Memory_Leak__strdup_char_17.c":88:24)
#loc130 = loc("CWE401_Memory_Leak__strdup_char_17.c":88:23)
#loc131 = loc(fused[#loc1, #loc2])
#loc132 = loc(fused[#loc3, #loc4])
#loc133 = loc(fused[#loc5, #loc6])
#loc134 = loc(fused[#loc7, #loc8])
#loc135 = loc(fused[#loc7, #loc9])
#loc136 = loc(fused[#loc10, #loc11])
#loc137 = loc(fused[#loc13, #loc12])
#loc138 = loc(fused[#loc14, #loc15])
#loc139 = loc(fused[#loc17, #loc16])
#loc140 = loc(fused[#loc18, #loc19])
#loc141 = loc(fused[#loc21, #loc15])
#loc142 = loc(fused[#loc22, #loc23])
#loc143 = loc(fused[#loc24, #loc25])
#loc144 = loc(fused[#loc28, #loc29])
#loc145 = loc(fused[#loc33, #loc32])
#loc146 = loc(fused[#loc34, #loc35])
#loc147 = loc(fused[#loc37, #loc36])
#loc148 = loc(fused[#loc38, #loc39])
#loc149 = loc(fused[#loc41, #loc35])
#loc150 = loc(fused[#loc43, #loc42])
#loc151 = loc(fused[#loc44, #loc45])
#loc152 = loc(fused[#loc46, #loc47])
#loc153 = loc(fused[#loc48, #loc49])
#loc154 = loc(fused[#loc50, #loc51])
#loc155 = loc(fused[#loc52, #loc53])
#loc156 = loc(fused[#loc54, #loc55])
#loc157 = loc(fused[#loc54, #loc56])
#loc158 = loc(fused[#loc57, #loc58])
#loc159 = loc(fused[#loc60, #loc59])
#loc160 = loc(fused[#loc61, #loc62])
#loc161 = loc(fused[#loc64, #loc63])
#loc162 = loc(fused[#loc65, #loc66])
#loc163 = loc(fused[#loc68, #loc62])
#loc164 = loc(fused[#loc69, #loc70])
#loc165 = loc(fused[#loc71, #loc72])
#loc166 = loc(fused[#loc75, #loc76])
#loc167 = loc(fused[#loc80, #loc79])
#loc168 = loc(fused[#loc81, #loc82])
#loc169 = loc(fused[#loc84, #loc83])
#loc170 = loc(fused[#loc85, #loc86])
#loc171 = loc(fused[#loc88, #loc82])
#loc172 = loc(fused[#loc92, #loc91])
#loc173 = loc(fused[#loc93, #loc94])
#loc174 = loc(fused[#loc96, #loc97])
#loc175 = loc(fused[#loc98, #loc99])
#loc176 = loc(fused[#loc98, #loc100])
#loc177 = loc(fused[#loc101, #loc102])
#loc178 = loc(fused[#loc104, #loc103])
#loc179 = loc(fused[#loc105, #loc106])
#loc180 = loc(fused[#loc108, #loc107])
#loc181 = loc(fused[#loc109, #loc110])
#loc182 = loc(fused[#loc112, #loc106])
#loc183 = loc(fused[#loc114, #loc113])
#loc184 = loc(fused[#loc120, #loc119])
#loc185 = loc(fused[#loc121, #loc122])
#loc186 = loc(fused[#loc124, #loc123])
#loc187 = loc(fused[#loc125, #loc126])
#loc188 = loc(fused[#loc128, #loc122])
#loc189 = loc(fused[#loc130, #loc129])
