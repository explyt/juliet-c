!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_06.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i32 = dense<32> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc176)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc177)
  cir.func private @strncat(!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc178)
  cir.func private @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc179)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc180)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc181)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_06_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc183)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc184)
    %2 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc19)
    %3 = cir.const #cir.int<100> : !s32i loc(#loc20)
    %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc20)
    %5 = cir.const #cir.int<1> : !u64i loc(#loc185)
    %6 = cir.binop(mul, %4, %5) : !u64i loc(#loc186)
    %7 = cir.call @malloc(%6) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc19)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc187)
    cir.store %8, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc188)
    cir.br ^bb1 loc(#loc189)
  ^bb1:  // pred: ^bb0
    %9 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc27)
    %10 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc28)
    %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc28)
    %12 = cir.cmp(eq, %9, %11) : !cir.ptr<!s8i>, !cir.bool loc(#loc190)
    cir.brcond %12 ^bb2, ^bb3 loc(#loc191)
  ^bb2:  // pred: ^bb1
    %13 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc30)
    %14 = cir.const #cir.int<1> : !s32i loc(#loc31)
    %15 = cir.unary(minus, %14) : !s32i, !s32i loc(#loc32)
    cir.call @exit(%15) : (!s32i) -> () extra(#fn_attr) loc(#loc30)
    cir.br ^bb3 loc(#loc26)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc26)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc192)
  ^bb5:  // pred: ^bb4
    %16 = cir.const #cir.int<5> : !s32i loc(#loc35)
    %17 = cir.const #cir.int<5> : !s32i loc(#loc36)
    %18 = cir.cmp(eq, %16, %17) : !s32i, !cir.bool loc(#loc193)
    cir.brcond %18 ^bb6, ^bb7 loc(#loc194)
  ^bb6:  // pred: ^bb5
    %19 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc38)
    %20 = cir.cast(bitcast, %19 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc38)
    %21 = cir.const #cir.int<65> : !s32i loc(#loc39)
    %22 = cir.const #cir.int<100> : !s32i loc(#loc40)
    %23 = cir.const #cir.int<1> : !s32i loc(#loc41)
    %24 = cir.binop(sub, %22, %23) nsw : !s32i loc(#loc40)
    %25 = cir.cast(integral, %24 : !s32i), !u64i loc(#loc40)
    cir.libc.memset %25 bytes from %20 set to %21 : !cir.ptr<!void>, !s32i, !u64i loc(#loc195)
    %26 = cir.const #cir.int<0> : !s32i loc(#loc44)
    %27 = cir.cast(integral, %26 : !s32i), !s8i loc(#loc44)
    %28 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc45)
    %29 = cir.const #cir.int<100> : !s32i loc(#loc46)
    %30 = cir.const #cir.int<1> : !s32i loc(#loc47)
    %31 = cir.binop(sub, %29, %30) nsw : !s32i loc(#loc46)
    %32 = cir.ptr_stride(%28 : !cir.ptr<!s8i>, %31 : !s32i), !cir.ptr<!s8i> loc(#loc48)
    cir.store %27, %32 : !s8i, !cir.ptr<!s8i> loc(#loc196)
    cir.br ^bb7 loc(#loc34)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc34)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc197)
  ^bb9:  // pred: ^bb8
    %33 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc183)
    cir.store %33, %0 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc183)
    %34 = cir.get_global @strncat : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i)>> loc(#loc51)
    %35 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc52)
    %36 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc53)
    %37 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc54)
    %38 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc55)
    %39 = cir.call @strlen(%38) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc54)
    %40 = cir.call @strncat(%35, %36, %39) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc51)
    %41 = cir.const #cir.int<0> : !s32i loc(#loc56)
    %42 = cir.cast(integral, %41 : !s32i), !s8i loc(#loc56)
    %43 = cir.const #cir.int<50> : !s32i loc(#loc57)
    %44 = cir.const #cir.int<1> : !s32i loc(#loc58)
    %45 = cir.binop(sub, %43, %44) nsw : !s32i loc(#loc57)
    %46 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc59)
    %47 = cir.ptr_stride(%46 : !cir.ptr<!s8i>, %45 : !s32i), !cir.ptr<!s8i> loc(#loc59)
    cir.store %42, %47 : !s8i, !cir.ptr<!s8i> loc(#loc198)
    %48 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc60)
    cir.call @printLine(%48) : (!cir.ptr<!s8i>) -> () loc(#loc61)
    %49 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc62)
    %50 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc63)
    %51 = cir.cast(bitcast, %50 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc63)
    cir.call @free(%51) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc62)
    cir.br ^bb10 loc(#loc50)
  ^bb10:  // pred: ^bb9
    cir.return loc(#loc14)
  } loc(#loc182)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_06_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc200)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc66)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc201)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc68)
    cir.return loc(#loc65)
  } loc(#loc199)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc70)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc203)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc204)
    %2 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc77)
    %3 = cir.const #cir.int<100> : !s32i loc(#loc78)
    %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc78)
    %5 = cir.const #cir.int<1> : !u64i loc(#loc205)
    %6 = cir.binop(mul, %4, %5) : !u64i loc(#loc206)
    %7 = cir.call @malloc(%6) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc77)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc207)
    cir.store %8, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc208)
    cir.br ^bb1 loc(#loc209)
  ^bb1:  // pred: ^bb0
    %9 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc85)
    %10 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc86)
    %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc86)
    %12 = cir.cmp(eq, %9, %11) : !cir.ptr<!s8i>, !cir.bool loc(#loc210)
    cir.brcond %12 ^bb2, ^bb3 loc(#loc211)
  ^bb2:  // pred: ^bb1
    %13 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc88)
    %14 = cir.const #cir.int<1> : !s32i loc(#loc89)
    %15 = cir.unary(minus, %14) : !s32i, !s32i loc(#loc90)
    cir.call @exit(%15) : (!s32i) -> () extra(#fn_attr) loc(#loc88)
    cir.br ^bb3 loc(#loc84)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc84)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc212)
  ^bb5:  // pred: ^bb4
    %16 = cir.const #cir.int<5> : !s32i loc(#loc93)
    %17 = cir.const #cir.int<5> : !s32i loc(#loc94)
    %18 = cir.cmp(ne, %16, %17) : !s32i, !cir.bool loc(#loc213)
    cir.brcond %18 ^bb6, ^bb7 loc(#loc214)
  ^bb6:  // pred: ^bb5
    %19 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc70)
    %20 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc70)
    cir.call @printLine(%20) : (!cir.ptr<!s8i>) -> () loc(#loc98)
    cir.br ^bb8 loc(#loc96)
  ^bb7:  // pred: ^bb5
    %21 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc99)
    %22 = cir.cast(bitcast, %21 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc99)
    %23 = cir.const #cir.int<65> : !s32i loc(#loc100)
    %24 = cir.const #cir.int<50> : !s32i loc(#loc101)
    %25 = cir.const #cir.int<1> : !s32i loc(#loc102)
    %26 = cir.binop(sub, %24, %25) nsw : !s32i loc(#loc101)
    %27 = cir.cast(integral, %26 : !s32i), !u64i loc(#loc101)
    cir.libc.memset %27 bytes from %22 set to %23 : !cir.ptr<!void>, !s32i, !u64i loc(#loc215)
    %28 = cir.const #cir.int<0> : !s32i loc(#loc105)
    %29 = cir.cast(integral, %28 : !s32i), !s8i loc(#loc105)
    %30 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc106)
    %31 = cir.const #cir.int<50> : !s32i loc(#loc107)
    %32 = cir.const #cir.int<1> : !s32i loc(#loc108)
    %33 = cir.binop(sub, %31, %32) nsw : !s32i loc(#loc107)
    %34 = cir.ptr_stride(%30 : !cir.ptr<!s8i>, %33 : !s32i), !cir.ptr<!s8i> loc(#loc109)
    cir.store %29, %34 : !s8i, !cir.ptr<!s8i> loc(#loc216)
    cir.br ^bb8 loc(#loc92)
  ^bb8:  // 2 preds: ^bb6, ^bb7
    cir.br ^bb9 loc(#loc92)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc217)
  ^bb10:  // pred: ^bb9
    %35 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc203)
    cir.store %35, %0 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc203)
    %36 = cir.get_global @strncat : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i)>> loc(#loc112)
    %37 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc113)
    %38 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc114)
    %39 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc115)
    %40 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc116)
    %41 = cir.call @strlen(%40) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc115)
    %42 = cir.call @strncat(%37, %38, %41) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc112)
    %43 = cir.const #cir.int<0> : !s32i loc(#loc117)
    %44 = cir.cast(integral, %43 : !s32i), !s8i loc(#loc117)
    %45 = cir.const #cir.int<50> : !s32i loc(#loc118)
    %46 = cir.const #cir.int<1> : !s32i loc(#loc119)
    %47 = cir.binop(sub, %45, %46) nsw : !s32i loc(#loc118)
    %48 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc120)
    %49 = cir.ptr_stride(%48 : !cir.ptr<!s8i>, %47 : !s32i), !cir.ptr<!s8i> loc(#loc120)
    cir.store %44, %49 : !s8i, !cir.ptr<!s8i> loc(#loc218)
    %50 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc121)
    cir.call @printLine(%50) : (!cir.ptr<!s8i>) -> () loc(#loc122)
    %51 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc123)
    %52 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc124)
    %53 = cir.cast(bitcast, %52 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc124)
    cir.call @free(%53) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc123)
    cir.br ^bb11 loc(#loc111)
  ^bb11:  // pred: ^bb10
    cir.return loc(#loc72)
  } loc(#loc202)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc220)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc221)
    %2 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc131)
    %3 = cir.const #cir.int<100> : !s32i loc(#loc132)
    %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc132)
    %5 = cir.const #cir.int<1> : !u64i loc(#loc222)
    %6 = cir.binop(mul, %4, %5) : !u64i loc(#loc223)
    %7 = cir.call @malloc(%6) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc131)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc224)
    cir.store %8, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc225)
    cir.br ^bb1 loc(#loc226)
  ^bb1:  // pred: ^bb0
    %9 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc139)
    %10 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc140)
    %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc140)
    %12 = cir.cmp(eq, %9, %11) : !cir.ptr<!s8i>, !cir.bool loc(#loc227)
    cir.brcond %12 ^bb2, ^bb3 loc(#loc228)
  ^bb2:  // pred: ^bb1
    %13 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc142)
    %14 = cir.const #cir.int<1> : !s32i loc(#loc143)
    %15 = cir.unary(minus, %14) : !s32i, !s32i loc(#loc144)
    cir.call @exit(%15) : (!s32i) -> () extra(#fn_attr) loc(#loc142)
    cir.br ^bb3 loc(#loc138)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc138)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc229)
  ^bb5:  // pred: ^bb4
    %16 = cir.const #cir.int<5> : !s32i loc(#loc147)
    %17 = cir.const #cir.int<5> : !s32i loc(#loc148)
    %18 = cir.cmp(eq, %16, %17) : !s32i, !cir.bool loc(#loc230)
    cir.brcond %18 ^bb6, ^bb7 loc(#loc231)
  ^bb6:  // pred: ^bb5
    %19 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc150)
    %20 = cir.cast(bitcast, %19 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc150)
    %21 = cir.const #cir.int<65> : !s32i loc(#loc151)
    %22 = cir.const #cir.int<50> : !s32i loc(#loc152)
    %23 = cir.const #cir.int<1> : !s32i loc(#loc153)
    %24 = cir.binop(sub, %22, %23) nsw : !s32i loc(#loc152)
    %25 = cir.cast(integral, %24 : !s32i), !u64i loc(#loc152)
    cir.libc.memset %25 bytes from %20 set to %21 : !cir.ptr<!void>, !s32i, !u64i loc(#loc232)
    %26 = cir.const #cir.int<0> : !s32i loc(#loc156)
    %27 = cir.cast(integral, %26 : !s32i), !s8i loc(#loc156)
    %28 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc157)
    %29 = cir.const #cir.int<50> : !s32i loc(#loc158)
    %30 = cir.const #cir.int<1> : !s32i loc(#loc159)
    %31 = cir.binop(sub, %29, %30) nsw : !s32i loc(#loc158)
    %32 = cir.ptr_stride(%28 : !cir.ptr<!s8i>, %31 : !s32i), !cir.ptr<!s8i> loc(#loc160)
    cir.store %27, %32 : !s8i, !cir.ptr<!s8i> loc(#loc233)
    cir.br ^bb7 loc(#loc146)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc146)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc234)
  ^bb9:  // pred: ^bb8
    %33 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc220)
    cir.store %33, %0 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc220)
    %34 = cir.get_global @strncat : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i)>> loc(#loc163)
    %35 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc164)
    %36 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc165)
    %37 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc166)
    %38 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc167)
    %39 = cir.call @strlen(%38) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc166)
    %40 = cir.call @strncat(%35, %36, %39) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc163)
    %41 = cir.const #cir.int<0> : !s32i loc(#loc168)
    %42 = cir.cast(integral, %41 : !s32i), !s8i loc(#loc168)
    %43 = cir.const #cir.int<50> : !s32i loc(#loc169)
    %44 = cir.const #cir.int<1> : !s32i loc(#loc170)
    %45 = cir.binop(sub, %43, %44) nsw : !s32i loc(#loc169)
    %46 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc171)
    %47 = cir.ptr_stride(%46 : !cir.ptr<!s8i>, %45 : !s32i), !cir.ptr<!s8i> loc(#loc171)
    cir.store %42, %47 : !s8i, !cir.ptr<!s8i> loc(#loc235)
    %48 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc172)
    cir.call @printLine(%48) : (!cir.ptr<!s8i>) -> () loc(#loc173)
    %49 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc174)
    %50 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc175)
    %51 = cir.cast(bitcast, %50 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc175)
    cir.call @free(%51) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc174)
    cir.br ^bb10 loc(#loc162)
  ^bb10:  // pred: ^bb9
    cir.return loc(#loc126)
  } loc(#loc219)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_06.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("/usr/include/string.h":152:1)
#loc6 = loc("/usr/include/string.h":153:29)
#loc7 = loc("/usr/include/string.h":407:1)
#loc8 = loc("/usr/include/string.h":408:33)
#loc9 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc10 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc11 = loc("/usr/include/stdlib.h":687:1)
#loc12 = loc("/usr/include/stdlib.h":687:32)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_06.c":27:1)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_06.c":46:1)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_06.c":39:9)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_06.c":39:25)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_06.c":29:5)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_06.c":29:12)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_06.c":30:20)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_06.c":30:27)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_06.c":30:31)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_06.c":30:42)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_06.c":30:43)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_06.c":30:5)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_06.c":31:5)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_06.c":31:33)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_06.c":31:9)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_06.c":31:17)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_06.c":31:23)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_06.c":31:24)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_06.c":31:30)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_06.c":31:29)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_06.c":32:5)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_06.c":37:5)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_06.c":32:8)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_06.c":32:27)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_06.c":33:5)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_06.c":35:16)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_06.c":35:22)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_06.c":35:27)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_06.c":35:31)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_06.c":35:9)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_06.c":35:32)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_06.c":36:23)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_06.c":36:9)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_06.c":36:14)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_06.c":36:18)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_06.c":36:19)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_06.c":38:5)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_06.c":45:5)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_06.c":41:9)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_06.c":41:17)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_06.c":41:23)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_06.c":41:29)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_06.c":41:36)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_06.c":42:22)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_06.c":42:14)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_06.c":42:17)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_06.c":42:9)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_06.c":43:19)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_06.c":43:9)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_06.c":44:9)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_06.c":44:14)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_06.c":101:1)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_06.c":105:1)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_06.c":103:5)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_06.c":103:14)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_06.c":104:5)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_06.c":104:14)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_06.c":61:19)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_06.c":53:1)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_06.c":77:1)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_06.c":70:9)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_06.c":70:25)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_06.c":55:5)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_06.c":55:12)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_06.c":56:20)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_06.c":56:27)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_06.c":56:31)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_06.c":56:42)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_06.c":56:43)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_06.c":56:5)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_06.c":57:5)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_06.c":57:33)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_06.c":57:9)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_06.c":57:17)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_06.c":57:23)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_06.c":57:24)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_06.c":57:30)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_06.c":57:29)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_06.c":58:5)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_06.c":68:5)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_06.c":58:8)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_06.c":58:27)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_06.c":59:5)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_06.c":62:5)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_06.c":64:5)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_06.c":61:9)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_06.c":66:16)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_06.c":66:22)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_06.c":66:27)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_06.c":66:30)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_06.c":66:9)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_06.c":66:31)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_06.c":67:22)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_06.c":67:9)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_06.c":67:14)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_06.c":67:17)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_06.c":67:18)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_06.c":69:5)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_06.c":76:5)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_06.c":72:9)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_06.c":72:17)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_06.c":72:23)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_06.c":72:29)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_06.c":72:36)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_06.c":73:22)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_06.c":73:14)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_06.c":73:17)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_06.c":73:9)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_06.c":74:19)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_06.c":74:9)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_06.c":75:9)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_06.c":75:14)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_06.c":80:1)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_06.c":99:1)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_06.c":92:9)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_06.c":92:25)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_06.c":82:5)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_06.c":82:12)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_06.c":83:20)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_06.c":83:27)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_06.c":83:31)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_06.c":83:42)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_06.c":83:43)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_06.c":83:5)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_06.c":84:5)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_06.c":84:33)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_06.c":84:9)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_06.c":84:17)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_06.c":84:23)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_06.c":84:24)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_06.c":84:30)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_06.c":84:29)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_06.c":85:5)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_06.c":90:5)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_06.c":85:8)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_06.c":85:27)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_06.c":86:5)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_06.c":88:16)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_06.c":88:22)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_06.c":88:27)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_06.c":88:30)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_06.c":88:9)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_06.c":88:31)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_06.c":89:22)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_06.c":89:9)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_06.c":89:14)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_06.c":89:17)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_06.c":89:18)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_06.c":91:5)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_06.c":98:5)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_06.c":94:9)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_06.c":94:17)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_06.c":94:23)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_06.c":94:29)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_06.c":94:36)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_06.c":95:22)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_06.c":95:14)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_06.c":95:17)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_06.c":95:9)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_06.c":96:19)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_06.c":96:9)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_06.c":97:9)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_06.c":97:14)
#loc176 = loc(fused[#loc1, #loc2])
#loc177 = loc(fused[#loc3, #loc4])
#loc178 = loc(fused[#loc5, #loc6])
#loc179 = loc(fused[#loc7, #loc8])
#loc180 = loc(fused[#loc9, #loc10])
#loc181 = loc(fused[#loc11, #loc12])
#loc182 = loc(fused[#loc13, #loc14])
#loc183 = loc(fused[#loc15, #loc16])
#loc184 = loc(fused[#loc17, #loc18])
#loc185 = loc(fused[#loc21, #loc22])
#loc186 = loc(fused[#loc20, #loc22])
#loc187 = loc(fused[#loc19, #loc23])
#loc188 = loc(fused[#loc24, #loc23])
#loc189 = loc(fused[#loc25, #loc26])
#loc190 = loc(fused[#loc27, #loc28])
#loc191 = loc(fused[#loc29, #loc26])
#loc192 = loc(fused[#loc33, #loc34])
#loc193 = loc(fused[#loc35, #loc36])
#loc194 = loc(fused[#loc37, #loc34])
#loc195 = loc(fused[#loc42, #loc43])
#loc196 = loc(fused[#loc45, #loc44])
#loc197 = loc(fused[#loc49, #loc50])
#loc198 = loc(fused[#loc59, #loc56])
#loc199 = loc(fused[#loc64, #loc65])
#loc200 = loc(fused[#loc66, #loc67])
#loc201 = loc(fused[#loc68, #loc69])
#loc202 = loc(fused[#loc71, #loc72])
#loc203 = loc(fused[#loc73, #loc74])
#loc204 = loc(fused[#loc75, #loc76])
#loc205 = loc(fused[#loc79, #loc80])
#loc206 = loc(fused[#loc78, #loc80])
#loc207 = loc(fused[#loc77, #loc81])
#loc208 = loc(fused[#loc82, #loc81])
#loc209 = loc(fused[#loc83, #loc84])
#loc210 = loc(fused[#loc85, #loc86])
#loc211 = loc(fused[#loc87, #loc84])
#loc212 = loc(fused[#loc91, #loc92])
#loc213 = loc(fused[#loc93, #loc94])
#loc214 = loc(fused[#loc95, #loc96, #loc97, #loc92])
#loc215 = loc(fused[#loc103, #loc104])
#loc216 = loc(fused[#loc106, #loc105])
#loc217 = loc(fused[#loc110, #loc111])
#loc218 = loc(fused[#loc120, #loc117])
#loc219 = loc(fused[#loc125, #loc126])
#loc220 = loc(fused[#loc127, #loc128])
#loc221 = loc(fused[#loc129, #loc130])
#loc222 = loc(fused[#loc133, #loc134])
#loc223 = loc(fused[#loc132, #loc134])
#loc224 = loc(fused[#loc131, #loc135])
#loc225 = loc(fused[#loc136, #loc135])
#loc226 = loc(fused[#loc137, #loc138])
#loc227 = loc(fused[#loc139, #loc140])
#loc228 = loc(fused[#loc141, #loc138])
#loc229 = loc(fused[#loc145, #loc146])
#loc230 = loc(fused[#loc147, #loc148])
#loc231 = loc(fused[#loc149, #loc146])
#loc232 = loc(fused[#loc154, #loc155])
#loc233 = loc(fused[#loc157, #loc156])
#loc234 = loc(fused[#loc161, #loc162])
#loc235 = loc(fused[#loc171, #loc168])
