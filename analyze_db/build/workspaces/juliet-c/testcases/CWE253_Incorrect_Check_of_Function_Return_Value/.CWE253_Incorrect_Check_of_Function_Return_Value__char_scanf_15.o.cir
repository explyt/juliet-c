!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE253_Incorrect_Check_of_Function_Return_Value/CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_15.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr = dense<64> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little", "dlti.mangling_mode" = "e">} {
  cir.func private @__isoc99_scanf(!cir.ptr<!s8i>, ...) -> !s32i loc(#loc89)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"%99s" : !cir.array<!s8i x 4>, trailing_zeros> : !cir.array<!s8i x 6> {alignment = 1 : i64} loc(#loc3)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc90)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"scanf failed!\00" : !cir.array<!s8i x 14>> : !cir.array<!s8i x 14> {alignment = 1 : i64} loc(#loc6)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc7)
  cir.func no_proto @CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_15_bad() extra(#fn_attr) {
    cir.scope {
      %0 = cir.const #cir.int<6> : !s32i loc(#loc12)
      cir.switch (%0 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          cir.scope {
            %1 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["dataBuffer"] {alignment = 16 : i64} loc(#loc94)
            %2 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc95)
            %3 = cir.const #cir.zero : !cir.array<!s8i x 100> loc(#loc94)
            cir.store %3, %1 : !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>> loc(#loc94)
            %4 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc19)
            cir.store %4, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc95)
            cir.scope {
              %5 = cir.get_global @__isoc99_scanf : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc22)
              %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 6>> loc(#loc3)
              %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 6>>), !cir.ptr<!s8i> loc(#loc3)
              %8 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc23)
              %9 = cir.call @__isoc99_scanf(%7, %8) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i loc(#loc22)
              %10 = cir.const #cir.int<0> : !s32i loc(#loc24)
              %11 = cir.cmp(eq, %9, %10) : !s32i, !cir.bool loc(#loc97)
              cir.if %11 {
                %12 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 14>> loc(#loc6)
                %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc6)
                cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc26)
              } loc(#loc98)
            } loc(#loc96)
          } loc(#loc93)
          cir.break loc(#loc27)
        } loc(#loc13)
        cir.case(default, []) {
          %1 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc7)
          %2 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc7)
          cir.call @printLine(%2) : (!cir.ptr<!s8i>) -> () loc(#loc29)
          cir.break loc(#loc30)
        } loc(#loc28)
        cir.yield loc(#loc10)
      } loc(#loc10)
    } loc(#loc92)
    cir.return loc(#loc9)
  } loc(#loc91)
  cir.func no_proto @CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_15_good() extra(#fn_attr) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<()>> loc(#loc100)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc33)
    %1 = cir.get_global @good2 : !cir.ptr<!cir.func<()>> loc(#loc101)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc35)
    cir.return loc(#loc32)
  } loc(#loc99)
  cir.func no_proto internal private @good1() extra(#fn_attr) {
    cir.scope {
      %0 = cir.const #cir.int<5> : !s32i loc(#loc41)
      cir.switch (%0 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %1 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc43)
          %2 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc43)
          cir.call @printLine(%2) : (!cir.ptr<!s8i>) -> () loc(#loc44)
          cir.break loc(#loc45)
        } loc(#loc42)
        cir.case(default, []) {
          cir.scope {
            %1 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["dataBuffer"] {alignment = 16 : i64} loc(#loc105)
            %2 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc106)
            %3 = cir.const #cir.zero : !cir.array<!s8i x 100> loc(#loc105)
            cir.store %3, %1 : !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>> loc(#loc105)
            %4 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc52)
            cir.store %4, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc106)
            cir.scope {
              %5 = cir.get_global @__isoc99_scanf : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc55)
              %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 6>> loc(#loc56)
              %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 6>>), !cir.ptr<!s8i> loc(#loc56)
              %8 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc57)
              %9 = cir.call @__isoc99_scanf(%7, %8) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i loc(#loc55)
              %10 = cir.const #cir.int<1> : !s32i loc(#loc58)
              %11 = cir.unary(minus, %10) nsw : !s32i, !s32i loc(#loc58)
              %12 = cir.cmp(eq, %9, %11) : !s32i, !cir.bool loc(#loc108)
              cir.if %12 {
                %13 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 14>> loc(#loc60)
                %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc60)
                cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc61)
              } loc(#loc109)
            } loc(#loc107)
          } loc(#loc104)
          cir.break loc(#loc62)
        } loc(#loc46)
        cir.yield loc(#loc39)
      } loc(#loc39)
    } loc(#loc103)
    cir.return loc(#loc38)
  } loc(#loc102)
  cir.func no_proto internal private @good2() extra(#fn_attr) {
    cir.scope {
      %0 = cir.const #cir.int<6> : !s32i loc(#loc67)
      cir.switch (%0 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          cir.scope {
            %1 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["dataBuffer"] {alignment = 16 : i64} loc(#loc113)
            %2 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc114)
            %3 = cir.const #cir.zero : !cir.array<!s8i x 100> loc(#loc113)
            cir.store %3, %1 : !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>> loc(#loc113)
            %4 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc74)
            cir.store %4, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc114)
            cir.scope {
              %5 = cir.get_global @__isoc99_scanf : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc77)
              %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 6>> loc(#loc78)
              %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 6>>), !cir.ptr<!s8i> loc(#loc78)
              %8 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc79)
              %9 = cir.call @__isoc99_scanf(%7, %8) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i loc(#loc77)
              %10 = cir.const #cir.int<1> : !s32i loc(#loc80)
              %11 = cir.unary(minus, %10) nsw : !s32i, !s32i loc(#loc80)
              %12 = cir.cmp(eq, %9, %11) : !s32i, !cir.bool loc(#loc116)
              cir.if %12 {
                %13 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 14>> loc(#loc82)
                %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc82)
                cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc83)
              } loc(#loc117)
            } loc(#loc115)
          } loc(#loc112)
          cir.break loc(#loc84)
        } loc(#loc68)
        cir.case(default, []) {
          %1 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc86)
          %2 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc86)
          cir.call @printLine(%2) : (!cir.ptr<!s8i>) -> () loc(#loc87)
          cir.break loc(#loc88)
        } loc(#loc85)
        cir.yield loc(#loc65)
      } loc(#loc65)
    } loc(#loc111)
    cir.return loc(#loc64)
  } loc(#loc110)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE253_Incorrect_Check_of_Function_Return_Value/CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_15.c":0:0)
#loc1 = loc("/usr/include/stdio.h":466:1)
#loc2 = loc("/usr/include/stdio.h":466:12)
#loc3 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_15.c":36:19)
#loc4 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc5 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc6 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_15.c":38:23)
#loc7 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_15.c":44:19)
#loc8 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_15.c":24:1)
#loc9 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_15.c":47:1)
#loc10 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_15.c":26:5)
#loc11 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_15.c":46:5)
#loc12 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_15.c":26:12)
#loc13 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_15.c":28:5)
#loc14 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_15.c":29:5)
#loc15 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_15.c":40:5)
#loc16 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_15.c":32:9)
#loc17 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_15.c":32:32)
#loc18 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_15.c":33:9)
#loc19 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_15.c":33:23)
#loc20 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_15.c":36:9)
#loc21 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_15.c":39:9)
#loc22 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_15.c":36:13)
#loc23 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_15.c":36:29)
#loc24 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_15.c":36:38)
#loc25 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_15.c":37:9)
#loc26 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_15.c":38:13)
#loc27 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_15.c":41:5)
#loc28 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_15.c":42:5)
#loc29 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_15.c":44:9)
#loc30 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_15.c":45:9)
#loc31 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_15.c":103:1)
#loc32 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_15.c":107:1)
#loc33 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_15.c":105:5)
#loc34 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_15.c":105:11)
#loc35 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_15.c":106:5)
#loc36 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_15.c":106:11)
#loc37 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_15.c":54:1)
#loc38 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_15.c":76:1)
#loc39 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_15.c":56:5)
#loc40 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_15.c":75:5)
#loc41 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_15.c":56:12)
#loc42 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_15.c":58:5)
#loc43 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_15.c":60:19)
#loc44 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_15.c":60:9)
#loc45 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_15.c":61:9)
#loc46 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_15.c":62:5)
#loc47 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_15.c":63:5)
#loc48 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_15.c":73:5)
#loc49 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_15.c":66:9)
#loc50 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_15.c":66:32)
#loc51 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_15.c":67:9)
#loc52 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_15.c":67:23)
#loc53 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_15.c":69:9)
#loc54 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_15.c":72:9)
#loc55 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_15.c":69:13)
#loc56 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_15.c":69:19)
#loc57 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_15.c":69:29)
#loc58 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_15.c":69:38)
#loc59 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_15.c":70:9)
#loc60 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_15.c":71:23)
#loc61 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_15.c":71:13)
#loc62 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_15.c":74:5)
#loc63 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_15.c":79:1)
#loc64 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_15.c":101:1)
#loc65 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_15.c":81:5)
#loc66 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_15.c":100:5)
#loc67 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_15.c":81:12)
#loc68 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_15.c":83:5)
#loc69 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_15.c":84:5)
#loc70 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_15.c":94:5)
#loc71 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_15.c":87:9)
#loc72 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_15.c":87:32)
#loc73 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_15.c":88:9)
#loc74 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_15.c":88:23)
#loc75 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_15.c":90:9)
#loc76 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_15.c":93:9)
#loc77 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_15.c":90:13)
#loc78 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_15.c":90:19)
#loc79 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_15.c":90:29)
#loc80 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_15.c":90:38)
#loc81 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_15.c":91:9)
#loc82 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_15.c":92:23)
#loc83 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_15.c":92:13)
#loc84 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_15.c":95:5)
#loc85 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_15.c":96:5)
#loc86 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_15.c":98:19)
#loc87 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_15.c":98:9)
#loc88 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_15.c":99:9)
#loc89 = loc(fused[#loc1, #loc2])
#loc90 = loc(fused[#loc4, #loc5])
#loc91 = loc(fused[#loc8, #loc9])
#loc92 = loc(fused[#loc10, #loc11])
#loc93 = loc(fused[#loc14, #loc15])
#loc94 = loc(fused[#loc16, #loc17])
#loc95 = loc(fused[#loc18, #loc19])
#loc96 = loc(fused[#loc20, #loc21])
#loc97 = loc(fused[#loc22, #loc24])
#loc98 = loc(fused[#loc25, #loc21])
#loc99 = loc(fused[#loc31, #loc32])
#loc100 = loc(fused[#loc33, #loc34])
#loc101 = loc(fused[#loc35, #loc36])
#loc102 = loc(fused[#loc37, #loc38])
#loc103 = loc(fused[#loc39, #loc40])
#loc104 = loc(fused[#loc47, #loc48])
#loc105 = loc(fused[#loc49, #loc50])
#loc106 = loc(fused[#loc51, #loc52])
#loc107 = loc(fused[#loc53, #loc54])
#loc108 = loc(fused[#loc55, #loc58])
#loc109 = loc(fused[#loc59, #loc54])
#loc110 = loc(fused[#loc63, #loc64])
#loc111 = loc(fused[#loc65, #loc66])
#loc112 = loc(fused[#loc69, #loc70])
#loc113 = loc(fused[#loc71, #loc72])
#loc114 = loc(fused[#loc73, #loc74])
#loc115 = loc(fused[#loc75, #loc76])
#loc116 = loc(fused[#loc77, #loc80])
#loc117 = loc(fused[#loc81, #loc76])
