!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.record<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.record<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.record<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc76 = loc("CWE190_Integer_Overflow__int_fscanf_square_05.c":73:28)
#loc112 = loc("CWE190_Integer_Overflow__int_fscanf_square_05.c":99:28)
#true = #cir.bool<true> : !cir.bool
!ty__IO_FILE = !cir.record<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_fscanf_square_05.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i32 = dense<32> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little", "dlti.mangling_mode" = "e">} {
  cir.global "private" internal dsolocal @staticTrue = #cir.int<1> : !s32i {alignment = 4 : i64} loc(#loc176)
  cir.func private @__isoc99_fscanf(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i loc(#loc177)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc178)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"%d\00" : !cir.array<!s8i x 3>> : !cir.array<!s8i x 3> {alignment = 1 : i64} loc(#loc7)
  cir.func private @printIntLine(!s32i) loc(#loc179)
  cir.func no_proto @CWE190_Integer_Overflow__int_fscanf_square_05_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc181)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc182)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc16)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc183)
    cir.br ^bb1 loc(#loc184)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc176)
    %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc20)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc20)
    cir.brcond %5 ^bb2, ^bb3 loc(#loc185)
  ^bb2:  // pred: ^bb1
    %6 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc22)
    %7 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc178)
    %8 = cir.load %7 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc23)
    %9 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc7)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc7)
    %11 = cir.call @__isoc99_fscanf(%8, %10, %1) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s32i>) -> !s32i loc(#loc22)
    cir.br ^bb3 loc(#loc19)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc19)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc186)
  ^bb5:  // pred: ^bb4
    %12 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc176)
    %13 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc26)
    %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc26)
    cir.brcond %14 ^bb6, ^bb9 loc(#loc187)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc188)
  ^bb7:  // pred: ^bb6
    %15 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc30)
    %16 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc13)
    %17 = cir.binop(mul, %15, %16) nsw : !s32i loc(#loc30)
    cir.store %17, %0 : !s32i, !cir.ptr<!s32i> loc(#loc181)
    %18 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc31)
    cir.call @printIntLine(%18) : (!s32i) -> () loc(#loc32)
    cir.br ^bb8 loc(#loc29)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc25)
  ^bb9:  // 2 preds: ^bb5, ^bb8
    cir.br ^bb10 loc(#loc25)
  ^bb10:  // pred: ^bb9
    cir.return loc(#loc11)
  } loc(#loc180)
  cir.func no_proto @CWE190_Integer_Overflow__int_fscanf_square_05_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<()>> loc(#loc190)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc35)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<()>> loc(#loc191)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc37)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<()>> loc(#loc192)
    cir.call %2() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc39)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<()>> loc(#loc193)
    cir.call %3() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc41)
    cir.return loc(#loc34)
  } loc(#loc189)
  cir.global "private" internal dsolocal @staticFalse = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc194)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc195)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc47)
  cir.func private @sqrt(!cir.double) -> !cir.double extra(#fn_attr1) loc(#loc48)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc49)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc197)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc198)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc56)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc199)
    cir.br ^bb1 loc(#loc200)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc176)
    %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc60)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc60)
    cir.brcond %5 ^bb2, ^bb3 loc(#loc201)
  ^bb2:  // pred: ^bb1
    %6 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc62)
    %7 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc178)
    %8 = cir.load %7 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc63)
    %9 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc64)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc64)
    %11 = cir.call @__isoc99_fscanf(%8, %10, %1) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s32i>) -> !s32i loc(#loc62)
    cir.br ^bb3 loc(#loc59)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc59)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc202)
  ^bb5:  // pred: ^bb4
    %12 = cir.get_global @staticFalse : !cir.ptr<!s32i> loc(#loc194)
    %13 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc67)
    %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc67)
    cir.brcond %14 ^bb6, ^bb7 loc(#loc203)
  ^bb6:  // pred: ^bb5
    %15 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc47)
    %16 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc47)
    cir.call @printLine(%16) : (!cir.ptr<!s8i>) -> () loc(#loc71)
    cir.br ^bb21 loc(#loc69)
  ^bb7:  // pred: ^bb5
    cir.br ^bb8 loc(#loc204)
  ^bb8:  // pred: ^bb7
    %17 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc74)
    %18 = cir.const #cir.int<2147483647> : !s32i loc(#loc75)
    %19 = cir.unary(minus, %18) nsw : !s32i, !s32i loc(#loc75)
    %20 = cir.const #cir.int<1> : !s32i loc(#loc75)
    %21 = cir.binop(sub, %19, %20) nsw : !s32i loc(#loc75)
    %22 = cir.cmp(gt, %17, %21) : !s32i, !cir.bool loc(#loc205)
    cir.brcond %22 ^bb9, ^bb14 loc(#loc76)
  ^bb9:  // pred: ^bb8
    %23 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc77)
    %24 = cir.abs %23 poison : !s32i loc(#loc78)
    %25 = cir.cast(integral, %24 : !s32i), !s64i loc(#loc78)
    %26 = cir.get_global @sqrt : !cir.ptr<!cir.func<(!cir.double) -> !cir.double>> loc(#loc79)
    %27 = cir.const #cir.int<2147483647> : !s32i loc(#loc80)
    %28 = cir.cast(int_to_float, %27 : !s32i), !cir.double loc(#loc80)
    %29 = cir.call @sqrt(%28) : (!cir.double) -> !cir.double extra(#fn_attr1) loc(#loc79)
    %30 = cir.cast(float_to_int, %29 : !cir.double), !s64i loc(#loc79)
    %31 = cir.cmp(lt, %25, %30) : !s64i, !cir.bool loc(#loc206)
    cir.brcond %31 ^bb10, ^bb11 loc(#loc76)
  ^bb10:  // pred: ^bb9
    %32 = cir.const #true loc(#loc76)
    cir.br ^bb12(%32 : !cir.bool) loc(#loc76)
  ^bb11:  // pred: ^bb9
    %33 = cir.const #false loc(#loc76)
    cir.br ^bb12(%33 : !cir.bool) loc(#loc76)
  ^bb12(%34: !cir.bool loc("CWE190_Integer_Overflow__int_fscanf_square_05.c":73:28)):  // 2 preds: ^bb10, ^bb11
    cir.br ^bb13 loc(#loc76)
  ^bb13:  // pred: ^bb12
    cir.br ^bb15(%34 : !cir.bool) loc(#loc76)
  ^bb14:  // pred: ^bb8
    %35 = cir.const #false loc(#loc76)
    cir.br ^bb15(%35 : !cir.bool) loc(#loc76)
  ^bb15(%36: !cir.bool loc("CWE190_Integer_Overflow__int_fscanf_square_05.c":73:28)):  // 2 preds: ^bb13, ^bb14
    cir.br ^bb16 loc(#loc76)
  ^bb16:  // pred: ^bb15
    cir.brcond %36 ^bb17, ^bb18 loc(#loc207)
  ^bb17:  // pred: ^bb16
    %37 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc85)
    %38 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc53)
    %39 = cir.binop(mul, %37, %38) nsw : !s32i loc(#loc85)
    cir.store %39, %0 : !s32i, !cir.ptr<!s32i> loc(#loc197)
    %40 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc86)
    cir.call @printIntLine(%40) : (!s32i) -> () loc(#loc87)
    cir.br ^bb19 loc(#loc83)
  ^bb18:  // pred: ^bb16
    %41 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc49)
    %42 = cir.cast(array_to_ptrdecay, %41 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc49)
    cir.call @printLine(%42) : (!cir.ptr<!s8i>) -> () loc(#loc88)
    cir.br ^bb19 loc(#loc73)
  ^bb19:  // 2 preds: ^bb17, ^bb18
    cir.br ^bb20 loc(#loc73)
  ^bb20:  // pred: ^bb19
    cir.br ^bb21 loc(#loc66)
  ^bb21:  // 2 preds: ^bb6, ^bb20
    cir.br ^bb22 loc(#loc66)
  ^bb22:  // pred: ^bb21
    cir.return loc(#loc51)
  } loc(#loc196)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc209)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc210)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc95)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc211)
    cir.br ^bb1 loc(#loc212)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc176)
    %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc99)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc99)
    cir.brcond %5 ^bb2, ^bb3 loc(#loc213)
  ^bb2:  // pred: ^bb1
    %6 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc101)
    %7 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc178)
    %8 = cir.load %7 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc102)
    %9 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc103)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc103)
    %11 = cir.call @__isoc99_fscanf(%8, %10, %1) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s32i>) -> !s32i loc(#loc101)
    cir.br ^bb3 loc(#loc98)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc98)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc214)
  ^bb5:  // pred: ^bb4
    %12 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc176)
    %13 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc106)
    %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc106)
    cir.brcond %14 ^bb6, ^bb20 loc(#loc215)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc216)
  ^bb7:  // pred: ^bb6
    %15 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc110)
    %16 = cir.const #cir.int<2147483647> : !s32i loc(#loc111)
    %17 = cir.unary(minus, %16) nsw : !s32i, !s32i loc(#loc111)
    %18 = cir.const #cir.int<1> : !s32i loc(#loc111)
    %19 = cir.binop(sub, %17, %18) nsw : !s32i loc(#loc111)
    %20 = cir.cmp(gt, %15, %19) : !s32i, !cir.bool loc(#loc217)
    cir.brcond %20 ^bb8, ^bb13 loc(#loc112)
  ^bb8:  // pred: ^bb7
    %21 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc113)
    %22 = cir.abs %21 poison : !s32i loc(#loc114)
    %23 = cir.cast(integral, %22 : !s32i), !s64i loc(#loc114)
    %24 = cir.get_global @sqrt : !cir.ptr<!cir.func<(!cir.double) -> !cir.double>> loc(#loc115)
    %25 = cir.const #cir.int<2147483647> : !s32i loc(#loc116)
    %26 = cir.cast(int_to_float, %25 : !s32i), !cir.double loc(#loc116)
    %27 = cir.call @sqrt(%26) : (!cir.double) -> !cir.double extra(#fn_attr1) loc(#loc115)
    %28 = cir.cast(float_to_int, %27 : !cir.double), !s64i loc(#loc115)
    %29 = cir.cmp(lt, %23, %28) : !s64i, !cir.bool loc(#loc218)
    cir.brcond %29 ^bb9, ^bb10 loc(#loc112)
  ^bb9:  // pred: ^bb8
    %30 = cir.const #true loc(#loc112)
    cir.br ^bb11(%30 : !cir.bool) loc(#loc112)
  ^bb10:  // pred: ^bb8
    %31 = cir.const #false loc(#loc112)
    cir.br ^bb11(%31 : !cir.bool) loc(#loc112)
  ^bb11(%32: !cir.bool loc("CWE190_Integer_Overflow__int_fscanf_square_05.c":99:28)):  // 2 preds: ^bb9, ^bb10
    cir.br ^bb12 loc(#loc112)
  ^bb12:  // pred: ^bb11
    cir.br ^bb14(%32 : !cir.bool) loc(#loc112)
  ^bb13:  // pred: ^bb7
    %33 = cir.const #false loc(#loc112)
    cir.br ^bb14(%33 : !cir.bool) loc(#loc112)
  ^bb14(%34: !cir.bool loc("CWE190_Integer_Overflow__int_fscanf_square_05.c":99:28)):  // 2 preds: ^bb12, ^bb13
    cir.br ^bb15 loc(#loc112)
  ^bb15:  // pred: ^bb14
    cir.brcond %34 ^bb16, ^bb17 loc(#loc219)
  ^bb16:  // pred: ^bb15
    %35 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc121)
    %36 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc92)
    %37 = cir.binop(mul, %35, %36) nsw : !s32i loc(#loc121)
    cir.store %37, %0 : !s32i, !cir.ptr<!s32i> loc(#loc209)
    %38 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc122)
    cir.call @printIntLine(%38) : (!s32i) -> () loc(#loc123)
    cir.br ^bb18 loc(#loc119)
  ^bb17:  // pred: ^bb15
    %39 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc124)
    %40 = cir.cast(array_to_ptrdecay, %39 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc124)
    cir.call @printLine(%40) : (!cir.ptr<!s8i>) -> () loc(#loc125)
    cir.br ^bb18 loc(#loc109)
  ^bb18:  // 2 preds: ^bb16, ^bb17
    cir.br ^bb19 loc(#loc109)
  ^bb19:  // pred: ^bb18
    cir.br ^bb20 loc(#loc105)
  ^bb20:  // 2 preds: ^bb5, ^bb19
    cir.br ^bb21 loc(#loc105)
  ^bb21:  // pred: ^bb20
    cir.return loc(#loc90)
  } loc(#loc208)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc221)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc222)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc132)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc223)
    cir.br ^bb1 loc(#loc224)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @staticFalse : !cir.ptr<!s32i> loc(#loc194)
    %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc136)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc136)
    cir.brcond %5 ^bb2, ^bb3 loc(#loc225)
  ^bb2:  // pred: ^bb1
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc140)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc140)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc141)
    cir.br ^bb4 loc(#loc138)
  ^bb3:  // pred: ^bb1
    %8 = cir.const #cir.int<2> : !s32i loc(#loc142)
    cir.store %8, %1 : !s32i, !cir.ptr<!s32i> loc(#loc226)
    cir.br ^bb4 loc(#loc135)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc135)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc227)
  ^bb6:  // pred: ^bb5
    %9 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc176)
    %10 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc146)
    %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc146)
    cir.brcond %11 ^bb7, ^bb10 loc(#loc228)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc229)
  ^bb8:  // pred: ^bb7
    %12 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc150)
    %13 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc129)
    %14 = cir.binop(mul, %12, %13) nsw : !s32i loc(#loc150)
    cir.store %14, %0 : !s32i, !cir.ptr<!s32i> loc(#loc221)
    %15 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc151)
    cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc152)
    cir.br ^bb9 loc(#loc149)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc145)
  ^bb10:  // 2 preds: ^bb6, ^bb9
    cir.br ^bb11 loc(#loc145)
  ^bb11:  // pred: ^bb10
    cir.return loc(#loc127)
  } loc(#loc220)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc231)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc232)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc159)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc233)
    cir.br ^bb1 loc(#loc234)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc176)
    %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc163)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc163)
    cir.brcond %5 ^bb2, ^bb3 loc(#loc235)
  ^bb2:  // pred: ^bb1
    %6 = cir.const #cir.int<2> : !s32i loc(#loc165)
    cir.store %6, %1 : !s32i, !cir.ptr<!s32i> loc(#loc236)
    cir.br ^bb3 loc(#loc162)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc162)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc237)
  ^bb5:  // pred: ^bb4
    %7 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc176)
    %8 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc169)
    %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc169)
    cir.brcond %9 ^bb6, ^bb9 loc(#loc238)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc239)
  ^bb7:  // pred: ^bb6
    %10 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc173)
    %11 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc156)
    %12 = cir.binop(mul, %10, %11) nsw : !s32i loc(#loc173)
    cir.store %12, %0 : !s32i, !cir.ptr<!s32i> loc(#loc231)
    %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc174)
    cir.call @printIntLine(%13) : (!s32i) -> () loc(#loc175)
    cir.br ^bb8 loc(#loc172)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc168)
  ^bb9:  // 2 preds: ^bb5, ^bb8
    cir.br ^bb10 loc(#loc168)
  ^bb10:  // pred: ^bb9
    cir.return loc(#loc154)
  } loc(#loc230)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_fscanf_square_05.c":0:0)
#loc1 = loc("CWE190_Integer_Overflow__int_fscanf_square_05.c":25:1)
#loc2 = loc("CWE190_Integer_Overflow__int_fscanf_square_05.c":25:25)
#loc3 = loc("/usr/include/stdio.h":463:1)
#loc4 = loc("/usr/include/stdio.h":465:33)
#loc5 = loc("/usr/include/stdio.h":149:1)
#loc6 = loc("/usr/include/stdio.h":149:14)
#loc7 = loc("CWE190_Integer_Overflow__int_fscanf_square_05.c":38:23)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc9 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc10 = loc("CWE190_Integer_Overflow__int_fscanf_square_05.c":30:1)
#loc11 = loc("CWE190_Integer_Overflow__int_fscanf_square_05.c":48:1)
#loc12 = loc("CWE190_Integer_Overflow__int_fscanf_square_05.c":44:13)
#loc13 = loc("CWE190_Integer_Overflow__int_fscanf_square_05.c":44:33)
#loc14 = loc("CWE190_Integer_Overflow__int_fscanf_square_05.c":32:5)
#loc15 = loc("CWE190_Integer_Overflow__int_fscanf_square_05.c":32:9)
#loc16 = loc("CWE190_Integer_Overflow__int_fscanf_square_05.c":34:12)
#loc17 = loc("CWE190_Integer_Overflow__int_fscanf_square_05.c":34:5)
#loc18 = loc("CWE190_Integer_Overflow__int_fscanf_square_05.c":35:5)
#loc19 = loc("CWE190_Integer_Overflow__int_fscanf_square_05.c":39:5)
#loc20 = loc("CWE190_Integer_Overflow__int_fscanf_square_05.c":35:8)
#loc21 = loc("CWE190_Integer_Overflow__int_fscanf_square_05.c":36:5)
#loc22 = loc("CWE190_Integer_Overflow__int_fscanf_square_05.c":38:9)
#loc23 = loc("CWE190_Integer_Overflow__int_fscanf_square_05.c":38:16)
#loc24 = loc("CWE190_Integer_Overflow__int_fscanf_square_05.c":40:5)
#loc25 = loc("CWE190_Integer_Overflow__int_fscanf_square_05.c":47:5)
#loc26 = loc("CWE190_Integer_Overflow__int_fscanf_square_05.c":40:8)
#loc27 = loc("CWE190_Integer_Overflow__int_fscanf_square_05.c":41:5)
#loc28 = loc("CWE190_Integer_Overflow__int_fscanf_square_05.c":42:9)
#loc29 = loc("CWE190_Integer_Overflow__int_fscanf_square_05.c":46:9)
#loc30 = loc("CWE190_Integer_Overflow__int_fscanf_square_05.c":44:26)
#loc31 = loc("CWE190_Integer_Overflow__int_fscanf_square_05.c":45:26)
#loc32 = loc("CWE190_Integer_Overflow__int_fscanf_square_05.c":45:13)
#loc33 = loc("CWE190_Integer_Overflow__int_fscanf_square_05.c":158:1)
#loc34 = loc("CWE190_Integer_Overflow__int_fscanf_square_05.c":164:1)
#loc35 = loc("CWE190_Integer_Overflow__int_fscanf_square_05.c":160:5)
#loc36 = loc("CWE190_Integer_Overflow__int_fscanf_square_05.c":160:14)
#loc37 = loc("CWE190_Integer_Overflow__int_fscanf_square_05.c":161:5)
#loc38 = loc("CWE190_Integer_Overflow__int_fscanf_square_05.c":161:14)
#loc39 = loc("CWE190_Integer_Overflow__int_fscanf_square_05.c":162:5)
#loc40 = loc("CWE190_Integer_Overflow__int_fscanf_square_05.c":162:14)
#loc41 = loc("CWE190_Integer_Overflow__int_fscanf_square_05.c":163:5)
#loc42 = loc("CWE190_Integer_Overflow__int_fscanf_square_05.c":163:14)
#loc43 = loc("CWE190_Integer_Overflow__int_fscanf_square_05.c":26:1)
#loc44 = loc("CWE190_Integer_Overflow__int_fscanf_square_05.c":26:26)
#loc45 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc46 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc47 = loc("CWE190_Integer_Overflow__int_fscanf_square_05.c":68:19)
#loc48 = loc("/usr/include/x86_64-linux-gnu/bits/mathcalls.h":143:1)
#loc49 = loc("CWE190_Integer_Overflow__int_fscanf_square_05.c":80:23)
#loc50 = loc("CWE190_Integer_Overflow__int_fscanf_square_05.c":55:1)
#loc51 = loc("CWE190_Integer_Overflow__int_fscanf_square_05.c":83:1)
#loc52 = loc("CWE190_Integer_Overflow__int_fscanf_square_05.c":75:13)
#loc53 = loc("CWE190_Integer_Overflow__int_fscanf_square_05.c":75:33)
#loc54 = loc("CWE190_Integer_Overflow__int_fscanf_square_05.c":57:5)
#loc55 = loc("CWE190_Integer_Overflow__int_fscanf_square_05.c":57:9)
#loc56 = loc("CWE190_Integer_Overflow__int_fscanf_square_05.c":59:12)
#loc57 = loc("CWE190_Integer_Overflow__int_fscanf_square_05.c":59:5)
#loc58 = loc("CWE190_Integer_Overflow__int_fscanf_square_05.c":60:5)
#loc59 = loc("CWE190_Integer_Overflow__int_fscanf_square_05.c":64:5)
#loc60 = loc("CWE190_Integer_Overflow__int_fscanf_square_05.c":60:8)
#loc61 = loc("CWE190_Integer_Overflow__int_fscanf_square_05.c":61:5)
#loc62 = loc("CWE190_Integer_Overflow__int_fscanf_square_05.c":63:9)
#loc63 = loc("CWE190_Integer_Overflow__int_fscanf_square_05.c":63:16)
#loc64 = loc("CWE190_Integer_Overflow__int_fscanf_square_05.c":63:23)
#loc65 = loc("CWE190_Integer_Overflow__int_fscanf_square_05.c":65:5)
#loc66 = loc("CWE190_Integer_Overflow__int_fscanf_square_05.c":82:5)
#loc67 = loc("CWE190_Integer_Overflow__int_fscanf_square_05.c":65:8)
#loc68 = loc("CWE190_Integer_Overflow__int_fscanf_square_05.c":66:5)
#loc69 = loc("CWE190_Integer_Overflow__int_fscanf_square_05.c":69:5)
#loc70 = loc("CWE190_Integer_Overflow__int_fscanf_square_05.c":71:5)
#loc71 = loc("CWE190_Integer_Overflow__int_fscanf_square_05.c":68:9)
#loc72 = loc("CWE190_Integer_Overflow__int_fscanf_square_05.c":73:9)
#loc73 = loc("CWE190_Integer_Overflow__int_fscanf_square_05.c":81:9)
#loc74 = loc("CWE190_Integer_Overflow__int_fscanf_square_05.c":73:13)
#loc75 = loc("CWE190_Integer_Overflow__int_fscanf_square_05.c":73:20)
#loc77 = loc("CWE190_Integer_Overflow__int_fscanf_square_05.c":73:35)
#loc78 = loc("CWE190_Integer_Overflow__int_fscanf_square_05.c":73:31)
#loc79 = loc("CWE190_Integer_Overflow__int_fscanf_square_05.c":73:49)
#loc80 = loc("CWE190_Integer_Overflow__int_fscanf_square_05.c":73:62)
#loc81 = loc("CWE190_Integer_Overflow__int_fscanf_square_05.c":73:69)
#loc82 = loc("CWE190_Integer_Overflow__int_fscanf_square_05.c":74:9)
#loc83 = loc("CWE190_Integer_Overflow__int_fscanf_square_05.c":77:9)
#loc84 = loc("CWE190_Integer_Overflow__int_fscanf_square_05.c":79:9)
#loc85 = loc("CWE190_Integer_Overflow__int_fscanf_square_05.c":75:26)
#loc86 = loc("CWE190_Integer_Overflow__int_fscanf_square_05.c":76:26)
#loc87 = loc("CWE190_Integer_Overflow__int_fscanf_square_05.c":76:13)
#loc88 = loc("CWE190_Integer_Overflow__int_fscanf_square_05.c":80:13)
#loc89 = loc("CWE190_Integer_Overflow__int_fscanf_square_05.c":86:1)
#loc90 = loc("CWE190_Integer_Overflow__int_fscanf_square_05.c":109:1)
#loc91 = loc("CWE190_Integer_Overflow__int_fscanf_square_05.c":101:13)
#loc92 = loc("CWE190_Integer_Overflow__int_fscanf_square_05.c":101:33)
#loc93 = loc("CWE190_Integer_Overflow__int_fscanf_square_05.c":88:5)
#loc94 = loc("CWE190_Integer_Overflow__int_fscanf_square_05.c":88:9)
#loc95 = loc("CWE190_Integer_Overflow__int_fscanf_square_05.c":90:12)
#loc96 = loc("CWE190_Integer_Overflow__int_fscanf_square_05.c":90:5)
#loc97 = loc("CWE190_Integer_Overflow__int_fscanf_square_05.c":91:5)
#loc98 = loc("CWE190_Integer_Overflow__int_fscanf_square_05.c":95:5)
#loc99 = loc("CWE190_Integer_Overflow__int_fscanf_square_05.c":91:8)
#loc100 = loc("CWE190_Integer_Overflow__int_fscanf_square_05.c":92:5)
#loc101 = loc("CWE190_Integer_Overflow__int_fscanf_square_05.c":94:9)
#loc102 = loc("CWE190_Integer_Overflow__int_fscanf_square_05.c":94:16)
#loc103 = loc("CWE190_Integer_Overflow__int_fscanf_square_05.c":94:23)
#loc104 = loc("CWE190_Integer_Overflow__int_fscanf_square_05.c":96:5)
#loc105 = loc("CWE190_Integer_Overflow__int_fscanf_square_05.c":108:5)
#loc106 = loc("CWE190_Integer_Overflow__int_fscanf_square_05.c":96:8)
#loc107 = loc("CWE190_Integer_Overflow__int_fscanf_square_05.c":97:5)
#loc108 = loc("CWE190_Integer_Overflow__int_fscanf_square_05.c":99:9)
#loc109 = loc("CWE190_Integer_Overflow__int_fscanf_square_05.c":107:9)
#loc110 = loc("CWE190_Integer_Overflow__int_fscanf_square_05.c":99:13)
#loc111 = loc("CWE190_Integer_Overflow__int_fscanf_square_05.c":99:20)
#loc113 = loc("CWE190_Integer_Overflow__int_fscanf_square_05.c":99:35)
#loc114 = loc("CWE190_Integer_Overflow__int_fscanf_square_05.c":99:31)
#loc115 = loc("CWE190_Integer_Overflow__int_fscanf_square_05.c":99:49)
#loc116 = loc("CWE190_Integer_Overflow__int_fscanf_square_05.c":99:62)
#loc117 = loc("CWE190_Integer_Overflow__int_fscanf_square_05.c":99:69)
#loc118 = loc("CWE190_Integer_Overflow__int_fscanf_square_05.c":100:9)
#loc119 = loc("CWE190_Integer_Overflow__int_fscanf_square_05.c":103:9)
#loc120 = loc("CWE190_Integer_Overflow__int_fscanf_square_05.c":105:9)
#loc121 = loc("CWE190_Integer_Overflow__int_fscanf_square_05.c":101:26)
#loc122 = loc("CWE190_Integer_Overflow__int_fscanf_square_05.c":102:26)
#loc123 = loc("CWE190_Integer_Overflow__int_fscanf_square_05.c":102:13)
#loc124 = loc("CWE190_Integer_Overflow__int_fscanf_square_05.c":106:23)
#loc125 = loc("CWE190_Integer_Overflow__int_fscanf_square_05.c":106:13)
#loc126 = loc("CWE190_Integer_Overflow__int_fscanf_square_05.c":112:1)
#loc127 = loc("CWE190_Integer_Overflow__int_fscanf_square_05.c":135:1)
#loc128 = loc("CWE190_Integer_Overflow__int_fscanf_square_05.c":131:13)
#loc129 = loc("CWE190_Integer_Overflow__int_fscanf_square_05.c":131:33)
#loc130 = loc("CWE190_Integer_Overflow__int_fscanf_square_05.c":114:5)
#loc131 = loc("CWE190_Integer_Overflow__int_fscanf_square_05.c":114:9)
#loc132 = loc("CWE190_Integer_Overflow__int_fscanf_square_05.c":116:12)
#loc133 = loc("CWE190_Integer_Overflow__int_fscanf_square_05.c":116:5)
#loc134 = loc("CWE190_Integer_Overflow__int_fscanf_square_05.c":117:5)
#loc135 = loc("CWE190_Integer_Overflow__int_fscanf_square_05.c":126:5)
#loc136 = loc("CWE190_Integer_Overflow__int_fscanf_square_05.c":117:8)
#loc137 = loc("CWE190_Integer_Overflow__int_fscanf_square_05.c":118:5)
#loc138 = loc("CWE190_Integer_Overflow__int_fscanf_square_05.c":121:5)
#loc139 = loc("CWE190_Integer_Overflow__int_fscanf_square_05.c":123:5)
#loc140 = loc("CWE190_Integer_Overflow__int_fscanf_square_05.c":120:19)
#loc141 = loc("CWE190_Integer_Overflow__int_fscanf_square_05.c":120:9)
#loc142 = loc("CWE190_Integer_Overflow__int_fscanf_square_05.c":125:16)
#loc143 = loc("CWE190_Integer_Overflow__int_fscanf_square_05.c":125:9)
#loc144 = loc("CWE190_Integer_Overflow__int_fscanf_square_05.c":127:5)
#loc145 = loc("CWE190_Integer_Overflow__int_fscanf_square_05.c":134:5)
#loc146 = loc("CWE190_Integer_Overflow__int_fscanf_square_05.c":127:8)
#loc147 = loc("CWE190_Integer_Overflow__int_fscanf_square_05.c":128:5)
#loc148 = loc("CWE190_Integer_Overflow__int_fscanf_square_05.c":129:9)
#loc149 = loc("CWE190_Integer_Overflow__int_fscanf_square_05.c":133:9)
#loc150 = loc("CWE190_Integer_Overflow__int_fscanf_square_05.c":131:26)
#loc151 = loc("CWE190_Integer_Overflow__int_fscanf_square_05.c":132:26)
#loc152 = loc("CWE190_Integer_Overflow__int_fscanf_square_05.c":132:13)
#loc153 = loc("CWE190_Integer_Overflow__int_fscanf_square_05.c":138:1)
#loc154 = loc("CWE190_Integer_Overflow__int_fscanf_square_05.c":156:1)
#loc155 = loc("CWE190_Integer_Overflow__int_fscanf_square_05.c":152:13)
#loc156 = loc("CWE190_Integer_Overflow__int_fscanf_square_05.c":152:33)
#loc157 = loc("CWE190_Integer_Overflow__int_fscanf_square_05.c":140:5)
#loc158 = loc("CWE190_Integer_Overflow__int_fscanf_square_05.c":140:9)
#loc159 = loc("CWE190_Integer_Overflow__int_fscanf_square_05.c":142:12)
#loc160 = loc("CWE190_Integer_Overflow__int_fscanf_square_05.c":142:5)
#loc161 = loc("CWE190_Integer_Overflow__int_fscanf_square_05.c":143:5)
#loc162 = loc("CWE190_Integer_Overflow__int_fscanf_square_05.c":147:5)
#loc163 = loc("CWE190_Integer_Overflow__int_fscanf_square_05.c":143:8)
#loc164 = loc("CWE190_Integer_Overflow__int_fscanf_square_05.c":144:5)
#loc165 = loc("CWE190_Integer_Overflow__int_fscanf_square_05.c":146:16)
#loc166 = loc("CWE190_Integer_Overflow__int_fscanf_square_05.c":146:9)
#loc167 = loc("CWE190_Integer_Overflow__int_fscanf_square_05.c":148:5)
#loc168 = loc("CWE190_Integer_Overflow__int_fscanf_square_05.c":155:5)
#loc169 = loc("CWE190_Integer_Overflow__int_fscanf_square_05.c":148:8)
#loc170 = loc("CWE190_Integer_Overflow__int_fscanf_square_05.c":149:5)
#loc171 = loc("CWE190_Integer_Overflow__int_fscanf_square_05.c":150:9)
#loc172 = loc("CWE190_Integer_Overflow__int_fscanf_square_05.c":154:9)
#loc173 = loc("CWE190_Integer_Overflow__int_fscanf_square_05.c":152:26)
#loc174 = loc("CWE190_Integer_Overflow__int_fscanf_square_05.c":153:26)
#loc175 = loc("CWE190_Integer_Overflow__int_fscanf_square_05.c":153:13)
#loc176 = loc(fused[#loc1, #loc2])
#loc177 = loc(fused[#loc3, #loc4])
#loc178 = loc(fused[#loc5, #loc6])
#loc179 = loc(fused[#loc8, #loc9])
#loc180 = loc(fused[#loc10, #loc11])
#loc181 = loc(fused[#loc12, #loc13])
#loc182 = loc(fused[#loc14, #loc15])
#loc183 = loc(fused[#loc17, #loc16])
#loc184 = loc(fused[#loc18, #loc19])
#loc185 = loc(fused[#loc21, #loc19])
#loc186 = loc(fused[#loc24, #loc25])
#loc187 = loc(fused[#loc27, #loc25])
#loc188 = loc(fused[#loc28, #loc29])
#loc189 = loc(fused[#loc33, #loc34])
#loc190 = loc(fused[#loc35, #loc36])
#loc191 = loc(fused[#loc37, #loc38])
#loc192 = loc(fused[#loc39, #loc40])
#loc193 = loc(fused[#loc41, #loc42])
#loc194 = loc(fused[#loc43, #loc44])
#loc195 = loc(fused[#loc45, #loc46])
#loc196 = loc(fused[#loc50, #loc51])
#loc197 = loc(fused[#loc52, #loc53])
#loc198 = loc(fused[#loc54, #loc55])
#loc199 = loc(fused[#loc57, #loc56])
#loc200 = loc(fused[#loc58, #loc59])
#loc201 = loc(fused[#loc61, #loc59])
#loc202 = loc(fused[#loc65, #loc66])
#loc203 = loc(fused[#loc68, #loc69, #loc70, #loc66])
#loc204 = loc(fused[#loc72, #loc73])
#loc205 = loc(fused[#loc74, #loc75])
#loc206 = loc(fused[#loc78, #loc81])
#loc207 = loc(fused[#loc82, #loc83, #loc84, #loc73])
#loc208 = loc(fused[#loc89, #loc90])
#loc209 = loc(fused[#loc91, #loc92])
#loc210 = loc(fused[#loc93, #loc94])
#loc211 = loc(fused[#loc96, #loc95])
#loc212 = loc(fused[#loc97, #loc98])
#loc213 = loc(fused[#loc100, #loc98])
#loc214 = loc(fused[#loc104, #loc105])
#loc215 = loc(fused[#loc107, #loc105])
#loc216 = loc(fused[#loc108, #loc109])
#loc217 = loc(fused[#loc110, #loc111])
#loc218 = loc(fused[#loc114, #loc117])
#loc219 = loc(fused[#loc118, #loc119, #loc120, #loc109])
#loc220 = loc(fused[#loc126, #loc127])
#loc221 = loc(fused[#loc128, #loc129])
#loc222 = loc(fused[#loc130, #loc131])
#loc223 = loc(fused[#loc133, #loc132])
#loc224 = loc(fused[#loc134, #loc135])
#loc225 = loc(fused[#loc137, #loc138, #loc139, #loc135])
#loc226 = loc(fused[#loc143, #loc142])
#loc227 = loc(fused[#loc144, #loc145])
#loc228 = loc(fused[#loc147, #loc145])
#loc229 = loc(fused[#loc148, #loc149])
#loc230 = loc(fused[#loc153, #loc154])
#loc231 = loc(fused[#loc155, #loc156])
#loc232 = loc(fused[#loc157, #loc158])
#loc233 = loc(fused[#loc160, #loc159])
#loc234 = loc(fused[#loc161, #loc162])
#loc235 = loc(fused[#loc164, #loc162])
#loc236 = loc(fused[#loc166, #loc165])
#loc237 = loc(fused[#loc167, #loc168])
#loc238 = loc(fused[#loc170, #loc168])
#loc239 = loc(fused[#loc171, #loc172])
