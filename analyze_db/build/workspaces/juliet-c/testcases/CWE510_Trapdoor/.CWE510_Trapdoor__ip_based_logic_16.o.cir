!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
!ty_in_addr = !cir.record<struct "in_addr" {!u32i} #cir.record.decl.ast>
!ty_sockaddr = !cir.record<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.record<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/workspaces/juliet-c/testcases/CWE510_Trapdoor/CWE510_Trapdoor__ip_based_logic_16.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little", "dlti.mangling_mode" = "e">} {
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc275)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc276)
  cir.func private @bind(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc277)
  cir.func private @listen(!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc278)
  cir.func private @accept(!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc279)
  cir.func private @getsockname(!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i extra(#fn_attr) loc(#loc280)
  cir.func private @strcmp(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc281)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"192.168.30.123\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc15)
  cir.func private @inet_ntoa(!ty_in_addr) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc282)
  cir.func private @send(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc283)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Welcome, admin!\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc20)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Welcome!\00" : !cir.array<!s8i x 9>> : !cir.array<!s8i x 9> {alignment = 1 : i64} loc(#loc21)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc284)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Send failed!\00" : !cir.array<!s8i x 13>> : !cir.array<!s8i x 13> {alignment = 1 : i64} loc(#loc24)
  cir.func private @close(!s32i) -> !s32i loc(#loc285)
  cir.func no_proto @CWE510_Trapdoor__ip_based_logic_16_bad() extra(#fn_attr1) {
    cir.scope {
      cir.while {
        %0 = cir.const #cir.int<1> : !s32i loc(#loc31)
        %1 = cir.cast(int_to_bool, %0 : !s32i), !cir.bool loc(#loc31)
        cir.condition(%1) loc(#loc31)
      } do {
        cir.scope {
          cir.scope {
            %0 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc290)
            %1 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["acceptService"] {alignment = 4 : i64} loc(#loc291)
            %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptServiceLen", init] {alignment = 4 : i64} loc(#loc292)
            %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc293)
            %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc294)
            %5 = cir.const #cir.int<16> : !u64i loc(#loc295)
            %6 = cir.cast(integral, %5 : !u64i), !s32i loc(#loc295)
            cir.store %6, %2 : !s32i, !cir.ptr<!s32i> loc(#loc292)
            %7 = cir.const #cir.int<1> : !s32i loc(#loc41)
            %8 = cir.unary(minus, %7) nsw : !s32i, !s32i loc(#loc41)
            cir.store %8, %3 : !s32i, !cir.ptr<!s32i> loc(#loc293)
            %9 = cir.const #cir.int<1> : !s32i loc(#loc43)
            %10 = cir.unary(minus, %9) nsw : !s32i, !s32i loc(#loc43)
            cir.store %10, %4 : !s32i, !cir.ptr<!s32i> loc(#loc294)
            cir.scope {
              cir.do {
                cir.scope {
                  %11 = cir.const #cir.int<2> : !s32i loc(#loc49)
                  %12 = cir.const #cir.int<1> : !s32i loc(#loc50)
                  %13 = cir.const #cir.int<6> : !s32i loc(#loc51)
                  %14 = cir.call @socket(%11, %12, %13) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc52)
                  cir.store %14, %3 : !s32i, !cir.ptr<!s32i> loc(#loc298)
                  cir.scope {
                    %33 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc57)
                    %34 = cir.const #cir.int<1> : !s32i loc(#loc58)
                    %35 = cir.unary(minus, %34) nsw : !s32i, !s32i loc(#loc58)
                    %36 = cir.cmp(eq, %33, %35) : !s32i, !cir.bool loc(#loc300)
                    cir.if %36 {
                      cir.break loc(#loc60)
                    } loc(#loc301)
                  } loc(#loc299)
                  %15 = cir.cast(bitcast, %0 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc302)
                  %16 = cir.const #cir.int<0> : !s32i loc(#loc63)
                  %17 = cir.const #cir.int<16> : !u64i loc(#loc303)
                  cir.libc.memset %17 bytes from %15 set to %16 : !cir.ptr<!void>, !s32i, !u64i loc(#loc304)
                  %18 = cir.const #cir.int<2> : !s32i loc(#loc68)
                  %19 = cir.cast(integral, %18 : !s32i), !u16i loc(#loc68)
                  %20 = cir.get_member %0[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc69)
                  cir.store %19, %20 : !u16i, !cir.ptr<!u16i> loc(#loc305)
                  %21 = cir.const #cir.int<0> : !s32i loc(#loc71)
                  %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc71)
                  %23 = cir.get_member %0[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc72)
                  %24 = cir.get_member %23[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc73)
                  cir.store %22, %24 : !u32i, !cir.ptr<!u32i> loc(#loc306)
                  %25 = cir.const #cir.int<20000> : !s32i loc(#loc75)
                  %26 = cir.cast(integral, %25 : !s32i), !u16i loc(#loc75)
                  %27 = cir.call @htons(%26) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc76)
                  %28 = cir.get_member %0[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc77)
                  cir.store %27, %28 : !u16i, !cir.ptr<!u16i> loc(#loc307)
                  cir.scope {
                    %33 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc82)
                    %34 = cir.cast(bitcast, %0 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc309)
                    %35 = cir.const #cir.int<16> : !u64i loc(#loc310)
                    %36 = cir.cast(integral, %35 : !u64i), !u32i loc(#loc310)
                    %37 = cir.call @bind(%33, %34, %36) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc87)
                    %38 = cir.const #cir.int<1> : !s32i loc(#loc88)
                    %39 = cir.unary(minus, %38) nsw : !s32i, !s32i loc(#loc88)
                    %40 = cir.cmp(eq, %37, %39) : !s32i, !cir.bool loc(#loc311)
                    cir.if %40 {
                      cir.break loc(#loc90)
                    } loc(#loc312)
                  } loc(#loc308)
                  cir.scope {
                    %33 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc93)
                    %34 = cir.const #cir.int<5> : !s32i loc(#loc94)
                    %35 = cir.call @listen(%33, %34) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc95)
                    %36 = cir.const #cir.int<1> : !s32i loc(#loc96)
                    %37 = cir.unary(minus, %36) nsw : !s32i, !s32i loc(#loc96)
                    %38 = cir.cmp(eq, %35, %37) : !s32i, !cir.bool loc(#loc314)
                    cir.if %38 {
                      cir.break loc(#loc98)
                    } loc(#loc315)
                  } loc(#loc313)
                  %29 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc99)
                  %30 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc100)
                  %31 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc101)
                  %32 = cir.call @accept(%29, %30, %31) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc102)
                  cir.store %32, %4 : !s32i, !cir.ptr<!s32i> loc(#loc316)
                  cir.scope {
                    %33 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc107)
                    %34 = cir.const #cir.int<1> : !s32i loc(#loc108)
                    %35 = cir.unary(minus, %34) nsw : !s32i, !s32i loc(#loc108)
                    %36 = cir.cmp(eq, %33, %35) : !s32i, !cir.bool loc(#loc318)
                    cir.if %36 {
                      cir.break loc(#loc110)
                    } loc(#loc319)
                  } loc(#loc317)
                  cir.scope {
                    %33 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc113)
                    %34 = cir.cast(bitcast, %1 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc321)
                    %35 = cir.cast(bitcast, %2 : !cir.ptr<!s32i>), !cir.ptr<!u32i> loc(#loc322)
                    %36 = cir.call @getsockname(%33, %34, %35) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i extra(#fn_attr) loc(#loc118)
                    %37 = cir.const #cir.int<1> : !s32i loc(#loc119)
                    %38 = cir.unary(minus, %37) nsw : !s32i, !s32i loc(#loc120)
                    %39 = cir.cmp(eq, %36, %38) : !s32i, !cir.bool loc(#loc323)
                    cir.if %39 {
                      cir.break loc(#loc122)
                    } loc(#loc324)
                  } loc(#loc320)
                  cir.scope {
                    %33 = cir.get_global @strcmp : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i>> loc(#loc125)
                    %34 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc15)
                    %35 = cir.cast(array_to_ptrdecay, %34 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc15)
                    %36 = cir.get_member %1[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc72)
                    %37 = cir.load %36 : !cir.ptr<!ty_in_addr>, !ty_in_addr loc(#loc126)
                    %38 = cir.call @inet_ntoa(%37) : (!ty_in_addr) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc126)
                    %39 = cir.call @strcmp(%35, %38) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc125)
                    %40 = cir.const #cir.int<0> : !s32i loc(#loc127)
                    %41 = cir.cmp(eq, %39, %40) : !s32i, !cir.bool loc(#loc326)
                    cir.if %41 {
                      cir.scope {
                        %42 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc133)
                        %43 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc20)
                        %44 = cir.cast(array_to_ptrdecay, %43 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc20)
                        %45 = cir.cast(bitcast, %44 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc20)
                        %46 = cir.const #cir.int<15> : !u64i loc(#loc329)
                        %47 = cir.const #cir.int<0> : !s32i loc(#loc136)
                        %48 = cir.call @send(%42, %45, %46, %47) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc137)
                        %49 = cir.const #cir.int<1> : !s32i loc(#loc138)
                        %50 = cir.unary(minus, %49) nsw : !s32i, !s32i loc(#loc138)
                        %51 = cir.cast(integral, %50 : !s32i), !s64i loc(#loc138)
                        %52 = cir.cmp(eq, %48, %51) : !s64i, !cir.bool loc(#loc330)
                        cir.if %52 {
                          cir.break loc(#loc140)
                        } loc(#loc331)
                      } loc(#loc328)
                    } else {
                      cir.scope {
                        %42 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc143)
                        %43 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc21)
                        %44 = cir.cast(array_to_ptrdecay, %43 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc21)
                        %45 = cir.cast(bitcast, %44 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc21)
                        %46 = cir.const #cir.int<8> : !u64i loc(#loc333)
                        %47 = cir.const #cir.int<0> : !s32i loc(#loc146)
                        %48 = cir.call @send(%42, %45, %46, %47) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc147)
                        %49 = cir.const #cir.int<1> : !s32i loc(#loc148)
                        %50 = cir.unary(minus, %49) nsw : !s32i, !s32i loc(#loc148)
                        %51 = cir.cast(integral, %50 : !s32i), !s64i loc(#loc148)
                        %52 = cir.cmp(eq, %48, %51) : !s64i, !cir.bool loc(#loc334)
                        cir.if %52 {
                          %53 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 13>> loc(#loc24)
                          %54 = cir.cast(array_to_ptrdecay, %53 : !cir.ptr<!cir.array<!s8i x 13>>), !cir.ptr<!s8i> loc(#loc24)
                          cir.call @printLine(%54) : (!cir.ptr<!s8i>) -> () loc(#loc150)
                        } loc(#loc335)
                      } loc(#loc332)
                    } loc(#loc327)
                  } loc(#loc325)
                } loc(#loc297)
                cir.yield loc(#loc46)
              } while {
                %11 = cir.const #cir.int<0> : !s32i loc(#loc151)
                %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc151)
                cir.condition(%12) loc(#loc151)
              } loc(#loc296)
            } loc(#loc296)
            cir.scope {
              %11 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc154)
              %12 = cir.const #cir.int<1> : !s32i loc(#loc155)
              %13 = cir.unary(minus, %12) nsw : !s32i, !s32i loc(#loc155)
              %14 = cir.cmp(ne, %11, %13) : !s32i, !cir.bool loc(#loc337)
              cir.if %14 {
                %15 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc157)
                %16 = cir.call @close(%15) : (!s32i) -> !s32i loc(#loc158)
              } loc(#loc338)
            } loc(#loc336)
            cir.scope {
              %11 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc161)
              %12 = cir.const #cir.int<1> : !s32i loc(#loc162)
              %13 = cir.unary(minus, %12) nsw : !s32i, !s32i loc(#loc162)
              %14 = cir.cmp(ne, %11, %13) : !s32i, !cir.bool loc(#loc340)
              cir.if %14 {
                %15 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc164)
                %16 = cir.call @close(%15) : (!s32i) -> !s32i loc(#loc165)
              } loc(#loc341)
            } loc(#loc339)
          } loc(#loc289)
          cir.break loc(#loc166)
        } loc(#loc288)
        cir.yield loc(#loc30)
      } loc(#loc287)
    } loc(#loc287)
    cir.return loc(#loc28)
  } loc(#loc286)
  cir.func no_proto @CWE510_Trapdoor__ip_based_logic_16_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<()>> loc(#loc343)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc169)
    cir.return loc(#loc168)
  } loc(#loc342)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    cir.scope {
      cir.while {
        %0 = cir.const #cir.int<1> : !s32i loc(#loc175)
        %1 = cir.cast(int_to_bool, %0 : !s32i), !cir.bool loc(#loc175)
        cir.condition(%1) loc(#loc175)
      } do {
        cir.scope {
          cir.scope {
            %0 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc348)
            %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc349)
            %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc350)
            %3 = cir.const #cir.int<1> : !s32i loc(#loc182)
            %4 = cir.unary(minus, %3) nsw : !s32i, !s32i loc(#loc182)
            cir.store %4, %1 : !s32i, !cir.ptr<!s32i> loc(#loc349)
            %5 = cir.const #cir.int<1> : !s32i loc(#loc184)
            %6 = cir.unary(minus, %5) nsw : !s32i, !s32i loc(#loc184)
            cir.store %6, %2 : !s32i, !cir.ptr<!s32i> loc(#loc350)
            cir.scope {
              cir.do {
                cir.scope {
                  %7 = cir.const #cir.int<2> : !s32i loc(#loc189)
                  %8 = cir.const #cir.int<1> : !s32i loc(#loc190)
                  %9 = cir.const #cir.int<6> : !s32i loc(#loc191)
                  %10 = cir.call @socket(%7, %8, %9) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc192)
                  cir.store %10, %1 : !s32i, !cir.ptr<!s32i> loc(#loc353)
                  cir.scope {
                    %29 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc197)
                    %30 = cir.const #cir.int<1> : !s32i loc(#loc198)
                    %31 = cir.unary(minus, %30) nsw : !s32i, !s32i loc(#loc198)
                    %32 = cir.cmp(eq, %29, %31) : !s32i, !cir.bool loc(#loc355)
                    cir.if %32 {
                      cir.break loc(#loc200)
                    } loc(#loc356)
                  } loc(#loc354)
                  %11 = cir.cast(bitcast, %0 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc357)
                  %12 = cir.const #cir.int<0> : !s32i loc(#loc203)
                  %13 = cir.const #cir.int<16> : !u64i loc(#loc358)
                  cir.libc.memset %13 bytes from %11 set to %12 : !cir.ptr<!void>, !s32i, !u64i loc(#loc359)
                  %14 = cir.const #cir.int<2> : !s32i loc(#loc208)
                  %15 = cir.cast(integral, %14 : !s32i), !u16i loc(#loc208)
                  %16 = cir.get_member %0[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc69)
                  cir.store %15, %16 : !u16i, !cir.ptr<!u16i> loc(#loc360)
                  %17 = cir.const #cir.int<0> : !s32i loc(#loc210)
                  %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc210)
                  %19 = cir.get_member %0[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc72)
                  %20 = cir.get_member %19[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc73)
                  cir.store %18, %20 : !u32i, !cir.ptr<!u32i> loc(#loc361)
                  %21 = cir.const #cir.int<20000> : !s32i loc(#loc212)
                  %22 = cir.cast(integral, %21 : !s32i), !u16i loc(#loc212)
                  %23 = cir.call @htons(%22) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc213)
                  %24 = cir.get_member %0[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc77)
                  cir.store %23, %24 : !u16i, !cir.ptr<!u16i> loc(#loc362)
                  cir.scope {
                    %29 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc218)
                    %30 = cir.cast(bitcast, %0 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc364)
                    %31 = cir.const #cir.int<16> : !u64i loc(#loc365)
                    %32 = cir.cast(integral, %31 : !u64i), !u32i loc(#loc365)
                    %33 = cir.call @bind(%29, %30, %32) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc223)
                    %34 = cir.const #cir.int<1> : !s32i loc(#loc224)
                    %35 = cir.unary(minus, %34) nsw : !s32i, !s32i loc(#loc224)
                    %36 = cir.cmp(eq, %33, %35) : !s32i, !cir.bool loc(#loc366)
                    cir.if %36 {
                      cir.break loc(#loc226)
                    } loc(#loc367)
                  } loc(#loc363)
                  cir.scope {
                    %29 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc229)
                    %30 = cir.const #cir.int<5> : !s32i loc(#loc230)
                    %31 = cir.call @listen(%29, %30) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc231)
                    %32 = cir.const #cir.int<1> : !s32i loc(#loc232)
                    %33 = cir.unary(minus, %32) nsw : !s32i, !s32i loc(#loc232)
                    %34 = cir.cmp(eq, %31, %33) : !s32i, !cir.bool loc(#loc369)
                    cir.if %34 {
                      cir.break loc(#loc234)
                    } loc(#loc370)
                  } loc(#loc368)
                  %25 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc235)
                  %26 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc236)
                  %27 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc237)
                  %28 = cir.call @accept(%25, %26, %27) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc238)
                  cir.store %28, %2 : !s32i, !cir.ptr<!s32i> loc(#loc371)
                  cir.scope {
                    %29 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc243)
                    %30 = cir.const #cir.int<1> : !s32i loc(#loc244)
                    %31 = cir.unary(minus, %30) nsw : !s32i, !s32i loc(#loc244)
                    %32 = cir.cmp(eq, %29, %31) : !s32i, !cir.bool loc(#loc373)
                    cir.if %32 {
                      cir.break loc(#loc246)
                    } loc(#loc374)
                  } loc(#loc372)
                  cir.scope {
                    %29 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc249)
                    %30 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc250)
                    %31 = cir.cast(array_to_ptrdecay, %30 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc250)
                    %32 = cir.cast(bitcast, %31 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc250)
                    %33 = cir.const #cir.int<8> : !u64i loc(#loc376)
                    %34 = cir.const #cir.int<0> : !s32i loc(#loc253)
                    %35 = cir.call @send(%29, %32, %33, %34) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc254)
                    %36 = cir.const #cir.int<1> : !s32i loc(#loc255)
                    %37 = cir.unary(minus, %36) nsw : !s32i, !s32i loc(#loc255)
                    %38 = cir.cast(integral, %37 : !s32i), !s64i loc(#loc255)
                    %39 = cir.cmp(eq, %35, %38) : !s64i, !cir.bool loc(#loc377)
                    cir.if %39 {
                      %40 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 13>> loc(#loc257)
                      %41 = cir.cast(array_to_ptrdecay, %40 : !cir.ptr<!cir.array<!s8i x 13>>), !cir.ptr<!s8i> loc(#loc257)
                      cir.call @printLine(%41) : (!cir.ptr<!s8i>) -> () loc(#loc258)
                    } loc(#loc378)
                  } loc(#loc375)
                } loc(#loc352)
                cir.yield loc(#loc186)
              } while {
                %7 = cir.const #cir.int<0> : !s32i loc(#loc259)
                %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc259)
                cir.condition(%8) loc(#loc259)
              } loc(#loc351)
            } loc(#loc351)
            cir.scope {
              %7 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc262)
              %8 = cir.const #cir.int<1> : !s32i loc(#loc263)
              %9 = cir.unary(minus, %8) nsw : !s32i, !s32i loc(#loc263)
              %10 = cir.cmp(ne, %7, %9) : !s32i, !cir.bool loc(#loc380)
              cir.if %10 {
                %11 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc265)
                %12 = cir.call @close(%11) : (!s32i) -> !s32i loc(#loc266)
              } loc(#loc381)
            } loc(#loc379)
            cir.scope {
              %7 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc269)
              %8 = cir.const #cir.int<1> : !s32i loc(#loc270)
              %9 = cir.unary(minus, %8) nsw : !s32i, !s32i loc(#loc270)
              %10 = cir.cmp(ne, %7, %9) : !s32i, !cir.bool loc(#loc383)
              cir.if %10 {
                %11 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc272)
                %12 = cir.call @close(%11) : (!s32i) -> !s32i loc(#loc273)
              } loc(#loc384)
            } loc(#loc382)
          } loc(#loc347)
          cir.break loc(#loc274)
        } loc(#loc346)
        cir.yield loc(#loc174)
      } loc(#loc345)
    } loc(#loc345)
    cir.return loc(#loc172)
  } loc(#loc344)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE510_Trapdoor/CWE510_Trapdoor__ip_based_logic_16.c":0:0)
#loc1 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:1)
#loc2 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:62)
#loc3 = loc("/usr/include/netinet/in.h":402:1)
#loc4 = loc("/usr/include/netinet/in.h":403:40)
#loc5 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":112:1)
#loc6 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":113:6)
#loc7 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":296:1)
#loc8 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":296:39)
#loc9 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":306:1)
#loc10 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":307:38)
#loc11 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":116:1)
#loc12 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":117:33)
#loc13 = loc("/usr/include/string.h":156:1)
#loc14 = loc("/usr/include/string.h":157:33)
#loc15 = loc("CWE510_Trapdoor__ip_based_logic_16.c":90:28)
#loc16 = loc("/usr/include/arpa/inet.h":53:1)
#loc17 = loc("/usr/include/arpa/inet.h":53:46)
#loc18 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":138:1)
#loc19 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":138:74)
#loc20 = loc("CWE510_Trapdoor__ip_based_logic_16.c":92:44)
#loc21 = loc("CWE510_Trapdoor__ip_based_logic_16.c":100:44)
#loc22 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc23 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc24 = loc("CWE510_Trapdoor__ip_based_logic_16.c":102:35)
#loc25 = loc("/usr/include/unistd.h":358:1)
#loc26 = loc("/usr/include/unistd.h":358:27)
#loc27 = loc("CWE510_Trapdoor__ip_based_logic_16.c":41:1)
#loc28 = loc("CWE510_Trapdoor__ip_based_logic_16.c":124:1)
#loc29 = loc("CWE510_Trapdoor__ip_based_logic_16.c":43:5)
#loc30 = loc("CWE510_Trapdoor__ip_based_logic_16.c":123:5)
#loc31 = loc("CWE510_Trapdoor__ip_based_logic_16.c":43:11)
#loc32 = loc("CWE510_Trapdoor__ip_based_logic_16.c":44:5)
#loc33 = loc("CWE510_Trapdoor__ip_based_logic_16.c":45:9)
#loc34 = loc("CWE510_Trapdoor__ip_based_logic_16.c":121:9)
#loc35 = loc("CWE510_Trapdoor__ip_based_logic_16.c":50:13)
#loc36 = loc("CWE510_Trapdoor__ip_based_logic_16.c":50:32)
#loc37 = loc("CWE510_Trapdoor__ip_based_logic_16.c":50:41)
#loc38 = loc("CWE510_Trapdoor__ip_based_logic_16.c":51:13)
#loc39 = loc("CWE510_Trapdoor__ip_based_logic_16.c":51:56)
#loc40 = loc("CWE510_Trapdoor__ip_based_logic_16.c":52:13)
#loc41 = loc("CWE510_Trapdoor__ip_based_logic_16.c":52:35)
#loc42 = loc("CWE510_Trapdoor__ip_based_logic_16.c":53:13)
#loc43 = loc("CWE510_Trapdoor__ip_based_logic_16.c":53:35)
#loc44 = loc("CWE510_Trapdoor__ip_based_logic_16.c":51:36)
#loc45 = loc("CWE510_Trapdoor__ip_based_logic_16.c":54:13)
#loc46 = loc("CWE510_Trapdoor__ip_based_logic_16.c":106:21)
#loc47 = loc("CWE510_Trapdoor__ip_based_logic_16.c":55:13)
#loc48 = loc("CWE510_Trapdoor__ip_based_logic_16.c":105:13)
#loc49 = loc("CWE510_Trapdoor__ip_based_logic_16.c":63:39)
#loc50 = loc("CWE510_Trapdoor__ip_based_logic_16.c":63:48)
#loc51 = loc("CWE510_Trapdoor__ip_based_logic_16.c":63:61)
#loc52 = loc("CWE510_Trapdoor__ip_based_logic_16.c":63:32)
#loc53 = loc("CWE510_Trapdoor__ip_based_logic_16.c":63:17)
#loc54 = loc("CWE510_Trapdoor__ip_based_logic_16.c":63:72)
#loc55 = loc("CWE510_Trapdoor__ip_based_logic_16.c":64:17)
#loc56 = loc("CWE510_Trapdoor__ip_based_logic_16.c":67:17)
#loc57 = loc("CWE510_Trapdoor__ip_based_logic_16.c":64:21)
#loc58 = loc("CWE510_Trapdoor__ip_based_logic_16.c":64:37)
#loc59 = loc("CWE510_Trapdoor__ip_based_logic_16.c":65:17)
#loc60 = loc("CWE510_Trapdoor__ip_based_logic_16.c":66:21)
#loc61 = loc("CWE510_Trapdoor__ip_based_logic_16.c":68:24)
#loc62 = loc("CWE510_Trapdoor__ip_based_logic_16.c":68:25)
#loc63 = loc("CWE510_Trapdoor__ip_based_logic_16.c":68:34)
#loc64 = loc("CWE510_Trapdoor__ip_based_logic_16.c":68:37)
#loc65 = loc("CWE510_Trapdoor__ip_based_logic_16.c":68:51)
#loc66 = loc("CWE510_Trapdoor__ip_based_logic_16.c":68:17)
#loc67 = loc("CWE510_Trapdoor__ip_based_logic_16.c":68:52)
#loc68 = loc("CWE510_Trapdoor__ip_based_logic_16.c":69:38)
#loc69 = loc("/usr/include/netinet/in.h":249:5)
#loc70 = loc("CWE510_Trapdoor__ip_based_logic_16.c":69:17)
#loc71 = loc("CWE510_Trapdoor__ip_based_logic_16.c":70:43)
#loc72 = loc("/usr/include/netinet/in.h":251:20)
#loc73 = loc("/usr/include/netinet/in.h":33:15)
#loc74 = loc("CWE510_Trapdoor__ip_based_logic_16.c":70:17)
#loc75 = loc("CWE510_Trapdoor__ip_based_logic_16.c":71:42)
#loc76 = loc("CWE510_Trapdoor__ip_based_logic_16.c":71:36)
#loc77 = loc("/usr/include/netinet/in.h":250:15)
#loc78 = loc("CWE510_Trapdoor__ip_based_logic_16.c":71:17)
#loc79 = loc("CWE510_Trapdoor__ip_based_logic_16.c":71:47)
#loc80 = loc("CWE510_Trapdoor__ip_based_logic_16.c":72:17)
#loc81 = loc("CWE510_Trapdoor__ip_based_logic_16.c":75:17)
#loc82 = loc("CWE510_Trapdoor__ip_based_logic_16.c":72:26)
#loc83 = loc("CWE510_Trapdoor__ip_based_logic_16.c":72:58)
#loc84 = loc("CWE510_Trapdoor__ip_based_logic_16.c":72:59)
#loc85 = loc("CWE510_Trapdoor__ip_based_logic_16.c":72:68)
#loc86 = loc("CWE510_Trapdoor__ip_based_logic_16.c":72:82)
#loc87 = loc("CWE510_Trapdoor__ip_based_logic_16.c":72:21)
#loc88 = loc("CWE510_Trapdoor__ip_based_logic_16.c":72:88)
#loc89 = loc("CWE510_Trapdoor__ip_based_logic_16.c":73:17)
#loc90 = loc("CWE510_Trapdoor__ip_based_logic_16.c":74:21)
#loc91 = loc("CWE510_Trapdoor__ip_based_logic_16.c":76:17)
#loc92 = loc("CWE510_Trapdoor__ip_based_logic_16.c":79:17)
#loc93 = loc("CWE510_Trapdoor__ip_based_logic_16.c":76:28)
#loc94 = loc("CWE510_Trapdoor__ip_based_logic_16.c":76:42)
#loc95 = loc("CWE510_Trapdoor__ip_based_logic_16.c":76:21)
#loc96 = loc("CWE510_Trapdoor__ip_based_logic_16.c":76:48)
#loc97 = loc("CWE510_Trapdoor__ip_based_logic_16.c":77:17)
#loc98 = loc("CWE510_Trapdoor__ip_based_logic_16.c":78:21)
#loc99 = loc("CWE510_Trapdoor__ip_based_logic_16.c":80:39)
#loc100 = loc("CWE510_Trapdoor__ip_based_logic_16.c":80:53)
#loc101 = loc("CWE510_Trapdoor__ip_based_logic_16.c":80:59)
#loc102 = loc("CWE510_Trapdoor__ip_based_logic_16.c":80:32)
#loc103 = loc("CWE510_Trapdoor__ip_based_logic_16.c":80:17)
#loc104 = loc("CWE510_Trapdoor__ip_based_logic_16.c":80:63)
#loc105 = loc("CWE510_Trapdoor__ip_based_logic_16.c":81:17)
#loc106 = loc("CWE510_Trapdoor__ip_based_logic_16.c":84:17)
#loc107 = loc("CWE510_Trapdoor__ip_based_logic_16.c":81:21)
#loc108 = loc("CWE510_Trapdoor__ip_based_logic_16.c":81:37)
#loc109 = loc("CWE510_Trapdoor__ip_based_logic_16.c":82:17)
#loc110 = loc("CWE510_Trapdoor__ip_based_logic_16.c":83:21)
#loc111 = loc("CWE510_Trapdoor__ip_based_logic_16.c":85:17)
#loc112 = loc("CWE510_Trapdoor__ip_based_logic_16.c":88:17)
#loc113 = loc("CWE510_Trapdoor__ip_based_logic_16.c":85:33)
#loc114 = loc("CWE510_Trapdoor__ip_based_logic_16.c":85:66)
#loc115 = loc("CWE510_Trapdoor__ip_based_logic_16.c":85:67)
#loc116 = loc("CWE510_Trapdoor__ip_based_logic_16.c":85:82)
#loc117 = loc("CWE510_Trapdoor__ip_based_logic_16.c":85:83)
#loc118 = loc("CWE510_Trapdoor__ip_based_logic_16.c":85:21)
#loc119 = loc("CWE510_Trapdoor__ip_based_logic_16.c":85:105)
#loc120 = loc("CWE510_Trapdoor__ip_based_logic_16.c":85:104)
#loc121 = loc("CWE510_Trapdoor__ip_based_logic_16.c":86:17)
#loc122 = loc("CWE510_Trapdoor__ip_based_logic_16.c":87:21)
#loc123 = loc("CWE510_Trapdoor__ip_based_logic_16.c":90:17)
#loc124 = loc("CWE510_Trapdoor__ip_based_logic_16.c":104:17)
#loc125 = loc("CWE510_Trapdoor__ip_based_logic_16.c":90:21)
#loc126 = loc("CWE510_Trapdoor__ip_based_logic_16.c":90:46)
#loc127 = loc("CWE510_Trapdoor__ip_based_logic_16.c":90:84)
#loc128 = loc("CWE510_Trapdoor__ip_based_logic_16.c":91:17)
#loc129 = loc("CWE510_Trapdoor__ip_based_logic_16.c":97:17)
#loc130 = loc("CWE510_Trapdoor__ip_based_logic_16.c":99:17)
#loc131 = loc("CWE510_Trapdoor__ip_based_logic_16.c":92:21)
#loc132 = loc("CWE510_Trapdoor__ip_based_logic_16.c":96:21)
#loc133 = loc("CWE510_Trapdoor__ip_based_logic_16.c":92:30)
#loc134 = loc("CWE510_Trapdoor__ip_based_logic_16.c":92:59)
#loc135 = loc("CWE510_Trapdoor__ip_based_logic_16.c":92:79)
#loc136 = loc("CWE510_Trapdoor__ip_based_logic_16.c":92:82)
#loc137 = loc("CWE510_Trapdoor__ip_based_logic_16.c":92:25)
#loc138 = loc("CWE510_Trapdoor__ip_based_logic_16.c":92:89)
#loc139 = loc("CWE510_Trapdoor__ip_based_logic_16.c":93:21)
#loc140 = loc("CWE510_Trapdoor__ip_based_logic_16.c":95:25)
#loc141 = loc("CWE510_Trapdoor__ip_based_logic_16.c":100:21)
#loc142 = loc("CWE510_Trapdoor__ip_based_logic_16.c":103:21)
#loc143 = loc("CWE510_Trapdoor__ip_based_logic_16.c":100:30)
#loc144 = loc("CWE510_Trapdoor__ip_based_logic_16.c":100:61)
#loc145 = loc("CWE510_Trapdoor__ip_based_logic_16.c":100:83)
#loc146 = loc("CWE510_Trapdoor__ip_based_logic_16.c":100:86)
#loc147 = loc("CWE510_Trapdoor__ip_based_logic_16.c":100:25)
#loc148 = loc("CWE510_Trapdoor__ip_based_logic_16.c":100:92)
#loc149 = loc("CWE510_Trapdoor__ip_based_logic_16.c":101:21)
#loc150 = loc("CWE510_Trapdoor__ip_based_logic_16.c":102:25)
#loc151 = loc("CWE510_Trapdoor__ip_based_logic_16.c":106:20)
#loc152 = loc("CWE510_Trapdoor__ip_based_logic_16.c":107:13)
#loc153 = loc("CWE510_Trapdoor__ip_based_logic_16.c":110:13)
#loc154 = loc("CWE510_Trapdoor__ip_based_logic_16.c":107:17)
#loc155 = loc("CWE510_Trapdoor__ip_based_logic_16.c":107:33)
#loc156 = loc("CWE510_Trapdoor__ip_based_logic_16.c":108:13)
#loc157 = loc("CWE510_Trapdoor__ip_based_logic_16.c":109:30)
#loc158 = loc("CWE510_Trapdoor__ip_based_logic_16.c":109:17)
#loc159 = loc("CWE510_Trapdoor__ip_based_logic_16.c":111:13)
#loc160 = loc("CWE510_Trapdoor__ip_based_logic_16.c":114:13)
#loc161 = loc("CWE510_Trapdoor__ip_based_logic_16.c":111:17)
#loc162 = loc("CWE510_Trapdoor__ip_based_logic_16.c":111:33)
#loc163 = loc("CWE510_Trapdoor__ip_based_logic_16.c":112:13)
#loc164 = loc("CWE510_Trapdoor__ip_based_logic_16.c":113:30)
#loc165 = loc("CWE510_Trapdoor__ip_based_logic_16.c":113:17)
#loc166 = loc("CWE510_Trapdoor__ip_based_logic_16.c":122:9)
#loc167 = loc("CWE510_Trapdoor__ip_based_logic_16.c":200:1)
#loc168 = loc("CWE510_Trapdoor__ip_based_logic_16.c":203:1)
#loc169 = loc("CWE510_Trapdoor__ip_based_logic_16.c":202:5)
#loc170 = loc("CWE510_Trapdoor__ip_based_logic_16.c":202:11)
#loc171 = loc("CWE510_Trapdoor__ip_based_logic_16.c":131:1)
#loc172 = loc("CWE510_Trapdoor__ip_based_logic_16.c":198:1)
#loc173 = loc("CWE510_Trapdoor__ip_based_logic_16.c":133:5)
#loc174 = loc("CWE510_Trapdoor__ip_based_logic_16.c":197:5)
#loc175 = loc("CWE510_Trapdoor__ip_based_logic_16.c":133:11)
#loc176 = loc("CWE510_Trapdoor__ip_based_logic_16.c":134:5)
#loc177 = loc("CWE510_Trapdoor__ip_based_logic_16.c":135:9)
#loc178 = loc("CWE510_Trapdoor__ip_based_logic_16.c":195:9)
#loc179 = loc("CWE510_Trapdoor__ip_based_logic_16.c":140:13)
#loc180 = loc("CWE510_Trapdoor__ip_based_logic_16.c":140:32)
#loc181 = loc("CWE510_Trapdoor__ip_based_logic_16.c":141:13)
#loc182 = loc("CWE510_Trapdoor__ip_based_logic_16.c":141:35)
#loc183 = loc("CWE510_Trapdoor__ip_based_logic_16.c":142:13)
#loc184 = loc("CWE510_Trapdoor__ip_based_logic_16.c":142:35)
#loc185 = loc("CWE510_Trapdoor__ip_based_logic_16.c":143:13)
#loc186 = loc("CWE510_Trapdoor__ip_based_logic_16.c":180:21)
#loc187 = loc("CWE510_Trapdoor__ip_based_logic_16.c":144:13)
#loc188 = loc("CWE510_Trapdoor__ip_based_logic_16.c":179:13)
#loc189 = loc("CWE510_Trapdoor__ip_based_logic_16.c":152:39)
#loc190 = loc("CWE510_Trapdoor__ip_based_logic_16.c":152:48)
#loc191 = loc("CWE510_Trapdoor__ip_based_logic_16.c":152:61)
#loc192 = loc("CWE510_Trapdoor__ip_based_logic_16.c":152:32)
#loc193 = loc("CWE510_Trapdoor__ip_based_logic_16.c":152:17)
#loc194 = loc("CWE510_Trapdoor__ip_based_logic_16.c":152:72)
#loc195 = loc("CWE510_Trapdoor__ip_based_logic_16.c":153:17)
#loc196 = loc("CWE510_Trapdoor__ip_based_logic_16.c":156:17)
#loc197 = loc("CWE510_Trapdoor__ip_based_logic_16.c":153:21)
#loc198 = loc("CWE510_Trapdoor__ip_based_logic_16.c":153:37)
#loc199 = loc("CWE510_Trapdoor__ip_based_logic_16.c":154:17)
#loc200 = loc("CWE510_Trapdoor__ip_based_logic_16.c":155:21)
#loc201 = loc("CWE510_Trapdoor__ip_based_logic_16.c":157:24)
#loc202 = loc("CWE510_Trapdoor__ip_based_logic_16.c":157:25)
#loc203 = loc("CWE510_Trapdoor__ip_based_logic_16.c":157:34)
#loc204 = loc("CWE510_Trapdoor__ip_based_logic_16.c":157:37)
#loc205 = loc("CWE510_Trapdoor__ip_based_logic_16.c":157:51)
#loc206 = loc("CWE510_Trapdoor__ip_based_logic_16.c":157:17)
#loc207 = loc("CWE510_Trapdoor__ip_based_logic_16.c":157:52)
#loc208 = loc("CWE510_Trapdoor__ip_based_logic_16.c":158:38)
#loc209 = loc("CWE510_Trapdoor__ip_based_logic_16.c":158:17)
#loc210 = loc("CWE510_Trapdoor__ip_based_logic_16.c":159:43)
#loc211 = loc("CWE510_Trapdoor__ip_based_logic_16.c":159:17)
#loc212 = loc("CWE510_Trapdoor__ip_based_logic_16.c":160:42)
#loc213 = loc("CWE510_Trapdoor__ip_based_logic_16.c":160:36)
#loc214 = loc("CWE510_Trapdoor__ip_based_logic_16.c":160:17)
#loc215 = loc("CWE510_Trapdoor__ip_based_logic_16.c":160:47)
#loc216 = loc("CWE510_Trapdoor__ip_based_logic_16.c":161:17)
#loc217 = loc("CWE510_Trapdoor__ip_based_logic_16.c":164:17)
#loc218 = loc("CWE510_Trapdoor__ip_based_logic_16.c":161:26)
#loc219 = loc("CWE510_Trapdoor__ip_based_logic_16.c":161:58)
#loc220 = loc("CWE510_Trapdoor__ip_based_logic_16.c":161:59)
#loc221 = loc("CWE510_Trapdoor__ip_based_logic_16.c":161:68)
#loc222 = loc("CWE510_Trapdoor__ip_based_logic_16.c":161:82)
#loc223 = loc("CWE510_Trapdoor__ip_based_logic_16.c":161:21)
#loc224 = loc("CWE510_Trapdoor__ip_based_logic_16.c":161:88)
#loc225 = loc("CWE510_Trapdoor__ip_based_logic_16.c":162:17)
#loc226 = loc("CWE510_Trapdoor__ip_based_logic_16.c":163:21)
#loc227 = loc("CWE510_Trapdoor__ip_based_logic_16.c":165:17)
#loc228 = loc("CWE510_Trapdoor__ip_based_logic_16.c":168:17)
#loc229 = loc("CWE510_Trapdoor__ip_based_logic_16.c":165:28)
#loc230 = loc("CWE510_Trapdoor__ip_based_logic_16.c":165:42)
#loc231 = loc("CWE510_Trapdoor__ip_based_logic_16.c":165:21)
#loc232 = loc("CWE510_Trapdoor__ip_based_logic_16.c":165:48)
#loc233 = loc("CWE510_Trapdoor__ip_based_logic_16.c":166:17)
#loc234 = loc("CWE510_Trapdoor__ip_based_logic_16.c":167:21)
#loc235 = loc("CWE510_Trapdoor__ip_based_logic_16.c":169:39)
#loc236 = loc("CWE510_Trapdoor__ip_based_logic_16.c":169:53)
#loc237 = loc("CWE510_Trapdoor__ip_based_logic_16.c":169:59)
#loc238 = loc("CWE510_Trapdoor__ip_based_logic_16.c":169:32)
#loc239 = loc("CWE510_Trapdoor__ip_based_logic_16.c":169:17)
#loc240 = loc("CWE510_Trapdoor__ip_based_logic_16.c":169:63)
#loc241 = loc("CWE510_Trapdoor__ip_based_logic_16.c":170:17)
#loc242 = loc("CWE510_Trapdoor__ip_based_logic_16.c":173:17)
#loc243 = loc("CWE510_Trapdoor__ip_based_logic_16.c":170:21)
#loc244 = loc("CWE510_Trapdoor__ip_based_logic_16.c":170:37)
#loc245 = loc("CWE510_Trapdoor__ip_based_logic_16.c":171:17)
#loc246 = loc("CWE510_Trapdoor__ip_based_logic_16.c":172:21)
#loc247 = loc("CWE510_Trapdoor__ip_based_logic_16.c":175:17)
#loc248 = loc("CWE510_Trapdoor__ip_based_logic_16.c":178:17)
#loc249 = loc("CWE510_Trapdoor__ip_based_logic_16.c":175:26)
#loc250 = loc("CWE510_Trapdoor__ip_based_logic_16.c":175:40)
#loc251 = loc("CWE510_Trapdoor__ip_based_logic_16.c":175:57)
#loc252 = loc("CWE510_Trapdoor__ip_based_logic_16.c":175:79)
#loc253 = loc("CWE510_Trapdoor__ip_based_logic_16.c":175:82)
#loc254 = loc("CWE510_Trapdoor__ip_based_logic_16.c":175:21)
#loc255 = loc("CWE510_Trapdoor__ip_based_logic_16.c":175:88)
#loc256 = loc("CWE510_Trapdoor__ip_based_logic_16.c":176:17)
#loc257 = loc("CWE510_Trapdoor__ip_based_logic_16.c":177:31)
#loc258 = loc("CWE510_Trapdoor__ip_based_logic_16.c":177:21)
#loc259 = loc("CWE510_Trapdoor__ip_based_logic_16.c":180:20)
#loc260 = loc("CWE510_Trapdoor__ip_based_logic_16.c":181:13)
#loc261 = loc("CWE510_Trapdoor__ip_based_logic_16.c":184:13)
#loc262 = loc("CWE510_Trapdoor__ip_based_logic_16.c":181:17)
#loc263 = loc("CWE510_Trapdoor__ip_based_logic_16.c":181:33)
#loc264 = loc("CWE510_Trapdoor__ip_based_logic_16.c":182:13)
#loc265 = loc("CWE510_Trapdoor__ip_based_logic_16.c":183:30)
#loc266 = loc("CWE510_Trapdoor__ip_based_logic_16.c":183:17)
#loc267 = loc("CWE510_Trapdoor__ip_based_logic_16.c":185:13)
#loc268 = loc("CWE510_Trapdoor__ip_based_logic_16.c":188:13)
#loc269 = loc("CWE510_Trapdoor__ip_based_logic_16.c":185:17)
#loc270 = loc("CWE510_Trapdoor__ip_based_logic_16.c":185:33)
#loc271 = loc("CWE510_Trapdoor__ip_based_logic_16.c":186:13)
#loc272 = loc("CWE510_Trapdoor__ip_based_logic_16.c":187:30)
#loc273 = loc("CWE510_Trapdoor__ip_based_logic_16.c":187:17)
#loc274 = loc("CWE510_Trapdoor__ip_based_logic_16.c":196:9)
#loc275 = loc(fused[#loc1, #loc2])
#loc276 = loc(fused[#loc3, #loc4])
#loc277 = loc(fused[#loc5, #loc6])
#loc278 = loc(fused[#loc7, #loc8])
#loc279 = loc(fused[#loc9, #loc10])
#loc280 = loc(fused[#loc11, #loc12])
#loc281 = loc(fused[#loc13, #loc14])
#loc282 = loc(fused[#loc16, #loc17])
#loc283 = loc(fused[#loc18, #loc19])
#loc284 = loc(fused[#loc22, #loc23])
#loc285 = loc(fused[#loc25, #loc26])
#loc286 = loc(fused[#loc27, #loc28])
#loc287 = loc(fused[#loc29, #loc30])
#loc288 = loc(fused[#loc32, #loc30])
#loc289 = loc(fused[#loc33, #loc34])
#loc290 = loc(fused[#loc35, #loc36])
#loc291 = loc(fused[#loc35, #loc37])
#loc292 = loc(fused[#loc38, #loc39])
#loc293 = loc(fused[#loc40, #loc41])
#loc294 = loc(fused[#loc42, #loc43])
#loc295 = loc(fused[#loc44, #loc39])
#loc296 = loc(fused[#loc45, #loc46])
#loc297 = loc(fused[#loc47, #loc48])
#loc298 = loc(fused[#loc53, #loc54])
#loc299 = loc(fused[#loc55, #loc56])
#loc300 = loc(fused[#loc57, #loc58])
#loc301 = loc(fused[#loc59, #loc56])
#loc302 = loc(fused[#loc61, #loc62])
#loc303 = loc(fused[#loc64, #loc65])
#loc304 = loc(fused[#loc66, #loc67])
#loc305 = loc(fused[#loc70, #loc68])
#loc306 = loc(fused[#loc74, #loc71])
#loc307 = loc(fused[#loc78, #loc79])
#loc308 = loc(fused[#loc80, #loc81])
#loc309 = loc(fused[#loc83, #loc84])
#loc310 = loc(fused[#loc85, #loc86])
#loc311 = loc(fused[#loc87, #loc88])
#loc312 = loc(fused[#loc89, #loc81])
#loc313 = loc(fused[#loc91, #loc92])
#loc314 = loc(fused[#loc95, #loc96])
#loc315 = loc(fused[#loc97, #loc92])
#loc316 = loc(fused[#loc103, #loc104])
#loc317 = loc(fused[#loc105, #loc106])
#loc318 = loc(fused[#loc107, #loc108])
#loc319 = loc(fused[#loc109, #loc106])
#loc320 = loc(fused[#loc111, #loc112])
#loc321 = loc(fused[#loc114, #loc115])
#loc322 = loc(fused[#loc116, #loc117])
#loc323 = loc(fused[#loc118, #loc119])
#loc324 = loc(fused[#loc121, #loc112])
#loc325 = loc(fused[#loc123, #loc124])
#loc326 = loc(fused[#loc125, #loc127])
#loc327 = loc(fused[#loc128, #loc129, #loc130, #loc124])
#loc328 = loc(fused[#loc131, #loc132])
#loc329 = loc(fused[#loc134, #loc135])
#loc330 = loc(fused[#loc137, #loc138])
#loc331 = loc(fused[#loc139, #loc132])
#loc332 = loc(fused[#loc141, #loc142])
#loc333 = loc(fused[#loc144, #loc145])
#loc334 = loc(fused[#loc147, #loc148])
#loc335 = loc(fused[#loc149, #loc142])
#loc336 = loc(fused[#loc152, #loc153])
#loc337 = loc(fused[#loc154, #loc155])
#loc338 = loc(fused[#loc156, #loc153])
#loc339 = loc(fused[#loc159, #loc160])
#loc340 = loc(fused[#loc161, #loc162])
#loc341 = loc(fused[#loc163, #loc160])
#loc342 = loc(fused[#loc167, #loc168])
#loc343 = loc(fused[#loc169, #loc170])
#loc344 = loc(fused[#loc171, #loc172])
#loc345 = loc(fused[#loc173, #loc174])
#loc346 = loc(fused[#loc176, #loc174])
#loc347 = loc(fused[#loc177, #loc178])
#loc348 = loc(fused[#loc179, #loc180])
#loc349 = loc(fused[#loc181, #loc182])
#loc350 = loc(fused[#loc183, #loc184])
#loc351 = loc(fused[#loc185, #loc186])
#loc352 = loc(fused[#loc187, #loc188])
#loc353 = loc(fused[#loc193, #loc194])
#loc354 = loc(fused[#loc195, #loc196])
#loc355 = loc(fused[#loc197, #loc198])
#loc356 = loc(fused[#loc199, #loc196])
#loc357 = loc(fused[#loc201, #loc202])
#loc358 = loc(fused[#loc204, #loc205])
#loc359 = loc(fused[#loc206, #loc207])
#loc360 = loc(fused[#loc209, #loc208])
#loc361 = loc(fused[#loc211, #loc210])
#loc362 = loc(fused[#loc214, #loc215])
#loc363 = loc(fused[#loc216, #loc217])
#loc364 = loc(fused[#loc219, #loc220])
#loc365 = loc(fused[#loc221, #loc222])
#loc366 = loc(fused[#loc223, #loc224])
#loc367 = loc(fused[#loc225, #loc217])
#loc368 = loc(fused[#loc227, #loc228])
#loc369 = loc(fused[#loc231, #loc232])
#loc370 = loc(fused[#loc233, #loc228])
#loc371 = loc(fused[#loc239, #loc240])
#loc372 = loc(fused[#loc241, #loc242])
#loc373 = loc(fused[#loc243, #loc244])
#loc374 = loc(fused[#loc245, #loc242])
#loc375 = loc(fused[#loc247, #loc248])
#loc376 = loc(fused[#loc251, #loc252])
#loc377 = loc(fused[#loc254, #loc255])
#loc378 = loc(fused[#loc256, #loc248])
#loc379 = loc(fused[#loc260, #loc261])
#loc380 = loc(fused[#loc262, #loc263])
#loc381 = loc(fused[#loc264, #loc261])
#loc382 = loc(fused[#loc267, #loc268])
#loc383 = loc(fused[#loc269, #loc270])
#loc384 = loc(fused[#loc271, #loc268])
