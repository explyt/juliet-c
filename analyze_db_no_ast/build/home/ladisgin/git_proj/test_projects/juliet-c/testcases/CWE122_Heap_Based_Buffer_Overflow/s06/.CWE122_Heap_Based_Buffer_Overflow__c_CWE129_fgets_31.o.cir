!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.struct<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.struct<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.struct<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#true = #cir.bool<true> : !cir.bool
!ty__IO_FILE = !cir.struct<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @fgets(!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc300)
  cir.global "private"  external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc301)
  cir.func private  @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc302)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc303)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"fgets() failed.\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc9)
  cir.func private  @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc304)
  cir.func private  @exit(!s32i) extra(#fn_attr) loc(#loc305)
  cir.func private  @printIntLine(!s32i) loc(#loc306)
  cir.global "private"  constant internal dsolocal @".str1" = #cir.const_array<"ERROR: Array index is negative.\00" : !cir.array<!s8i x 32>> : !cir.array<!s8i x 32> {alignment = 1 : i64} loc(#loc16)
  cir.func private  @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc307)
  cir.func no_proto  @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc309)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc23)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc24)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc310)
    cir.scope {
      %3 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc312)
      %4 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc312)
      cir.store %4, %3 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc312)
      cir.scope {
        %5 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc32)
        %6 = cir.const #cir.int<3> : !s32i loc(#loc33)
        %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc33)
        %8 = cir.const #cir.int<4> : !u64i loc(#loc33)
        %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc33)
        %10 = cir.const #cir.int<2> : !s32i loc(#loc33)
        %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc33)
        %12 = cir.binop(add, %9, %11) : !u64i loc(#loc33)
        %13 = cir.cast(integral, %12 : !u64i), !s32i loc(#loc33)
        %14 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc301)
        %15 = cir.load %14 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc34)
        %16 = cir.call @fgets(%5, %13, %15) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc35)
        %17 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc36)
        %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc36)
        %19 = cir.cmp(ne, %16, %18) : !cir.ptr<!s8i>, !s32i loc(#loc314)
        %20 = cir.cast(int_to_bool, %19 : !s32i), !cir.bool loc(#loc37)
        cir.if %20 {
          %21 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc41)
          %22 = cir.call @atoi(%21) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc42)
          cir.store %22, %0 : !s32i, !cir.ptr<!s32i> loc(#loc316)
        } else {
          %21 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc9)
          %22 = cir.cast(array_to_ptrdecay, %21 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc9)
          cir.call @printLine(%22) : (!cir.ptr<!s8i>) -> () loc(#loc45)
        } loc(#loc315)
      } loc(#loc313)
    } loc(#loc311)
    cir.scope {
      %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["dataCopy", init] {alignment = 4 : i64} loc(#loc318)
      %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc319)
      %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc49)
      cir.store %5, %3 : !s32i, !cir.ptr<!s32i> loc(#loc318)
      %6 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc51)
      cir.store %6, %4 : !s32i, !cir.ptr<!s32i> loc(#loc319)
      cir.scope {
        %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc321)
        %8 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc322)
        %9 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc58)
        %10 = cir.const #cir.int<10> : !s32i loc(#loc59)
        %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc59)
        %12 = cir.const #cir.int<4> : !u64i loc(#loc323)
        %13 = cir.binop(mul, %11, %12) : !u64i loc(#loc324)
        %14 = cir.call @malloc(%13) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc58)
        %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc325)
        cir.store %15, %8 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc322)
        cir.scope {
          %19 = cir.load %8 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc64)
          %20 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc65)
          %21 = cir.cast(bitcast, %20 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc65)
          %22 = cir.cmp(eq, %19, %21) : !cir.ptr<!s32i>, !s32i loc(#loc327)
          %23 = cir.cast(int_to_bool, %22 : !s32i), !cir.bool loc(#loc66)
          cir.if %23 {
            %24 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc68)
            %25 = cir.const #cir.int<1> : !s32i loc(#loc69)
            %26 = cir.unary(minus, %25) : !s32i, !s32i loc(#loc70)
            cir.call @exit(%26) : (!s32i) -> () extra(#fn_attr) loc(#loc68)
          } loc(#loc328)
        } loc(#loc326)
        cir.scope {
          %19 = cir.const #cir.int<0> : !s32i loc(#loc73)
          cir.store %19, %7 : !s32i, !cir.ptr<!s32i> loc(#loc330)
          cir.for : cond {
            %20 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc75)
            %21 = cir.const #cir.int<10> : !s32i loc(#loc76)
            %22 = cir.cmp(lt, %20, %21) : !s32i, !s32i loc(#loc331)
            %23 = cir.cast(int_to_bool, %22 : !s32i), !cir.bool loc(#loc77)
            cir.condition(%23) loc(#loc77)
          } body {
            cir.scope {
              %20 = cir.const #cir.int<0> : !s32i loc(#loc79)
              %21 = cir.load %8 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc80)
              %22 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc81)
              %23 = cir.ptr_stride(%21 : !cir.ptr<!s32i>, %22 : !s32i), !cir.ptr<!s32i> loc(#loc82)
              cir.store %20, %23 : !s32i, !cir.ptr<!s32i> loc(#loc333)
            } loc(#loc332)
            cir.yield loc(#loc72)
          } step {
            %20 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc83)
            %21 = cir.unary(inc, %20) : !s32i, !s32i loc(#loc84)
            cir.store %21, %7 : !s32i, !cir.ptr<!s32i> loc(#loc334)
            cir.yield loc(#loc329)
          } loc(#loc329)
        } loc(#loc329)
        cir.scope {
          %19 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc87)
          %20 = cir.const #cir.int<0> : !s32i loc(#loc88)
          %21 = cir.cmp(ge, %19, %20) : !s32i, !s32i loc(#loc336)
          %22 = cir.cast(int_to_bool, %21 : !s32i), !cir.bool loc(#loc89)
          cir.if %22 {
            %23 = cir.const #cir.int<1> : !s32i loc(#loc93)
            %24 = cir.load %8 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc94)
            %25 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc95)
            %26 = cir.ptr_stride(%24 : !cir.ptr<!s32i>, %25 : !s32i), !cir.ptr<!s32i> loc(#loc96)
            cir.store %23, %26 : !s32i, !cir.ptr<!s32i> loc(#loc338)
            cir.scope {
              %27 = cir.const #cir.int<0> : !s32i loc(#loc99)
              cir.store %27, %7 : !s32i, !cir.ptr<!s32i> loc(#loc340)
              cir.for : cond {
                %28 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc101)
                %29 = cir.const #cir.int<10> : !s32i loc(#loc102)
                %30 = cir.cmp(lt, %28, %29) : !s32i, !s32i loc(#loc341)
                %31 = cir.cast(int_to_bool, %30 : !s32i), !cir.bool loc(#loc103)
                cir.condition(%31) loc(#loc103)
              } body {
                cir.scope {
                  %28 = cir.load %8 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc105)
                  %29 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc106)
                  %30 = cir.ptr_stride(%28 : !cir.ptr<!s32i>, %29 : !s32i), !cir.ptr<!s32i> loc(#loc107)
                  %31 = cir.load %30 : !cir.ptr<!s32i>, !s32i loc(#loc105)
                  cir.call @printIntLine(%31) : (!s32i) -> () loc(#loc108)
                } loc(#loc342)
                cir.yield loc(#loc98)
              } step {
                %28 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc109)
                %29 = cir.unary(inc, %28) : !s32i, !s32i loc(#loc110)
                cir.store %29, %7 : !s32i, !cir.ptr<!s32i> loc(#loc343)
                cir.yield loc(#loc339)
              } loc(#loc339)
            } loc(#loc339)
          } else {
            %23 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc16)
            %24 = cir.cast(array_to_ptrdecay, %23 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc16)
            cir.call @printLine(%24) : (!cir.ptr<!s8i>) -> () loc(#loc111)
          } loc(#loc337)
        } loc(#loc335)
        %16 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc112)
        %17 = cir.load %8 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc113)
        %18 = cir.cast(bitcast, %17 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc113)
        cir.call @free(%18) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc112)
      } loc(#loc320)
    } loc(#loc317)
    cir.return loc(#loc20)
  } loc(#loc308)
  cir.func no_proto  @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc345)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc116)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc346)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc118)
    cir.return loc(#loc115)
  } loc(#loc344)
  cir.func no_proto internal private  @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc348)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc124)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc125)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc349)
    %3 = cir.const #cir.int<7> : !s32i loc(#loc127)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc350)
    cir.scope {
      %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["dataCopy", init] {alignment = 4 : i64} loc(#loc352)
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc353)
      %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc132)
      cir.store %6, %4 : !s32i, !cir.ptr<!s32i> loc(#loc352)
      %7 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc134)
      cir.store %7, %5 : !s32i, !cir.ptr<!s32i> loc(#loc353)
      cir.scope {
        %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc355)
        %9 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc356)
        %10 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc141)
        %11 = cir.const #cir.int<10> : !s32i loc(#loc142)
        %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc142)
        %13 = cir.const #cir.int<4> : !u64i loc(#loc357)
        %14 = cir.binop(mul, %12, %13) : !u64i loc(#loc358)
        %15 = cir.call @malloc(%14) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc141)
        %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc359)
        cir.store %16, %9 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc356)
        cir.scope {
          %20 = cir.load %9 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc147)
          %21 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc148)
          %22 = cir.cast(bitcast, %21 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc148)
          %23 = cir.cmp(eq, %20, %22) : !cir.ptr<!s32i>, !s32i loc(#loc361)
          %24 = cir.cast(int_to_bool, %23 : !s32i), !cir.bool loc(#loc149)
          cir.if %24 {
            %25 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc151)
            %26 = cir.const #cir.int<1> : !s32i loc(#loc152)
            %27 = cir.unary(minus, %26) : !s32i, !s32i loc(#loc153)
            cir.call @exit(%27) : (!s32i) -> () extra(#fn_attr) loc(#loc151)
          } loc(#loc362)
        } loc(#loc360)
        cir.scope {
          %20 = cir.const #cir.int<0> : !s32i loc(#loc156)
          cir.store %20, %8 : !s32i, !cir.ptr<!s32i> loc(#loc364)
          cir.for : cond {
            %21 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc158)
            %22 = cir.const #cir.int<10> : !s32i loc(#loc159)
            %23 = cir.cmp(lt, %21, %22) : !s32i, !s32i loc(#loc365)
            %24 = cir.cast(int_to_bool, %23 : !s32i), !cir.bool loc(#loc160)
            cir.condition(%24) loc(#loc160)
          } body {
            cir.scope {
              %21 = cir.const #cir.int<0> : !s32i loc(#loc162)
              %22 = cir.load %9 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc163)
              %23 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc164)
              %24 = cir.ptr_stride(%22 : !cir.ptr<!s32i>, %23 : !s32i), !cir.ptr<!s32i> loc(#loc165)
              cir.store %21, %24 : !s32i, !cir.ptr<!s32i> loc(#loc367)
            } loc(#loc366)
            cir.yield loc(#loc155)
          } step {
            %21 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc166)
            %22 = cir.unary(inc, %21) : !s32i, !s32i loc(#loc167)
            cir.store %22, %8 : !s32i, !cir.ptr<!s32i> loc(#loc368)
            cir.yield loc(#loc363)
          } loc(#loc363)
        } loc(#loc363)
        cir.scope {
          %20 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc170)
          %21 = cir.const #cir.int<0> : !s32i loc(#loc171)
          %22 = cir.cmp(ge, %20, %21) : !s32i, !s32i loc(#loc370)
          %23 = cir.cast(int_to_bool, %22 : !s32i), !cir.bool loc(#loc172)
          cir.if %23 {
            %24 = cir.const #cir.int<1> : !s32i loc(#loc176)
            %25 = cir.load %9 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc177)
            %26 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc178)
            %27 = cir.ptr_stride(%25 : !cir.ptr<!s32i>, %26 : !s32i), !cir.ptr<!s32i> loc(#loc179)
            cir.store %24, %27 : !s32i, !cir.ptr<!s32i> loc(#loc372)
            cir.scope {
              %28 = cir.const #cir.int<0> : !s32i loc(#loc182)
              cir.store %28, %8 : !s32i, !cir.ptr<!s32i> loc(#loc374)
              cir.for : cond {
                %29 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc184)
                %30 = cir.const #cir.int<10> : !s32i loc(#loc185)
                %31 = cir.cmp(lt, %29, %30) : !s32i, !s32i loc(#loc375)
                %32 = cir.cast(int_to_bool, %31 : !s32i), !cir.bool loc(#loc186)
                cir.condition(%32) loc(#loc186)
              } body {
                cir.scope {
                  %29 = cir.load %9 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc188)
                  %30 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc189)
                  %31 = cir.ptr_stride(%29 : !cir.ptr<!s32i>, %30 : !s32i), !cir.ptr<!s32i> loc(#loc190)
                  %32 = cir.load %31 : !cir.ptr<!s32i>, !s32i loc(#loc188)
                  cir.call @printIntLine(%32) : (!s32i) -> () loc(#loc191)
                } loc(#loc376)
                cir.yield loc(#loc181)
              } step {
                %29 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc192)
                %30 = cir.unary(inc, %29) : !s32i, !s32i loc(#loc193)
                cir.store %30, %8 : !s32i, !cir.ptr<!s32i> loc(#loc377)
                cir.yield loc(#loc373)
              } loc(#loc373)
            } loc(#loc373)
          } else {
            %24 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc194)
            %25 = cir.cast(array_to_ptrdecay, %24 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc194)
            cir.call @printLine(%25) : (!cir.ptr<!s8i>) -> () loc(#loc195)
          } loc(#loc371)
        } loc(#loc369)
        %17 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc196)
        %18 = cir.load %9 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc197)
        %19 = cir.cast(bitcast, %18 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc197)
        cir.call @free(%19) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc196)
      } loc(#loc354)
    } loc(#loc351)
    cir.return loc(#loc121)
  } loc(#loc347)
  cir.global "private"  constant internal dsolocal @".str2" = #cir.const_array<"ERROR: Array index is out-of-bounds\00" : !cir.array<!s8i x 36>> : !cir.array<!s8i x 36> {alignment = 1 : i64} loc(#loc198)
  cir.func no_proto internal private  @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc379)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc203)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc204)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc380)
    cir.scope {
      %3 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc382)
      %4 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc382)
      cir.store %4, %3 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc382)
      cir.scope {
        %5 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc212)
        %6 = cir.const #cir.int<3> : !s32i loc(#loc213)
        %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc213)
        %8 = cir.const #cir.int<4> : !u64i loc(#loc213)
        %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc213)
        %10 = cir.const #cir.int<2> : !s32i loc(#loc213)
        %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc213)
        %12 = cir.binop(add, %9, %11) : !u64i loc(#loc213)
        %13 = cir.cast(integral, %12 : !u64i), !s32i loc(#loc213)
        %14 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc301)
        %15 = cir.load %14 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc214)
        %16 = cir.call @fgets(%5, %13, %15) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc215)
        %17 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc216)
        %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc216)
        %19 = cir.cmp(ne, %16, %18) : !cir.ptr<!s8i>, !s32i loc(#loc384)
        %20 = cir.cast(int_to_bool, %19 : !s32i), !cir.bool loc(#loc217)
        cir.if %20 {
          %21 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc221)
          %22 = cir.call @atoi(%21) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc222)
          cir.store %22, %0 : !s32i, !cir.ptr<!s32i> loc(#loc386)
        } else {
          %21 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc225)
          %22 = cir.cast(array_to_ptrdecay, %21 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc225)
          cir.call @printLine(%22) : (!cir.ptr<!s8i>) -> () loc(#loc226)
        } loc(#loc385)
      } loc(#loc383)
    } loc(#loc381)
    cir.scope {
      %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["dataCopy", init] {alignment = 4 : i64} loc(#loc388)
      %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc389)
      %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc230)
      cir.store %5, %3 : !s32i, !cir.ptr<!s32i> loc(#loc388)
      %6 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc232)
      cir.store %6, %4 : !s32i, !cir.ptr<!s32i> loc(#loc389)
      cir.scope {
        %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc391)
        %8 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc392)
        %9 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc239)
        %10 = cir.const #cir.int<10> : !s32i loc(#loc240)
        %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc240)
        %12 = cir.const #cir.int<4> : !u64i loc(#loc393)
        %13 = cir.binop(mul, %11, %12) : !u64i loc(#loc394)
        %14 = cir.call @malloc(%13) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc239)
        %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc395)
        cir.store %15, %8 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc392)
        cir.scope {
          %19 = cir.load %8 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc245)
          %20 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc246)
          %21 = cir.cast(bitcast, %20 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc246)
          %22 = cir.cmp(eq, %19, %21) : !cir.ptr<!s32i>, !s32i loc(#loc397)
          %23 = cir.cast(int_to_bool, %22 : !s32i), !cir.bool loc(#loc247)
          cir.if %23 {
            %24 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc249)
            %25 = cir.const #cir.int<1> : !s32i loc(#loc250)
            %26 = cir.unary(minus, %25) : !s32i, !s32i loc(#loc251)
            cir.call @exit(%26) : (!s32i) -> () extra(#fn_attr) loc(#loc249)
          } loc(#loc398)
        } loc(#loc396)
        cir.scope {
          %19 = cir.const #cir.int<0> : !s32i loc(#loc254)
          cir.store %19, %7 : !s32i, !cir.ptr<!s32i> loc(#loc400)
          cir.for : cond {
            %20 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc256)
            %21 = cir.const #cir.int<10> : !s32i loc(#loc257)
            %22 = cir.cmp(lt, %20, %21) : !s32i, !s32i loc(#loc401)
            %23 = cir.cast(int_to_bool, %22 : !s32i), !cir.bool loc(#loc258)
            cir.condition(%23) loc(#loc258)
          } body {
            cir.scope {
              %20 = cir.const #cir.int<0> : !s32i loc(#loc260)
              %21 = cir.load %8 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc261)
              %22 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc262)
              %23 = cir.ptr_stride(%21 : !cir.ptr<!s32i>, %22 : !s32i), !cir.ptr<!s32i> loc(#loc263)
              cir.store %20, %23 : !s32i, !cir.ptr<!s32i> loc(#loc403)
            } loc(#loc402)
            cir.yield loc(#loc253)
          } step {
            %20 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc264)
            %21 = cir.unary(inc, %20) : !s32i, !s32i loc(#loc265)
            cir.store %21, %7 : !s32i, !cir.ptr<!s32i> loc(#loc404)
            cir.yield loc(#loc399)
          } loc(#loc399)
        } loc(#loc399)
        cir.scope {
          %19 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc268)
          %20 = cir.const #cir.int<0> : !s32i loc(#loc269)
          %21 = cir.cmp(ge, %19, %20) : !s32i, !s32i loc(#loc406)
          %22 = cir.cast(int_to_bool, %21 : !s32i), !cir.bool loc(#loc270)
          %23 = cir.ternary(%22, true {
            %24 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc272)
            %25 = cir.const #cir.int<10> : !s32i loc(#loc273)
            %26 = cir.cmp(lt, %24, %25) : !s32i, !s32i loc(#loc407)
            %27 = cir.cast(int_to_bool, %26 : !s32i), !cir.bool loc(#loc275)
            %28 = cir.ternary(%27, true {
              %29 = cir.const #true loc(#loc271)
              cir.yield %29 : !cir.bool loc(#loc271)
            }, false {
              %29 = cir.const #false loc(#loc271)
              cir.yield %29 : !cir.bool loc(#loc271)
            }) : (!cir.bool) -> !cir.bool loc(#loc271)
            cir.yield %28 : !cir.bool loc(#loc271)
          }, false {
            %24 = cir.const #false loc(#loc271)
            cir.yield %24 : !cir.bool loc(#loc271)
          }) : (!cir.bool) -> !cir.bool loc(#loc271)
          cir.if %23 {
            %24 = cir.const #cir.int<1> : !s32i loc(#loc279)
            %25 = cir.load %8 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc280)
            %26 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc281)
            %27 = cir.ptr_stride(%25 : !cir.ptr<!s32i>, %26 : !s32i), !cir.ptr<!s32i> loc(#loc282)
            cir.store %24, %27 : !s32i, !cir.ptr<!s32i> loc(#loc409)
            cir.scope {
              %28 = cir.const #cir.int<0> : !s32i loc(#loc285)
              cir.store %28, %7 : !s32i, !cir.ptr<!s32i> loc(#loc411)
              cir.for : cond {
                %29 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc287)
                %30 = cir.const #cir.int<10> : !s32i loc(#loc288)
                %31 = cir.cmp(lt, %29, %30) : !s32i, !s32i loc(#loc412)
                %32 = cir.cast(int_to_bool, %31 : !s32i), !cir.bool loc(#loc289)
                cir.condition(%32) loc(#loc289)
              } body {
                cir.scope {
                  %29 = cir.load %8 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc291)
                  %30 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc292)
                  %31 = cir.ptr_stride(%29 : !cir.ptr<!s32i>, %30 : !s32i), !cir.ptr<!s32i> loc(#loc293)
                  %32 = cir.load %31 : !cir.ptr<!s32i>, !s32i loc(#loc291)
                  cir.call @printIntLine(%32) : (!s32i) -> () loc(#loc294)
                } loc(#loc413)
                cir.yield loc(#loc284)
              } step {
                %29 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc295)
                %30 = cir.unary(inc, %29) : !s32i, !s32i loc(#loc296)
                cir.store %30, %7 : !s32i, !cir.ptr<!s32i> loc(#loc414)
                cir.yield loc(#loc410)
              } loc(#loc410)
            } loc(#loc410)
          } else {
            %24 = cir.get_global @".str2" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc198)
            %25 = cir.cast(array_to_ptrdecay, %24 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc198)
            cir.call @printLine(%25) : (!cir.ptr<!s8i>) -> () loc(#loc297)
          } loc(#loc408)
        } loc(#loc405)
        %16 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc298)
        %17 = cir.load %8 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc299)
        %18 = cir.cast(bitcast, %17 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc299)
        cir.call @free(%18) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc298)
      } loc(#loc390)
    } loc(#loc387)
    cir.return loc(#loc200)
  } loc(#loc378)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":0:0)
#loc1 = loc("/usr/include/stdio.h":654:1)
#loc2 = loc("/usr/include/stdio.h":655:59)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("/usr/include/stdlib.h":105:1)
#loc6 = loc("/usr/include/stdlib.h":106:33)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":39:23)
#loc10 = loc("/usr/include/stdlib.h":672:1)
#loc11 = loc("/usr/include/stdlib.h":672:45)
#loc12 = loc("/usr/include/stdlib.h":756:1)
#loc13 = loc("/usr/include/stdlib.h":756:70)
#loc14 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc15 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":67:27)
#loc17 = loc("/usr/include/stdlib.h":687:1)
#loc18 = loc("/usr/include/stdlib.h":687:32)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":24:1)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":72:1)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":26:5)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":26:9)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":28:13)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":28:12)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":28:5)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":29:5)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":41:5)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":30:9)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":30:45)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":32:9)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":40:9)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":32:19)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":32:32)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":32:49)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":32:13)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":32:59)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":32:56)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":33:9)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":36:9)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":38:9)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":35:25)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":35:20)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":35:13)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":35:36)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":39:13)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":42:5)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":71:5)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":43:9)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":43:24)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":44:9)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":44:20)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":45:9)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":70:9)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":46:13)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":46:17)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":47:13)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":47:58)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":47:35)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":47:42)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":47:47)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":47:57)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":48:13)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":48:43)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":48:17)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":48:27)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":48:24)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":48:33)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":48:34)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":48:40)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":48:39)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":50:13)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":53:13)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":50:22)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":50:18)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":50:25)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":50:29)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":50:27)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":51:13)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":52:29)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":52:17)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":52:24)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":52:25)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":50:34)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":50:33)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":56:13)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":68:13)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":56:17)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":56:25)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":56:22)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":57:13)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":64:13)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":66:13)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":58:32)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":58:17)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":58:24)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":58:28)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":60:17)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":63:17)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":60:25)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":60:21)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":60:28)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":60:32)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":60:30)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":61:17)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":62:34)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":62:41)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":62:42)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":62:21)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":60:37)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":60:36)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":67:17)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":69:13)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":69:18)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":169:1)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":173:1)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":171:5)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":171:13)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":172:5)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":172:13)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":79:1)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":117:1)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":81:5)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":81:9)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":83:13)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":83:12)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":83:5)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":86:12)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":86:5)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":87:5)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":116:5)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":88:9)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":88:24)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":89:9)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":89:20)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":90:9)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":115:9)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":91:13)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":91:17)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":92:13)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":92:58)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":92:35)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":92:42)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":92:47)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":92:57)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":93:13)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":93:43)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":93:17)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":93:27)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":93:24)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":93:33)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":93:34)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":93:40)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":93:39)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":95:13)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":98:13)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":95:22)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":95:18)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":95:25)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":95:29)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":95:27)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":96:13)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":97:29)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":97:17)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":97:24)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":97:25)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":95:34)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":95:33)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":101:13)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":113:13)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":101:17)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":101:25)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":101:22)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":102:13)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":109:13)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":111:13)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":103:32)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":103:17)
#loc178 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":103:24)
#loc179 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":103:28)
#loc180 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":105:17)
#loc181 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":108:17)
#loc182 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":105:25)
#loc183 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":105:21)
#loc184 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":105:28)
#loc185 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":105:32)
#loc186 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":105:30)
#loc187 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":106:17)
#loc188 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":107:34)
#loc189 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":107:41)
#loc190 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":107:42)
#loc191 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":107:21)
#loc192 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":105:37)
#loc193 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":105:36)
#loc194 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":112:27)
#loc195 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":112:17)
#loc196 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":114:13)
#loc197 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":114:18)
#loc198 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":162:27)
#loc199 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":120:1)
#loc200 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":167:1)
#loc201 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":122:5)
#loc202 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":122:9)
#loc203 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":124:13)
#loc204 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":124:12)
#loc205 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":124:5)
#loc206 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":125:5)
#loc207 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":137:5)
#loc208 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":126:9)
#loc209 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":126:45)
#loc210 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":128:9)
#loc211 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":136:9)
#loc212 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":128:19)
#loc213 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":128:32)
#loc214 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":128:49)
#loc215 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":128:13)
#loc216 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":128:59)
#loc217 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":128:56)
#loc218 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":129:9)
#loc219 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":132:9)
#loc220 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":134:9)
#loc221 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":131:25)
#loc222 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":131:20)
#loc223 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":131:13)
#loc224 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":131:36)
#loc225 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":135:23)
#loc226 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":135:13)
#loc227 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":138:5)
#loc228 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":166:5)
#loc229 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":139:9)
#loc230 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":139:24)
#loc231 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":140:9)
#loc232 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":140:20)
#loc233 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":141:9)
#loc234 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":165:9)
#loc235 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":142:13)
#loc236 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":142:17)
#loc237 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":143:13)
#loc238 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":143:58)
#loc239 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":143:35)
#loc240 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":143:42)
#loc241 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":143:47)
#loc242 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":143:57)
#loc243 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":144:13)
#loc244 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":144:43)
#loc245 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":144:17)
#loc246 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":144:27)
#loc247 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":144:24)
#loc248 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":144:33)
#loc249 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":144:34)
#loc250 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":144:40)
#loc251 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":144:39)
#loc252 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":146:13)
#loc253 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":149:13)
#loc254 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":146:22)
#loc255 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":146:18)
#loc256 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":146:25)
#loc257 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":146:29)
#loc258 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":146:27)
#loc259 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":147:13)
#loc260 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":148:29)
#loc261 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":148:17)
#loc262 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":148:24)
#loc263 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":148:25)
#loc264 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":146:34)
#loc265 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":146:33)
#loc266 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":151:13)
#loc267 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":163:13)
#loc268 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":151:17)
#loc269 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":151:25)
#loc270 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":151:22)
#loc271 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":151:27)
#loc272 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":151:30)
#loc273 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":151:38)
#loc274 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":151:40)
#loc275 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":151:35)
#loc276 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":152:13)
#loc277 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":159:13)
#loc278 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":161:13)
#loc279 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":153:32)
#loc280 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":153:17)
#loc281 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":153:24)
#loc282 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":153:28)
#loc283 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":155:17)
#loc284 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":158:17)
#loc285 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":155:25)
#loc286 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":155:21)
#loc287 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":155:28)
#loc288 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":155:32)
#loc289 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":155:30)
#loc290 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":156:17)
#loc291 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":157:34)
#loc292 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":157:41)
#loc293 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":157:42)
#loc294 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":157:21)
#loc295 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":155:37)
#loc296 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":155:36)
#loc297 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":162:17)
#loc298 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":164:13)
#loc299 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c":164:18)
#loc300 = loc(fused[#loc1, #loc2])
#loc301 = loc(fused[#loc3, #loc4])
#loc302 = loc(fused[#loc5, #loc6])
#loc303 = loc(fused[#loc7, #loc8])
#loc304 = loc(fused[#loc10, #loc11])
#loc305 = loc(fused[#loc12, #loc13])
#loc306 = loc(fused[#loc14, #loc15])
#loc307 = loc(fused[#loc17, #loc18])
#loc308 = loc(fused[#loc19, #loc20])
#loc309 = loc(fused[#loc21, #loc22])
#loc310 = loc(fused[#loc25, #loc23])
#loc311 = loc(fused[#loc26, #loc27])
#loc312 = loc(fused[#loc28, #loc29])
#loc313 = loc(fused[#loc30, #loc31])
#loc314 = loc(fused[#loc35, #loc36])
#loc315 = loc(fused[#loc38, #loc39, #loc40, #loc31])
#loc316 = loc(fused[#loc43, #loc44])
#loc317 = loc(fused[#loc46, #loc47])
#loc318 = loc(fused[#loc48, #loc49])
#loc319 = loc(fused[#loc50, #loc51])
#loc320 = loc(fused[#loc52, #loc53])
#loc321 = loc(fused[#loc54, #loc55])
#loc322 = loc(fused[#loc56, #loc57])
#loc323 = loc(fused[#loc60, #loc61])
#loc324 = loc(fused[#loc59, #loc61])
#loc325 = loc(fused[#loc58, #loc57])
#loc326 = loc(fused[#loc62, #loc63])
#loc327 = loc(fused[#loc64, #loc65])
#loc328 = loc(fused[#loc67, #loc63])
#loc329 = loc(fused[#loc71, #loc72])
#loc330 = loc(fused[#loc74, #loc73])
#loc331 = loc(fused[#loc75, #loc76])
#loc332 = loc(fused[#loc78, #loc72])
#loc333 = loc(fused[#loc80, #loc79])
#loc334 = loc(fused[#loc84, #loc83])
#loc335 = loc(fused[#loc85, #loc86])
#loc336 = loc(fused[#loc87, #loc88])
#loc337 = loc(fused[#loc90, #loc91, #loc92, #loc86])
#loc338 = loc(fused[#loc94, #loc93])
#loc339 = loc(fused[#loc97, #loc98])
#loc340 = loc(fused[#loc100, #loc99])
#loc341 = loc(fused[#loc101, #loc102])
#loc342 = loc(fused[#loc104, #loc98])
#loc343 = loc(fused[#loc110, #loc109])
#loc344 = loc(fused[#loc114, #loc115])
#loc345 = loc(fused[#loc116, #loc117])
#loc346 = loc(fused[#loc118, #loc119])
#loc347 = loc(fused[#loc120, #loc121])
#loc348 = loc(fused[#loc122, #loc123])
#loc349 = loc(fused[#loc126, #loc124])
#loc350 = loc(fused[#loc128, #loc127])
#loc351 = loc(fused[#loc129, #loc130])
#loc352 = loc(fused[#loc131, #loc132])
#loc353 = loc(fused[#loc133, #loc134])
#loc354 = loc(fused[#loc135, #loc136])
#loc355 = loc(fused[#loc137, #loc138])
#loc356 = loc(fused[#loc139, #loc140])
#loc357 = loc(fused[#loc143, #loc144])
#loc358 = loc(fused[#loc142, #loc144])
#loc359 = loc(fused[#loc141, #loc140])
#loc360 = loc(fused[#loc145, #loc146])
#loc361 = loc(fused[#loc147, #loc148])
#loc362 = loc(fused[#loc150, #loc146])
#loc363 = loc(fused[#loc154, #loc155])
#loc364 = loc(fused[#loc157, #loc156])
#loc365 = loc(fused[#loc158, #loc159])
#loc366 = loc(fused[#loc161, #loc155])
#loc367 = loc(fused[#loc163, #loc162])
#loc368 = loc(fused[#loc167, #loc166])
#loc369 = loc(fused[#loc168, #loc169])
#loc370 = loc(fused[#loc170, #loc171])
#loc371 = loc(fused[#loc173, #loc174, #loc175, #loc169])
#loc372 = loc(fused[#loc177, #loc176])
#loc373 = loc(fused[#loc180, #loc181])
#loc374 = loc(fused[#loc183, #loc182])
#loc375 = loc(fused[#loc184, #loc185])
#loc376 = loc(fused[#loc187, #loc181])
#loc377 = loc(fused[#loc193, #loc192])
#loc378 = loc(fused[#loc199, #loc200])
#loc379 = loc(fused[#loc201, #loc202])
#loc380 = loc(fused[#loc205, #loc203])
#loc381 = loc(fused[#loc206, #loc207])
#loc382 = loc(fused[#loc208, #loc209])
#loc383 = loc(fused[#loc210, #loc211])
#loc384 = loc(fused[#loc215, #loc216])
#loc385 = loc(fused[#loc218, #loc219, #loc220, #loc211])
#loc386 = loc(fused[#loc223, #loc224])
#loc387 = loc(fused[#loc227, #loc228])
#loc388 = loc(fused[#loc229, #loc230])
#loc389 = loc(fused[#loc231, #loc232])
#loc390 = loc(fused[#loc233, #loc234])
#loc391 = loc(fused[#loc235, #loc236])
#loc392 = loc(fused[#loc237, #loc238])
#loc393 = loc(fused[#loc241, #loc242])
#loc394 = loc(fused[#loc240, #loc242])
#loc395 = loc(fused[#loc239, #loc238])
#loc396 = loc(fused[#loc243, #loc244])
#loc397 = loc(fused[#loc245, #loc246])
#loc398 = loc(fused[#loc248, #loc244])
#loc399 = loc(fused[#loc252, #loc253])
#loc400 = loc(fused[#loc255, #loc254])
#loc401 = loc(fused[#loc256, #loc257])
#loc402 = loc(fused[#loc259, #loc253])
#loc403 = loc(fused[#loc261, #loc260])
#loc404 = loc(fused[#loc265, #loc264])
#loc405 = loc(fused[#loc266, #loc267])
#loc406 = loc(fused[#loc268, #loc269])
#loc407 = loc(fused[#loc272, #loc274])
#loc408 = loc(fused[#loc276, #loc277, #loc278, #loc267])
#loc409 = loc(fused[#loc280, #loc279])
#loc410 = loc(fused[#loc283, #loc284])
#loc411 = loc(fused[#loc286, #loc285])
#loc412 = loc(fused[#loc287, #loc288])
#loc413 = loc(fused[#loc290, #loc284])
#loc414 = loc(fused[#loc296, #loc295])
