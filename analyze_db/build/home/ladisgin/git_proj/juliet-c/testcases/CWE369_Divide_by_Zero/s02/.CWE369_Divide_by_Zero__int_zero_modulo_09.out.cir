!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc47 = loc("CWE369_Divide_by_Zero__int_zero_modulo_09.c":156:10)
#loc48 = loc("CWE369_Divide_by_Zero__int_zero_modulo_09.c":156:14)
#loc49 = loc("CWE369_Divide_by_Zero__int_zero_modulo_09.c":156:20)
#loc50 = loc("CWE369_Divide_by_Zero__int_zero_modulo_09.c":156:32)
#loc193 = loc(fused[#loc47, #loc48])
#loc194 = loc(fused[#loc49, #loc50])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE369_Divide_by_Zero/s02/CWE369_Divide_by_Zero__int_zero_modulo_09.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f64 = dense<64> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.global "private" constant external @GLOBAL_CONST_TRUE : !s32i {alignment = 4 : i64} loc(#loc173)
  cir.func private @printIntLine(!s32i) loc(#loc174)
  cir.func no_proto @CWE369_Divide_by_Zero__int_zero_modulo_09_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc176)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc9)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc10)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc177)
    cir.br ^bb1 loc(#loc178)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @GLOBAL_CONST_TRUE : !cir.ptr<!s32i> loc(#loc173)
    %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc14)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc14)
    cir.brcond %5 ^bb2, ^bb3 loc(#loc179)
  ^bb2:  // pred: ^bb1
    %6 = cir.const #cir.int<0> : !s32i loc(#loc16)
    cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc180)
    cir.br ^bb3 loc(#loc13)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc13)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc181)
  ^bb5:  // pred: ^bb4
    %7 = cir.get_global @GLOBAL_CONST_TRUE : !cir.ptr<!s32i> loc(#loc173)
    %8 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc20)
    %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc20)
    cir.brcond %9 ^bb6, ^bb7 loc(#loc182)
  ^bb6:  // pred: ^bb5
    %10 = cir.const #cir.int<100> : !s32i loc(#loc22)
    %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc23)
    %12 = cir.binop(rem, %10, %11) : !s32i loc(#loc183)
    cir.call @printIntLine(%12) : (!s32i) -> () loc(#loc24)
    cir.br ^bb7 loc(#loc19)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc19)
  ^bb8:  // pred: ^bb7
    cir.return loc(#loc6)
  } loc(#loc175)
  cir.func no_proto @CWE369_Divide_by_Zero__int_zero_modulo_09_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc185)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc27)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc186)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc29)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc187)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc31)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc188)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc33)
    cir.return loc(#loc26)
  } loc(#loc184)
  cir.func private @srand(!u32i) extra(#fn_attr1) loc(#loc189)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc190)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc191)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc41)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc42)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc43)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc44)
  cir.func @main(%arg0: !s32i loc(fused[#loc47, #loc48]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc49, #loc50])) -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc193)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc194)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc46)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc51)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc51)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc52)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc53)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc53)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr1) loc(#loc54)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc41)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc41)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc55)
    %8 = cir.get_global @CWE369_Divide_by_Zero__int_zero_modulo_09_good : !cir.ptr<!cir.func<!void ()>> loc(#loc195)
    cir.call @CWE369_Divide_by_Zero__int_zero_modulo_09_good() : () -> () loc(#loc56)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc42)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc42)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc58)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc43)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc43)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc59)
    %13 = cir.get_global @CWE369_Divide_by_Zero__int_zero_modulo_09_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc196)
    cir.call @CWE369_Divide_by_Zero__int_zero_modulo_09_bad() : () -> () loc(#loc60)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc44)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc44)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc62)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc63)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc197)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc197)
    cir.return %17 : !s32i loc(#loc197)
  } loc(#loc192)
  cir.global "private" constant external @GLOBAL_CONST_FALSE : !s32i {alignment = 4 : i64} loc(#loc198)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc67)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"This would result in a divide by zero\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc68)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc200)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc73)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc74)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc201)
    cir.br ^bb1 loc(#loc202)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @GLOBAL_CONST_TRUE : !cir.ptr<!s32i> loc(#loc173)
    %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc78)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc78)
    cir.brcond %5 ^bb2, ^bb3 loc(#loc203)
  ^bb2:  // pred: ^bb1
    %6 = cir.const #cir.int<0> : !s32i loc(#loc80)
    cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc204)
    cir.br ^bb3 loc(#loc77)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc77)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc205)
  ^bb5:  // pred: ^bb4
    %7 = cir.get_global @GLOBAL_CONST_FALSE : !cir.ptr<!s32i> loc(#loc198)
    %8 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc84)
    %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc84)
    cir.brcond %9 ^bb6, ^bb7 loc(#loc206)
  ^bb6:  // pred: ^bb5
    %10 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc67)
    %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc67)
    cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc88)
    cir.br ^bb13 loc(#loc86)
  ^bb7:  // pred: ^bb5
    cir.br ^bb8 loc(#loc207)
  ^bb8:  // pred: ^bb7
    %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc91)
    %13 = cir.const #cir.int<0> : !s32i loc(#loc92)
    %14 = cir.cmp(ne, %12, %13) : !s32i, !cir.bool loc(#loc208)
    cir.brcond %14 ^bb9, ^bb10 loc(#loc209)
  ^bb9:  // pred: ^bb8
    %15 = cir.const #cir.int<100> : !s32i loc(#loc96)
    %16 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc97)
    %17 = cir.binop(rem, %15, %16) : !s32i loc(#loc210)
    cir.call @printIntLine(%17) : (!s32i) -> () loc(#loc98)
    cir.br ^bb11 loc(#loc94)
  ^bb10:  // pred: ^bb8
    %18 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc68)
    %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc68)
    cir.call @printLine(%19) : (!cir.ptr<!s8i>) -> () loc(#loc99)
    cir.br ^bb11 loc(#loc90)
  ^bb11:  // 2 preds: ^bb9, ^bb10
    cir.br ^bb12 loc(#loc90)
  ^bb12:  // pred: ^bb11
    cir.br ^bb13 loc(#loc83)
  ^bb13:  // 2 preds: ^bb6, ^bb12
    cir.br ^bb14 loc(#loc83)
  ^bb14:  // pred: ^bb13
    cir.return loc(#loc70)
  } loc(#loc199)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc212)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc104)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc105)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc213)
    cir.br ^bb1 loc(#loc214)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @GLOBAL_CONST_TRUE : !cir.ptr<!s32i> loc(#loc173)
    %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc109)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc109)
    cir.brcond %5 ^bb2, ^bb3 loc(#loc215)
  ^bb2:  // pred: ^bb1
    %6 = cir.const #cir.int<0> : !s32i loc(#loc111)
    cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc216)
    cir.br ^bb3 loc(#loc108)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc108)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc217)
  ^bb5:  // pred: ^bb4
    %7 = cir.get_global @GLOBAL_CONST_TRUE : !cir.ptr<!s32i> loc(#loc173)
    %8 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc115)
    %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc115)
    cir.brcond %9 ^bb6, ^bb12 loc(#loc218)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc219)
  ^bb7:  // pred: ^bb6
    %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc119)
    %11 = cir.const #cir.int<0> : !s32i loc(#loc120)
    %12 = cir.cmp(ne, %10, %11) : !s32i, !cir.bool loc(#loc220)
    cir.brcond %12 ^bb8, ^bb9 loc(#loc221)
  ^bb8:  // pred: ^bb7
    %13 = cir.const #cir.int<100> : !s32i loc(#loc124)
    %14 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc125)
    %15 = cir.binop(rem, %13, %14) : !s32i loc(#loc222)
    cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc126)
    cir.br ^bb10 loc(#loc122)
  ^bb9:  // pred: ^bb7
    %16 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc127)
    %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc127)
    cir.call @printLine(%17) : (!cir.ptr<!s8i>) -> () loc(#loc128)
    cir.br ^bb10 loc(#loc118)
  ^bb10:  // 2 preds: ^bb8, ^bb9
    cir.br ^bb11 loc(#loc118)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc114)
  ^bb12:  // 2 preds: ^bb5, ^bb11
    cir.br ^bb13 loc(#loc114)
  ^bb13:  // pred: ^bb12
    cir.return loc(#loc101)
  } loc(#loc211)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc224)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc133)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc134)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc225)
    cir.br ^bb1 loc(#loc226)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @GLOBAL_CONST_FALSE : !cir.ptr<!s32i> loc(#loc198)
    %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc138)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc138)
    cir.brcond %5 ^bb2, ^bb3 loc(#loc227)
  ^bb2:  // pred: ^bb1
    %6 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc142)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc142)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc143)
    cir.br ^bb4 loc(#loc140)
  ^bb3:  // pred: ^bb1
    %8 = cir.const #cir.int<7> : !s32i loc(#loc144)
    cir.store %8, %0 : !s32i, !cir.ptr<!s32i> loc(#loc228)
    cir.br ^bb4 loc(#loc137)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc137)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc229)
  ^bb6:  // pred: ^bb5
    %9 = cir.get_global @GLOBAL_CONST_TRUE : !cir.ptr<!s32i> loc(#loc173)
    %10 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc148)
    %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc148)
    cir.brcond %11 ^bb7, ^bb8 loc(#loc230)
  ^bb7:  // pred: ^bb6
    %12 = cir.const #cir.int<100> : !s32i loc(#loc150)
    %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc151)
    %14 = cir.binop(rem, %12, %13) : !s32i loc(#loc231)
    cir.call @printIntLine(%14) : (!s32i) -> () loc(#loc152)
    cir.br ^bb8 loc(#loc147)
  ^bb8:  // 2 preds: ^bb6, ^bb7
    cir.br ^bb9 loc(#loc147)
  ^bb9:  // pred: ^bb8
    cir.return loc(#loc130)
  } loc(#loc223)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc233)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc157)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc158)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc234)
    cir.br ^bb1 loc(#loc235)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @GLOBAL_CONST_TRUE : !cir.ptr<!s32i> loc(#loc173)
    %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc162)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc162)
    cir.brcond %5 ^bb2, ^bb3 loc(#loc236)
  ^bb2:  // pred: ^bb1
    %6 = cir.const #cir.int<7> : !s32i loc(#loc164)
    cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc237)
    cir.br ^bb3 loc(#loc161)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc161)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc238)
  ^bb5:  // pred: ^bb4
    %7 = cir.get_global @GLOBAL_CONST_TRUE : !cir.ptr<!s32i> loc(#loc173)
    %8 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc168)
    %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc168)
    cir.brcond %9 ^bb6, ^bb7 loc(#loc239)
  ^bb6:  // pred: ^bb5
    %10 = cir.const #cir.int<100> : !s32i loc(#loc170)
    %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc171)
    %12 = cir.binop(rem, %10, %11) : !s32i loc(#loc240)
    cir.call @printIntLine(%12) : (!s32i) -> () loc(#loc172)
    cir.br ^bb7 loc(#loc167)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc167)
  ^bb8:  // pred: ^bb7
    cir.return loc(#loc154)
  } loc(#loc232)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE369_Divide_by_Zero/s02/CWE369_Divide_by_Zero__int_zero_modulo_09.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase.h":109:1)
#loc2 = loc("../../../testcasesupport/std_testcase.h":109:18)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc5 = loc("CWE369_Divide_by_Zero__int_zero_modulo_09.c":22:1)
#loc6 = loc("CWE369_Divide_by_Zero__int_zero_modulo_09.c":37:1)
#loc7 = loc("CWE369_Divide_by_Zero__int_zero_modulo_09.c":24:5)
#loc8 = loc("CWE369_Divide_by_Zero__int_zero_modulo_09.c":24:9)
#loc9 = loc("CWE369_Divide_by_Zero__int_zero_modulo_09.c":26:13)
#loc10 = loc("CWE369_Divide_by_Zero__int_zero_modulo_09.c":26:12)
#loc11 = loc("CWE369_Divide_by_Zero__int_zero_modulo_09.c":26:5)
#loc12 = loc("CWE369_Divide_by_Zero__int_zero_modulo_09.c":27:5)
#loc13 = loc("CWE369_Divide_by_Zero__int_zero_modulo_09.c":31:5)
#loc14 = loc("CWE369_Divide_by_Zero__int_zero_modulo_09.c":27:8)
#loc15 = loc("CWE369_Divide_by_Zero__int_zero_modulo_09.c":28:5)
#loc16 = loc("CWE369_Divide_by_Zero__int_zero_modulo_09.c":30:16)
#loc17 = loc("CWE369_Divide_by_Zero__int_zero_modulo_09.c":30:9)
#loc18 = loc("CWE369_Divide_by_Zero__int_zero_modulo_09.c":32:5)
#loc19 = loc("CWE369_Divide_by_Zero__int_zero_modulo_09.c":36:5)
#loc20 = loc("CWE369_Divide_by_Zero__int_zero_modulo_09.c":32:8)
#loc21 = loc("CWE369_Divide_by_Zero__int_zero_modulo_09.c":33:5)
#loc22 = loc("CWE369_Divide_by_Zero__int_zero_modulo_09.c":35:22)
#loc23 = loc("CWE369_Divide_by_Zero__int_zero_modulo_09.c":35:28)
#loc24 = loc("CWE369_Divide_by_Zero__int_zero_modulo_09.c":35:9)
#loc25 = loc("CWE369_Divide_by_Zero__int_zero_modulo_09.c":139:1)
#loc26 = loc("CWE369_Divide_by_Zero__int_zero_modulo_09.c":145:1)
#loc27 = loc("CWE369_Divide_by_Zero__int_zero_modulo_09.c":141:5)
#loc28 = loc("CWE369_Divide_by_Zero__int_zero_modulo_09.c":141:14)
#loc29 = loc("CWE369_Divide_by_Zero__int_zero_modulo_09.c":142:5)
#loc30 = loc("CWE369_Divide_by_Zero__int_zero_modulo_09.c":142:14)
#loc31 = loc("CWE369_Divide_by_Zero__int_zero_modulo_09.c":143:5)
#loc32 = loc("CWE369_Divide_by_Zero__int_zero_modulo_09.c":143:14)
#loc33 = loc("CWE369_Divide_by_Zero__int_zero_modulo_09.c":144:5)
#loc34 = loc("CWE369_Divide_by_Zero__int_zero_modulo_09.c":144:14)
#loc35 = loc("/usr/include/stdlib.h":575:1)
#loc36 = loc("/usr/include/stdlib.h":575:41)
#loc37 = loc("/usr/include/time.h":76:1)
#loc38 = loc("/usr/include/time.h":76:38)
#loc39 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc40 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc41 = loc("CWE369_Divide_by_Zero__int_zero_modulo_09.c":161:15)
#loc42 = loc("CWE369_Divide_by_Zero__int_zero_modulo_09.c":163:15)
#loc43 = loc("CWE369_Divide_by_Zero__int_zero_modulo_09.c":166:15)
#loc44 = loc("CWE369_Divide_by_Zero__int_zero_modulo_09.c":168:15)
#loc45 = loc("CWE369_Divide_by_Zero__int_zero_modulo_09.c":156:1)
#loc46 = loc("CWE369_Divide_by_Zero__int_zero_modulo_09.c":171:1)
#loc51 = loc("CWE369_Divide_by_Zero__int_zero_modulo_09.c":157:1)
#loc52 = loc("CWE369_Divide_by_Zero__int_zero_modulo_09.c":159:27)
#loc53 = loc("CWE369_Divide_by_Zero__int_zero_modulo_09.c":159:22)
#loc54 = loc("CWE369_Divide_by_Zero__int_zero_modulo_09.c":159:5)
#loc55 = loc("CWE369_Divide_by_Zero__int_zero_modulo_09.c":161:5)
#loc56 = loc("CWE369_Divide_by_Zero__int_zero_modulo_09.c":162:5)
#loc57 = loc("CWE369_Divide_by_Zero__int_zero_modulo_09.c":162:52)
#loc58 = loc("CWE369_Divide_by_Zero__int_zero_modulo_09.c":163:5)
#loc59 = loc("CWE369_Divide_by_Zero__int_zero_modulo_09.c":166:5)
#loc60 = loc("CWE369_Divide_by_Zero__int_zero_modulo_09.c":167:5)
#loc61 = loc("CWE369_Divide_by_Zero__int_zero_modulo_09.c":167:51)
#loc62 = loc("CWE369_Divide_by_Zero__int_zero_modulo_09.c":168:5)
#loc63 = loc("CWE369_Divide_by_Zero__int_zero_modulo_09.c":170:12)
#loc64 = loc("CWE369_Divide_by_Zero__int_zero_modulo_09.c":170:5)
#loc65 = loc("../../../testcasesupport/std_testcase.h":110:1)
#loc66 = loc("../../../testcasesupport/std_testcase.h":110:18)
#loc67 = loc("CWE369_Divide_by_Zero__int_zero_modulo_09.c":57:19)
#loc68 = loc("CWE369_Divide_by_Zero__int_zero_modulo_09.c":68:23)
#loc69 = loc("CWE369_Divide_by_Zero__int_zero_modulo_09.c":44:1)
#loc70 = loc("CWE369_Divide_by_Zero__int_zero_modulo_09.c":71:1)
#loc71 = loc("CWE369_Divide_by_Zero__int_zero_modulo_09.c":46:5)
#loc72 = loc("CWE369_Divide_by_Zero__int_zero_modulo_09.c":46:9)
#loc73 = loc("CWE369_Divide_by_Zero__int_zero_modulo_09.c":48:13)
#loc74 = loc("CWE369_Divide_by_Zero__int_zero_modulo_09.c":48:12)
#loc75 = loc("CWE369_Divide_by_Zero__int_zero_modulo_09.c":48:5)
#loc76 = loc("CWE369_Divide_by_Zero__int_zero_modulo_09.c":49:5)
#loc77 = loc("CWE369_Divide_by_Zero__int_zero_modulo_09.c":53:5)
#loc78 = loc("CWE369_Divide_by_Zero__int_zero_modulo_09.c":49:8)
#loc79 = loc("CWE369_Divide_by_Zero__int_zero_modulo_09.c":50:5)
#loc80 = loc("CWE369_Divide_by_Zero__int_zero_modulo_09.c":52:16)
#loc81 = loc("CWE369_Divide_by_Zero__int_zero_modulo_09.c":52:9)
#loc82 = loc("CWE369_Divide_by_Zero__int_zero_modulo_09.c":54:5)
#loc83 = loc("CWE369_Divide_by_Zero__int_zero_modulo_09.c":70:5)
#loc84 = loc("CWE369_Divide_by_Zero__int_zero_modulo_09.c":54:8)
#loc85 = loc("CWE369_Divide_by_Zero__int_zero_modulo_09.c":55:5)
#loc86 = loc("CWE369_Divide_by_Zero__int_zero_modulo_09.c":58:5)
#loc87 = loc("CWE369_Divide_by_Zero__int_zero_modulo_09.c":60:5)
#loc88 = loc("CWE369_Divide_by_Zero__int_zero_modulo_09.c":57:9)
#loc89 = loc("CWE369_Divide_by_Zero__int_zero_modulo_09.c":62:9)
#loc90 = loc("CWE369_Divide_by_Zero__int_zero_modulo_09.c":69:9)
#loc91 = loc("CWE369_Divide_by_Zero__int_zero_modulo_09.c":62:13)
#loc92 = loc("CWE369_Divide_by_Zero__int_zero_modulo_09.c":62:21)
#loc93 = loc("CWE369_Divide_by_Zero__int_zero_modulo_09.c":63:9)
#loc94 = loc("CWE369_Divide_by_Zero__int_zero_modulo_09.c":65:9)
#loc95 = loc("CWE369_Divide_by_Zero__int_zero_modulo_09.c":67:9)
#loc96 = loc("CWE369_Divide_by_Zero__int_zero_modulo_09.c":64:26)
#loc97 = loc("CWE369_Divide_by_Zero__int_zero_modulo_09.c":64:32)
#loc98 = loc("CWE369_Divide_by_Zero__int_zero_modulo_09.c":64:13)
#loc99 = loc("CWE369_Divide_by_Zero__int_zero_modulo_09.c":68:13)
#loc100 = loc("CWE369_Divide_by_Zero__int_zero_modulo_09.c":74:1)
#loc101 = loc("CWE369_Divide_by_Zero__int_zero_modulo_09.c":96:1)
#loc102 = loc("CWE369_Divide_by_Zero__int_zero_modulo_09.c":76:5)
#loc103 = loc("CWE369_Divide_by_Zero__int_zero_modulo_09.c":76:9)
#loc104 = loc("CWE369_Divide_by_Zero__int_zero_modulo_09.c":78:13)
#loc105 = loc("CWE369_Divide_by_Zero__int_zero_modulo_09.c":78:12)
#loc106 = loc("CWE369_Divide_by_Zero__int_zero_modulo_09.c":78:5)
#loc107 = loc("CWE369_Divide_by_Zero__int_zero_modulo_09.c":79:5)
#loc108 = loc("CWE369_Divide_by_Zero__int_zero_modulo_09.c":83:5)
#loc109 = loc("CWE369_Divide_by_Zero__int_zero_modulo_09.c":79:8)
#loc110 = loc("CWE369_Divide_by_Zero__int_zero_modulo_09.c":80:5)
#loc111 = loc("CWE369_Divide_by_Zero__int_zero_modulo_09.c":82:16)
#loc112 = loc("CWE369_Divide_by_Zero__int_zero_modulo_09.c":82:9)
#loc113 = loc("CWE369_Divide_by_Zero__int_zero_modulo_09.c":84:5)
#loc114 = loc("CWE369_Divide_by_Zero__int_zero_modulo_09.c":95:5)
#loc115 = loc("CWE369_Divide_by_Zero__int_zero_modulo_09.c":84:8)
#loc116 = loc("CWE369_Divide_by_Zero__int_zero_modulo_09.c":85:5)
#loc117 = loc("CWE369_Divide_by_Zero__int_zero_modulo_09.c":87:9)
#loc118 = loc("CWE369_Divide_by_Zero__int_zero_modulo_09.c":94:9)
#loc119 = loc("CWE369_Divide_by_Zero__int_zero_modulo_09.c":87:13)
#loc120 = loc("CWE369_Divide_by_Zero__int_zero_modulo_09.c":87:21)
#loc121 = loc("CWE369_Divide_by_Zero__int_zero_modulo_09.c":88:9)
#loc122 = loc("CWE369_Divide_by_Zero__int_zero_modulo_09.c":90:9)
#loc123 = loc("CWE369_Divide_by_Zero__int_zero_modulo_09.c":92:9)
#loc124 = loc("CWE369_Divide_by_Zero__int_zero_modulo_09.c":89:26)
#loc125 = loc("CWE369_Divide_by_Zero__int_zero_modulo_09.c":89:32)
#loc126 = loc("CWE369_Divide_by_Zero__int_zero_modulo_09.c":89:13)
#loc127 = loc("CWE369_Divide_by_Zero__int_zero_modulo_09.c":93:23)
#loc128 = loc("CWE369_Divide_by_Zero__int_zero_modulo_09.c":93:13)
#loc129 = loc("CWE369_Divide_by_Zero__int_zero_modulo_09.c":99:1)
#loc130 = loc("CWE369_Divide_by_Zero__int_zero_modulo_09.c":119:1)
#loc131 = loc("CWE369_Divide_by_Zero__int_zero_modulo_09.c":101:5)
#loc132 = loc("CWE369_Divide_by_Zero__int_zero_modulo_09.c":101:9)
#loc133 = loc("CWE369_Divide_by_Zero__int_zero_modulo_09.c":103:13)
#loc134 = loc("CWE369_Divide_by_Zero__int_zero_modulo_09.c":103:12)
#loc135 = loc("CWE369_Divide_by_Zero__int_zero_modulo_09.c":103:5)
#loc136 = loc("CWE369_Divide_by_Zero__int_zero_modulo_09.c":104:5)
#loc137 = loc("CWE369_Divide_by_Zero__int_zero_modulo_09.c":113:5)
#loc138 = loc("CWE369_Divide_by_Zero__int_zero_modulo_09.c":104:8)
#loc139 = loc("CWE369_Divide_by_Zero__int_zero_modulo_09.c":105:5)
#loc140 = loc("CWE369_Divide_by_Zero__int_zero_modulo_09.c":108:5)
#loc141 = loc("CWE369_Divide_by_Zero__int_zero_modulo_09.c":110:5)
#loc142 = loc("CWE369_Divide_by_Zero__int_zero_modulo_09.c":107:19)
#loc143 = loc("CWE369_Divide_by_Zero__int_zero_modulo_09.c":107:9)
#loc144 = loc("CWE369_Divide_by_Zero__int_zero_modulo_09.c":112:16)
#loc145 = loc("CWE369_Divide_by_Zero__int_zero_modulo_09.c":112:9)
#loc146 = loc("CWE369_Divide_by_Zero__int_zero_modulo_09.c":114:5)
#loc147 = loc("CWE369_Divide_by_Zero__int_zero_modulo_09.c":118:5)
#loc148 = loc("CWE369_Divide_by_Zero__int_zero_modulo_09.c":114:8)
#loc149 = loc("CWE369_Divide_by_Zero__int_zero_modulo_09.c":115:5)
#loc150 = loc("CWE369_Divide_by_Zero__int_zero_modulo_09.c":117:22)
#loc151 = loc("CWE369_Divide_by_Zero__int_zero_modulo_09.c":117:28)
#loc152 = loc("CWE369_Divide_by_Zero__int_zero_modulo_09.c":117:9)
#loc153 = loc("CWE369_Divide_by_Zero__int_zero_modulo_09.c":122:1)
#loc154 = loc("CWE369_Divide_by_Zero__int_zero_modulo_09.c":137:1)
#loc155 = loc("CWE369_Divide_by_Zero__int_zero_modulo_09.c":124:5)
#loc156 = loc("CWE369_Divide_by_Zero__int_zero_modulo_09.c":124:9)
#loc157 = loc("CWE369_Divide_by_Zero__int_zero_modulo_09.c":126:13)
#loc158 = loc("CWE369_Divide_by_Zero__int_zero_modulo_09.c":126:12)
#loc159 = loc("CWE369_Divide_by_Zero__int_zero_modulo_09.c":126:5)
#loc160 = loc("CWE369_Divide_by_Zero__int_zero_modulo_09.c":127:5)
#loc161 = loc("CWE369_Divide_by_Zero__int_zero_modulo_09.c":131:5)
#loc162 = loc("CWE369_Divide_by_Zero__int_zero_modulo_09.c":127:8)
#loc163 = loc("CWE369_Divide_by_Zero__int_zero_modulo_09.c":128:5)
#loc164 = loc("CWE369_Divide_by_Zero__int_zero_modulo_09.c":130:16)
#loc165 = loc("CWE369_Divide_by_Zero__int_zero_modulo_09.c":130:9)
#loc166 = loc("CWE369_Divide_by_Zero__int_zero_modulo_09.c":132:5)
#loc167 = loc("CWE369_Divide_by_Zero__int_zero_modulo_09.c":136:5)
#loc168 = loc("CWE369_Divide_by_Zero__int_zero_modulo_09.c":132:8)
#loc169 = loc("CWE369_Divide_by_Zero__int_zero_modulo_09.c":133:5)
#loc170 = loc("CWE369_Divide_by_Zero__int_zero_modulo_09.c":135:22)
#loc171 = loc("CWE369_Divide_by_Zero__int_zero_modulo_09.c":135:28)
#loc172 = loc("CWE369_Divide_by_Zero__int_zero_modulo_09.c":135:9)
#loc173 = loc(fused[#loc1, #loc2])
#loc174 = loc(fused[#loc3, #loc4])
#loc175 = loc(fused[#loc5, #loc6])
#loc176 = loc(fused[#loc7, #loc8])
#loc177 = loc(fused[#loc11, #loc9])
#loc178 = loc(fused[#loc12, #loc13])
#loc179 = loc(fused[#loc15, #loc13])
#loc180 = loc(fused[#loc17, #loc16])
#loc181 = loc(fused[#loc18, #loc19])
#loc182 = loc(fused[#loc21, #loc19])
#loc183 = loc(fused[#loc22, #loc23])
#loc184 = loc(fused[#loc25, #loc26])
#loc185 = loc(fused[#loc27, #loc28])
#loc186 = loc(fused[#loc29, #loc30])
#loc187 = loc(fused[#loc31, #loc32])
#loc188 = loc(fused[#loc33, #loc34])
#loc189 = loc(fused[#loc35, #loc36])
#loc190 = loc(fused[#loc37, #loc38])
#loc191 = loc(fused[#loc39, #loc40])
#loc192 = loc(fused[#loc45, #loc46])
#loc195 = loc(fused[#loc56, #loc57])
#loc196 = loc(fused[#loc60, #loc61])
#loc197 = loc(fused[#loc64, #loc63])
#loc198 = loc(fused[#loc65, #loc66])
#loc199 = loc(fused[#loc69, #loc70])
#loc200 = loc(fused[#loc71, #loc72])
#loc201 = loc(fused[#loc75, #loc73])
#loc202 = loc(fused[#loc76, #loc77])
#loc203 = loc(fused[#loc79, #loc77])
#loc204 = loc(fused[#loc81, #loc80])
#loc205 = loc(fused[#loc82, #loc83])
#loc206 = loc(fused[#loc85, #loc86, #loc87, #loc83])
#loc207 = loc(fused[#loc89, #loc90])
#loc208 = loc(fused[#loc91, #loc92])
#loc209 = loc(fused[#loc93, #loc94, #loc95, #loc90])
#loc210 = loc(fused[#loc96, #loc97])
#loc211 = loc(fused[#loc100, #loc101])
#loc212 = loc(fused[#loc102, #loc103])
#loc213 = loc(fused[#loc106, #loc104])
#loc214 = loc(fused[#loc107, #loc108])
#loc215 = loc(fused[#loc110, #loc108])
#loc216 = loc(fused[#loc112, #loc111])
#loc217 = loc(fused[#loc113, #loc114])
#loc218 = loc(fused[#loc116, #loc114])
#loc219 = loc(fused[#loc117, #loc118])
#loc220 = loc(fused[#loc119, #loc120])
#loc221 = loc(fused[#loc121, #loc122, #loc123, #loc118])
#loc222 = loc(fused[#loc124, #loc125])
#loc223 = loc(fused[#loc129, #loc130])
#loc224 = loc(fused[#loc131, #loc132])
#loc225 = loc(fused[#loc135, #loc133])
#loc226 = loc(fused[#loc136, #loc137])
#loc227 = loc(fused[#loc139, #loc140, #loc141, #loc137])
#loc228 = loc(fused[#loc145, #loc144])
#loc229 = loc(fused[#loc146, #loc147])
#loc230 = loc(fused[#loc149, #loc147])
#loc231 = loc(fused[#loc150, #loc151])
#loc232 = loc(fused[#loc153, #loc154])
#loc233 = loc(fused[#loc155, #loc156])
#loc234 = loc(fused[#loc159, #loc157])
#loc235 = loc(fused[#loc160, #loc161])
#loc236 = loc(fused[#loc163, #loc161])
#loc237 = loc(fused[#loc165, #loc164])
#loc238 = loc(fused[#loc166, #loc167])
#loc239 = loc(fused[#loc169, #loc167])
#loc240 = loc(fused[#loc170, #loc171])
