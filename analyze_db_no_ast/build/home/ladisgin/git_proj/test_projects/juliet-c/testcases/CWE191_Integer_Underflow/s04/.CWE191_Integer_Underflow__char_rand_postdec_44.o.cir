!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc5 = loc("CWE191_Integer_Underflow__char_rand_postdec_44.c":22:21)
#loc6 = loc("CWE191_Integer_Underflow__char_rand_postdec_44.c":22:26)
#loc38 = loc("CWE191_Integer_Underflow__char_rand_postdec_44.c":49:25)
#loc39 = loc("CWE191_Integer_Underflow__char_rand_postdec_44.c":49:30)
#loc67 = loc("CWE191_Integer_Underflow__char_rand_postdec_44.c":70:25)
#loc68 = loc("CWE191_Integer_Underflow__char_rand_postdec_44.c":70:30)
#loc99 = loc(fused[#loc5, #loc6])
#loc113 = loc(fused[#loc38, #loc39])
#loc124 = loc(fused[#loc67, #loc68])
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE191_Integer_Underflow/s04/CWE191_Integer_Underflow__char_rand_postdec_44.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @printHexCharLine(!s8i) loc(#loc97)
  cir.func internal private  @badSink(%arg0: !s8i loc(fused[#loc5, #loc6])) extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data", init] {alignment = 1 : i64} loc(#loc99)
    cir.store %arg0, %0 : !s8i, !cir.ptr<!s8i> loc(#loc7)
    cir.scope {
      %1 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc101)
      %2 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc12)
      %3 = cir.unary(dec, %2) : !s8i, !s8i loc(#loc13)
      cir.store %3, %0 : !s8i, !cir.ptr<!s8i> loc(#loc102)
      %4 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc11)
      cir.store %4, %1 : !s8i, !cir.ptr<!s8i> loc(#loc101)
      %5 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc14)
      cir.call @printHexCharLine(%5) : (!s8i) -> () loc(#loc15)
    } loc(#loc100)
    cir.return loc(#loc4)
  } loc(#loc98)
  cir.func private  @rand() -> !s32i extra(#fn_attr1) loc(#loc103)
  cir.func no_proto  @CWE191_Integer_Underflow__char_rand_postdec_44_bad() extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc105)
    %1 = cir.alloca !cir.ptr<!cir.func<!void (!s8i)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!s8i)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc106)
    %2 = cir.get_global @badSink : !cir.ptr<!cir.func<!void (!s8i)>> loc(#loc23)
    cir.store %2, %1 : !cir.ptr<!cir.func<!void (!s8i)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!s8i)>>> loc(#loc106)
    %3 = cir.const #cir.int<32> : !s32i loc(#loc24)
    %4 = cir.cast(integral, %3 : !s32i), !s8i loc(#loc24)
    cir.store %4, %0 : !s8i, !cir.ptr<!s8i> loc(#loc107)
    %5 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc26)
    %6 = cir.const #cir.int<1> : !s32i loc(#loc26)
    %7 = cir.binop(and, %5, %6) : !s32i loc(#loc26)
    %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc26)
    %9 = cir.ternary(%8, true {
      %14 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc26)
      %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc26)
      %16 = cir.const #cir.int<30> : !s32i loc(#loc26)
      %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc26)
      %18 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc26)
      %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc26)
      %20 = cir.const #cir.int<15> : !s32i loc(#loc26)
      %21 = cir.shift(left, %19 : !u32i, %20 : !s32i) -> !u32i loc(#loc26)
      %22 = cir.binop(xor, %17, %21) : !u32i loc(#loc26)
      %23 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc26)
      %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc26)
      %25 = cir.binop(xor, %22, %24) : !u32i loc(#loc26)
      cir.yield %25 : !u32i loc(#loc26)
    }, false {
      %14 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc26)
      %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc26)
      %16 = cir.const #cir.int<30> : !s32i loc(#loc26)
      %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc26)
      %18 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc26)
      %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc26)
      %20 = cir.const #cir.int<15> : !s32i loc(#loc26)
      %21 = cir.shift(left, %19 : !u32i, %20 : !s32i) -> !u32i loc(#loc26)
      %22 = cir.binop(xor, %17, %21) : !u32i loc(#loc26)
      %23 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc26)
      %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc26)
      %25 = cir.binop(xor, %22, %24) : !u32i loc(#loc26)
      %26 = cir.unary(minus, %25) : !u32i, !u32i loc(#loc26)
      %27 = cir.const #cir.int<1> : !s32i loc(#loc26)
      %28 = cir.cast(integral, %27 : !s32i), !u32i loc(#loc26)
      %29 = cir.binop(sub, %26, %28) : !u32i loc(#loc26)
      cir.yield %29 : !u32i loc(#loc26)
    }) : (!cir.bool) -> !u32i loc(#loc26)
    %10 = cir.cast(integral, %9 : !u32i), !s32i loc(#loc26)
    %11 = cir.cast(integral, %10 : !s32i), !s8i loc(#loc26)
    cir.store %11, %0 : !s8i, !cir.ptr<!s8i> loc(#loc108)
    %12 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<!void (!s8i)>>>, !cir.ptr<!cir.func<!void (!s8i)>> loc(#loc28)
    %13 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc29)
    cir.call %12(%13) : (!cir.ptr<!cir.func<!void (!s8i)>>, !s8i) -> () loc(#loc28)
    cir.return loc(#loc19)
  } loc(#loc104)
  cir.func no_proto  @CWE191_Integer_Underflow__char_rand_postdec_44_good() extra(#fn_attr) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc110)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc32)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc111)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc34)
    cir.return loc(#loc31)
  } loc(#loc109)
  cir.func internal private  @goodG2BSink(%arg0: !s8i loc(fused[#loc38, #loc39])) extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data", init] {alignment = 1 : i64} loc(#loc113)
    cir.store %arg0, %0 : !s8i, !cir.ptr<!s8i> loc(#loc40)
    cir.scope {
      %1 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc115)
      %2 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc45)
      %3 = cir.unary(dec, %2) : !s8i, !s8i loc(#loc46)
      cir.store %3, %0 : !s8i, !cir.ptr<!s8i> loc(#loc116)
      %4 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc44)
      cir.store %4, %1 : !s8i, !cir.ptr<!s8i> loc(#loc115)
      %5 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc47)
      cir.call @printHexCharLine(%5) : (!s8i) -> () loc(#loc48)
    } loc(#loc114)
    cir.return loc(#loc37)
  } loc(#loc112)
  cir.func no_proto internal private  @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc118)
    %1 = cir.alloca !cir.ptr<!cir.func<!void (!s8i)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!s8i)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc119)
    %2 = cir.get_global @goodG2BSink : !cir.ptr<!cir.func<!void (!s8i)>> loc(#loc54)
    cir.store %2, %1 : !cir.ptr<!cir.func<!void (!s8i)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!s8i)>>> loc(#loc119)
    %3 = cir.const #cir.int<32> : !s32i loc(#loc55)
    %4 = cir.cast(integral, %3 : !s32i), !s8i loc(#loc55)
    cir.store %4, %0 : !s8i, !cir.ptr<!s8i> loc(#loc120)
    %5 = cir.const #cir.int<2> : !s32i loc(#loc57)
    %6 = cir.unary(minus, %5) : !s32i, !s32i loc(#loc58)
    %7 = cir.cast(integral, %6 : !s32i), !s8i loc(#loc58)
    cir.store %7, %0 : !s8i, !cir.ptr<!s8i> loc(#loc121)
    %8 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<!void (!s8i)>>>, !cir.ptr<!cir.func<!void (!s8i)>> loc(#loc60)
    %9 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc61)
    cir.call %8(%9) : (!cir.ptr<!cir.func<!void (!s8i)>>, !s8i) -> () loc(#loc60)
    cir.return loc(#loc50)
  } loc(#loc117)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc122)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc64)
  cir.func internal private  @goodB2GSink(%arg0: !s8i loc(fused[#loc67, #loc68])) extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data", init] {alignment = 1 : i64} loc(#loc124)
    cir.store %arg0, %0 : !s8i, !cir.ptr<!s8i> loc(#loc69)
    cir.scope {
      %1 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc72)
      %2 = cir.cast(integral, %1 : !s8i), !s32i loc(#loc72)
      %3 = cir.const #cir.int<127> : !s32i loc(#loc73)
      %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc73)
      %5 = cir.const #cir.int<1> : !s32i loc(#loc73)
      %6 = cir.binop(sub, %4, %5) nsw : !s32i loc(#loc73)
      %7 = cir.cmp(gt, %2, %6) : !s32i, !s32i loc(#loc126)
      %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc74)
      cir.if %8 {
        %9 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc128)
        %10 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc80)
        %11 = cir.unary(dec, %10) : !s8i, !s8i loc(#loc81)
        cir.store %11, %0 : !s8i, !cir.ptr<!s8i> loc(#loc129)
        %12 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc79)
        cir.store %12, %9 : !s8i, !cir.ptr<!s8i> loc(#loc128)
        %13 = cir.load %9 : !cir.ptr<!s8i>, !s8i loc(#loc82)
        cir.call @printHexCharLine(%13) : (!s8i) -> () loc(#loc83)
      } else {
        %9 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc64)
        %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc64)
        cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc84)
      } loc(#loc127)
    } loc(#loc125)
    cir.return loc(#loc66)
  } loc(#loc123)
  cir.func no_proto internal private  @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc131)
    %1 = cir.alloca !cir.ptr<!cir.func<!void (!s8i)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!s8i)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc132)
    %2 = cir.get_global @goodB2GSink : !cir.ptr<!cir.func<!void (!s8i)>> loc(#loc90)
    cir.store %2, %1 : !cir.ptr<!cir.func<!void (!s8i)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!s8i)>>> loc(#loc132)
    %3 = cir.const #cir.int<32> : !s32i loc(#loc91)
    %4 = cir.cast(integral, %3 : !s32i), !s8i loc(#loc91)
    cir.store %4, %0 : !s8i, !cir.ptr<!s8i> loc(#loc133)
    %5 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc93)
    %6 = cir.const #cir.int<1> : !s32i loc(#loc93)
    %7 = cir.binop(and, %5, %6) : !s32i loc(#loc93)
    %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc93)
    %9 = cir.ternary(%8, true {
      %14 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc93)
      %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc93)
      %16 = cir.const #cir.int<30> : !s32i loc(#loc93)
      %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc93)
      %18 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc93)
      %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc93)
      %20 = cir.const #cir.int<15> : !s32i loc(#loc93)
      %21 = cir.shift(left, %19 : !u32i, %20 : !s32i) -> !u32i loc(#loc93)
      %22 = cir.binop(xor, %17, %21) : !u32i loc(#loc93)
      %23 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc93)
      %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc93)
      %25 = cir.binop(xor, %22, %24) : !u32i loc(#loc93)
      cir.yield %25 : !u32i loc(#loc93)
    }, false {
      %14 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc93)
      %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc93)
      %16 = cir.const #cir.int<30> : !s32i loc(#loc93)
      %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc93)
      %18 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc93)
      %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc93)
      %20 = cir.const #cir.int<15> : !s32i loc(#loc93)
      %21 = cir.shift(left, %19 : !u32i, %20 : !s32i) -> !u32i loc(#loc93)
      %22 = cir.binop(xor, %17, %21) : !u32i loc(#loc93)
      %23 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc93)
      %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc93)
      %25 = cir.binop(xor, %22, %24) : !u32i loc(#loc93)
      %26 = cir.unary(minus, %25) : !u32i, !u32i loc(#loc93)
      %27 = cir.const #cir.int<1> : !s32i loc(#loc93)
      %28 = cir.cast(integral, %27 : !s32i), !u32i loc(#loc93)
      %29 = cir.binop(sub, %26, %28) : !u32i loc(#loc93)
      cir.yield %29 : !u32i loc(#loc93)
    }) : (!cir.bool) -> !u32i loc(#loc93)
    %10 = cir.cast(integral, %9 : !u32i), !s32i loc(#loc93)
    %11 = cir.cast(integral, %10 : !s32i), !s8i loc(#loc93)
    cir.store %11, %0 : !s8i, !cir.ptr<!s8i> loc(#loc134)
    %12 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<!void (!s8i)>>>, !cir.ptr<!cir.func<!void (!s8i)>> loc(#loc95)
    %13 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc96)
    cir.call %12(%13) : (!cir.ptr<!cir.func<!void (!s8i)>>, !s8i) -> () loc(#loc95)
    cir.return loc(#loc86)
  } loc(#loc130)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE191_Integer_Underflow/s04/CWE191_Integer_Underflow__char_rand_postdec_44.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":30:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":30:35)
#loc3 = loc("CWE191_Integer_Underflow__char_rand_postdec_44.c":22:1)
#loc4 = loc("CWE191_Integer_Underflow__char_rand_postdec_44.c":30:1)
#loc7 = loc("CWE191_Integer_Underflow__char_rand_postdec_44.c":23:1)
#loc8 = loc("CWE191_Integer_Underflow__char_rand_postdec_44.c":24:5)
#loc9 = loc("CWE191_Integer_Underflow__char_rand_postdec_44.c":29:5)
#loc10 = loc("CWE191_Integer_Underflow__char_rand_postdec_44.c":27:9)
#loc11 = loc("CWE191_Integer_Underflow__char_rand_postdec_44.c":27:23)
#loc12 = loc("CWE191_Integer_Underflow__char_rand_postdec_44.c":26:13)
#loc13 = loc("CWE191_Integer_Underflow__char_rand_postdec_44.c":26:9)
#loc14 = loc("CWE191_Integer_Underflow__char_rand_postdec_44.c":28:26)
#loc15 = loc("CWE191_Integer_Underflow__char_rand_postdec_44.c":28:9)
#loc16 = loc("/usr/include/stdlib.h":573:1)
#loc17 = loc("/usr/include/stdlib.h":573:24)
#loc18 = loc("CWE191_Integer_Underflow__char_rand_postdec_44.c":32:1)
#loc19 = loc("CWE191_Integer_Underflow__char_rand_postdec_44.c":42:1)
#loc20 = loc("CWE191_Integer_Underflow__char_rand_postdec_44.c":34:5)
#loc21 = loc("CWE191_Integer_Underflow__char_rand_postdec_44.c":34:10)
#loc22 = loc("CWE191_Integer_Underflow__char_rand_postdec_44.c":36:5)
#loc23 = loc("CWE191_Integer_Underflow__char_rand_postdec_44.c":36:30)
#loc24 = loc("CWE191_Integer_Underflow__char_rand_postdec_44.c":37:12)
#loc25 = loc("CWE191_Integer_Underflow__char_rand_postdec_44.c":37:5)
#loc26 = loc("CWE191_Integer_Underflow__char_rand_postdec_44.c":39:18)
#loc27 = loc("CWE191_Integer_Underflow__char_rand_postdec_44.c":39:5)
#loc28 = loc("CWE191_Integer_Underflow__char_rand_postdec_44.c":41:5)
#loc29 = loc("CWE191_Integer_Underflow__char_rand_postdec_44.c":41:13)
#loc30 = loc("CWE191_Integer_Underflow__char_rand_postdec_44.c":95:1)
#loc31 = loc("CWE191_Integer_Underflow__char_rand_postdec_44.c":99:1)
#loc32 = loc("CWE191_Integer_Underflow__char_rand_postdec_44.c":97:5)
#loc33 = loc("CWE191_Integer_Underflow__char_rand_postdec_44.c":97:13)
#loc34 = loc("CWE191_Integer_Underflow__char_rand_postdec_44.c":98:5)
#loc35 = loc("CWE191_Integer_Underflow__char_rand_postdec_44.c":98:13)
#loc36 = loc("CWE191_Integer_Underflow__char_rand_postdec_44.c":49:1)
#loc37 = loc("CWE191_Integer_Underflow__char_rand_postdec_44.c":57:1)
#loc40 = loc("CWE191_Integer_Underflow__char_rand_postdec_44.c":50:1)
#loc41 = loc("CWE191_Integer_Underflow__char_rand_postdec_44.c":51:5)
#loc42 = loc("CWE191_Integer_Underflow__char_rand_postdec_44.c":56:5)
#loc43 = loc("CWE191_Integer_Underflow__char_rand_postdec_44.c":54:9)
#loc44 = loc("CWE191_Integer_Underflow__char_rand_postdec_44.c":54:23)
#loc45 = loc("CWE191_Integer_Underflow__char_rand_postdec_44.c":53:13)
#loc46 = loc("CWE191_Integer_Underflow__char_rand_postdec_44.c":53:9)
#loc47 = loc("CWE191_Integer_Underflow__char_rand_postdec_44.c":55:26)
#loc48 = loc("CWE191_Integer_Underflow__char_rand_postdec_44.c":55:9)
#loc49 = loc("CWE191_Integer_Underflow__char_rand_postdec_44.c":59:1)
#loc50 = loc("CWE191_Integer_Underflow__char_rand_postdec_44.c":67:1)
#loc51 = loc("CWE191_Integer_Underflow__char_rand_postdec_44.c":61:5)
#loc52 = loc("CWE191_Integer_Underflow__char_rand_postdec_44.c":61:10)
#loc53 = loc("CWE191_Integer_Underflow__char_rand_postdec_44.c":62:5)
#loc54 = loc("CWE191_Integer_Underflow__char_rand_postdec_44.c":62:30)
#loc55 = loc("CWE191_Integer_Underflow__char_rand_postdec_44.c":63:12)
#loc56 = loc("CWE191_Integer_Underflow__char_rand_postdec_44.c":63:5)
#loc57 = loc("CWE191_Integer_Underflow__char_rand_postdec_44.c":65:13)
#loc58 = loc("CWE191_Integer_Underflow__char_rand_postdec_44.c":65:12)
#loc59 = loc("CWE191_Integer_Underflow__char_rand_postdec_44.c":65:5)
#loc60 = loc("CWE191_Integer_Underflow__char_rand_postdec_44.c":66:5)
#loc61 = loc("CWE191_Integer_Underflow__char_rand_postdec_44.c":66:13)
#loc62 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc63 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc64 = loc("CWE191_Integer_Underflow__char_rand_postdec_44.c":81:19)
#loc65 = loc("CWE191_Integer_Underflow__char_rand_postdec_44.c":70:1)
#loc66 = loc("CWE191_Integer_Underflow__char_rand_postdec_44.c":83:1)
#loc69 = loc("CWE191_Integer_Underflow__char_rand_postdec_44.c":71:1)
#loc70 = loc("CWE191_Integer_Underflow__char_rand_postdec_44.c":73:5)
#loc71 = loc("CWE191_Integer_Underflow__char_rand_postdec_44.c":82:5)
#loc72 = loc("CWE191_Integer_Underflow__char_rand_postdec_44.c":73:9)
#loc73 = loc("CWE191_Integer_Underflow__char_rand_postdec_44.c":73:16)
#loc74 = loc("CWE191_Integer_Underflow__char_rand_postdec_44.c":73:14)
#loc75 = loc("CWE191_Integer_Underflow__char_rand_postdec_44.c":74:5)
#loc76 = loc("CWE191_Integer_Underflow__char_rand_postdec_44.c":78:5)
#loc77 = loc("CWE191_Integer_Underflow__char_rand_postdec_44.c":80:5)
#loc78 = loc("CWE191_Integer_Underflow__char_rand_postdec_44.c":76:9)
#loc79 = loc("CWE191_Integer_Underflow__char_rand_postdec_44.c":76:23)
#loc80 = loc("CWE191_Integer_Underflow__char_rand_postdec_44.c":75:13)
#loc81 = loc("CWE191_Integer_Underflow__char_rand_postdec_44.c":75:9)
#loc82 = loc("CWE191_Integer_Underflow__char_rand_postdec_44.c":77:26)
#loc83 = loc("CWE191_Integer_Underflow__char_rand_postdec_44.c":77:9)
#loc84 = loc("CWE191_Integer_Underflow__char_rand_postdec_44.c":81:9)
#loc85 = loc("CWE191_Integer_Underflow__char_rand_postdec_44.c":85:1)
#loc86 = loc("CWE191_Integer_Underflow__char_rand_postdec_44.c":93:1)
#loc87 = loc("CWE191_Integer_Underflow__char_rand_postdec_44.c":87:5)
#loc88 = loc("CWE191_Integer_Underflow__char_rand_postdec_44.c":87:10)
#loc89 = loc("CWE191_Integer_Underflow__char_rand_postdec_44.c":88:5)
#loc90 = loc("CWE191_Integer_Underflow__char_rand_postdec_44.c":88:30)
#loc91 = loc("CWE191_Integer_Underflow__char_rand_postdec_44.c":89:12)
#loc92 = loc("CWE191_Integer_Underflow__char_rand_postdec_44.c":89:5)
#loc93 = loc("CWE191_Integer_Underflow__char_rand_postdec_44.c":91:18)
#loc94 = loc("CWE191_Integer_Underflow__char_rand_postdec_44.c":91:5)
#loc95 = loc("CWE191_Integer_Underflow__char_rand_postdec_44.c":92:5)
#loc96 = loc("CWE191_Integer_Underflow__char_rand_postdec_44.c":92:13)
#loc97 = loc(fused[#loc1, #loc2])
#loc98 = loc(fused[#loc3, #loc4])
#loc100 = loc(fused[#loc8, #loc9])
#loc101 = loc(fused[#loc10, #loc11])
#loc102 = loc(fused[#loc13, #loc12])
#loc103 = loc(fused[#loc16, #loc17])
#loc104 = loc(fused[#loc18, #loc19])
#loc105 = loc(fused[#loc20, #loc21])
#loc106 = loc(fused[#loc22, #loc23])
#loc107 = loc(fused[#loc25, #loc24])
#loc108 = loc(fused[#loc27, #loc26])
#loc109 = loc(fused[#loc30, #loc31])
#loc110 = loc(fused[#loc32, #loc33])
#loc111 = loc(fused[#loc34, #loc35])
#loc112 = loc(fused[#loc36, #loc37])
#loc114 = loc(fused[#loc41, #loc42])
#loc115 = loc(fused[#loc43, #loc44])
#loc116 = loc(fused[#loc46, #loc45])
#loc117 = loc(fused[#loc49, #loc50])
#loc118 = loc(fused[#loc51, #loc52])
#loc119 = loc(fused[#loc53, #loc54])
#loc120 = loc(fused[#loc56, #loc55])
#loc121 = loc(fused[#loc59, #loc57])
#loc122 = loc(fused[#loc62, #loc63])
#loc123 = loc(fused[#loc65, #loc66])
#loc125 = loc(fused[#loc70, #loc71])
#loc126 = loc(fused[#loc72, #loc73])
#loc127 = loc(fused[#loc75, #loc76, #loc77, #loc71])
#loc128 = loc(fused[#loc78, #loc79])
#loc129 = loc(fused[#loc81, #loc80])
#loc130 = loc(fused[#loc85, #loc86])
#loc131 = loc(fused[#loc87, #loc88])
#loc132 = loc(fused[#loc89, #loc90])
#loc133 = loc(fused[#loc92, #loc91])
#loc134 = loc(fused[#loc94, #loc93])
