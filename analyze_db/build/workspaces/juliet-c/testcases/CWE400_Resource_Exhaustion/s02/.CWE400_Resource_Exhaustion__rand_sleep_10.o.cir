!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#true = #cir.bool<true> : !cir.bool
module @"/workspaces/juliet-c/testcases/CWE400_Resource_Exhaustion/s02/CWE400_Resource_Exhaustion__rand_sleep_10.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<270> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e">} {
  cir.global "private" external @globalTrue : !s32i {alignment = 4 : i64} loc(#loc158)
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc159)
  cir.func private @usleep(!u32i) -> !s32i loc(#loc160)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc161)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Sleep time possibly too long\00" : !cir.array<!s8i x 29>> : !cir.array<!s8i x 29> {alignment = 1 : i64} loc(#loc9)
  cir.func no_proto @CWE400_Resource_Exhaustion__rand_sleep_10_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count"] {alignment = 4 : i64} loc(#loc163)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc14)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc15)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc164)
    cir.scope {
      %3 = cir.get_global @globalTrue : !cir.ptr<!s32i> loc(#loc158)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc19)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc19)
      cir.if %5 {
        %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc21)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc21)
        %8 = cir.binop(and, %6, %7) : !s32i loc(#loc21)
        %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc21)
        %10 = cir.ternary(%9, true {
          %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc21)
          %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc21)
          %14 = cir.const #cir.int<30> : !s32i loc(#loc21)
          %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc21)
          %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc21)
          %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc21)
          %18 = cir.const #cir.int<15> : !s32i loc(#loc21)
          %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc21)
          %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc21)
          %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc21)
          %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc21)
          %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc21)
          cir.yield %23 : !u32i loc(#loc21)
        }, false {
          %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc21)
          %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc21)
          %14 = cir.const #cir.int<30> : !s32i loc(#loc21)
          %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc21)
          %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc21)
          %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc21)
          %18 = cir.const #cir.int<15> : !s32i loc(#loc21)
          %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc21)
          %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc21)
          %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc21)
          %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc21)
          %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc21)
          %24 = cir.unary(minus, %23) : !u32i, !u32i loc(#loc21)
          %25 = cir.const #cir.int<1> : !s32i loc(#loc21)
          %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc21)
          %27 = cir.binop(sub, %24, %26) : !u32i loc(#loc21)
          cir.yield %27 : !u32i loc(#loc21)
        }) : (!cir.bool) -> !u32i loc(#loc21)
        %11 = cir.cast(integral, %10 : !u32i), !s32i loc(#loc21)
        cir.store %11, %0 : !s32i, !cir.ptr<!s32i> loc(#loc167)
      } loc(#loc166)
    } loc(#loc165)
    cir.scope {
      %3 = cir.get_global @globalTrue : !cir.ptr<!s32i> loc(#loc158)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc25)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc25)
      cir.if %5 {
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc27)
        %7 = cir.cast(integral, %6 : !s32i), !u32i loc(#loc27)
        %8 = cir.call @usleep(%7) : (!u32i) -> !s32i loc(#loc28)
        %9 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 29>> loc(#loc9)
        %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 29>>), !cir.ptr<!s8i> loc(#loc9)
        cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc29)
      } loc(#loc169)
    } loc(#loc168)
    cir.return loc(#loc11)
  } loc(#loc162)
  cir.func no_proto @CWE400_Resource_Exhaustion__rand_sleep_10_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<()>> loc(#loc171)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc32)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<()>> loc(#loc172)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc34)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<()>> loc(#loc173)
    cir.call %2() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc36)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<()>> loc(#loc174)
    cir.call %3() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc38)
    cir.return loc(#loc31)
  } loc(#loc170)
  cir.global "private" external @globalFalse : !s32i {alignment = 4 : i64} loc(#loc175)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc42)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Sleep time OK\00" : !cir.array<!s8i x 14>> : !cir.array<!s8i x 14> {alignment = 1 : i64} loc(#loc43)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Sleep time too long\00" : !cir.array<!s8i x 20>> : !cir.array<!s8i x 20> {alignment = 1 : i64} loc(#loc44)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count"] {alignment = 4 : i64} loc(#loc177)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc49)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc50)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc178)
    cir.scope {
      %3 = cir.get_global @globalTrue : !cir.ptr<!s32i> loc(#loc158)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc54)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc54)
      cir.if %5 {
        %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc56)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc56)
        %8 = cir.binop(and, %6, %7) : !s32i loc(#loc56)
        %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc56)
        %10 = cir.ternary(%9, true {
          %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc56)
          %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc56)
          %14 = cir.const #cir.int<30> : !s32i loc(#loc56)
          %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc56)
          %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc56)
          %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc56)
          %18 = cir.const #cir.int<15> : !s32i loc(#loc56)
          %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc56)
          %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc56)
          %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc56)
          %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc56)
          %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc56)
          cir.yield %23 : !u32i loc(#loc56)
        }, false {
          %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc56)
          %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc56)
          %14 = cir.const #cir.int<30> : !s32i loc(#loc56)
          %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc56)
          %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc56)
          %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc56)
          %18 = cir.const #cir.int<15> : !s32i loc(#loc56)
          %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc56)
          %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc56)
          %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc56)
          %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc56)
          %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc56)
          %24 = cir.unary(minus, %23) : !u32i, !u32i loc(#loc56)
          %25 = cir.const #cir.int<1> : !s32i loc(#loc56)
          %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc56)
          %27 = cir.binop(sub, %24, %26) : !u32i loc(#loc56)
          cir.yield %27 : !u32i loc(#loc56)
        }) : (!cir.bool) -> !u32i loc(#loc56)
        %11 = cir.cast(integral, %10 : !u32i), !s32i loc(#loc56)
        cir.store %11, %0 : !s32i, !cir.ptr<!s32i> loc(#loc181)
      } loc(#loc180)
    } loc(#loc179)
    cir.scope {
      %3 = cir.get_global @globalFalse : !cir.ptr<!s32i> loc(#loc175)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc60)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc60)
      cir.if %5 {
        %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc42)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc42)
        cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc64)
      } else {
        cir.scope {
          %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc67)
          %7 = cir.const #cir.int<0> : !s32i loc(#loc68)
          %8 = cir.cmp(gt, %6, %7) : !s32i, !cir.bool loc(#loc185)
          %9 = cir.ternary(%8, true {
            %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc70)
            %11 = cir.const #cir.int<2000> : !s32i loc(#loc71)
            %12 = cir.cmp(le, %10, %11) : !s32i, !cir.bool loc(#loc186)
            %13 = cir.ternary(%12, true {
              %14 = cir.const #true loc(#loc69)
              cir.yield %14 : !cir.bool loc(#loc69)
            }, false {
              %14 = cir.const #false loc(#loc69)
              cir.yield %14 : !cir.bool loc(#loc69)
            }) : (!cir.bool) -> !cir.bool loc(#loc69)
            cir.yield %13 : !cir.bool loc(#loc69)
          }, false {
            %10 = cir.const #false loc(#loc69)
            cir.yield %10 : !cir.bool loc(#loc69)
          }) : (!cir.bool) -> !cir.bool loc(#loc69)
          cir.if %9 {
            %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc75)
            %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc75)
            %12 = cir.call @usleep(%11) : (!u32i) -> !s32i loc(#loc76)
            %13 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 14>> loc(#loc43)
            %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc43)
            cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc77)
          } else {
            %10 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 20>> loc(#loc44)
            %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc44)
            cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc78)
          } loc(#loc187)
        } loc(#loc184)
      } loc(#loc183)
    } loc(#loc182)
    cir.return loc(#loc46)
  } loc(#loc176)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count"] {alignment = 4 : i64} loc(#loc189)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc83)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc84)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc190)
    cir.scope {
      %3 = cir.get_global @globalTrue : !cir.ptr<!s32i> loc(#loc158)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc88)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc88)
      cir.if %5 {
        %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc90)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc90)
        %8 = cir.binop(and, %6, %7) : !s32i loc(#loc90)
        %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc90)
        %10 = cir.ternary(%9, true {
          %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc90)
          %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc90)
          %14 = cir.const #cir.int<30> : !s32i loc(#loc90)
          %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc90)
          %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc90)
          %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc90)
          %18 = cir.const #cir.int<15> : !s32i loc(#loc90)
          %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc90)
          %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc90)
          %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc90)
          %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc90)
          %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc90)
          cir.yield %23 : !u32i loc(#loc90)
        }, false {
          %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc90)
          %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc90)
          %14 = cir.const #cir.int<30> : !s32i loc(#loc90)
          %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc90)
          %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc90)
          %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc90)
          %18 = cir.const #cir.int<15> : !s32i loc(#loc90)
          %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc90)
          %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc90)
          %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc90)
          %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc90)
          %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc90)
          %24 = cir.unary(minus, %23) : !u32i, !u32i loc(#loc90)
          %25 = cir.const #cir.int<1> : !s32i loc(#loc90)
          %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc90)
          %27 = cir.binop(sub, %24, %26) : !u32i loc(#loc90)
          cir.yield %27 : !u32i loc(#loc90)
        }) : (!cir.bool) -> !u32i loc(#loc90)
        %11 = cir.cast(integral, %10 : !u32i), !s32i loc(#loc90)
        cir.store %11, %0 : !s32i, !cir.ptr<!s32i> loc(#loc193)
      } loc(#loc192)
    } loc(#loc191)
    cir.scope {
      %3 = cir.get_global @globalTrue : !cir.ptr<!s32i> loc(#loc158)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc94)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc94)
      cir.if %5 {
        cir.scope {
          %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc98)
          %7 = cir.const #cir.int<0> : !s32i loc(#loc99)
          %8 = cir.cmp(gt, %6, %7) : !s32i, !cir.bool loc(#loc197)
          %9 = cir.ternary(%8, true {
            %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc101)
            %11 = cir.const #cir.int<2000> : !s32i loc(#loc102)
            %12 = cir.cmp(le, %10, %11) : !s32i, !cir.bool loc(#loc198)
            %13 = cir.ternary(%12, true {
              %14 = cir.const #true loc(#loc100)
              cir.yield %14 : !cir.bool loc(#loc100)
            }, false {
              %14 = cir.const #false loc(#loc100)
              cir.yield %14 : !cir.bool loc(#loc100)
            }) : (!cir.bool) -> !cir.bool loc(#loc100)
            cir.yield %13 : !cir.bool loc(#loc100)
          }, false {
            %10 = cir.const #false loc(#loc100)
            cir.yield %10 : !cir.bool loc(#loc100)
          }) : (!cir.bool) -> !cir.bool loc(#loc100)
          cir.if %9 {
            %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc106)
            %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc106)
            %12 = cir.call @usleep(%11) : (!u32i) -> !s32i loc(#loc107)
            %13 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 14>> loc(#loc108)
            %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc108)
            cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc109)
          } else {
            %10 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 20>> loc(#loc110)
            %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc110)
            cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc111)
          } loc(#loc199)
        } loc(#loc196)
      } loc(#loc195)
    } loc(#loc194)
    cir.return loc(#loc80)
  } loc(#loc188)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count"] {alignment = 4 : i64} loc(#loc201)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc116)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc117)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc202)
    cir.scope {
      %3 = cir.get_global @globalFalse : !cir.ptr<!s32i> loc(#loc175)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc121)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc121)
      cir.if %5 {
        %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc125)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc125)
        cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc126)
      } else {
        %6 = cir.const #cir.int<20> : !s32i loc(#loc127)
        cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc205)
      } loc(#loc204)
    } loc(#loc203)
    cir.scope {
      %3 = cir.get_global @globalTrue : !cir.ptr<!s32i> loc(#loc158)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc131)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc131)
      cir.if %5 {
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc133)
        %7 = cir.cast(integral, %6 : !s32i), !u32i loc(#loc133)
        %8 = cir.call @usleep(%7) : (!u32i) -> !s32i loc(#loc134)
        %9 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 29>> loc(#loc135)
        %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 29>>), !cir.ptr<!s8i> loc(#loc135)
        cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc136)
      } loc(#loc207)
    } loc(#loc206)
    cir.return loc(#loc113)
  } loc(#loc200)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count"] {alignment = 4 : i64} loc(#loc209)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc141)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc142)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc210)
    cir.scope {
      %3 = cir.get_global @globalTrue : !cir.ptr<!s32i> loc(#loc158)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc146)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc146)
      cir.if %5 {
        %6 = cir.const #cir.int<20> : !s32i loc(#loc148)
        cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc213)
      } loc(#loc212)
    } loc(#loc211)
    cir.scope {
      %3 = cir.get_global @globalTrue : !cir.ptr<!s32i> loc(#loc158)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc152)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc152)
      cir.if %5 {
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc154)
        %7 = cir.cast(integral, %6 : !s32i), !u32i loc(#loc154)
        %8 = cir.call @usleep(%7) : (!u32i) -> !s32i loc(#loc155)
        %9 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 29>> loc(#loc156)
        %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 29>>), !cir.ptr<!s8i> loc(#loc156)
        cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc157)
      } loc(#loc215)
    } loc(#loc214)
    cir.return loc(#loc138)
  } loc(#loc208)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE400_Resource_Exhaustion/s02/CWE400_Resource_Exhaustion__rand_sleep_10.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase.h":116:1)
#loc2 = loc("../../../testcasesupport/std_testcase.h":116:12)
#loc3 = loc("/usr/include/stdlib.h":573:1)
#loc4 = loc("/usr/include/stdlib.h":573:24)
#loc5 = loc("/usr/include/unistd.h":480:1)
#loc6 = loc("/usr/include/unistd.h":480:43)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("CWE400_Resource_Exhaustion__rand_sleep_10.c":44:19)
#loc10 = loc("CWE400_Resource_Exhaustion__rand_sleep_10.c":30:1)
#loc11 = loc("CWE400_Resource_Exhaustion__rand_sleep_10.c":46:1)
#loc12 = loc("CWE400_Resource_Exhaustion__rand_sleep_10.c":32:5)
#loc13 = loc("CWE400_Resource_Exhaustion__rand_sleep_10.c":32:9)
#loc14 = loc("CWE400_Resource_Exhaustion__rand_sleep_10.c":34:14)
#loc15 = loc("CWE400_Resource_Exhaustion__rand_sleep_10.c":34:13)
#loc16 = loc("CWE400_Resource_Exhaustion__rand_sleep_10.c":34:5)
#loc17 = loc("CWE400_Resource_Exhaustion__rand_sleep_10.c":35:5)
#loc18 = loc("CWE400_Resource_Exhaustion__rand_sleep_10.c":39:5)
#loc19 = loc("CWE400_Resource_Exhaustion__rand_sleep_10.c":35:8)
#loc20 = loc("CWE400_Resource_Exhaustion__rand_sleep_10.c":36:5)
#loc21 = loc("CWE400_Resource_Exhaustion__rand_sleep_10.c":38:17)
#loc22 = loc("CWE400_Resource_Exhaustion__rand_sleep_10.c":38:9)
#loc23 = loc("CWE400_Resource_Exhaustion__rand_sleep_10.c":40:5)
#loc24 = loc("CWE400_Resource_Exhaustion__rand_sleep_10.c":45:5)
#loc25 = loc("CWE400_Resource_Exhaustion__rand_sleep_10.c":40:8)
#loc26 = loc("CWE400_Resource_Exhaustion__rand_sleep_10.c":41:5)
#loc27 = loc("CWE400_Resource_Exhaustion__rand_sleep_10.c":43:15)
#loc28 = loc("CWE400_Resource_Exhaustion__rand_sleep_10.c":43:9)
#loc29 = loc("CWE400_Resource_Exhaustion__rand_sleep_10.c":44:9)
#loc30 = loc("CWE400_Resource_Exhaustion__rand_sleep_10.c":152:1)
#loc31 = loc("CWE400_Resource_Exhaustion__rand_sleep_10.c":158:1)
#loc32 = loc("CWE400_Resource_Exhaustion__rand_sleep_10.c":154:5)
#loc33 = loc("CWE400_Resource_Exhaustion__rand_sleep_10.c":154:14)
#loc34 = loc("CWE400_Resource_Exhaustion__rand_sleep_10.c":155:5)
#loc35 = loc("CWE400_Resource_Exhaustion__rand_sleep_10.c":155:14)
#loc36 = loc("CWE400_Resource_Exhaustion__rand_sleep_10.c":156:5)
#loc37 = loc("CWE400_Resource_Exhaustion__rand_sleep_10.c":156:14)
#loc38 = loc("CWE400_Resource_Exhaustion__rand_sleep_10.c":157:5)
#loc39 = loc("CWE400_Resource_Exhaustion__rand_sleep_10.c":157:14)
#loc40 = loc("../../../testcasesupport/std_testcase.h":117:1)
#loc41 = loc("../../../testcasesupport/std_testcase.h":117:12)
#loc42 = loc("CWE400_Resource_Exhaustion__rand_sleep_10.c":66:19)
#loc43 = loc("CWE400_Resource_Exhaustion__rand_sleep_10.c":74:23)
#loc44 = loc("CWE400_Resource_Exhaustion__rand_sleep_10.c":78:23)
#loc45 = loc("CWE400_Resource_Exhaustion__rand_sleep_10.c":53:1)
#loc46 = loc("CWE400_Resource_Exhaustion__rand_sleep_10.c":81:1)
#loc47 = loc("CWE400_Resource_Exhaustion__rand_sleep_10.c":55:5)
#loc48 = loc("CWE400_Resource_Exhaustion__rand_sleep_10.c":55:9)
#loc49 = loc("CWE400_Resource_Exhaustion__rand_sleep_10.c":57:14)
#loc50 = loc("CWE400_Resource_Exhaustion__rand_sleep_10.c":57:13)
#loc51 = loc("CWE400_Resource_Exhaustion__rand_sleep_10.c":57:5)
#loc52 = loc("CWE400_Resource_Exhaustion__rand_sleep_10.c":58:5)
#loc53 = loc("CWE400_Resource_Exhaustion__rand_sleep_10.c":62:5)
#loc54 = loc("CWE400_Resource_Exhaustion__rand_sleep_10.c":58:8)
#loc55 = loc("CWE400_Resource_Exhaustion__rand_sleep_10.c":59:5)
#loc56 = loc("CWE400_Resource_Exhaustion__rand_sleep_10.c":61:17)
#loc57 = loc("CWE400_Resource_Exhaustion__rand_sleep_10.c":61:9)
#loc58 = loc("CWE400_Resource_Exhaustion__rand_sleep_10.c":63:5)
#loc59 = loc("CWE400_Resource_Exhaustion__rand_sleep_10.c":80:5)
#loc60 = loc("CWE400_Resource_Exhaustion__rand_sleep_10.c":63:8)
#loc61 = loc("CWE400_Resource_Exhaustion__rand_sleep_10.c":64:5)
#loc62 = loc("CWE400_Resource_Exhaustion__rand_sleep_10.c":67:5)
#loc63 = loc("CWE400_Resource_Exhaustion__rand_sleep_10.c":69:5)
#loc64 = loc("CWE400_Resource_Exhaustion__rand_sleep_10.c":66:9)
#loc65 = loc("CWE400_Resource_Exhaustion__rand_sleep_10.c":71:9)
#loc66 = loc("CWE400_Resource_Exhaustion__rand_sleep_10.c":79:9)
#loc67 = loc("CWE400_Resource_Exhaustion__rand_sleep_10.c":71:13)
#loc68 = loc("CWE400_Resource_Exhaustion__rand_sleep_10.c":71:21)
#loc69 = loc("CWE400_Resource_Exhaustion__rand_sleep_10.c":71:23)
#loc70 = loc("CWE400_Resource_Exhaustion__rand_sleep_10.c":71:26)
#loc71 = loc("CWE400_Resource_Exhaustion__rand_sleep_10.c":71:35)
#loc72 = loc("CWE400_Resource_Exhaustion__rand_sleep_10.c":72:9)
#loc73 = loc("CWE400_Resource_Exhaustion__rand_sleep_10.c":75:9)
#loc74 = loc("CWE400_Resource_Exhaustion__rand_sleep_10.c":77:9)
#loc75 = loc("CWE400_Resource_Exhaustion__rand_sleep_10.c":73:19)
#loc76 = loc("CWE400_Resource_Exhaustion__rand_sleep_10.c":73:13)
#loc77 = loc("CWE400_Resource_Exhaustion__rand_sleep_10.c":74:13)
#loc78 = loc("CWE400_Resource_Exhaustion__rand_sleep_10.c":78:13)
#loc79 = loc("CWE400_Resource_Exhaustion__rand_sleep_10.c":84:1)
#loc80 = loc("CWE400_Resource_Exhaustion__rand_sleep_10.c":107:1)
#loc81 = loc("CWE400_Resource_Exhaustion__rand_sleep_10.c":86:5)
#loc82 = loc("CWE400_Resource_Exhaustion__rand_sleep_10.c":86:9)
#loc83 = loc("CWE400_Resource_Exhaustion__rand_sleep_10.c":88:14)
#loc84 = loc("CWE400_Resource_Exhaustion__rand_sleep_10.c":88:13)
#loc85 = loc("CWE400_Resource_Exhaustion__rand_sleep_10.c":88:5)
#loc86 = loc("CWE400_Resource_Exhaustion__rand_sleep_10.c":89:5)
#loc87 = loc("CWE400_Resource_Exhaustion__rand_sleep_10.c":93:5)
#loc88 = loc("CWE400_Resource_Exhaustion__rand_sleep_10.c":89:8)
#loc89 = loc("CWE400_Resource_Exhaustion__rand_sleep_10.c":90:5)
#loc90 = loc("CWE400_Resource_Exhaustion__rand_sleep_10.c":92:17)
#loc91 = loc("CWE400_Resource_Exhaustion__rand_sleep_10.c":92:9)
#loc92 = loc("CWE400_Resource_Exhaustion__rand_sleep_10.c":94:5)
#loc93 = loc("CWE400_Resource_Exhaustion__rand_sleep_10.c":106:5)
#loc94 = loc("CWE400_Resource_Exhaustion__rand_sleep_10.c":94:8)
#loc95 = loc("CWE400_Resource_Exhaustion__rand_sleep_10.c":95:5)
#loc96 = loc("CWE400_Resource_Exhaustion__rand_sleep_10.c":97:9)
#loc97 = loc("CWE400_Resource_Exhaustion__rand_sleep_10.c":105:9)
#loc98 = loc("CWE400_Resource_Exhaustion__rand_sleep_10.c":97:13)
#loc99 = loc("CWE400_Resource_Exhaustion__rand_sleep_10.c":97:21)
#loc100 = loc("CWE400_Resource_Exhaustion__rand_sleep_10.c":97:23)
#loc101 = loc("CWE400_Resource_Exhaustion__rand_sleep_10.c":97:26)
#loc102 = loc("CWE400_Resource_Exhaustion__rand_sleep_10.c":97:35)
#loc103 = loc("CWE400_Resource_Exhaustion__rand_sleep_10.c":98:9)
#loc104 = loc("CWE400_Resource_Exhaustion__rand_sleep_10.c":101:9)
#loc105 = loc("CWE400_Resource_Exhaustion__rand_sleep_10.c":103:9)
#loc106 = loc("CWE400_Resource_Exhaustion__rand_sleep_10.c":99:19)
#loc107 = loc("CWE400_Resource_Exhaustion__rand_sleep_10.c":99:13)
#loc108 = loc("CWE400_Resource_Exhaustion__rand_sleep_10.c":100:23)
#loc109 = loc("CWE400_Resource_Exhaustion__rand_sleep_10.c":100:13)
#loc110 = loc("CWE400_Resource_Exhaustion__rand_sleep_10.c":104:23)
#loc111 = loc("CWE400_Resource_Exhaustion__rand_sleep_10.c":104:13)
#loc112 = loc("CWE400_Resource_Exhaustion__rand_sleep_10.c":110:1)
#loc113 = loc("CWE400_Resource_Exhaustion__rand_sleep_10.c":131:1)
#loc114 = loc("CWE400_Resource_Exhaustion__rand_sleep_10.c":112:5)
#loc115 = loc("CWE400_Resource_Exhaustion__rand_sleep_10.c":112:9)
#loc116 = loc("CWE400_Resource_Exhaustion__rand_sleep_10.c":114:14)
#loc117 = loc("CWE400_Resource_Exhaustion__rand_sleep_10.c":114:13)
#loc118 = loc("CWE400_Resource_Exhaustion__rand_sleep_10.c":114:5)
#loc119 = loc("CWE400_Resource_Exhaustion__rand_sleep_10.c":115:5)
#loc120 = loc("CWE400_Resource_Exhaustion__rand_sleep_10.c":124:5)
#loc121 = loc("CWE400_Resource_Exhaustion__rand_sleep_10.c":115:8)
#loc122 = loc("CWE400_Resource_Exhaustion__rand_sleep_10.c":116:5)
#loc123 = loc("CWE400_Resource_Exhaustion__rand_sleep_10.c":119:5)
#loc124 = loc("CWE400_Resource_Exhaustion__rand_sleep_10.c":121:5)
#loc125 = loc("CWE400_Resource_Exhaustion__rand_sleep_10.c":118:19)
#loc126 = loc("CWE400_Resource_Exhaustion__rand_sleep_10.c":118:9)
#loc127 = loc("CWE400_Resource_Exhaustion__rand_sleep_10.c":123:17)
#loc128 = loc("CWE400_Resource_Exhaustion__rand_sleep_10.c":123:9)
#loc129 = loc("CWE400_Resource_Exhaustion__rand_sleep_10.c":125:5)
#loc130 = loc("CWE400_Resource_Exhaustion__rand_sleep_10.c":130:5)
#loc131 = loc("CWE400_Resource_Exhaustion__rand_sleep_10.c":125:8)
#loc132 = loc("CWE400_Resource_Exhaustion__rand_sleep_10.c":126:5)
#loc133 = loc("CWE400_Resource_Exhaustion__rand_sleep_10.c":128:15)
#loc134 = loc("CWE400_Resource_Exhaustion__rand_sleep_10.c":128:9)
#loc135 = loc("CWE400_Resource_Exhaustion__rand_sleep_10.c":129:19)
#loc136 = loc("CWE400_Resource_Exhaustion__rand_sleep_10.c":129:9)
#loc137 = loc("CWE400_Resource_Exhaustion__rand_sleep_10.c":134:1)
#loc138 = loc("CWE400_Resource_Exhaustion__rand_sleep_10.c":150:1)
#loc139 = loc("CWE400_Resource_Exhaustion__rand_sleep_10.c":136:5)
#loc140 = loc("CWE400_Resource_Exhaustion__rand_sleep_10.c":136:9)
#loc141 = loc("CWE400_Resource_Exhaustion__rand_sleep_10.c":138:14)
#loc142 = loc("CWE400_Resource_Exhaustion__rand_sleep_10.c":138:13)
#loc143 = loc("CWE400_Resource_Exhaustion__rand_sleep_10.c":138:5)
#loc144 = loc("CWE400_Resource_Exhaustion__rand_sleep_10.c":139:5)
#loc145 = loc("CWE400_Resource_Exhaustion__rand_sleep_10.c":143:5)
#loc146 = loc("CWE400_Resource_Exhaustion__rand_sleep_10.c":139:8)
#loc147 = loc("CWE400_Resource_Exhaustion__rand_sleep_10.c":140:5)
#loc148 = loc("CWE400_Resource_Exhaustion__rand_sleep_10.c":142:17)
#loc149 = loc("CWE400_Resource_Exhaustion__rand_sleep_10.c":142:9)
#loc150 = loc("CWE400_Resource_Exhaustion__rand_sleep_10.c":144:5)
#loc151 = loc("CWE400_Resource_Exhaustion__rand_sleep_10.c":149:5)
#loc152 = loc("CWE400_Resource_Exhaustion__rand_sleep_10.c":144:8)
#loc153 = loc("CWE400_Resource_Exhaustion__rand_sleep_10.c":145:5)
#loc154 = loc("CWE400_Resource_Exhaustion__rand_sleep_10.c":147:15)
#loc155 = loc("CWE400_Resource_Exhaustion__rand_sleep_10.c":147:9)
#loc156 = loc("CWE400_Resource_Exhaustion__rand_sleep_10.c":148:19)
#loc157 = loc("CWE400_Resource_Exhaustion__rand_sleep_10.c":148:9)
#loc158 = loc(fused[#loc1, #loc2])
#loc159 = loc(fused[#loc3, #loc4])
#loc160 = loc(fused[#loc5, #loc6])
#loc161 = loc(fused[#loc7, #loc8])
#loc162 = loc(fused[#loc10, #loc11])
#loc163 = loc(fused[#loc12, #loc13])
#loc164 = loc(fused[#loc16, #loc14])
#loc165 = loc(fused[#loc17, #loc18])
#loc166 = loc(fused[#loc20, #loc18])
#loc167 = loc(fused[#loc22, #loc21])
#loc168 = loc(fused[#loc23, #loc24])
#loc169 = loc(fused[#loc26, #loc24])
#loc170 = loc(fused[#loc30, #loc31])
#loc171 = loc(fused[#loc32, #loc33])
#loc172 = loc(fused[#loc34, #loc35])
#loc173 = loc(fused[#loc36, #loc37])
#loc174 = loc(fused[#loc38, #loc39])
#loc175 = loc(fused[#loc40, #loc41])
#loc176 = loc(fused[#loc45, #loc46])
#loc177 = loc(fused[#loc47, #loc48])
#loc178 = loc(fused[#loc51, #loc49])
#loc179 = loc(fused[#loc52, #loc53])
#loc180 = loc(fused[#loc55, #loc53])
#loc181 = loc(fused[#loc57, #loc56])
#loc182 = loc(fused[#loc58, #loc59])
#loc183 = loc(fused[#loc61, #loc62, #loc63, #loc59])
#loc184 = loc(fused[#loc65, #loc66])
#loc185 = loc(fused[#loc67, #loc68])
#loc186 = loc(fused[#loc70, #loc71])
#loc187 = loc(fused[#loc72, #loc73, #loc74, #loc66])
#loc188 = loc(fused[#loc79, #loc80])
#loc189 = loc(fused[#loc81, #loc82])
#loc190 = loc(fused[#loc85, #loc83])
#loc191 = loc(fused[#loc86, #loc87])
#loc192 = loc(fused[#loc89, #loc87])
#loc193 = loc(fused[#loc91, #loc90])
#loc194 = loc(fused[#loc92, #loc93])
#loc195 = loc(fused[#loc95, #loc93])
#loc196 = loc(fused[#loc96, #loc97])
#loc197 = loc(fused[#loc98, #loc99])
#loc198 = loc(fused[#loc101, #loc102])
#loc199 = loc(fused[#loc103, #loc104, #loc105, #loc97])
#loc200 = loc(fused[#loc112, #loc113])
#loc201 = loc(fused[#loc114, #loc115])
#loc202 = loc(fused[#loc118, #loc116])
#loc203 = loc(fused[#loc119, #loc120])
#loc204 = loc(fused[#loc122, #loc123, #loc124, #loc120])
#loc205 = loc(fused[#loc128, #loc127])
#loc206 = loc(fused[#loc129, #loc130])
#loc207 = loc(fused[#loc132, #loc130])
#loc208 = loc(fused[#loc137, #loc138])
#loc209 = loc(fused[#loc139, #loc140])
#loc210 = loc(fused[#loc143, #loc141])
#loc211 = loc(fused[#loc144, #loc145])
#loc212 = loc(fused[#loc147, #loc145])
#loc213 = loc(fused[#loc149, #loc148])
#loc214 = loc(fused[#loc150, #loc151])
#loc215 = loc(fused[#loc153, #loc151])
