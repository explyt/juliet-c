!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.struct<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.struct<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.struct<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc96 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":163:10)
#loc97 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":163:14)
#loc98 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":163:20)
#loc99 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":163:32)
#true = #cir.bool<true> : !cir.bool
#loc228 = loc(fused[#loc96, #loc97])
#loc229 = loc(fused[#loc98, #loc99])
!ty__IO_FILE = !cir.struct<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!cir.struct<struct "_IO_FILE">>>, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE681_Incorrect_Conversion_Between_Numeric_Types/CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func no_proto private @globalReturnsTrueOrFalse(...) -> !s32i loc(#loc195)
  cir.func private @fgets(!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc196)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc197)
  cir.func private @atof(!cir.ptr<!s8i>) -> !cir.double extra(#fn_attr) loc(#loc198)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc199)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"fgets() failed.\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc11)
  cir.func private @printFloatLine(!cir.float) loc(#loc200)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Value is too small or large to be represented as a float\00" : !cir.array<!s8i x 57>> : !cir.array<!s8i x 57> {alignment = 1 : i64} loc(#loc14)
  cir.func no_proto @CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12_bad() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc203)
      %1 = cir.cast(bitcast, %0 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc203)
      %2 = cir.call %1() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc19)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc19)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !cir.array<!s8i x 256>, !cir.ptr<!cir.array<!s8i x 256>>, ["inputBuffer"] {alignment = 16 : i64} loc(#loc206)
          %5 = cir.alloca !cir.double, !cir.ptr<!cir.double>, ["doubleNumber", init] {alignment = 8 : i64} loc(#loc207)
          %6 = cir.const #cir.int<0> : !s32i loc(#loc29)
          %7 = cir.cast(int_to_float, %6 : !s32i), !cir.double loc(#loc29)
          cir.store %7, %5 : !cir.double, !cir.ptr<!cir.double> loc(#loc207)
          cir.scope {
            %10 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 256>>), !cir.ptr<!s8i> loc(#loc32)
            %11 = cir.const #cir.int<256> : !s32i loc(#loc33)
            %12 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc197)
            %13 = cir.load %12 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc34)
            %14 = cir.call @fgets(%10, %11, %13) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc35)
            %15 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc36)
            %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc36)
            %17 = cir.cmp(ne, %14, %16) : !cir.ptr<!s8i>, !cir.bool loc(#loc209)
            cir.if %17 {
              %18 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 256>>), !cir.ptr<!s8i> loc(#loc40)
              %19 = cir.call @atof(%18) : (!cir.ptr<!s8i>) -> !cir.double extra(#fn_attr) loc(#loc41)
              cir.store %19, %5 : !cir.double, !cir.ptr<!cir.double> loc(#loc211)
            } else {
              %18 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc11)
              %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc11)
              cir.call @printLine(%19) : (!cir.ptr<!s8i>) -> () loc(#loc44)
            } loc(#loc210)
          } loc(#loc208)
          %8 = cir.load %5 : !cir.ptr<!cir.double>, !cir.double loc(#loc45)
          %9 = cir.cast(floating, %8 : !cir.double), !cir.float loc(#loc45)
          cir.call @printFloatLine(%9) : (!cir.float) -> () loc(#loc46)
        } loc(#loc205)
      } else {
        cir.scope {
          %4 = cir.alloca !cir.array<!s8i x 256>, !cir.ptr<!cir.array<!s8i x 256>>, ["inputBuffer"] {alignment = 16 : i64} loc(#loc213)
          %5 = cir.alloca !cir.double, !cir.ptr<!cir.double>, ["doubleNumber", init] {alignment = 8 : i64} loc(#loc214)
          %6 = cir.const #cir.int<0> : !s32i loc(#loc52)
          %7 = cir.cast(int_to_float, %6 : !s32i), !cir.double loc(#loc52)
          cir.store %7, %5 : !cir.double, !cir.ptr<!cir.double> loc(#loc214)
          cir.scope {
            %8 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 256>>), !cir.ptr<!s8i> loc(#loc55)
            %9 = cir.const #cir.int<256> : !s32i loc(#loc56)
            %10 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc197)
            %11 = cir.load %10 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc57)
            %12 = cir.call @fgets(%8, %9, %11) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc58)
            %13 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc59)
            %14 = cir.cast(bitcast, %13 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc59)
            %15 = cir.cmp(ne, %12, %14) : !cir.ptr<!s8i>, !cir.bool loc(#loc216)
            cir.if %15 {
              %16 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 256>>), !cir.ptr<!s8i> loc(#loc63)
              %17 = cir.call @atof(%16) : (!cir.ptr<!s8i>) -> !cir.double extra(#fn_attr) loc(#loc64)
              cir.store %17, %5 : !cir.double, !cir.ptr<!cir.double> loc(#loc218)
            } else {
              %16 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc67)
              %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc67)
              cir.call @printLine(%17) : (!cir.ptr<!s8i>) -> () loc(#loc68)
            } loc(#loc217)
          } loc(#loc215)
          cir.scope {
            %8 = cir.load %5 : !cir.ptr<!cir.double>, !cir.double loc(#loc71)
            %9 = cir.const #cir.fp<3.40282347E+38> : !cir.float loc(#loc72)
            %10 = cir.cast(floating, %9 : !cir.float), !cir.double loc(#loc72)
            %11 = cir.cmp(gt, %8, %10) : !cir.double, !cir.bool loc(#loc220)
            %12 = cir.ternary(%11, true {
              %13 = cir.const #true loc(#loc73)
              cir.yield %13 : !cir.bool loc(#loc73)
            }, false {
              %13 = cir.load %5 : !cir.ptr<!cir.double>, !cir.double loc(#loc74)
              %14 = cir.const #cir.fp<1.17549435E-38> : !cir.float loc(#loc75)
              %15 = cir.cast(floating, %14 : !cir.float), !cir.double loc(#loc75)
              %16 = cir.cmp(lt, %13, %15) : !cir.double, !cir.bool loc(#loc221)
              %17 = cir.ternary(%16, true {
                %18 = cir.const #true loc(#loc73)
                cir.yield %18 : !cir.bool loc(#loc73)
              }, false {
                %18 = cir.const #false loc(#loc73)
                cir.yield %18 : !cir.bool loc(#loc73)
              }) : (!cir.bool) -> !cir.bool loc(#loc73)
              cir.yield %17 : !cir.bool loc(#loc73)
            }) : (!cir.bool) -> !cir.bool loc(#loc73)
            cir.if %12 {
              %13 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 57>> loc(#loc14)
              %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 57>>), !cir.ptr<!s8i> loc(#loc14)
              cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc79)
            } else {
              %13 = cir.load %5 : !cir.ptr<!cir.double>, !cir.double loc(#loc80)
              %14 = cir.cast(floating, %13 : !cir.double), !cir.float loc(#loc80)
              cir.call @printFloatLine(%14) : (!cir.float) -> () loc(#loc81)
            } loc(#loc222)
          } loc(#loc219)
        } loc(#loc212)
      } loc(#loc204)
    } loc(#loc202)
    cir.return loc(#loc16)
  } loc(#loc201)
  cir.func no_proto @CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<!void ()>> loc(#loc224)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc84)
    cir.return loc(#loc83)
  } loc(#loc223)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc225)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc226)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc90)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc91)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc92)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc93)
  cir.func @main(%arg0: !s32i loc(fused[#loc96, #loc97]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc98, #loc99])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc228)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc229)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc95)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc100)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc100)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc101)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc102)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc102)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc103)
    %6 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc90)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc90)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc104)
    %8 = cir.get_global @CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12_good : !cir.ptr<!cir.func<!void ()>> loc(#loc230)
    cir.call @CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12_good() : () -> () loc(#loc105)
    %9 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc91)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc91)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc107)
    %11 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc92)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc92)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc108)
    %13 = cir.get_global @CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc231)
    cir.call @CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12_bad() : () -> () loc(#loc109)
    %14 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc93)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc93)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc111)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc112)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc232)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc232)
    cir.return %17 : !s32i loc(#loc232)
  } loc(#loc227)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc235)
      %1 = cir.cast(bitcast, %0 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc235)
      %2 = cir.call %1() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc118)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc118)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !cir.array<!s8i x 256>, !cir.ptr<!cir.array<!s8i x 256>>, ["inputBuffer"] {alignment = 16 : i64} loc(#loc238)
          %5 = cir.alloca !cir.double, !cir.ptr<!cir.double>, ["doubleNumber", init] {alignment = 8 : i64} loc(#loc239)
          %6 = cir.const #cir.int<0> : !s32i loc(#loc128)
          %7 = cir.cast(int_to_float, %6 : !s32i), !cir.double loc(#loc128)
          cir.store %7, %5 : !cir.double, !cir.ptr<!cir.double> loc(#loc239)
          cir.scope {
            %8 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 256>>), !cir.ptr<!s8i> loc(#loc131)
            %9 = cir.const #cir.int<256> : !s32i loc(#loc132)
            %10 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc197)
            %11 = cir.load %10 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc133)
            %12 = cir.call @fgets(%8, %9, %11) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc134)
            %13 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc135)
            %14 = cir.cast(bitcast, %13 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc135)
            %15 = cir.cmp(ne, %12, %14) : !cir.ptr<!s8i>, !cir.bool loc(#loc241)
            cir.if %15 {
              %16 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 256>>), !cir.ptr<!s8i> loc(#loc139)
              %17 = cir.call @atof(%16) : (!cir.ptr<!s8i>) -> !cir.double extra(#fn_attr) loc(#loc140)
              cir.store %17, %5 : !cir.double, !cir.ptr<!cir.double> loc(#loc243)
            } else {
              %16 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc143)
              %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc143)
              cir.call @printLine(%17) : (!cir.ptr<!s8i>) -> () loc(#loc144)
            } loc(#loc242)
          } loc(#loc240)
          cir.scope {
            %8 = cir.load %5 : !cir.ptr<!cir.double>, !cir.double loc(#loc147)
            %9 = cir.const #cir.fp<3.40282347E+38> : !cir.float loc(#loc148)
            %10 = cir.cast(floating, %9 : !cir.float), !cir.double loc(#loc148)
            %11 = cir.cmp(gt, %8, %10) : !cir.double, !cir.bool loc(#loc245)
            %12 = cir.ternary(%11, true {
              %13 = cir.const #true loc(#loc149)
              cir.yield %13 : !cir.bool loc(#loc149)
            }, false {
              %13 = cir.load %5 : !cir.ptr<!cir.double>, !cir.double loc(#loc150)
              %14 = cir.const #cir.fp<1.17549435E-38> : !cir.float loc(#loc151)
              %15 = cir.cast(floating, %14 : !cir.float), !cir.double loc(#loc151)
              %16 = cir.cmp(lt, %13, %15) : !cir.double, !cir.bool loc(#loc246)
              %17 = cir.ternary(%16, true {
                %18 = cir.const #true loc(#loc149)
                cir.yield %18 : !cir.bool loc(#loc149)
              }, false {
                %18 = cir.const #false loc(#loc149)
                cir.yield %18 : !cir.bool loc(#loc149)
              }) : (!cir.bool) -> !cir.bool loc(#loc149)
              cir.yield %17 : !cir.bool loc(#loc149)
            }) : (!cir.bool) -> !cir.bool loc(#loc149)
            cir.if %12 {
              %13 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 57>> loc(#loc155)
              %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 57>>), !cir.ptr<!s8i> loc(#loc155)
              cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc156)
            } else {
              %13 = cir.load %5 : !cir.ptr<!cir.double>, !cir.double loc(#loc157)
              %14 = cir.cast(floating, %13 : !cir.double), !cir.float loc(#loc157)
              cir.call @printFloatLine(%14) : (!cir.float) -> () loc(#loc158)
            } loc(#loc247)
          } loc(#loc244)
        } loc(#loc237)
      } else {
        cir.scope {
          %4 = cir.alloca !cir.array<!s8i x 256>, !cir.ptr<!cir.array<!s8i x 256>>, ["inputBuffer"] {alignment = 16 : i64} loc(#loc249)
          %5 = cir.alloca !cir.double, !cir.ptr<!cir.double>, ["doubleNumber", init] {alignment = 8 : i64} loc(#loc250)
          %6 = cir.const #cir.int<0> : !s32i loc(#loc164)
          %7 = cir.cast(int_to_float, %6 : !s32i), !cir.double loc(#loc164)
          cir.store %7, %5 : !cir.double, !cir.ptr<!cir.double> loc(#loc250)
          cir.scope {
            %8 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 256>>), !cir.ptr<!s8i> loc(#loc167)
            %9 = cir.const #cir.int<256> : !s32i loc(#loc168)
            %10 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc197)
            %11 = cir.load %10 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc169)
            %12 = cir.call @fgets(%8, %9, %11) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc170)
            %13 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc171)
            %14 = cir.cast(bitcast, %13 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc171)
            %15 = cir.cmp(ne, %12, %14) : !cir.ptr<!s8i>, !cir.bool loc(#loc252)
            cir.if %15 {
              %16 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 256>>), !cir.ptr<!s8i> loc(#loc175)
              %17 = cir.call @atof(%16) : (!cir.ptr<!s8i>) -> !cir.double extra(#fn_attr) loc(#loc176)
              cir.store %17, %5 : !cir.double, !cir.ptr<!cir.double> loc(#loc254)
            } else {
              %16 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc179)
              %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc179)
              cir.call @printLine(%17) : (!cir.ptr<!s8i>) -> () loc(#loc180)
            } loc(#loc253)
          } loc(#loc251)
          cir.scope {
            %8 = cir.load %5 : !cir.ptr<!cir.double>, !cir.double loc(#loc183)
            %9 = cir.const #cir.fp<3.40282347E+38> : !cir.float loc(#loc184)
            %10 = cir.cast(floating, %9 : !cir.float), !cir.double loc(#loc184)
            %11 = cir.cmp(gt, %8, %10) : !cir.double, !cir.bool loc(#loc256)
            %12 = cir.ternary(%11, true {
              %13 = cir.const #true loc(#loc185)
              cir.yield %13 : !cir.bool loc(#loc185)
            }, false {
              %13 = cir.load %5 : !cir.ptr<!cir.double>, !cir.double loc(#loc186)
              %14 = cir.const #cir.fp<1.17549435E-38> : !cir.float loc(#loc187)
              %15 = cir.cast(floating, %14 : !cir.float), !cir.double loc(#loc187)
              %16 = cir.cmp(lt, %13, %15) : !cir.double, !cir.bool loc(#loc257)
              %17 = cir.ternary(%16, true {
                %18 = cir.const #true loc(#loc185)
                cir.yield %18 : !cir.bool loc(#loc185)
              }, false {
                %18 = cir.const #false loc(#loc185)
                cir.yield %18 : !cir.bool loc(#loc185)
              }) : (!cir.bool) -> !cir.bool loc(#loc185)
              cir.yield %17 : !cir.bool loc(#loc185)
            }) : (!cir.bool) -> !cir.bool loc(#loc185)
            cir.if %12 {
              %13 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 57>> loc(#loc191)
              %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 57>>), !cir.ptr<!s8i> loc(#loc191)
              cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc192)
            } else {
              %13 = cir.load %5 : !cir.ptr<!cir.double>, !cir.double loc(#loc193)
              %14 = cir.cast(floating, %13 : !cir.double), !cir.float loc(#loc193)
              cir.call @printFloatLine(%14) : (!cir.float) -> () loc(#loc194)
            } loc(#loc258)
          } loc(#loc255)
        } loc(#loc248)
      } loc(#loc236)
    } loc(#loc234)
    cir.return loc(#loc115)
  } loc(#loc233)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE681_Incorrect_Conversion_Between_Numeric_Types/CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":0:0)
#loc1 = loc("../../testcasesupport/std_testcase_io.h":52:1)
#loc2 = loc("../../testcasesupport/std_testcase_io.h":52:30)
#loc3 = loc("/usr/include/stdio.h":654:1)
#loc4 = loc("/usr/include/stdio.h":655:59)
#loc5 = loc("/usr/include/stdio.h":149:1)
#loc6 = loc("/usr/include/stdio.h":149:14)
#loc7 = loc("/usr/include/stdlib.h":102:1)
#loc8 = loc("/usr/include/stdlib.h":103:33)
#loc9 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc10 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc11 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":42:27)
#loc12 = loc("../../testcasesupport/std_testcase_io.h":22:1)
#loc13 = loc("../../testcasesupport/std_testcase_io.h":22:39)
#loc14 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":70:27)
#loc15 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":23:1)
#loc16 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":78:1)
#loc17 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":25:5)
#loc18 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":77:5)
#loc19 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":25:8)
#loc20 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":25:33)
#loc21 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":26:5)
#loc22 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":47:5)
#loc23 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":49:5)
#loc24 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":27:9)
#loc25 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":46:9)
#loc26 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":28:13)
#loc27 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":28:45)
#loc28 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":29:13)
#loc29 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":29:35)
#loc30 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":35:13)
#loc31 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":43:13)
#loc32 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":35:23)
#loc33 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":35:36)
#loc34 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":35:53)
#loc35 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":35:17)
#loc36 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":35:63)
#loc37 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":36:13)
#loc38 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":39:13)
#loc39 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":41:13)
#loc40 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":38:37)
#loc41 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":38:32)
#loc42 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":38:17)
#loc43 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":38:48)
#loc44 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":42:17)
#loc45 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":45:35)
#loc46 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":45:13)
#loc47 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":50:9)
#loc48 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":76:9)
#loc49 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":51:13)
#loc50 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":51:45)
#loc51 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":52:13)
#loc52 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":52:35)
#loc53 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":58:13)
#loc54 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":66:13)
#loc55 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":58:23)
#loc56 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":58:36)
#loc57 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":58:53)
#loc58 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":58:17)
#loc59 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":58:63)
#loc60 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":59:13)
#loc61 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":62:13)
#loc62 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":64:13)
#loc63 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":61:37)
#loc64 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":61:32)
#loc65 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":61:17)
#loc66 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":61:48)
#loc67 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":65:27)
#loc68 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":65:17)
#loc69 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":68:13)
#loc70 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":75:13)
#loc71 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":68:17)
#loc72 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":68:32)
#loc73 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":68:40)
#loc74 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":68:43)
#loc75 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":68:58)
#loc76 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":69:13)
#loc77 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":71:13)
#loc78 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":73:13)
#loc79 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":70:17)
#loc80 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":74:39)
#loc81 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":74:17)
#loc82 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":149:1)
#loc83 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":152:1)
#loc84 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":151:5)
#loc85 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":151:11)
#loc86 = loc("/usr/include/stdlib.h":575:1)
#loc87 = loc("/usr/include/stdlib.h":575:41)
#loc88 = loc("/usr/include/time.h":76:1)
#loc89 = loc("/usr/include/time.h":76:38)
#loc90 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":168:15)
#loc91 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":170:15)
#loc92 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":173:15)
#loc93 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":175:15)
#loc94 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":163:1)
#loc95 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":178:1)
#loc100 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":164:1)
#loc101 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":166:27)
#loc102 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":166:22)
#loc103 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":166:5)
#loc104 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":168:5)
#loc105 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":169:5)
#loc106 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":169:77)
#loc107 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":170:5)
#loc108 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":173:5)
#loc109 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":174:5)
#loc110 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":174:76)
#loc111 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":175:5)
#loc112 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":177:12)
#loc113 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":177:5)
#loc114 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":85:1)
#loc115 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":147:1)
#loc116 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":87:5)
#loc117 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":146:5)
#loc118 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":87:8)
#loc119 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":87:33)
#loc120 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":88:5)
#loc121 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":116:5)
#loc122 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":118:5)
#loc123 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":89:9)
#loc124 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":115:9)
#loc125 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":90:13)
#loc126 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":90:45)
#loc127 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":91:13)
#loc128 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":91:35)
#loc129 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":97:13)
#loc130 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":105:13)
#loc131 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":97:23)
#loc132 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":97:36)
#loc133 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":97:53)
#loc134 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":97:17)
#loc135 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":97:63)
#loc136 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":98:13)
#loc137 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":101:13)
#loc138 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":103:13)
#loc139 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":100:37)
#loc140 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":100:32)
#loc141 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":100:17)
#loc142 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":100:48)
#loc143 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":104:27)
#loc144 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":104:17)
#loc145 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":107:13)
#loc146 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":114:13)
#loc147 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":107:17)
#loc148 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":107:32)
#loc149 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":107:40)
#loc150 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":107:43)
#loc151 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":107:58)
#loc152 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":108:13)
#loc153 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":110:13)
#loc154 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":112:13)
#loc155 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":109:27)
#loc156 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":109:17)
#loc157 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":113:39)
#loc158 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":113:17)
#loc159 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":119:9)
#loc160 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":145:9)
#loc161 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":120:13)
#loc162 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":120:45)
#loc163 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":121:13)
#loc164 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":121:35)
#loc165 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":127:13)
#loc166 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":135:13)
#loc167 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":127:23)
#loc168 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":127:36)
#loc169 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":127:53)
#loc170 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":127:17)
#loc171 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":127:63)
#loc172 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":128:13)
#loc173 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":131:13)
#loc174 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":133:13)
#loc175 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":130:37)
#loc176 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":130:32)
#loc177 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":130:17)
#loc178 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":130:48)
#loc179 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":134:27)
#loc180 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":134:17)
#loc181 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":137:13)
#loc182 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":144:13)
#loc183 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":137:17)
#loc184 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":137:32)
#loc185 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":137:40)
#loc186 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":137:43)
#loc187 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":137:58)
#loc188 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":138:13)
#loc189 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":140:13)
#loc190 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":142:13)
#loc191 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":139:27)
#loc192 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":139:17)
#loc193 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":143:39)
#loc194 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_12.c":143:17)
#loc195 = loc(fused[#loc1, #loc2])
#loc196 = loc(fused[#loc3, #loc4])
#loc197 = loc(fused[#loc5, #loc6])
#loc198 = loc(fused[#loc7, #loc8])
#loc199 = loc(fused[#loc9, #loc10])
#loc200 = loc(fused[#loc12, #loc13])
#loc201 = loc(fused[#loc15, #loc16])
#loc202 = loc(fused[#loc17, #loc18])
#loc203 = loc(fused[#loc19, #loc20])
#loc204 = loc(fused[#loc21, #loc22, #loc23, #loc18])
#loc205 = loc(fused[#loc24, #loc25])
#loc206 = loc(fused[#loc26, #loc27])
#loc207 = loc(fused[#loc28, #loc29])
#loc208 = loc(fused[#loc30, #loc31])
#loc209 = loc(fused[#loc35, #loc36])
#loc210 = loc(fused[#loc37, #loc38, #loc39, #loc31])
#loc211 = loc(fused[#loc42, #loc43])
#loc212 = loc(fused[#loc47, #loc48])
#loc213 = loc(fused[#loc49, #loc50])
#loc214 = loc(fused[#loc51, #loc52])
#loc215 = loc(fused[#loc53, #loc54])
#loc216 = loc(fused[#loc58, #loc59])
#loc217 = loc(fused[#loc60, #loc61, #loc62, #loc54])
#loc218 = loc(fused[#loc65, #loc66])
#loc219 = loc(fused[#loc69, #loc70])
#loc220 = loc(fused[#loc71, #loc72])
#loc221 = loc(fused[#loc74, #loc75])
#loc222 = loc(fused[#loc76, #loc77, #loc78, #loc70])
#loc223 = loc(fused[#loc82, #loc83])
#loc224 = loc(fused[#loc84, #loc85])
#loc225 = loc(fused[#loc86, #loc87])
#loc226 = loc(fused[#loc88, #loc89])
#loc227 = loc(fused[#loc94, #loc95])
#loc230 = loc(fused[#loc105, #loc106])
#loc231 = loc(fused[#loc109, #loc110])
#loc232 = loc(fused[#loc113, #loc112])
#loc233 = loc(fused[#loc114, #loc115])
#loc234 = loc(fused[#loc116, #loc117])
#loc235 = loc(fused[#loc118, #loc119])
#loc236 = loc(fused[#loc120, #loc121, #loc122, #loc117])
#loc237 = loc(fused[#loc123, #loc124])
#loc238 = loc(fused[#loc125, #loc126])
#loc239 = loc(fused[#loc127, #loc128])
#loc240 = loc(fused[#loc129, #loc130])
#loc241 = loc(fused[#loc134, #loc135])
#loc242 = loc(fused[#loc136, #loc137, #loc138, #loc130])
#loc243 = loc(fused[#loc141, #loc142])
#loc244 = loc(fused[#loc145, #loc146])
#loc245 = loc(fused[#loc147, #loc148])
#loc246 = loc(fused[#loc150, #loc151])
#loc247 = loc(fused[#loc152, #loc153, #loc154, #loc146])
#loc248 = loc(fused[#loc159, #loc160])
#loc249 = loc(fused[#loc161, #loc162])
#loc250 = loc(fused[#loc163, #loc164])
#loc251 = loc(fused[#loc165, #loc166])
#loc252 = loc(fused[#loc170, #loc171])
#loc253 = loc(fused[#loc172, #loc173, #loc174, #loc166])
#loc254 = loc(fused[#loc177, #loc178])
#loc255 = loc(fused[#loc181, #loc182])
#loc256 = loc(fused[#loc183, #loc184])
#loc257 = loc(fused[#loc186, #loc187])
#loc258 = loc(fused[#loc188, #loc189, #loc190, #loc182])
