!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!ty__stdThreadLock = !cir.record<struct "_stdThreadLock" incomplete>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE667_Improper_Locking/CWE667_Improper_Locking__basic_18.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e", "dlti.endianness" = "little">} {
  cir.global "private" internal dsolocal @good1.goodLock = #cir.ptr<null> : !cir.ptr<!ty__stdThreadLock> {alignment = 8 : i64} loc(#loc1)
  cir.global "private" internal dsolocal @CWE667_Improper_Locking__basic_18_bad.badLock = #cir.ptr<null> : !cir.ptr<!ty__stdThreadLock> {alignment = 8 : i64} loc(#loc2)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc65)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Creating lock...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc5)
  cir.func private @stdThreadLockCreate(!cir.ptr<!cir.ptr<!ty__stdThreadLock>>) -> !s32i loc(#loc66)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Could not create lock\00" : !cir.array<!s8i x 22>> : !cir.array<!s8i x 22> {alignment = 1 : i64} loc(#loc8)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc67)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Acquiring lock...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc11)
  cir.func private @stdThreadLockAcquire(!cir.ptr<!ty__stdThreadLock>) loc(#loc68)
  cir.func no_proto @CWE667_Improper_Locking__basic_18_bad() extra(#fn_attr1) {
    cir.goto "sink" loc(#loc70)
  ^bb1:  // no predecessors
    cir.label "sink" loc(#loc18)
    %0 = cir.get_global @CWE667_Improper_Locking__basic_18_bad.badLock : !cir.ptr<!cir.ptr<!ty__stdThreadLock>> loc(#loc2)
    %1 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc5)
    %2 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc5)
    cir.call @printLine(%2) : (!cir.ptr<!s8i>) -> () loc(#loc19)
    cir.scope {
      %6 = cir.call @stdThreadLockCreate(%0) : (!cir.ptr<!cir.ptr<!ty__stdThreadLock>>) -> !s32i loc(#loc22)
      %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc22)
      %8 = cir.unary(not, %7) : !cir.bool, !cir.bool loc(#loc22)
      cir.if %8 {
        %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 22>> loc(#loc8)
        %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 22>>), !cir.ptr<!s8i> loc(#loc8)
        cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc24)
        %11 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc25)
        %12 = cir.const #cir.int<1> : !s32i loc(#loc26)
        cir.call @exit(%12) : (!s32i) -> () extra(#fn_attr) loc(#loc25)
      } loc(#loc72)
    } loc(#loc71)
    %3 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc11)
    %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc11)
    cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc27)
    %5 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__stdThreadLock>>, !cir.ptr<!ty__stdThreadLock> loc(#loc28)
    cir.call @stdThreadLockAcquire(%5) : (!cir.ptr<!ty__stdThreadLock>) -> () loc(#loc29)
    cir.return loc(#loc15)
  } loc(#loc69)
  cir.func no_proto @CWE667_Improper_Locking__basic_18_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<()>> loc(#loc74)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc32)
    cir.return loc(#loc31)
  } loc(#loc73)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Releasing lock...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc34)
  cir.func private @stdThreadLockRelease(!cir.ptr<!ty__stdThreadLock>) loc(#loc75)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Destroying lock...\00" : !cir.array<!s8i x 19>> : !cir.array<!s8i x 19> {alignment = 1 : i64} loc(#loc37)
  cir.func private @stdThreadLockDestroy(!cir.ptr<!ty__stdThreadLock>) loc(#loc76)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    cir.goto "sink" loc(#loc78)
  ^bb1:  // no predecessors
    cir.label "sink" loc(#loc44)
    %0 = cir.get_global @good1.goodLock : !cir.ptr<!cir.ptr<!ty__stdThreadLock>> loc(#loc1)
    %1 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc45)
    %2 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc45)
    cir.call @printLine(%2) : (!cir.ptr<!s8i>) -> () loc(#loc46)
    cir.scope {
      %12 = cir.call @stdThreadLockCreate(%0) : (!cir.ptr<!cir.ptr<!ty__stdThreadLock>>) -> !s32i loc(#loc49)
      %13 = cir.cast(int_to_bool, %12 : !s32i), !cir.bool loc(#loc49)
      %14 = cir.unary(not, %13) : !cir.bool, !cir.bool loc(#loc49)
      cir.if %14 {
        %15 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 22>> loc(#loc51)
        %16 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 22>>), !cir.ptr<!s8i> loc(#loc51)
        cir.call @printLine(%16) : (!cir.ptr<!s8i>) -> () loc(#loc52)
        %17 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc53)
        %18 = cir.const #cir.int<1> : !s32i loc(#loc54)
        cir.call @exit(%18) : (!s32i) -> () extra(#fn_attr) loc(#loc53)
      } loc(#loc80)
    } loc(#loc79)
    %3 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc55)
    %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc55)
    cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc56)
    %5 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__stdThreadLock>>, !cir.ptr<!ty__stdThreadLock> loc(#loc57)
    cir.call @stdThreadLockAcquire(%5) : (!cir.ptr<!ty__stdThreadLock>) -> () loc(#loc58)
    %6 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc34)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc34)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc59)
    %8 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__stdThreadLock>>, !cir.ptr<!ty__stdThreadLock> loc(#loc60)
    cir.call @stdThreadLockRelease(%8) : (!cir.ptr<!ty__stdThreadLock>) -> () loc(#loc61)
    %9 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 19>> loc(#loc37)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 19>>), !cir.ptr<!s8i> loc(#loc37)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc62)
    %11 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__stdThreadLock>>, !cir.ptr<!ty__stdThreadLock> loc(#loc63)
    cir.call @stdThreadLockDestroy(%11) : (!cir.ptr<!ty__stdThreadLock>) -> () loc(#loc64)
    cir.return loc(#loc41)
  } loc(#loc77)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE667_Improper_Locking/CWE667_Improper_Locking__basic_18.c":0:0)
#loc1 = loc("CWE667_Improper_Locking__basic_18.c":50:30)
#loc2 = loc("CWE667_Improper_Locking__basic_18.c":27:30)
#loc3 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc4 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc5 = loc("CWE667_Improper_Locking__basic_18.c":28:19)
#loc6 = loc("../../testcasesupport/std_thread.h":18:1)
#loc7 = loc("../../testcasesupport/std_thread.h":18:44)
#loc8 = loc("CWE667_Improper_Locking__basic_18.c":31:23)
#loc9 = loc("/usr/include/stdlib.h":756:1)
#loc10 = loc("/usr/include/stdlib.h":756:70)
#loc11 = loc("CWE667_Improper_Locking__basic_18.c":34:19)
#loc12 = loc("../../testcasesupport/std_thread.h":19:1)
#loc13 = loc("../../testcasesupport/std_thread.h":19:45)
#loc14 = loc("CWE667_Improper_Locking__basic_18.c":22:1)
#loc15 = loc("CWE667_Improper_Locking__basic_18.c":38:1)
#loc16 = loc("CWE667_Improper_Locking__basic_18.c":24:5)
#loc17 = loc("CWE667_Improper_Locking__basic_18.c":24:10)
#loc18 = loc("CWE667_Improper_Locking__basic_18.c":25:1)
#loc19 = loc("CWE667_Improper_Locking__basic_18.c":28:9)
#loc20 = loc("CWE667_Improper_Locking__basic_18.c":29:9)
#loc21 = loc("CWE667_Improper_Locking__basic_18.c":33:9)
#loc22 = loc("CWE667_Improper_Locking__basic_18.c":29:14)
#loc23 = loc("CWE667_Improper_Locking__basic_18.c":30:9)
#loc24 = loc("CWE667_Improper_Locking__basic_18.c":31:13)
#loc25 = loc("CWE667_Improper_Locking__basic_18.c":32:13)
#loc26 = loc("CWE667_Improper_Locking__basic_18.c":32:18)
#loc27 = loc("CWE667_Improper_Locking__basic_18.c":34:9)
#loc28 = loc("CWE667_Improper_Locking__basic_18.c":35:30)
#loc29 = loc("CWE667_Improper_Locking__basic_18.c":35:9)
#loc30 = loc("CWE667_Improper_Locking__basic_18.c":67:1)
#loc31 = loc("CWE667_Improper_Locking__basic_18.c":70:1)
#loc32 = loc("CWE667_Improper_Locking__basic_18.c":69:5)
#loc33 = loc("CWE667_Improper_Locking__basic_18.c":69:11)
#loc34 = loc("CWE667_Improper_Locking__basic_18.c":60:19)
#loc35 = loc("../../testcasesupport/std_thread.h":20:1)
#loc36 = loc("../../testcasesupport/std_thread.h":20:45)
#loc37 = loc("CWE667_Improper_Locking__basic_18.c":62:19)
#loc38 = loc("../../testcasesupport/std_thread.h":21:1)
#loc39 = loc("../../testcasesupport/std_thread.h":21:45)
#loc40 = loc("CWE667_Improper_Locking__basic_18.c":45:1)
#loc41 = loc("CWE667_Improper_Locking__basic_18.c":65:1)
#loc42 = loc("CWE667_Improper_Locking__basic_18.c":47:5)
#loc43 = loc("CWE667_Improper_Locking__basic_18.c":47:10)
#loc44 = loc("CWE667_Improper_Locking__basic_18.c":48:1)
#loc45 = loc("CWE667_Improper_Locking__basic_18.c":51:19)
#loc46 = loc("CWE667_Improper_Locking__basic_18.c":51:9)
#loc47 = loc("CWE667_Improper_Locking__basic_18.c":52:9)
#loc48 = loc("CWE667_Improper_Locking__basic_18.c":56:9)
#loc49 = loc("CWE667_Improper_Locking__basic_18.c":52:14)
#loc50 = loc("CWE667_Improper_Locking__basic_18.c":53:9)
#loc51 = loc("CWE667_Improper_Locking__basic_18.c":54:23)
#loc52 = loc("CWE667_Improper_Locking__basic_18.c":54:13)
#loc53 = loc("CWE667_Improper_Locking__basic_18.c":55:13)
#loc54 = loc("CWE667_Improper_Locking__basic_18.c":55:18)
#loc55 = loc("CWE667_Improper_Locking__basic_18.c":57:19)
#loc56 = loc("CWE667_Improper_Locking__basic_18.c":57:9)
#loc57 = loc("CWE667_Improper_Locking__basic_18.c":58:30)
#loc58 = loc("CWE667_Improper_Locking__basic_18.c":58:9)
#loc59 = loc("CWE667_Improper_Locking__basic_18.c":60:9)
#loc60 = loc("CWE667_Improper_Locking__basic_18.c":61:30)
#loc61 = loc("CWE667_Improper_Locking__basic_18.c":61:9)
#loc62 = loc("CWE667_Improper_Locking__basic_18.c":62:9)
#loc63 = loc("CWE667_Improper_Locking__basic_18.c":63:30)
#loc64 = loc("CWE667_Improper_Locking__basic_18.c":63:9)
#loc65 = loc(fused[#loc3, #loc4])
#loc66 = loc(fused[#loc6, #loc7])
#loc67 = loc(fused[#loc9, #loc10])
#loc68 = loc(fused[#loc12, #loc13])
#loc69 = loc(fused[#loc14, #loc15])
#loc70 = loc(fused[#loc16, #loc17])
#loc71 = loc(fused[#loc20, #loc21])
#loc72 = loc(fused[#loc23, #loc21])
#loc73 = loc(fused[#loc30, #loc31])
#loc74 = loc(fused[#loc32, #loc33])
#loc75 = loc(fused[#loc35, #loc36])
#loc76 = loc(fused[#loc38, #loc39])
#loc77 = loc(fused[#loc40, #loc41])
#loc78 = loc(fused[#loc42, #loc43])
#loc79 = loc(fused[#loc47, #loc48])
#loc80 = loc(fused[#loc50, #loc48])
