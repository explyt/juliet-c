!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc124 = loc("CWE617_Reachable_Assertion__listen_socket_10.c":98:48)
#true = #cir.bool<true> : !cir.bool
!ty_in_addr = !cir.record<struct "in_addr" {!u32i} #cir.record.decl.ast>
!ty_sockaddr = !cir.record<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.record<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/workspaces/juliet-c/testcases/CWE617_Reachable_Assertion/CWE617_Reachable_Assertion__listen_socket_10.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.global "private" external @globalTrue : !s32i {alignment = 4 : i64} loc(#loc194)
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc195)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc196)
  cir.func private @bind(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc197)
  cir.func private @listen(!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc198)
  cir.func private @accept(!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc199)
  cir.func private @recv(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc200)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc201)
  cir.func private @close(!s32i) -> !s32i loc(#loc202)
  cir.func private @__assert_fail(!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) extra(#fn_attr) loc(#loc203)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data > ASSERT_VALUE\00" : !cir.array<!s8i x 20>> : !cir.array<!s8i x 20> {alignment = 1 : i64} loc(#loc21)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"CWE617_Reachable_Assertion__listen_socket_10.c\00" : !cir.array<!s8i x 47>> : !cir.array<!s8i x 47> {alignment = 1 : i64} loc(#loc21)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"void CWE617_Reachable_Assertion__listen_socket_10_bad()\00" : !cir.array<!s8i x 56>> : !cir.array<!s8i x 56> {alignment = 1 : i64} loc(#loc21)
  cir.func no_proto @CWE617_Reachable_Assertion__listen_socket_10_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc205)
    %1 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc206)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc207)
    %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc208)
    %4 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc209)
    %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc210)
    %6 = cir.const #cir.int<1> : !s32i loc(#loc36)
    %7 = cir.unary(minus, %6) nsw : !s32i, !s32i loc(#loc37)
    cir.store %7, %5 : !s32i, !cir.ptr<!s32i> loc(#loc211)
    cir.br ^bb1 loc(#loc212)
  ^bb1:  // pred: ^bb0
    %8 = cir.get_global @globalTrue : !cir.ptr<!s32i> loc(#loc194)
    %9 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc41)
    %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc41)
    cir.brcond %10 ^bb2, ^bb48 loc(#loc213)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc214)
  ^bb3:  // pred: ^bb2
    %11 = cir.const #cir.int<1> : !s32i loc(#loc29)
    %12 = cir.unary(minus, %11) nsw : !s32i, !s32i loc(#loc29)
    cir.store %12, %2 : !s32i, !cir.ptr<!s32i> loc(#loc207)
    %13 = cir.const #cir.int<1> : !s32i loc(#loc31)
    %14 = cir.unary(minus, %13) nsw : !s32i, !s32i loc(#loc31)
    cir.store %14, %3 : !s32i, !cir.ptr<!s32i> loc(#loc208)
    cir.br ^bb4 loc(#loc215)
  ^bb4:  // pred: ^bb3
    cir.br ^bb6 loc(#loc215)
  ^bb5:  // pred: ^bb36
    %15 = cir.const #cir.int<0> : !s32i loc(#loc47)
    %16 = cir.cast(int_to_bool, %15 : !s32i), !cir.bool loc(#loc47)
    cir.brcond %16 ^bb6, ^bb37 loc(#loc47)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc216)
  ^bb7:  // pred: ^bb6
    %17 = cir.const #cir.int<2> : !s32i loc(#loc50)
    %18 = cir.const #cir.int<1> : !s32i loc(#loc51)
    %19 = cir.const #cir.int<6> : !s32i loc(#loc52)
    %20 = cir.call @socket(%17, %18, %19) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc53)
    cir.store %20, %2 : !s32i, !cir.ptr<!s32i> loc(#loc217)
    cir.br ^bb8 loc(#loc218)
  ^bb8:  // pred: ^bb7
    %21 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc58)
    %22 = cir.const #cir.int<1> : !s32i loc(#loc59)
    %23 = cir.unary(minus, %22) nsw : !s32i, !s32i loc(#loc59)
    %24 = cir.cmp(eq, %21, %23) : !s32i, !cir.bool loc(#loc219)
    cir.brcond %24 ^bb9, ^bb10 loc(#loc220)
  ^bb9:  // pred: ^bb8
    cir.br ^bb37 loc(#loc61)
  ^bb10:  // pred: ^bb8
    cir.br ^bb11 loc(#loc57)
  ^bb11:  // pred: ^bb10
    %25 = cir.cast(bitcast, %1 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc221)
    %26 = cir.const #cir.int<0> : !s32i loc(#loc64)
    %27 = cir.const #cir.int<16> : !u64i loc(#loc222)
    cir.libc.memset %27 bytes from %25 set to %26 : !cir.ptr<!void>, !s32i, !u64i loc(#loc223)
    %28 = cir.const #cir.int<2> : !s32i loc(#loc69)
    %29 = cir.cast(integral, %28 : !s32i), !u16i loc(#loc69)
    %30 = cir.get_member %1[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc70)
    cir.store %29, %30 : !u16i, !cir.ptr<!u16i> loc(#loc224)
    %31 = cir.const #cir.int<0> : !s32i loc(#loc72)
    %32 = cir.cast(integral, %31 : !s32i), !u32i loc(#loc72)
    %33 = cir.get_member %1[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc73)
    %34 = cir.get_member %33[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc74)
    cir.store %32, %34 : !u32i, !cir.ptr<!u32i> loc(#loc225)
    %35 = cir.const #cir.int<27015> : !s32i loc(#loc76)
    %36 = cir.cast(integral, %35 : !s32i), !u16i loc(#loc76)
    %37 = cir.call @htons(%36) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc77)
    %38 = cir.get_member %1[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc78)
    cir.store %37, %38 : !u16i, !cir.ptr<!u16i> loc(#loc226)
    cir.br ^bb12 loc(#loc227)
  ^bb12:  // pred: ^bb11
    %39 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc83)
    %40 = cir.cast(bitcast, %1 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc228)
    %41 = cir.const #cir.int<16> : !u64i loc(#loc229)
    %42 = cir.cast(integral, %41 : !u64i), !u32i loc(#loc229)
    %43 = cir.call @bind(%39, %40, %42) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc88)
    %44 = cir.const #cir.int<1> : !s32i loc(#loc89)
    %45 = cir.unary(minus, %44) nsw : !s32i, !s32i loc(#loc89)
    %46 = cir.cmp(eq, %43, %45) : !s32i, !cir.bool loc(#loc230)
    cir.brcond %46 ^bb13, ^bb14 loc(#loc231)
  ^bb13:  // pred: ^bb12
    cir.br ^bb37 loc(#loc91)
  ^bb14:  // pred: ^bb12
    cir.br ^bb15 loc(#loc82)
  ^bb15:  // pred: ^bb14
    cir.br ^bb16 loc(#loc232)
  ^bb16:  // pred: ^bb15
    %47 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc94)
    %48 = cir.const #cir.int<5> : !s32i loc(#loc95)
    %49 = cir.call @listen(%47, %48) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc96)
    %50 = cir.const #cir.int<1> : !s32i loc(#loc97)
    %51 = cir.unary(minus, %50) nsw : !s32i, !s32i loc(#loc97)
    %52 = cir.cmp(eq, %49, %51) : !s32i, !cir.bool loc(#loc233)
    cir.brcond %52 ^bb17, ^bb18 loc(#loc234)
  ^bb17:  // pred: ^bb16
    cir.br ^bb37 loc(#loc99)
  ^bb18:  // pred: ^bb16
    cir.br ^bb19 loc(#loc93)
  ^bb19:  // pred: ^bb18
    %53 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc100)
    %54 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc101)
    %55 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc102)
    %56 = cir.call @accept(%53, %54, %55) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc103)
    cir.store %56, %3 : !s32i, !cir.ptr<!s32i> loc(#loc235)
    cir.br ^bb20 loc(#loc236)
  ^bb20:  // pred: ^bb19
    %57 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc108)
    %58 = cir.const #cir.int<1> : !s32i loc(#loc109)
    %59 = cir.unary(minus, %58) nsw : !s32i, !s32i loc(#loc109)
    %60 = cir.cmp(eq, %57, %59) : !s32i, !cir.bool loc(#loc237)
    cir.brcond %60 ^bb21, ^bb22 loc(#loc238)
  ^bb21:  // pred: ^bb20
    cir.br ^bb37 loc(#loc111)
  ^bb22:  // pred: ^bb20
    cir.br ^bb23 loc(#loc107)
  ^bb23:  // pred: ^bb22
    %61 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc112)
    %62 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc113)
    %63 = cir.cast(bitcast, %62 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc113)
    %64 = cir.const #cir.int<3> : !s32i loc(#loc114)
    %65 = cir.cast(integral, %64 : !s32i), !u64i loc(#loc114)
    %66 = cir.const #cir.int<4> : !u64i loc(#loc114)
    %67 = cir.binop(mul, %65, %66) : !u64i loc(#loc114)
    %68 = cir.const #cir.int<2> : !s32i loc(#loc114)
    %69 = cir.cast(integral, %68 : !s32i), !u64i loc(#loc114)
    %70 = cir.binop(add, %67, %69) : !u64i loc(#loc114)
    %71 = cir.const #cir.int<1> : !s32i loc(#loc115)
    %72 = cir.cast(integral, %71 : !s32i), !u64i loc(#loc115)
    %73 = cir.binop(sub, %70, %72) : !u64i loc(#loc239)
    %74 = cir.const #cir.int<0> : !s32i loc(#loc116)
    %75 = cir.call @recv(%61, %63, %73, %74) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc117)
    %76 = cir.cast(integral, %75 : !s64i), !s32i loc(#loc117)
    cir.store %76, %0 : !s32i, !cir.ptr<!s32i> loc(#loc240)
    cir.br ^bb24 loc(#loc241)
  ^bb24:  // pred: ^bb23
    %77 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc122)
    %78 = cir.const #cir.int<1> : !s32i loc(#loc123)
    %79 = cir.unary(minus, %78) nsw : !s32i, !s32i loc(#loc123)
    %80 = cir.cmp(eq, %77, %79) : !s32i, !cir.bool loc(#loc242)
    cir.brcond %80 ^bb25, ^bb26 loc(#loc124)
  ^bb25:  // pred: ^bb24
    %81 = cir.const #true loc(#loc124)
    cir.br ^bb31(%81 : !cir.bool) loc(#loc124)
  ^bb26:  // pred: ^bb24
    %82 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc125)
    %83 = cir.const #cir.int<0> : !s32i loc(#loc126)
    %84 = cir.cmp(eq, %82, %83) : !s32i, !cir.bool loc(#loc243)
    cir.brcond %84 ^bb27, ^bb28 loc(#loc124)
  ^bb27:  // pred: ^bb26
    %85 = cir.const #true loc(#loc124)
    cir.br ^bb29(%85 : !cir.bool) loc(#loc124)
  ^bb28:  // pred: ^bb26
    %86 = cir.const #false loc(#loc124)
    cir.br ^bb29(%86 : !cir.bool) loc(#loc124)
  ^bb29(%87: !cir.bool loc("CWE617_Reachable_Assertion__listen_socket_10.c":98:48)):  // 2 preds: ^bb27, ^bb28
    cir.br ^bb30 loc(#loc124)
  ^bb30:  // pred: ^bb29
    cir.br ^bb31(%87 : !cir.bool) loc(#loc124)
  ^bb31(%88: !cir.bool loc("CWE617_Reachable_Assertion__listen_socket_10.c":98:48)):  // 2 preds: ^bb25, ^bb30
    cir.br ^bb32 loc(#loc124)
  ^bb32:  // pred: ^bb31
    cir.brcond %88 ^bb33, ^bb34 loc(#loc244)
  ^bb33:  // pred: ^bb32
    cir.br ^bb37 loc(#loc128)
  ^bb34:  // pred: ^bb32
    cir.br ^bb35 loc(#loc121)
  ^bb35:  // pred: ^bb34
    %89 = cir.const #cir.int<0> : !s32i loc(#loc129)
    %90 = cir.cast(integral, %89 : !s32i), !s8i loc(#loc129)
    %91 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc130)
    %92 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc131)
    %93 = cir.ptr_stride(%92 : !cir.ptr<!s8i>, %91 : !s32i), !cir.ptr<!s8i> loc(#loc131)
    cir.store %90, %93 : !s8i, !cir.ptr<!s8i> loc(#loc245)
    %94 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc132)
    %95 = cir.call @atoi(%94) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc133)
    cir.store %95, %5 : !s32i, !cir.ptr<!s32i> loc(#loc246)
    cir.br ^bb36 loc(#loc49)
  ^bb36:  // pred: ^bb35
    cir.br ^bb5 loc(#loc46)
  ^bb37:  // 6 preds: ^bb5, ^bb9, ^bb13, ^bb17, ^bb21, ^bb33
    cir.br ^bb38 loc(#loc46)
  ^bb38:  // pred: ^bb37
    cir.br ^bb39 loc(#loc247)
  ^bb39:  // pred: ^bb38
    %96 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc138)
    %97 = cir.const #cir.int<1> : !s32i loc(#loc139)
    %98 = cir.unary(minus, %97) nsw : !s32i, !s32i loc(#loc139)
    %99 = cir.cmp(ne, %96, %98) : !s32i, !cir.bool loc(#loc248)
    cir.brcond %99 ^bb40, ^bb41 loc(#loc249)
  ^bb40:  // pred: ^bb39
    %100 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc141)
    %101 = cir.call @close(%100) : (!s32i) -> !s32i loc(#loc142)
    cir.br ^bb41 loc(#loc137)
  ^bb41:  // 2 preds: ^bb39, ^bb40
    cir.br ^bb42 loc(#loc137)
  ^bb42:  // pred: ^bb41
    cir.br ^bb43 loc(#loc250)
  ^bb43:  // pred: ^bb42
    %102 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc145)
    %103 = cir.const #cir.int<1> : !s32i loc(#loc146)
    %104 = cir.unary(minus, %103) nsw : !s32i, !s32i loc(#loc146)
    %105 = cir.cmp(ne, %102, %104) : !s32i, !cir.bool loc(#loc251)
    cir.brcond %105 ^bb44, ^bb45 loc(#loc252)
  ^bb44:  // pred: ^bb43
    %106 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc148)
    %107 = cir.call @close(%106) : (!s32i) -> !s32i loc(#loc149)
    cir.br ^bb45 loc(#loc144)
  ^bb45:  // 2 preds: ^bb43, ^bb44
    cir.br ^bb46 loc(#loc144)
  ^bb46:  // pred: ^bb45
    cir.br ^bb47 loc(#loc44)
  ^bb47:  // pred: ^bb46
    cir.br ^bb48 loc(#loc40)
  ^bb48:  // 2 preds: ^bb1, ^bb47
    cir.br ^bb49 loc(#loc40)
  ^bb49:  // pred: ^bb48
    cir.br ^bb50 loc(#loc21)
  ^bb50:  // pred: ^bb49
    cir.br ^bb51 loc(#loc21)
  ^bb51:  // pred: ^bb50
    %108 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc21)
    %109 = cir.const #cir.int<5> : !s32i loc(#loc21)
    %110 = cir.cmp(gt, %108, %109) : !s32i, !cir.bool loc(#loc21)
    cir.brcond %110 ^bb52, ^bb53 loc(#loc21)
  ^bb52:  // pred: ^bb51
    cir.br ^bb54 loc(#loc21)
  ^bb53:  // pred: ^bb51
    %111 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 20>> loc(#loc21)
    %112 = cir.cast(array_to_ptrdecay, %111 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc21)
    %113 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 47>> loc(#loc21)
    %114 = cir.cast(array_to_ptrdecay, %113 : !cir.ptr<!cir.array<!s8i x 47>>), !cir.ptr<!s8i> loc(#loc21)
    %115 = cir.const #cir.int<125> : !s32i loc(#loc21)
    %116 = cir.cast(integral, %115 : !s32i), !u32i loc(#loc21)
    %117 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 56>> loc(#loc21)
    %118 = cir.cast(array_to_ptrdecay, %117 : !cir.ptr<!cir.array<!s8i x 56>>), !cir.ptr<!s8i> loc(#loc21)
    cir.call @__assert_fail(%112, %114, %116, %118) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) -> () extra(#fn_attr) loc(#loc21)
    cir.br ^bb54 loc(#loc21)
  ^bb54:  // 2 preds: ^bb52, ^bb53
    cir.br ^bb55 loc(#loc21)
  ^bb55:  // pred: ^bb54
    cir.br ^bb56 loc(#loc21)
  ^bb56:  // pred: ^bb55
    cir.return loc(#loc23)
  } loc(#loc204)
  cir.func no_proto @CWE617_Reachable_Assertion__listen_socket_10_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<()>> loc(#loc254)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc152)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<()>> loc(#loc255)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc154)
    cir.return loc(#loc151)
  } loc(#loc253)
  cir.global "private" external @globalFalse : !s32i {alignment = 4 : i64} loc(#loc256)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc257)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc160)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"void goodG2B1()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc161)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc259)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc166)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc167)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc260)
    cir.br ^bb1 loc(#loc261)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @globalFalse : !cir.ptr<!s32i> loc(#loc256)
    %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc171)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc171)
    cir.brcond %5 ^bb2, ^bb3 loc(#loc262)
  ^bb2:  // pred: ^bb1
    %6 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc160)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc160)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc175)
    cir.br ^bb4 loc(#loc173)
  ^bb3:  // pred: ^bb1
    %8 = cir.const #cir.int<5> : !s32i loc(#loc176)
    %9 = cir.const #cir.int<1> : !s32i loc(#loc177)
    %10 = cir.binop(add, %8, %9) nsw : !s32i loc(#loc176)
    cir.store %10, %0 : !s32i, !cir.ptr<!s32i> loc(#loc263)
    cir.br ^bb4 loc(#loc170)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc170)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc161)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc161)
  ^bb7:  // pred: ^bb6
    %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc161)
    %12 = cir.const #cir.int<5> : !s32i loc(#loc161)
    %13 = cir.cmp(gt, %11, %12) : !s32i, !cir.bool loc(#loc161)
    cir.brcond %13 ^bb8, ^bb9 loc(#loc161)
  ^bb8:  // pred: ^bb7
    cir.br ^bb10 loc(#loc161)
  ^bb9:  // pred: ^bb7
    %14 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 20>> loc(#loc161)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc161)
    %16 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 47>> loc(#loc161)
    %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 47>>), !cir.ptr<!s8i> loc(#loc161)
    %18 = cir.const #cir.int<149> : !s32i loc(#loc161)
    %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc161)
    %20 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc161)
    %21 = cir.cast(array_to_ptrdecay, %20 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc161)
    cir.call @__assert_fail(%15, %17, %19, %21) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) -> () extra(#fn_attr) loc(#loc161)
    cir.br ^bb10 loc(#loc161)
  ^bb10:  // 2 preds: ^bb8, ^bb9
    cir.br ^bb11 loc(#loc161)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc161)
  ^bb12:  // pred: ^bb11
    cir.return loc(#loc163)
  } loc(#loc258)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"void goodG2B2()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc179)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc265)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc184)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc185)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc266)
    cir.br ^bb1 loc(#loc267)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @globalTrue : !cir.ptr<!s32i> loc(#loc194)
    %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc189)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc189)
    cir.brcond %5 ^bb2, ^bb3 loc(#loc268)
  ^bb2:  // pred: ^bb1
    %6 = cir.const #cir.int<5> : !s32i loc(#loc191)
    %7 = cir.const #cir.int<1> : !s32i loc(#loc192)
    %8 = cir.binop(add, %6, %7) nsw : !s32i loc(#loc191)
    cir.store %8, %0 : !s32i, !cir.ptr<!s32i> loc(#loc269)
    cir.br ^bb3 loc(#loc188)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc188)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc179)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc179)
  ^bb6:  // pred: ^bb5
    %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc179)
    %10 = cir.const #cir.int<5> : !s32i loc(#loc179)
    %11 = cir.cmp(gt, %9, %10) : !s32i, !cir.bool loc(#loc179)
    cir.brcond %11 ^bb7, ^bb8 loc(#loc179)
  ^bb7:  // pred: ^bb6
    cir.br ^bb9 loc(#loc179)
  ^bb8:  // pred: ^bb6
    %12 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 20>> loc(#loc179)
    %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc179)
    %14 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 47>> loc(#loc179)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 47>>), !cir.ptr<!s8i> loc(#loc179)
    %16 = cir.const #cir.int<164> : !s32i loc(#loc179)
    %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc179)
    %18 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc179)
    %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc179)
    cir.call @__assert_fail(%13, %15, %17, %19) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) -> () extra(#fn_attr) loc(#loc179)
    cir.br ^bb9 loc(#loc179)
  ^bb9:  // 2 preds: ^bb7, ^bb8
    cir.br ^bb10 loc(#loc179)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc179)
  ^bb11:  // pred: ^bb10
    cir.return loc(#loc181)
  } loc(#loc264)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE617_Reachable_Assertion/CWE617_Reachable_Assertion__listen_socket_10.c":0:0)
#loc1 = loc("../../testcasesupport/std_testcase.h":116:1)
#loc2 = loc("../../testcasesupport/std_testcase.h":116:12)
#loc3 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:1)
#loc4 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:62)
#loc5 = loc("/usr/include/netinet/in.h":402:1)
#loc6 = loc("/usr/include/netinet/in.h":403:40)
#loc7 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":112:1)
#loc8 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":113:6)
#loc9 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":296:1)
#loc10 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":296:39)
#loc11 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":306:1)
#loc12 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":307:38)
#loc13 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":145:1)
#loc14 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":145:68)
#loc15 = loc("/usr/include/stdlib.h":105:1)
#loc16 = loc("/usr/include/stdlib.h":106:33)
#loc17 = loc("/usr/include/unistd.h":358:1)
#loc18 = loc("/usr/include/unistd.h":358:27)
#loc19 = loc("/usr/include/assert.h":69:1)
#loc20 = loc("/usr/include/assert.h":71:43)
#loc21 = loc("CWE617_Reachable_Assertion__listen_socket_10.c":125:5)
#loc22 = loc("CWE617_Reachable_Assertion__listen_socket_10.c":47:1)
#loc23 = loc("CWE617_Reachable_Assertion__listen_socket_10.c":126:1)
#loc24 = loc("CWE617_Reachable_Assertion__listen_socket_10.c":59:13)
#loc25 = loc("CWE617_Reachable_Assertion__listen_socket_10.c":59:17)
#loc26 = loc("CWE617_Reachable_Assertion__listen_socket_10.c":60:13)
#loc27 = loc("CWE617_Reachable_Assertion__listen_socket_10.c":60:32)
#loc28 = loc("CWE617_Reachable_Assertion__listen_socket_10.c":61:13)
#loc29 = loc("CWE617_Reachable_Assertion__listen_socket_10.c":61:35)
#loc30 = loc("CWE617_Reachable_Assertion__listen_socket_10.c":62:13)
#loc31 = loc("CWE617_Reachable_Assertion__listen_socket_10.c":62:35)
#loc32 = loc("CWE617_Reachable_Assertion__listen_socket_10.c":63:13)
#loc33 = loc("CWE617_Reachable_Assertion__listen_socket_10.c":63:45)
#loc34 = loc("CWE617_Reachable_Assertion__listen_socket_10.c":49:5)
#loc35 = loc("CWE617_Reachable_Assertion__listen_socket_10.c":49:9)
#loc36 = loc("CWE617_Reachable_Assertion__listen_socket_10.c":51:13)
#loc37 = loc("CWE617_Reachable_Assertion__listen_socket_10.c":51:12)
#loc38 = loc("CWE617_Reachable_Assertion__listen_socket_10.c":51:5)
#loc39 = loc("CWE617_Reachable_Assertion__listen_socket_10.c":52:5)
#loc40 = loc("CWE617_Reachable_Assertion__listen_socket_10.c":123:5)
#loc41 = loc("CWE617_Reachable_Assertion__listen_socket_10.c":52:8)
#loc42 = loc("CWE617_Reachable_Assertion__listen_socket_10.c":53:5)
#loc43 = loc("CWE617_Reachable_Assertion__listen_socket_10.c":54:9)
#loc44 = loc("CWE617_Reachable_Assertion__listen_socket_10.c":122:9)
#loc45 = loc("CWE617_Reachable_Assertion__listen_socket_10.c":64:13)
#loc46 = loc("CWE617_Reachable_Assertion__listen_socket_10.c":107:21)
#loc47 = loc("CWE617_Reachable_Assertion__listen_socket_10.c":107:20)
#loc48 = loc("CWE617_Reachable_Assertion__listen_socket_10.c":65:13)
#loc49 = loc("CWE617_Reachable_Assertion__listen_socket_10.c":106:13)
#loc50 = loc("CWE617_Reachable_Assertion__listen_socket_10.c":74:39)
#loc51 = loc("CWE617_Reachable_Assertion__listen_socket_10.c":74:48)
#loc52 = loc("CWE617_Reachable_Assertion__listen_socket_10.c":74:61)
#loc53 = loc("CWE617_Reachable_Assertion__listen_socket_10.c":74:32)
#loc54 = loc("CWE617_Reachable_Assertion__listen_socket_10.c":74:17)
#loc55 = loc("CWE617_Reachable_Assertion__listen_socket_10.c":74:72)
#loc56 = loc("CWE617_Reachable_Assertion__listen_socket_10.c":75:17)
#loc57 = loc("CWE617_Reachable_Assertion__listen_socket_10.c":78:17)
#loc58 = loc("CWE617_Reachable_Assertion__listen_socket_10.c":75:21)
#loc59 = loc("CWE617_Reachable_Assertion__listen_socket_10.c":75:37)
#loc60 = loc("CWE617_Reachable_Assertion__listen_socket_10.c":76:17)
#loc61 = loc("CWE617_Reachable_Assertion__listen_socket_10.c":77:21)
#loc62 = loc("CWE617_Reachable_Assertion__listen_socket_10.c":79:24)
#loc63 = loc("CWE617_Reachable_Assertion__listen_socket_10.c":79:25)
#loc64 = loc("CWE617_Reachable_Assertion__listen_socket_10.c":79:34)
#loc65 = loc("CWE617_Reachable_Assertion__listen_socket_10.c":79:37)
#loc66 = loc("CWE617_Reachable_Assertion__listen_socket_10.c":79:51)
#loc67 = loc("CWE617_Reachable_Assertion__listen_socket_10.c":79:17)
#loc68 = loc("CWE617_Reachable_Assertion__listen_socket_10.c":79:52)
#loc69 = loc("CWE617_Reachable_Assertion__listen_socket_10.c":80:38)
#loc70 = loc("/usr/include/netinet/in.h":249:5)
#loc71 = loc("CWE617_Reachable_Assertion__listen_socket_10.c":80:17)
#loc72 = loc("CWE617_Reachable_Assertion__listen_socket_10.c":81:43)
#loc73 = loc("/usr/include/netinet/in.h":251:20)
#loc74 = loc("/usr/include/netinet/in.h":33:15)
#loc75 = loc("CWE617_Reachable_Assertion__listen_socket_10.c":81:17)
#loc76 = loc("CWE617_Reachable_Assertion__listen_socket_10.c":82:42)
#loc77 = loc("CWE617_Reachable_Assertion__listen_socket_10.c":82:36)
#loc78 = loc("/usr/include/netinet/in.h":250:15)
#loc79 = loc("CWE617_Reachable_Assertion__listen_socket_10.c":82:17)
#loc80 = loc("CWE617_Reachable_Assertion__listen_socket_10.c":82:50)
#loc81 = loc("CWE617_Reachable_Assertion__listen_socket_10.c":83:17)
#loc82 = loc("CWE617_Reachable_Assertion__listen_socket_10.c":86:17)
#loc83 = loc("CWE617_Reachable_Assertion__listen_socket_10.c":83:26)
#loc84 = loc("CWE617_Reachable_Assertion__listen_socket_10.c":83:58)
#loc85 = loc("CWE617_Reachable_Assertion__listen_socket_10.c":83:59)
#loc86 = loc("CWE617_Reachable_Assertion__listen_socket_10.c":83:68)
#loc87 = loc("CWE617_Reachable_Assertion__listen_socket_10.c":83:82)
#loc88 = loc("CWE617_Reachable_Assertion__listen_socket_10.c":83:21)
#loc89 = loc("CWE617_Reachable_Assertion__listen_socket_10.c":83:88)
#loc90 = loc("CWE617_Reachable_Assertion__listen_socket_10.c":84:17)
#loc91 = loc("CWE617_Reachable_Assertion__listen_socket_10.c":85:21)
#loc92 = loc("CWE617_Reachable_Assertion__listen_socket_10.c":87:17)
#loc93 = loc("CWE617_Reachable_Assertion__listen_socket_10.c":90:17)
#loc94 = loc("CWE617_Reachable_Assertion__listen_socket_10.c":87:28)
#loc95 = loc("CWE617_Reachable_Assertion__listen_socket_10.c":87:42)
#loc96 = loc("CWE617_Reachable_Assertion__listen_socket_10.c":87:21)
#loc97 = loc("CWE617_Reachable_Assertion__listen_socket_10.c":87:61)
#loc98 = loc("CWE617_Reachable_Assertion__listen_socket_10.c":88:17)
#loc99 = loc("CWE617_Reachable_Assertion__listen_socket_10.c":89:21)
#loc100 = loc("CWE617_Reachable_Assertion__listen_socket_10.c":91:39)
#loc101 = loc("CWE617_Reachable_Assertion__listen_socket_10.c":91:53)
#loc102 = loc("CWE617_Reachable_Assertion__listen_socket_10.c":91:59)
#loc103 = loc("CWE617_Reachable_Assertion__listen_socket_10.c":91:32)
#loc104 = loc("CWE617_Reachable_Assertion__listen_socket_10.c":91:17)
#loc105 = loc("CWE617_Reachable_Assertion__listen_socket_10.c":91:63)
#loc106 = loc("CWE617_Reachable_Assertion__listen_socket_10.c":92:17)
#loc107 = loc("CWE617_Reachable_Assertion__listen_socket_10.c":95:17)
#loc108 = loc("CWE617_Reachable_Assertion__listen_socket_10.c":92:21)
#loc109 = loc("CWE617_Reachable_Assertion__listen_socket_10.c":92:37)
#loc110 = loc("CWE617_Reachable_Assertion__listen_socket_10.c":93:17)
#loc111 = loc("CWE617_Reachable_Assertion__listen_socket_10.c":94:21)
#loc112 = loc("CWE617_Reachable_Assertion__listen_socket_10.c":97:35)
#loc113 = loc("CWE617_Reachable_Assertion__listen_socket_10.c":97:49)
#loc114 = loc("CWE617_Reachable_Assertion__listen_socket_10.c":97:62)
#loc115 = loc("CWE617_Reachable_Assertion__listen_socket_10.c":97:80)
#loc116 = loc("CWE617_Reachable_Assertion__listen_socket_10.c":97:83)
#loc117 = loc("CWE617_Reachable_Assertion__listen_socket_10.c":97:30)
#loc118 = loc("CWE617_Reachable_Assertion__listen_socket_10.c":97:17)
#loc119 = loc("CWE617_Reachable_Assertion__listen_socket_10.c":97:84)
#loc120 = loc("CWE617_Reachable_Assertion__listen_socket_10.c":98:17)
#loc121 = loc("CWE617_Reachable_Assertion__listen_socket_10.c":101:17)
#loc122 = loc("CWE617_Reachable_Assertion__listen_socket_10.c":98:21)
#loc123 = loc("CWE617_Reachable_Assertion__listen_socket_10.c":98:35)
#loc125 = loc("CWE617_Reachable_Assertion__listen_socket_10.c":98:51)
#loc126 = loc("CWE617_Reachable_Assertion__listen_socket_10.c":98:65)
#loc127 = loc("CWE617_Reachable_Assertion__listen_socket_10.c":99:17)
#loc128 = loc("CWE617_Reachable_Assertion__listen_socket_10.c":100:21)
#loc129 = loc("CWE617_Reachable_Assertion__listen_socket_10.c":103:43)
#loc130 = loc("CWE617_Reachable_Assertion__listen_socket_10.c":103:29)
#loc131 = loc("CWE617_Reachable_Assertion__listen_socket_10.c":103:17)
#loc132 = loc("CWE617_Reachable_Assertion__listen_socket_10.c":105:29)
#loc133 = loc("CWE617_Reachable_Assertion__listen_socket_10.c":105:24)
#loc134 = loc("CWE617_Reachable_Assertion__listen_socket_10.c":105:17)
#loc135 = loc("CWE617_Reachable_Assertion__listen_socket_10.c":105:40)
#loc136 = loc("CWE617_Reachable_Assertion__listen_socket_10.c":108:13)
#loc137 = loc("CWE617_Reachable_Assertion__listen_socket_10.c":111:13)
#loc138 = loc("CWE617_Reachable_Assertion__listen_socket_10.c":108:17)
#loc139 = loc("CWE617_Reachable_Assertion__listen_socket_10.c":108:33)
#loc140 = loc("CWE617_Reachable_Assertion__listen_socket_10.c":109:13)
#loc141 = loc("CWE617_Reachable_Assertion__listen_socket_10.c":110:30)
#loc142 = loc("CWE617_Reachable_Assertion__listen_socket_10.c":110:17)
#loc143 = loc("CWE617_Reachable_Assertion__listen_socket_10.c":112:13)
#loc144 = loc("CWE617_Reachable_Assertion__listen_socket_10.c":115:13)
#loc145 = loc("CWE617_Reachable_Assertion__listen_socket_10.c":112:17)
#loc146 = loc("CWE617_Reachable_Assertion__listen_socket_10.c":112:33)
#loc147 = loc("CWE617_Reachable_Assertion__listen_socket_10.c":113:13)
#loc148 = loc("CWE617_Reachable_Assertion__listen_socket_10.c":114:30)
#loc149 = loc("CWE617_Reachable_Assertion__listen_socket_10.c":114:17)
#loc150 = loc("CWE617_Reachable_Assertion__listen_socket_10.c":167:1)
#loc151 = loc("CWE617_Reachable_Assertion__listen_socket_10.c":171:1)
#loc152 = loc("CWE617_Reachable_Assertion__listen_socket_10.c":169:5)
#loc153 = loc("CWE617_Reachable_Assertion__listen_socket_10.c":169:14)
#loc154 = loc("CWE617_Reachable_Assertion__listen_socket_10.c":170:5)
#loc155 = loc("CWE617_Reachable_Assertion__listen_socket_10.c":170:14)
#loc156 = loc("../../testcasesupport/std_testcase.h":117:1)
#loc157 = loc("../../testcasesupport/std_testcase.h":117:12)
#loc158 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc159 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc160 = loc("CWE617_Reachable_Assertion__listen_socket_10.c":141:19)
#loc161 = loc("CWE617_Reachable_Assertion__listen_socket_10.c":149:5)
#loc162 = loc("CWE617_Reachable_Assertion__listen_socket_10.c":133:1)
#loc163 = loc("CWE617_Reachable_Assertion__listen_socket_10.c":150:1)
#loc164 = loc("CWE617_Reachable_Assertion__listen_socket_10.c":135:5)
#loc165 = loc("CWE617_Reachable_Assertion__listen_socket_10.c":135:9)
#loc166 = loc("CWE617_Reachable_Assertion__listen_socket_10.c":137:13)
#loc167 = loc("CWE617_Reachable_Assertion__listen_socket_10.c":137:12)
#loc168 = loc("CWE617_Reachable_Assertion__listen_socket_10.c":137:5)
#loc169 = loc("CWE617_Reachable_Assertion__listen_socket_10.c":138:5)
#loc170 = loc("CWE617_Reachable_Assertion__listen_socket_10.c":147:5)
#loc171 = loc("CWE617_Reachable_Assertion__listen_socket_10.c":138:8)
#loc172 = loc("CWE617_Reachable_Assertion__listen_socket_10.c":139:5)
#loc173 = loc("CWE617_Reachable_Assertion__listen_socket_10.c":142:5)
#loc174 = loc("CWE617_Reachable_Assertion__listen_socket_10.c":144:5)
#loc175 = loc("CWE617_Reachable_Assertion__listen_socket_10.c":141:9)
#loc176 = loc("CWE617_Reachable_Assertion__listen_socket_10.c":146:16)
#loc177 = loc("CWE617_Reachable_Assertion__listen_socket_10.c":146:29)
#loc178 = loc("CWE617_Reachable_Assertion__listen_socket_10.c":146:9)
#loc179 = loc("CWE617_Reachable_Assertion__listen_socket_10.c":164:5)
#loc180 = loc("CWE617_Reachable_Assertion__listen_socket_10.c":153:1)
#loc181 = loc("CWE617_Reachable_Assertion__listen_socket_10.c":165:1)
#loc182 = loc("CWE617_Reachable_Assertion__listen_socket_10.c":155:5)
#loc183 = loc("CWE617_Reachable_Assertion__listen_socket_10.c":155:9)
#loc184 = loc("CWE617_Reachable_Assertion__listen_socket_10.c":157:13)
#loc185 = loc("CWE617_Reachable_Assertion__listen_socket_10.c":157:12)
#loc186 = loc("CWE617_Reachable_Assertion__listen_socket_10.c":157:5)
#loc187 = loc("CWE617_Reachable_Assertion__listen_socket_10.c":158:5)
#loc188 = loc("CWE617_Reachable_Assertion__listen_socket_10.c":162:5)
#loc189 = loc("CWE617_Reachable_Assertion__listen_socket_10.c":158:8)
#loc190 = loc("CWE617_Reachable_Assertion__listen_socket_10.c":159:5)
#loc191 = loc("CWE617_Reachable_Assertion__listen_socket_10.c":161:16)
#loc192 = loc("CWE617_Reachable_Assertion__listen_socket_10.c":161:29)
#loc193 = loc("CWE617_Reachable_Assertion__listen_socket_10.c":161:9)
#loc194 = loc(fused[#loc1, #loc2])
#loc195 = loc(fused[#loc3, #loc4])
#loc196 = loc(fused[#loc5, #loc6])
#loc197 = loc(fused[#loc7, #loc8])
#loc198 = loc(fused[#loc9, #loc10])
#loc199 = loc(fused[#loc11, #loc12])
#loc200 = loc(fused[#loc13, #loc14])
#loc201 = loc(fused[#loc15, #loc16])
#loc202 = loc(fused[#loc17, #loc18])
#loc203 = loc(fused[#loc19, #loc20])
#loc204 = loc(fused[#loc22, #loc23])
#loc205 = loc(fused[#loc24, #loc25])
#loc206 = loc(fused[#loc26, #loc27])
#loc207 = loc(fused[#loc28, #loc29])
#loc208 = loc(fused[#loc30, #loc31])
#loc209 = loc(fused[#loc32, #loc33])
#loc210 = loc(fused[#loc34, #loc35])
#loc211 = loc(fused[#loc38, #loc36])
#loc212 = loc(fused[#loc39, #loc40])
#loc213 = loc(fused[#loc42, #loc40])
#loc214 = loc(fused[#loc43, #loc44])
#loc215 = loc(fused[#loc45, #loc46])
#loc216 = loc(fused[#loc48, #loc49])
#loc217 = loc(fused[#loc54, #loc55])
#loc218 = loc(fused[#loc56, #loc57])
#loc219 = loc(fused[#loc58, #loc59])
#loc220 = loc(fused[#loc60, #loc57])
#loc221 = loc(fused[#loc62, #loc63])
#loc222 = loc(fused[#loc65, #loc66])
#loc223 = loc(fused[#loc67, #loc68])
#loc224 = loc(fused[#loc71, #loc69])
#loc225 = loc(fused[#loc75, #loc72])
#loc226 = loc(fused[#loc79, #loc80])
#loc227 = loc(fused[#loc81, #loc82])
#loc228 = loc(fused[#loc84, #loc85])
#loc229 = loc(fused[#loc86, #loc87])
#loc230 = loc(fused[#loc88, #loc89])
#loc231 = loc(fused[#loc90, #loc82])
#loc232 = loc(fused[#loc92, #loc93])
#loc233 = loc(fused[#loc96, #loc97])
#loc234 = loc(fused[#loc98, #loc93])
#loc235 = loc(fused[#loc104, #loc105])
#loc236 = loc(fused[#loc106, #loc107])
#loc237 = loc(fused[#loc108, #loc109])
#loc238 = loc(fused[#loc110, #loc107])
#loc239 = loc(fused[#loc114, #loc115])
#loc240 = loc(fused[#loc118, #loc119])
#loc241 = loc(fused[#loc120, #loc121])
#loc242 = loc(fused[#loc122, #loc123])
#loc243 = loc(fused[#loc125, #loc126])
#loc244 = loc(fused[#loc127, #loc121])
#loc245 = loc(fused[#loc131, #loc129])
#loc246 = loc(fused[#loc134, #loc135])
#loc247 = loc(fused[#loc136, #loc137])
#loc248 = loc(fused[#loc138, #loc139])
#loc249 = loc(fused[#loc140, #loc137])
#loc250 = loc(fused[#loc143, #loc144])
#loc251 = loc(fused[#loc145, #loc146])
#loc252 = loc(fused[#loc147, #loc144])
#loc253 = loc(fused[#loc150, #loc151])
#loc254 = loc(fused[#loc152, #loc153])
#loc255 = loc(fused[#loc154, #loc155])
#loc256 = loc(fused[#loc156, #loc157])
#loc257 = loc(fused[#loc158, #loc159])
#loc258 = loc(fused[#loc162, #loc163])
#loc259 = loc(fused[#loc164, #loc165])
#loc260 = loc(fused[#loc168, #loc166])
#loc261 = loc(fused[#loc169, #loc170])
#loc262 = loc(fused[#loc172, #loc173, #loc174, #loc170])
#loc263 = loc(fused[#loc178, #loc177])
#loc264 = loc(fused[#loc180, #loc181])
#loc265 = loc(fused[#loc182, #loc183])
#loc266 = loc(fused[#loc186, #loc184])
#loc267 = loc(fused[#loc187, #loc188])
#loc268 = loc(fused[#loc190, #loc188])
#loc269 = loc(fused[#loc193, #loc192])
