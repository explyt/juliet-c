clang: warning: argument unused during compilation: '-c' [-Wunused-command-line-argument]
warning: unknown warning option '-Wno-terminate' [-Wunknown-warning-option]
clang: /workspaces/clangir/clang/lib/CIR/CodeGen/CIRGenExprCXX.cpp:635: mlir::Value emitCXXNewAllocSize(CIRGenFunction &, const CXXNewExpr *, unsigned int, mlir::Value &, mlir::Value &): Assertion `numElementsWidth == sizeWidth && "Expected a size_t array size constant"' failed.
PLEASE submit a bug report to https://github.com/llvm/llvm-project/issues/ and include the crash backtrace, preprocessed source, and associated run script.
Stack dump:
0.	Program arguments: /workspaces/clangir/install/bin/clang -S -Xclang -emit-cir -std=c++11 -Wno-terminate -std=c++11 -I ../../../testcasesupport -c CWE762_Mismatched_Memory_Management_Routines__new_array_delete_struct_32.cpp -o /workspaces/juliet-c/testcases/CWE762_Mismatched_Memory_Management_Routines/s05/.CWE762_Mismatched_Memory_Management_Routines__new_array_delete_struct_32.o.cir
1.	<eof> parser at end of file
2.	CWE762_Mismatched_Memory_Management_Routines__new_array_delete_struct_32.cpp:20:11: LLVM IR generation of declaration 'CWE762_Mismatched_Memory_Management_Routines__new_array_delete_struct_32'
Stack dump without symbol names (ensure you have llvm-symbolizer in your PATH or set the environment var `LLVM_SYMBOLIZER_PATH` to point to it):
0  clang     0x000055c45b87eb68 llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) + 40
1  clang     0x000055c45b87c73e llvm::sys::RunSignalHandlers() + 238
2  clang     0x000055c45b7ed946
3  libc.so.6 0x00007fd3f2645330
4  libc.so.6 0x00007fd3f269eb2c pthread_kill + 284
5  libc.so.6 0x00007fd3f264527e gsignal + 30
6  libc.so.6 0x00007fd3f26288ff abort + 223
7  libc.so.6 0x00007fd3f262881b
8  libc.so.6 0x00007fd3f263b517
9  clang     0x000055c45ccc74fc clang::CIRGen::CIRGenFunction::emitCXXNewExpr(clang::CXXNewExpr const*) + 12028
10 clang     0x000055c45cccad1f clang::CIRGen::CIRGenFunction::emitScalarExpr(clang::Expr const*) + 63
11 clang     0x000055c45cc8c7e2 clang::CIRGen::CIRGenFunction::emitAnyExpr(clang::Expr const*, clang::CIRGen::AggValueSlot, bool) + 66
12 clang     0x000055c45cc8c3d4 clang::CIRGen::CIRGenFunction::emitBinaryOperatorLValue(clang::BinaryOperator const*) + 420
13 clang     0x000055c45cc86694 clang::CIRGen::CIRGenFunction::emitLValue(clang::Expr const*) + 308
14 clang     0x000055c45cc864f1 clang::CIRGen::CIRGenFunction::emitIgnoredExpr(clang::Expr const*) + 33
15 clang     0x000055c45ccfd518 clang::CIRGen::CIRGenFunction::emitStmt(clang::Stmt const*, bool, llvm::ArrayRef<clang::Attr const*>) + 120
16 clang     0x000055c45ccfd284 clang::CIRGen::CIRGenFunction::emitCompoundStmtWithoutScope(clang::CompoundStmt const&, bool, clang::CIRGen::AggValueSlot) + 260
17 clang     0x000055c45ccfd955 clang::CIRGen::CIRGenFunction::emitCompoundStmt(clang::CompoundStmt const&, bool, clang::CIRGen::AggValueSlot) + 453
18 clang     0x000055c45ccfdd65 clang::CIRGen::CIRGenFunction::emitSimpleStmt(clang::Stmt const*, bool) + 757
19 clang     0x000055c45ccfd4b0 clang::CIRGen::CIRGenFunction::emitStmt(clang::Stmt const*, bool, llvm::ArrayRef<clang::Attr const*>) + 16
20 clang     0x000055c45ccfd284 clang::CIRGen::CIRGenFunction::emitCompoundStmtWithoutScope(clang::CompoundStmt const&, bool, clang::CIRGen::AggValueSlot) + 260
21 clang     0x000055c45cce781a clang::CIRGen::CIRGenFunction::generateCode(clang::GlobalDecl, cir::FuncOp, clang::CIRGen::CIRGenFunctionInfo const&) + 1514
22 clang     0x000055c45cc3a839 clang::CIRGen::CIRGenModule::emitGlobalFunctionDefinition(clang::GlobalDecl, mlir::Operation*) + 393
23 clang     0x000055c45cc38968 clang::CIRGen::CIRGenModule::emitGlobal(clang::GlobalDecl) + 1656
24 clang     0x000055c45cc4328c clang::CIRGen::CIRGenModule::emitTopLevelDecl(clang::Decl*) + 236
25 clang     0x000055c45cc4316a clang::CIRGen::CIRGenModule::emitDeclContext(clang::DeclContext const*) + 58
26 clang     0x000055c45cc354af cir::CIRGenerator::HandleTopLevelDecl(clang::DeclGroupRef) + 159
27 clang     0x000055c45cb279e1
28 clang     0x000055c45ec29ada clang::ParseAST(clang::Sema&, bool, bool) + 826
29 clang     0x000055c45c344d36 clang::FrontendAction::Execute() + 38
30 clang     0x000055c45c2b03ad clang::CompilerInstance::ExecuteAction(clang::FrontendAction&) + 1149
31 clang     0x000055c45c42dedf clang::ExecuteCompilerInvocation(clang::CompilerInstance*) + 815
32 clang     0x000055c45a650a7a cc1_main(llvm::ArrayRef<char const*>, char const*, void*) + 6074
33 clang     0x000055c45a64d06d
34 clang     0x000055c45c0f7339
35 clang     0x000055c45b7ed686 llvm::CrashRecoveryContext::RunSafely(llvm::function_ref<void ()>) + 150
36 clang     0x000055c45c0f6892 clang::driver::CC1Command::Execute(llvm::ArrayRef<std::optional<llvm::StringRef>>, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>*, bool*) const + 242
37 clang     0x000055c45c0b2c27 clang::driver::Compilation::ExecuteCommand(clang::driver::Command const&, clang::driver::Command const*&, bool) const + 455
38 clang     0x000055c45c0b2f17 clang::driver::Compilation::ExecuteJobs(clang::driver::JobList const&, llvm::SmallVectorImpl<std::pair<int, clang::driver::Command const*>>&, bool) const + 135
39 clang     0x000055c45c0d2928 clang::driver::Driver::ExecuteCompilation(clang::driver::Compilation&, llvm::SmallVectorImpl<std::pair<int, clang::driver::Command const*>>&) + 904
40 clang     0x000055c45a64c6ba clang_main(int, char**, llvm::ToolContext const&) + 6090
41 clang     0x000055c45a65c147 main + 87
42 libc.so.6 0x00007fd3f262a1ca
43 libc.so.6 0x00007fd3f262a28b __libc_start_main + 139
44 clang     0x000055c45a64aaa5 _start + 37
clang: error: clang frontend command failed with exit code 134 (use -v to see invocation)
clang version 21.0.0git (git@github.com:llvm/clangir.git 4e7a2236d38507e994cbe5b79c888cf86427e7db)
Target: x86_64-unknown-linux-gnu
Thread model: posix
InstalledDir: /workspaces/clangir/install/bin
Build config: +assertions
clang: error: unable to execute command: Aborted (core dumped)
clang: note: diagnostic msg: Error generating preprocessed source(s).
