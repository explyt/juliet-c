!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.struct<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.struct<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.struct<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
!ty__IO_FILE = !cir.struct<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!cir.struct<struct "_IO_FILE">>>, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_fscanf_add_04.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @__isoc99_fscanf(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i loc(#loc159)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc160)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"%d\00" : !cir.array<!s8i x 3>> : !cir.array<!s8i x 3> {alignment = 1 : i64} loc(#loc5)
  cir.func private @printIntLine(!s32i) loc(#loc161)
  cir.func no_proto @CWE190_Integer_Overflow__int_fscanf_add_04_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc163)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc164)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc14)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc165)
    cir.br ^bb1 loc(#loc166)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.int<1> : !s32i loc(#loc18)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc18)
    cir.brcond %4 ^bb2, ^bb3 loc(#loc167)
  ^bb2:  // pred: ^bb1
    %5 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc20)
    %6 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc160)
    %7 = cir.load %6 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc21)
    %8 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc5)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc5)
    %10 = cir.call @__isoc99_fscanf(%7, %9, %1) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s32i>) -> !s32i loc(#loc20)
    cir.br ^bb3 loc(#loc17)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc17)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc168)
  ^bb5:  // pred: ^bb4
    %11 = cir.const #cir.int<1> : !s32i loc(#loc24)
    %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc24)
    cir.brcond %12 ^bb6, ^bb9 loc(#loc169)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc170)
  ^bb7:  // pred: ^bb6
    %13 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc28)
    %14 = cir.const #cir.int<1> : !s32i loc(#loc11)
    %15 = cir.binop(add, %13, %14) nsw : !s32i loc(#loc28)
    cir.store %15, %0 : !s32i, !cir.ptr<!s32i> loc(#loc163)
    %16 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc29)
    cir.call @printIntLine(%16) : (!s32i) -> () loc(#loc30)
    cir.br ^bb8 loc(#loc27)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc23)
  ^bb9:  // 2 preds: ^bb5, ^bb8
    cir.br ^bb10 loc(#loc23)
  ^bb10:  // pred: ^bb9
    cir.return loc(#loc9)
  } loc(#loc162)
  cir.func no_proto @CWE190_Integer_Overflow__int_fscanf_add_04_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc172)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc33)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc173)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc35)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc174)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc37)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc175)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc39)
    cir.return loc(#loc32)
  } loc(#loc171)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc176)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc43)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc44)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc178)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc179)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc51)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc180)
    cir.br ^bb1 loc(#loc181)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.int<1> : !s32i loc(#loc55)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc55)
    cir.brcond %4 ^bb2, ^bb3 loc(#loc182)
  ^bb2:  // pred: ^bb1
    %5 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc57)
    %6 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc160)
    %7 = cir.load %6 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc58)
    %8 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc59)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc59)
    %10 = cir.call @__isoc99_fscanf(%7, %9, %1) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s32i>) -> !s32i loc(#loc57)
    cir.br ^bb3 loc(#loc54)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc54)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc183)
  ^bb5:  // pred: ^bb4
    %11 = cir.const #cir.int<0> : !s32i loc(#loc62)
    %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc62)
    cir.brcond %12 ^bb6, ^bb7 loc(#loc184)
  ^bb6:  // pred: ^bb5
    %13 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc43)
    %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc43)
    cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc66)
    cir.br ^bb13 loc(#loc64)
  ^bb7:  // pred: ^bb5
    cir.br ^bb8 loc(#loc185)
  ^bb8:  // pred: ^bb7
    %15 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc69)
    %16 = cir.const #cir.int<2147483647> : !s32i loc(#loc70)
    %17 = cir.cmp(lt, %15, %16) : !s32i, !cir.bool loc(#loc186)
    cir.brcond %17 ^bb9, ^bb10 loc(#loc187)
  ^bb9:  // pred: ^bb8
    %18 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc74)
    %19 = cir.const #cir.int<1> : !s32i loc(#loc48)
    %20 = cir.binop(add, %18, %19) nsw : !s32i loc(#loc74)
    cir.store %20, %0 : !s32i, !cir.ptr<!s32i> loc(#loc178)
    %21 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc75)
    cir.call @printIntLine(%21) : (!s32i) -> () loc(#loc76)
    cir.br ^bb11 loc(#loc72)
  ^bb10:  // pred: ^bb8
    %22 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc44)
    %23 = cir.cast(array_to_ptrdecay, %22 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc44)
    cir.call @printLine(%23) : (!cir.ptr<!s8i>) -> () loc(#loc77)
    cir.br ^bb11 loc(#loc68)
  ^bb11:  // 2 preds: ^bb9, ^bb10
    cir.br ^bb12 loc(#loc68)
  ^bb12:  // pred: ^bb11
    cir.br ^bb13 loc(#loc61)
  ^bb13:  // 2 preds: ^bb6, ^bb12
    cir.br ^bb14 loc(#loc61)
  ^bb14:  // pred: ^bb13
    cir.return loc(#loc46)
  } loc(#loc177)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc189)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc190)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc84)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc191)
    cir.br ^bb1 loc(#loc192)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.int<1> : !s32i loc(#loc88)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc88)
    cir.brcond %4 ^bb2, ^bb3 loc(#loc193)
  ^bb2:  // pred: ^bb1
    %5 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc90)
    %6 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc160)
    %7 = cir.load %6 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc91)
    %8 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc92)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc92)
    %10 = cir.call @__isoc99_fscanf(%7, %9, %1) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s32i>) -> !s32i loc(#loc90)
    cir.br ^bb3 loc(#loc87)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc87)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc194)
  ^bb5:  // pred: ^bb4
    %11 = cir.const #cir.int<1> : !s32i loc(#loc95)
    %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc95)
    cir.brcond %12 ^bb6, ^bb12 loc(#loc195)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc196)
  ^bb7:  // pred: ^bb6
    %13 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc99)
    %14 = cir.const #cir.int<2147483647> : !s32i loc(#loc100)
    %15 = cir.cmp(lt, %13, %14) : !s32i, !cir.bool loc(#loc197)
    cir.brcond %15 ^bb8, ^bb9 loc(#loc198)
  ^bb8:  // pred: ^bb7
    %16 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc104)
    %17 = cir.const #cir.int<1> : !s32i loc(#loc81)
    %18 = cir.binop(add, %16, %17) nsw : !s32i loc(#loc104)
    cir.store %18, %0 : !s32i, !cir.ptr<!s32i> loc(#loc189)
    %19 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc105)
    cir.call @printIntLine(%19) : (!s32i) -> () loc(#loc106)
    cir.br ^bb10 loc(#loc102)
  ^bb9:  // pred: ^bb7
    %20 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc107)
    %21 = cir.cast(array_to_ptrdecay, %20 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc107)
    cir.call @printLine(%21) : (!cir.ptr<!s8i>) -> () loc(#loc108)
    cir.br ^bb10 loc(#loc98)
  ^bb10:  // 2 preds: ^bb8, ^bb9
    cir.br ^bb11 loc(#loc98)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc94)
  ^bb12:  // 2 preds: ^bb5, ^bb11
    cir.br ^bb13 loc(#loc94)
  ^bb13:  // pred: ^bb12
    cir.return loc(#loc79)
  } loc(#loc188)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc200)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc201)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc115)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc202)
    cir.br ^bb1 loc(#loc203)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.int<0> : !s32i loc(#loc119)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc119)
    cir.brcond %4 ^bb2, ^bb3 loc(#loc204)
  ^bb2:  // pred: ^bb1
    %5 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc123)
    %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc123)
    cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc124)
    cir.br ^bb4 loc(#loc121)
  ^bb3:  // pred: ^bb1
    %7 = cir.const #cir.int<2> : !s32i loc(#loc125)
    cir.store %7, %1 : !s32i, !cir.ptr<!s32i> loc(#loc205)
    cir.br ^bb4 loc(#loc118)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc118)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc206)
  ^bb6:  // pred: ^bb5
    %8 = cir.const #cir.int<1> : !s32i loc(#loc129)
    %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc129)
    cir.brcond %9 ^bb7, ^bb10 loc(#loc207)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc208)
  ^bb8:  // pred: ^bb7
    %10 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc133)
    %11 = cir.const #cir.int<1> : !s32i loc(#loc112)
    %12 = cir.binop(add, %10, %11) nsw : !s32i loc(#loc133)
    cir.store %12, %0 : !s32i, !cir.ptr<!s32i> loc(#loc200)
    %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc134)
    cir.call @printIntLine(%13) : (!s32i) -> () loc(#loc135)
    cir.br ^bb9 loc(#loc132)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc128)
  ^bb10:  // 2 preds: ^bb6, ^bb9
    cir.br ^bb11 loc(#loc128)
  ^bb11:  // pred: ^bb10
    cir.return loc(#loc110)
  } loc(#loc199)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc210)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc211)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc142)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc212)
    cir.br ^bb1 loc(#loc213)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.int<1> : !s32i loc(#loc146)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc146)
    cir.brcond %4 ^bb2, ^bb3 loc(#loc214)
  ^bb2:  // pred: ^bb1
    %5 = cir.const #cir.int<2> : !s32i loc(#loc148)
    cir.store %5, %1 : !s32i, !cir.ptr<!s32i> loc(#loc215)
    cir.br ^bb3 loc(#loc145)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc145)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc216)
  ^bb5:  // pred: ^bb4
    %6 = cir.const #cir.int<1> : !s32i loc(#loc152)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc152)
    cir.brcond %7 ^bb6, ^bb9 loc(#loc217)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc218)
  ^bb7:  // pred: ^bb6
    %8 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc156)
    %9 = cir.const #cir.int<1> : !s32i loc(#loc139)
    %10 = cir.binop(add, %8, %9) nsw : !s32i loc(#loc156)
    cir.store %10, %0 : !s32i, !cir.ptr<!s32i> loc(#loc210)
    %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc157)
    cir.call @printIntLine(%11) : (!s32i) -> () loc(#loc158)
    cir.br ^bb8 loc(#loc155)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc151)
  ^bb9:  // 2 preds: ^bb5, ^bb8
    cir.br ^bb10 loc(#loc151)
  ^bb10:  // pred: ^bb9
    cir.return loc(#loc137)
  } loc(#loc209)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_fscanf_add_04.c":0:0)
#loc1 = loc("/usr/include/stdio.h":463:1)
#loc2 = loc("/usr/include/stdio.h":465:33)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("CWE190_Integer_Overflow__int_fscanf_add_04.c":36:23)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc8 = loc("CWE190_Integer_Overflow__int_fscanf_add_04.c":28:1)
#loc9 = loc("CWE190_Integer_Overflow__int_fscanf_add_04.c":46:1)
#loc10 = loc("CWE190_Integer_Overflow__int_fscanf_add_04.c":42:13)
#loc11 = loc("CWE190_Integer_Overflow__int_fscanf_add_04.c":42:33)
#loc12 = loc("CWE190_Integer_Overflow__int_fscanf_add_04.c":30:5)
#loc13 = loc("CWE190_Integer_Overflow__int_fscanf_add_04.c":30:9)
#loc14 = loc("CWE190_Integer_Overflow__int_fscanf_add_04.c":32:12)
#loc15 = loc("CWE190_Integer_Overflow__int_fscanf_add_04.c":32:5)
#loc16 = loc("CWE190_Integer_Overflow__int_fscanf_add_04.c":33:5)
#loc17 = loc("CWE190_Integer_Overflow__int_fscanf_add_04.c":37:5)
#loc18 = loc("CWE190_Integer_Overflow__int_fscanf_add_04.c":33:8)
#loc19 = loc("CWE190_Integer_Overflow__int_fscanf_add_04.c":34:5)
#loc20 = loc("CWE190_Integer_Overflow__int_fscanf_add_04.c":36:9)
#loc21 = loc("CWE190_Integer_Overflow__int_fscanf_add_04.c":36:16)
#loc22 = loc("CWE190_Integer_Overflow__int_fscanf_add_04.c":38:5)
#loc23 = loc("CWE190_Integer_Overflow__int_fscanf_add_04.c":45:5)
#loc24 = loc("CWE190_Integer_Overflow__int_fscanf_add_04.c":38:8)
#loc25 = loc("CWE190_Integer_Overflow__int_fscanf_add_04.c":39:5)
#loc26 = loc("CWE190_Integer_Overflow__int_fscanf_add_04.c":40:9)
#loc27 = loc("CWE190_Integer_Overflow__int_fscanf_add_04.c":44:9)
#loc28 = loc("CWE190_Integer_Overflow__int_fscanf_add_04.c":42:26)
#loc29 = loc("CWE190_Integer_Overflow__int_fscanf_add_04.c":43:26)
#loc30 = loc("CWE190_Integer_Overflow__int_fscanf_add_04.c":43:13)
#loc31 = loc("CWE190_Integer_Overflow__int_fscanf_add_04.c":156:1)
#loc32 = loc("CWE190_Integer_Overflow__int_fscanf_add_04.c":162:1)
#loc33 = loc("CWE190_Integer_Overflow__int_fscanf_add_04.c":158:5)
#loc34 = loc("CWE190_Integer_Overflow__int_fscanf_add_04.c":158:14)
#loc35 = loc("CWE190_Integer_Overflow__int_fscanf_add_04.c":159:5)
#loc36 = loc("CWE190_Integer_Overflow__int_fscanf_add_04.c":159:14)
#loc37 = loc("CWE190_Integer_Overflow__int_fscanf_add_04.c":160:5)
#loc38 = loc("CWE190_Integer_Overflow__int_fscanf_add_04.c":160:14)
#loc39 = loc("CWE190_Integer_Overflow__int_fscanf_add_04.c":161:5)
#loc40 = loc("CWE190_Integer_Overflow__int_fscanf_add_04.c":161:14)
#loc41 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc42 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc43 = loc("CWE190_Integer_Overflow__int_fscanf_add_04.c":66:19)
#loc44 = loc("CWE190_Integer_Overflow__int_fscanf_add_04.c":78:23)
#loc45 = loc("CWE190_Integer_Overflow__int_fscanf_add_04.c":53:1)
#loc46 = loc("CWE190_Integer_Overflow__int_fscanf_add_04.c":81:1)
#loc47 = loc("CWE190_Integer_Overflow__int_fscanf_add_04.c":73:13)
#loc48 = loc("CWE190_Integer_Overflow__int_fscanf_add_04.c":73:33)
#loc49 = loc("CWE190_Integer_Overflow__int_fscanf_add_04.c":55:5)
#loc50 = loc("CWE190_Integer_Overflow__int_fscanf_add_04.c":55:9)
#loc51 = loc("CWE190_Integer_Overflow__int_fscanf_add_04.c":57:12)
#loc52 = loc("CWE190_Integer_Overflow__int_fscanf_add_04.c":57:5)
#loc53 = loc("CWE190_Integer_Overflow__int_fscanf_add_04.c":58:5)
#loc54 = loc("CWE190_Integer_Overflow__int_fscanf_add_04.c":62:5)
#loc55 = loc("CWE190_Integer_Overflow__int_fscanf_add_04.c":58:8)
#loc56 = loc("CWE190_Integer_Overflow__int_fscanf_add_04.c":59:5)
#loc57 = loc("CWE190_Integer_Overflow__int_fscanf_add_04.c":61:9)
#loc58 = loc("CWE190_Integer_Overflow__int_fscanf_add_04.c":61:16)
#loc59 = loc("CWE190_Integer_Overflow__int_fscanf_add_04.c":61:23)
#loc60 = loc("CWE190_Integer_Overflow__int_fscanf_add_04.c":63:5)
#loc61 = loc("CWE190_Integer_Overflow__int_fscanf_add_04.c":80:5)
#loc62 = loc("CWE190_Integer_Overflow__int_fscanf_add_04.c":63:8)
#loc63 = loc("CWE190_Integer_Overflow__int_fscanf_add_04.c":64:5)
#loc64 = loc("CWE190_Integer_Overflow__int_fscanf_add_04.c":67:5)
#loc65 = loc("CWE190_Integer_Overflow__int_fscanf_add_04.c":69:5)
#loc66 = loc("CWE190_Integer_Overflow__int_fscanf_add_04.c":66:9)
#loc67 = loc("CWE190_Integer_Overflow__int_fscanf_add_04.c":71:9)
#loc68 = loc("CWE190_Integer_Overflow__int_fscanf_add_04.c":79:9)
#loc69 = loc("CWE190_Integer_Overflow__int_fscanf_add_04.c":71:13)
#loc70 = loc("CWE190_Integer_Overflow__int_fscanf_add_04.c":71:20)
#loc71 = loc("CWE190_Integer_Overflow__int_fscanf_add_04.c":72:9)
#loc72 = loc("CWE190_Integer_Overflow__int_fscanf_add_04.c":75:9)
#loc73 = loc("CWE190_Integer_Overflow__int_fscanf_add_04.c":77:9)
#loc74 = loc("CWE190_Integer_Overflow__int_fscanf_add_04.c":73:26)
#loc75 = loc("CWE190_Integer_Overflow__int_fscanf_add_04.c":74:26)
#loc76 = loc("CWE190_Integer_Overflow__int_fscanf_add_04.c":74:13)
#loc77 = loc("CWE190_Integer_Overflow__int_fscanf_add_04.c":78:13)
#loc78 = loc("CWE190_Integer_Overflow__int_fscanf_add_04.c":84:1)
#loc79 = loc("CWE190_Integer_Overflow__int_fscanf_add_04.c":107:1)
#loc80 = loc("CWE190_Integer_Overflow__int_fscanf_add_04.c":99:13)
#loc81 = loc("CWE190_Integer_Overflow__int_fscanf_add_04.c":99:33)
#loc82 = loc("CWE190_Integer_Overflow__int_fscanf_add_04.c":86:5)
#loc83 = loc("CWE190_Integer_Overflow__int_fscanf_add_04.c":86:9)
#loc84 = loc("CWE190_Integer_Overflow__int_fscanf_add_04.c":88:12)
#loc85 = loc("CWE190_Integer_Overflow__int_fscanf_add_04.c":88:5)
#loc86 = loc("CWE190_Integer_Overflow__int_fscanf_add_04.c":89:5)
#loc87 = loc("CWE190_Integer_Overflow__int_fscanf_add_04.c":93:5)
#loc88 = loc("CWE190_Integer_Overflow__int_fscanf_add_04.c":89:8)
#loc89 = loc("CWE190_Integer_Overflow__int_fscanf_add_04.c":90:5)
#loc90 = loc("CWE190_Integer_Overflow__int_fscanf_add_04.c":92:9)
#loc91 = loc("CWE190_Integer_Overflow__int_fscanf_add_04.c":92:16)
#loc92 = loc("CWE190_Integer_Overflow__int_fscanf_add_04.c":92:23)
#loc93 = loc("CWE190_Integer_Overflow__int_fscanf_add_04.c":94:5)
#loc94 = loc("CWE190_Integer_Overflow__int_fscanf_add_04.c":106:5)
#loc95 = loc("CWE190_Integer_Overflow__int_fscanf_add_04.c":94:8)
#loc96 = loc("CWE190_Integer_Overflow__int_fscanf_add_04.c":95:5)
#loc97 = loc("CWE190_Integer_Overflow__int_fscanf_add_04.c":97:9)
#loc98 = loc("CWE190_Integer_Overflow__int_fscanf_add_04.c":105:9)
#loc99 = loc("CWE190_Integer_Overflow__int_fscanf_add_04.c":97:13)
#loc100 = loc("CWE190_Integer_Overflow__int_fscanf_add_04.c":97:20)
#loc101 = loc("CWE190_Integer_Overflow__int_fscanf_add_04.c":98:9)
#loc102 = loc("CWE190_Integer_Overflow__int_fscanf_add_04.c":101:9)
#loc103 = loc("CWE190_Integer_Overflow__int_fscanf_add_04.c":103:9)
#loc104 = loc("CWE190_Integer_Overflow__int_fscanf_add_04.c":99:26)
#loc105 = loc("CWE190_Integer_Overflow__int_fscanf_add_04.c":100:26)
#loc106 = loc("CWE190_Integer_Overflow__int_fscanf_add_04.c":100:13)
#loc107 = loc("CWE190_Integer_Overflow__int_fscanf_add_04.c":104:23)
#loc108 = loc("CWE190_Integer_Overflow__int_fscanf_add_04.c":104:13)
#loc109 = loc("CWE190_Integer_Overflow__int_fscanf_add_04.c":110:1)
#loc110 = loc("CWE190_Integer_Overflow__int_fscanf_add_04.c":133:1)
#loc111 = loc("CWE190_Integer_Overflow__int_fscanf_add_04.c":129:13)
#loc112 = loc("CWE190_Integer_Overflow__int_fscanf_add_04.c":129:33)
#loc113 = loc("CWE190_Integer_Overflow__int_fscanf_add_04.c":112:5)
#loc114 = loc("CWE190_Integer_Overflow__int_fscanf_add_04.c":112:9)
#loc115 = loc("CWE190_Integer_Overflow__int_fscanf_add_04.c":114:12)
#loc116 = loc("CWE190_Integer_Overflow__int_fscanf_add_04.c":114:5)
#loc117 = loc("CWE190_Integer_Overflow__int_fscanf_add_04.c":115:5)
#loc118 = loc("CWE190_Integer_Overflow__int_fscanf_add_04.c":124:5)
#loc119 = loc("CWE190_Integer_Overflow__int_fscanf_add_04.c":115:8)
#loc120 = loc("CWE190_Integer_Overflow__int_fscanf_add_04.c":116:5)
#loc121 = loc("CWE190_Integer_Overflow__int_fscanf_add_04.c":119:5)
#loc122 = loc("CWE190_Integer_Overflow__int_fscanf_add_04.c":121:5)
#loc123 = loc("CWE190_Integer_Overflow__int_fscanf_add_04.c":118:19)
#loc124 = loc("CWE190_Integer_Overflow__int_fscanf_add_04.c":118:9)
#loc125 = loc("CWE190_Integer_Overflow__int_fscanf_add_04.c":123:16)
#loc126 = loc("CWE190_Integer_Overflow__int_fscanf_add_04.c":123:9)
#loc127 = loc("CWE190_Integer_Overflow__int_fscanf_add_04.c":125:5)
#loc128 = loc("CWE190_Integer_Overflow__int_fscanf_add_04.c":132:5)
#loc129 = loc("CWE190_Integer_Overflow__int_fscanf_add_04.c":125:8)
#loc130 = loc("CWE190_Integer_Overflow__int_fscanf_add_04.c":126:5)
#loc131 = loc("CWE190_Integer_Overflow__int_fscanf_add_04.c":127:9)
#loc132 = loc("CWE190_Integer_Overflow__int_fscanf_add_04.c":131:9)
#loc133 = loc("CWE190_Integer_Overflow__int_fscanf_add_04.c":129:26)
#loc134 = loc("CWE190_Integer_Overflow__int_fscanf_add_04.c":130:26)
#loc135 = loc("CWE190_Integer_Overflow__int_fscanf_add_04.c":130:13)
#loc136 = loc("CWE190_Integer_Overflow__int_fscanf_add_04.c":136:1)
#loc137 = loc("CWE190_Integer_Overflow__int_fscanf_add_04.c":154:1)
#loc138 = loc("CWE190_Integer_Overflow__int_fscanf_add_04.c":150:13)
#loc139 = loc("CWE190_Integer_Overflow__int_fscanf_add_04.c":150:33)
#loc140 = loc("CWE190_Integer_Overflow__int_fscanf_add_04.c":138:5)
#loc141 = loc("CWE190_Integer_Overflow__int_fscanf_add_04.c":138:9)
#loc142 = loc("CWE190_Integer_Overflow__int_fscanf_add_04.c":140:12)
#loc143 = loc("CWE190_Integer_Overflow__int_fscanf_add_04.c":140:5)
#loc144 = loc("CWE190_Integer_Overflow__int_fscanf_add_04.c":141:5)
#loc145 = loc("CWE190_Integer_Overflow__int_fscanf_add_04.c":145:5)
#loc146 = loc("CWE190_Integer_Overflow__int_fscanf_add_04.c":141:8)
#loc147 = loc("CWE190_Integer_Overflow__int_fscanf_add_04.c":142:5)
#loc148 = loc("CWE190_Integer_Overflow__int_fscanf_add_04.c":144:16)
#loc149 = loc("CWE190_Integer_Overflow__int_fscanf_add_04.c":144:9)
#loc150 = loc("CWE190_Integer_Overflow__int_fscanf_add_04.c":146:5)
#loc151 = loc("CWE190_Integer_Overflow__int_fscanf_add_04.c":153:5)
#loc152 = loc("CWE190_Integer_Overflow__int_fscanf_add_04.c":146:8)
#loc153 = loc("CWE190_Integer_Overflow__int_fscanf_add_04.c":147:5)
#loc154 = loc("CWE190_Integer_Overflow__int_fscanf_add_04.c":148:9)
#loc155 = loc("CWE190_Integer_Overflow__int_fscanf_add_04.c":152:9)
#loc156 = loc("CWE190_Integer_Overflow__int_fscanf_add_04.c":150:26)
#loc157 = loc("CWE190_Integer_Overflow__int_fscanf_add_04.c":151:26)
#loc158 = loc("CWE190_Integer_Overflow__int_fscanf_add_04.c":151:13)
#loc159 = loc(fused[#loc1, #loc2])
#loc160 = loc(fused[#loc3, #loc4])
#loc161 = loc(fused[#loc6, #loc7])
#loc162 = loc(fused[#loc8, #loc9])
#loc163 = loc(fused[#loc10, #loc11])
#loc164 = loc(fused[#loc12, #loc13])
#loc165 = loc(fused[#loc15, #loc14])
#loc166 = loc(fused[#loc16, #loc17])
#loc167 = loc(fused[#loc19, #loc17])
#loc168 = loc(fused[#loc22, #loc23])
#loc169 = loc(fused[#loc25, #loc23])
#loc170 = loc(fused[#loc26, #loc27])
#loc171 = loc(fused[#loc31, #loc32])
#loc172 = loc(fused[#loc33, #loc34])
#loc173 = loc(fused[#loc35, #loc36])
#loc174 = loc(fused[#loc37, #loc38])
#loc175 = loc(fused[#loc39, #loc40])
#loc176 = loc(fused[#loc41, #loc42])
#loc177 = loc(fused[#loc45, #loc46])
#loc178 = loc(fused[#loc47, #loc48])
#loc179 = loc(fused[#loc49, #loc50])
#loc180 = loc(fused[#loc52, #loc51])
#loc181 = loc(fused[#loc53, #loc54])
#loc182 = loc(fused[#loc56, #loc54])
#loc183 = loc(fused[#loc60, #loc61])
#loc184 = loc(fused[#loc63, #loc64, #loc65, #loc61])
#loc185 = loc(fused[#loc67, #loc68])
#loc186 = loc(fused[#loc69, #loc70])
#loc187 = loc(fused[#loc71, #loc72, #loc73, #loc68])
#loc188 = loc(fused[#loc78, #loc79])
#loc189 = loc(fused[#loc80, #loc81])
#loc190 = loc(fused[#loc82, #loc83])
#loc191 = loc(fused[#loc85, #loc84])
#loc192 = loc(fused[#loc86, #loc87])
#loc193 = loc(fused[#loc89, #loc87])
#loc194 = loc(fused[#loc93, #loc94])
#loc195 = loc(fused[#loc96, #loc94])
#loc196 = loc(fused[#loc97, #loc98])
#loc197 = loc(fused[#loc99, #loc100])
#loc198 = loc(fused[#loc101, #loc102, #loc103, #loc98])
#loc199 = loc(fused[#loc109, #loc110])
#loc200 = loc(fused[#loc111, #loc112])
#loc201 = loc(fused[#loc113, #loc114])
#loc202 = loc(fused[#loc116, #loc115])
#loc203 = loc(fused[#loc117, #loc118])
#loc204 = loc(fused[#loc120, #loc121, #loc122, #loc118])
#loc205 = loc(fused[#loc126, #loc125])
#loc206 = loc(fused[#loc127, #loc128])
#loc207 = loc(fused[#loc130, #loc128])
#loc208 = loc(fused[#loc131, #loc132])
#loc209 = loc(fused[#loc136, #loc137])
#loc210 = loc(fused[#loc138, #loc139])
#loc211 = loc(fused[#loc140, #loc141])
#loc212 = loc(fused[#loc143, #loc142])
#loc213 = loc(fused[#loc144, #loc145])
#loc214 = loc(fused[#loc147, #loc145])
#loc215 = loc(fused[#loc149, #loc148])
#loc216 = loc(fused[#loc150, #loc151])
#loc217 = loc(fused[#loc153, #loc151])
#loc218 = loc(fused[#loc154, #loc155])
