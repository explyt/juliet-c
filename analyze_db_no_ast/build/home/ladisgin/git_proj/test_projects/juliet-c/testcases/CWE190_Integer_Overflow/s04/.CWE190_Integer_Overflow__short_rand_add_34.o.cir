!s16i = !cir.int<s, 16>
!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
!ty_CWE190_Integer_Overflow__short_rand_add_34_unionType = !cir.struct<union "CWE190_Integer_Overflow__short_rand_add_34_unionType" {!s16i, !s16i}>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_rand_add_34.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @rand() -> !s32i extra(#fn_attr) loc(#loc92)
  cir.func private  @printIntLine(!s32i) loc(#loc93)
  cir.func no_proto  @CWE190_Integer_Overflow__short_rand_add_34_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc95)
    %1 = cir.alloca !ty_CWE190_Integer_Overflow__short_rand_add_34_unionType, !cir.ptr<!ty_CWE190_Integer_Overflow__short_rand_add_34_unionType>, ["myUnion"] {alignment = 2 : i64} loc(#loc96)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc11)
    %3 = cir.cast(integral, %2 : !s32i), !s16i loc(#loc11)
    cir.store %3, %0 : !s16i, !cir.ptr<!s16i> loc(#loc97)
    %4 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
    %5 = cir.const #cir.int<1> : !s32i loc(#loc13)
    %6 = cir.binop(and, %4, %5) : !s32i loc(#loc13)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc13)
    %8 = cir.ternary(%7, true {
      %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
      %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc13)
      %15 = cir.const #cir.int<30> : !s32i loc(#loc13)
      %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc13)
      %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
      %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc13)
      %19 = cir.const #cir.int<15> : !s32i loc(#loc13)
      %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc13)
      %21 = cir.binop(xor, %16, %20) : !u32i loc(#loc13)
      %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
      %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc13)
      %24 = cir.binop(xor, %21, %23) : !u32i loc(#loc13)
      cir.yield %24 : !u32i loc(#loc13)
    }, false {
      %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
      %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc13)
      %15 = cir.const #cir.int<30> : !s32i loc(#loc13)
      %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc13)
      %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
      %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc13)
      %19 = cir.const #cir.int<15> : !s32i loc(#loc13)
      %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc13)
      %21 = cir.binop(xor, %16, %20) : !u32i loc(#loc13)
      %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
      %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc13)
      %24 = cir.binop(xor, %21, %23) : !u32i loc(#loc13)
      %25 = cir.unary(minus, %24) : !u32i, !u32i loc(#loc13)
      %26 = cir.const #cir.int<1> : !s32i loc(#loc13)
      %27 = cir.cast(integral, %26 : !s32i), !u32i loc(#loc13)
      %28 = cir.binop(sub, %25, %27) : !u32i loc(#loc13)
      cir.yield %28 : !u32i loc(#loc13)
    }) : (!cir.bool) -> !u32i loc(#loc13)
    %9 = cir.cast(integral, %8 : !u32i), !s32i loc(#loc13)
    %10 = cir.cast(integral, %9 : !s32i), !s16i loc(#loc13)
    cir.store %10, %0 : !s16i, !cir.ptr<!s16i> loc(#loc98)
    %11 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc15)
    %12 = cir.get_member %1[0] {name = "unionFirst"} : !cir.ptr<!ty_CWE190_Integer_Overflow__short_rand_add_34_unionType> -> !cir.ptr<!s16i> loc(#loc16)
    cir.store %11, %12 : !s16i, !cir.ptr<!s16i> loc(#loc99)
    cir.scope {
      %13 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data", init] {alignment = 2 : i64} loc(#loc101)
      %14 = cir.get_member %1[1] {name = "unionSecond"} : !cir.ptr<!ty_CWE190_Integer_Overflow__short_rand_add_34_unionType> -> !cir.ptr<!s16i> loc(#loc22)
      %15 = cir.load %14 : !cir.ptr<!s16i>, !s16i loc(#loc21)
      cir.store %15, %13 : !s16i, !cir.ptr<!s16i> loc(#loc101)
      cir.scope {
        %16 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc103)
        %17 = cir.load %13 : !cir.ptr<!s16i>, !s16i loc(#loc27)
        %18 = cir.cast(integral, %17 : !s16i), !s32i loc(#loc27)
        %19 = cir.const #cir.int<1> : !s32i loc(#loc26)
        %20 = cir.binop(add, %18, %19) nsw : !s32i loc(#loc27)
        %21 = cir.cast(integral, %20 : !s32i), !s16i loc(#loc27)
        cir.store %21, %16 : !s16i, !cir.ptr<!s16i> loc(#loc103)
        %22 = cir.load %16 : !cir.ptr<!s16i>, !s16i loc(#loc28)
        %23 = cir.cast(integral, %22 : !s16i), !s32i loc(#loc28)
        cir.call @printIntLine(%23) : (!s32i) -> () loc(#loc29)
      } loc(#loc102)
    } loc(#loc100)
    cir.return loc(#loc6)
  } loc(#loc94)
  cir.func no_proto  @CWE190_Integer_Overflow__short_rand_add_34_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc105)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc32)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc106)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc34)
    cir.return loc(#loc31)
  } loc(#loc104)
  cir.func no_proto internal private  @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc108)
    %1 = cir.alloca !ty_CWE190_Integer_Overflow__short_rand_add_34_unionType, !cir.ptr<!ty_CWE190_Integer_Overflow__short_rand_add_34_unionType>, ["myUnion"] {alignment = 2 : i64} loc(#loc109)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc42)
    %3 = cir.cast(integral, %2 : !s32i), !s16i loc(#loc42)
    cir.store %3, %0 : !s16i, !cir.ptr<!s16i> loc(#loc110)
    %4 = cir.const #cir.int<2> : !s32i loc(#loc44)
    %5 = cir.cast(integral, %4 : !s32i), !s16i loc(#loc44)
    cir.store %5, %0 : !s16i, !cir.ptr<!s16i> loc(#loc111)
    %6 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc46)
    %7 = cir.get_member %1[0] {name = "unionFirst"} : !cir.ptr<!ty_CWE190_Integer_Overflow__short_rand_add_34_unionType> -> !cir.ptr<!s16i> loc(#loc16)
    cir.store %6, %7 : !s16i, !cir.ptr<!s16i> loc(#loc112)
    cir.scope {
      %8 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data", init] {alignment = 2 : i64} loc(#loc114)
      %9 = cir.get_member %1[1] {name = "unionSecond"} : !cir.ptr<!ty_CWE190_Integer_Overflow__short_rand_add_34_unionType> -> !cir.ptr<!s16i> loc(#loc22)
      %10 = cir.load %9 : !cir.ptr<!s16i>, !s16i loc(#loc51)
      cir.store %10, %8 : !s16i, !cir.ptr<!s16i> loc(#loc114)
      cir.scope {
        %11 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc116)
        %12 = cir.load %8 : !cir.ptr<!s16i>, !s16i loc(#loc56)
        %13 = cir.cast(integral, %12 : !s16i), !s32i loc(#loc56)
        %14 = cir.const #cir.int<1> : !s32i loc(#loc55)
        %15 = cir.binop(add, %13, %14) nsw : !s32i loc(#loc56)
        %16 = cir.cast(integral, %15 : !s32i), !s16i loc(#loc56)
        cir.store %16, %11 : !s16i, !cir.ptr<!s16i> loc(#loc116)
        %17 = cir.load %11 : !cir.ptr<!s16i>, !s16i loc(#loc57)
        %18 = cir.cast(integral, %17 : !s16i), !s32i loc(#loc57)
        cir.call @printIntLine(%18) : (!s32i) -> () loc(#loc58)
      } loc(#loc115)
    } loc(#loc113)
    cir.return loc(#loc37)
  } loc(#loc107)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc117)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc61)
  cir.func no_proto internal private  @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc119)
    %1 = cir.alloca !ty_CWE190_Integer_Overflow__short_rand_add_34_unionType, !cir.ptr<!ty_CWE190_Integer_Overflow__short_rand_add_34_unionType>, ["myUnion"] {alignment = 2 : i64} loc(#loc120)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc68)
    %3 = cir.cast(integral, %2 : !s32i), !s16i loc(#loc68)
    cir.store %3, %0 : !s16i, !cir.ptr<!s16i> loc(#loc121)
    %4 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc70)
    %5 = cir.const #cir.int<1> : !s32i loc(#loc70)
    %6 = cir.binop(and, %4, %5) : !s32i loc(#loc70)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc70)
    %8 = cir.ternary(%7, true {
      %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc70)
      %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc70)
      %15 = cir.const #cir.int<30> : !s32i loc(#loc70)
      %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc70)
      %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc70)
      %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc70)
      %19 = cir.const #cir.int<15> : !s32i loc(#loc70)
      %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc70)
      %21 = cir.binop(xor, %16, %20) : !u32i loc(#loc70)
      %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc70)
      %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc70)
      %24 = cir.binop(xor, %21, %23) : !u32i loc(#loc70)
      cir.yield %24 : !u32i loc(#loc70)
    }, false {
      %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc70)
      %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc70)
      %15 = cir.const #cir.int<30> : !s32i loc(#loc70)
      %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc70)
      %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc70)
      %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc70)
      %19 = cir.const #cir.int<15> : !s32i loc(#loc70)
      %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc70)
      %21 = cir.binop(xor, %16, %20) : !u32i loc(#loc70)
      %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc70)
      %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc70)
      %24 = cir.binop(xor, %21, %23) : !u32i loc(#loc70)
      %25 = cir.unary(minus, %24) : !u32i, !u32i loc(#loc70)
      %26 = cir.const #cir.int<1> : !s32i loc(#loc70)
      %27 = cir.cast(integral, %26 : !s32i), !u32i loc(#loc70)
      %28 = cir.binop(sub, %25, %27) : !u32i loc(#loc70)
      cir.yield %28 : !u32i loc(#loc70)
    }) : (!cir.bool) -> !u32i loc(#loc70)
    %9 = cir.cast(integral, %8 : !u32i), !s32i loc(#loc70)
    %10 = cir.cast(integral, %9 : !s32i), !s16i loc(#loc70)
    cir.store %10, %0 : !s16i, !cir.ptr<!s16i> loc(#loc122)
    %11 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc72)
    %12 = cir.get_member %1[0] {name = "unionFirst"} : !cir.ptr<!ty_CWE190_Integer_Overflow__short_rand_add_34_unionType> -> !cir.ptr<!s16i> loc(#loc16)
    cir.store %11, %12 : !s16i, !cir.ptr<!s16i> loc(#loc123)
    cir.scope {
      %13 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data", init] {alignment = 2 : i64} loc(#loc125)
      %14 = cir.get_member %1[1] {name = "unionSecond"} : !cir.ptr<!ty_CWE190_Integer_Overflow__short_rand_add_34_unionType> -> !cir.ptr<!s16i> loc(#loc22)
      %15 = cir.load %14 : !cir.ptr<!s16i>, !s16i loc(#loc77)
      cir.store %15, %13 : !s16i, !cir.ptr<!s16i> loc(#loc125)
      cir.scope {
        %16 = cir.load %13 : !cir.ptr<!s16i>, !s16i loc(#loc80)
        %17 = cir.cast(integral, %16 : !s16i), !s32i loc(#loc80)
        %18 = cir.const #cir.int<32767> : !s32i loc(#loc81)
        %19 = cir.cmp(lt, %17, %18) : !s32i, !s32i loc(#loc127)
        %20 = cir.cast(int_to_bool, %19 : !s32i), !cir.bool loc(#loc82)
        cir.if %20 {
          %21 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc129)
          %22 = cir.load %13 : !cir.ptr<!s16i>, !s16i loc(#loc88)
          %23 = cir.cast(integral, %22 : !s16i), !s32i loc(#loc88)
          %24 = cir.const #cir.int<1> : !s32i loc(#loc87)
          %25 = cir.binop(add, %23, %24) nsw : !s32i loc(#loc88)
          %26 = cir.cast(integral, %25 : !s32i), !s16i loc(#loc88)
          cir.store %26, %21 : !s16i, !cir.ptr<!s16i> loc(#loc129)
          %27 = cir.load %21 : !cir.ptr<!s16i>, !s16i loc(#loc89)
          %28 = cir.cast(integral, %27 : !s16i), !s32i loc(#loc89)
          cir.call @printIntLine(%28) : (!s32i) -> () loc(#loc90)
        } else {
          %21 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc61)
          %22 = cir.cast(array_to_ptrdecay, %21 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc61)
          cir.call @printLine(%22) : (!cir.ptr<!s8i>) -> () loc(#loc91)
        } loc(#loc128)
      } loc(#loc126)
    } loc(#loc124)
    cir.return loc(#loc63)
  } loc(#loc118)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_rand_add_34.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc5 = loc("CWE190_Integer_Overflow__short_rand_add_34.c":28:1)
#loc6 = loc("CWE190_Integer_Overflow__short_rand_add_34.c":44:1)
#loc7 = loc("CWE190_Integer_Overflow__short_rand_add_34.c":30:5)
#loc8 = loc("CWE190_Integer_Overflow__short_rand_add_34.c":30:11)
#loc9 = loc("CWE190_Integer_Overflow__short_rand_add_34.c":31:5)
#loc10 = loc("CWE190_Integer_Overflow__short_rand_add_34.c":31:58)
#loc11 = loc("CWE190_Integer_Overflow__short_rand_add_34.c":32:12)
#loc12 = loc("CWE190_Integer_Overflow__short_rand_add_34.c":32:5)
#loc13 = loc("CWE190_Integer_Overflow__short_rand_add_34.c":34:19)
#loc14 = loc("CWE190_Integer_Overflow__short_rand_add_34.c":34:5)
#loc15 = loc("CWE190_Integer_Overflow__short_rand_add_34.c":35:26)
#loc16 = loc("CWE190_Integer_Overflow__short_rand_add_34.c":22:11)
#loc17 = loc("CWE190_Integer_Overflow__short_rand_add_34.c":35:5)
#loc18 = loc("CWE190_Integer_Overflow__short_rand_add_34.c":36:5)
#loc19 = loc("CWE190_Integer_Overflow__short_rand_add_34.c":43:5)
#loc20 = loc("CWE190_Integer_Overflow__short_rand_add_34.c":37:9)
#loc21 = loc("CWE190_Integer_Overflow__short_rand_add_34.c":37:30)
#loc22 = loc("CWE190_Integer_Overflow__short_rand_add_34.c":23:11)
#loc23 = loc("CWE190_Integer_Overflow__short_rand_add_34.c":38:9)
#loc24 = loc("CWE190_Integer_Overflow__short_rand_add_34.c":42:9)
#loc25 = loc("CWE190_Integer_Overflow__short_rand_add_34.c":40:13)
#loc26 = loc("CWE190_Integer_Overflow__short_rand_add_34.c":40:35)
#loc27 = loc("CWE190_Integer_Overflow__short_rand_add_34.c":40:28)
#loc28 = loc("CWE190_Integer_Overflow__short_rand_add_34.c":41:26)
#loc29 = loc("CWE190_Integer_Overflow__short_rand_add_34.c":41:13)
#loc30 = loc("CWE190_Integer_Overflow__short_rand_add_34.c":93:1)
#loc31 = loc("CWE190_Integer_Overflow__short_rand_add_34.c":97:1)
#loc32 = loc("CWE190_Integer_Overflow__short_rand_add_34.c":95:5)
#loc33 = loc("CWE190_Integer_Overflow__short_rand_add_34.c":95:13)
#loc34 = loc("CWE190_Integer_Overflow__short_rand_add_34.c":96:5)
#loc35 = loc("CWE190_Integer_Overflow__short_rand_add_34.c":96:13)
#loc36 = loc("CWE190_Integer_Overflow__short_rand_add_34.c":51:1)
#loc37 = loc("CWE190_Integer_Overflow__short_rand_add_34.c":67:1)
#loc38 = loc("CWE190_Integer_Overflow__short_rand_add_34.c":53:5)
#loc39 = loc("CWE190_Integer_Overflow__short_rand_add_34.c":53:11)
#loc40 = loc("CWE190_Integer_Overflow__short_rand_add_34.c":54:5)
#loc41 = loc("CWE190_Integer_Overflow__short_rand_add_34.c":54:58)
#loc42 = loc("CWE190_Integer_Overflow__short_rand_add_34.c":55:12)
#loc43 = loc("CWE190_Integer_Overflow__short_rand_add_34.c":55:5)
#loc44 = loc("CWE190_Integer_Overflow__short_rand_add_34.c":57:12)
#loc45 = loc("CWE190_Integer_Overflow__short_rand_add_34.c":57:5)
#loc46 = loc("CWE190_Integer_Overflow__short_rand_add_34.c":58:26)
#loc47 = loc("CWE190_Integer_Overflow__short_rand_add_34.c":58:5)
#loc48 = loc("CWE190_Integer_Overflow__short_rand_add_34.c":59:5)
#loc49 = loc("CWE190_Integer_Overflow__short_rand_add_34.c":66:5)
#loc50 = loc("CWE190_Integer_Overflow__short_rand_add_34.c":60:9)
#loc51 = loc("CWE190_Integer_Overflow__short_rand_add_34.c":60:30)
#loc52 = loc("CWE190_Integer_Overflow__short_rand_add_34.c":61:9)
#loc53 = loc("CWE190_Integer_Overflow__short_rand_add_34.c":65:9)
#loc54 = loc("CWE190_Integer_Overflow__short_rand_add_34.c":63:13)
#loc55 = loc("CWE190_Integer_Overflow__short_rand_add_34.c":63:35)
#loc56 = loc("CWE190_Integer_Overflow__short_rand_add_34.c":63:28)
#loc57 = loc("CWE190_Integer_Overflow__short_rand_add_34.c":64:26)
#loc58 = loc("CWE190_Integer_Overflow__short_rand_add_34.c":64:13)
#loc59 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc60 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc61 = loc("CWE190_Integer_Overflow__short_rand_add_34.c":88:23)
#loc62 = loc("CWE190_Integer_Overflow__short_rand_add_34.c":70:1)
#loc63 = loc("CWE190_Integer_Overflow__short_rand_add_34.c":91:1)
#loc64 = loc("CWE190_Integer_Overflow__short_rand_add_34.c":72:5)
#loc65 = loc("CWE190_Integer_Overflow__short_rand_add_34.c":72:11)
#loc66 = loc("CWE190_Integer_Overflow__short_rand_add_34.c":73:5)
#loc67 = loc("CWE190_Integer_Overflow__short_rand_add_34.c":73:58)
#loc68 = loc("CWE190_Integer_Overflow__short_rand_add_34.c":74:12)
#loc69 = loc("CWE190_Integer_Overflow__short_rand_add_34.c":74:5)
#loc70 = loc("CWE190_Integer_Overflow__short_rand_add_34.c":76:19)
#loc71 = loc("CWE190_Integer_Overflow__short_rand_add_34.c":76:5)
#loc72 = loc("CWE190_Integer_Overflow__short_rand_add_34.c":77:26)
#loc73 = loc("CWE190_Integer_Overflow__short_rand_add_34.c":77:5)
#loc74 = loc("CWE190_Integer_Overflow__short_rand_add_34.c":78:5)
#loc75 = loc("CWE190_Integer_Overflow__short_rand_add_34.c":90:5)
#loc76 = loc("CWE190_Integer_Overflow__short_rand_add_34.c":79:9)
#loc77 = loc("CWE190_Integer_Overflow__short_rand_add_34.c":79:30)
#loc78 = loc("CWE190_Integer_Overflow__short_rand_add_34.c":81:9)
#loc79 = loc("CWE190_Integer_Overflow__short_rand_add_34.c":89:9)
#loc80 = loc("CWE190_Integer_Overflow__short_rand_add_34.c":81:13)
#loc81 = loc("CWE190_Integer_Overflow__short_rand_add_34.c":81:20)
#loc82 = loc("CWE190_Integer_Overflow__short_rand_add_34.c":81:18)
#loc83 = loc("CWE190_Integer_Overflow__short_rand_add_34.c":82:9)
#loc84 = loc("CWE190_Integer_Overflow__short_rand_add_34.c":85:9)
#loc85 = loc("CWE190_Integer_Overflow__short_rand_add_34.c":87:9)
#loc86 = loc("CWE190_Integer_Overflow__short_rand_add_34.c":83:13)
#loc87 = loc("CWE190_Integer_Overflow__short_rand_add_34.c":83:35)
#loc88 = loc("CWE190_Integer_Overflow__short_rand_add_34.c":83:28)
#loc89 = loc("CWE190_Integer_Overflow__short_rand_add_34.c":84:26)
#loc90 = loc("CWE190_Integer_Overflow__short_rand_add_34.c":84:13)
#loc91 = loc("CWE190_Integer_Overflow__short_rand_add_34.c":88:13)
#loc92 = loc(fused[#loc1, #loc2])
#loc93 = loc(fused[#loc3, #loc4])
#loc94 = loc(fused[#loc5, #loc6])
#loc95 = loc(fused[#loc7, #loc8])
#loc96 = loc(fused[#loc9, #loc10])
#loc97 = loc(fused[#loc12, #loc11])
#loc98 = loc(fused[#loc14, #loc13])
#loc99 = loc(fused[#loc17, #loc15])
#loc100 = loc(fused[#loc18, #loc19])
#loc101 = loc(fused[#loc20, #loc21])
#loc102 = loc(fused[#loc23, #loc24])
#loc103 = loc(fused[#loc25, #loc26])
#loc104 = loc(fused[#loc30, #loc31])
#loc105 = loc(fused[#loc32, #loc33])
#loc106 = loc(fused[#loc34, #loc35])
#loc107 = loc(fused[#loc36, #loc37])
#loc108 = loc(fused[#loc38, #loc39])
#loc109 = loc(fused[#loc40, #loc41])
#loc110 = loc(fused[#loc43, #loc42])
#loc111 = loc(fused[#loc45, #loc44])
#loc112 = loc(fused[#loc47, #loc46])
#loc113 = loc(fused[#loc48, #loc49])
#loc114 = loc(fused[#loc50, #loc51])
#loc115 = loc(fused[#loc52, #loc53])
#loc116 = loc(fused[#loc54, #loc55])
#loc117 = loc(fused[#loc59, #loc60])
#loc118 = loc(fused[#loc62, #loc63])
#loc119 = loc(fused[#loc64, #loc65])
#loc120 = loc(fused[#loc66, #loc67])
#loc121 = loc(fused[#loc69, #loc68])
#loc122 = loc(fused[#loc71, #loc70])
#loc123 = loc(fused[#loc73, #loc72])
#loc124 = loc(fused[#loc74, #loc75])
#loc125 = loc(fused[#loc76, #loc77])
#loc126 = loc(fused[#loc78, #loc79])
#loc127 = loc(fused[#loc80, #loc81])
#loc128 = loc(fused[#loc83, #loc84, #loc85, #loc79])
#loc129 = loc(fused[#loc86, #loc87])
