!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_05.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.global "private" internal dsolocal @staticTrue = #cir.int<1> : !s32i {alignment = 4 : i64} loc(#loc146)
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc147)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc148)
  cir.func private @printIntLine(!s32i) loc(#loc149)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc150)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_05_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc152)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc15)
    cir.store %1, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc153)
    cir.scope {
      %2 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc146)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc19)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc19)
      cir.if %4 {
        %5 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc21)
        %6 = cir.const #cir.int<10> : !s32i loc(#loc22)
        %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc22)
        %8 = cir.call @malloc(%7) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc21)
        %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc156)
        cir.store %9, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc157)
        cir.scope {
          %10 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc27)
          %11 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc28)
          %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc28)
          %13 = cir.cmp(eq, %10, %12) : !cir.ptr<!s32i>, !cir.bool loc(#loc159)
          cir.if %13 {
            %14 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc30)
            %15 = cir.const #cir.int<1> : !s32i loc(#loc31)
            %16 = cir.unary(minus, %15) nsw : !s32i, !s32i loc(#loc32)
            cir.call @exit(%16) : (!s32i) -> () extra(#fn_attr) loc(#loc30)
          } loc(#loc160)
        } loc(#loc158)
      } loc(#loc155)
    } loc(#loc154)
    cir.scope {
      %2 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc162)
      %3 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc162)
      cir.store %3, %2 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc162)
      %4 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc37)
      %5 = cir.cast(bitcast, %4 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc37)
      %6 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc38)
      %7 = cir.cast(bitcast, %6 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc38)
      %8 = cir.const #cir.int<10> : !s32i loc(#loc39)
      %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc39)
      %10 = cir.const #cir.int<4> : !u64i loc(#loc163)
      %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc164)
      cir.libc.memcpy %11 bytes from %7 to %5 : !u64i, !cir.ptr<!void> -> !cir.ptr<!void> loc(#loc165)
      %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc44)
      %13 = cir.const #cir.int<0> : !s32i loc(#loc45)
      %14 = cir.ptr_stride(%12 : !cir.ptr<!s32i>, %13 : !s32i), !cir.ptr<!s32i> loc(#loc46)
      %15 = cir.load %14 : !cir.ptr<!s32i>, !s32i loc(#loc44)
      cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc47)
      %16 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc48)
      %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc49)
      %18 = cir.cast(bitcast, %17 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc49)
      cir.call @free(%18) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc48)
    } loc(#loc161)
    cir.return loc(#loc12)
  } loc(#loc151)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_05_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<()>> loc(#loc167)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc52)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<()>> loc(#loc168)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc54)
    cir.return loc(#loc51)
  } loc(#loc166)
  cir.global "private" internal dsolocal @staticFalse = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc169)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc170)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc60)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc172)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc65)
    cir.store %1, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc173)
    cir.scope {
      %2 = cir.get_global @staticFalse : !cir.ptr<!s32i> loc(#loc169)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc69)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc69)
      cir.if %4 {
        %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc60)
        %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc60)
        cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc73)
      } else {
        %5 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc74)
        %6 = cir.const #cir.int<10> : !s32i loc(#loc75)
        %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc75)
        %8 = cir.const #cir.int<4> : !u64i loc(#loc176)
        %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc177)
        %10 = cir.call @malloc(%9) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc74)
        %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc178)
        cir.store %11, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc179)
        cir.scope {
          %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc82)
          %13 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc83)
          %14 = cir.cast(bitcast, %13 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc83)
          %15 = cir.cmp(eq, %12, %14) : !cir.ptr<!s32i>, !cir.bool loc(#loc181)
          cir.if %15 {
            %16 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc85)
            %17 = cir.const #cir.int<1> : !s32i loc(#loc86)
            %18 = cir.unary(minus, %17) nsw : !s32i, !s32i loc(#loc87)
            cir.call @exit(%18) : (!s32i) -> () extra(#fn_attr) loc(#loc85)
          } loc(#loc182)
        } loc(#loc180)
      } loc(#loc175)
    } loc(#loc174)
    cir.scope {
      %2 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc184)
      %3 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc184)
      cir.store %3, %2 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc184)
      %4 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc92)
      %5 = cir.cast(bitcast, %4 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc92)
      %6 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc93)
      %7 = cir.cast(bitcast, %6 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc93)
      %8 = cir.const #cir.int<10> : !s32i loc(#loc94)
      %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc94)
      %10 = cir.const #cir.int<4> : !u64i loc(#loc185)
      %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc186)
      cir.libc.memcpy %11 bytes from %7 to %5 : !u64i, !cir.ptr<!void> -> !cir.ptr<!void> loc(#loc187)
      %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc99)
      %13 = cir.const #cir.int<0> : !s32i loc(#loc100)
      %14 = cir.ptr_stride(%12 : !cir.ptr<!s32i>, %13 : !s32i), !cir.ptr<!s32i> loc(#loc101)
      %15 = cir.load %14 : !cir.ptr<!s32i>, !s32i loc(#loc99)
      cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc102)
      %16 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc103)
      %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc104)
      %18 = cir.cast(bitcast, %17 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc104)
      cir.call @free(%18) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc103)
    } loc(#loc183)
    cir.return loc(#loc62)
  } loc(#loc171)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc189)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc109)
    cir.store %1, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc190)
    cir.scope {
      %2 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc146)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc113)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc113)
      cir.if %4 {
        %5 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc115)
        %6 = cir.const #cir.int<10> : !s32i loc(#loc116)
        %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc116)
        %8 = cir.const #cir.int<4> : !u64i loc(#loc193)
        %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc194)
        %10 = cir.call @malloc(%9) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc115)
        %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc195)
        cir.store %11, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc196)
        cir.scope {
          %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc123)
          %13 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc124)
          %14 = cir.cast(bitcast, %13 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc124)
          %15 = cir.cmp(eq, %12, %14) : !cir.ptr<!s32i>, !cir.bool loc(#loc198)
          cir.if %15 {
            %16 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc126)
            %17 = cir.const #cir.int<1> : !s32i loc(#loc127)
            %18 = cir.unary(minus, %17) nsw : !s32i, !s32i loc(#loc128)
            cir.call @exit(%18) : (!s32i) -> () extra(#fn_attr) loc(#loc126)
          } loc(#loc199)
        } loc(#loc197)
      } loc(#loc192)
    } loc(#loc191)
    cir.scope {
      %2 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc201)
      %3 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc201)
      cir.store %3, %2 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc201)
      %4 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc133)
      %5 = cir.cast(bitcast, %4 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc133)
      %6 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc134)
      %7 = cir.cast(bitcast, %6 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc134)
      %8 = cir.const #cir.int<10> : !s32i loc(#loc135)
      %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc135)
      %10 = cir.const #cir.int<4> : !u64i loc(#loc202)
      %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc203)
      cir.libc.memcpy %11 bytes from %7 to %5 : !u64i, !cir.ptr<!void> -> !cir.ptr<!void> loc(#loc204)
      %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc140)
      %13 = cir.const #cir.int<0> : !s32i loc(#loc141)
      %14 = cir.ptr_stride(%12 : !cir.ptr<!s32i>, %13 : !s32i), !cir.ptr<!s32i> loc(#loc142)
      %15 = cir.load %14 : !cir.ptr<!s32i>, !s32i loc(#loc140)
      cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc143)
      %16 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc144)
      %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc145)
      %18 = cir.cast(bitcast, %17 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc145)
      cir.call @free(%18) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc144)
    } loc(#loc200)
    cir.return loc(#loc106)
  } loc(#loc188)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_05.c":0:0)
#loc1 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_05.c":23:1)
#loc2 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_05.c":23:25)
#loc3 = loc("/usr/include/stdlib.h":672:1)
#loc4 = loc("/usr/include/stdlib.h":672:45)
#loc5 = loc("/usr/include/stdlib.h":756:1)
#loc6 = loc("/usr/include/stdlib.h":756:70)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc9 = loc("/usr/include/stdlib.h":687:1)
#loc10 = loc("/usr/include/stdlib.h":687:32)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_05.c":28:1)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_05.c":45:1)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_05.c":30:5)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_05.c":30:11)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_05.c":31:12)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_05.c":31:5)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_05.c":32:5)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_05.c":37:5)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_05.c":32:8)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_05.c":33:5)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_05.c":35:23)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_05.c":35:30)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_05.c":35:32)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_05.c":35:9)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_05.c":36:9)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_05.c":36:37)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_05.c":36:13)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_05.c":36:21)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_05.c":36:27)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_05.c":36:28)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_05.c":36:34)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_05.c":36:33)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_05.c":38:5)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_05.c":44:5)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_05.c":39:9)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_05.c":39:28)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_05.c":41:16)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_05.c":41:22)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_05.c":41:30)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_05.c":41:33)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_05.c":41:43)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_05.c":41:9)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_05.c":41:44)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_05.c":42:22)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_05.c":42:27)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_05.c":42:28)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_05.c":42:9)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_05.c":43:9)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_05.c":43:14)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_05.c":96:1)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_05.c":100:1)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_05.c":98:5)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_05.c":98:14)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_05.c":99:5)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_05.c":99:14)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_05.c":24:1)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_05.c":24:26)
#loc58 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc59 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_05.c":59:19)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_05.c":52:1)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_05.c":74:1)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_05.c":54:5)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_05.c":54:11)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_05.c":55:12)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_05.c":55:5)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_05.c":56:5)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_05.c":66:5)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_05.c":56:8)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_05.c":57:5)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_05.c":60:5)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_05.c":62:5)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_05.c":59:9)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_05.c":64:23)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_05.c":64:30)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_05.c":64:33)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_05.c":64:43)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_05.c":64:44)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_05.c":64:9)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_05.c":65:9)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_05.c":65:37)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_05.c":65:13)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_05.c":65:21)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_05.c":65:27)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_05.c":65:28)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_05.c":65:34)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_05.c":65:33)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_05.c":67:5)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_05.c":73:5)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_05.c":68:9)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_05.c":68:28)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_05.c":70:16)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_05.c":70:22)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_05.c":70:30)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_05.c":70:33)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_05.c":70:43)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_05.c":70:9)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_05.c":70:44)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_05.c":71:22)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_05.c":71:27)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_05.c":71:28)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_05.c":71:9)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_05.c":72:9)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_05.c":72:14)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_05.c":77:1)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_05.c":94:1)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_05.c":79:5)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_05.c":79:11)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_05.c":80:12)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_05.c":80:5)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_05.c":81:5)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_05.c":86:5)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_05.c":81:8)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_05.c":82:5)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_05.c":84:23)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_05.c":84:30)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_05.c":84:33)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_05.c":84:43)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_05.c":84:44)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_05.c":84:9)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_05.c":85:9)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_05.c":85:37)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_05.c":85:13)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_05.c":85:21)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_05.c":85:27)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_05.c":85:28)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_05.c":85:34)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_05.c":85:33)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_05.c":87:5)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_05.c":93:5)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_05.c":88:9)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_05.c":88:28)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_05.c":90:16)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_05.c":90:22)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_05.c":90:30)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_05.c":90:33)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_05.c":90:43)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_05.c":90:9)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_05.c":90:44)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_05.c":91:22)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_05.c":91:27)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_05.c":91:28)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_05.c":91:9)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_05.c":92:9)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_05.c":92:14)
#loc146 = loc(fused[#loc1, #loc2])
#loc147 = loc(fused[#loc3, #loc4])
#loc148 = loc(fused[#loc5, #loc6])
#loc149 = loc(fused[#loc7, #loc8])
#loc150 = loc(fused[#loc9, #loc10])
#loc151 = loc(fused[#loc11, #loc12])
#loc152 = loc(fused[#loc13, #loc14])
#loc153 = loc(fused[#loc16, #loc15])
#loc154 = loc(fused[#loc17, #loc18])
#loc155 = loc(fused[#loc20, #loc18])
#loc156 = loc(fused[#loc21, #loc23])
#loc157 = loc(fused[#loc24, #loc23])
#loc158 = loc(fused[#loc25, #loc26])
#loc159 = loc(fused[#loc27, #loc28])
#loc160 = loc(fused[#loc29, #loc26])
#loc161 = loc(fused[#loc33, #loc34])
#loc162 = loc(fused[#loc35, #loc36])
#loc163 = loc(fused[#loc40, #loc41])
#loc164 = loc(fused[#loc39, #loc41])
#loc165 = loc(fused[#loc42, #loc43])
#loc166 = loc(fused[#loc50, #loc51])
#loc167 = loc(fused[#loc52, #loc53])
#loc168 = loc(fused[#loc54, #loc55])
#loc169 = loc(fused[#loc56, #loc57])
#loc170 = loc(fused[#loc58, #loc59])
#loc171 = loc(fused[#loc61, #loc62])
#loc172 = loc(fused[#loc63, #loc64])
#loc173 = loc(fused[#loc66, #loc65])
#loc174 = loc(fused[#loc67, #loc68])
#loc175 = loc(fused[#loc70, #loc71, #loc72, #loc68])
#loc176 = loc(fused[#loc76, #loc77])
#loc177 = loc(fused[#loc75, #loc77])
#loc178 = loc(fused[#loc74, #loc78])
#loc179 = loc(fused[#loc79, #loc78])
#loc180 = loc(fused[#loc80, #loc81])
#loc181 = loc(fused[#loc82, #loc83])
#loc182 = loc(fused[#loc84, #loc81])
#loc183 = loc(fused[#loc88, #loc89])
#loc184 = loc(fused[#loc90, #loc91])
#loc185 = loc(fused[#loc95, #loc96])
#loc186 = loc(fused[#loc94, #loc96])
#loc187 = loc(fused[#loc97, #loc98])
#loc188 = loc(fused[#loc105, #loc106])
#loc189 = loc(fused[#loc107, #loc108])
#loc190 = loc(fused[#loc110, #loc109])
#loc191 = loc(fused[#loc111, #loc112])
#loc192 = loc(fused[#loc114, #loc112])
#loc193 = loc(fused[#loc117, #loc118])
#loc194 = loc(fused[#loc116, #loc118])
#loc195 = loc(fused[#loc115, #loc119])
#loc196 = loc(fused[#loc120, #loc119])
#loc197 = loc(fused[#loc121, #loc122])
#loc198 = loc(fused[#loc123, #loc124])
#loc199 = loc(fused[#loc125, #loc122])
#loc200 = loc(fused[#loc129, #loc130])
#loc201 = loc(fused[#loc131, #loc132])
#loc202 = loc(fused[#loc136, #loc137])
#loc203 = loc(fused[#loc135, #loc137])
#loc204 = loc(fused[#loc138, #loc139])
