!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_15.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc155)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc156)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc157)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc7)
  cir.func private @printIntLine(!s32i) loc(#loc158)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc159)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_15_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc161)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc16)
    cir.store %1, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc162)
    cir.scope {
      %2 = cir.const #cir.int<6> : !s32i loc(#loc20)
      cir.switch (%2 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %3 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc22)
          %4 = cir.const #cir.int<50> : !s32i loc(#loc23)
          %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc23)
          %6 = cir.const #cir.int<4> : !u64i loc(#loc164)
          %7 = cir.binop(mul, %5, %6) : !u64i loc(#loc165)
          %8 = cir.call @malloc(%7) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc22)
          %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc166)
          cir.store %9, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc167)
          cir.scope {
            %10 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc30)
            %11 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc31)
            %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc31)
            %13 = cir.cmp(eq, %10, %12) : !cir.ptr<!s32i>, !cir.bool loc(#loc169)
            cir.if %13 {
              %14 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc33)
              %15 = cir.const #cir.int<1> : !s32i loc(#loc34)
              %16 = cir.unary(minus, %15) nsw : !s32i, !s32i loc(#loc35)
              cir.call @exit(%16) : (!s32i) -> () extra(#fn_attr) loc(#loc33)
            } loc(#loc170)
          } loc(#loc168)
          cir.break loc(#loc36)
        } loc(#loc21)
        cir.case(default, []) {
          %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc7)
          %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc7)
          cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc38)
          cir.break loc(#loc39)
        } loc(#loc37)
        cir.yield loc(#loc18)
      } loc(#loc18)
    } loc(#loc163)
    cir.scope {
      %2 = cir.alloca !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc172)
      %3 = cir.const #cir.zero : !cir.array<!s32i x 100> loc(#loc172)
      cir.store %3, %2 : !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>> loc(#loc172)
      %4 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc44)
      %5 = cir.cast(bitcast, %4 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc44)
      %6 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s32i x 100>>), !cir.ptr<!s32i> loc(#loc45)
      %7 = cir.cast(bitcast, %6 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc45)
      %8 = cir.const #cir.int<100> : !s32i loc(#loc46)
      %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc46)
      %10 = cir.const #cir.int<4> : !u64i loc(#loc173)
      %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc174)
      cir.libc.memmove %11 bytes from %7 to %5 : !cir.ptr<!void>, !u64i loc(#loc175)
      %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc51)
      %13 = cir.const #cir.int<0> : !s32i loc(#loc52)
      %14 = cir.ptr_stride(%12 : !cir.ptr<!s32i>, %13 : !s32i), !cir.ptr<!s32i> loc(#loc53)
      %15 = cir.load %14 : !cir.ptr<!s32i>, !s32i loc(#loc51)
      cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc54)
      %16 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc55)
      %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc56)
      %18 = cir.cast(bitcast, %17 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc56)
      cir.call @free(%18) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc55)
    } loc(#loc171)
    cir.return loc(#loc13)
  } loc(#loc160)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_15_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<()>> loc(#loc177)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc59)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<()>> loc(#loc178)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc61)
    cir.return loc(#loc58)
  } loc(#loc176)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc180)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc67)
    cir.store %1, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc181)
    cir.scope {
      %2 = cir.const #cir.int<5> : !s32i loc(#loc71)
      cir.switch (%2 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc73)
          %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc73)
          cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc74)
          cir.break loc(#loc75)
        } loc(#loc72)
        cir.case(default, []) {
          %3 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc77)
          %4 = cir.const #cir.int<100> : !s32i loc(#loc78)
          %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc78)
          %6 = cir.const #cir.int<4> : !u64i loc(#loc183)
          %7 = cir.binop(mul, %5, %6) : !u64i loc(#loc184)
          %8 = cir.call @malloc(%7) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc77)
          %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc185)
          cir.store %9, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc186)
          cir.scope {
            %10 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc85)
            %11 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc86)
            %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc86)
            %13 = cir.cmp(eq, %10, %12) : !cir.ptr<!s32i>, !cir.bool loc(#loc188)
            cir.if %13 {
              %14 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc88)
              %15 = cir.const #cir.int<1> : !s32i loc(#loc89)
              %16 = cir.unary(minus, %15) nsw : !s32i, !s32i loc(#loc90)
              cir.call @exit(%16) : (!s32i) -> () extra(#fn_attr) loc(#loc88)
            } loc(#loc189)
          } loc(#loc187)
          cir.break loc(#loc91)
        } loc(#loc76)
        cir.yield loc(#loc69)
      } loc(#loc69)
    } loc(#loc182)
    cir.scope {
      %2 = cir.alloca !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc191)
      %3 = cir.const #cir.zero : !cir.array<!s32i x 100> loc(#loc191)
      cir.store %3, %2 : !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>> loc(#loc191)
      %4 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc96)
      %5 = cir.cast(bitcast, %4 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc96)
      %6 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s32i x 100>>), !cir.ptr<!s32i> loc(#loc97)
      %7 = cir.cast(bitcast, %6 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc97)
      %8 = cir.const #cir.int<100> : !s32i loc(#loc98)
      %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc98)
      %10 = cir.const #cir.int<4> : !u64i loc(#loc192)
      %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc193)
      cir.libc.memmove %11 bytes from %7 to %5 : !cir.ptr<!void>, !u64i loc(#loc194)
      %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc103)
      %13 = cir.const #cir.int<0> : !s32i loc(#loc104)
      %14 = cir.ptr_stride(%12 : !cir.ptr<!s32i>, %13 : !s32i), !cir.ptr<!s32i> loc(#loc105)
      %15 = cir.load %14 : !cir.ptr<!s32i>, !s32i loc(#loc103)
      cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc106)
      %16 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc107)
      %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc108)
      %18 = cir.cast(bitcast, %17 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc108)
      cir.call @free(%18) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc107)
    } loc(#loc190)
    cir.return loc(#loc64)
  } loc(#loc179)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc196)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc113)
    cir.store %1, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc197)
    cir.scope {
      %2 = cir.const #cir.int<6> : !s32i loc(#loc117)
      cir.switch (%2 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %3 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc119)
          %4 = cir.const #cir.int<100> : !s32i loc(#loc120)
          %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc120)
          %6 = cir.const #cir.int<4> : !u64i loc(#loc199)
          %7 = cir.binop(mul, %5, %6) : !u64i loc(#loc200)
          %8 = cir.call @malloc(%7) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc119)
          %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc201)
          cir.store %9, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc202)
          cir.scope {
            %10 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc127)
            %11 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc128)
            %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc128)
            %13 = cir.cmp(eq, %10, %12) : !cir.ptr<!s32i>, !cir.bool loc(#loc204)
            cir.if %13 {
              %14 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc130)
              %15 = cir.const #cir.int<1> : !s32i loc(#loc131)
              %16 = cir.unary(minus, %15) nsw : !s32i, !s32i loc(#loc132)
              cir.call @exit(%16) : (!s32i) -> () extra(#fn_attr) loc(#loc130)
            } loc(#loc205)
          } loc(#loc203)
          cir.break loc(#loc133)
        } loc(#loc118)
        cir.case(default, []) {
          %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc135)
          %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc135)
          cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc136)
          cir.break loc(#loc137)
        } loc(#loc134)
        cir.yield loc(#loc115)
      } loc(#loc115)
    } loc(#loc198)
    cir.scope {
      %2 = cir.alloca !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc207)
      %3 = cir.const #cir.zero : !cir.array<!s32i x 100> loc(#loc207)
      cir.store %3, %2 : !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>> loc(#loc207)
      %4 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc142)
      %5 = cir.cast(bitcast, %4 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc142)
      %6 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s32i x 100>>), !cir.ptr<!s32i> loc(#loc143)
      %7 = cir.cast(bitcast, %6 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc143)
      %8 = cir.const #cir.int<100> : !s32i loc(#loc144)
      %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc144)
      %10 = cir.const #cir.int<4> : !u64i loc(#loc208)
      %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc209)
      cir.libc.memmove %11 bytes from %7 to %5 : !cir.ptr<!void>, !u64i loc(#loc210)
      %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc149)
      %13 = cir.const #cir.int<0> : !s32i loc(#loc150)
      %14 = cir.ptr_stride(%12 : !cir.ptr<!s32i>, %13 : !s32i), !cir.ptr<!s32i> loc(#loc151)
      %15 = cir.load %14 : !cir.ptr<!s32i>, !s32i loc(#loc149)
      cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc152)
      %16 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc153)
      %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc154)
      %18 = cir.cast(bitcast, %17 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc154)
      cir.call @free(%18) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc153)
    } loc(#loc206)
    cir.return loc(#loc110)
  } loc(#loc195)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_15.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc7 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_15.c":34:19)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc9 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc10 = loc("/usr/include/stdlib.h":687:1)
#loc11 = loc("/usr/include/stdlib.h":687:32)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_15.c":21:1)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_15.c":44:1)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_15.c":23:5)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_15.c":23:11)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_15.c":24:12)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_15.c":24:5)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_15.c":25:5)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_15.c":36:5)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_15.c":25:12)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_15.c":27:5)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_15.c":29:23)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_15.c":29:30)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_15.c":29:33)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_15.c":29:43)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_15.c":29:44)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_15.c":29:9)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_15.c":30:9)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_15.c":30:37)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_15.c":30:13)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_15.c":30:21)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_15.c":30:27)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_15.c":30:28)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_15.c":30:34)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_15.c":30:33)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_15.c":31:9)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_15.c":32:5)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_15.c":34:9)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_15.c":35:9)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_15.c":37:5)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_15.c":43:5)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_15.c":38:9)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_15.c":38:29)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_15.c":40:17)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_15.c":40:23)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_15.c":40:31)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_15.c":40:35)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_15.c":40:45)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_15.c":40:9)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_15.c":40:46)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_15.c":41:22)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_15.c":41:27)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_15.c":41:28)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_15.c":41:9)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_15.c":42:9)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_15.c":42:14)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_15.c":102:1)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_15.c":106:1)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_15.c":104:5)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_15.c":104:14)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_15.c":105:5)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_15.c":105:14)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_15.c":51:1)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_15.c":74:1)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_15.c":53:5)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_15.c":53:11)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_15.c":54:12)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_15.c":54:5)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_15.c":55:5)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_15.c":66:5)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_15.c":55:12)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_15.c":57:5)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_15.c":59:19)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_15.c":59:9)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_15.c":60:9)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_15.c":61:5)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_15.c":63:23)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_15.c":63:30)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_15.c":63:34)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_15.c":63:44)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_15.c":63:45)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_15.c":63:9)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_15.c":64:9)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_15.c":64:37)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_15.c":64:13)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_15.c":64:21)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_15.c":64:27)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_15.c":64:28)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_15.c":64:34)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_15.c":64:33)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_15.c":65:9)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_15.c":67:5)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_15.c":73:5)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_15.c":68:9)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_15.c":68:29)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_15.c":70:17)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_15.c":70:23)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_15.c":70:31)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_15.c":70:35)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_15.c":70:45)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_15.c":70:9)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_15.c":70:46)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_15.c":71:22)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_15.c":71:27)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_15.c":71:28)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_15.c":71:9)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_15.c":72:9)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_15.c":72:14)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_15.c":77:1)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_15.c":100:1)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_15.c":79:5)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_15.c":79:11)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_15.c":80:12)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_15.c":80:5)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_15.c":81:5)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_15.c":92:5)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_15.c":81:12)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_15.c":83:5)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_15.c":85:23)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_15.c":85:30)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_15.c":85:34)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_15.c":85:44)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_15.c":85:45)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_15.c":85:9)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_15.c":86:9)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_15.c":86:37)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_15.c":86:13)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_15.c":86:21)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_15.c":86:27)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_15.c":86:28)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_15.c":86:34)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_15.c":86:33)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_15.c":87:9)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_15.c":88:5)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_15.c":90:19)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_15.c":90:9)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_15.c":91:9)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_15.c":93:5)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_15.c":99:5)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_15.c":94:9)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_15.c":94:29)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_15.c":96:17)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_15.c":96:23)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_15.c":96:31)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_15.c":96:35)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_15.c":96:45)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_15.c":96:9)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_15.c":96:46)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_15.c":97:22)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_15.c":97:27)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_15.c":97:28)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_15.c":97:9)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_15.c":98:9)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_15.c":98:14)
#loc155 = loc(fused[#loc1, #loc2])
#loc156 = loc(fused[#loc3, #loc4])
#loc157 = loc(fused[#loc5, #loc6])
#loc158 = loc(fused[#loc8, #loc9])
#loc159 = loc(fused[#loc10, #loc11])
#loc160 = loc(fused[#loc12, #loc13])
#loc161 = loc(fused[#loc14, #loc15])
#loc162 = loc(fused[#loc17, #loc16])
#loc163 = loc(fused[#loc18, #loc19])
#loc164 = loc(fused[#loc24, #loc25])
#loc165 = loc(fused[#loc23, #loc25])
#loc166 = loc(fused[#loc22, #loc26])
#loc167 = loc(fused[#loc27, #loc26])
#loc168 = loc(fused[#loc28, #loc29])
#loc169 = loc(fused[#loc30, #loc31])
#loc170 = loc(fused[#loc32, #loc29])
#loc171 = loc(fused[#loc40, #loc41])
#loc172 = loc(fused[#loc42, #loc43])
#loc173 = loc(fused[#loc47, #loc48])
#loc174 = loc(fused[#loc46, #loc48])
#loc175 = loc(fused[#loc49, #loc50])
#loc176 = loc(fused[#loc57, #loc58])
#loc177 = loc(fused[#loc59, #loc60])
#loc178 = loc(fused[#loc61, #loc62])
#loc179 = loc(fused[#loc63, #loc64])
#loc180 = loc(fused[#loc65, #loc66])
#loc181 = loc(fused[#loc68, #loc67])
#loc182 = loc(fused[#loc69, #loc70])
#loc183 = loc(fused[#loc79, #loc80])
#loc184 = loc(fused[#loc78, #loc80])
#loc185 = loc(fused[#loc77, #loc81])
#loc186 = loc(fused[#loc82, #loc81])
#loc187 = loc(fused[#loc83, #loc84])
#loc188 = loc(fused[#loc85, #loc86])
#loc189 = loc(fused[#loc87, #loc84])
#loc190 = loc(fused[#loc92, #loc93])
#loc191 = loc(fused[#loc94, #loc95])
#loc192 = loc(fused[#loc99, #loc100])
#loc193 = loc(fused[#loc98, #loc100])
#loc194 = loc(fused[#loc101, #loc102])
#loc195 = loc(fused[#loc109, #loc110])
#loc196 = loc(fused[#loc111, #loc112])
#loc197 = loc(fused[#loc114, #loc113])
#loc198 = loc(fused[#loc115, #loc116])
#loc199 = loc(fused[#loc121, #loc122])
#loc200 = loc(fused[#loc120, #loc122])
#loc201 = loc(fused[#loc119, #loc123])
#loc202 = loc(fused[#loc124, #loc123])
#loc203 = loc(fused[#loc125, #loc126])
#loc204 = loc(fused[#loc127, #loc128])
#loc205 = loc(fused[#loc129, #loc126])
#loc206 = loc(fused[#loc138, #loc139])
#loc207 = loc(fused[#loc140, #loc141])
#loc208 = loc(fused[#loc145, #loc146])
#loc209 = loc(fused[#loc144, #loc146])
#loc210 = loc(fused[#loc147, #loc148])
