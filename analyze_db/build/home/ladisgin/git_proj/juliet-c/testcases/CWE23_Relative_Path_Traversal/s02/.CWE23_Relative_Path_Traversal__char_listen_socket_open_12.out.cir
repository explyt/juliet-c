!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone})>
#loc270 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":213:10)
#loc271 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":213:14)
#loc272 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":213:20)
#loc273 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":213:32)
#true = #cir.bool<true> : !cir.bool
!ty_in_addr = !cir.struct<struct "in_addr" {!u32i} #cir.record.decl.ast>
#loc391 = loc(fused[#loc270, #loc271])
#loc392 = loc(fused[#loc272, #loc273])
!ty_sockaddr = !cir.struct<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.struct<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE23_Relative_Path_Traversal/s02/CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.global "private" constant cir_private @__const._ZN57CWE23_Relative_Path_Traversal__char_listen_socket_open_12L7goodG2BEv.dataBuffer = #cir.const_array<"/tmp/" : !cir.array<!s8i x 5>, trailing_zeros> : !cir.array<!s8i x 4096> loc(#loc286)
  cir.global "private" constant cir_private @__const._ZN57CWE23_Relative_Path_Traversal__char_listen_socket_open_123badEv.dataBuffer = #cir.const_array<"/tmp/" : !cir.array<!s8i x 5>, trailing_zeros> : !cir.array<!s8i x 4096> loc(#loc287)
  cir.func private @globalReturnsTrueOrFalse() -> !s32i loc(#loc288)
  cir.func private @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc289)
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc290)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc291)
  cir.func private @bind(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc292)
  cir.func private @listen(!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc293)
  cir.func private @accept(!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc294)
  cir.func private @recv(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc295)
  cir.func private @strchr(!cir.ptr<!s8i>, !s32i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc296)
  cir.func private @close(!s32i) -> !s32i loc(#loc297)
  cir.func private @strcat(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc298)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"file.txt\00" : !cir.array<!s8i x 9>> : !cir.array<!s8i x 9> {alignment = 1 : i64} loc(#loc27)
  cir.func private @open(!cir.ptr<!s8i>, !s32i, ...) -> !s32i loc(#loc299)
  cir.func @_ZN57CWE23_Relative_Path_Traversal__char_listen_socket_open_123badEv() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc301)
    %1 = cir.alloca !cir.array<!s8i x 4096>, !cir.ptr<!cir.array<!s8i x 4096>>, ["dataBuffer"] {alignment = 16 : i64} loc(#loc287)
    %2 = cir.get_global @__const._ZN57CWE23_Relative_Path_Traversal__char_listen_socket_open_123badEv.dataBuffer : !cir.ptr<!cir.array<!s8i x 4096>> loc(#loc287)
    cir.copy %2 to %1 : !cir.ptr<!cir.array<!s8i x 4096>> loc(#loc287)
    %3 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 4096>>), !cir.ptr<!s8i> loc(#loc34)
    cir.store %3, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc302)
    cir.scope {
      %4 = cir.call @globalReturnsTrueOrFalse() : () -> !s32i loc(#loc38)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc304)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc307)
          %7 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc308)
          %8 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["replace"] {alignment = 8 : i64} loc(#loc309)
          %9 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc310)
          %10 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc311)
          %11 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc312)
          %12 = cir.const #cir.int<1> : !s32i loc(#loc52)
          %13 = cir.unary(minus, %12) : !s32i, !s32i loc(#loc52)
          cir.store %13, %9 : !s32i, !cir.ptr<!s32i> loc(#loc310)
          %14 = cir.const #cir.int<1> : !s32i loc(#loc54)
          %15 = cir.unary(minus, %14) : !s32i, !s32i loc(#loc54)
          cir.store %15, %10 : !s32i, !cir.ptr<!s32i> loc(#loc311)
          %16 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc57)
          %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc58)
          %18 = cir.call @strlen(%17) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc57)
          cir.store %18, %11 : !u64i, !cir.ptr<!u64i> loc(#loc312)
          cir.scope {
            cir.do {
              %19 = cir.const #cir.int<2> : !s32i loc(#loc61)
              %20 = cir.const #cir.int<1> : !u32i loc(#loc62)
              %21 = cir.cast(integral, %20 : !u32i), !s32i loc(#loc62)
              %22 = cir.const #cir.int<6> : !u32i loc(#loc63)
              %23 = cir.cast(integral, %22 : !u32i), !s32i loc(#loc63)
              %24 = cir.call @socket(%19, %21, %23) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc64)
              cir.store %24, %9 : !s32i, !cir.ptr<!s32i> loc(#loc314)
              cir.scope {
                %77 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc69)
                %78 = cir.const #cir.int<1> : !s32i loc(#loc70)
                %79 = cir.unary(minus, %78) : !s32i, !s32i loc(#loc70)
                %80 = cir.cmp(eq, %77, %79) : !s32i, !cir.bool loc(#loc316)
                cir.if %80 {
                  cir.break loc(#loc72)
                } loc(#loc317)
              } loc(#loc315)
              %25 = cir.cast(bitcast, %7 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc318)
              %26 = cir.const #cir.int<0> : !s32i loc(#loc75)
              %27 = cir.const #cir.int<16> : !u64i loc(#loc319)
              cir.libc.memset %27 bytes from %25 set to %26 : !cir.ptr<!void>, !s32i, !u64i loc(#loc320)
              %28 = cir.const #cir.int<2> : !s32i loc(#loc80)
              %29 = cir.cast(integral, %28 : !s32i), !u16i loc(#loc80)
              %30 = cir.get_member %7[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc81)
              cir.store %29, %30 : !u16i, !cir.ptr<!u16i> loc(#loc321)
              %31 = cir.const #cir.int<0> : !s32i loc(#loc83)
              %32 = cir.cast(integral, %31 : !s32i), !u32i loc(#loc83)
              %33 = cir.get_member %7[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc84)
              %34 = cir.get_member %33[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc85)
              cir.store %32, %34 : !u32i, !cir.ptr<!u32i> loc(#loc322)
              %35 = cir.const #cir.int<27015> : !s32i loc(#loc87)
              %36 = cir.cast(integral, %35 : !s32i), !u16i loc(#loc87)
              %37 = cir.call @htons(%36) : (!u16i) -> !u16i extra(#fn_attr) loc(#loc88)
              %38 = cir.get_member %7[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc89)
              cir.store %37, %38 : !u16i, !cir.ptr<!u16i> loc(#loc323)
              cir.scope {
                %77 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc94)
                %78 = cir.cast(bitcast, %7 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc325)
                %79 = cir.const #cir.int<16> : !u64i loc(#loc326)
                %80 = cir.cast(integral, %79 : !u64i), !u32i loc(#loc326)
                %81 = cir.call @bind(%77, %78, %80) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc99)
                %82 = cir.const #cir.int<1> : !s32i loc(#loc100)
                %83 = cir.unary(minus, %82) : !s32i, !s32i loc(#loc100)
                %84 = cir.cmp(eq, %81, %83) : !s32i, !cir.bool loc(#loc327)
                cir.if %84 {
                  cir.break loc(#loc102)
                } loc(#loc328)
              } loc(#loc324)
              cir.scope {
                %77 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc105)
                %78 = cir.const #cir.int<5> : !s32i loc(#loc106)
                %79 = cir.call @listen(%77, %78) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc107)
                %80 = cir.const #cir.int<1> : !s32i loc(#loc108)
                %81 = cir.unary(minus, %80) : !s32i, !s32i loc(#loc108)
                %82 = cir.cmp(eq, %79, %81) : !s32i, !cir.bool loc(#loc330)
                cir.if %82 {
                  cir.break loc(#loc110)
                } loc(#loc331)
              } loc(#loc329)
              %39 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc111)
              %40 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc112)
              %41 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc113)
              %42 = cir.call @accept(%39, %40, %41) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc114)
              cir.store %42, %10 : !s32i, !cir.ptr<!s32i> loc(#loc332)
              cir.scope {
                %77 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc119)
                %78 = cir.const #cir.int<1> : !s32i loc(#loc120)
                %79 = cir.unary(minus, %78) : !s32i, !s32i loc(#loc120)
                %80 = cir.cmp(eq, %77, %79) : !s32i, !cir.bool loc(#loc334)
                cir.if %80 {
                  cir.break loc(#loc122)
                } loc(#loc335)
              } loc(#loc333)
              %43 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc123)
              %44 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc124)
              %45 = cir.load %11 : !cir.ptr<!u64i>, !u64i loc(#loc125)
              %46 = cir.ptr_stride(%44 : !cir.ptr<!s8i>, %45 : !u64i), !cir.ptr<!s8i> loc(#loc126)
              %47 = cir.cast(bitcast, %46 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc336)
              %48 = cir.const #cir.int<1> : !u64i loc(#loc337)
              %49 = cir.const #cir.int<4096> : !s32i loc(#loc131)
              %50 = cir.cast(integral, %49 : !s32i), !u64i loc(#loc131)
              %51 = cir.load %11 : !cir.ptr<!u64i>, !u64i loc(#loc132)
              %52 = cir.binop(sub, %50, %51) : !u64i loc(#loc338)
              %53 = cir.const #cir.int<1> : !s32i loc(#loc133)
              %54 = cir.cast(integral, %53 : !s32i), !u64i loc(#loc133)
              %55 = cir.binop(sub, %52, %54) : !u64i loc(#loc339)
              %56 = cir.binop(mul, %48, %55) : !u64i loc(#loc340)
              %57 = cir.const #cir.int<0> : !s32i loc(#loc135)
              %58 = cir.call @recv(%43, %47, %56, %57) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc136)
              %59 = cir.cast(integral, %58 : !s64i), !s32i loc(#loc136)
              cir.store %59, %6 : !s32i, !cir.ptr<!s32i> loc(#loc341)
              cir.scope {
                %77 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc141)
                %78 = cir.const #cir.int<1> : !s32i loc(#loc142)
                %79 = cir.unary(minus, %78) : !s32i, !s32i loc(#loc142)
                %80 = cir.cmp(eq, %77, %79) : !s32i, !cir.bool loc(#loc343)
                %81 = cir.ternary(%80, true {
                  %82 = cir.const #true loc(#loc143)
                  cir.yield %82 : !cir.bool loc(#loc143)
                }, false {
                  %82 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc144)
                  %83 = cir.const #cir.int<0> : !s32i loc(#loc145)
                  %84 = cir.cmp(eq, %82, %83) : !s32i, !cir.bool loc(#loc344)
                  %85 = cir.ternary(%84, true {
                    %86 = cir.const #true loc(#loc143)
                    cir.yield %86 : !cir.bool loc(#loc143)
                  }, false {
                    %86 = cir.const #false loc(#loc143)
                    cir.yield %86 : !cir.bool loc(#loc143)
                  }) : (!cir.bool) -> !cir.bool loc(#loc143)
                  cir.yield %85 : !cir.bool loc(#loc143)
                }) : (!cir.bool) -> !cir.bool loc(#loc143)
                cir.if %81 {
                  cir.break loc(#loc147)
                } loc(#loc345)
              } loc(#loc342)
              %60 = cir.const #cir.int<0> : !s8i loc(#loc148)
              %61 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc149)
              %62 = cir.load %11 : !cir.ptr<!u64i>, !u64i loc(#loc150)
              %63 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc151)
              %64 = cir.cast(integral, %63 : !s32i), !u64i loc(#loc151)
              %65 = cir.const #cir.int<1> : !u64i loc(#loc346)
              %66 = cir.binop(div, %64, %65) : !u64i loc(#loc347)
              %67 = cir.binop(add, %62, %66) : !u64i loc(#loc348)
              %68 = cir.ptr_stride(%61 : !cir.ptr<!s8i>, %67 : !u64i), !cir.ptr<!s8i> loc(#loc154)
              cir.store %60, %68 : !s8i, !cir.ptr<!s8i> loc(#loc349)
              %69 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc155)
              %70 = cir.const #cir.int<13> : !s8i loc(#loc156)
              %71 = cir.cast(integral, %70 : !s8i), !s32i loc(#loc156)
              %72 = cir.call @strchr(%69, %71) : (!cir.ptr<!s8i>, !s32i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc157)
              cir.store %72, %8 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc350)
              cir.scope {
                %77 = cir.load %8 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc162)
                %78 = cir.cast(ptr_to_bool, %77 : !cir.ptr<!s8i>), !cir.bool loc(#loc162)
                cir.if %78 {
                  %79 = cir.const #cir.int<0> : !s8i loc(#loc164)
                  %80 = cir.load deref %8 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc165)
                  cir.store %79, %80 : !s8i, !cir.ptr<!s8i> loc(#loc353)
                } loc(#loc352)
              } loc(#loc351)
              %73 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc167)
              %74 = cir.const #cir.int<10> : !s8i loc(#loc168)
              %75 = cir.cast(integral, %74 : !s8i), !s32i loc(#loc168)
              %76 = cir.call @strchr(%73, %75) : (!cir.ptr<!s8i>, !s32i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc169)
              cir.store %76, %8 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc354)
              cir.scope {
                %77 = cir.load %8 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc174)
                %78 = cir.cast(ptr_to_bool, %77 : !cir.ptr<!s8i>), !cir.bool loc(#loc174)
                cir.if %78 {
                  %79 = cir.const #cir.int<0> : !s8i loc(#loc176)
                  %80 = cir.load deref %8 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc177)
                  cir.store %79, %80 : !s8i, !cir.ptr<!s8i> loc(#loc357)
                } loc(#loc356)
              } loc(#loc355)
              cir.yield loc(#loc60)
            } while {
              %19 = cir.const #cir.int<0> : !s32i loc(#loc179)
              %20 = cir.cast(int_to_bool, %19 : !s32i), !cir.bool loc(#loc179)
              cir.condition(%20) loc(#loc179)
            } loc(#loc313)
          } loc(#loc313)
          cir.scope {
            %19 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc182)
            %20 = cir.const #cir.int<1> : !s32i loc(#loc183)
            %21 = cir.unary(minus, %20) : !s32i, !s32i loc(#loc183)
            %22 = cir.cmp(ne, %19, %21) : !s32i, !cir.bool loc(#loc359)
            cir.if %22 {
              %23 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc185)
              %24 = cir.call @close(%23) : (!s32i) -> !s32i loc(#loc186)
            } loc(#loc360)
          } loc(#loc358)
          cir.scope {
            %19 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc189)
            %20 = cir.const #cir.int<1> : !s32i loc(#loc190)
            %21 = cir.unary(minus, %20) : !s32i, !s32i loc(#loc190)
            %22 = cir.cmp(ne, %19, %21) : !s32i, !cir.bool loc(#loc362)
            cir.if %22 {
              %23 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc192)
              %24 = cir.call @close(%23) : (!s32i) -> !s32i loc(#loc193)
            } loc(#loc363)
          } loc(#loc361)
        } loc(#loc306)
      } else {
        %6 = cir.get_global @strcat : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc194)
        %7 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc195)
        %8 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc27)
        %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc27)
        %10 = cir.call @strcat(%7, %9) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc194)
      } loc(#loc305)
    } loc(#loc303)
    cir.scope {
      %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["fileDesc"] {alignment = 4 : i64} loc(#loc365)
      %5 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc200)
      %6 = cir.const #cir.int<2> : !s32i loc(#loc201)
      %7 = cir.const #cir.int<64> : !s32i loc(#loc202)
      %8 = cir.binop(or, %6, %7) : !s32i loc(#loc366)
      %9 = cir.const #cir.int<256> : !s32i loc(#loc203)
      %10 = cir.const #cir.int<128> : !s32i loc(#loc204)
      %11 = cir.binop(or, %9, %10) : !s32i loc(#loc367)
      %12 = cir.call @open(%5, %8, %11) : (!cir.ptr<!s8i>, !s32i, !s32i) -> !s32i loc(#loc205)
      cir.store %12, %4 : !s32i, !cir.ptr<!s32i> loc(#loc368)
      cir.scope {
        %13 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc210)
        %14 = cir.const #cir.int<1> : !s32i loc(#loc211)
        %15 = cir.unary(minus, %14) : !s32i, !s32i loc(#loc212)
        %16 = cir.cmp(ne, %13, %15) : !s32i, !cir.bool loc(#loc370)
        cir.if %16 {
          %17 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc214)
          %18 = cir.call @close(%17) : (!s32i) -> !s32i loc(#loc215)
        } loc(#loc371)
      } loc(#loc369)
    } loc(#loc364)
    cir.return loc(#loc31)
  } loc(#loc300)
  cir.func internal private @_ZN57CWE23_Relative_Path_Traversal__char_listen_socket_open_12L7goodG2BEv() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc373)
    %1 = cir.alloca !cir.array<!s8i x 4096>, !cir.ptr<!cir.array<!s8i x 4096>>, ["dataBuffer"] {alignment = 16 : i64} loc(#loc286)
    %2 = cir.get_global @__const._ZN57CWE23_Relative_Path_Traversal__char_listen_socket_open_12L7goodG2BEv.dataBuffer : !cir.ptr<!cir.array<!s8i x 4096>> loc(#loc286)
    cir.copy %2 to %1 : !cir.ptr<!cir.array<!s8i x 4096>> loc(#loc286)
    %3 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 4096>>), !cir.ptr<!s8i> loc(#loc220)
    cir.store %3, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc374)
    cir.scope {
      %4 = cir.call @globalReturnsTrueOrFalse() : () -> !s32i loc(#loc224)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc376)
      cir.if %5 {
        %6 = cir.get_global @strcat : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc229)
        %7 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc230)
        %8 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc231)
        %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc231)
        %10 = cir.call @strcat(%7, %9) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc229)
      } else {
        %6 = cir.get_global @strcat : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc232)
        %7 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc233)
        %8 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc234)
        %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc234)
        %10 = cir.call @strcat(%7, %9) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc232)
      } loc(#loc377)
    } loc(#loc375)
    cir.scope {
      %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["fileDesc"] {alignment = 4 : i64} loc(#loc379)
      %5 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc239)
      %6 = cir.const #cir.int<2> : !s32i loc(#loc240)
      %7 = cir.const #cir.int<64> : !s32i loc(#loc241)
      %8 = cir.binop(or, %6, %7) : !s32i loc(#loc380)
      %9 = cir.const #cir.int<256> : !s32i loc(#loc242)
      %10 = cir.const #cir.int<128> : !s32i loc(#loc243)
      %11 = cir.binop(or, %9, %10) : !s32i loc(#loc381)
      %12 = cir.call @open(%5, %8, %11) : (!cir.ptr<!s8i>, !s32i, !s32i) -> !s32i loc(#loc244)
      cir.store %12, %4 : !s32i, !cir.ptr<!s32i> loc(#loc382)
      cir.scope {
        %13 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc249)
        %14 = cir.const #cir.int<1> : !s32i loc(#loc250)
        %15 = cir.unary(minus, %14) : !s32i, !s32i loc(#loc251)
        %16 = cir.cmp(ne, %13, %15) : !s32i, !cir.bool loc(#loc384)
        cir.if %16 {
          %17 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc253)
          %18 = cir.call @close(%17) : (!s32i) -> !s32i loc(#loc254)
        } loc(#loc385)
      } loc(#loc383)
    } loc(#loc378)
    cir.return loc(#loc217)
  } loc(#loc372)
  cir.func @_ZN57CWE23_Relative_Path_Traversal__char_listen_socket_open_124goodEv() extra(#fn_attr1) {
    cir.call @_ZN57CWE23_Relative_Path_Traversal__char_listen_socket_open_12L7goodG2BEv() : () -> () loc(#loc257)
    cir.return loc(#loc256)
  } loc(#loc386)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc387)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc388)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc389)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc264)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc265)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc266)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc267)
  cir.func @main(%arg0: !s32i loc(fused[#loc270, #loc271]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc272, #loc273])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc391)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc392)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc269)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc274)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc274)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc275)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc276)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc276)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc277)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc264)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc264)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc278)
    cir.call @_ZN57CWE23_Relative_Path_Traversal__char_listen_socket_open_124goodEv() : () -> () loc(#loc279)
    %8 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc265)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc265)
    cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc280)
    %10 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc266)
    %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc266)
    cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc281)
    cir.call @_ZN57CWE23_Relative_Path_Traversal__char_listen_socket_open_123badEv() : () -> () loc(#loc282)
    %12 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc267)
    %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc267)
    cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc283)
    %14 = cir.const #cir.int<0> : !s32i loc(#loc284)
    cir.store %14, %2 : !s32i, !cir.ptr<!s32i> loc(#loc393)
    %15 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc393)
    cir.return %15 : !s32i loc(#loc393)
  } loc(#loc390)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE23_Relative_Path_Traversal/s02/CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":0:0)
#loc1 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":172:5)
#loc2 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":172:37)
#loc3 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":63:5)
#loc4 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":63:37)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":52:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":52:30)
#loc7 = loc("/usr/include/string.h":407:1)
#loc8 = loc("/usr/include/string.h":408:33)
#loc9 = loc("/usr/include/sys/socket.h":102:1)
#loc10 = loc("/usr/include/sys/socket.h":102:62)
#loc11 = loc("/usr/include/netinet/in.h":404:1)
#loc12 = loc("/usr/include/netinet/in.h":405:40)
#loc13 = loc("/usr/include/sys/socket.h":112:1)
#loc14 = loc("/usr/include/sys/socket.h":113:6)
#loc15 = loc("/usr/include/sys/socket.h":296:1)
#loc16 = loc("/usr/include/sys/socket.h":296:39)
#loc17 = loc("/usr/include/sys/socket.h":306:1)
#loc18 = loc("/usr/include/sys/socket.h":307:38)
#loc19 = loc("/usr/include/sys/socket.h":145:1)
#loc20 = loc("/usr/include/sys/socket.h":145:68)
#loc21 = loc("/usr/include/string.h":226:1)
#loc22 = loc("/usr/include/string.h":227:50)
#loc23 = loc("/usr/include/unistd.h":358:1)
#loc24 = loc("/usr/include/unistd.h":358:27)
#loc25 = loc("/usr/include/string.h":149:1)
#loc26 = loc("/usr/include/string.h":150:14)
#loc27 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":150:22)
#loc28 = loc("/usr/include/fcntl.h":209:1)
#loc29 = loc("/usr/include/fcntl.h":209:56)
#loc30 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":60:1)
#loc31 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":161:1)
#loc32 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":62:5)
#loc33 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":62:12)
#loc34 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":64:12)
#loc35 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":64:5)
#loc36 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":65:5)
#loc37 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":151:5)
#loc38 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":65:8)
#loc39 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":65:33)
#loc40 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":66:5)
#loc41 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":146:5)
#loc42 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":148:5)
#loc43 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":67:9)
#loc44 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":145:9)
#loc45 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":72:13)
#loc46 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":72:17)
#loc47 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":73:13)
#loc48 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":73:32)
#loc49 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":74:13)
#loc50 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":74:19)
#loc51 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":75:13)
#loc52 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":75:35)
#loc53 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":76:13)
#loc54 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":76:35)
#loc55 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":77:13)
#loc56 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":77:41)
#loc57 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":77:30)
#loc58 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":77:37)
#loc59 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":78:13)
#loc60 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":130:21)
#loc61 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":88:39)
#loc62 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":88:48)
#loc63 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":88:61)
#loc64 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":88:32)
#loc65 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":88:17)
#loc66 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":88:72)
#loc67 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":89:17)
#loc68 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":92:17)
#loc69 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":89:21)
#loc70 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":89:37)
#loc71 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":90:17)
#loc72 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":91:21)
#loc73 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":93:24)
#loc74 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":93:25)
#loc75 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":93:34)
#loc76 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":93:37)
#loc77 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":93:51)
#loc78 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":93:17)
#loc79 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":93:52)
#loc80 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":94:38)
#loc81 = loc("/usr/include/netinet/in.h":249:5)
#loc82 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":94:17)
#loc83 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":95:43)
#loc84 = loc("/usr/include/netinet/in.h":251:20)
#loc85 = loc("/usr/include/netinet/in.h":33:15)
#loc86 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":95:17)
#loc87 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":96:42)
#loc88 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":96:36)
#loc89 = loc("/usr/include/netinet/in.h":250:15)
#loc90 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":96:17)
#loc91 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":96:50)
#loc92 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":97:17)
#loc93 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":100:17)
#loc94 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":97:26)
#loc95 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":97:58)
#loc96 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":97:59)
#loc97 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":97:68)
#loc98 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":97:82)
#loc99 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":97:21)
#loc100 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":97:88)
#loc101 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":98:17)
#loc102 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":99:21)
#loc103 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":101:17)
#loc104 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":104:17)
#loc105 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":101:28)
#loc106 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":101:42)
#loc107 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":101:21)
#loc108 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":101:61)
#loc109 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":102:17)
#loc110 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":103:21)
#loc111 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":105:39)
#loc112 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":105:53)
#loc113 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":105:59)
#loc114 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":105:32)
#loc115 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":105:17)
#loc116 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":105:63)
#loc117 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":106:17)
#loc118 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":109:17)
#loc119 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":106:21)
#loc120 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":106:37)
#loc121 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":107:17)
#loc122 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":108:21)
#loc123 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":111:35)
#loc124 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":111:58)
#loc125 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":111:65)
#loc126 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":111:63)
#loc127 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":111:49)
#loc128 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":111:72)
#loc129 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":111:75)
#loc130 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":111:86)
#loc131 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":111:91)
#loc132 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":111:106)
#loc133 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":111:116)
#loc134 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":111:117)
#loc135 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":111:120)
#loc136 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":111:30)
#loc137 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":111:17)
#loc138 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":111:121)
#loc139 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":112:17)
#loc140 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":115:17)
#loc141 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":112:21)
#loc142 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":112:35)
#loc143 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":112:48)
#loc144 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":112:51)
#loc145 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":112:65)
#loc146 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":113:17)
#loc147 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":114:21)
#loc148 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":117:61)
#loc149 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":117:17)
#loc150 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":117:22)
#loc151 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":117:32)
#loc152 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":117:45)
#loc153 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":117:56)
#loc154 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":117:57)
#loc155 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":119:34)
#loc156 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":119:40)
#loc157 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":119:27)
#loc158 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":119:17)
#loc159 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":119:44)
#loc160 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":120:17)
#loc161 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":123:17)
#loc162 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":120:21)
#loc163 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":121:17)
#loc164 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":122:32)
#loc165 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":122:22)
#loc166 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":122:21)
#loc167 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":124:34)
#loc168 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":124:40)
#loc169 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":124:27)
#loc170 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":124:17)
#loc171 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":124:44)
#loc172 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":125:17)
#loc173 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":128:17)
#loc174 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":125:21)
#loc175 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":126:17)
#loc176 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":127:32)
#loc177 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":127:22)
#loc178 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":127:21)
#loc179 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":130:20)
#loc180 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":131:13)
#loc181 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":134:13)
#loc182 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":131:17)
#loc183 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":131:33)
#loc184 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":132:13)
#loc185 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":133:30)
#loc186 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":133:17)
#loc187 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":135:13)
#loc188 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":138:13)
#loc189 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":135:17)
#loc190 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":135:33)
#loc191 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":136:13)
#loc192 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":137:30)
#loc193 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":137:17)
#loc194 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":150:9)
#loc195 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":150:16)
#loc196 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":152:5)
#loc197 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":160:5)
#loc198 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":153:9)
#loc199 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":153:13)
#loc200 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":155:25)
#loc201 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":155:31)
#loc202 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":155:38)
#loc203 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":155:47)
#loc204 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":155:55)
#loc205 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":155:20)
#loc206 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":155:9)
#loc207 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":155:63)
#loc208 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":156:9)
#loc209 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":159:9)
#loc210 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":156:13)
#loc211 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":156:26)
#loc212 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":156:25)
#loc213 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":157:9)
#loc214 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":158:19)
#loc215 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":158:13)
#loc216 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":169:1)
#loc217 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":193:1)
#loc218 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":171:5)
#loc219 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":171:12)
#loc220 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":173:12)
#loc221 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":173:5)
#loc222 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":174:5)
#loc223 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":183:5)
#loc224 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":174:8)
#loc225 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":174:33)
#loc226 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":175:5)
#loc227 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":178:5)
#loc228 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":180:5)
#loc229 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":177:9)
#loc230 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":177:16)
#loc231 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":177:22)
#loc232 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":182:9)
#loc233 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":182:16)
#loc234 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":182:22)
#loc235 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":184:5)
#loc236 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":192:5)
#loc237 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":185:9)
#loc238 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":185:13)
#loc239 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":187:25)
#loc240 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":187:31)
#loc241 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":187:38)
#loc242 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":187:47)
#loc243 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":187:55)
#loc244 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":187:20)
#loc245 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":187:9)
#loc246 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":187:63)
#loc247 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":188:9)
#loc248 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":191:9)
#loc249 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":188:13)
#loc250 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":188:26)
#loc251 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":188:25)
#loc252 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":189:9)
#loc253 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":190:19)
#loc254 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":190:13)
#loc255 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":195:1)
#loc256 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":198:1)
#loc257 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":197:5)
#loc258 = loc("/usr/include/stdlib.h":575:1)
#loc259 = loc("/usr/include/stdlib.h":575:41)
#loc260 = loc("/usr/include/time.h":76:1)
#loc261 = loc("/usr/include/time.h":76:38)
#loc262 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc263 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc264 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":218:15)
#loc265 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":220:15)
#loc266 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":223:15)
#loc267 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":225:15)
#loc268 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":213:1)
#loc269 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":228:1)
#loc274 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":214:1)
#loc275 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":216:27)
#loc276 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":216:22)
#loc277 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":216:5)
#loc278 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":218:5)
#loc279 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":219:5)
#loc280 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":220:5)
#loc281 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":223:5)
#loc282 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":224:5)
#loc283 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":225:5)
#loc284 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":227:12)
#loc285 = loc("CWE23_Relative_Path_Traversal__char_listen_socket_open_12.cpp":227:5)
#loc286 = loc(fused[#loc1, #loc2])
#loc287 = loc(fused[#loc3, #loc4])
#loc288 = loc(fused[#loc5, #loc6])
#loc289 = loc(fused[#loc7, #loc8])
#loc290 = loc(fused[#loc9, #loc10])
#loc291 = loc(fused[#loc11, #loc12])
#loc292 = loc(fused[#loc13, #loc14])
#loc293 = loc(fused[#loc15, #loc16])
#loc294 = loc(fused[#loc17, #loc18])
#loc295 = loc(fused[#loc19, #loc20])
#loc296 = loc(fused[#loc21, #loc22])
#loc297 = loc(fused[#loc23, #loc24])
#loc298 = loc(fused[#loc25, #loc26])
#loc299 = loc(fused[#loc28, #loc29])
#loc300 = loc(fused[#loc30, #loc31])
#loc301 = loc(fused[#loc32, #loc33])
#loc302 = loc(fused[#loc35, #loc34])
#loc303 = loc(fused[#loc36, #loc37])
#loc304 = loc(fused[#loc38, #loc39])
#loc305 = loc(fused[#loc40, #loc41, #loc42, #loc37])
#loc306 = loc(fused[#loc43, #loc44])
#loc307 = loc(fused[#loc45, #loc46])
#loc308 = loc(fused[#loc47, #loc48])
#loc309 = loc(fused[#loc49, #loc50])
#loc310 = loc(fused[#loc51, #loc52])
#loc311 = loc(fused[#loc53, #loc54])
#loc312 = loc(fused[#loc55, #loc56])
#loc313 = loc(fused[#loc59, #loc60])
#loc314 = loc(fused[#loc65, #loc66])
#loc315 = loc(fused[#loc67, #loc68])
#loc316 = loc(fused[#loc69, #loc70])
#loc317 = loc(fused[#loc71, #loc68])
#loc318 = loc(fused[#loc73, #loc74])
#loc319 = loc(fused[#loc76, #loc77])
#loc320 = loc(fused[#loc78, #loc79])
#loc321 = loc(fused[#loc82, #loc80])
#loc322 = loc(fused[#loc86, #loc83])
#loc323 = loc(fused[#loc90, #loc91])
#loc324 = loc(fused[#loc92, #loc93])
#loc325 = loc(fused[#loc95, #loc96])
#loc326 = loc(fused[#loc97, #loc98])
#loc327 = loc(fused[#loc99, #loc100])
#loc328 = loc(fused[#loc101, #loc93])
#loc329 = loc(fused[#loc103, #loc104])
#loc330 = loc(fused[#loc107, #loc108])
#loc331 = loc(fused[#loc109, #loc104])
#loc332 = loc(fused[#loc115, #loc116])
#loc333 = loc(fused[#loc117, #loc118])
#loc334 = loc(fused[#loc119, #loc120])
#loc335 = loc(fused[#loc121, #loc118])
#loc336 = loc(fused[#loc127, #loc128])
#loc337 = loc(fused[#loc129, #loc130])
#loc338 = loc(fused[#loc131, #loc132])
#loc339 = loc(fused[#loc131, #loc133])
#loc340 = loc(fused[#loc129, #loc134])
#loc341 = loc(fused[#loc137, #loc138])
#loc342 = loc(fused[#loc139, #loc140])
#loc343 = loc(fused[#loc141, #loc142])
#loc344 = loc(fused[#loc144, #loc145])
#loc345 = loc(fused[#loc146, #loc140])
#loc346 = loc(fused[#loc152, #loc153])
#loc347 = loc(fused[#loc151, #loc153])
#loc348 = loc(fused[#loc150, #loc153])
#loc349 = loc(fused[#loc149, #loc148])
#loc350 = loc(fused[#loc158, #loc159])
#loc351 = loc(fused[#loc160, #loc161])
#loc352 = loc(fused[#loc163, #loc161])
#loc353 = loc(fused[#loc166, #loc164])
#loc354 = loc(fused[#loc170, #loc171])
#loc355 = loc(fused[#loc172, #loc173])
#loc356 = loc(fused[#loc175, #loc173])
#loc357 = loc(fused[#loc178, #loc176])
#loc358 = loc(fused[#loc180, #loc181])
#loc359 = loc(fused[#loc182, #loc183])
#loc360 = loc(fused[#loc184, #loc181])
#loc361 = loc(fused[#loc187, #loc188])
#loc362 = loc(fused[#loc189, #loc190])
#loc363 = loc(fused[#loc191, #loc188])
#loc364 = loc(fused[#loc196, #loc197])
#loc365 = loc(fused[#loc198, #loc199])
#loc366 = loc(fused[#loc201, #loc202])
#loc367 = loc(fused[#loc203, #loc204])
#loc368 = loc(fused[#loc206, #loc207])
#loc369 = loc(fused[#loc208, #loc209])
#loc370 = loc(fused[#loc210, #loc211])
#loc371 = loc(fused[#loc213, #loc209])
#loc372 = loc(fused[#loc216, #loc217])
#loc373 = loc(fused[#loc218, #loc219])
#loc374 = loc(fused[#loc221, #loc220])
#loc375 = loc(fused[#loc222, #loc223])
#loc376 = loc(fused[#loc224, #loc225])
#loc377 = loc(fused[#loc226, #loc227, #loc228, #loc223])
#loc378 = loc(fused[#loc235, #loc236])
#loc379 = loc(fused[#loc237, #loc238])
#loc380 = loc(fused[#loc240, #loc241])
#loc381 = loc(fused[#loc242, #loc243])
#loc382 = loc(fused[#loc245, #loc246])
#loc383 = loc(fused[#loc247, #loc248])
#loc384 = loc(fused[#loc249, #loc250])
#loc385 = loc(fused[#loc252, #loc248])
#loc386 = loc(fused[#loc255, #loc256])
#loc387 = loc(fused[#loc258, #loc259])
#loc388 = loc(fused[#loc260, #loc261])
#loc389 = loc(fused[#loc262, #loc263])
#loc390 = loc(fused[#loc268, #loc269])
#loc393 = loc(fused[#loc285, #loc284])
