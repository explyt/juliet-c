!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_45.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc109)
  cir.func private  @exit(!s32i) extra(#fn_attr) loc(#loc110)
  cir.global "private"  internal dsolocal @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_45_badData = #cir.ptr<null> : !cir.ptr<!s64i> {alignment = 8 : i64} loc(#loc111)
  cir.func no_proto  @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_45_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["data"] {alignment = 8 : i64} loc(#loc113)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc11)
    cir.store %1, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc114)
    %2 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc13)
    %3 = cir.const #cir.int<50> : !s32i loc(#loc14)
    %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc14)
    %5 = cir.const #cir.int<8> : !u64i loc(#loc115)
    %6 = cir.binop(mul, %4, %5) : !u64i loc(#loc116)
    %7 = cir.call @malloc(%6) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc13)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc117)
    cir.store %8, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc118)
    cir.scope {
      %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc21)
      %13 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc22)
      %14 = cir.cast(bitcast, %13 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc22)
      %15 = cir.cmp(eq, %12, %14) : !cir.ptr<!s64i>, !s32i loc(#loc120)
      %16 = cir.cast(int_to_bool, %15 : !s32i), !cir.bool loc(#loc23)
      cir.if %16 {
        %17 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc25)
        %18 = cir.const #cir.int<1> : !s32i loc(#loc26)
        %19 = cir.unary(minus, %18) : !s32i, !s32i loc(#loc27)
        cir.call @exit(%19) : (!s32i) -> () extra(#fn_attr) loc(#loc25)
      } loc(#loc121)
    } loc(#loc119)
    %9 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc28)
    %10 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_45_badData : !cir.ptr<!cir.ptr<!s64i>> loc(#loc111)
    cir.store %9, %10 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc122)
    %11 = cir.get_global @badSink : !cir.ptr<!cir.func<!void ()>> loc(#loc123)
    cir.call %11() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc30)
    cir.return loc(#loc8)
  } loc(#loc112)
  cir.func no_proto  @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_45_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc125)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc34)
    cir.return loc(#loc33)
  } loc(#loc124)
  cir.func private  @printLongLongLine(!s64i) loc(#loc126)
  cir.func private  @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc127)
  cir.func no_proto internal private  @badSink() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["data", init] {alignment = 8 : i64} loc(#loc129)
    %1 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_45_badData : !cir.ptr<!cir.ptr<!s64i>> loc(#loc111)
    %2 = cir.load %1 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc43)
    cir.store %2, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc129)
    cir.scope {
      %3 = cir.alloca !cir.array<!s64i x 100>, !cir.ptr<!cir.array<!s64i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc131)
      %4 = cir.const #cir.zero : !cir.array<!s64i x 100> loc(#loc131)
      cir.store %4, %3 : !cir.array<!s64i x 100>, !cir.ptr<!cir.array<!s64i x 100>> loc(#loc131)
      %5 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc48)
      %6 = cir.cast(bitcast, %5 : !cir.ptr<!s64i>), !cir.ptr<!void> loc(#loc48)
      %7 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s64i x 100>>), !cir.ptr<!s64i> loc(#loc49)
      %8 = cir.cast(bitcast, %7 : !cir.ptr<!s64i>), !cir.ptr<!void> loc(#loc49)
      %9 = cir.const #cir.int<100> : !s32i loc(#loc50)
      %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc50)
      %11 = cir.const #cir.int<8> : !u64i loc(#loc132)
      %12 = cir.binop(mul, %10, %11) : !u64i loc(#loc133)
      cir.libc.memcpy %12 bytes from %8 to %6 : !u64i, !cir.ptr<!void> -> !cir.ptr<!void> loc(#loc134)
      %13 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc55)
      %14 = cir.const #cir.int<0> : !s32i loc(#loc56)
      %15 = cir.ptr_stride(%13 : !cir.ptr<!s64i>, %14 : !s32i), !cir.ptr<!s64i> loc(#loc57)
      %16 = cir.load %15 : !cir.ptr<!s64i>, !s64i loc(#loc55)
      cir.call @printLongLongLine(%16) : (!s64i) -> () loc(#loc58)
      %17 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc59)
      %18 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc60)
      %19 = cir.cast(bitcast, %18 : !cir.ptr<!s64i>), !cir.ptr<!void> loc(#loc60)
      cir.call @free(%19) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc59)
    } loc(#loc130)
    cir.return loc(#loc41)
  } loc(#loc128)
  cir.global "private"  internal dsolocal @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_45_goodG2BData = #cir.ptr<null> : !cir.ptr<!s64i> {alignment = 8 : i64} loc(#loc135)
  cir.func no_proto internal private  @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["data"] {alignment = 8 : i64} loc(#loc137)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc67)
    cir.store %1, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc138)
    %2 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc69)
    %3 = cir.const #cir.int<100> : !s32i loc(#loc70)
    %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc70)
    %5 = cir.const #cir.int<8> : !u64i loc(#loc139)
    %6 = cir.binop(mul, %4, %5) : !u64i loc(#loc140)
    %7 = cir.call @malloc(%6) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc69)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc141)
    cir.store %8, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc142)
    cir.scope {
      %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc77)
      %13 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc78)
      %14 = cir.cast(bitcast, %13 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc78)
      %15 = cir.cmp(eq, %12, %14) : !cir.ptr<!s64i>, !s32i loc(#loc144)
      %16 = cir.cast(int_to_bool, %15 : !s32i), !cir.bool loc(#loc79)
      cir.if %16 {
        %17 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc81)
        %18 = cir.const #cir.int<1> : !s32i loc(#loc82)
        %19 = cir.unary(minus, %18) : !s32i, !s32i loc(#loc83)
        cir.call @exit(%19) : (!s32i) -> () extra(#fn_attr) loc(#loc81)
      } loc(#loc145)
    } loc(#loc143)
    %9 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc84)
    %10 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_45_goodG2BData : !cir.ptr<!cir.ptr<!s64i>> loc(#loc135)
    cir.store %9, %10 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc146)
    %11 = cir.get_global @goodG2BSink : !cir.ptr<!cir.func<!void ()>> loc(#loc147)
    cir.call %11() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc86)
    cir.return loc(#loc64)
  } loc(#loc136)
  cir.func no_proto internal private  @goodG2BSink() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["data", init] {alignment = 8 : i64} loc(#loc149)
    %1 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_45_goodG2BData : !cir.ptr<!cir.ptr<!s64i>> loc(#loc135)
    %2 = cir.load %1 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc91)
    cir.store %2, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc149)
    cir.scope {
      %3 = cir.alloca !cir.array<!s64i x 100>, !cir.ptr<!cir.array<!s64i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc151)
      %4 = cir.const #cir.zero : !cir.array<!s64i x 100> loc(#loc151)
      cir.store %4, %3 : !cir.array<!s64i x 100>, !cir.ptr<!cir.array<!s64i x 100>> loc(#loc151)
      %5 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc96)
      %6 = cir.cast(bitcast, %5 : !cir.ptr<!s64i>), !cir.ptr<!void> loc(#loc96)
      %7 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s64i x 100>>), !cir.ptr<!s64i> loc(#loc97)
      %8 = cir.cast(bitcast, %7 : !cir.ptr<!s64i>), !cir.ptr<!void> loc(#loc97)
      %9 = cir.const #cir.int<100> : !s32i loc(#loc98)
      %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc98)
      %11 = cir.const #cir.int<8> : !u64i loc(#loc152)
      %12 = cir.binop(mul, %10, %11) : !u64i loc(#loc153)
      cir.libc.memcpy %12 bytes from %8 to %6 : !u64i, !cir.ptr<!void> -> !cir.ptr<!void> loc(#loc154)
      %13 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc103)
      %14 = cir.const #cir.int<0> : !s32i loc(#loc104)
      %15 = cir.ptr_stride(%13 : !cir.ptr<!s64i>, %14 : !s32i), !cir.ptr<!s64i> loc(#loc105)
      %16 = cir.load %15 : !cir.ptr<!s64i>, !s64i loc(#loc103)
      cir.call @printLongLongLine(%16) : (!s64i) -> () loc(#loc106)
      %17 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc107)
      %18 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc108)
      %19 = cir.cast(bitcast, %18 : !cir.ptr<!s64i>), !cir.ptr<!void> loc(#loc108)
      cir.call @free(%19) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc107)
    } loc(#loc150)
    cir.return loc(#loc89)
  } loc(#loc148)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_45.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_45.c":19:1)
#loc6 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_45.c":19:18)
#loc7 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_45.c":36:1)
#loc8 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_45.c":45:1)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_45.c":38:5)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_45.c":38:15)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_45.c":39:12)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_45.c":39:5)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_45.c":41:23)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_45.c":41:30)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_45.c":41:33)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_45.c":41:47)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_45.c":41:48)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_45.c":41:5)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_45.c":42:5)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_45.c":42:33)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_45.c":42:9)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_45.c":42:17)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_45.c":42:14)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_45.c":42:23)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_45.c":42:24)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_45.c":42:30)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_45.c":42:29)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_45.c":43:77)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_45.c":43:5)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_45.c":44:5)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_45.c":44:13)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_45.c":75:1)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_45.c":78:1)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_45.c":77:5)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_45.c":77:13)
#loc36 = loc("../../../testcasesupport/std_testcase_io.h":26:1)
#loc37 = loc("../../../testcasesupport/std_testcase_io.h":26:49)
#loc38 = loc("/usr/include/stdlib.h":687:1)
#loc39 = loc("/usr/include/stdlib.h":687:32)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_45.c":24:1)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_45.c":34:1)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_45.c":26:5)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_45.c":26:22)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_45.c":27:5)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_45.c":33:5)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_45.c":28:9)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_45.c":28:33)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_45.c":30:16)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_45.c":30:22)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_45.c":30:30)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_45.c":30:34)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_45.c":30:48)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_45.c":30:9)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_45.c":30:49)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_45.c":31:27)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_45.c":31:32)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_45.c":31:33)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_45.c":31:9)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_45.c":32:9)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_45.c":32:14)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_45.c":20:1)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_45.c":20:18)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_45.c":64:1)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_45.c":73:1)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_45.c":66:5)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_45.c":66:15)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_45.c":67:12)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_45.c":67:5)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_45.c":69:23)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_45.c":69:30)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_45.c":69:34)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_45.c":69:48)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_45.c":69:49)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_45.c":69:5)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_45.c":70:5)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_45.c":70:33)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_45.c":70:9)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_45.c":70:17)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_45.c":70:14)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_45.c":70:23)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_45.c":70:24)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_45.c":70:30)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_45.c":70:29)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_45.c":71:81)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_45.c":71:5)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_45.c":72:5)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_45.c":72:17)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_45.c":52:1)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_45.c":62:1)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_45.c":54:5)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_45.c":54:22)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_45.c":55:5)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_45.c":61:5)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_45.c":56:9)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_45.c":56:33)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_45.c":58:16)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_45.c":58:22)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_45.c":58:30)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_45.c":58:34)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_45.c":58:48)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_45.c":58:9)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_45.c":58:49)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_45.c":59:27)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_45.c":59:32)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_45.c":59:33)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_45.c":59:9)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_45.c":60:9)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_45.c":60:14)
#loc109 = loc(fused[#loc1, #loc2])
#loc110 = loc(fused[#loc3, #loc4])
#loc111 = loc(fused[#loc5, #loc6])
#loc112 = loc(fused[#loc7, #loc8])
#loc113 = loc(fused[#loc9, #loc10])
#loc114 = loc(fused[#loc12, #loc11])
#loc115 = loc(fused[#loc15, #loc16])
#loc116 = loc(fused[#loc14, #loc16])
#loc117 = loc(fused[#loc13, #loc17])
#loc118 = loc(fused[#loc18, #loc17])
#loc119 = loc(fused[#loc19, #loc20])
#loc120 = loc(fused[#loc21, #loc22])
#loc121 = loc(fused[#loc24, #loc20])
#loc122 = loc(fused[#loc29, #loc28])
#loc123 = loc(fused[#loc30, #loc31])
#loc124 = loc(fused[#loc32, #loc33])
#loc125 = loc(fused[#loc34, #loc35])
#loc126 = loc(fused[#loc36, #loc37])
#loc127 = loc(fused[#loc38, #loc39])
#loc128 = loc(fused[#loc40, #loc41])
#loc129 = loc(fused[#loc42, #loc43])
#loc130 = loc(fused[#loc44, #loc45])
#loc131 = loc(fused[#loc46, #loc47])
#loc132 = loc(fused[#loc51, #loc52])
#loc133 = loc(fused[#loc50, #loc52])
#loc134 = loc(fused[#loc53, #loc54])
#loc135 = loc(fused[#loc61, #loc62])
#loc136 = loc(fused[#loc63, #loc64])
#loc137 = loc(fused[#loc65, #loc66])
#loc138 = loc(fused[#loc68, #loc67])
#loc139 = loc(fused[#loc71, #loc72])
#loc140 = loc(fused[#loc70, #loc72])
#loc141 = loc(fused[#loc69, #loc73])
#loc142 = loc(fused[#loc74, #loc73])
#loc143 = loc(fused[#loc75, #loc76])
#loc144 = loc(fused[#loc77, #loc78])
#loc145 = loc(fused[#loc80, #loc76])
#loc146 = loc(fused[#loc85, #loc84])
#loc147 = loc(fused[#loc86, #loc87])
#loc148 = loc(fused[#loc88, #loc89])
#loc149 = loc(fused[#loc90, #loc91])
#loc150 = loc(fused[#loc92, #loc93])
#loc151 = loc(fused[#loc94, #loc95])
#loc152 = loc(fused[#loc99, #loc100])
#loc153 = loc(fused[#loc98, #loc100])
#loc154 = loc(fused[#loc101, #loc102])
