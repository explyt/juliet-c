!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc217 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":230:10)
#loc218 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":230:14)
#loc219 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":230:20)
#loc220 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":230:32)
#true = #cir.bool<true> : !cir.bool
!ty_in_addr = !cir.struct<struct "in_addr" {!u32i} #cir.record.decl.ast>
#loc367 = loc(fused[#loc217, #loc218])
#loc368 = loc(fused[#loc219, #loc220])
!ty_sockaddr = !cir.struct<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.struct<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE78_OS_Command_Injection/s04/CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f64 = dense<64> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.global "private" constant cir_private @__const.goodG2B2.dataBuffer = #cir.const_array<"ls " : !cir.array<!s8i x 3>, trailing_zeros> : !cir.array<!s8i x 100> loc(#loc285)
  cir.global "private" constant cir_private @__const.goodG2B1.dataBuffer = #cir.const_array<"ls " : !cir.array<!s8i x 3>, trailing_zeros> : !cir.array<!s8i x 100> loc(#loc286)
  cir.global "private" constant cir_private @__const.CWE78_OS_Command_Injection__char_listen_socket_execlp_15_bad.dataBuffer = #cir.const_array<"ls " : !cir.array<!s8i x 3>, trailing_zeros> : !cir.array<!s8i x 100> loc(#loc287)
  cir.func private @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc288)
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc289)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc290)
  cir.func private @bind(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc291)
  cir.func private @listen(!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc292)
  cir.func private @accept(!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc293)
  cir.func private @recv(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc294)
  cir.func private @strchr(!cir.ptr<!s8i>, !s32i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc295)
  cir.func private @close(!s32i) -> !s32i loc(#loc296)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc297)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc27)
  cir.func private @execlp(!cir.ptr<!s8i>, !cir.ptr<!s8i>, ...) -> !s32i extra(#fn_attr) loc(#loc298)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"sh\00" : !cir.array<!s8i x 3>> : !cir.array<!s8i x 3> {alignment = 1 : i64} loc(#loc30)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"-c\00" : !cir.array<!s8i x 3>> : !cir.array<!s8i x 3> {alignment = 1 : i64} loc(#loc31)
  cir.func no_proto @CWE78_OS_Command_Injection__char_listen_socket_execlp_15_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc300)
    %1 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["dataBuffer"] {alignment = 16 : i64} loc(#loc287)
    %2 = cir.get_global @__const.CWE78_OS_Command_Injection__char_listen_socket_execlp_15_bad.dataBuffer : !cir.ptr<!cir.array<!s8i x 100>> loc(#loc287)
    cir.copy %2 to %1 : !cir.ptr<!cir.array<!s8i x 100>> loc(#loc287)
    %3 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc36)
    cir.store %3, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc301)
    cir.scope {
      %13 = cir.const #cir.int<6> : !s32i loc(#loc40)
      cir.switch (%13 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          cir.scope {
            %14 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc304)
            %15 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc305)
            %16 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["replace"] {alignment = 8 : i64} loc(#loc306)
            %17 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc307)
            %18 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc308)
            %19 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc309)
            %20 = cir.const #cir.int<1> : !s32i loc(#loc51)
            %21 = cir.unary(minus, %20) : !s32i, !s32i loc(#loc51)
            cir.store %21, %17 : !s32i, !cir.ptr<!s32i> loc(#loc307)
            %22 = cir.const #cir.int<1> : !s32i loc(#loc53)
            %23 = cir.unary(minus, %22) : !s32i, !s32i loc(#loc53)
            cir.store %23, %18 : !s32i, !cir.ptr<!s32i> loc(#loc308)
            %24 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc56)
            %25 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc57)
            %26 = cir.call @strlen(%25) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc56)
            cir.store %26, %19 : !u64i, !cir.ptr<!u64i> loc(#loc309)
            cir.scope {
              cir.do {
                %27 = cir.const #cir.int<2> : !s32i loc(#loc60)
                %28 = cir.const #cir.int<1> : !s32i loc(#loc61)
                %29 = cir.const #cir.int<6> : !s32i loc(#loc62)
                %30 = cir.call @socket(%27, %28, %29) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc63)
                cir.store %30, %17 : !s32i, !cir.ptr<!s32i> loc(#loc311)
                cir.scope {
                  %84 = cir.load %17 : !cir.ptr<!s32i>, !s32i loc(#loc68)
                  %85 = cir.const #cir.int<1> : !s32i loc(#loc69)
                  %86 = cir.unary(minus, %85) : !s32i, !s32i loc(#loc69)
                  %87 = cir.cmp(eq, %84, %86) : !s32i, !cir.bool loc(#loc313)
                  cir.if %87 {
                    cir.break loc(#loc71)
                  } loc(#loc314)
                } loc(#loc312)
                %31 = cir.cast(bitcast, %15 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc315)
                %32 = cir.const #cir.int<0> : !s32i loc(#loc74)
                %33 = cir.const #cir.int<16> : !u64i loc(#loc316)
                cir.libc.memset %33 bytes from %31 set to %32 : !cir.ptr<!void>, !s32i, !u64i loc(#loc317)
                %34 = cir.const #cir.int<2> : !s32i loc(#loc79)
                %35 = cir.cast(integral, %34 : !s32i), !u16i loc(#loc79)
                %36 = cir.get_member %15[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc80)
                cir.store %35, %36 : !u16i, !cir.ptr<!u16i> loc(#loc318)
                %37 = cir.const #cir.int<0> : !s32i loc(#loc82)
                %38 = cir.cast(integral, %37 : !s32i), !u32i loc(#loc82)
                %39 = cir.get_member %15[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc83)
                %40 = cir.get_member %39[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc84)
                cir.store %38, %40 : !u32i, !cir.ptr<!u32i> loc(#loc319)
                %41 = cir.const #cir.int<27015> : !s32i loc(#loc86)
                %42 = cir.cast(integral, %41 : !s32i), !u16i loc(#loc86)
                %43 = cir.call @htons(%42) : (!u16i) -> !u16i extra(#fn_attr) loc(#loc87)
                %44 = cir.get_member %15[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc88)
                cir.store %43, %44 : !u16i, !cir.ptr<!u16i> loc(#loc320)
                cir.scope {
                  %84 = cir.load %17 : !cir.ptr<!s32i>, !s32i loc(#loc93)
                  %85 = cir.cast(bitcast, %15 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc322)
                  %86 = cir.const #cir.int<16> : !u64i loc(#loc323)
                  %87 = cir.cast(integral, %86 : !u64i), !u32i loc(#loc323)
                  %88 = cir.call @bind(%84, %85, %87) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc98)
                  %89 = cir.const #cir.int<1> : !s32i loc(#loc99)
                  %90 = cir.unary(minus, %89) : !s32i, !s32i loc(#loc99)
                  %91 = cir.cmp(eq, %88, %90) : !s32i, !cir.bool loc(#loc324)
                  cir.if %91 {
                    cir.break loc(#loc101)
                  } loc(#loc325)
                } loc(#loc321)
                cir.scope {
                  %84 = cir.load %17 : !cir.ptr<!s32i>, !s32i loc(#loc104)
                  %85 = cir.const #cir.int<5> : !s32i loc(#loc105)
                  %86 = cir.call @listen(%84, %85) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc106)
                  %87 = cir.const #cir.int<1> : !s32i loc(#loc107)
                  %88 = cir.unary(minus, %87) : !s32i, !s32i loc(#loc107)
                  %89 = cir.cmp(eq, %86, %88) : !s32i, !cir.bool loc(#loc327)
                  cir.if %89 {
                    cir.break loc(#loc109)
                  } loc(#loc328)
                } loc(#loc326)
                %45 = cir.load %17 : !cir.ptr<!s32i>, !s32i loc(#loc110)
                %46 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc111)
                %47 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc112)
                %48 = cir.call @accept(%45, %46, %47) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc113)
                cir.store %48, %18 : !s32i, !cir.ptr<!s32i> loc(#loc329)
                cir.scope {
                  %84 = cir.load %18 : !cir.ptr<!s32i>, !s32i loc(#loc118)
                  %85 = cir.const #cir.int<1> : !s32i loc(#loc119)
                  %86 = cir.unary(minus, %85) : !s32i, !s32i loc(#loc119)
                  %87 = cir.cmp(eq, %84, %86) : !s32i, !cir.bool loc(#loc331)
                  cir.if %87 {
                    cir.break loc(#loc121)
                  } loc(#loc332)
                } loc(#loc330)
                %49 = cir.load %18 : !cir.ptr<!s32i>, !s32i loc(#loc122)
                %50 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc123)
                %51 = cir.load %19 : !cir.ptr<!u64i>, !u64i loc(#loc124)
                %52 = cir.ptr_stride(%50 : !cir.ptr<!s8i>, %51 : !u64i), !cir.ptr<!s8i> loc(#loc125)
                %53 = cir.cast(bitcast, %52 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc333)
                %54 = cir.const #cir.int<1> : !u64i loc(#loc334)
                %55 = cir.const #cir.int<100> : !s32i loc(#loc130)
                %56 = cir.cast(integral, %55 : !s32i), !u64i loc(#loc130)
                %57 = cir.load %19 : !cir.ptr<!u64i>, !u64i loc(#loc131)
                %58 = cir.binop(sub, %56, %57) : !u64i loc(#loc335)
                %59 = cir.const #cir.int<1> : !s32i loc(#loc132)
                %60 = cir.cast(integral, %59 : !s32i), !u64i loc(#loc132)
                %61 = cir.binop(sub, %58, %60) : !u64i loc(#loc336)
                %62 = cir.binop(mul, %54, %61) : !u64i loc(#loc337)
                %63 = cir.const #cir.int<0> : !s32i loc(#loc134)
                %64 = cir.call @recv(%49, %53, %62, %63) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc135)
                %65 = cir.cast(integral, %64 : !s64i), !s32i loc(#loc135)
                cir.store %65, %14 : !s32i, !cir.ptr<!s32i> loc(#loc338)
                cir.scope {
                  %84 = cir.load %14 : !cir.ptr<!s32i>, !s32i loc(#loc140)
                  %85 = cir.const #cir.int<1> : !s32i loc(#loc141)
                  %86 = cir.unary(minus, %85) : !s32i, !s32i loc(#loc141)
                  %87 = cir.cmp(eq, %84, %86) : !s32i, !cir.bool loc(#loc340)
                  %88 = cir.ternary(%87, true {
                    %89 = cir.const #true loc(#loc142)
                    cir.yield %89 : !cir.bool loc(#loc142)
                  }, false {
                    %89 = cir.load %14 : !cir.ptr<!s32i>, !s32i loc(#loc143)
                    %90 = cir.const #cir.int<0> : !s32i loc(#loc144)
                    %91 = cir.cmp(eq, %89, %90) : !s32i, !cir.bool loc(#loc341)
                    %92 = cir.ternary(%91, true {
                      %93 = cir.const #true loc(#loc142)
                      cir.yield %93 : !cir.bool loc(#loc142)
                    }, false {
                      %93 = cir.const #false loc(#loc142)
                      cir.yield %93 : !cir.bool loc(#loc142)
                    }) : (!cir.bool) -> !cir.bool loc(#loc142)
                    cir.yield %92 : !cir.bool loc(#loc142)
                  }) : (!cir.bool) -> !cir.bool loc(#loc142)
                  cir.if %88 {
                    cir.break loc(#loc146)
                  } loc(#loc342)
                } loc(#loc339)
                %66 = cir.const #cir.int<0> : !s32i loc(#loc147)
                %67 = cir.cast(integral, %66 : !s32i), !s8i loc(#loc147)
                %68 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc148)
                %69 = cir.load %19 : !cir.ptr<!u64i>, !u64i loc(#loc149)
                %70 = cir.load %14 : !cir.ptr<!s32i>, !s32i loc(#loc150)
                %71 = cir.cast(integral, %70 : !s32i), !u64i loc(#loc150)
                %72 = cir.const #cir.int<1> : !u64i loc(#loc343)
                %73 = cir.binop(div, %71, %72) : !u64i loc(#loc344)
                %74 = cir.binop(add, %69, %73) : !u64i loc(#loc345)
                %75 = cir.ptr_stride(%68 : !cir.ptr<!s8i>, %74 : !u64i), !cir.ptr<!s8i> loc(#loc153)
                cir.store %67, %75 : !s8i, !cir.ptr<!s8i> loc(#loc346)
                %76 = cir.get_global @strchr : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !s32i)>> loc(#loc154)
                %77 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc155)
                %78 = cir.const #cir.int<13> : !s32i loc(#loc156)
                %79 = cir.call @strchr(%77, %78) : (!cir.ptr<!s8i>, !s32i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc154)
                cir.store %79, %16 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc347)
                cir.scope {
                  %84 = cir.load %16 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc161)
                  %85 = cir.cast(ptr_to_bool, %84 : !cir.ptr<!s8i>), !cir.bool loc(#loc161)
                  cir.if %85 {
                    %86 = cir.const #cir.int<0> : !s32i loc(#loc163)
                    %87 = cir.cast(integral, %86 : !s32i), !s8i loc(#loc163)
                    %88 = cir.load deref %16 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc164)
                    cir.store %87, %88 : !s8i, !cir.ptr<!s8i> loc(#loc350)
                  } loc(#loc349)
                } loc(#loc348)
                %80 = cir.get_global @strchr : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !s32i)>> loc(#loc166)
                %81 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc167)
                %82 = cir.const #cir.int<10> : !s32i loc(#loc168)
                %83 = cir.call @strchr(%81, %82) : (!cir.ptr<!s8i>, !s32i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc166)
                cir.store %83, %16 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc351)
                cir.scope {
                  %84 = cir.load %16 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc173)
                  %85 = cir.cast(ptr_to_bool, %84 : !cir.ptr<!s8i>), !cir.bool loc(#loc173)
                  cir.if %85 {
                    %86 = cir.const #cir.int<0> : !s32i loc(#loc175)
                    %87 = cir.cast(integral, %86 : !s32i), !s8i loc(#loc175)
                    %88 = cir.load deref %16 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc176)
                    cir.store %87, %88 : !s8i, !cir.ptr<!s8i> loc(#loc354)
                  } loc(#loc353)
                } loc(#loc352)
                cir.yield loc(#loc59)
              } while {
                %27 = cir.const #cir.int<0> : !s32i loc(#loc178)
                %28 = cir.cast(int_to_bool, %27 : !s32i), !cir.bool loc(#loc178)
                cir.condition(%28) loc(#loc178)
              } loc(#loc310)
            } loc(#loc310)
            cir.scope {
              %27 = cir.load %17 : !cir.ptr<!s32i>, !s32i loc(#loc181)
              %28 = cir.const #cir.int<1> : !s32i loc(#loc182)
              %29 = cir.unary(minus, %28) : !s32i, !s32i loc(#loc182)
              %30 = cir.cmp(ne, %27, %29) : !s32i, !cir.bool loc(#loc356)
              cir.if %30 {
                %31 = cir.load %17 : !cir.ptr<!s32i>, !s32i loc(#loc184)
                %32 = cir.call @close(%31) : (!s32i) -> !s32i loc(#loc185)
              } loc(#loc357)
            } loc(#loc355)
            cir.scope {
              %27 = cir.load %18 : !cir.ptr<!s32i>, !s32i loc(#loc188)
              %28 = cir.const #cir.int<1> : !s32i loc(#loc189)
              %29 = cir.unary(minus, %28) : !s32i, !s32i loc(#loc189)
              %30 = cir.cmp(ne, %27, %29) : !s32i, !cir.bool loc(#loc359)
              cir.if %30 {
                %31 = cir.load %18 : !cir.ptr<!s32i>, !s32i loc(#loc191)
                %32 = cir.call @close(%31) : (!s32i) -> !s32i loc(#loc192)
              } loc(#loc360)
            } loc(#loc358)
          } loc(#loc303)
          cir.break loc(#loc193)
        } loc(#loc41)
        cir.case(default, []) {
          %14 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc27)
          %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc27)
          cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc195)
          cir.break loc(#loc196)
        } loc(#loc194)
        cir.yield loc(#loc38)
      } loc(#loc38)
    } loc(#loc302)
    %4 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc30)
    %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc30)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc197)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc197)
    %8 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc31)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc31)
    %10 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc198)
    %11 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc199)
    %12 = cir.call @execlp(%5, %7, %9, %10, %11) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!void>) -> !s32i extra(#fn_attr) loc(#loc200)
    cir.return loc(#loc33)
  } loc(#loc299)
  cir.func no_proto @CWE78_OS_Command_Injection__char_listen_socket_execlp_15_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc362)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc203)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc363)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc205)
    cir.return loc(#loc202)
  } loc(#loc361)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc364)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc365)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc211)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc212)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc213)
  cir.global "private" constant cir_private dsolocal @".str.6" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc214)
  cir.func @main(%arg0: !s32i loc(fused[#loc217, #loc218]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc219, #loc220])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc367)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc368)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc216)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc221)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc221)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc222)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc223)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc223)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc224)
    %6 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc211)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc211)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc225)
    %8 = cir.get_global @CWE78_OS_Command_Injection__char_listen_socket_execlp_15_good : !cir.ptr<!cir.func<!void ()>> loc(#loc369)
    cir.call @CWE78_OS_Command_Injection__char_listen_socket_execlp_15_good() : () -> () loc(#loc226)
    %9 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc212)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc212)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc228)
    %11 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc213)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc213)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc229)
    %13 = cir.get_global @CWE78_OS_Command_Injection__char_listen_socket_execlp_15_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc370)
    cir.call @CWE78_OS_Command_Injection__char_listen_socket_execlp_15_bad() : () -> () loc(#loc230)
    %14 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc214)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc214)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc232)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc233)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc371)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc371)
    cir.return %17 : !s32i loc(#loc371)
  } loc(#loc366)
  cir.func private @strcat(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc372)
  cir.global "private" constant cir_private dsolocal @".str.7" = #cir.const_array<"*.*\00" : !cir.array<!s8i x 4>> : !cir.array<!s8i x 4> {alignment = 1 : i64} loc(#loc237)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc374)
    %1 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["dataBuffer"] {alignment = 16 : i64} loc(#loc286)
    %2 = cir.get_global @__const.goodG2B1.dataBuffer : !cir.ptr<!cir.array<!s8i x 100>> loc(#loc286)
    cir.copy %2 to %1 : !cir.ptr<!cir.array<!s8i x 100>> loc(#loc286)
    %3 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc242)
    cir.store %3, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc375)
    cir.scope {
      %13 = cir.const #cir.int<5> : !s32i loc(#loc246)
      cir.switch (%13 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %14 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc248)
          %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc248)
          cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc249)
          cir.break loc(#loc250)
        } loc(#loc247)
        cir.case(default, []) {
          %14 = cir.get_global @strcat : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc252)
          %15 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc253)
          %16 = cir.get_global @".str.7" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc237)
          %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc237)
          %18 = cir.call @strcat(%15, %17) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc252)
          cir.break loc(#loc254)
        } loc(#loc251)
        cir.yield loc(#loc244)
      } loc(#loc244)
    } loc(#loc376)
    %4 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc255)
    %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc255)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc256)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc256)
    %8 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc257)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc257)
    %10 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc258)
    %11 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc259)
    %12 = cir.call @execlp(%5, %7, %9, %10, %11) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!void>) -> !s32i extra(#fn_attr) loc(#loc260)
    cir.return loc(#loc239)
  } loc(#loc373)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc378)
    %1 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["dataBuffer"] {alignment = 16 : i64} loc(#loc285)
    %2 = cir.get_global @__const.goodG2B2.dataBuffer : !cir.ptr<!cir.array<!s8i x 100>> loc(#loc285)
    cir.copy %2 to %1 : !cir.ptr<!cir.array<!s8i x 100>> loc(#loc285)
    %3 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc265)
    cir.store %3, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc379)
    cir.scope {
      %13 = cir.const #cir.int<6> : !s32i loc(#loc269)
      cir.switch (%13 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %14 = cir.get_global @strcat : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc271)
          %15 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc272)
          %16 = cir.get_global @".str.7" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc273)
          %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc273)
          %18 = cir.call @strcat(%15, %17) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc271)
          cir.break loc(#loc274)
        } loc(#loc270)
        cir.case(default, []) {
          %14 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc276)
          %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc276)
          cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc277)
          cir.break loc(#loc278)
        } loc(#loc275)
        cir.yield loc(#loc267)
      } loc(#loc267)
    } loc(#loc380)
    %4 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc279)
    %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc279)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc280)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc280)
    %8 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc281)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc281)
    %10 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc282)
    %11 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc283)
    %12 = cir.call @execlp(%5, %7, %9, %10, %11) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!void>) -> !s32i extra(#fn_attr) loc(#loc284)
    cir.return loc(#loc262)
  } loc(#loc377)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE78_OS_Command_Injection/s04/CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":0:0)
#loc1 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":195:5)
#loc2 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":195:28)
#loc3 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":172:5)
#loc4 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":172:28)
#loc5 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":68:5)
#loc6 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":68:28)
#loc7 = loc("/usr/include/string.h":407:1)
#loc8 = loc("/usr/include/string.h":408:33)
#loc9 = loc("/usr/include/sys/socket.h":102:1)
#loc10 = loc("/usr/include/sys/socket.h":102:62)
#loc11 = loc("/usr/include/netinet/in.h":404:1)
#loc12 = loc("/usr/include/netinet/in.h":405:40)
#loc13 = loc("/usr/include/sys/socket.h":112:1)
#loc14 = loc("/usr/include/sys/socket.h":113:6)
#loc15 = loc("/usr/include/sys/socket.h":296:1)
#loc16 = loc("/usr/include/sys/socket.h":296:39)
#loc17 = loc("/usr/include/sys/socket.h":306:1)
#loc18 = loc("/usr/include/sys/socket.h":307:38)
#loc19 = loc("/usr/include/sys/socket.h":145:1)
#loc20 = loc("/usr/include/sys/socket.h":145:68)
#loc21 = loc("/usr/include/string.h":246:1)
#loc22 = loc("/usr/include/string.h":247:33)
#loc23 = loc("/usr/include/unistd.h":358:1)
#loc24 = loc("/usr/include/unistd.h":358:27)
#loc25 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc26 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc27 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":155:19)
#loc28 = loc("/usr/include/unistd.h":605:1)
#loc29 = loc("/usr/include/unistd.h":606:14)
#loc30 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":161:12)
#loc31 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":161:38)
#loc32 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":65:1)
#loc33 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":162:1)
#loc34 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":67:5)
#loc35 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":67:12)
#loc36 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":69:12)
#loc37 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":69:5)
#loc38 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":70:5)
#loc39 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":157:5)
#loc40 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":70:12)
#loc41 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":72:5)
#loc42 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":73:5)
#loc43 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":151:5)
#loc44 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":78:9)
#loc45 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":78:13)
#loc46 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":79:9)
#loc47 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":79:28)
#loc48 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":80:9)
#loc49 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":80:15)
#loc50 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":81:9)
#loc51 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":81:31)
#loc52 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":82:9)
#loc53 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":82:31)
#loc54 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":83:9)
#loc55 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":83:37)
#loc56 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":83:26)
#loc57 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":83:33)
#loc58 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":84:9)
#loc59 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":136:17)
#loc60 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":94:35)
#loc61 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":94:44)
#loc62 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":94:57)
#loc63 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":94:28)
#loc64 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":94:13)
#loc65 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":94:68)
#loc66 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":95:13)
#loc67 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":98:13)
#loc68 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":95:17)
#loc69 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":95:33)
#loc70 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":96:13)
#loc71 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":97:17)
#loc72 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":99:20)
#loc73 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":99:21)
#loc74 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":99:30)
#loc75 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":99:33)
#loc76 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":99:47)
#loc77 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":99:13)
#loc78 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":99:48)
#loc79 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":100:34)
#loc80 = loc("/usr/include/netinet/in.h":249:5)
#loc81 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":100:13)
#loc82 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":101:39)
#loc83 = loc("/usr/include/netinet/in.h":251:20)
#loc84 = loc("/usr/include/netinet/in.h":33:15)
#loc85 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":101:13)
#loc86 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":102:38)
#loc87 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":102:32)
#loc88 = loc("/usr/include/netinet/in.h":250:15)
#loc89 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":102:13)
#loc90 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":102:46)
#loc91 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":103:13)
#loc92 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":106:13)
#loc93 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":103:22)
#loc94 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":103:54)
#loc95 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":103:55)
#loc96 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":103:64)
#loc97 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":103:78)
#loc98 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":103:17)
#loc99 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":103:84)
#loc100 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":104:13)
#loc101 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":105:17)
#loc102 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":107:13)
#loc103 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":110:13)
#loc104 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":107:24)
#loc105 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":107:38)
#loc106 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":107:17)
#loc107 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":107:57)
#loc108 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":108:13)
#loc109 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":109:17)
#loc110 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":111:35)
#loc111 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":111:49)
#loc112 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":111:55)
#loc113 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":111:28)
#loc114 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":111:13)
#loc115 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":111:59)
#loc116 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":112:13)
#loc117 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":115:13)
#loc118 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":112:17)
#loc119 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":112:33)
#loc120 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":113:13)
#loc121 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":114:17)
#loc122 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":117:31)
#loc123 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":117:54)
#loc124 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":117:61)
#loc125 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":117:59)
#loc126 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":117:45)
#loc127 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":117:68)
#loc128 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":117:71)
#loc129 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":117:82)
#loc130 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":117:87)
#loc131 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":117:93)
#loc132 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":117:103)
#loc133 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":117:104)
#loc134 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":117:107)
#loc135 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":117:26)
#loc136 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":117:13)
#loc137 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":117:108)
#loc138 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":118:13)
#loc139 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":121:13)
#loc140 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":118:17)
#loc141 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":118:31)
#loc142 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":118:44)
#loc143 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":118:47)
#loc144 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":118:61)
#loc145 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":119:13)
#loc146 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":120:17)
#loc147 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":123:57)
#loc148 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":123:13)
#loc149 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":123:18)
#loc150 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":123:28)
#loc151 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":123:41)
#loc152 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":123:52)
#loc153 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":123:53)
#loc154 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":125:23)
#loc155 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":125:30)
#loc156 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":125:36)
#loc157 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":125:13)
#loc158 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":125:40)
#loc159 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":126:13)
#loc160 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":129:13)
#loc161 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":126:17)
#loc162 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":127:13)
#loc163 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":128:28)
#loc164 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":128:18)
#loc165 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":128:17)
#loc166 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":130:23)
#loc167 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":130:30)
#loc168 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":130:36)
#loc169 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":130:13)
#loc170 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":130:40)
#loc171 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":131:13)
#loc172 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":134:13)
#loc173 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":131:17)
#loc174 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":132:13)
#loc175 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":133:28)
#loc176 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":133:18)
#loc177 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":133:17)
#loc178 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":136:16)
#loc179 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":137:9)
#loc180 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":140:9)
#loc181 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":137:13)
#loc182 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":137:29)
#loc183 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":138:9)
#loc184 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":139:26)
#loc185 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":139:13)
#loc186 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":141:9)
#loc187 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":144:9)
#loc188 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":141:13)
#loc189 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":141:29)
#loc190 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":142:9)
#loc191 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":143:26)
#loc192 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":143:13)
#loc193 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":152:5)
#loc194 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":153:5)
#loc195 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":155:9)
#loc196 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":156:9)
#loc197 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":161:25)
#loc198 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":161:52)
#loc199 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":161:66)
#loc200 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":161:5)
#loc201 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":214:1)
#loc202 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":218:1)
#loc203 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":216:5)
#loc204 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":216:14)
#loc205 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":217:5)
#loc206 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":217:14)
#loc207 = loc("/usr/include/stdlib.h":575:1)
#loc208 = loc("/usr/include/stdlib.h":575:41)
#loc209 = loc("/usr/include/time.h":76:1)
#loc210 = loc("/usr/include/time.h":76:38)
#loc211 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":235:15)
#loc212 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":237:15)
#loc213 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":240:15)
#loc214 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":242:15)
#loc215 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":230:1)
#loc216 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":245:1)
#loc221 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":231:1)
#loc222 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":233:27)
#loc223 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":233:22)
#loc224 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":233:5)
#loc225 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":235:5)
#loc226 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":236:5)
#loc227 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":236:67)
#loc228 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":237:5)
#loc229 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":240:5)
#loc230 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":241:5)
#loc231 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":241:66)
#loc232 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":242:5)
#loc233 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":244:12)
#loc234 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":244:5)
#loc235 = loc("/usr/include/string.h":149:1)
#loc236 = loc("/usr/include/string.h":150:14)
#loc237 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":182:22)
#loc238 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":169:1)
#loc239 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":189:1)
#loc240 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":171:5)
#loc241 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":171:12)
#loc242 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":173:12)
#loc243 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":173:5)
#loc244 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":174:5)
#loc245 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":184:5)
#loc246 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":174:12)
#loc247 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":176:5)
#loc248 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":178:19)
#loc249 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":178:9)
#loc250 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":179:9)
#loc251 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":180:5)
#loc252 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":182:9)
#loc253 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":182:16)
#loc254 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":183:9)
#loc255 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":188:12)
#loc256 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":188:25)
#loc257 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":188:38)
#loc258 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":188:52)
#loc259 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":188:66)
#loc260 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":188:5)
#loc261 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":192:1)
#loc262 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":212:1)
#loc263 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":194:5)
#loc264 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":194:12)
#loc265 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":196:12)
#loc266 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":196:5)
#loc267 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":197:5)
#loc268 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":207:5)
#loc269 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":197:12)
#loc270 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":199:5)
#loc271 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":201:9)
#loc272 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":201:16)
#loc273 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":201:22)
#loc274 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":202:9)
#loc275 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":203:5)
#loc276 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":205:19)
#loc277 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":205:9)
#loc278 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":206:9)
#loc279 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":211:12)
#loc280 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":211:25)
#loc281 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":211:38)
#loc282 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":211:52)
#loc283 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":211:66)
#loc284 = loc("CWE78_OS_Command_Injection__char_listen_socket_execlp_15.c":211:5)
#loc285 = loc(fused[#loc1, #loc2])
#loc286 = loc(fused[#loc3, #loc4])
#loc287 = loc(fused[#loc5, #loc6])
#loc288 = loc(fused[#loc7, #loc8])
#loc289 = loc(fused[#loc9, #loc10])
#loc290 = loc(fused[#loc11, #loc12])
#loc291 = loc(fused[#loc13, #loc14])
#loc292 = loc(fused[#loc15, #loc16])
#loc293 = loc(fused[#loc17, #loc18])
#loc294 = loc(fused[#loc19, #loc20])
#loc295 = loc(fused[#loc21, #loc22])
#loc296 = loc(fused[#loc23, #loc24])
#loc297 = loc(fused[#loc25, #loc26])
#loc298 = loc(fused[#loc28, #loc29])
#loc299 = loc(fused[#loc32, #loc33])
#loc300 = loc(fused[#loc34, #loc35])
#loc301 = loc(fused[#loc37, #loc36])
#loc302 = loc(fused[#loc38, #loc39])
#loc303 = loc(fused[#loc42, #loc43])
#loc304 = loc(fused[#loc44, #loc45])
#loc305 = loc(fused[#loc46, #loc47])
#loc306 = loc(fused[#loc48, #loc49])
#loc307 = loc(fused[#loc50, #loc51])
#loc308 = loc(fused[#loc52, #loc53])
#loc309 = loc(fused[#loc54, #loc55])
#loc310 = loc(fused[#loc58, #loc59])
#loc311 = loc(fused[#loc64, #loc65])
#loc312 = loc(fused[#loc66, #loc67])
#loc313 = loc(fused[#loc68, #loc69])
#loc314 = loc(fused[#loc70, #loc67])
#loc315 = loc(fused[#loc72, #loc73])
#loc316 = loc(fused[#loc75, #loc76])
#loc317 = loc(fused[#loc77, #loc78])
#loc318 = loc(fused[#loc81, #loc79])
#loc319 = loc(fused[#loc85, #loc82])
#loc320 = loc(fused[#loc89, #loc90])
#loc321 = loc(fused[#loc91, #loc92])
#loc322 = loc(fused[#loc94, #loc95])
#loc323 = loc(fused[#loc96, #loc97])
#loc324 = loc(fused[#loc98, #loc99])
#loc325 = loc(fused[#loc100, #loc92])
#loc326 = loc(fused[#loc102, #loc103])
#loc327 = loc(fused[#loc106, #loc107])
#loc328 = loc(fused[#loc108, #loc103])
#loc329 = loc(fused[#loc114, #loc115])
#loc330 = loc(fused[#loc116, #loc117])
#loc331 = loc(fused[#loc118, #loc119])
#loc332 = loc(fused[#loc120, #loc117])
#loc333 = loc(fused[#loc126, #loc127])
#loc334 = loc(fused[#loc128, #loc129])
#loc335 = loc(fused[#loc130, #loc131])
#loc336 = loc(fused[#loc130, #loc132])
#loc337 = loc(fused[#loc128, #loc133])
#loc338 = loc(fused[#loc136, #loc137])
#loc339 = loc(fused[#loc138, #loc139])
#loc340 = loc(fused[#loc140, #loc141])
#loc341 = loc(fused[#loc143, #loc144])
#loc342 = loc(fused[#loc145, #loc139])
#loc343 = loc(fused[#loc151, #loc152])
#loc344 = loc(fused[#loc150, #loc152])
#loc345 = loc(fused[#loc149, #loc152])
#loc346 = loc(fused[#loc148, #loc147])
#loc347 = loc(fused[#loc157, #loc158])
#loc348 = loc(fused[#loc159, #loc160])
#loc349 = loc(fused[#loc162, #loc160])
#loc350 = loc(fused[#loc165, #loc163])
#loc351 = loc(fused[#loc169, #loc170])
#loc352 = loc(fused[#loc171, #loc172])
#loc353 = loc(fused[#loc174, #loc172])
#loc354 = loc(fused[#loc177, #loc175])
#loc355 = loc(fused[#loc179, #loc180])
#loc356 = loc(fused[#loc181, #loc182])
#loc357 = loc(fused[#loc183, #loc180])
#loc358 = loc(fused[#loc186, #loc187])
#loc359 = loc(fused[#loc188, #loc189])
#loc360 = loc(fused[#loc190, #loc187])
#loc361 = loc(fused[#loc201, #loc202])
#loc362 = loc(fused[#loc203, #loc204])
#loc363 = loc(fused[#loc205, #loc206])
#loc364 = loc(fused[#loc207, #loc208])
#loc365 = loc(fused[#loc209, #loc210])
#loc366 = loc(fused[#loc215, #loc216])
#loc369 = loc(fused[#loc226, #loc227])
#loc370 = loc(fused[#loc230, #loc231])
#loc371 = loc(fused[#loc234, #loc233])
#loc372 = loc(fused[#loc235, #loc236])
#loc373 = loc(fused[#loc238, #loc239])
#loc374 = loc(fused[#loc240, #loc241])
#loc375 = loc(fused[#loc243, #loc242])
#loc376 = loc(fused[#loc244, #loc245])
#loc377 = loc(fused[#loc261, #loc262])
#loc378 = loc(fused[#loc263, #loc264])
#loc379 = loc(fused[#loc266, #loc265])
#loc380 = loc(fused[#loc267, #loc268])
