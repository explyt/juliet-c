!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.struct<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.struct<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.struct<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
!ty__IO_FILE = !cir.struct<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!cir.struct<struct "_IO_FILE">>>, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__int_fscanf_divide_16.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @__isoc99_fscanf(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i loc(#loc86)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc87)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"%d\00" : !cir.array<!s8i x 3>> : !cir.array<!s8i x 3> {alignment = 1 : i64} loc(#loc5)
  cir.func private @printIntLine(!s32i) loc(#loc88)
  cir.func no_proto @CWE369_Divide_by_Zero__int_fscanf_divide_16_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc90)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc12)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc13)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc91)
    cir.br ^bb1 loc(#loc92)
  ^bb1:  // pred: ^bb0
    cir.br ^bb2 loc(#loc92)
  ^bb2:  // pred: ^bb1
    %3 = cir.const #cir.int<1> : !s32i loc(#loc17)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc17)
    cir.brcond %4 ^bb3, ^bb4 loc(#loc17)
  ^bb3:  // pred: ^bb2
    %5 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc18)
    %6 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc87)
    %7 = cir.load %6 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc19)
    %8 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc5)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc5)
    %10 = cir.call @__isoc99_fscanf(%7, %9, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s32i>) -> !s32i loc(#loc18)
    cir.br ^bb4 loc(#loc20)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc16)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc93)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc93)
  ^bb7:  // pred: ^bb6
    %11 = cir.const #cir.int<1> : !s32i loc(#loc23)
    %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc23)
    cir.brcond %12 ^bb8, ^bb9 loc(#loc23)
  ^bb8:  // pred: ^bb7
    %13 = cir.const #cir.int<100> : !s32i loc(#loc24)
    %14 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc25)
    %15 = cir.binop(div, %13, %14) : !s32i loc(#loc94)
    cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc26)
    cir.br ^bb9 loc(#loc27)
  ^bb9:  // 2 preds: ^bb7, ^bb8
    cir.br ^bb10 loc(#loc22)
  ^bb10:  // pred: ^bb9
    cir.return loc(#loc9)
  } loc(#loc89)
  cir.func no_proto @CWE369_Divide_by_Zero__int_fscanf_divide_16_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc96)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc30)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc97)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc32)
    cir.return loc(#loc29)
  } loc(#loc95)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc98)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"This would result in a divide by zero\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc36)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc100)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc41)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc42)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc101)
    cir.br ^bb1 loc(#loc102)
  ^bb1:  // pred: ^bb0
    cir.br ^bb2 loc(#loc102)
  ^bb2:  // pred: ^bb1
    %3 = cir.const #cir.int<1> : !s32i loc(#loc46)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc46)
    cir.brcond %4 ^bb3, ^bb4 loc(#loc46)
  ^bb3:  // pred: ^bb2
    %5 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc47)
    %6 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc87)
    %7 = cir.load %6 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc48)
    %8 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc49)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc49)
    %10 = cir.call @__isoc99_fscanf(%7, %9, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s32i>) -> !s32i loc(#loc47)
    cir.br ^bb4 loc(#loc50)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc45)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc103)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc103)
  ^bb7:  // pred: ^bb6
    %11 = cir.const #cir.int<1> : !s32i loc(#loc53)
    %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc53)
    cir.brcond %12 ^bb8, ^bb14 loc(#loc53)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc104)
  ^bb9:  // pred: ^bb8
    %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc56)
    %14 = cir.const #cir.int<0> : !s32i loc(#loc57)
    %15 = cir.cmp(ne, %13, %14) : !s32i, !cir.bool loc(#loc105)
    cir.brcond %15 ^bb10, ^bb11 loc(#loc106)
  ^bb10:  // pred: ^bb9
    %16 = cir.const #cir.int<100> : !s32i loc(#loc61)
    %17 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc62)
    %18 = cir.binop(div, %16, %17) : !s32i loc(#loc107)
    cir.call @printIntLine(%18) : (!s32i) -> () loc(#loc63)
    cir.br ^bb12 loc(#loc59)
  ^bb11:  // pred: ^bb9
    %19 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc36)
    %20 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc36)
    cir.call @printLine(%20) : (!cir.ptr<!s8i>) -> () loc(#loc64)
    cir.br ^bb12 loc(#loc55)
  ^bb12:  // 2 preds: ^bb10, ^bb11
    cir.br ^bb13 loc(#loc55)
  ^bb13:  // pred: ^bb12
    cir.br ^bb14 loc(#loc65)
  ^bb14:  // 2 preds: ^bb7, ^bb13
    cir.br ^bb15 loc(#loc52)
  ^bb15:  // pred: ^bb14
    cir.return loc(#loc38)
  } loc(#loc99)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc109)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc70)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc71)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc110)
    cir.br ^bb1 loc(#loc111)
  ^bb1:  // pred: ^bb0
    cir.br ^bb2 loc(#loc111)
  ^bb2:  // pred: ^bb1
    %3 = cir.const #cir.int<1> : !s32i loc(#loc75)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc75)
    cir.brcond %4 ^bb3, ^bb4 loc(#loc75)
  ^bb3:  // pred: ^bb2
    %5 = cir.const #cir.int<7> : !s32i loc(#loc76)
    cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc112)
    cir.br ^bb4 loc(#loc78)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc74)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc113)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc113)
  ^bb7:  // pred: ^bb6
    %6 = cir.const #cir.int<1> : !s32i loc(#loc81)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc81)
    cir.brcond %7 ^bb8, ^bb9 loc(#loc81)
  ^bb8:  // pred: ^bb7
    %8 = cir.const #cir.int<100> : !s32i loc(#loc82)
    %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc83)
    %10 = cir.binop(div, %8, %9) : !s32i loc(#loc114)
    cir.call @printIntLine(%10) : (!s32i) -> () loc(#loc84)
    cir.br ^bb9 loc(#loc85)
  ^bb9:  // 2 preds: ^bb7, ^bb8
    cir.br ^bb10 loc(#loc80)
  ^bb10:  // pred: ^bb9
    cir.return loc(#loc67)
  } loc(#loc108)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__int_fscanf_divide_16.c":0:0)
#loc1 = loc("/usr/include/stdio.h":463:1)
#loc2 = loc("/usr/include/stdio.h":465:33)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_16.c":30:23)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc8 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_16.c":22:1)
#loc9 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_16.c":39:1)
#loc10 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_16.c":24:5)
#loc11 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_16.c":24:9)
#loc12 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_16.c":26:13)
#loc13 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_16.c":26:12)
#loc14 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_16.c":26:5)
#loc15 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_16.c":27:5)
#loc16 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_16.c":32:5)
#loc17 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_16.c":27:11)
#loc18 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_16.c":30:9)
#loc19 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_16.c":30:16)
#loc20 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_16.c":31:9)
#loc21 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_16.c":33:5)
#loc22 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_16.c":38:5)
#loc23 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_16.c":33:11)
#loc24 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_16.c":36:22)
#loc25 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_16.c":36:28)
#loc26 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_16.c":36:9)
#loc27 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_16.c":37:9)
#loc28 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_16.c":92:1)
#loc29 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_16.c":96:1)
#loc30 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_16.c":94:5)
#loc31 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_16.c":94:13)
#loc32 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_16.c":95:5)
#loc33 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_16.c":95:13)
#loc34 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc35 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc36 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_16.c":66:23)
#loc37 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_16.c":46:1)
#loc38 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_16.c":70:1)
#loc39 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_16.c":48:5)
#loc40 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_16.c":48:9)
#loc41 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_16.c":50:13)
#loc42 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_16.c":50:12)
#loc43 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_16.c":50:5)
#loc44 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_16.c":51:5)
#loc45 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_16.c":56:5)
#loc46 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_16.c":51:11)
#loc47 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_16.c":54:9)
#loc48 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_16.c":54:16)
#loc49 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_16.c":54:23)
#loc50 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_16.c":55:9)
#loc51 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_16.c":57:5)
#loc52 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_16.c":69:5)
#loc53 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_16.c":57:11)
#loc54 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_16.c":60:9)
#loc55 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_16.c":67:9)
#loc56 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_16.c":60:13)
#loc57 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_16.c":60:21)
#loc58 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_16.c":61:9)
#loc59 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_16.c":63:9)
#loc60 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_16.c":65:9)
#loc61 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_16.c":62:26)
#loc62 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_16.c":62:32)
#loc63 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_16.c":62:13)
#loc64 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_16.c":66:13)
#loc65 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_16.c":68:9)
#loc66 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_16.c":73:1)
#loc67 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_16.c":90:1)
#loc68 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_16.c":75:5)
#loc69 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_16.c":75:9)
#loc70 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_16.c":77:13)
#loc71 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_16.c":77:12)
#loc72 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_16.c":77:5)
#loc73 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_16.c":78:5)
#loc74 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_16.c":83:5)
#loc75 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_16.c":78:11)
#loc76 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_16.c":81:16)
#loc77 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_16.c":81:9)
#loc78 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_16.c":82:9)
#loc79 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_16.c":84:5)
#loc80 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_16.c":89:5)
#loc81 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_16.c":84:11)
#loc82 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_16.c":87:22)
#loc83 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_16.c":87:28)
#loc84 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_16.c":87:9)
#loc85 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_16.c":88:9)
#loc86 = loc(fused[#loc1, #loc2])
#loc87 = loc(fused[#loc3, #loc4])
#loc88 = loc(fused[#loc6, #loc7])
#loc89 = loc(fused[#loc8, #loc9])
#loc90 = loc(fused[#loc10, #loc11])
#loc91 = loc(fused[#loc14, #loc12])
#loc92 = loc(fused[#loc15, #loc16])
#loc93 = loc(fused[#loc21, #loc22])
#loc94 = loc(fused[#loc24, #loc25])
#loc95 = loc(fused[#loc28, #loc29])
#loc96 = loc(fused[#loc30, #loc31])
#loc97 = loc(fused[#loc32, #loc33])
#loc98 = loc(fused[#loc34, #loc35])
#loc99 = loc(fused[#loc37, #loc38])
#loc100 = loc(fused[#loc39, #loc40])
#loc101 = loc(fused[#loc43, #loc41])
#loc102 = loc(fused[#loc44, #loc45])
#loc103 = loc(fused[#loc51, #loc52])
#loc104 = loc(fused[#loc54, #loc55])
#loc105 = loc(fused[#loc56, #loc57])
#loc106 = loc(fused[#loc58, #loc59, #loc60, #loc55])
#loc107 = loc(fused[#loc61, #loc62])
#loc108 = loc(fused[#loc66, #loc67])
#loc109 = loc(fused[#loc68, #loc69])
#loc110 = loc(fused[#loc72, #loc70])
#loc111 = loc(fused[#loc73, #loc74])
#loc112 = loc(fused[#loc77, #loc76])
#loc113 = loc(fused[#loc79, #loc80])
#loc114 = loc(fused[#loc82, #loc83])
