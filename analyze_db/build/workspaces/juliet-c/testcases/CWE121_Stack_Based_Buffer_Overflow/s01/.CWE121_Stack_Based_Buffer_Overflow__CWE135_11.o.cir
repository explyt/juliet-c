!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func no_proto private @globalReturnsTrue(...) -> !s32i loc(#loc190)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<[#cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<0> : !s32i]> : !cir.array<!s32i x 43> {alignment = 4 : i64} loc(#loc3)
  cir.func private @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc191)
  cir.func private @wcscpy(!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc192)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc193)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE135_11_bad() extra(#fn_attr1) {
    %0 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc195)
    %1 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc196)
    %2 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc197)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc18)
    cir.store %3, %2 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc198)
    cir.br ^bb1 loc(#loc199)
  ^bb1:  // pred: ^bb0
    %4 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc200)
    %5 = cir.cast(bitcast, %4 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc200)
    %6 = cir.call %5() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc22)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc22)
    cir.brcond %7 ^bb2, ^bb3 loc(#loc201)
  ^bb2:  // pred: ^bb1
    %8 = cir.get_global @".str" : !cir.ptr<!cir.array<!s32i x 43>> loc(#loc3)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s32i x 43>>), !cir.ptr<!s32i> loc(#loc3)
    %10 = cir.cast(bitcast, %9 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc3)
    cir.store %10, %2 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc202)
    cir.br ^bb3 loc(#loc21)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc21)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc203)
  ^bb5:  // pred: ^bb4
    %11 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc204)
    %12 = cir.cast(bitcast, %11 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc204)
    %13 = cir.call %12() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc28)
    %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc28)
    cir.brcond %14 ^bb6, ^bb9 loc(#loc205)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc206)
  ^bb7:  // pred: ^bb6
    %15 = cir.get_global @strlen : !cir.ptr<!cir.func<(!cir.ptr<!s8i>) -> !u64i>> loc(#loc33)
    %16 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc34)
    %17 = cir.cast(bitcast, %16 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc34)
    %18 = cir.call @strlen(%17) : (!cir.ptr<!s8i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc33)
    cir.store %18, %0 : !u64i, !cir.ptr<!u64i> loc(#loc195)
    %19 = cir.load %0 : !cir.ptr<!u64i>, !u64i loc(#loc15)
    %20 = cir.const #cir.int<1> : !s32i loc(#loc15)
    %21 = cir.cast(integral, %20 : !s32i), !u64i loc(#loc15)
    %22 = cir.binop(add, %19, %21) : !u64i loc(#loc15)
    %23 = cir.const #cir.int<4> : !u64i loc(#loc15)
    %24 = cir.binop(mul, %22, %23) : !u64i loc(#loc15)
    %25 = cir.alloca !u8i, !cir.ptr<!u8i>, %24 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc15)
    %26 = cir.cast(bitcast, %25 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc15)
    cir.store %26, %1 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc196)
    %27 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc35)
    %28 = cir.cast(bitcast, %27 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc35)
    %29 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc36)
    %30 = cir.cast(bitcast, %29 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc36)
    %31 = cir.call @wcscpy(%28, %30) : (!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc37)
    %32 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc38)
    %33 = cir.cast(bitcast, %32 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc38)
    cir.call @printLine(%33) : (!cir.ptr<!s8i>) -> () loc(#loc39)
    cir.br ^bb8 loc(#loc32)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc27)
  ^bb9:  // 2 preds: ^bb5, ^bb8
    cir.br ^bb10 loc(#loc27)
  ^bb10:  // pred: ^bb9
    cir.return loc(#loc11)
  } loc(#loc194)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE135_11_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<()>> loc(#loc208)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc42)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<()>> loc(#loc209)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc44)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<()>> loc(#loc210)
    cir.call %2() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc46)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<()>> loc(#loc211)
    cir.call %3() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc48)
    cir.return loc(#loc41)
  } loc(#loc207)
  cir.func no_proto private @globalReturnsFalse(...) -> !s32i loc(#loc212)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc52)
  cir.func private @wcslen(!cir.ptr<!s32i>) -> !u64i extra(#fn_attr) loc(#loc213)
  cir.func private @printWLine(!cir.ptr<!s32i>) loc(#loc214)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc216)
    %1 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc217)
    %2 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc218)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc65)
    cir.store %3, %2 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc219)
    cir.br ^bb1 loc(#loc220)
  ^bb1:  // pred: ^bb0
    %4 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc221)
    %5 = cir.cast(bitcast, %4 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc221)
    %6 = cir.call %5() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc69)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc69)
    cir.brcond %7 ^bb2, ^bb3 loc(#loc222)
  ^bb2:  // pred: ^bb1
    %8 = cir.get_global @".str" : !cir.ptr<!cir.array<!s32i x 43>> loc(#loc72)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s32i x 43>>), !cir.ptr<!s32i> loc(#loc72)
    %10 = cir.cast(bitcast, %9 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc72)
    cir.store %10, %2 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc223)
    cir.br ^bb3 loc(#loc68)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc68)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc224)
  ^bb5:  // pred: ^bb4
    %11 = cir.get_global @globalReturnsFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc225)
    %12 = cir.cast(bitcast, %11 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc225)
    %13 = cir.call %12() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc76)
    %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc76)
    cir.brcond %14 ^bb6, ^bb7 loc(#loc226)
  ^bb6:  // pred: ^bb5
    %15 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc52)
    %16 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc52)
    cir.call @printLine(%16) : (!cir.ptr<!s8i>) -> () loc(#loc81)
    cir.br ^bb10 loc(#loc79)
  ^bb7:  // pred: ^bb5
    cir.br ^bb8 loc(#loc227)
  ^bb8:  // pred: ^bb7
    %17 = cir.get_global @wcslen : !cir.ptr<!cir.func<(!cir.ptr<!s32i>) -> !u64i>> loc(#loc84)
    %18 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc85)
    %19 = cir.cast(bitcast, %18 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc85)
    %20 = cir.call @wcslen(%19) : (!cir.ptr<!s32i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc84)
    cir.store %20, %0 : !u64i, !cir.ptr<!u64i> loc(#loc216)
    %21 = cir.load %0 : !cir.ptr<!u64i>, !u64i loc(#loc62)
    %22 = cir.const #cir.int<1> : !s32i loc(#loc62)
    %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc62)
    %24 = cir.binop(add, %21, %23) : !u64i loc(#loc62)
    %25 = cir.const #cir.int<4> : !u64i loc(#loc62)
    %26 = cir.binop(mul, %24, %25) : !u64i loc(#loc62)
    %27 = cir.alloca !u8i, !cir.ptr<!u8i>, %26 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc62)
    %28 = cir.cast(bitcast, %27 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc62)
    cir.store %28, %1 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc217)
    %29 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc86)
    %30 = cir.cast(bitcast, %29 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc86)
    %31 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc87)
    %32 = cir.cast(bitcast, %31 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc87)
    %33 = cir.call @wcscpy(%30, %32) : (!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc88)
    %34 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc89)
    %35 = cir.cast(bitcast, %34 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc89)
    cir.call @printWLine(%35) : (!cir.ptr<!s32i>) -> () loc(#loc90)
    cir.br ^bb9 loc(#loc83)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc75)
  ^bb10:  // 2 preds: ^bb6, ^bb9
    cir.br ^bb11 loc(#loc75)
  ^bb11:  // pred: ^bb10
    cir.return loc(#loc58)
  } loc(#loc215)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc229)
    %1 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc230)
    %2 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc231)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc99)
    cir.store %3, %2 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc232)
    cir.br ^bb1 loc(#loc233)
  ^bb1:  // pred: ^bb0
    %4 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc234)
    %5 = cir.cast(bitcast, %4 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc234)
    %6 = cir.call %5() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc103)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc103)
    cir.brcond %7 ^bb2, ^bb3 loc(#loc235)
  ^bb2:  // pred: ^bb1
    %8 = cir.get_global @".str" : !cir.ptr<!cir.array<!s32i x 43>> loc(#loc106)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s32i x 43>>), !cir.ptr<!s32i> loc(#loc106)
    %10 = cir.cast(bitcast, %9 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc106)
    cir.store %10, %2 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc236)
    cir.br ^bb3 loc(#loc102)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc102)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc237)
  ^bb5:  // pred: ^bb4
    %11 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc238)
    %12 = cir.cast(bitcast, %11 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc238)
    %13 = cir.call %12() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc110)
    %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc110)
    cir.brcond %14 ^bb6, ^bb9 loc(#loc239)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc240)
  ^bb7:  // pred: ^bb6
    %15 = cir.get_global @wcslen : !cir.ptr<!cir.func<(!cir.ptr<!s32i>) -> !u64i>> loc(#loc115)
    %16 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc116)
    %17 = cir.cast(bitcast, %16 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc116)
    %18 = cir.call @wcslen(%17) : (!cir.ptr<!s32i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc115)
    cir.store %18, %0 : !u64i, !cir.ptr<!u64i> loc(#loc229)
    %19 = cir.load %0 : !cir.ptr<!u64i>, !u64i loc(#loc96)
    %20 = cir.const #cir.int<1> : !s32i loc(#loc96)
    %21 = cir.cast(integral, %20 : !s32i), !u64i loc(#loc96)
    %22 = cir.binop(add, %19, %21) : !u64i loc(#loc96)
    %23 = cir.const #cir.int<4> : !u64i loc(#loc96)
    %24 = cir.binop(mul, %22, %23) : !u64i loc(#loc96)
    %25 = cir.alloca !u8i, !cir.ptr<!u8i>, %24 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc96)
    %26 = cir.cast(bitcast, %25 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc96)
    cir.store %26, %1 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc230)
    %27 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc117)
    %28 = cir.cast(bitcast, %27 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc117)
    %29 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc118)
    %30 = cir.cast(bitcast, %29 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc118)
    %31 = cir.call @wcscpy(%28, %30) : (!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc119)
    %32 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc120)
    %33 = cir.cast(bitcast, %32 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc120)
    cir.call @printWLine(%33) : (!cir.ptr<!s32i>) -> () loc(#loc121)
    cir.br ^bb8 loc(#loc114)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc109)
  ^bb9:  // 2 preds: ^bb5, ^bb8
    cir.br ^bb10 loc(#loc109)
  ^bb10:  // pred: ^bb9
    cir.return loc(#loc92)
  } loc(#loc228)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\00" : !cir.array<!s8i x 43>> : !cir.array<!s8i x 43> {alignment = 1 : i64} loc(#loc122)
  cir.func private @strcpy(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc241)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc243)
    %1 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc244)
    %2 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc245)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc133)
    cir.store %3, %2 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc246)
    cir.br ^bb1 loc(#loc247)
  ^bb1:  // pred: ^bb0
    %4 = cir.get_global @globalReturnsFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc248)
    %5 = cir.cast(bitcast, %4 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc248)
    %6 = cir.call %5() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc137)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc137)
    cir.brcond %7 ^bb2, ^bb3 loc(#loc249)
  ^bb2:  // pred: ^bb1
    %8 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc142)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc142)
    cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc143)
    cir.br ^bb4 loc(#loc140)
  ^bb3:  // pred: ^bb1
    %10 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 43>> loc(#loc122)
    %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 43>>), !cir.ptr<!s8i> loc(#loc122)
    %12 = cir.cast(bitcast, %11 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc122)
    cir.store %12, %2 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc250)
    cir.br ^bb4 loc(#loc136)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc136)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc251)
  ^bb6:  // pred: ^bb5
    %13 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc252)
    %14 = cir.cast(bitcast, %13 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc252)
    %15 = cir.call %14() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc147)
    %16 = cir.cast(int_to_bool, %15 : !s32i), !cir.bool loc(#loc147)
    cir.brcond %16 ^bb7, ^bb10 loc(#loc253)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc254)
  ^bb8:  // pred: ^bb7
    %17 = cir.get_global @strlen : !cir.ptr<!cir.func<(!cir.ptr<!s8i>) -> !u64i>> loc(#loc152)
    %18 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc153)
    %19 = cir.cast(bitcast, %18 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc153)
    %20 = cir.call @strlen(%19) : (!cir.ptr<!s8i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc152)
    cir.store %20, %0 : !u64i, !cir.ptr<!u64i> loc(#loc243)
    %21 = cir.load %0 : !cir.ptr<!u64i>, !u64i loc(#loc130)
    %22 = cir.const #cir.int<1> : !s32i loc(#loc130)
    %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc130)
    %24 = cir.binop(add, %21, %23) : !u64i loc(#loc130)
    %25 = cir.const #cir.int<1> : !s32i loc(#loc130)
    %26 = cir.cast(integral, %25 : !s32i), !u64i loc(#loc130)
    %27 = cir.binop(mul, %24, %26) : !u64i loc(#loc130)
    %28 = cir.alloca !u8i, !cir.ptr<!u8i>, %27 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc130)
    %29 = cir.cast(bitcast, %28 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc130)
    cir.store %29, %1 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc244)
    %30 = cir.get_global @strcpy : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i>>> loc(#loc154)
    %31 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc155)
    %32 = cir.cast(bitcast, %31 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc155)
    %33 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc156)
    %34 = cir.cast(bitcast, %33 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc156)
    %35 = cir.call @strcpy(%32, %34) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc154)
    %36 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc157)
    %37 = cir.cast(bitcast, %36 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc157)
    cir.call @printLine(%37) : (!cir.ptr<!s8i>) -> () loc(#loc158)
    cir.br ^bb9 loc(#loc151)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc146)
  ^bb10:  // 2 preds: ^bb6, ^bb9
    cir.br ^bb11 loc(#loc146)
  ^bb11:  // pred: ^bb10
    cir.return loc(#loc126)
  } loc(#loc242)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc256)
    %1 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc257)
    %2 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc258)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc167)
    cir.store %3, %2 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc259)
    cir.br ^bb1 loc(#loc260)
  ^bb1:  // pred: ^bb0
    %4 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc261)
    %5 = cir.cast(bitcast, %4 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc261)
    %6 = cir.call %5() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc171)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc171)
    cir.brcond %7 ^bb2, ^bb3 loc(#loc262)
  ^bb2:  // pred: ^bb1
    %8 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 43>> loc(#loc174)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 43>>), !cir.ptr<!s8i> loc(#loc174)
    %10 = cir.cast(bitcast, %9 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc174)
    cir.store %10, %2 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc263)
    cir.br ^bb3 loc(#loc170)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc170)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc264)
  ^bb5:  // pred: ^bb4
    %11 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc265)
    %12 = cir.cast(bitcast, %11 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc265)
    %13 = cir.call %12() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc178)
    %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc178)
    cir.brcond %14 ^bb6, ^bb9 loc(#loc266)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc267)
  ^bb7:  // pred: ^bb6
    %15 = cir.get_global @strlen : !cir.ptr<!cir.func<(!cir.ptr<!s8i>) -> !u64i>> loc(#loc183)
    %16 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc184)
    %17 = cir.cast(bitcast, %16 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc184)
    %18 = cir.call @strlen(%17) : (!cir.ptr<!s8i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc183)
    cir.store %18, %0 : !u64i, !cir.ptr<!u64i> loc(#loc256)
    %19 = cir.load %0 : !cir.ptr<!u64i>, !u64i loc(#loc164)
    %20 = cir.const #cir.int<1> : !s32i loc(#loc164)
    %21 = cir.cast(integral, %20 : !s32i), !u64i loc(#loc164)
    %22 = cir.binop(add, %19, %21) : !u64i loc(#loc164)
    %23 = cir.const #cir.int<1> : !s32i loc(#loc164)
    %24 = cir.cast(integral, %23 : !s32i), !u64i loc(#loc164)
    %25 = cir.binop(mul, %22, %24) : !u64i loc(#loc164)
    %26 = cir.alloca !u8i, !cir.ptr<!u8i>, %25 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc164)
    %27 = cir.cast(bitcast, %26 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc164)
    cir.store %27, %1 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc257)
    %28 = cir.get_global @strcpy : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i>>> loc(#loc185)
    %29 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc186)
    %30 = cir.cast(bitcast, %29 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc186)
    %31 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc187)
    %32 = cir.cast(bitcast, %31 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc187)
    %33 = cir.call @strcpy(%30, %32) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc185)
    %34 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc188)
    %35 = cir.cast(bitcast, %34 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc188)
    cir.call @printLine(%35) : (!cir.ptr<!s8i>) -> () loc(#loc189)
    cir.br ^bb8 loc(#loc182)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc177)
  ^bb9:  // 2 preds: ^bb5, ^bb8
    cir.br ^bb10 loc(#loc177)
  ^bb10:  // pred: ^bb9
    cir.return loc(#loc160)
  } loc(#loc255)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":48:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":48:23)
#loc3 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":34:24)
#loc4 = loc("/usr/include/string.h":407:1)
#loc5 = loc("/usr/include/string.h":408:33)
#loc6 = loc("/usr/include/wchar.h":98:1)
#loc7 = loc("/usr/include/wchar.h":100:14)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc9 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc10 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":27:1)
#loc11 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":46:1)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":40:13)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":40:49)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":41:13)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":41:35)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":29:5)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":29:12)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":30:12)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":30:5)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":31:5)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":35:5)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":31:8)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":31:26)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":32:5)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":34:9)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":36:5)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":45:5)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":36:8)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":36:26)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":37:5)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":38:9)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":44:9)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":40:30)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":40:45)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":42:26)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":42:32)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":42:19)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":43:31)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":43:13)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":150:1)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":156:1)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":152:5)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":152:14)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":153:5)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":153:14)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":154:5)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":154:14)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":155:5)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":155:14)
#loc50 = loc("../../../testcasesupport/std_testcase_io.h":50:1)
#loc51 = loc("../../../testcasesupport/std_testcase_io.h":50:24)
#loc52 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":65:19)
#loc53 = loc("/usr/include/wchar.h":247:1)
#loc54 = loc("/usr/include/wchar.h":247:51)
#loc55 = loc("../../../testcasesupport/std_testcase_io.h":16:1)
#loc56 = loc("../../../testcasesupport/std_testcase_io.h":16:37)
#loc57 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":53:1)
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":77:1)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":71:13)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":71:52)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":72:13)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":72:35)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":55:5)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":55:12)
#loc65 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":56:12)
#loc66 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":56:5)
#loc67 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":57:5)
#loc68 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":61:5)
#loc69 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":57:8)
#loc70 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":57:26)
#loc71 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":58:5)
#loc72 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":60:24)
#loc73 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":60:9)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":62:5)
#loc75 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":76:5)
#loc76 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":62:8)
#loc77 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":62:27)
#loc78 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":63:5)
#loc79 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":66:5)
#loc80 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":68:5)
#loc81 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":65:9)
#loc82 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":69:9)
#loc83 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":75:9)
#loc84 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":71:30)
#loc85 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":71:48)
#loc86 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":73:26)
#loc87 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":73:32)
#loc88 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":73:19)
#loc89 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":74:35)
#loc90 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":74:13)
#loc91 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":80:1)
#loc92 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":99:1)
#loc93 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":93:13)
#loc94 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":93:52)
#loc95 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":94:13)
#loc96 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":94:35)
#loc97 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":82:5)
#loc98 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":82:12)
#loc99 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":83:12)
#loc100 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":83:5)
#loc101 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":84:5)
#loc102 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":88:5)
#loc103 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":84:8)
#loc104 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":84:26)
#loc105 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":85:5)
#loc106 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":87:24)
#loc107 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":87:9)
#loc108 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":89:5)
#loc109 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":98:5)
#loc110 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":89:8)
#loc111 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":89:26)
#loc112 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":90:5)
#loc113 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":91:9)
#loc114 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":97:9)
#loc115 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":93:30)
#loc116 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":93:48)
#loc117 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":95:26)
#loc118 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":95:32)
#loc119 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":95:19)
#loc120 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":96:35)
#loc121 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":96:13)
#loc122 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":114:24)
#loc123 = loc("/usr/include/string.h":141:1)
#loc124 = loc("/usr/include/string.h":142:14)
#loc125 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":102:1)
#loc126 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":126:1)
#loc127 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":120:13)
#loc128 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":120:49)
#loc129 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":121:13)
#loc130 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":121:35)
#loc131 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":104:5)
#loc132 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":104:12)
#loc133 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":105:12)
#loc134 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":105:5)
#loc135 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":106:5)
#loc136 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":115:5)
#loc137 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":106:8)
#loc138 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":106:27)
#loc139 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":107:5)
#loc140 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":110:5)
#loc141 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":112:5)
#loc142 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":109:19)
#loc143 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":109:9)
#loc144 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":114:9)
#loc145 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":116:5)
#loc146 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":125:5)
#loc147 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":116:8)
#loc148 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":116:26)
#loc149 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":117:5)
#loc150 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":118:9)
#loc151 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":124:9)
#loc152 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":120:30)
#loc153 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":120:45)
#loc154 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":122:19)
#loc155 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":122:26)
#loc156 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":122:32)
#loc157 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":123:31)
#loc158 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":123:13)
#loc159 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":129:1)
#loc160 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":148:1)
#loc161 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":142:13)
#loc162 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":142:49)
#loc163 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":143:13)
#loc164 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":143:35)
#loc165 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":131:5)
#loc166 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":131:12)
#loc167 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":132:12)
#loc168 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":132:5)
#loc169 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":133:5)
#loc170 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":137:5)
#loc171 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":133:8)
#loc172 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":133:26)
#loc173 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":134:5)
#loc174 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":136:24)
#loc175 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":136:9)
#loc176 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":138:5)
#loc177 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":147:5)
#loc178 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":138:8)
#loc179 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":138:26)
#loc180 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":139:5)
#loc181 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":140:9)
#loc182 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":146:9)
#loc183 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":142:30)
#loc184 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":142:45)
#loc185 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":144:19)
#loc186 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":144:26)
#loc187 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":144:32)
#loc188 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":145:31)
#loc189 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c":145:13)
#loc190 = loc(fused[#loc1, #loc2])
#loc191 = loc(fused[#loc4, #loc5])
#loc192 = loc(fused[#loc6, #loc7])
#loc193 = loc(fused[#loc8, #loc9])
#loc194 = loc(fused[#loc10, #loc11])
#loc195 = loc(fused[#loc12, #loc13])
#loc196 = loc(fused[#loc14, #loc15])
#loc197 = loc(fused[#loc16, #loc17])
#loc198 = loc(fused[#loc19, #loc18])
#loc199 = loc(fused[#loc20, #loc21])
#loc200 = loc(fused[#loc22, #loc23])
#loc201 = loc(fused[#loc24, #loc21])
#loc202 = loc(fused[#loc25, #loc3])
#loc203 = loc(fused[#loc26, #loc27])
#loc204 = loc(fused[#loc28, #loc29])
#loc205 = loc(fused[#loc30, #loc27])
#loc206 = loc(fused[#loc31, #loc32])
#loc207 = loc(fused[#loc40, #loc41])
#loc208 = loc(fused[#loc42, #loc43])
#loc209 = loc(fused[#loc44, #loc45])
#loc210 = loc(fused[#loc46, #loc47])
#loc211 = loc(fused[#loc48, #loc49])
#loc212 = loc(fused[#loc50, #loc51])
#loc213 = loc(fused[#loc53, #loc54])
#loc214 = loc(fused[#loc55, #loc56])
#loc215 = loc(fused[#loc57, #loc58])
#loc216 = loc(fused[#loc59, #loc60])
#loc217 = loc(fused[#loc61, #loc62])
#loc218 = loc(fused[#loc63, #loc64])
#loc219 = loc(fused[#loc66, #loc65])
#loc220 = loc(fused[#loc67, #loc68])
#loc221 = loc(fused[#loc69, #loc70])
#loc222 = loc(fused[#loc71, #loc68])
#loc223 = loc(fused[#loc73, #loc72])
#loc224 = loc(fused[#loc74, #loc75])
#loc225 = loc(fused[#loc76, #loc77])
#loc226 = loc(fused[#loc78, #loc79, #loc80, #loc75])
#loc227 = loc(fused[#loc82, #loc83])
#loc228 = loc(fused[#loc91, #loc92])
#loc229 = loc(fused[#loc93, #loc94])
#loc230 = loc(fused[#loc95, #loc96])
#loc231 = loc(fused[#loc97, #loc98])
#loc232 = loc(fused[#loc100, #loc99])
#loc233 = loc(fused[#loc101, #loc102])
#loc234 = loc(fused[#loc103, #loc104])
#loc235 = loc(fused[#loc105, #loc102])
#loc236 = loc(fused[#loc107, #loc106])
#loc237 = loc(fused[#loc108, #loc109])
#loc238 = loc(fused[#loc110, #loc111])
#loc239 = loc(fused[#loc112, #loc109])
#loc240 = loc(fused[#loc113, #loc114])
#loc241 = loc(fused[#loc123, #loc124])
#loc242 = loc(fused[#loc125, #loc126])
#loc243 = loc(fused[#loc127, #loc128])
#loc244 = loc(fused[#loc129, #loc130])
#loc245 = loc(fused[#loc131, #loc132])
#loc246 = loc(fused[#loc134, #loc133])
#loc247 = loc(fused[#loc135, #loc136])
#loc248 = loc(fused[#loc137, #loc138])
#loc249 = loc(fused[#loc139, #loc140, #loc141, #loc136])
#loc250 = loc(fused[#loc144, #loc122])
#loc251 = loc(fused[#loc145, #loc146])
#loc252 = loc(fused[#loc147, #loc148])
#loc253 = loc(fused[#loc149, #loc146])
#loc254 = loc(fused[#loc150, #loc151])
#loc255 = loc(fused[#loc159, #loc160])
#loc256 = loc(fused[#loc161, #loc162])
#loc257 = loc(fused[#loc163, #loc164])
#loc258 = loc(fused[#loc165, #loc166])
#loc259 = loc(fused[#loc168, #loc167])
#loc260 = loc(fused[#loc169, #loc170])
#loc261 = loc(fused[#loc171, #loc172])
#loc262 = loc(fused[#loc173, #loc170])
#loc263 = loc(fused[#loc175, #loc174])
#loc264 = loc(fused[#loc176, #loc177])
#loc265 = loc(fused[#loc178, #loc179])
#loc266 = loc(fused[#loc180, #loc177])
#loc267 = loc(fused[#loc181, #loc182])
